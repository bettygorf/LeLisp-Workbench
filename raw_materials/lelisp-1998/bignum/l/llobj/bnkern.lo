(loader '((title |bnkern.lo|)))
(defvar bn_digit_size 16)
(defvar bn_word_size 15)
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'bnkern)))
(add-feature 'kern)
(defvar #:ex:regret 0)
(loader'((fentry bnsettozero subr3)
(entry bnsettozero subr3)
(push (@ 101))
(push a1)
(push a2)
(push '0)
(push a3)
(mov '4 a4)
(jmp fillvector)
101
(eval ())
(return)
))
(loader'((fentry bnassign nsubr)
(entry bnassign nsubr)
(cnbeq a4 '5 101)
(mov 'bnassign a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(jmp bltvector)
102
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry bnsetdigit subr3)
(entry bnsetdigit subr3)
(hpmovx a3 a1 a2)
(mov a3 a1)
(return)
))
(loader'((fentry bngetdigit subr2)
(entry bngetdigit subr2)
(hpxmov a1 a2 a1)
(return)
))
(loader'((fentry bnnumdigits subr3)
(entry bnnumdigits subr3)
(push a3)
(push a2)
(push a1)
(cabne a3 '0 101)
(mov '1 a1)
(adjstk '3)
(return)
101
(plus a3 a2)
(mov a2 (& 2))
103
(mov (& 2) a4)
(diff '1 a4)
(mov a4 (& 2))
(cnble a4 (& 1) 104)
(hpxmov (& 0) a4 a3)
(cabne '0 a3 104)
(bra 103)
104
(mov (& 2) a4)
(diff (& 1) a4)
(plus '1 a4)
(mov a4 a1)
(adjstk '3)
(return)
))
(loader'((fentry bnnumleadingzerobitsindigit subr2)
(entry bnnumleadingzerobitsindigit subr2)
(hpxmov a1 a2 a4)
(push '0)
(push a4)
(cabne a4 '0 103)
(mov (cvalq bn_digit_size) a1)
(adjstk '2)
(return)
103
(cnblt (& 0) '0 104)
(mov (& 0) a4)
(lshift '1 a4)
(mov a4 (& 0))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 103)
104
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry bndoesdigitfitinword subr2)
(entry bndoesdigitfitinword subr2)
(hpxmov a1 a2 a4)
(cnblt a4 '0 101)
(mov '1 a1)
(return)
101
(mov '0 a1)
(return)
))
(loader'((fentry bnisdigitzero subr2)
(entry bnisdigitzero subr2)
(hpxmov a1 a2 a4)
(cabne '0 a4 101)
(mov '1 a1)
(return)
101
(mov '0 a1)
(return)
))
(loader'((fentry bnisdigitnormalized subr2)
(entry bnisdigitnormalized subr2)
(hpxmov a1 a2 a4)
(cnbge a4 '0 101)
(mov '1 a1)
(return)
101
(mov '0 a1)
(return)
))
(loader'((fentry bnisdigitodd subr2)
(entry bnisdigitodd subr2)
(hpxmov a1 a2 a1)
(land '1 a1)
(return)
))
(loader'((fentry bncomparedigits nsubr)
(entry bncomparedigits nsubr)
(cnbeq a4 '4 101)
(mov 'bncomparedigits a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) (& 2) a1)
(hpxmov (& 1) (& 0) a2)
(adjstk '4)
(jmp ex?)
))
(loader'((fentry bncomplement subr3)
(entry bncomplement subr3)
(push a3)
(push a2)
(push a1)
(plus a3 a2)
(mov a2 (& 2))
101
(mov (& 2) a4)
(diff '1 a4)
(mov a4 (& 2))
(cnblt a4 (& 1) 102)
(hpxmov (& 0) a4 a3)
(lxor '-1 a3)
(hpmovx a3 (& 0) a4)
(bra 101)
102
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry bnanddigits nsubr)
(entry bnanddigits nsubr)
(cnbeq a4 '4 101)
(mov 'bnanddigits a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) (& 2) a4)
(hpxmov (& 1) (& 0) a3)
(land a3 a4)
(hpmovx a4 (& 3) (& 2))
(mov a4 a1)
(adjstk '4)
(return)
))
(loader'((fentry bnordigits nsubr)
(entry bnordigits nsubr)
(cnbeq a4 '4 101)
(mov 'bnordigits a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) (& 2) a4)
(hpxmov (& 1) (& 0) a3)
(lor a3 a4)
(hpmovx a4 (& 3) (& 2))
(mov a4 a1)
(adjstk '4)
(return)
))
(loader'((fentry bnxordigits nsubr)
(entry bnxordigits nsubr)
(cnbeq a4 '4 101)
(mov 'bnxordigits a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) (& 2) a4)
(hpxmov (& 1) (& 0) a3)
(lxor a3 a4)
(hpmovx a4 (& 3) (& 2))
(mov a4 a1)
(adjstk '4)
(return)
))
(loader'((fentry bnshiftleft nsubr)
(entry bnshiftleft nsubr)
(cnbeq a4 '6 101)
(mov 'bnshiftleft a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 4) a4)
(plus (& 3) a4)
(mov (& 0) a3)
(diff (cvalq bn_digit_size) a3)
(push '0)
(push nil)
(push a3)
(push a4)
102
(cnbge (& 8) (& 0) 103)
(hpxmov (& 9) (& 8) a4)
(mov a4 (& 2))
(lshift (& 4) a4)
(lor (& 3) a4)
(hpmovx a4 (& 9) (& 8))
(mov (& 2) a4)
(lshift (& 1) a4)
(mov a4 (& 3))
(mov (& 8) a4)
(plus '1 a4)
(mov a4 (& 8))
(bra 102)
103
(hpmovx (& 3) (& 6) (& 5))
(mov (& 3) a1)
(adjstk '10)
(return)
))
(loader'((fentry bnshiftright nsubr)
(entry bnshiftright nsubr)
(cnbeq a4 '6 101)
(mov 'bnshiftright a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov '0 a4)
(diff (& 0) a4)
(mov a4 (& 0))
(mov (& 4) a3)
(plus (& 3) a3)
(plus (cvalq bn_digit_size) a4)
(push '0)
(push nil)
(push a4)
(push a3)
102
(mov (& 0) a4)
(diff '1 a4)
(mov a4 (& 0))
(cnblt a4 (& 8) 103)
(hpxmov (& 9) a4 a3)
(mov a3 (& 2))
(lshift (& 4) a3)
(lor (& 3) a3)
(hpmovx a3 (& 9) a4)
(mov (& 2) a3)
(lshift (& 1) a3)
(mov a3 (& 3))
(bra 102)
103
(hpmovx (& 3) (& 6) (& 5))
(mov (& 3) a1)
(adjstk '10)
(return)
))
(loader'((fentry bnaddcarry nsubr)
(entry bnaddcarry nsubr)
(cnbeq a4 '4 101)
(mov 'bnaddcarry a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov (& 2) a4)
(plus (& 1) a4)
(push a4)
(cabne (& 1) '0 102)
(mov '1 a3)
(bra 103)
102
(mov '0 a3)
103
(mov a3 (& 1))
104
(cabne (& 1) '0 105)
(cnbge (& 3) (& 0) 105)
(hpxmov (& 4) (& 3) a4)
(plus '1 a4)
(mov a4 (& 1))
(hpmovx a4 (& 4) (& 3))
(mov (& 3) a3)
(plus '1 a3)
(mov a3 (& 3))
(bra 104)
105
(cabne (& 1) '0 106)
(mov '1 a1)
(adjstk '5)
(return)
106
(mov '0 a1)
(adjstk '5)
(return)
))
(loader'((fentry bnadd nsubr)
(entry bnadd nsubr)
(cnbeq a4 '7 101)
(mov 'bnadd a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(mov (& 2) a4)
(plus (& 1) a4)
(mov (& 5) a3)
(plus (& 4) a3)
(push a3)
(push a4)
(mov (& 2) (cvalq #:ex:regret))
102
(cnbge (& 4) (& 0) 103)
(hpxmov (& 8) (& 7) a1)
(hpxmov (& 5) (& 4) a2)
(jcall ex+)
(hpmovx a1 (& 8) (& 7))
(mov (& 7) a4)
(plus '1 a4)
(mov a4 (& 7))
(mov (& 4) a4)
(plus '1 a4)
(mov a4 (& 4))
(bra 102)
103
(cabne (cvalq #:ex:regret) '0 104)
(mov '1 a4)
(bra 105)
104
(mov '0 a4)
105
(mov a4 (& 2))
106
(cabne (& 2) '0 107)
(cnbge (& 7) (& 1) 107)
(hpxmov (& 8) (& 7) a4)
(plus '1 a4)
(mov a4 (& 2))
(hpmovx a4 (& 8) (& 7))
(mov (& 7) a3)
(plus '1 a3)
(mov a3 (& 7))
(bra 106)
107
(cabne (& 2) '0 108)
(mov '1 a1)
(adjstk '9)
(return)
108
(mov '0 a1)
(adjstk '9)
(return)
))
(loader'((fentry bnsubtractborrow nsubr)
(entry bnsubtractborrow nsubr)
(cnbeq a4 '4 101)
(mov 'bnsubtractborrow a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov (& 2) a4)
(plus (& 1) a4)
(push a4)
(cabne (& 1) '0 104)
(mov '-1 (& 1))
104
(cabne (& 1) '-1 105)
(cnbge (& 3) (& 0) 105)
(hpxmov (& 4) (& 3) a4)
(diff '1 a4)
(mov a4 (& 1))
(hpmovx a4 (& 4) (& 3))
(mov (& 3) a3)
(plus '1 a3)
(mov a3 (& 3))
(bra 104)
105
(cabne (& 1) '-1 106)
(mov '0 a1)
(adjstk '5)
(return)
106
(mov '1 a1)
(adjstk '5)
(return)
))
(loader'((fentry bnsubtract nsubr)
(entry bnsubtract nsubr)
(cnbeq a4 '7 101)
(mov 'bnsubtract a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(mov (& 2) a4)
(plus (& 1) a4)
(mov (& 5) a3)
(plus (& 4) a3)
(push a3)
(push a4)
(mov (& 2) (cvalq #:ex:regret))
102
(cnbge (& 4) (& 0) 103)
(hpxmov (& 8) (& 7) a1)
(hpxmov (& 5) (& 4) a2)
(lxor '-1 a2)
(jcall ex+)
(hpmovx a1 (& 8) (& 7))
(mov (& 7) a4)
(plus '1 a4)
(mov a4 (& 7))
(mov (& 4) a4)
(plus '1 a4)
(mov a4 (& 4))
(bra 102)
103
(cabne (cvalq #:ex:regret) '0 104)
(mov '-1 a4)
(bra 105)
104
(mov '1 a4)
105
(mov a4 (& 2))
106
(cabne (& 2) '-1 107)
(cnbge (& 7) (& 1) 107)
(hpxmov (& 8) (& 7) a4)
(diff '1 a4)
(mov a4 (& 2))
(hpmovx a4 (& 8) (& 7))
(mov (& 7) a3)
(plus '1 a3)
(mov a3 (& 7))
(bra 106)
107
(cabne (& 2) '-1 108)
(mov '0 a1)
(adjstk '9)
(return)
108
(mov '1 a1)
(adjstk '9)
(return)
))
(loader'((fentry bnmultiplydigit nsubr)
(entry bnmultiplydigit nsubr)
(cnbeq a4 '8 101)
(mov 'bnmultiplydigit a1)
(mov '8 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 1) (& 0) a4)
(push a4)
(cabne a4 '0 102)
(mov '0 a1)
(adjstk '9)
(return)
102
(cabne a4 '1 104)
(push (@ 106))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push '0)
(mov '7 a4)
(jmp bnadd)
106
(eval ())
(adjstk '9)
(return)
104
(mov (& 4) a3)
(plus (& 3) a3)
(mov (& 7) a2)
(plus (& 6) a2)
(push a2)
(push a3)
(mov '0 (cvalq #:ex:regret))
107
(cnbge (& 6) (& 0) 109)
(hpxmov (& 7) (& 6) a1)
(hpxmov (& 10) (& 9) a3)
(mov (& 2) a2)
(jcall ex*)
(hpmovx a1 (& 10) (& 9))
(mov (& 9) a4)
(plus '1 a4)
(mov a4 (& 9))
(mov (& 6) a4)
(plus '1 a4)
(mov a4 (& 6))
(bra 107)
109
(cabeq (cvalq #:ex:regret) '0 110)
(cnbge (& 9) (& 1) 110)
(hpxmov (& 10) (& 9) a1)
(mov '0 a2)
(jcall ex+)
(hpmovx a1 (& 10) (& 9))
(mov (& 9) a4)
(plus '1 a4)
(mov a4 (& 9))
(bra 109)
110
(mov (cvalq #:ex:regret) a1)
(adjstk '11)
(return)
))
(loader'((fentry bndividedigit nsubr)
(entry bndividedigit nsubr)
(cnbeq a4 '9 101)
(mov 'bndividedigit a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(mov (& 3) a4)
(plus (& 2) a4)
(mov (& 7) a3)
(plus (& 2) a3)
(diff '1 a3)
(hpxmov (& 1) (& 0) a2)
(push a2)
(push a3)
(push a4)
(diff '1 a4)
(mov a4 (& 0))
(hpxmov (& 7) a4 a1)
(mov a1 (cvalq #:ex:regret))
102
(mov (& 0) a4)
(diff '1 a4)
(mov a4 (& 0))
(cnblt a4 (& 6) 103)
(mov (& 1) a3)
(diff '1 a3)
(mov a3 (& 1))
(push a3)
(hpxmov (& 8) a4 a1)
(mov (& 3) a2)
(jcall ex/)
(pop a4)
(hpmovx a1 (& 11) a4)
(bra 102)
103
(hpmovx (cvalq #:ex:regret) (& 9) (& 8))
(mov (cvalq #:ex:regret) a1)
(adjstk '12)
(return)
))
(loader'((fentry bnalloc subr1)
(entry bnalloc subr1)
(mov '0 a2)
(jmp makevector)
))
(loader'((fentry bncreate subr2)
(entry bncreate subr2)
(push a1)
(push a2)
(mov '0 a2)
(pop a1)
(jcall makevector)
(mov (& 0) (cdr a1))
(adjstk '1)
(return)
))
(loader'((fentry bnfree subr1)
(entry bnfree subr1)
(mov '1 a1)
(return)
))
(loader'((fentry bngettype subr1)
(entry bngettype subr1)
(mov (cdr a1) a1)
(return)
))
(loader'((fentry bnsettype subr2)
(entry bnsettype subr2)
(mov a2 (cdr a1))
(mov a2 a1)
(return)
))
(loader'((fentry bngetsize subr1)
(entry bngetsize subr1)
(hgsize a1 a1)
(return)
))
(defvar #:kern:tampon (bncreate 'n 2))
(loader'((fentry #:n:prin subr1)
(entry #:n:prin subr1)
(push a1)
(push nil)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push '16)
(mov '1 a4)
(jmp obase)
104
(eval ())
(mov (& 5) a1)
(jcall bngetsize)
(diff '1 a1)
(push a1)
105
(push (@ 107))
(push (& 1))
(push '0)
(mov '2 a4)
(jmp <)
107
(eval ())
(bfnil a1 106)
(push (@ 108))
(push (cvalq #:kern:tampon))
(push '0)
(push (& 9))
(push (& 4))
(push '1)
(mov '5 a4)
(jmp bnassign)
108
(eval ())
(mov '0 (& 5))
109
(push (@ 111))
(push (& 6))
(push (cvalq bn_digit_size))
(mov '2 a4)
(jmp <)
111
(eval ())
(btnil a1 110)
(push (@ 112))
(push (cvalq #:kern:tampon))
(push '0)
(push '1)
(push (cvalq #:kern:tampon))
(push '1)
(push '4)
(mov '6 a4)
(jmp bnshiftleft)
112
(eval ())
(push (@ 113))
(mov '1 a2)
(mov (cvalq #:kern:tampon) a1)
(jcall bngetdigit)
(push a1)
(mov '1 a4)
(jmp prin)
113
(eval ())
(push (@ 114))
(push (& 6))
(push '4)
(mov '2 a4)
(jmp |+|)
114
(eval ())
(mov a1 (& 5))
(bra 109)
110
(push (@ 115))
(push (& 1))
(push '-1)
(mov '2 a4)
(jmp |+|)
115
(eval ())
(mov a1 (& 0))
(bra 105)
106
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 116))
(push (& 4))
(mov '1 a4)
(jmp obase)
116
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '3)
(return)
))
(loader '((end)))
