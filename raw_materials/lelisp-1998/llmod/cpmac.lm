defmodule
compiler
files (
cpmac
)
export (
defmacro-open
make-macro-open
macro-openp
remove-macro-open
#:compiler:macroexpand
)
import
()
include
()

;;; Added automatically, don't type beyond this line.
cpexport (
(defmacro-open fsubr ())
(make-macro-open subr2 ())
(macro-openp subr1 ())
(remove-macro-open subr1 ())
(#:compiler:macroexpand subr1 ())
)
cpfunctions (
(#:compiler:macroexpand-internal subr2)
(#:compiler:macroexpand-internal-open subr2)
(#:compiler:macroexpand-internal-close subr2)
(#:compiler:mc:cond subr1)
(#:compiler:mc:dynamic-let subr1)
(#:compiler:mc:dynamic subr1)
(#:compiler:map subr3)
(#:compiler:map-result subr3)
(#:compiler:map-while subr3)
(#:compiler:map-next-res subr3)
(#:compiler:map-funcall subr2)
(#:compiler:map-next-arg subr2)
(#:compiler:mapvector subr1)
(#:compiler:mc:catcherror subr1)
(#:compiler:mc:errset subr1)
(#:compiler:mc:eval-when subr1)
(#:compiler:mc:time subr1)
)
cpimport
()
cpenv (
((putprop '#:sys-package:colon 't '#:complice:globalvar)
)((putprop '#:compiler:open-p 't '#:complice:globalvar)
)((putprop '#:compiler:exported-env 't '#:complice:globalvar)
)((putprop 'dynamic-flag 't '#:complice:globalvar)
)((defun #:compiler:map-funcall (corps fnt) (cond ((not (consp fnt)) (mcons 'funcall fnt corps)) ((memq (car fnt) '(function quote)) (if (and (symbolp (cadr fnt)) (memq (typefn (cadr fnt)) '(() fexpr fsubr))) (mcons 'funcall fnt corps) (cons (cadr fnt) corps))) ((eq (car fnt) 'lambda) (cons fnt corps)) ((eq (car fnt) 'flambda) (cons (cons 'lambda (cdr fnt)) corps)) ((eq (car fnt) 'mlambda) (mcons 'funcall fnt corps)) (t (mcons 'funcall fnt corps))))
))
