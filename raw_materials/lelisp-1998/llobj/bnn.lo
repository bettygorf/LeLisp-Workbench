(loader '((title |bnn.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'bnn)))
(add-feature 'n)
(defvar #:sys-package:colon 'n)
(defvar #:n:c0)
(defvar #:n:c-1)
(defvar #:n:creg)
(defvar #:n:qapp)
(defvar #:n:cdiv)
(defvar #:n:ntampon)
(loader'((entry fix->n subr2)
(push a1)
(push a2)
(mov '1 a2)
(pop a1)
(jcall bncreate)
(push a1)
(mov (& 1) a3)
(mov '0 a2)
(jcall bnsetdigit)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:n:boot subr0)
(entry #:n:boot subr0)
(mov 'n a2)
(mov '0 a1)
(call fix->n)
(mov a1 (cvalq #:n:c0))
(mov 'n a2)
(mov '0 a1)
(call fix->n)
(mov a1 (cvalq #:n:c-1))
(mov '1 a3)
(mov '0 a2)
(jcall bncomplement)
(mov 'n a2)
(mov '0 a1)
(call fix->n)
(mov a1 (cvalq #:n:creg))
(mov '2 a2)
(mov 'n a1)
(jcall bncreate)
(mov a1 (cvalq #:n:qapp))
(mov 'n a2)
(mov '0 a1)
(call fix->n)
(mov a1 (cvalq #:n:cdiv))
(mov '4 a2)
(mov 'n a1)
(jcall bncreate)
(mov a1 (cvalq #:n:ntampon))
(return)
))
(loader'((entry #:n:entretampon subr3)
(push a3)
(push a2)
(push a1)
(mov (cvalq #:n:ntampon) a1)
(jcall bngetsize)
(mov (& 1) a4)
(plus (& 2) a4)
(cnbge a1 a4 102)
(mov (& 1) a4)
(plus (& 2) a4)
(mov a4 a2)
(mov 'n a1)
(jcall bncreate)
(mov a1 (cvalq #:n:ntampon))
102
(push (@ 103))
(push (cvalq #:n:ntampon))
(push '0)
(push (& 3))
(push '0)
(push (& 6))
(mov '5 a4)
(jmp bnassign)
103
(eval ())
(mov (cvalq #:n:ntampon) a1)
(jcall bngetsize)
(diff (& 1) a1)
(mov a1 (& 2))
(cnble a1 '0 104)
(mov a1 a3)
(mov (& 1) a2)
(mov (cvalq #:n:ntampon) a1)
(adjstk '3)
(jmp bnsettozero)
104
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry bniszero subr3)
(entry bniszero subr3)
(push a2)
(push a1)
(jcall bnnumdigits)
(cnbne a1 '1 101)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall bnisdigitzero)
(cabeq a1 '0 101)
(mov '1 a1)
(adjstk '2)
(return)
101
(mov '0 a1)
(adjstk '2)
(return)
))
(loader'((fentry bncompare nsubr)
(entry bncompare nsubr)
(cnbeq a4 '6 101)
(mov 'bncompare a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 0) a2)
(mov (& 3) a1)
(jcall <?>)
(push a1)
(cnbne a1 '0 103)
(mov (& 5) a4)
(plus (& 4) a4)
(mov a4 (& 4))
(mov (& 2) a4)
(plus (& 1) a4)
(mov a4 (& 1))
104
(cabne (& 0) '0 103)
(mov (& 4) a4)
(diff '1 a4)
(mov a4 (& 4))
(cnblt a4 (& 5) 103)
(push (@ 106))
(push (& 7))
(push (& 6))
(push (& 6))
(mov (& 5) a4)
(diff '1 a4)
(mov a4 (& 5))
(push a4)
(mov '4 a4)
(jmp bncomparedigits)
106
(eval ())
(mov a1 (& 0))
(bra 104)
103
(mov (& 0) a1)
(adjstk '7)
(return)
))
(loader'((fentry bnnumbitsindigit subr2)
(entry bnnumbitsindigit subr2)
(push a2)
(push a1)
(jcall bnisdigitzero)
(cabeq a1 '0 101)
(mov '1 a1)
(adjstk '2)
(return)
101
(push (cvalq bn_digit_size))
(mov (& 2) a2)
(mov (& 1) a1)
(jcall bnnumleadingzerobitsindigit)
(pop a4)
(diff a1 a4)
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((fentry bnnumbits subr3)
(entry bnnumbits subr3)
(push a3)
(push a1)
(diff '1 a3)
(mov (cvalq bn_digit_size) a4)
(times a3 a4)
(push a4)
(plus (& 2) a2)
(diff '1 a2)
(mov (& 1) a1)
(jcall bnnumbitsindigit)
(pop a4)
(plus a1 a4)
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((fentry bndivide nsubr)
(entry bndivide nsubr)
(cnbeq a4 '6 101)
(mov 'bndivide a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(cnbne '1 (& 0) 102)
(push (@ 104))
(push (& 6))
(mov (& 6) a4)
(plus '1 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '9 a4)
(jmp bndividedigit)
104
(eval ())
(adjstk '6)
(return)
102
(mov (& 1) a4)
(plus (& 0) a4)
(diff '1 a4)
(mov a4 a2)
(mov (& 2) a1)
(jcall bnnumleadingzerobitsindigit)
(push a1)
(push (@ 105))
(push (& 4))
(push (& 4))
(push (& 4))
(push (cvalq #:n:c0))
(push '0)
(push a1)
(mov '6 a4)
(jmp bnshiftleft)
105
(eval ())
(push (@ 106))
(push (& 7))
(push (& 7))
(push (& 7))
(push (cvalq #:n:c0))
(push '0)
(push (& 6))
(mov '6 a4)
(jmp bnshiftleft)
106
(eval ())
(push (@ 107))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '6 a4)
(bra ndivide)
107
(eval ())
(push (@ 108))
(push (& 4))
(push (& 4))
(push (& 4))
(push (cvalq #:n:c0))
(push '0)
(push (& 6))
(mov '6 a4)
(jmp bnshiftright)
108
(eval ())
(push (@ 109))
(push (& 7))
(push (& 7))
(push (& 4))
(push (cvalq #:n:c0))
(push '0)
(push (& 6))
(mov '6 a4)
(jmp bnshiftright)
109
(eval ())
(adjstk '7)
(return)
))
(loader'((entry ndivide nsubr)
(push (@ 101))
(push (cvalq #:n:cdiv))
(push '0)
(push (& 5))
(mov (& 5) a4)
(plus (& 4) a4)
(diff '1 a4)
(push a4)
(push '1)
(mov '5 a4)
(jmp bnassign)
101
(eval ())
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall bncomplement)
(push (@ 102))
(push (& 3))
(push (& 3))
(push (& 3))
(push '1)
(mov '4 a4)
(jmp bnaddcarry)
102
(eval ())
(mov (& 4) a4)
(plus (& 3) a4)
(mov a4 (& 3))
(diff (& 0) a4)
(push a4)
103
(mov (& 0) a4)
(diff '1 a4)
(mov a4 (& 0))
(cnblt a4 (& 5) 104)
(push (@ 107))
(push (& 7))
(mov (& 6) a3)
(diff '1 a3)
(mov a3 (& 6))
(push a3)
(push (cvalq #:n:cdiv))
(push '0)
(mov '4 a4)
(jmp bncomparedigits)
107
(eval ())
(cabne '0 a1 105)
(push (@ 108))
(push (cvalq #:n:qapp))
(push '0)
(push (cvalq #:n:c-1))
(push '0)
(push '1)
(mov '5 a4)
(jmp bnassign)
108
(eval ())
(bra 106)
105
(push (@ 109))
(push (cvalq #:n:qapp))
(push '0)
(push (cvalq #:n:qapp))
(push '1)
(push (& 11))
(mov (& 10) a4)
(diff '1 a4)
(push a4)
(push '2)
(push (cvalq #:n:cdiv))
(push '0)
(mov '9 a4)
(jmp bndividedigit)
109
(eval ())
106
(push (@ 110))
(push (& 7))
(push (& 2))
(mov (& 4) a4)
(plus '1 a4)
(push a4)
(push (& 7))
(push (& 7))
(push (& 7))
(push (cvalq #:n:qapp))
(push '0)
(mov '8 a4)
(jmp bnmultiplydigit)
110
(eval ())
111
(push (@ 113))
(push (& 7))
(push (& 6))
(push (cvalq #:n:qapp))
(push '0)
(mov '4 a4)
(jmp bncomparedigits)
113
(eval ())
(mov '0 a2)
(jcall <>)
(btnil a1 103)
(mov (& 1) a3)
(mov (& 2) a2)
(mov (& 3) a1)
(jcall bncomplement)
(push (@ 114))
(push (& 4))
(push (& 4))
(push (& 4))
(push '1)
(mov '4 a4)
(jmp bnaddcarry)
114
(eval ())
(push (@ 115))
(push (& 7))
(push (& 2))
(mov (& 4) a4)
(plus '1 a4)
(push a4)
(push (& 7))
(push (& 7))
(push (& 7))
(push '0)
(mov '7 a4)
(jmp bnadd)
115
(eval ())
(push (@ 116))
(push (& 7))
(push (& 6))
(push '1)
(push (cvalq #:n:c-1))
(push '0)
(push '1)
(push '0)
(mov '7 a4)
(jmp bnadd)
116
(eval ())
(push (@ 117))
(push (cvalq #:n:qapp))
(push '0)
(push '1)
(push (cvalq #:n:c-1))
(push '0)
(push '1)
(push '0)
(mov '7 a4)
(jmp bnadd)
117
(eval ())
(mov (& 1) a3)
(mov (& 2) a2)
(mov (& 3) a1)
(jcall bncomplement)
(push (@ 118))
(push (& 4))
(push (& 4))
(push (& 4))
(push '1)
(mov '4 a4)
(jmp bnaddcarry)
118
(eval ())
(bra 111)
104
(adjstk '1)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall bncomplement)
(push (@ 119))
(push (& 3))
(push (& 3))
(push (& 3))
(push '1)
(mov '4 a4)
(jmp bnaddcarry)
119
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry bnmultiply nsubr)
(entry bnmultiply nsubr)
(cnbeq a4 '9 101)
(mov 'bnmultiply a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(push '0)
102
(cnble (& 1) '0 103)
(push (@ 104))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '8 a4)
(jmp bnmultiplydigit)
104
(eval ())
(mov (& 0) a4)
(plus a1 a4)
(mov a4 (& 0))
(mov (& 8) a4)
(plus '1 a4)
(mov a4 (& 8))
(mov (& 7) a4)
(diff '1 a4)
(mov a4 (& 7))
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(mov (& 1) a4)
(diff '1 a4)
(mov a4 (& 1))
(bra 102)
103
(mov (& 0) a1)
(adjstk '10)
(return)
))
(defvar bn_kara_limit 25)
(defvar bn_max_size_divided_by_two 4095)
(synonym 'bnmultiplyplain 'bnmultiply)
(loader'((fentry bnmultiplykaratsuba nsubr)
(entry bnmultiplykaratsuba nsubr)
(cnbeq a4 '9 101)
(mov 'bnmultiplykaratsuba a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(cnble (& 0) (cvalq bn_max_size_divided_by_two) 102)
(push (@ 104))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '9 a4)
(jmp bnmultiplyplain)
104
(eval ())
(adjstk '9)
(return)
102
(mov (& 3) a4)
(quo (& 0) a4)
(mov (& 3) a3)
(rem (& 0) a3)
(mov (& 0) a2)
(plus (& 0) a2)
(push '0)
(push a2)
(push a3)
(push a4)
(cnblt (& 4) (cvalq bn_kara_limit) 107)
(mov a2 a3)
(mov '0 a2)
(mov (& 9) a1)
(call #:n:entretampon)
107
(cnble (& 0) '0 108)
(push (@ 109))
(push (& 13))
(mov (& 13) a4)
(plus (& 4) a4)
(push a4)
(mov (& 13) a4)
(diff (& 5) a4)
(push a4)
(push (@ 110))
(push (& 14))
(push (& 14))
(push (& 13))
(push (& 13))
(push (& 21))
(push (& 21))
(push (cvalq #:n:ntampon))
(push '0)
(push (& 17))
(mov '9 a4)
(bra b+b*b_kara)
110
(eval ())
(push a1)
(mov '4 a4)
(jmp bnaddcarry)
109
(eval ())
(mov (& 3) a4)
(plus a1 a4)
(mov a4 (& 3))
(mov (& 11) a4)
(plus (& 4) a4)
(mov a4 (& 11))
(mov (& 10) a4)
(diff (& 4) a4)
(mov a4 (& 10))
(mov (& 8) a4)
(plus (& 4) a4)
(mov a4 (& 8))
(mov (& 0) a4)
(diff '1 a4)
(mov a4 (& 0))
(bra 107)
108
(cnble (& 1) '0 112)
(push (@ 113))
(push (& 13))
(push (& 13))
(push (& 13))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 16))
(push (& 16))
(push (& 10))
(mov '9 a4)
(jmp bnmultiply)
113
(eval ())
(mov (& 3) a4)
(plus a1 a4)
(mov a4 (& 3))
112
(mov (& 3) a1)
(adjstk '13)
(return)
))
(loader'((fentry bnkaraswitch subr1)
(entry bnkaraswitch subr1)
(btnil a1 101)
(mov 'bnmultiplykaratsuba a2)
(mov 'bnmultiply a1)
(jmp synonym)
101
(mov 'bnmultiplyplain a2)
(mov 'bnmultiply a1)
(jmp synonym)
))
(loader'((entry b+b*b_kara nsubr)
(cnblt (cvalq bn_kara_limit) (& 0) 101)
(push (@ 103))
(push (& 5))
(push (& 5))
(mov (& 3) a4)
(times '2 a4)
(push a4)
(push (& 12))
(push (& 12))
(push (& 6))
(push (& 13))
(push (& 13))
(push (& 9))
(mov '9 a4)
(jmp bnmultiplyplain)
103
(eval ())
(adjstk '9)
(return)
101
(mov (& 0) a1)
(jcall oddp)
(btnil a1 104)
(push (@ 106))
(push (& 9))
(mov (& 9) a4)
(plus '1 a4)
(push a4)
(push (& 9))
(mov (& 9) a4)
(plus '1 a4)
(push a4)
(push (& 9))
(mov (& 9) a4)
(plus '2 a4)
(push a4)
(push (& 9))
(push (& 9))
(mov (& 9) a4)
(diff '1 a4)
(push a4)
(mov '9 a4)
(bra b+b*b_kara)
106
(eval ())
(push a1)
(push a1)
(push (@ 107))
(push (& 7))
(push (& 7))
(mov (& 5) a4)
(times '2 a4)
(push a4)
(push (& 14))
(push (& 14))
(push (& 8))
(push (& 15))
(push (& 15))
(mov '8 a4)
(jmp bnmultiplydigit)
107
(eval ())
(pop a4)
(plus a1 a4)
(mov a4 (& 0))
(push a4)
(push (@ 108))
(push (& 7))
(mov (& 7) a3)
(plus '1 a3)
(push a3)
(mov (& 5) a3)
(times '2 a3)
(diff '1 a3)
(push a3)
(push (& 12))
(mov (& 12) a3)
(plus '1 a3)
(push a3)
(mov (& 8) a3)
(diff '1 a3)
(push a3)
(push (& 17))
(push (& 17))
(mov '8 a4)
(jmp bnmultiplydigit)
108
(eval ())
(pop a4)
(plus a1 a4)
(mov a4 a1)
(adjstk '10)
(return)
104
(mov '2 a2)
(mov (& 0) a1)
(jcall quo)
(push a1)
(push '0)
(push '0)
(mov (& 4) a4)
(plus a1 a4)
(push a4)
(plus a1 a4)
(push a4)
(mov (& 8) a3)
(plus a1 a3)
(push a3)
(plus a1 a3)
(push a3)
(plus a1 a3)
(push a3)
(mov (& 15) a2)
(plus a1 a2)
(push a2)
(mov (& 14) a4)
(plus a1 a4)
(push a4)
(push (@ 109))
(push (& 13))
(push (& 13))
(push (& 21))
(push a2)
(push a1)
(mov '5 a4)
(jmp bnassign)
109
(eval ())
(push (@ 110))
(push (& 13))
(push (& 8))
(push (& 19))
(push (& 4))
(push (& 14))
(mov '5 a4)
(jmp bnassign)
110
(eval ())
(push (@ 111))
(push (& 13))
(push (& 13))
(push (& 12))
(push (& 22))
(push (& 22))
(push (& 15))
(push '0)
(mov '7 a4)
(jmp bnadd)
111
(eval ())
(mov a1 (& 8))
(push (@ 112))
(push (& 13))
(push (& 8))
(push (& 12))
(push (& 20))
(push (& 20))
(push (& 15))
(push '0)
(mov '7 a4)
(jmp bnadd)
112
(eval ())
(mov a1 (& 7))
(cabeq '0 (& 8) 114)
(push a1)
(push (@ 115))
(push (& 16))
(push (& 6))
(push (& 13))
(push (& 17))
(push (& 12))
(push (& 16))
(push '0)
(mov '7 a4)
(jmp bnadd)
115
(eval ())
(pop a4)
(plus a1 a4)
(mov a4 (& 8))
114
(cabeq '0 (& 7) 117)
(push (@ 118))
(push (& 15))
(push (& 5))
(push (& 12))
(push (& 16))
(push (& 16))
(push (& 15))
(push '0)
(mov '7 a4)
(jmp bnadd)
118
(eval ())
(mov (& 8) a4)
(plus a1 a4)
(mov a4 (& 8))
117
(push (@ 119))
(push (& 13))
(push (& 13))
(push (& 15))
(push (& 10))
(push (& 19))
(push (& 10))
(push (& 19))
(push (& 13))
(push (& 18))
(mov '9 a4)
(bra b+b*b_kara)
119
(eval ())
(mov (& 8) a4)
(plus a1 a4)
(mov a4 (& 8))
(mov (& 10) a3)
(mov (& 11) a2)
(mov (& 12) a1)
(jcall bnsettozero)
(push (@ 120))
(push (& 19))
(push (& 19))
(push (& 19))
(push (& 19))
(push (& 17))
(push (& 17))
(push (& 19))
(push (& 13))
(push (& 18))
(mov '9 a4)
(bra b+b*b_kara)
120
(eval ())
(push (@ 121))
(push (& 15))
(push (& 6))
(push (& 13))
(push (& 16))
(push (& 16))
(push (& 16))
(push '1)
(mov '7 a4)
(jmp bnsubtract)
121
(eval ())
(diff '1 a1)
(mov (& 8) a4)
(plus a1 a4)
(mov a4 (& 8))
(push a4)
(push (@ 122))
(push (& 16))
(push (& 16))
(mov (& 14) a3)
(plus (& 13) a3)
(push a3)
(push (& 17))
(push (& 17))
(push (& 17))
(push '0)
(mov '7 a4)
(jmp bnadd)
122
(eval ())
(pop a4)
(plus a1 a4)
(mov a4 (& 8))
(mov (& 10) a3)
(mov (& 11) a2)
(mov (& 12) a1)
(jcall bnsettozero)
(push (@ 123))
(push (& 19))
(push (& 3))
(push (& 19))
(push (& 4))
(push (& 17))
(push (& 17))
(push (& 19))
(push (& 13))
(push (& 18))
(mov '9 a4)
(bra b+b*b_kara)
123
(eval ())
(push (@ 124))
(push (& 15))
(push (& 6))
(push (& 13))
(push (& 16))
(push (& 16))
(push (& 16))
(push '1)
(mov '7 a4)
(jmp bnsubtract)
124
(eval ())
(diff '1 a1)
(mov (& 8) a4)
(plus a1 a4)
(mov a4 (& 8))
(push (@ 125))
(push (& 15))
(push (& 5))
(push (& 13))
(push (& 16))
(push (& 16))
(push (& 16))
(push '0)
(mov '7 a4)
(jmp bnadd)
125
(eval ())
(mov a1 (& 7))
126
(cnble (& 8) '0 127)
(push (@ 128))
(push (& 15))
(push (& 4))
(push (& 12))
(push '1)
(mov '4 a4)
(jmp bnaddcarry)
128
(eval ())
(mov (& 7) a4)
(plus a1 a4)
(mov a4 (& 7))
(mov (& 8) a4)
(diff '1 a4)
(mov a4 (& 8))
(bra 126)
127
(mov (& 7) a1)
(adjstk '19)
(return)
))
(#:n:boot)
(loader '((end)))
