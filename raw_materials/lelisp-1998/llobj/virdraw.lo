(loader '((title |virdraw.lo|)))
(defvar #:display:dumpdevice (if (boundp '#:display:dumpdevice) #:display:dumpdevice ()))
(defvar #:display:dumpsilent)
(defvar #:sys-package:colon 'display)
(loader'((fentry draw-cursor subr3)
(entry draw-cursor subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'draw-cursor a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-cursor a1)
(jcall error)
104
(push (cvalq #:display:current-display))
(bfnil (& 0) 106)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-cursor a1)
(jcall error)
106
(hpxmov (& 0) '8 a4)
(btnil a4 107)
(btnil (cvalq #:display:dumpdevice) 110)
(push (@ 111))
(push (@ 112))
(push '#:display:dump)
(push 'draw-cursor)
(mov '2 a4)
(jmp getfn)
112
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp funcall)
111
(eval ())
110
(btnil (cvalq #:display:dumpdevice) 115)
(bfnil (cvalq #:display:dumpsilent) 113)
115
(push (@ 116))
(push 'draw-cursor)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
116
(eval ())
(adjstk '4)
(return)
113
(mov nil a1)
(adjstk '4)
(return)
107
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:draw-cursor nsubr)
(entry #:display:draw-cursor nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-cursor a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-substring nsubr)
(entry draw-substring nsubr)
(cnbeq a4 '5 101)
(mov 'draw-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(btfix (& 4) 103)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'draw-substring a1)
(jcall error)
103
(btfix (& 3) 105)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'draw-substring a1)
(jcall error)
105
(btstrg (& 2) 107)
(mov (& 2) a3)
(mov 'errnsa a2)
(mov 'draw-substring a1)
(jcall error)
107
(btfix (& 1) 109)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-substring a1)
(jcall error)
109
(btfix (& 0) 111)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'draw-substring a1)
(jcall error)
111
(push (cvalq #:display:current-display))
(bfnil (& 0) 113)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-substring a1)
(jcall error)
113
(hpxmov (& 0) '8 a4)
(btnil a4 114)
(btnil (cvalq #:display:dumpdevice) 117)
(push (@ 118))
(push (@ 119))
(push '#:display:dump)
(push 'draw-substring)
(mov '2 a4)
(jmp getfn)
119
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp funcall)
118
(eval ())
117
(btnil (cvalq #:display:dumpdevice) 122)
(bfnil (cvalq #:display:dumpsilent) 120)
122
(push (@ 123))
(push 'draw-substring)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp send)
123
(eval ())
(adjstk '6)
(return)
120
(mov nil a1)
(adjstk '6)
(return)
114
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:draw-substring nsubr)
(entry #:display:draw-substring nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-substring a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-cn subr3)
(entry draw-cn subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'draw-cn a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-cn a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'draw-cn a1)
(jcall error)
106
(push (cvalq #:display:current-display))
(bfnil (& 0) 108)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-cn a1)
(jcall error)
108
(hpxmov (& 0) '8 a4)
(btnil a4 109)
(btnil (cvalq #:display:dumpdevice) 112)
(push (@ 113))
(push (@ 114))
(push '#:display:dump)
(push 'draw-cn)
(mov '2 a4)
(jmp getfn)
114
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp funcall)
113
(eval ())
112
(btnil (cvalq #:display:dumpdevice) 117)
(bfnil (cvalq #:display:dumpsilent) 115)
117
(push (@ 118))
(push 'draw-cn)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '4)
(return)
115
(mov nil a1)
(adjstk '4)
(return)
109
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:draw-cn nsubr)
(entry #:display:draw-cn nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-cn a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:draw-substring-nobackground nsubr)
(entry #:display:draw-substring-nobackground nsubr)
(cnbeq a4 '4 101)
(mov '#:display:draw-substring-nobackground a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 4))
(push (& 4))
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp draw-substring)
102
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry draw-substring-nobackground nsubr)
(entry draw-substring-nobackground nsubr)
(cnbeq a4 '5 101)
(mov 'draw-substring-nobackground a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(btfix (& 4) 103)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'draw-substring-nobackground a1)
(jcall error)
103
(btfix (& 3) 105)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'draw-substring-nobackground a1)
(jcall error)
105
(btstrg (& 2) 107)
(mov (& 2) a3)
(mov 'errnsa a2)
(mov 'draw-substring-nobackground a1)
(jcall error)
107
(btfix (& 1) 109)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-substring-nobackground a1)
(jcall error)
109
(btfix (& 0) 111)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'draw-substring-nobackground a1)
(jcall error)
111
(push (cvalq #:display:current-display))
(bfnil (& 0) 113)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-substring-nobackground a1)
(jcall error)
113
(hpxmov (& 0) '8 a4)
(btnil a4 114)
(btnil (cvalq #:display:dumpdevice) 117)
(push (@ 118))
(push (@ 119))
(push '#:display:dump)
(push 'draw-substring-nobackground)
(mov '2 a4)
(jmp getfn)
119
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp funcall)
118
(eval ())
117
(btnil (cvalq #:display:dumpdevice) 122)
(bfnil (cvalq #:display:dumpsilent) 120)
122
(push (@ 123))
(push 'draw-substring-nobackground)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp send)
123
(eval ())
(adjstk '6)
(return)
120
(mov nil a1)
(adjstk '6)
(return)
114
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:draw-cn-nobackground subr3)
(entry #:display:draw-cn-nobackground subr3)
(jmp draw-cn)
))
(loader'((fentry draw-cn-nobackground subr3)
(entry draw-cn-nobackground subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'draw-cn-nobackground a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-cn-nobackground a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'draw-cn-nobackground a1)
(jcall error)
106
(push (cvalq #:display:current-display))
(bfnil (& 0) 108)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-cn-nobackground a1)
(jcall error)
108
(hpxmov (& 0) '8 a4)
(btnil a4 109)
(btnil (cvalq #:display:dumpdevice) 112)
(push (@ 113))
(push (@ 114))
(push '#:display:dump)
(push 'draw-cn-nobackground)
(mov '2 a4)
(jmp getfn)
114
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp funcall)
113
(eval ())
112
(btnil (cvalq #:display:dumpdevice) 117)
(bfnil (cvalq #:display:dumpsilent) 115)
117
(push (@ 118))
(push 'draw-cn-nobackground)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '4)
(return)
115
(mov nil a1)
(adjstk '4)
(return)
109
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry draw-point subr2)
(entry draw-point subr2)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'draw-point a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-point a1)
(jcall error)
104
(push (cvalq #:display:current-display))
(bfnil (& 0) 106)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-point a1)
(jcall error)
106
(hpxmov (& 0) '8 a4)
(btnil a4 107)
(btnil (cvalq #:display:dumpdevice) 110)
(push (@ 111))
(push (@ 112))
(push '#:display:dump)
(push 'draw-point)
(mov '2 a4)
(jmp getfn)
112
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(mov '5 a4)
(jmp funcall)
111
(eval ())
110
(btnil (cvalq #:display:dumpdevice) 115)
(bfnil (cvalq #:display:dumpsilent) 113)
115
(push (@ 116))
(push 'draw-point)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(mov '5 a4)
(jmp send)
116
(eval ())
(adjstk '3)
(return)
113
(mov nil a1)
(adjstk '3)
(return)
107
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry #:display:draw-point nsubr)
(entry #:display:draw-point nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-point a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-polymarker subr3)
(entry draw-polymarker subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'draw-polymarker a1)
(jcall error)
102
(btvect (& 1) 104)
(mov (& 1) a3)
(mov 'errvec a2)
(mov 'draw-polymarker a1)
(jcall error)
104
(btvect (& 2) 106)
(mov (& 2) a3)
(mov 'errvec a2)
(mov 'draw-polymarker a1)
(jcall error)
106
(push (cvalq #:display:current-display))
(bfnil (& 0) 108)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-polymarker a1)
(jcall error)
108
(hpxmov (& 0) '8 a4)
(btnil a4 109)
(btnil (cvalq #:display:dumpdevice) 112)
(push (@ 113))
(push (@ 114))
(push '#:display:dump)
(push 'draw-polymarker)
(mov '2 a4)
(jmp getfn)
114
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp funcall)
113
(eval ())
112
(btnil (cvalq #:display:dumpdevice) 117)
(bfnil (cvalq #:display:dumpsilent) 115)
117
(push (@ 118))
(push 'draw-polymarker)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '4)
(return)
115
(mov nil a1)
(adjstk '4)
(return)
109
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:draw-polymarker nsubr)
(entry #:display:draw-polymarker nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-polymarker a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-line nsubr)
(entry draw-line nsubr)
(cnbeq a4 '4 101)
(mov 'draw-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(btfix (& 3) 103)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'draw-line a1)
(jcall error)
103
(btfix (& 2) 105)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'draw-line a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-line a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'draw-line a1)
(jcall error)
109
(push (cvalq #:display:current-display))
(bfnil (& 0) 111)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-line a1)
(jcall error)
111
(hpxmov (& 0) '8 a4)
(btnil a4 112)
(btnil (cvalq #:display:dumpdevice) 115)
(push (@ 116))
(push (@ 117))
(push '#:display:dump)
(push 'draw-line)
(mov '2 a4)
(jmp getfn)
117
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp funcall)
116
(eval ())
115
(btnil (cvalq #:display:dumpdevice) 120)
(bfnil (cvalq #:display:dumpsilent) 118)
120
(push (@ 121))
(push 'draw-line)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp send)
121
(eval ())
(adjstk '5)
(return)
118
(mov nil a1)
(adjstk '5)
(return)
112
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:draw-line nsubr)
(entry #:display:draw-line nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-line a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-polyline subr3)
(entry draw-polyline subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'draw-polyline a1)
(jcall error)
102
(btvect (& 1) 104)
(mov (& 1) a3)
(mov 'errvec a2)
(mov 'draw-polyline a1)
(jcall error)
104
(btvect (& 2) 106)
(mov (& 2) a3)
(mov 'errvec a2)
(mov 'draw-polyline a1)
(jcall error)
106
(push (cvalq #:display:current-display))
(bfnil (& 0) 108)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-polyline a1)
(jcall error)
108
(hpxmov (& 0) '8 a4)
(btnil a4 109)
(btnil (cvalq #:display:dumpdevice) 112)
(push (@ 113))
(push (@ 114))
(push '#:display:dump)
(push 'draw-polyline)
(mov '2 a4)
(jmp getfn)
114
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp funcall)
113
(eval ())
112
(btnil (cvalq #:display:dumpdevice) 117)
(bfnil (cvalq #:display:dumpsilent) 115)
117
(push (@ 118))
(push 'draw-polyline)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '4)
(return)
115
(mov nil a1)
(adjstk '4)
(return)
109
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:draw-polyline nsubr)
(entry #:display:draw-polyline nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-polyline a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-rectangle nsubr)
(entry draw-rectangle nsubr)
(cnbeq a4 '4 101)
(mov 'draw-rectangle a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(btfix (& 3) 103)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'draw-rectangle a1)
(jcall error)
103
(btfix (& 2) 105)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'draw-rectangle a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-rectangle a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'draw-rectangle a1)
(jcall error)
109
(push (cvalq #:display:current-display))
(bfnil (& 0) 111)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-rectangle a1)
(jcall error)
111
(hpxmov (& 0) '8 a4)
(btnil a4 112)
(btnil (cvalq #:display:dumpdevice) 115)
(push (@ 116))
(push (@ 117))
(push '#:display:dump)
(push 'draw-rectangle)
(mov '2 a4)
(jmp getfn)
117
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp funcall)
116
(eval ())
115
(btnil (cvalq #:display:dumpdevice) 120)
(bfnil (cvalq #:display:dumpsilent) 118)
120
(push (@ 121))
(push 'draw-rectangle)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp send)
121
(eval ())
(adjstk '5)
(return)
118
(mov nil a1)
(adjstk '5)
(return)
112
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:draw-rectangle nsubr)
(entry #:display:draw-rectangle nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-rectangle a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry fill-rectangle nsubr)
(entry fill-rectangle nsubr)
(cnbeq a4 '4 101)
(mov 'fill-rectangle a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(btfix (& 3) 103)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'fill-rectangle a1)
(jcall error)
103
(btfix (& 2) 105)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'fill-rectangle a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'fill-rectangle a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'fill-rectangle a1)
(jcall error)
109
(push (cvalq #:display:current-display))
(bfnil (& 0) 111)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'fill-rectangle a1)
(jcall error)
111
(hpxmov (& 0) '8 a4)
(btnil a4 112)
(btnil (cvalq #:display:dumpdevice) 115)
(push (@ 116))
(push (@ 117))
(push '#:display:dump)
(push 'fill-rectangle)
(mov '2 a4)
(jmp getfn)
117
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp funcall)
116
(eval ())
115
(btnil (cvalq #:display:dumpdevice) 120)
(bfnil (cvalq #:display:dumpsilent) 118)
120
(push (@ 121))
(push 'fill-rectangle)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp send)
121
(eval ())
(adjstk '5)
(return)
118
(mov nil a1)
(adjstk '5)
(return)
112
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:fill-rectangle nsubr)
(entry #:display:fill-rectangle nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'fill-rectangle a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry highlight-rectangle nsubr)
(entry highlight-rectangle nsubr)
(cnbeq a4 '4 101)
(mov 'highlight-rectangle a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(btfix (& 3) 103)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'highlight-rectangle a1)
(jcall error)
103
(btfix (& 2) 105)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'highlight-rectangle a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'highlight-rectangle a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'highlight-rectangle a1)
(jcall error)
109
(push (cvalq #:display:current-display))
(bfnil (& 0) 111)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'highlight-rectangle a1)
(jcall error)
111
(hpxmov (& 0) '8 a4)
(btnil a4 112)
(btnil (cvalq #:display:dumpdevice) 115)
(push (@ 116))
(push (@ 117))
(push '#:display:dump)
(push 'highlight-rectangle)
(mov '2 a4)
(jmp getfn)
117
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp funcall)
116
(eval ())
115
(btnil (cvalq #:display:dumpdevice) 120)
(bfnil (cvalq #:display:dumpsilent) 118)
120
(push (@ 121))
(push 'highlight-rectangle)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp send)
121
(eval ())
(adjstk '5)
(return)
118
(mov nil a1)
(adjstk '5)
(return)
112
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:highlight-rectangle nsubr)
(entry #:display:highlight-rectangle nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'highlight-rectangle a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry fill-area subr3)
(entry fill-area subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'fill-area a1)
(jcall error)
102
(btvect (& 1) 104)
(mov (& 1) a3)
(mov 'errvec a2)
(mov 'fill-area a1)
(jcall error)
104
(btvect (& 2) 106)
(mov (& 2) a3)
(mov 'errvec a2)
(mov 'fill-area a1)
(jcall error)
106
(push (cvalq #:display:current-display))
(bfnil (& 0) 108)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'fill-area a1)
(jcall error)
108
(hpxmov (& 0) '8 a4)
(btnil a4 109)
(btnil (cvalq #:display:dumpdevice) 112)
(push (@ 113))
(push (@ 114))
(push '#:display:dump)
(push 'fill-area)
(mov '2 a4)
(jmp getfn)
114
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp funcall)
113
(eval ())
112
(btnil (cvalq #:display:dumpdevice) 117)
(bfnil (cvalq #:display:dumpsilent) 115)
117
(push (@ 118))
(push 'fill-area)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '4)
(return)
115
(mov nil a1)
(adjstk '4)
(return)
109
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:fill-area nsubr)
(entry #:display:fill-area nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'fill-area a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-ellipse nsubr)
(entry draw-ellipse nsubr)
(cnbeq a4 '4 101)
(mov 'draw-ellipse a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(btfix (& 3) 103)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'draw-ellipse a1)
(jcall error)
103
(btfix (& 2) 105)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'draw-ellipse a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-ellipse a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'draw-ellipse a1)
(jcall error)
109
(push (cvalq #:display:current-display))
(bfnil (& 0) 111)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-ellipse a1)
(jcall error)
111
(hpxmov (& 0) '8 a4)
(btnil a4 112)
(btnil (cvalq #:display:dumpdevice) 115)
(push (@ 116))
(push (@ 117))
(push '#:display:dump)
(push 'draw-ellipse)
(mov '2 a4)
(jmp getfn)
117
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp funcall)
116
(eval ())
115
(btnil (cvalq #:display:dumpdevice) 120)
(bfnil (cvalq #:display:dumpsilent) 118)
120
(push (@ 121))
(push 'draw-ellipse)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp send)
121
(eval ())
(adjstk '5)
(return)
118
(mov nil a1)
(adjstk '5)
(return)
112
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:draw-ellipse nsubr)
(entry #:display:draw-ellipse nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-ellipse a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry fill-ellipse nsubr)
(entry fill-ellipse nsubr)
(cnbeq a4 '4 101)
(mov 'fill-ellipse a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(btfix (& 3) 103)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'fill-ellipse a1)
(jcall error)
103
(btfix (& 2) 105)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'fill-ellipse a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'fill-ellipse a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'fill-ellipse a1)
(jcall error)
109
(push (cvalq #:display:current-display))
(bfnil (& 0) 111)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'fill-ellipse a1)
(jcall error)
111
(hpxmov (& 0) '8 a4)
(btnil a4 112)
(btnil (cvalq #:display:dumpdevice) 115)
(push (@ 116))
(push (@ 117))
(push '#:display:dump)
(push 'fill-ellipse)
(mov '2 a4)
(jmp getfn)
117
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp funcall)
116
(eval ())
115
(btnil (cvalq #:display:dumpdevice) 120)
(bfnil (cvalq #:display:dumpsilent) 118)
120
(push (@ 121))
(push 'fill-ellipse)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '7 a4)
(jmp send)
121
(eval ())
(adjstk '5)
(return)
118
(mov nil a1)
(adjstk '5)
(return)
112
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:fill-ellipse nsubr)
(entry #:display:fill-ellipse nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'fill-ellipse a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-circle subr3)
(entry draw-circle subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'draw-circle a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-circle a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'draw-circle a1)
(jcall error)
106
(push (cvalq #:display:current-display))
(bfnil (& 0) 108)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-circle a1)
(jcall error)
108
(hpxmov (& 0) '8 a4)
(btnil a4 109)
(btnil (cvalq #:display:dumpdevice) 112)
(push (@ 113))
(push (@ 114))
(push '#:display:dump)
(push 'draw-circle)
(mov '2 a4)
(jmp getfn)
114
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp funcall)
113
(eval ())
112
(btnil (cvalq #:display:dumpdevice) 117)
(bfnil (cvalq #:display:dumpsilent) 115)
117
(push (@ 118))
(push 'draw-circle)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '4)
(return)
115
(mov nil a1)
(adjstk '4)
(return)
109
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:draw-circle nsubr)
(entry #:display:draw-circle nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-circle a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry fill-circle subr3)
(entry fill-circle subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'fill-circle a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'fill-circle a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'fill-circle a1)
(jcall error)
106
(push (cvalq #:display:current-display))
(bfnil (& 0) 108)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'fill-circle a1)
(jcall error)
108
(hpxmov (& 0) '8 a4)
(btnil a4 109)
(btnil (cvalq #:display:dumpdevice) 112)
(push (@ 113))
(push (@ 114))
(push '#:display:dump)
(push 'fill-circle)
(mov '2 a4)
(jmp getfn)
114
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp funcall)
113
(eval ())
112
(btnil (cvalq #:display:dumpdevice) 117)
(bfnil (cvalq #:display:dumpsilent) 115)
117
(push (@ 118))
(push 'fill-circle)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '4)
(return)
115
(mov nil a1)
(adjstk '4)
(return)
109
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:fill-circle nsubr)
(entry #:display:fill-circle nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'fill-circle a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-arc nsubr)
(entry draw-arc nsubr)
(cnbeq a4 '6 101)
(mov 'draw-arc a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(btfix (& 5) 103)
(mov (& 5) a3)
(mov 'errnia a2)
(mov 'draw-arc a1)
(jcall error)
103
(btfix (& 4) 105)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'draw-arc a1)
(jcall error)
105
(btfix (& 3) 107)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'draw-arc a1)
(jcall error)
107
(btfix (& 2) 109)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'draw-arc a1)
(jcall error)
109
(btfix (& 1) 111)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'draw-arc a1)
(jcall error)
111
(btfix (& 0) 113)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'draw-arc a1)
(jcall error)
113
(push (cvalq #:display:current-display))
(bfnil (& 0) 115)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-arc a1)
(jcall error)
115
(hpxmov (& 0) '8 a4)
(btnil a4 116)
(btnil (cvalq #:display:dumpdevice) 119)
(push (@ 120))
(push (@ 121))
(push '#:display:dump)
(push 'draw-arc)
(mov '2 a4)
(jmp getfn)
121
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '9 a4)
(jmp funcall)
120
(eval ())
119
(btnil (cvalq #:display:dumpdevice) 124)
(bfnil (cvalq #:display:dumpsilent) 122)
124
(push (@ 125))
(push 'draw-arc)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '9 a4)
(jmp send)
125
(eval ())
(adjstk '7)
(return)
122
(mov nil a1)
(adjstk '7)
(return)
116
(mov nil a1)
(adjstk '7)
(return)
))
(loader'((fentry #:display:draw-arc nsubr)
(entry #:display:draw-arc nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-arc a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry fill-arc nsubr)
(entry fill-arc nsubr)
(cnbeq a4 '6 101)
(mov 'fill-arc a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(btfix (& 5) 103)
(mov (& 5) a3)
(mov 'errnia a2)
(mov 'fill-arc a1)
(jcall error)
103
(btfix (& 4) 105)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'fill-arc a1)
(jcall error)
105
(btfix (& 3) 107)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'fill-arc a1)
(jcall error)
107
(btfix (& 2) 109)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'fill-arc a1)
(jcall error)
109
(btfix (& 1) 111)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'fill-arc a1)
(jcall error)
111
(btfix (& 0) 113)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'fill-arc a1)
(jcall error)
113
(push (cvalq #:display:current-display))
(bfnil (& 0) 115)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'fill-arc a1)
(jcall error)
115
(hpxmov (& 0) '8 a4)
(btnil a4 116)
(btnil (cvalq #:display:dumpdevice) 119)
(push (@ 120))
(push (@ 121))
(push '#:display:dump)
(push 'fill-arc)
(mov '2 a4)
(jmp getfn)
121
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '9 a4)
(jmp funcall)
120
(eval ())
119
(btnil (cvalq #:display:dumpdevice) 124)
(bfnil (cvalq #:display:dumpsilent) 122)
124
(push (@ 125))
(push 'fill-arc)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '9 a4)
(jmp send)
125
(eval ())
(adjstk '7)
(return)
122
(mov nil a1)
(adjstk '7)
(return)
116
(mov nil a1)
(adjstk '7)
(return)
))
(loader'((fentry #:display:fill-arc nsubr)
(entry #:display:fill-arc nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'fill-arc a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-segments nsubr)
(entry draw-segments nsubr)
(cnbeq a4 '5 101)
(mov 'draw-segments a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(btfix (& 4) 103)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'draw-segments a1)
(jcall error)
103
(btvect (& 3) 105)
(mov (& 3) a3)
(mov 'errvec a2)
(mov 'draw-segments a1)
(jcall error)
105
(btvect (& 2) 107)
(mov (& 2) a3)
(mov 'errvec a2)
(mov 'draw-segments a1)
(jcall error)
107
(btvect (& 1) 109)
(mov (& 1) a3)
(mov 'errvec a2)
(mov 'draw-segments a1)
(jcall error)
109
(btvect (& 0) 111)
(mov (& 0) a3)
(mov 'errvec a2)
(mov 'draw-segments a1)
(jcall error)
111
(push (cvalq #:display:current-display))
(bfnil (& 0) 113)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-segments a1)
(jcall error)
113
(hpxmov (& 0) '8 a4)
(btnil a4 114)
(btnil (cvalq #:display:dumpdevice) 117)
(push (@ 118))
(push (@ 119))
(push '#:display:dump)
(push 'draw-segments)
(mov '2 a4)
(jmp getfn)
119
(eval ())
(push a1)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp funcall)
118
(eval ())
117
(btnil (cvalq #:display:dumpdevice) 122)
(bfnil (cvalq #:display:dumpsilent) 120)
122
(push (@ 123))
(push 'draw-segments)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp send)
123
(eval ())
(adjstk '6)
(return)
120
(mov nil a1)
(adjstk '6)
(return)
114
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:draw-segments nsubr)
(entry #:display:draw-segments nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'draw-segments a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry draw-string dmsubr)
(entry draw-string dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (car a3) a3)
(push (@ 101))
(push 'let)
(push (@ 102))
(push '#:graph-env:arg0)
(push a3)
(mov '2 a4)
(jmp list)
102
(eval ())
(jcall ncons)
(push a1)
(push (@ 103))
(push 'draw-substring)
(push (& 6))
(push (& 6))
(push '(#:graph-env:arg0 0 (slen #:graph-env:arg0)))
(mov '4 a4)
(jmp mcons)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry draw-rectangles nsubr)
(entry draw-rectangles nsubr)
(cnbeq a4 '5 101)
(mov 'draw-rectangles a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(btfix (& 4) 103)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'draw-rectangles a1)
(jcall error)
103
(btfix (& 3) 105)
(btvect (& 3) 105)
(mov (& 3) a3)
(mov 'errvec a2)
(mov 'draw-rectangles a1)
(jcall error)
105
(btfix (& 2) 109)
(btvect (& 2) 109)
(mov (& 2) a3)
(mov 'errvec a2)
(mov 'draw-rectangles a1)
(jcall error)
109
(btfix (& 1) 113)
(btvect (& 1) 113)
(mov (& 1) a3)
(mov 'errvec a2)
(mov 'draw-rectangles a1)
(jcall error)
113
(btfix (& 0) 117)
(btvect (& 0) 117)
(mov (& 0) a3)
(mov 'errvec a2)
(mov 'draw-rectangles a1)
(jcall error)
117
(push (cvalq #:display:current-display))
(bfnil (& 0) 121)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'draw-rectangles a1)
(jcall error)
121
(hpxmov (& 0) '8 a4)
(btnil a4 122)
(btnil (cvalq #:display:dumpdevice) 125)
(push (@ 126))
(push '#:display:dump:draw-rectangles)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp funcall)
126
(eval ())
125
(push (@ 127))
(push 'draw-rectangles)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp send)
127
(eval ())
(adjstk '6)
(return)
122
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry fill-rectangles nsubr)
(entry fill-rectangles nsubr)
(cnbeq a4 '5 101)
(mov 'fill-rectangles a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(btfix (& 4) 103)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'fill-rectangles a1)
(jcall error)
103
(btfix (& 3) 105)
(btvect (& 3) 105)
(mov (& 3) a3)
(mov 'errvec a2)
(mov 'fill-rectangles a1)
(jcall error)
105
(btfix (& 2) 109)
(btvect (& 2) 109)
(mov (& 2) a3)
(mov 'errvec a2)
(mov 'fill-rectangles a1)
(jcall error)
109
(btfix (& 1) 113)
(btvect (& 1) 113)
(mov (& 1) a3)
(mov 'errvec a2)
(mov 'fill-rectangles a1)
(jcall error)
113
(btfix (& 0) 117)
(btvect (& 0) 117)
(mov (& 0) a3)
(mov 'errvec a2)
(mov 'fill-rectangles a1)
(jcall error)
117
(push (cvalq #:display:current-display))
(bfnil (& 0) 121)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'fill-rectangles a1)
(jcall error)
121
(hpxmov (& 0) '8 a4)
(btnil a4 122)
(btnil (cvalq #:display:dumpdevice) 125)
(push (@ 126))
(push '#:display:dump:fill-rectangles)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp funcall)
126
(eval ())
125
(push (@ 127))
(push 'fill-rectangles)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp send)
127
(eval ())
(adjstk '6)
(return)
122
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:draw-rectangles nsubr)
(entry #:display:draw-rectangles nsubr)
(cnbeq a4 '7 101)
(mov '#:display:draw-rectangles a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(push nil)
(mov (& 5) a4)
(diff '1 a4)
(push '0)
(push a4)
(mov a4 a1)
(jcall numberp)
(bfnil a1 104)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
104
(push (@ 106))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
106
(eval ())
(bfnil a1 105)
(push (@ 107))
(push 'draw-rectangle)
(push (& 11))
(push (& 11))
(bffix (& 10) 108)
(mov (& 10) a4)
(bra 109)
108
(hpxmov (& 10) (& 5) a4)
109
(push a4)
(bffix (& 10) 110)
(mov (& 10) a4)
(bra 111)
110
(hpxmov (& 10) (& 6) a4)
111
(push a4)
(bffix (& 10) 112)
(mov (& 10) a4)
(bra 113)
112
(hpxmov (& 10) (& 7) a4)
113
(push a4)
(bffix (& 10) 114)
(mov (& 10) a4)
(bra 115)
114
(hpxmov (& 10) (& 8) a4)
115
(push a4)
(mov '7 a4)
(jmp send)
107
(eval ())
(push (@ 116))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
116
(eval ())
(mov a1 (& 1))
(bra 104)
105
(mov nil a1)
(adjstk '10)
(return)
))
(loader'((fentry #:display:fill-rectangles nsubr)
(entry #:display:fill-rectangles nsubr)
(cnbeq a4 '7 101)
(mov '#:display:fill-rectangles a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(push nil)
(mov (& 5) a4)
(diff '1 a4)
(push '0)
(push a4)
(mov a4 a1)
(jcall numberp)
(bfnil a1 104)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
104
(push (@ 106))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
106
(eval ())
(bfnil a1 105)
(push (@ 107))
(push 'fill-rectangle)
(push (& 11))
(push (& 11))
(bffix (& 10) 108)
(mov (& 10) a4)
(bra 109)
108
(hpxmov (& 10) (& 5) a4)
109
(push a4)
(bffix (& 10) 110)
(mov (& 10) a4)
(bra 111)
110
(hpxmov (& 10) (& 6) a4)
111
(push a4)
(bffix (& 10) 112)
(mov (& 10) a4)
(bra 113)
112
(hpxmov (& 10) (& 7) a4)
113
(push a4)
(bffix (& 10) 114)
(mov (& 10) a4)
(bra 115)
114
(hpxmov (& 10) (& 8) a4)
115
(push a4)
(mov '7 a4)
(jmp send)
107
(eval ())
(push (@ 116))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
116
(eval ())
(mov a1 (& 1))
(bra 104)
105
(mov nil a1)
(adjstk '10)
(return)
))
(loader '((end)))
