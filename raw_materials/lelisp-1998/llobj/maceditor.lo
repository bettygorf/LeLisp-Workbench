(loader '((title |maceditor.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'maceditor)))
(defvar #:sys-package:colon '#:edit:editor)
(putprop '#:edit:editor '((() '#:edit:editor:edit-query "test.ll" '#:edit:editor:edit-drawcursor '#:edit:editor:edit-redisplaystring '#:edit:editor:edit-redisplaycleol () () () () 0 80 20 0 0 0 0) sender query file drawcursor redisplaystring redisplaycleol screen cmd ecmd xcmd state w h xcursor ycursor xpos ypos) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:sender '#:edit:editor:sender 'setf-inverse) '#:edit:editor:sender)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:sender (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:query '#:edit:editor:query 'setf-inverse) '#:edit:editor:query)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:query (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:file '#:edit:editor:file 'setf-inverse) '#:edit:editor:file)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:file (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:drawcursor '#:edit:editor:drawcursor 'setf-inverse) '#:edit:editor:drawcursor)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:drawcursor (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:redisplaystring '#:edit:editor:redisplaystring 'setf-inverse) '#:edit:editor:redisplaystring)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:redisplaystring (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:redisplaycleol '#:edit:editor:redisplaycleol 'setf-inverse) '#:edit:editor:redisplaycleol)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:redisplaycleol (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:screen '#:edit:editor:screen 'setf-inverse) '#:edit:editor:screen)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:screen (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:cmd '#:edit:editor:cmd 'setf-inverse) '#:edit:editor:cmd)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:cmd (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:ecmd '#:edit:editor:ecmd 'setf-inverse) '#:edit:editor:ecmd)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:ecmd (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:xcmd '#:edit:editor:xcmd 'setf-inverse) '#:edit:editor:xcmd)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:xcmd (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:state '#:edit:editor:state 'setf-inverse) '#:edit:editor:state)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:state (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:w '#:edit:editor:w 'setf-inverse) '#:edit:editor:w)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:w (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:h '#:edit:editor:h 'setf-inverse) '#:edit:editor:h)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:h (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:xcursor '#:edit:editor:xcursor 'setf-inverse) '#:edit:editor:xcursor)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:xcursor (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:ycursor '#:edit:editor:ycursor 'setf-inverse) '#:edit:editor:ycursor)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:ycursor (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:xpos '#:edit:editor:xpos 'setf-inverse) '#:edit:editor:xpos)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:xpos (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:ypos '#:edit:editor:ypos 'setf-inverse) '#:edit:editor:ypos)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:ypos (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(loader'((fentry win-clear dmsubr)
(entry win-clear dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '100)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry win-right dmsubr)
(entry win-right dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '101)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry win-left dmsubr)
(entry win-left dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '102)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry win-down dmsubr)
(entry win-down dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '103)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry win-up dmsubr)
(entry win-up dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '104)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry win-next dmsubr)
(entry win-next dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '105)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry win-previous dmsubr)
(entry win-previous dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '106)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry win-cur-top dmsubr)
(entry win-cur-top dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '107)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry win-ygoto dmsubr)
(entry win-ygoto dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-editor)
(push '108)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry win-xgoto dmsubr)
(entry win-xgoto dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-editor)
(push '109)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry cur-win-top dmsubr)
(entry cur-win-top dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '110)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-win-buttom dmsubr)
(entry cur-win-buttom dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '111)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-win-ygoto dmsubr)
(entry cur-win-ygoto dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-editor)
(push '112)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry cur-win-xgoto dmsubr)
(entry cur-win-xgoto dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-editor)
(push '113)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry query-readfile dmsubr)
(entry query-readfile dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '116)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry query-writefile dmsubr)
(entry query-writefile dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '117)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry query-insertfile dmsubr)
(entry query-insertfile dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '118)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry query-search dmsubr)
(entry query-search dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '119)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry query-rsearch dmsubr)
(entry query-rsearch dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '120)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry savefile dmsubr)
(entry savefile dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '121)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry query-goto-line dmsubr)
(entry query-goto-line dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '122)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry exp-eval dmsubr)
(entry exp-eval dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '124)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry exp-eval-print dmsubr)
(entry exp-eval-print dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-editor)
(push '125)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader '((end)))
