; Version compilee le Wed Jun 29 11:22:49 MET DST 1994
(loader '((title |cpcommon.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'cpmac)))
(defvar #:sys-package:colon 'compiler)
(defvar #:compiler:exported-env (if (boundp '#:compiler:exported-env) #:compiler:exported-env ()))
(defvar #:compiler:open-p t)
(loader'((fentry defmacro-open fsubr)
(entry defmacro-open fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov 'macro-open a2)
(jcall symbol)
(mov (& 0) a3)
(mov 'expr a2)
(jcall setfn)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry make-macro-open subr2)
(entry make-macro-open subr2)
(push a2)
(push a1)
(mov 'macro-open a2)
(jcall symbol)
(mov (& 1) a3)
(mov 'expr a2)
(jcall setfn)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry macro-openp subr1)
(entry macro-openp subr1)
(mov 'macro-open a2)
(jmp getfn1)
))
(loader'((fentry remove-macro-open subr1)
(entry remove-macro-open subr1)
(push a1)
(mov 'macro-open a2)
(jcall getsymb1)
(btnil a1 101)
(mov 'macro-open a2)
(mov (& 0) a1)
(jcall getsymb1)
(adjstk '1)
(jmp remob)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:compiler:macroexpand subr1)
(push a1)
(bfcons a1 101)
(bfsymb (car a1) 101)
(push nil)
(push (car a1))
(push (cdr a1))
(push nil)
(push '0)
(push nil)
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov (& 3) (cvalq #:system:print-msgs))
(push (cvalq #:system:error-flag))
(mov (& 5) (cvalq #:system:error-flag))
(push '3)
(push '(#:system:debug #:system:print-msgs #:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(btnil (cvalq #:compiler:open-p) 104)
(mov 'macro-open a2)
(mov (& 17) a1)
(jcall getfn1)
(mov a1 (& 18))
(btnil a1 104)
(push (@ 107))
(push (& 19))
(mov (& 21) a4)
(push (cdr a4))
(mov '2 a4)
(jmp apply)
107
(eval ())
(bfnil a1 105)
(mov (& 19) a1)
(bra 105)
104
(mov (& 19) a2)
(mov (cdr a2) a2)
(mov (& 17) a1)
(call #:compiler:macroexpand-internal)
(bfnil a1 105)
(mov (& 17) a1)
(jcall typefn)
(cabne a1 'macro 109)
(push (@ 111))
(mov (& 18) a1)
(jcall valfn)
(mov a1 a2)
(mov 'lambda a1)
(jcall cons)
(push a1)
(push (& 21))
(mov '2 a4)
(jmp apply)
111
(eval ())
(bra 105)
109
(mov (& 17) a1)
(jcall typefn)
(cabne a1 'dmacro 112)
(push (@ 114))
(mov (& 18) a1)
(jcall valfn)
(mov a1 a2)
(mov 'lambda a1)
(jcall cons)
(push a1)
(mov (& 21) a4)
(push (cdr a4))
(mov '2 a4)
(jmp apply)
114
(eval ())
(bra 105)
112
(mov (& 17) a1)
(jcall typefn)
(cabne a1 'msubr 115)
(push (@ 117))
(mov (& 18) a1)
(jcall valfn)
(push a1)
(push (& 21))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
117
(eval ())
(bra 105)
115
(mov (& 17) a1)
(jcall typefn)
(cabne a1 'dmsubr 118)
(push (@ 120))
(mov (& 18) a1)
(jcall valfn)
(push a1)
(mov (& 21) a4)
(push (cdr a4))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
120
(eval ())
(bra 105)
118
(mov (& 19) a1)
105
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(mov (& 7) (cvalq #:system:print-msgs))
(mov (& 8) (cvalq #:system:debug))
(adjstk '12)
(mov a1 (& 2))
(btcons a1 121)
(mov (& 1) a1)
(adjstk '4)
(bra #:compiler:macro-expand-error)
121
(bfcons (car a1) 123)
(cabne (& 3) (car a1) 125)
(mov (car a1) a4)
(cabne (& 1) (car a4) 125)
(mov (car a1) a3)
(cabeq (& 0) (cdr a3) 123)
125
(mov (car a1) a1)
(adjstk '4)
(bra #:compiler:macroexpand)
123
(mov (car a1) a1)
(adjstk '4)
(return)
101
(adjstk '1)
(return)
))
(loader'((entry #:compiler:macroexpand-internal subr2)
(push a2)
(push a1)
(mov (cvalq #:compiler:open-p) a1)
(btnil a1 102)
(mov (& 0) a1)
(call #:compiler:macroexpand-internal-open)
102
(bfnil a1 101)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:compiler:macroexpand-internal-close)
101
(adjstk '2)
(return)
))
(loader'((entry #:compiler:macroexpand-internal-close subr2)
(push a2)
(cabne a1 'cond 102)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:cond)
102
(cabne a1 'unless 103)
(push (@ 104))
(push 'if)
(push (@ 105))
(push 'not)
(push (car a2))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(adjstk '1)
(return)
103
(cabne a1 'when 106)
(push (@ 107))
(push 'if)
(push (car a2))
(mov (cdr a2) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(return)
106
(cabne a1 'ifn 108)
(push (@ 109))
(push 'if)
(push (@ 110))
(push 'not)
(push (car a2))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov (& 3) a4)
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
109
(eval ())
(adjstk '1)
(return)
108
(cabne a1 'neq 111)
(push (@ 112))
(push 'not)
(mov 'eq a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
112
(eval ())
(adjstk '1)
(return)
111
(cabne a1 'nequal 113)
(push (@ 114))
(push 'not)
(mov 'equal a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
114
(eval ())
(adjstk '1)
(return)
113
(cabne a1 'null 115)
(mov 'not a1)
(adjstk '1)
(jmp cons)
115
(cabne a1 'atomp 116)
(mov 'atom a1)
(adjstk '1)
(jmp cons)
116
(cabne a1 'decr 117)
(push (@ 118))
(push 'setq)
(push (car a2))
(btnil (cdr a2) 119)
(mov '|-| a1)
(bra 120)
119
(mov '|1-| a1)
120
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
118
(eval ())
(adjstk '1)
(return)
117
(cabne a1 'incr 121)
(push (@ 122))
(push 'setq)
(push (car a2))
(btnil (cdr a2) 123)
(mov '|+| a1)
(bra 124)
123
(mov '|1+| a1)
124
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
122
(eval ())
(adjstk '1)
(return)
121
(cabne a1 'newl 125)
(push (@ 126))
(push 'setq)
(push (car a2))
(push (@ 127))
(push 'cons)
(mov (cdr a2) a4)
(push (car a4))
(push (car a2))
(mov '3 a4)
(jmp list)
127
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
126
(eval ())
(adjstk '1)
(return)
125
(cabne a1 'nextl 128)
(push (@ 129))
(push 'prog1)
(btnil (cdr a2) 130)
(push (@ 132))
(push 'setq)
(mov (cdr a2) a4)
(push (car a4))
(push (@ 133))
(push 'car)
(push (car a2))
(mov '2 a4)
(jmp list)
133
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
132
(eval ())
(mov a1 a4)
(bra 131)
130
(push (@ 134))
(push 'car)
(push (car a2))
(mov '2 a4)
(jmp list)
134
(eval ())
(mov a1 a4)
131
(push a4)
(push (@ 135))
(push 'setq)
(mov (& 5) a4)
(push (car a4))
(push (@ 136))
(push 'cdr)
(push (car a4))
(mov '2 a4)
(jmp list)
136
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
135
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
129
(eval ())
(adjstk '1)
(return)
128
(cabne a1 'newr 137)
(push (@ 138))
(push 'setq)
(push (car a2))
(push (@ 139))
(push 'let)
(push (@ 140))
(push (@ 141))
(push '#:compiler:newr)
(mov (cdr a2) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
141
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
140
(eval ())
(push a1)
(push (@ 142))
(push 'nconc)
(mov (& 8) a4)
(push (car a4))
(push '((ncons #:compiler:newr)))
(mov '3 a4)
(jmp mcons)
142
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
139
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
138
(eval ())
(adjstk '1)
(return)
137
(cabne a1 'dynamic-let 143)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:dynamic-let)
143
(cabne a1 'dynamic 144)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:dynamic)
144
(cabne a1 'return 145)
(push (@ 146))
(push 'return-from)
(push nil)
(push a2)
(mov '3 a4)
(jmp mcons)
146
(eval ())
(adjstk '1)
(return)
145
(cabne a1 'map 147)
(push a2)
(mov 'null a3)
(mov 'map a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
147
(cabne a1 'mapl 148)
(push a2)
(mov 'null a3)
(mov 'map a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
148
(cabne a1 'maplist 149)
(push a2)
(mov 'cons a3)
(mov 'map a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
149
(cabne a1 'mapcon 150)
(push a2)
(mov 'nreconc a3)
(mov 'map a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
150
(cabne a1 'mapc 151)
(push a2)
(mov 'null a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
151
(cabne a1 'mapcar 152)
(push a2)
(mov 'cons a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
152
(cabne a1 'mapcan 153)
(push a2)
(mov 'nreconc a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
153
(cabne a1 'every 154)
(push a2)
(mov 'every a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
154
(cabne a1 'any 155)
(push a2)
(mov 'any a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
155
(cabne a1 'mapvector 156)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mapvector)
156
(cabne a1 'untilexit 157)
(push (@ 158))
(push 'tag)
(push (car a2))
(push (@ 159))
(push 'while)
(push 't)
(push (cdr a2))
(mov '3 a4)
(jmp mcons)
159
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
158
(eval ())
(adjstk '1)
(return)
157
(cabne a1 'loop 160)
(push (@ 161))
(push 'while)
(push 't)
(push a2)
(mov '3 a4)
(jmp mcons)
161
(eval ())
(adjstk '1)
(return)
160
(cabne a1 'catcherror 162)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:catcherror)
162
(cabne a1 'errset 163)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:errset)
163
(cabne a1 'err 164)
(push (@ 165))
(push 'exit)
(push '#:system:error-tag)
(push a2)
(mov '3 a4)
(jmp mcons)
165
(eval ())
(adjstk '1)
(return)
164
(cabne a1 'eval-when 166)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:eval-when)
166
(cabne a1 'desetq 167)
(push (@ 168))
(push 'deset)
(push (@ 169))
(push 'quote)
(push (car a2))
(mov '2 a4)
(jmp list)
169
(eval ())
(push a1)
(mov (& 3) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '3 a4)
(jmp list)
168
(eval ())
(adjstk '1)
(return)
167
(cabne a1 'defprop 170)
(push (@ 171))
(push 'putprop)
(push (@ 172))
(push 'quote)
(push (car a2))
(mov '2 a4)
(jmp list)
172
(eval ())
(push a1)
(push (@ 173))
(push 'quote)
(mov (& 5) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
173
(eval ())
(push a1)
(push (@ 174))
(push 'quote)
(mov (& 6) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
174
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
171
(eval ())
(adjstk '1)
(return)
170
(cabne a1 'psetq 175)
(mov (cdr a2) a4)
(btnil (cdr a4) 176)
(push (@ 178))
(push 'setq)
(push (car a2))
(push (@ 179))
(push 'prog1)
(mov (cdr a2) a3)
(push (car a3))
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov 'psetq a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
179
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
178
(eval ())
(adjstk '1)
(return)
176
(push (@ 180))
(push 'setq)
(push (car a2))
(mov (cdr a2) a3)
(push (car a3))
(mov '3 a4)
(jmp list)
180
(eval ())
(adjstk '1)
(return)
175
(cabne a1 'setqq 181)
(mov (cdr a2) a4)
(btnil (cdr a4) 182)
(push (@ 184))
(push 'progn)
(push (@ 185))
(push 'setq)
(push (car a2))
(push (@ 186))
(push 'quote)
(mov (cdr a2) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
186
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
185
(eval ())
(push a1)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov 'setqq a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
184
(eval ())
(adjstk '1)
(return)
182
(push (@ 187))
(push 'setq)
(push (car a2))
(push (@ 188))
(push 'quote)
(mov (cdr a2) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
188
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
187
(eval ())
(adjstk '1)
(return)
181
(cabne a1 'letvq 189)
(push (@ 190))
(push (@ 191))
(push 'lambda)
(push (@ 192))
(push (car a2))
(mov '1 a4)
(jmp list)
192
(eval ())
(push a1)
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
191
(eval ())
(push a1)
(mov (& 2) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
190
(eval ())
(adjstk '1)
(return)
189
(cabne a1 'prog2 193)
(push (@ 194))
(push 'progn)
(push (car a2))
(mov (cdr a2) a2)
(mov 'prog1 a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
194
(eval ())
(adjstk '1)
(return)
193
(cabne a1 'lognot 195)
(push (@ 196))
(push 'logxor)
(push (car a2))
(push '(-1))
(mov '3 a4)
(jmp mcons)
196
(eval ())
(adjstk '1)
(return)
195
(cabne a1 'add1 197)
(push (@ 198))
(push 'add)
(push (car a2))
(push '(1))
(mov '3 a4)
(jmp mcons)
198
(eval ())
(adjstk '1)
(return)
197
(cabne a1 'sub1 199)
(push (@ 200))
(push 'sub)
(push (car a2))
(push '(1))
(mov '3 a4)
(jmp mcons)
200
(eval ())
(adjstk '1)
(return)
199
(cabne a1 'time 201)
(mov (car a2) a1)
(adjstk '1)
(bra #:compiler:mc:time)
201
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:compiler:macroexpand-internal-open subr2)
(cabne a1 'caar 102)
(push (@ 103))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(return)
102
(cabne a1 'cadr 104)
(push (@ 105))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(return)
104
(cabne a1 'cdar 106)
(push (@ 107))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
107
(eval ())
(return)
106
(cabne a1 'cddr 108)
(push (@ 109))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
109
(eval ())
(return)
108
(cabne a1 'caaar 110)
(push (@ 111))
(push 'car)
(push (@ 112))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
111
(eval ())
(return)
110
(cabne a1 'caadr 113)
(push (@ 114))
(push 'car)
(push (@ 115))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
114
(eval ())
(return)
113
(cabne a1 'cadar 116)
(push (@ 117))
(push 'car)
(push (@ 118))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
118
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
117
(eval ())
(return)
116
(cabne a1 'caddr 119)
(push (@ 120))
(push 'car)
(push (@ 121))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
120
(eval ())
(return)
119
(cabne a1 'cdaar 122)
(push (@ 123))
(push 'cdr)
(push (@ 124))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
124
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
123
(eval ())
(return)
122
(cabne a1 'cdadr 125)
(push (@ 126))
(push 'cdr)
(push (@ 127))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
127
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
126
(eval ())
(return)
125
(cabne a1 'cddar 128)
(push (@ 129))
(push 'cdr)
(push (@ 130))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
130
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
129
(eval ())
(return)
128
(cabne a1 'cdddr 131)
(push (@ 132))
(push 'cdr)
(push (@ 133))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
133
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
132
(eval ())
(return)
131
(cabne a1 'caaaar 134)
(push (@ 135))
(push 'car)
(push (@ 136))
(push 'car)
(push (@ 137))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
137
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
136
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
135
(eval ())
(return)
134
(cabne a1 'caaadr 138)
(push (@ 139))
(push 'car)
(push (@ 140))
(push 'car)
(push (@ 141))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
141
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
140
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
139
(eval ())
(return)
138
(cabne a1 'caadar 142)
(push (@ 143))
(push 'car)
(push (@ 144))
(push 'car)
(push (@ 145))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
145
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
144
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
143
(eval ())
(return)
142
(cabne a1 'caaddr 146)
(push (@ 147))
(push 'car)
(push (@ 148))
(push 'car)
(push (@ 149))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
149
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
148
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
147
(eval ())
(return)
146
(cabne a1 'cadaar 150)
(push (@ 151))
(push 'car)
(push (@ 152))
(push 'cdr)
(push (@ 153))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
153
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
152
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
151
(eval ())
(return)
150
(cabne a1 'cadadr 154)
(push (@ 155))
(push 'car)
(push (@ 156))
(push 'cdr)
(push (@ 157))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
157
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
156
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
155
(eval ())
(return)
154
(cabne a1 'caddar 158)
(push (@ 159))
(push 'car)
(push (@ 160))
(push 'cdr)
(push (@ 161))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
161
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
160
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
159
(eval ())
(return)
158
(cabne a1 'cadddr 162)
(push (@ 163))
(push 'car)
(push (@ 164))
(push 'cdr)
(push (@ 165))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
165
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
164
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
163
(eval ())
(return)
162
(cabne a1 'cdaaar 166)
(push (@ 167))
(push 'cdr)
(push (@ 168))
(push 'car)
(push (@ 169))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
169
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
168
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
167
(eval ())
(return)
166
(cabne a1 'cdaadr 170)
(push (@ 171))
(push 'cdr)
(push (@ 172))
(push 'car)
(push (@ 173))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
173
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
172
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
171
(eval ())
(return)
170
(cabne a1 'cdadar 174)
(push (@ 175))
(push 'cdr)
(push (@ 176))
(push 'car)
(push (@ 177))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
177
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
176
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
175
(eval ())
(return)
174
(cabne a1 'cdaddr 178)
(push (@ 179))
(push 'cdr)
(push (@ 180))
(push 'car)
(push (@ 181))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
181
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
180
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
179
(eval ())
(return)
178
(cabne a1 'cddaar 182)
(push (@ 183))
(push 'cdr)
(push (@ 184))
(push 'cdr)
(push (@ 185))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
185
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
184
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
183
(eval ())
(return)
182
(cabne a1 'cddadr 186)
(push (@ 187))
(push 'cdr)
(push (@ 188))
(push 'cdr)
(push (@ 189))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
189
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
188
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
187
(eval ())
(return)
186
(cabne a1 'cdddar 190)
(push (@ 191))
(push 'cdr)
(push (@ 192))
(push 'cdr)
(push (@ 193))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
193
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
192
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
191
(eval ())
(return)
190
(cabne a1 'cddddr 194)
(push (@ 195))
(push 'cdr)
(push (@ 196))
(push 'cdr)
(push (@ 197))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
197
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
196
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
195
(eval ())
(return)
194
(mov nil a1)
(return)
))
(loader'((entry #:compiler:mc:catcherror subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(cabne a1 't 101)
(push (@ 103))
(push 'let)
(push '((#:system:error-flag t)))
(push (@ 104))
(push 'tag)
(push '#:system:error-tag)
(push (@ 105))
(push 'ncons)
(mov a4 a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
103
(eval ())
(adjstk '1)
(return)
101
(bfnil a1 106)
(push (@ 108))
(push 'let)
(push '((#:system:error-flag ()) (#:system:print-msgs 0) (#:system:debug ())))
(push (@ 109))
(push 'tag)
(push '#:system:error-tag)
(push (@ 110))
(push 'ncons)
(mov a4 a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
109
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
108
(eval ())
(adjstk '1)
(return)
106
(push (@ 111))
(push 'let)
(push (@ 112))
(push (@ 113))
(push '#:system:error-flag)
(push a1)
(mov '2 a4)
(jmp list)
113
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
112
(eval ())
(push a1)
(push (@ 114))
(push 'let)
(push '((#:system:print-msgs (if #:system:error-flag #:system:print-msgs 0)) (#:system:debug (if #:system:error-flag #:system:debug ()))))
(push (@ 115))
(push 'tag)
(push '#:system:error-tag)
(push (@ 116))
(push 'ncons)
(mov (& 11) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
116
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
115
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
114
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
111
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:mc:cond subr1)
(push a1)
(bfnil (cdr a1) 101)
(mov (car a1) a4)
(btnil (cdr a4) 103)
(mov (car a1) a3)
(cabne (car a3) 't 105)
(mov (car a1) a2)
(mov (cdr a2) a2)
(mov 'progn a1)
(adjstk '1)
(jmp cons)
105
(push (@ 107))
(push 'if)
(mov (car a1) a2)
(push (car a2))
(mov (car a1) a2)
(mov (cdr a2) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(return)
103
(mov (car a1) a1)
(mov (car a1) a1)
(bfnil a1 108)
(mov 'nil a1)
108
(adjstk '1)
(return)
101
(mov (car a1) a4)
(btnil (cdr a4) 109)
(push (@ 111))
(push 'if)
(mov (car a1) a3)
(push (car a3))
(mov (car a1) a2)
(mov (cdr a2) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov (& 4) a2)
(mov (cdr a2) a2)
(mov 'cond a1)
(jcall cons)
(push a1)
(mov '4 a4)
(jmp list)
111
(eval ())
(adjstk '1)
(return)
109
(push (@ 112))
(push 'or)
(mov (car a1) a3)
(push (car a3))
(mov (cdr a1) a2)
(mov 'cond a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
112
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:mc:dynamic subr1)
(push a1)
(mov 'complice a1)
(jcall featurep)
(btnil a1 102)
(mov (& 0) a1)
(mov (cvalq dynamic-flag) a3)
(mov 't a2)
(mov (car a1) a1)
(jcall putprop)
102
(mov (& 0) a1)
(mov (car a1) a1)
(adjstk '1)
(return)
))
(loader'((entry #:compiler:mc:dynamic-let subr1)
(push a1)
(mov 'complice a1)
(jcall featurep)
(btnil a1 102)
(mov (& 0) a4)
(push (car a4))
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cvalq dynamic-flag) a3)
(mov 't a2)
(mov (& 0) a1)
(jcall putprop)
(adjstk '1)
(bra 103)
104
(adjstk '1)
102
(push (@ 105))
(push 'let)
(mov (& 2) a4)
(push (car a4))
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
105
(eval ())
(adjstk '1)
(return)
))
(defvar dynamic-flag '#:complice:globalvar)
(loader'((entry #:compiler:mc:eval-when subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(push 'nil)
(mov a1 a2)
(mov 'load a1)
(jcall memq)
(btnil a1 102)
(mov (& 1) a2)
(mov 'progn a1)
(jcall cons)
(mov a1 (& 0))
102
(mov (& 2) a2)
(mov 'compile a1)
(jcall memq)
(btnil a1 104)
(mov (cvalq #:compiler:exported-env) a2)
(mov (& 1) a1)
(jcall member)
(bfnil a1 104)
(mov (& 1) a1)
(jcall copy)
(mov (cvalq #:compiler:exported-env) a2)
(jcall cons)
(mov a1 (cvalq #:compiler:exported-env))
(mov (& 1) a1)
(jcall eprogn)
104
(mov (& 2) a2)
(mov 'local-compile a1)
(jcall memq)
(btnil a1 108)
(mov (& 1) a1)
(jcall eprogn)
108
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((entry #:compiler:mc:errset subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push (@ 101))
(push 'let)
(push (@ 102))
(push (@ 103))
(push '#:system:error-flag)
(push a4)
(mov '2 a4)
(jmp list)
103
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
102
(eval ())
(push a1)
(push (@ 104))
(push 'tag)
(push '#:system:error-tag)
(push (@ 105))
(push 'ncons)
(push (& 8))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:map subr3)
(push a3)
(push a2)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov a4 a1)
(jcall length)
(push nil)
(push '#:system:map:r)
(push a1)
(bra 102)
101
(push a1)
(push (@ 103))
(push '"arg")
(mov (& 3) a1)
(jcall |1-|)
(mov a1 (& 3))
(push a1)
(mov '2 a4)
(jmp concat)
103
(eval ())
(mov a1 a2)
(mov '#:system:map a1)
(jcall symbol)
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
(pop a1)
102
(sobgez a1 101)
(push (@ 104))
(push 'lambda)
(push (& 4))
(mov (& 8) a2)
(mov (& 5) a1)
(call #:compiler:map-next-arg)
(mov (& 7) a2)
(call #:compiler:map-funcall)
(mov (& 4) a3)
(mov (& 9) a2)
(call #:compiler:map-next-res)
(push a1)
(push (& 6))
(push nil)
105
(bfcons (& 1) 106)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 107))
(push 'consp)
(push (& 2))
(mov '2 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a3)
(mov (& 10) a2)
(pop a1)
(call #:compiler:map-while)
(mov (& 4) a3)
(mov (& 9) a2)
(call #:compiler:map-result)
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(mov (& 3) a2)
(adjstk '7)
(jmp cons)
))
(loader'((entry #:compiler:mapvector subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push (@ 101))
(push 'let*)
(push (@ 102))
(push '(#:system:map:r 0))
(push (@ 103))
(push '#:system:map:v)
(push a4)
(mov '2 a4)
(jmp list)
103
(eval ())
(push a1)
(push '((#:system:map:n (vlength #:system:map:v))))
(mov '3 a4)
(jmp mcons)
102
(eval ())
(push a1)
(push (@ 104))
(push 'while)
(push '(lt #:system:map:r #:system:map:n))
(mov (& 6) a2)
(mov '((vref #:system:map:v #:system:map:r)) a1)
(call #:compiler:map-funcall)
(push a1)
(push '((setq #:system:map:r (add1 #:system:map:r))))
(mov '4 a4)
(jmp mcons)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:map-next-arg subr2)
(push a2)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 103))
(push 'prog1)
(cabne (& 5) 'map 104)
(mov (& 2) a4)
(bra 105)
104
(push (@ 106))
(push 'car)
(push (& 4))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov a1 a4)
105
(push a4)
(push (@ 107))
(push 'setq)
(push (& 5))
(push (@ 108))
(push 'cdr)
(push (& 8))
(mov '2 a4)
(jmp list)
108
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
103
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((entry #:compiler:map-funcall subr2)
(push a2)
(push a1)
(btcons a2 101)
(push (@ 103))
(push 'funcall)
(push a2)
(push a1)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(adjstk '2)
(return)
101
(mov (car a2) a4)
(cabeq a4 'function 106)
(cabne a4 'quote 104)
106
(mov (cdr a2) a3)
(bfsymb (car a3) 107)
(mov (cdr a2) a1)
(mov (car a1) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 '() 109)
(cabeq a4 'fexpr 109)
(cabne a4 'fsubr 107)
109
(push (@ 110))
(push 'funcall)
(push (& 3))
(push (& 3))
(mov '3 a4)
(jmp mcons)
110
(eval ())
(adjstk '2)
(return)
107
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(adjstk '2)
(jmp cons)
104
(cabne (car a2) 'lambda 111)
(push a2)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp cons)
111
(cabne (car a2) 'flambda 113)
(mov (cdr a2) a2)
(mov 'lambda a1)
(jcall cons)
(mov (& 0) a2)
(adjstk '2)
(jmp cons)
113
(cabne (car a2) 'mlambda 115)
(push (@ 117))
(push 'funcall)
(push a2)
(push a1)
(mov '3 a4)
(jmp mcons)
117
(eval ())
(adjstk '2)
(return)
115
(push (@ 118))
(push 'funcall)
(push a2)
(push a1)
(mov '3 a4)
(jmp mcons)
118
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:compiler:map-next-res subr3)
(push a1)
(mov a2 a1)
(cabne a1 'null 102)
(mov (& 0) a1)
(adjstk '1)
(return)
102
(cabne a1 'cons 103)
(push (@ 104))
(push 'setq)
(push a3)
(push (@ 105))
(push 'cons)
(push (& 5))
(push a3)
(mov '3 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(adjstk '1)
(return)
103
(cabne a1 'nreconc 106)
(push (@ 107))
(push 'setq)
(push a3)
(push (@ 108))
(push 'nreconc)
(push (& 5))
(push a3)
(mov '3 a4)
(jmp list)
108
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(return)
106
(push (@ 110))
(push 'setq)
(push a3)
(push (& 3))
(mov '3 a4)
(jmp list)
110
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:map-while subr3)
(push a1)
(mov a2 a1)
(cabeq a1 'null 103)
(cabeq a1 'cons 103)
(cabne a1 'nreconc 102)
103
(push (@ 104))
(push 'while)
(mov a3 a2)
(mov 'and a1)
(jcall cons)
(push a1)
(push (& 3))
(mov '3 a4)
(jmp list)
104
(eval ())
(adjstk '1)
(return)
102
(cabne a1 'every 105)
(push (@ 106))
(push 'while)
(push (@ 107))
(push a3)
(push (@ 108))
(push (& 5))
(mov '1 a4)
(jmp list)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp append)
107
(eval ())
(mov a1 a2)
(mov 'and a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(adjstk '1)
(return)
105
(cabne a1 'any 109)
(push (@ 110))
(push 'while)
(push (@ 111))
(push a3)
(push (@ 112))
(push (@ 113))
(push 'not)
(push (& 7))
(mov '2 a4)
(jmp list)
113
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp append)
111
(eval ())
(mov a1 a2)
(mov 'and a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
110
(eval ())
(adjstk '1)
(return)
109
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:compiler:map-result subr3)
(push a3)
(push a1)
(mov a2 a1)
(cabne a1 'null 102)
(mov (& 0) a1)
(adjstk '2)
(return)
102
(cabeq a1 'cons 104)
(cabne a1 'nreconc 103)
104
(push (@ 105))
(push 'lambda)
(push (@ 106))
(push a3)
(mov '1 a4)
(jmp list)
106
(eval ())
(push a1)
(push (& 3))
(push (@ 107))
(push 'nreverse)
(push (& 7))
(mov '2 a4)
(jmp list)
107
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
105
(eval ())
(mov '(()) a2)
(adjstk '2)
(jmp cons)
103
(cabne a1 'every 108)
(push (@ 109))
(push 'lambda)
(push (@ 110))
(push a3)
(mov '1 a4)
(jmp list)
110
(eval ())
(push a1)
(push (& 3))
(push (& 5))
(mov '4 a4)
(jmp list)
109
(eval ())
(mov '(t) a2)
(adjstk '2)
(jmp cons)
108
(cabne a1 'any 111)
(push (@ 112))
(push 'lambda)
(push (@ 113))
(push a3)
(mov '1 a4)
(jmp list)
113
(eval ())
(push a1)
(push (& 3))
(push (& 5))
(mov '4 a4)
(jmp list)
112
(eval ())
(mov '(()) a2)
(adjstk '2)
(jmp cons)
111
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:compiler:mc:time subr1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(push (@ 103))
(push 'let)
(push '((#:compiler:time (runtime))))
(mov (cdr a1) a4)
(push (car a4))
(push '((fsub (runtime) #:compiler:time)))
(mov '4 a4)
(jmp mcons)
103
(eval ())
(return)
101
(push (@ 104))
(push 'let)
(push '((#:compiler:time (runtime))))
(push (@ 105))
(push 'eval)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(push '((fsub (runtime) #:compiler:time)))
(mov '4 a4)
(jmp mcons)
104
(eval ())
(return)
))
(defvar #:sys-package:colon 'complice)
(synonym 'declare 'comment)
(loader'((fentry #:complice:macroexpand subr1)
(entry #:complice:macroexpand subr1)
(bra #:compiler:macroexpand)
))
(loader'((fentry #:complice:flatt subr1)
(entry #:complice:flatt subr1)
(mov nil a2)
(bra flat-auxillaire)
))
(loader'((entry flat-auxillaire subr2)
(bfnil a1 101)
(mov a2 a1)
(return)
101
(btcons a1 103)
(jmp cons)
103
(push (car a1))
(mov (cdr a1) a1)
(call flat-auxillaire)
(mov a1 a2)
(pop a1)
(bra flat-auxillaire)
))
(loader'((fentry #:complice:count subr2)
(entry #:complice:count subr2)
(btcons a2 101)
(cabne a1 a2 103)
(mov '1 a1)
(return)
103
(mov '0 a1)
(return)
101
(cabne (car a2) a1 105)
(mov (cdr a2) a2)
(jcall #:complice:count)
(plus '1 a1)
(return)
105
(mov (cdr a2) a2)
(jmp #:complice:count)
))
(loader'((fentry #:complice:complement subr2)
(entry #:complice:complement subr2)
(push a2)
(push a1)
(btcons a2 101)
(mov nil a1)
(adjstk '2)
(return)
101
(push (car a2))
(mov a1 a2)
(pop a1)
(jcall memq)
(btnil a1 103)
(mov (& 1) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '2)
(jmp #:complice:complement)
103
(mov (& 1) a1)
(push (car a1))
(mov (cdr a1) a2)
(mov (& 1) a1)
(jcall #:complice:complement)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp cons)
))
(loader'((fentry #:complice:setcassq subr3)
(entry #:complice:setcassq subr3)
(push a2)
(mov a3 a2)
(jcall assq)
(bfcons a1 101)
(mov (& 0) (cdr a1))
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:complice:defvar fsubr)
(entry #:complice:defvar fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(btvar a1 101)
(mov a1 a3)
(mov 'errnva a2)
(mov 'defvar a1)
(adjstk '2)
(jmp error)
101
(mov '#:complice:globalvar a3)
(mov 't a2)
(jcall putprop)
(btnil (cvalq #:system:loaded-from-file) 104)
(mov '#:system:loaded-from-file a3)
(mov (cvalq #:system:loaded-from-file) a2)
(mov (& 1) a1)
(jcall putprop)
104
(bfcons (& 0) 105)
(push (@ 107))
(mov (& 1) a4)
(push (car a4))
(mov '1 a4)
(jmp eval)
107
(eval ())
(mov (& 1) a4)
(mov a1 (cval a4))
(bra 106)
105
(mov (& 1) a4)
(mov nil (cval a4))
106
(mov a4 a1)
(adjstk '2)
(return)
))
(synonym 'defvar '#:complice:defvar)
(loader'((fentry #:complice:globalvarp subr1)
(entry #:complice:globalvarp subr1)
(push a1)
(mov '#:complice:globalvar a2)
(jcall get)
(bfnil a1 103)
(mov (& 0) a4)
(mov (pkgc a4) a4)
(cabeq a4 'system 103)
(cabne a4 'sys-package 101)
103
(mov (& 0) a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(defvar #:complice:list-of-loaded-file ())
(loader'((fentry #:complice:get-all-def-in-files subr2)
(entry #:complice:get-all-def-in-files subr2)
(push a2)
(push a1)
(push (cvalq #:sys-package:colon))
(push (@ 101))
(mov '0 a4)
(jmp inchan)
101
(eval ())
(push nil)
(push nil)
(push nil)
(push 't)
(push nil)
(push a1)
(push (cvalq #:system:in-read-flag))
(mov (& 2) (cvalq #:system:in-read-flag))
(push (cvalq #:system:redef-flag))
(mov (& 4) (cvalq #:system:redef-flag))
(push (cvalq #:system:loaded-from-file))
(mov (& 6) (cvalq #:system:loaded-from-file))
(push (cvalq #:sys-package:colon))
(mov (& 10) (cvalq #:sys-package:colon))
(push '4)
(push '(#:system:in-read-flag #:system:redef-flag #:system:loaded-from-file #:sys-package:colon))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:complice:list-of-loaded-file) a2)
(mov (& 17) a1)
(jcall cassoc)
(mov a1 (& 14))
(btnil a1 102)
(bra 103)
102
(push (& 17))
104
(bfcons (& 0) 105)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall probepathf)
(mov a1 (& 17))
(bfnil a1 106)
(mov (& 0) a3)
(mov 'errfile a2)
(mov 'compilefiles a1)
(jcall error)
(bra 107)
106
(push (@ 108))
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
108
(eval ())
(mov (& 17) (cvalq #:system:loaded-from-file))
(mov (& 20) a2)
(mov (& 16) a1)
(call #:complice:cp-read-files1)
(mov a1 (& 16))
(push (@ 109))
(mov '0 a4)
(jmp inchan)
109
(eval ())
(btnil a1 111)
(cabeq a1 (& 12) 111)
(push (@ 112))
(push a1)
(mov '1 a4)
(jmp close)
112
(eval ())
111
(push (@ 113))
(push (& 13))
(mov '1 a4)
(jmp inchan)
113
(eval ())
107
(adjstk '1)
(bra 104)
105
(adjstk '1)
(mov (& 14) a1)
(jcall nreverse)
(mov a1 (& 14))
(call #:complice:copy1)
(mov a1 a2)
(mov (& 17) a1)
(jcall cons)
(mov (cvalq #:complice:list-of-loaded-file) a2)
(jcall cons)
(mov a1 (cvalq #:complice:list-of-loaded-file))
(mov (& 14) a1)
103
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:colon))
(mov (& 7) (cvalq #:system:loaded-from-file))
(mov (& 8) (cvalq #:system:redef-flag))
(mov (& 9) (cvalq #:system:in-read-flag))
(adjstk '19)
(return)
))
(loader'((entry #:complice:copy1 subr1)
(bfnil a1 101)
(return)
101
(push (car a1))
(mov (cdr a1) a1)
(call #:complice:copy1)
(mov a1 a2)
(pop a1)
(jmp cons)
))
(loader'((entry #:complice:cp-read-files1 subr2)
(push a2)
(push a1)
(push (@ 101))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
102
(push (@ 104))
(jcall read)
(push a1)
(push (& 6))
(push (& 8))
(push nil)
(push 'scan)
(mov '5 a4)
(bra #:complice:cp-read-files2)
104
(eval ())
(mov a1 (& 4))
(bra 102)
103
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (& 0) a1)
(adjstk '2)
(return)
))
(defvar #:complice:exportable-definition ())
(defvar #:complice:synonym-definition ())
(loader'((entry #:complice:cp-read-files2 nsubr)
(btcons (& 4) 101)
(mov (& 3) a1)
(adjstk '5)
(return)
101
(mov (& 4) a4)
(mov (car a4) a4)
(cabeq a4 'de 105)
(cabeq a4 'df 105)
(cabeq a4 'defun 105)
(cabeq a4 'dm 105)
(cabeq a4 'dmd 105)
(cabne a4 'defmacro 103)
105
(btnil (& 1) 107)
(mov (& 4) a1)
(mov (cdr a1) a1)
(mov (cvalq #:complice:exportable-definition) a2)
(mov (car a1) a1)
(jcall memq)
(bfnil a1 107)
(mov (& 4) a1)
(mov (cdr a1) a1)
(mov (cvalq #:complice:exportable-definition) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:exportable-definition))
107
(cabeq (& 0) 'compile 109)
(push (@ 110))
(push (& 5))
(mov '1 a4)
(jmp eval)
110
(eval ())
109
(mov (& 4) a1)
(mov (cdr a1) a1)
(mov (& 3) a2)
(mov (car a1) a1)
(adjstk '5)
(jmp cons)
103
(mov (& 4) a3)
(cabne (car a3) 'eval-when 111)
(mov (cdr a3) a2)
(mov (car a2) a2)
(mov 'load a1)
(jcall memq)
(btnil a1 111)
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
113
(bfcons (& 0) 114)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 115))
(push (& 1))
(push (& 7))
(push (& 7))
(push (& 7))
(push 'compile)
(mov '5 a4)
(bra #:complice:cp-read-files2)
115
(eval ())
(mov a1 (& 5))
(adjstk '1)
(bra 113)
114
(adjstk '1)
(push (@ 116))
(push 'eval-when)
(mov (& 6) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov 'load a1)
(jcall remq)
(push a1)
(mov (& 7) a4)
(mov (cdr a4) a4)
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
116
(eval ())
(push a1)
(push (& 4))
(push (& 4))
(push (& 4))
(push (& 4))
(mov '5 a4)
(mov (& 4) (& 9))
(mov (& 3) (& 8))
(mov (& 2) (& 7))
(mov (& 1) (& 6))
(mov (& 0) (& 5))
(adjstk '5)
(bra #:complice:cp-read-files2)
111
(mov (& 4) a4)
(cabne (car a4) 'setfn 117)
(cabeq (& 0) 'compile 120)
(push (@ 121))
(push a4)
(mov '1 a4)
(jmp eval)
121
(eval ())
120
(mov (& 4) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 124)
(mov (& 4) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(cabeq (car a3) 'quote 122)
124
(mov (& 3) a2)
(mov (& 4) a1)
(adjstk '5)
(jmp cons)
122
(mov (& 4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) (& 4))
(btnil (& 1) 126)
(mov (cvalq #:complice:exportable-definition) a2)
(mov (& 4) a1)
(jcall memq)
(bfnil a1 126)
(mov (cvalq #:complice:exportable-definition) a2)
(mov (& 4) a1)
(jcall cons)
(mov a1 (cvalq #:complice:exportable-definition))
126
(mov (& 3) a2)
(mov (& 4) a1)
(adjstk '5)
(jmp cons)
117
(cabne (car a4) 'progn 127)
(push (cdr a4))
129
(bfcons (& 0) 130)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 131))
(push (& 1))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '5 a4)
(bra #:complice:cp-read-files2)
131
(eval ())
(mov a1 (& 5))
(adjstk '1)
(bra 129)
130
(adjstk '1)
(mov (& 3) a1)
(adjstk '5)
(return)
127
(cabne (car a4) 'exportable-definition 132)
(mov (cdr a4) a2)
(mov (cdr a2) a2)
(mov (cdr a4) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(call #:complice:get-exportable)
(mov a1 (& 1))
(mov (& 4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
134
(bfcons (& 0) 135)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 136))
(push (& 1))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '5 a4)
(bra #:complice:cp-read-files2)
136
(eval ())
(mov a1 (& 5))
(adjstk '1)
(bra 134)
135
(adjstk '1)
(mov (& 3) a1)
(adjstk '5)
(return)
132
(cabne (car a4) 'synonym 137)
(cabeq (& 0) 'compile 140)
(push (@ 141))
(push a4)
(mov '1 a4)
(jmp eval)
141
(eval ())
140
(mov (& 4) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 143)
(mov (& 4) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(cabne (car a3) 'quote 143)
(mov (& 4) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:complice:synonym-definition) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:synonym-definition))
143
(mov (& 3) a2)
(mov (& 4) a1)
(adjstk '5)
(jmp cons)
137
(push a4)
(mov a4 a1)
(jcall #:complice:macroexpand)
(mov a1 (cvalq #:complice:x))
(pop a4)
(cabeq a4 a1 144)
(push a1)
(push (& 4))
(push (& 4))
(push (& 4))
(push (& 4))
(mov '5 a4)
(mov (& 4) (& 9))
(mov (& 3) (& 8))
(mov (& 2) (& 7))
(mov (& 1) (& 6))
(mov (& 0) (& 5))
(adjstk '5)
(bra #:complice:cp-read-files2)
144
(mov (& 4) a4)
(cabne (car a4) 'defvar 146)
(mov (cdr a4) a1)
(mov '#:complice:globalvar a3)
(mov 't a2)
(mov (car a1) a1)
(jcall putprop)
(cabeq (& 0) 'compile 149)
(push (@ 150))
(push (& 5))
(mov '1 a4)
(jmp eval)
150
(eval ())
149
(push (@ 151))
(push (@ 152))
(push 'putprop)
(push (@ 153))
(push 'quote)
(mov (& 9) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
153
(eval ())
(push a1)
(push '('t '#:complice:globalvar))
(mov '3 a4)
(jmp mcons)
152
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
151
(eval ())
(mov (cvalq #:compiler:exported-env) a2)
(jcall cons)
(mov a1 (cvalq #:compiler:exported-env))
(mov (& 3) a2)
(mov (& 4) a1)
(adjstk '5)
(jmp cons)
146
(cabeq (& 0) 'compile 155)
(push (@ 156))
(push a4)
(mov '1 a4)
(jmp eval)
156
(eval ())
155
(mov (& 3) a2)
(mov (& 4) a1)
(adjstk '5)
(jmp cons)
))
(loader'((entry #:complice:get-exportable subr3)
(bfcons a2 101)
(cabne (car a2) 'quote 101)
(bfcons a3 101)
(cabne (car a3) 'quote 101)
(mov (cdr a2) a2)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:complice:get-exportable-aux)
101
(mov nil a1)
(return)
))
(loader'((entry #:complice:get-exportable-aux subr3)
(push a3)
(push a2)
(push a1)
(btcons a1 101)
(mov nil a1)
(adjstk '3)
(return)
101
(btcons (car a1) 103)
(mov (cdr a1) a1)
(adjstk '3)
(bra #:complice:get-exportable-aux)
103
(mov (car a1) a4)
(cabne (car a4) a2 105)
(mov (car a1) a2)
(mov (cdr a2) a2)
(mov a3 a1)
(jcall memq)
(btnil a1 105)
(mov 't a1)
(adjstk '3)
(return)
105
(mov (& 0) a1)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '3)
(bra #:complice:get-exportable-aux)
))
(defvar #:sys-package:colon 'complice)
(loader'((entry get-message subr1)
(push a1)
(mov (cvalq #:messages:current-language) a2)
(jcall getprop)
(bfnil a1 101)
(mov (& 0) a1)
(adjstk '1)
(jmp string)
101
(adjstk '1)
(return)
))
(putprop '#:complice:error '#["Internal Error" "Function computed" "Application of an mlambda" "Error during macro expansion" "function not defined" "Cannot compile an flet" "" "Cannot compile a letv" "Argument not a variable" "Bad selectq clause"] 'english)
(putprop '#:complice:error '#["Erreur interne" "Fonction calculee" "Application d'une mlambda" "Erreur durant macroexpansion" "Fonction non definie" "Ne peut pas compiler un flet" "" "Ne peut pas compiler un letv" "L'argument n'est pas une variable" "Mauvaise clause de selectq"] 'french)
(putprop '#:complice:warning '#["Undeclared global variable" "" "Unused function" "Wrong function type" "External function" "Wrong number of arguments" "Function external to module" "Calculated function" "Explicit call to evaluator" "Function external to file" "Module Interdependence" "Function redefined in module"] 'english)
(putprop '#:complice:warning '#["Variable globale non declaree" "" "Fonction non utilisee" "Fonction de mauvais type" "Fonction externe" "Mauvais nombre d'arguments" "Fonction externe au module" "Fonction calculee" "Appel explicite a l'evaluateur" "Fonction externe au fichier" "Interdependance de modules" "Fonction deja definie dans le module"] 'french)
(defvar #:complice:error-occured ())
(if (not (boundp '#:complice:warning-flag)) (progn (defvar #:complice:warning-flag t)))
(if (not (boundp '#:complice:no-warning)) (progn (defvar #:complice:no-warning '(7 8))))
(defvar #:complice:debug? ())
(defvar #:complice:outchan ())
(loader'((fentry #:complice:error subr2)
(entry #:complice:error subr2)
(mov a2 a3)
(mov a1 a2)
(mov (cvalq #:complice:f) a1)
(jmp #:complice:errorf)
))
(loader'((fentry #:complice:errorf subr3)
(entry #:complice:errorf subr3)
(push a3)
(push a2)
(push a1)
(jcall #:complice:set-error)
(push (@ 101))
(push '"E")
(push (& 3))
(push (& 3))
(mov '#:complice:error a1)
(call get-message)
(hpxmov a1 (& 5) a4)
(push a4)
(push (& 7))
(mov '5 a4)
(bra #:complice:1ligne)
101
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry #:complice:warning subr2)
(entry #:complice:warning subr2)
(mov a2 a3)
(mov a1 a2)
(mov (cvalq #:complice:f) a1)
(jmp #:complice:warningf)
))
(loader'((fentry #:complice:warningf subr3)
(entry #:complice:warningf subr3)
(push a3)
(push a2)
(push a1)
(btnil (cvalq #:complice:warning-flag) 101)
(push a2)
(mov (cvalq #:complice:no-warning) a2)
(pop a1)
(jcall memq)
(bfnil a1 101)
(push (@ 103))
(push '"W")
(push (& 3))
(push (& 3))
(mov '#:complice:warning a1)
(call get-message)
(hpxmov a1 (& 5) a4)
(push a4)
(push (& 7))
(mov '5 a4)
(bra #:complice:1ligne)
103
(eval ())
(adjstk '3)
(return)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:compiler:macro-expand-error subr1)
(mov a1 a2)
(mov '3 a1)
(jmp #:complice:error)
))
(loader'((fentry #:complice:ierror subr2)
(entry #:complice:ierror subr2)
(push a2)
(push a1)
(jcall #:complice:set-error)
(btnil (cvalq #:complice:debug?) 101)
(push (@ 103))
(push '"I")
(push '0)
(push (cvalq #:complice:f))
(push (& 4))
(push (& 6))
(mov '5 a4)
(bra #:complice:1ligne)
103
(eval ())
(adjstk '2)
(return)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:complice:set-error subr0)
(entry #:complice:set-error subr0)
(mov 't (cvalq #:complice:error-occured))
(mov 't a1)
(return)
))
(loader'((entry #:complice:1ligne nsubr)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push (cvalq #:complice:outchan))
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push nil)
(push '#:complice:error)
(push (cvalq #:sys-package:itsoft))
(mov (& 1) (cvalq #:sys-package:itsoft))
(push (cvalq #:system:print-for-read))
(mov (& 3) (cvalq #:system:print-for-read))
(push '2)
(push '(#:sys-package:itsoft #:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 105))
(push 'eol)
(push dlink)
(push tag)
(stack dlink)
(push (@ 106))
(push (& 23))
(push '".")
(push (& 24))
(push '".")
(push (& 25))
(push '"..")
(push (& 26))
(push '":")
(mov '8 a4)
(jmp print)
106
(eval ())
(mov (& 1) dlink)
(adjstk '4)
105
(eval ())
(push (@ 107))
(push 'eol)
(push dlink)
(push tag)
(stack dlink)
(push (@ 108))
(push '"     ")
(push (& 20))
(mov '2 a4)
(jmp print)
108
(eval ())
(mov (& 1) dlink)
(adjstk '4)
107
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(mov (& 7) (cvalq #:sys-package:itsoft))
(adjstk '10)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 109))
(push (& 4))
(mov '1 a4)
(jmp outchan)
109
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry #:complice:error:eol subr0)
(entry #:complice:error:eol subr0)
(jcall eol)
(mov 'eol a2)
(jmp #:llcp:exit)
))
(loader'((fentry #:complice:syserror subr3)
(entry #:complice:syserror subr3)
(push a3)
(push a2)
(push a1)
(btnil (cvalq #:complice:debug?) 102)
(push (@ 103))
(push 'syserror)
(push a1)
(push a2)
(push a3)
(mov '4 a4)
(jmp funcall)
103
(eval ())
102
(push (@ 104))
(push (& 1))
(push (& 3))
(push (& 5))
(mov '3 a4)
(jmp list)
104
(eval ())
(mov a1 a2)
(mov '0 a1)
(jcall #:complice:error)
(mov nil a1)
(mov '#:system:error-tag a2)
(jmp #:llcp:exit)
(adjstk '3)
(return)
))
(loader '((end)))
(loader '((title |cp1.lo|)))
(defvar #:sys-package:colon 'complice)
(if (not (boundp '#:complice:parano-flag)) (progn (defvar #:complice:parano-flag t)))
(defvar #:complice:x ())
(defvar #:complice:f '#:complice:pass-one)
(loader'((fentry #:complice:pass-one subr1)
(entry #:complice:pass-one subr1)
(push a1)
(mov nil (cvalq #:complice:error-occured))
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:sys-package:itsoft))
(push (cvalq #:sys-package:itsoft))
(mov (& 1) (cvalq #:sys-package:itsoft))
(push (cvalq #:complice:extfnt))
(mov (& 3) (cvalq #:complice:extfnt))
(push (cvalq #:complice:fvar-al))
(mov (& 5) (cvalq #:complice:fvar-al))
(push (cvalq #:complice:lvar-al))
(mov (& 7) (cvalq #:complice:lvar-al))
(push (cvalq #:complice:allfnt))
(mov (& 9) (cvalq #:complice:allfnt))
(push '5)
(push '(#:sys-package:itsoft #:complice:extfnt #:complice:fvar-al #:complice:lvar-al #:complice:allfnt))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'complice a1)
(jcall cons)
(mov a1 (cvalq #:sys-package:itsoft))
(push (@ 101))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (& 20))
102
(bfcons (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 105)
(mov (& 0) a1)
(call #:complice:parse)
105
(adjstk '1)
(bra 102)
103
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(push (& 16))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 109)
(mov '#:complice:fvar a2)
(mov (& 0) a1)
(jcall get)
(push a1)
110
(bfcons (& 0) 111)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a3)
(mov '0 a2)
(mov (& 2) a1)
(jcall #:complice:warningf)
(adjstk '1)
(bra 110)
111
(adjstk '1)
109
(adjstk '1)
(bra 106)
107
(adjstk '1)
(mov (cvalq #:complice:extfnt) a2)
(mov (cvalq #:complice:allfnt) a1)
(jcall cons)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:complice:allfnt))
(mov (& 7) (cvalq #:complice:lvar-al))
(mov (& 8) (cvalq #:complice:fvar-al))
(mov (& 9) (cvalq #:complice:extfnt))
(mov (& 10) (cvalq #:sys-package:itsoft))
(adjstk '17)
(return)
))
(loader'((entry #:complice:parse subr1)
(push (cvalq #:complice:f))
(mov a1 (cvalq #:complice:f))
(push '1)
(push '(#:complice:f))
(push (@ #:complice:parse))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'resetfn a2)
(jcall get)
(mov a1 (cvalq #:complice:x))
(btnil a1 101)
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (cvalq #:complice:f) a1)
(jcall setfn)
(mov 'resetfn a2)
(mov (cvalq #:complice:f) a1)
(jcall remprop)
(mov (cvalq #:complice:f) a1)
(call #:complice:parse)
(bra 102)
101
(mov (cvalq #:complice:f) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'macro 103)
(cabeq a4 'dmacro 103)
(cabeq a4 'expr 103)
(cabeq a4 'fexpr 103)
(push (@ 105))
(push (cvalq #:complice:f))
(mov (cvalq #:complice:f) a1)
(jcall typefn)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(mov a1 a2)
(mov '3 a1)
(jcall #:complice:warning)
(bra 102)
103
(mov (cvalq #:complice:lvar-al) a2)
(mov (cvalq #:complice:f) a1)
(jcall cassq)
(btnil a1 106)
(mov (cvalq #:complice:fvar-al) a3)
(mov (cvalq #:complice:lvar-al) a2)
(mov (cvalq #:complice:f) a1)
(call #:complice:get-fvar)
(call #:complice:parse-free-var)
(mov (cvalq #:complice:f) a1)
(call #:complice:env-open)
(bra 102)
106
(mov (cvalq #:complice:allfnt) a2)
(mov (cvalq #:complice:f) a1)
(jcall memq)
(bfnil a1 110)
(mov '#:complice:switched a2)
(mov (cvalq #:complice:f) a1)
(jcall get)
(btnil a1 108)
110
(mov '#:complice:fvar a2)
(mov (cvalq #:complice:f) a1)
(jcall get)
(call #:complice:parse-free-var)
(mov '#:complice:switched a2)
(mov (cvalq #:complice:f) a1)
(jcall get)
(btnil a1 111)
(mov (cvalq #:complice:extfnt) a2)
(mov (cvalq #:complice:f) a1)
(jcall memq)
(bfnil a1 111)
(mov (cvalq #:complice:extfnt) a2)
(mov (cvalq #:complice:f) a1)
(jcall cons)
(mov a1 (cvalq #:complice:extfnt))
(bra 102)
111
(mov nil a1)
(bra 102)
108
(mov '#:complice:fvar a2)
(mov (cvalq #:complice:f) a1)
(jcall remprop)
(mov (cvalq #:complice:f) a1)
(call #:complice:setftype)
(mov (cvalq #:complice:allfnt) a2)
(mov (cvalq #:complice:f) a1)
(jcall cons)
(mov a1 (cvalq #:complice:allfnt))
(mov (cvalq #:complice:f) a1)
(jcall ncons)
(mov (cvalq #:complice:lvar-al) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lvar-al))
(mov (cvalq #:complice:fvar-al) a2)
(mov nil a1)
(jcall cons)
(mov a1 (cvalq #:complice:fvar-al))
(mov (cvalq #:complice:f) a1)
(jcall valfn)
(call #:complice:parse-lambda)
(mov (cvalq #:complice:fvar-al) a4)
(btnil (car a4) 114)
(mov '#:complice:fvar a3)
(mov (car a4) a2)
(mov (cvalq #:complice:f) a1)
(jcall putprop)
114
(mov (cvalq #:complice:fvar-al) a4)
(mov (cdr a4) (cvalq #:complice:fvar-al))
(mov '#:complice:rec-env a2)
(mov (cvalq #:complice:f) a1)
(jcall remprop)
(push (cvalq #:complice:f))
(mov (cvalq #:complice:lvar-al) a1)
(mov (cdr a1) (cvalq #:complice:lvar-al))
(mov (car a1) a1)
(mov (cdr a1) a1)
(jcall nreverse)
(mov a1 a2)
(pop a1)
(call #:complice:setbind)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:complice:f))
(adjstk '7)
(return)
))
(loader'((entry #:complice:parse-lambda subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(btnil a1 101)
(cabeq a1 '&nobind 101)
(jcall #:complice:flatt)
(call #:complice:make-al)
(mov (cvalq #:complice:lvar-al) a4)
(push nil)
(push (car a4))
(push a1)
(jcall last)
(mov a1 (& 2))
(mov (& 1) a4)
(mov (cdr a4) (cdr a1))
(mov (& 0) (cdr a4))
(mov (& 3) a1)
(call #:complice:parse-progn)
103
(mov (& 1) a4)
(cabeq (cdr a4) (& 0) 104)
(mov (cdr a4) (& 1))
(bra 103)
104
(push a4)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (& 1) a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov (& 2) a4)
(mov nil (cdr a4))
(mov a4 a1)
(adjstk '4)
(return)
101
(mov (cvalq #:complice:lvar-al) a3)
(push (car a3))
(mov (car a3) a2)
(mov (cdr a2) a2)
(mov nil a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov (& 0) a1)
(adjstk '1)
(bra #:complice:parse-progn)
))
(loader'((entry #:complice:parse-progn subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:parse-exp)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:parse-prog3 subr2)
(push a2)
(push a1)
(bfnil a2 101)
(mov a1 a2)
(mov '5 a1)
(adjstk '2)
(jmp #:complice:warning)
101
(mov (car a2) a1)
(call #:complice:parse-exp)
(mov (& 1) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:parse-prog2)
))
(loader'((entry #:complice:parse-prog2 subr2)
(push a2)
(push a1)
(bfnil a2 101)
(mov a1 a2)
(mov '5 a1)
(adjstk '2)
(jmp #:complice:warning)
101
(mov (car a2) a1)
(call #:complice:parse-exp)
(mov (& 1) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:parse-prog1)
))
(loader'((entry #:complice:parse-prog1 subr2)
(btnil a2 103)
(btnil (cdr a2) 101)
103
(mov a1 a2)
(mov '5 a1)
(jmp #:complice:warning)
101
(mov (car a2) a1)
(bra #:complice:parse-exp)
))
(loader'((entry #:complice:parse-exp subr1)
(push a1)
(jcall constantp)
(bfnil a1 101)
(mov (& 0) a1)
(jcall numberp)
(bfnil a1 101)
(bfsymb (& 0) 103)
(mov (& 0) a1)
(call #:complice:local?)
(bfnil a1 105)
(mov (& 0) a1)
(adjstk '1)
(bra #:complice:try-to-bind)
105
(mov nil a1)
(adjstk '1)
(return)
103
(mov (& 0) a4)
(bfcons (car a4) 107)
(mov (cdr a4) a2)
(mov (car a4) a1)
(adjstk '1)
(bra #:complice:parse-anonymous-exp)
107
(mov (cdr a4) a2)
(mov (car a4) a1)
(call #:complice:parse-std-function?)
(bfnil a1 109)
(mov (& 0) a1)
(jcall #:complice:macroexpand)
(mov a1 (cvalq #:complice:x))
(cabeq (& 0) a1 110)
(adjstk '1)
(bra #:complice:parse-exp)
110
(mov (& 0) a1)
(mov (car a1) a1)
(jcall typefn)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(adjstk '1)
(bra #:complice:parse-exp-subr)
109
(adjstk '1)
(return)
101
(adjstk '1)
(return)
))
(loader'((entry #:complice:parse-exp-subr subr3)
(push a3)
(push a2)
(push a1)
(push a2)
(mov 'resetfn a2)
(pop a1)
(jcall get)
(mov a1 (cvalq #:complice:x))
(btnil a1 101)
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (& 1) a1)
(jcall setfn)
(mov 'resetfn a2)
(mov (& 1) a1)
(jcall remprop)
(mov (& 1) a1)
(call #:complice:parse)
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
(mov (& 2) a3)
(mov (& 1) a2)
(adjstk '3)
(bra #:complice:parse-subr)
101
(mov (& 0) a4)
(cabeq a4 'expr 105)
(cabne a4 'fexpr 103)
105
(mov (& 1) a1)
(call #:complice:parse)
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
(mov (& 2) a3)
(mov (& 1) a2)
(adjstk '3)
(bra #:complice:parse-subr)
103
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
(btnil a1 107)
(mov (cvalq #:complice:extfnt) a2)
(mov (& 1) a1)
(jcall memq)
(bfnil a1 107)
(mov (cvalq #:complice:extfnt) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:extfnt))
107
(mov (& 0) a1)
(bfnil a1 108)
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
108
(mov (& 2) a3)
(mov (& 1) a2)
(adjstk '3)
(bra #:complice:parse-subr)
))
(loader'((entry #:complice:parse-subr subr3)
(push a3)
(push a2)
(push a1)
(push a2)
(mov '#:complice:fvar a2)
(pop a1)
(jcall get)
(btnil a1 102)
(bfsymb a1 103)
(call #:complice:paranoia2)
(bra 102)
103
(call #:complice:parse-free-var)
102
(mov (& 0) a1)
(cabne a1 'fsubr 106)
(adjstk '3)
(return)
106
(cabne a1 'subr0 107)
(btnil (& 2) 108)
(mov (& 1) a2)
(mov '5 a1)
(adjstk '3)
(jmp #:complice:warning)
108
(mov nil a1)
(adjstk '3)
(return)
107
(cabne a1 'subr1 110)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:complice:parse-prog1)
110
(cabne a1 'subr2 111)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:complice:parse-prog2)
111
(cabne a1 'subr3 112)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:complice:parse-prog3)
112
(cabne a1 'nsubr 113)
(mov (& 2) a1)
(adjstk '3)
(bra #:complice:parse-progn)
113
(push (@ 115))
(push (& 2))
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(mov a1 a2)
(mov '3 a1)
(jcall #:complice:warning)
(push (@ 116))
(push 'eval)
(push (@ 117))
(push 'quote)
(mov (& 6) a2)
(mov (& 5) a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
117
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
116
(eval ())
(adjstk '3)
(bra #:complice:parse-exp)
))
(loader'((entry #:complice:parse-anonymous-exp subr2)
(push a1)
(mov (car a1) a1)
(cabne a1 'lambda 102)
(mov a2 a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:parse-lambda)
102
(cabne a1 'flambda 103)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:parse-lambda)
103
(cabne a1 'mlambda 104)
(mov (& 0) a2)
(mov '2 a1)
(adjstk '1)
(jmp #:complice:error)
104
(mov (& 0) a2)
(mov '1 a1)
(adjstk '1)
(jmp #:complice:error)
))
(loader'((entry #:complice:parse-std-function? subr2)
(push a2)
(push a1)
(cabeq a1 'if 103)
(cabeq a1 'and 103)
(cabeq a1 'or 103)
(cabeq a1 'while 103)
(cabeq a1 'until 103)
(cabeq a1 'repeat 103)
(cabeq a1 'progn 103)
(cabeq a1 'prog1 103)
(cabeq a1 'protect 103)
(cabeq a1 'evexit 103)
(cabeq a1 'evtag 103)
(cabeq a1 'setq 103)
(cabeq a1 'defvar 103)
(cabeq a1 'return 103)
(cabeq a1 'schedule 103)
(cabeq a1 'with-interrupts 103)
(cabne a1 'without-interrupts 102)
103
(mov a2 a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(adjstk '2)
(return)
102
(cabeq a1 'funcall 105)
(cabne a1 'apply 104)
105
(mov (car a2) a1)
(call #:complice:paranoia1)
(mov (& 1) a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(adjstk '2)
(return)
104
(cabne a1 'lock 106)
(push (car a2))
(mov (cdr a2) a2)
(pop a1)
(call #:complice:parse-lock)
(mov (& 0) a1)
(adjstk '2)
(return)
106
(cabne a1 'tagbody 107)
(mov a2 a1)
(call #:complice:parse-tagbody)
(mov (& 0) a1)
(adjstk '2)
(return)
107
(cabeq a1 'quote 109)
(cabeq a1 'comment 109)
(cabne a1 'mlambda 108)
109
(adjstk '2)
(return)
108
(cabeq a1 'lambda 111)
(cabne a1 'flambda 110)
111
(call #:complice:paranoia2)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:complice:parse-funarg)
(mov (& 0) a1)
(adjstk '2)
(return)
110
(cabne a1 'declare 112)
(push a2)
113
(bfcons (& 0) 114)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:declaration)
(bra 113)
114
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
112
(cabne a1 'selectq 115)
(mov (car a2) a1)
(call #:complice:parse-exp)
(mov (& 1) a4)
(push (cdr a4))
116
(bfcons (& 0) 117)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(mov (cdr a1) a1)
(call #:complice:parse-progn)
(adjstk '1)
(bra 116)
117
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
115
(cabne a1 'letv 118)
(mov a2 a1)
(call #:complice:parse-letv)
(mov (& 0) a1)
(adjstk '2)
(return)
118
(cabne a1 'deset 119)
(mov a2 a1)
(call #:complice:parse-deset)
(mov (& 0) a1)
(adjstk '2)
(return)
119
(cabeq a1 'tag 121)
(cabeq a1 'exit 121)
(cabeq a1 'unexit 121)
(cabeq a1 'block 121)
(cabne a1 'return-from 120)
121
(mov (cdr a2) a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(adjstk '2)
(return)
120
(cabeq a1 'unwind 123)
(cabne a1 'unexit 122)
123
(jcall cons)
(call #:complice:paranoia3)
(mov (& 0) a1)
(adjstk '2)
(return)
122
(cabeq a1 'eval 125)
(cabeq a1 'symeval 125)
(cabeq a1 'evlis 125)
(cabne a1 'set 124)
125
(jcall cons)
(call #:complice:paranoia3)
(mov (& 1) a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(adjstk '2)
(return)
124
(cabne a1 'precompile 126)
(mov (car a2) a1)
(call #:complice:parse-exp)
(mov (& 0) a1)
(adjstk '2)
(return)
126
(cabne a1 'flet 127)
(bfnil (cvalq #:complice:parano-flag) 128)
(mov '5 a1)
(jcall #:complice:error)
(bra 129)
128
(push (@ 130))
(push 'eval)
(push (@ 131))
(push 'quote)
(mov 'flet a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
131
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
130
(eval ())
(call #:complice:parse-exp)
129
(mov (& 0) a1)
(adjstk '2)
(return)
127
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:make-al subr1)
(push a1)
(push a1)
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(mov (car a4) a1)
(jcall ncons)
(pop a4)
(mov a1 (car a4))
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:local? subr1)
(mov (cvalq #:complice:lvar-al) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(jmp assq)
))
(loader'((entry #:complice:parse-free-var subr1)
(bfvar a1 101)
(bra #:complice:paranoia2)
101
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:try-to-bind)
(bra 103)
104
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:try-to-bind subr1)
(push a1)
(jcall #:complice:globalvarp)
(bfnil a1 101)
(mov (cvalq #:complice:fvar-al) a3)
(mov (cvalq #:complice:lvar-al) a2)
(mov (& 0) a1)
(adjstk '1)
(bra #:complice:try-to-bind-aux)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:try-to-bind-aux subr3)
(push a3)
(push a2)
(push a1)
(btnil a2 101)
(mov (car a2) a2)
(mov (cdr a2) a2)
(jcall assq)
(btnil a1 103)
(mov 'cval (cdr a1))
(adjstk '3)
(return)
103
(mov (& 1) a1)
(mov (car a1) a1)
(mov '#:complice:rec-env a2)
(mov (car a1) a1)
(jcall get)
(push a1)
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(call #:complice:rec-bind)
(adjstk '1)
(bra 105)
106
(adjstk '1)
(mov (& 2) a4)
(btvar (car a4) 108)
(mov (car a4) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 108)
(mov (& 2) a2)
(mov (car a2) a2)
(mov (& 0) a1)
(jcall cons)
(mov (& 2) a4)
(mov a1 (car a4))
108
(mov (& 1) a2)
(mov (& 2) a3)
(mov (cdr a3) a3)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:complice:try-to-bind-aux)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:get-fvar subr3)
(mov (car a2) a4)
(cabne (car a4) a1 101)
(mov (car a3) a1)
(return)
101
(mov (cdr a3) a3)
(mov (cdr a2) a2)
(bra #:complice:get-fvar)
))
(loader'((entry #:complice:env-open subr1)
(push a1)
(push a1)
(mov (cvalq #:complice:lvar-al) a2)
(call #:complice:env-open-aux)
(push a1)
(mov '#:complice:rec-env a2)
(mov (& 2) a1)
(jcall get)
(mov a1 a2)
(pop a1)
(jcall cons)
(mov '#:complice:rec-env a3)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp putprop)
))
(loader'((entry #:complice:env-open-aux subr2)
(push a2)
(push a1)
(mov (car a2) a4)
(cabne (car a4) a1 101)
(push a1)
(mov (car a2) a1)
(mov (cdr a1) a1)
(call #:complice:env-open-aux2)
(mov a1 a2)
(pop a1)
(jcall cons)
(adjstk '2)
(jmp ncons)
101
(mov (car a2) a1)
(push (car a1))
(mov (car a2) a1)
(mov (cdr a1) a1)
(call #:complice:env-open-aux2)
(mov a1 a2)
(pop a1)
(jcall cons)
(push a1)
(mov (& 2) a2)
(mov (cdr a2) a2)
(mov (& 1) a1)
(call #:complice:env-open-aux)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp cons)
))
(loader'((entry #:complice:env-open-aux2 subr1)
(bfnil a1 101)
(return)
101
(mov (car a1) a4)
(bfvar (car a4) 103)
(push (car a1))
(mov (cdr a1) a1)
(call #:complice:env-open-aux2)
(mov a1 a2)
(pop a1)
(jmp cons)
103
(mov (cdr a1) a1)
(bra #:complice:env-open-aux2)
))
(loader'((entry #:complice:rec-bind subr2)
(push a2)
(push a1)
(bfnil a2 101)
(adjstk '2)
(return)
101
(mov (car a2) a3)
(mov (cdr a3) a3)
(mov 'cval a2)
(jcall #:complice:setcassq)
(bfnil a1 103)
(mov (& 1) a1)
(mov (car a1) a1)
(mov '#:complice:fvar a2)
(mov (car a1) a1)
(jcall get)
(push a1)
(mov a1 a2)
(mov (& 1) a1)
(jcall memq)
(bfnil a1 105)
(mov (& 2) a1)
(mov (car a1) a1)
(push (car a1))
(mov (& 1) a2)
(mov (& 2) a1)
(jcall cons)
(mov '#:complice:fvar a3)
(mov a1 a2)
(pop a1)
(jcall putprop)
105
(mov (& 2) a2)
(mov (cdr a2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:complice:rec-bind)
103
(adjstk '2)
(return)
))
(loader'((entry #:complice:paranoia1 subr1)
(mov a1 a2)
(mov '7 a1)
(jcall #:complice:warning)
(bra #:complice:paranoia2)
))
(loader'((entry #:complice:paranoia2 subr0)
(btnil (cvalq #:complice:parano-flag) 101)
(push (cvalq #:complice:lvar-al))
(push (cvalq #:complice:fvar-al))
103
(bfcons (& 1) 104)
(bfcons (& 0) 104)
(push (& 1))
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(pop a4)
(push (& 0))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(pop a3)
(mov (cdr a4) a2)
(mov (car a4) a4)
(mov (cdr a4) a1)
(mov (car a4) a4)
(mov 'parano (car a3))
(push a1)
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(bfvar (car a4) 108)
(mov 'cval (cdr a4))
108
(adjstk '1)
(bra 105)
106
(adjstk '1)
(bra 103)
104
(mov nil a1)
(adjstk '2)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:complice:paranoia3 subr1)
(mov a1 a2)
(mov '8 a1)
(jcall #:complice:warning)
(bra #:complice:paranoia2)
))
(loader'((entry #:complice:setftype subr1)
(push a1)
(push a1)
(jcall typefn)
(cabne a1 'fexpr 102)
(mov 'fsubr a2)
(bra 101)
102
(cabne a1 'macro 103)
(mov 'msubr a2)
(bra 101)
103
(cabne a1 'dmacro 104)
(mov 'dmsubr a2)
(bra 101)
104
(mov (& 1) a1)
(jcall valfn)
(push (car a1))
(btvar (& 0) 108)
(mov (& 0) a1)
(jcall last)
(bfnil (cdr a1) 108)
(mov (& 0) a1)
(jcall length)
(cnblt a1 '4 106)
108
(mov 'nsubr a2)
(bra 107)
106
(push (@ 109))
(push 'subr)
(mov (& 2) a1)
(jcall length)
(push a1)
(mov '2 a4)
(jmp concat)
109
(eval ())
(mov a1 a2)
107
(adjstk '1)
101
(mov '#:complice:ftype a3)
(pop a1)
(adjstk '1)
(jmp putprop)
))
(loader'((entry #:complice:setbind subr2)
(push a1)
(mov a2 a1)
(call #:complice:setbind-aux)
(btnil a1 101)
(mov '#:complice:bind a3)
(mov a1 a2)
(mov (& 0) a1)
(adjstk '1)
(jmp putprop)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:setbind-aux subr1)
(push a1)
(btnil a1 101)
(mov (car a1) a1)
(call #:complice:make-bind)
(push a1)
(mov (& 1) a1)
(mov (cdr a1) a1)
(call #:complice:setbind-aux)
(btnil a1 103)
(mov a1 a2)
(mov (& 0) a1)
(adjstk '2)
(jmp cons)
103
(btnil (& 0) 105)
(mov (& 0) a1)
(adjstk '2)
(jmp ncons)
105
(mov nil a1)
(adjstk '2)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:make-bind subr1)
(push a1)
(btnil a1 101)
(mov (car a1) a4)
(cabeq (cdr a4) 'cval 103)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:make-bind)
103
(mov (car a1) a1)
(push (car a1))
(mov (& 1) a1)
(mov (cdr a1) a1)
(call #:complice:make-bind)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp cons)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:parse-funarg subr2)
(push a2)
(push a1)
(push (cvalq #:complice:f))
(jcall gensym)
(mov a1 a2)
(pop a1)
(jcall symbol)
(push a1)
(cabne (& 1) 'lambda 101)
(mov 'expr a2)
(bra 102)
101
(mov 'fexpr a2)
102
(mov (& 2) a3)
(jcall setfn)
(mov (& 0) a1)
(call #:complice:parse)
(mov (cvalq #:complice:lvar-al) a4)
(push (car a4))
(push (@ 103))
(push (@ 104))
(mov '#:complice:bind a2)
(mov (& 3) a1)
(jcall get)
(mov 'cval a2)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp list)
104
(eval ())
(push a1)
(push (@ 105))
(mov '#:complice:ftype a2)
(mov (& 4) a1)
(jcall get)
(mov 'cval a2)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp list)
105
(eval ())
(push a1)
(mov (cvalq #:complice:lvar-al) a3)
(mov (car a3) a3)
(push (cdr a3))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(pop a4)
(mov a1 (cdr a4))
(mov (cvalq #:complice:allfnt) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (cvalq #:complice:allfnt))
(mov (& 0) a1)
(adjstk '3)
(jmp remob)
))
(loader'((entry #:complice:parse-lock subr2)
(push a2)
(push a1)
(bfcons a1 101)
(mov (car a1) a4)
(cabeq a4 'lambda 103)
(cabne a4 'quote 101)
103
(cabne (car a1) 'quote 105)
(mov (cdr a1) a4)
(mov (car a4) (& 0))
105
(btvar (& 0) 106)
(bfcons (& 0) 108)
(mov (& 0) a4)
(cabeq (car a4) 'lambda 106)
108
(mov (& 0) a2)
(mov '1 a1)
(adjstk '2)
(jmp #:complice:error)
106
(push (@ 109))
(push (& 1))
(push nil)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
109
(eval ())
(adjstk '2)
(bra #:complice:parse-exp)
101
(call #:complice:paranoia1)
(mov (& 0) a1)
(call #:complice:parse-exp)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:parse-progn)
))
(loader'((entry #:complice:parse-tagbody subr1)
(push a1)
(btcons a1 101)
(adjstk '1)
(return)
101
(btcons (car a1) 103)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:parse-tagbody)
103
(mov (car a1) a1)
(call #:complice:parse-exp)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:parse-tagbody)
))
(loader'((entry #:complice:parse-letv subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(push a3)
(bfcons a1 103)
(cabeq (car a1) 'quote 101)
103
(mov a1 a2)
(mov '7 a1)
(adjstk '2)
(jmp #:complice:error)
101
(push (@ 104))
(push (@ 105))
(push 'lambda)
(push (@ 106))
(mov (cdr a1) a2)
(push (car a2))
(mov '1 a4)
(jmp list)
106
(eval ())
(push a1)
(push (& 4))
(mov '3 a4)
(jmp mcons)
105
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp list)
104
(eval ())
(adjstk '2)
(bra #:complice:parse-exp)
))
(loader'((entry #:complice:parse-deset subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push a4)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov a4 a1)
(call #:complice:parse-exp)
(mov (cvalq #:complice:lvar-al) a4)
(push (car a4))
(mov (car a4) a2)
(mov (cdr a2) a2)
(mov nil a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall #:complice:flatt)
(adjstk '2)
(bra #:complice:parse-progn)
101
(push (@ 103))
(push 'deset)
(push a1)
(push a4)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(call #:complice:paranoia3)
(mov (& 1) a1)
(call #:complice:parse-exp)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:parse-exp)
))
(loader'((entry #:complice:declaration subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(cabne a1 'special 102)
(push a4)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:complice:lvar-al) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(jcall assq)
(btnil a1 105)
(mov 'cval (cdr a1))
(bra 106)
105
(mov (& 0) a2)
(mov '1 a1)
(jcall #:complice:warning)
106
(adjstk '1)
(bra 103)
104
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
102
(cabne a1 'cpcall 107)
(push (cdr a4))
108
(bfcons (& 0) 109)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(call #:complice:parse)
(adjstk '1)
(bra 108)
109
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
107
(adjstk '1)
(return)
))
(defvar #:sys-package:colon 'complice)
(defvar #:rehash:verbose ())
(loader'((entry #:complice:loadmodule subr2)
(push a2)
(push a1)
(btnil (cvalq #:rehash:verbose) 102)
(push (@ 103))
(push '"loading module: ")
(push a1)
(push '". macro not defined inside EVAL-WHEN")
(mov '3 a4)
(jmp catenate)
103
(eval ())
(mov (& 1) a3)
(mov a1 a2)
(mov 'complice a1)
(jcall printerror)
102
(push (@ 104))
(push (& 1))
(push nil)
(mov '2 a4)
(jmp loadmodule)
104
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry makemodule subr1)
(entry makemodule subr1)
(push a1)
(jcall ncons)
(push (cvalq #:complice:done))
(mov a1 (cvalq #:complice:done))
(push '1)
(push '(#:complice:done))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 7) a1)
(call #:complice:makemodule)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:complice:done))
(adjstk '8)
(return)
))
(loader'((entry #:complice:makemodule subr1)
(push a1)
(jcall readdefmodule)
(mov nil a3)
(mov a1 a2)
(pop a1)
(call #:complice:makemodule-aux)
(push a1)
(bfnil a1 101)
(mov (cvalq #:complice:done) a1)
(adjstk '1)
(return)
101
(mov a1 a3)
(mov '10 a2)
(mov 'makemodule a1)
(jcall #:complice:warningf)
(mov (& 0) a1)
(call #:complice:make-list-of-module)
(mov nil (cvalq #:complice:list-of-loaded-file))
(push (& 0))
103
(bfcons (& 0) 104)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:makemodule)
(bra 103)
104
(adjstk '1)
(mov (cvalq #:complice:done) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:makemodule-aux subr3)
(push a3)
(push a2)
(push a1)
(mov a3 a2)
(jcall memq)
(btnil a1 101)
(mov (& 2) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(adjstk '3)
(jmp cons)
101
(mov (& 2) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 2))
(mov 'import a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push (& 2))
(push nil)
(push a1)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov a1 (& 3))
(mov 'cpexport a2)
(jcall getdefmodule)
(btnil a1 105)
(mov (& 4) a4)
(bra 106)
105
(mov (& 4) a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:complice:makemodule-aux)
(mov a1 a4)
106
(mov a4 (& 4))
(adjstk '1)
(bra 103)
104
(adjstk '1)
(cabeq (& 2) (& 5) 107)
(mov (& 2) a1)
(adjstk '6)
(return)
107
(mov (& 0) a3)
(mov (& 4) a2)
(mov (& 3) a1)
(call #:complice:make-single-module)
(mov (& 5) a1)
(mov (cdr a1) a1)
(adjstk '6)
(return)
))
(loader'((entry #:complice:make-list-of-module subr1)
(push a1)
(call #:complice:get-all-files)
(push nil)
(push (cvalq #:complice:no-warning))
(push a1)
(mov (& 1) a2)
(mov '6 a1)
(jcall cons)
(mov a1 (cvalq #:complice:no-warning))
(push (& 0))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov 't a2)
(mov (& 0) a1)
(jcall libloadfile)
(adjstk '1)
(bra 101)
102
(adjstk '1)
(push (& 3))
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov a1 (& 4))
(push a1)
(mov 'import a2)
(jcall getdefmodule)
(mov a1 a3)
(pop a2)
(mov (& 0) a1)
(call #:complice:make-single-module)
(adjstk '1)
(bra 103)
104
(adjstk '1)
(mov (& 1) (cvalq #:complice:no-warning))
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:get-all-files subr1)
(push nil)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'files a2)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 4) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 106)
(mov (& 4) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 4))
106
(adjstk '1)
(bra 103)
104
(adjstk '2)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(jmp nreverse)
))
(loader'((entry #:complice:make-single-module subr3)
(push a3)
(push a2)
(push a1)
(mov (cvalq #:complice:done) a2)
(jcall memq)
(bfnil a1 102)
(mov (cvalq #:complice:done) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:done))
102
(mov 'include a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:complice:list-of-loaded-file) a2)
(mov (& 0) a1)
(jcall cassoc)
(bfnil a1 106)
(mov (& 0) a1)
(jcall ncons)
(mov (cvalq #:complice:list-of-loaded-file) a2)
(jcall cons)
(mov a1 (cvalq #:complice:list-of-loaded-file))
(mov 't a2)
(mov (& 0) a1)
(jcall libloadfile)
106
(adjstk '1)
(bra 103)
104
(adjstk '1)
(mov nil (cvalq #:compiler:exported-env))
(mov 'export a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push a1)
(push (& 8))
107
(bfcons (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 3) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 110)
(mov (& 3) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 3))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'cpenv a2)
(jcall getdefmodule)
(push a1)
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 113)
(mov (& 0) a1)
(jcall eprogn)
(bra 114)
113
(mov (& 5) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 114)
(mov (& 5) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 5))
(mov (& 9) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 9))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'cpenv a2)
(jcall getdefmodule)
(push a1)
117
(bfcons (& 0) 118)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 120)
(mov (& 0) a1)
(jcall eprogn)
120
(adjstk '1)
(bra 117)
118
(adjstk '1)
114
(adjstk '1)
(bra 111)
112
(adjstk '1)
(mov (& 7) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 110)
(mov (& 7) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 7))
110
(adjstk '1)
(bra 107)
108
(adjstk '1)
(mov nil (cvalq #:complice:exportable-definition))
(mov nil (cvalq #:complice:synonym-definition))
(mov 'files a2)
(mov (& 7) a1)
(jcall getdefmodule)
(push a1)
(mov 'export a2)
(mov (& 8) a1)
(jcall getdefmodule)
(mov a1 a2)
(pop a1)
(jcall #:complice:get-all-def-in-files)
(mov a1 (& 4))
(push (@ 123))
(push (cvalq #:complice:exportable-definition))
(push (& 2))
(mov '2 a4)
(jmp nconc)
123
(eval ())
(mov a1 (& 2))
(mov (& 4) a2)
(mov (& 8) a1)
(call #:complice:switch-on)
(mov (& 2) a1)
(jcall #:complice:pass-one)
(push a1)
(push (@ 124))
(push (& 8))
(push (& 10))
(push (& 8))
(push (car a1))
(push (& 8))
(mov '5 a4)
(bra #:complice:make-single-module1)
124
(eval ())
(mov a1 (& 8))
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov a1 a2)
(mov (& 7) a1)
(call #:complice:make-single-module2)
(mov a1 (& 8))
(push a1)
(push (@ 125))
(mov (& 8) a1)
(jcall nreverse)
(push a1)
(mov (cvalq #:compiler:exported-env) a1)
(jcall nreverse)
(push a1)
(mov '2 a4)
(jmp nconc)
125
(eval ())
(mov a1 a3)
(mov 'cpenv a2)
(pop a1)
(jcall setdefmodule)
(mov a1 (& 8))
(mov (& 7) a2)
(jcall printdefmodule)
(mov (& 0) a4)
(push (car a4))
126
(bfcons (& 0) 127)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push '(#:complice:bind #:complice:fvar #:complice:ftype))
128
(bfcons (& 0) 129)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 128)
129
(adjstk '2)
(bra 126)
127
(adjstk '1)
(mov (& 9) a1)
(adjstk '10)
(bra #:complice:switch-off)
))
(loader'((entry #:complice:make-single-module1 nsubr)
(push nil)
(push nil)
(push (& 3))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 4) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 103)
(mov (& 6) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 106)
(mov (cvalq #:complice:synonym-definition) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 106)
(mov (& 0) a3)
(mov '4 a2)
(mov (& 8) a1)
(jcall #:complice:warningf)
106
(push (@ 107))
(push (& 1))
(mov '#:complice:ftype a2)
(mov (& 2) a1)
(jcall get)
(push a1)
(mov '#:complice:fvar a2)
(mov (& 3) a1)
(jcall get)
(push a1)
(mov '#:complice:bind a2)
(mov (& 4) a1)
(jcall get)
(push a1)
(mov '4 a4)
(jmp mcons)
107
(eval ())
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
(bra 104)
103
(mov (& 6) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 108)
(push (@ 110))
(push (& 1))
(mov '#:complice:ftype a2)
(mov (& 2) a1)
(jcall get)
(push a1)
(mov '#:complice:bind a2)
(mov (& 3) a1)
(jcall get)
(push a1)
(mov '3 a4)
(jmp mcons)
110
(eval ())
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(bra 104)
108
(mov (& 0) a3)
(mov '6 a2)
(mov (& 8) a1)
(jcall #:complice:warningf)
104
(mov (& 6) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (& 6))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(push (& 4))
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 114)
(mov (& 0) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'macro 114)
(cabeq a4 'dmacro 114)
(mov (& 0) a1)
(jcall macro-openp)
(bfnil a1 114)
(mov (& 0) a3)
(mov '2 a2)
(mov (& 8) a1)
(jcall #:complice:warningf)
114
(adjstk '1)
(bra 111)
112
(adjstk '1)
(mov (& 1) a3)
(mov 'cpexport a2)
(mov (& 5) a1)
(jcall setdefmodule)
(mov (& 0) a3)
(mov 'cpfunctions a2)
(adjstk '7)
(jmp setdefmodule)
))
(loader'((entry #:complice:make-single-module2 subr3)
(push a2)
(push a1)
(push nil)
(push a3)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov '#:complice:switched a2)
(mov (& 0) a1)
(jcall get)
(push a1)
(bfnil a1 103)
(mov (& 1) a3)
(mov '6 a2)
(mov (& 4) a1)
(jcall #:complice:warningf)
(bra 104)
103
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
(push a1)
(mov (& 4) a2)
(mov (& 1) a1)
(jcall assq)
(push a1)
(btnil a1 105)
(push a1)
(mov (& 2) a2)
(mov (& 4) a1)
(jcall cons)
(mov (& 1) a2)
(mov (cdr a2) a2)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(bra 106)
105
(push (@ 107))
(push (& 3))
(mov (& 3) a2)
(mov (& 5) a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
107
(eval ())
(mov (& 5) a2)
(jcall cons)
(mov a1 (& 5))
106
(adjstk '2)
104
(adjstk '2)
(bra 101)
102
(adjstk '1)
(mov (& 0) a3)
(mov 'cpimport a2)
(mov (& 2) a1)
(adjstk '3)
(jmp setdefmodule)
))
(loader'((entry #:complice:switch-on subr2)
(push a2)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'cpexport a2)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push a3)
(mov (& 6) a2)
(mov (& 2) a1)
(jcall memq)
(btnil a1 105)
(mov (& 4) a3)
(mov '11 a2)
(mov (& 2) a1)
(jcall #:complice:warningf)
(bra 106)
105
(mov '#:complice:ftype a3)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall putprop)
(mov (& 1) a4)
(cabeq a4 'msubr 109)
(cabne a4 'dmsubr 108)
109
(mov (& 2) a1)
(jcall typefn)
(bfnil a1 108)
(mov (& 2) a2)
(mov (& 4) a1)
(call #:complice:loadmodule)
108
(mov '#:complice:switched a3)
(mov (& 4) a2)
(mov (& 2) a1)
(jcall putprop)
(btnil (& 0) 106)
(mov '#:complice:fvar a3)
(mov (& 0) a2)
(mov (& 2) a1)
(jcall putprop)
106
(adjstk '3)
(bra 103)
104
(adjstk '2)
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:switch-off subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'cpexport a2)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov '#:complice:ftype a2)
(mov (& 0) a1)
(jcall remprop)
(mov '#:complice:switched a2)
(mov (& 0) a1)
(jcall remprop)
(mov (& 0) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'expr 107)
(cabeq a4 'fexpr 107)
(cabne a4 '() 106)
107
(mov '#:complice:fvar a2)
(mov (& 0) a1)
(jcall remprop)
106
(adjstk '1)
(bra 103)
104
(adjstk '2)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader '((end)))
(loader '((title |cpmod2.lo|)))
(defvar #:sys-package:colon 'complice)
(loader'((fentry makemodule-pass-two subr1)
(entry makemodule-pass-two subr1)
(push a1)
(jcall readdefmodule)
(push a1)
(mov 'files a2)
(jcall getdefmodule)
(push a1)
(mov 'export a2)
(mov (& 1) a1)
(jcall getdefmodule)
(mov a1 a2)
(pop a1)
(jcall #:complice:get-all-def-in-files)
(push a1)
(mov 'cpimport a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push a1)
(mov 'cpexport a2)
(mov (& 2) a1)
(jcall getdefmodule)
(push a1)
(mov 'cpfunctions a2)
(mov (& 3) a1)
(jcall getdefmodule)
(push a1)
(push (& 2))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push a4)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov '#:complice:ftype a3)
(mov a4 a2)
(mov (& 0) a1)
(jcall putprop)
(adjstk '1)
(bra 103)
104
(adjstk '2)
(bra 101)
102
(adjstk '1)
(push (& 1))
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push a3)
(push a2)
(mov '#:complice:ftype a3)
(mov a4 a2)
(mov (& 2) a1)
(jcall putprop)
(btnil (& 1) 108)
(mov '#:complice:fvar a3)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall putprop)
108
(btnil (& 0) 110)
(mov '#:complice:bind a3)
(mov (& 0) a2)
(mov (& 2) a1)
(jcall putprop)
110
(adjstk '3)
(bra 105)
106
(adjstk '1)
(push (& 0))
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a3)
(mov '#:complice:ftype a3)
(mov a4 a2)
(mov (& 1) a1)
(jcall putprop)
(btnil (& 0) 114)
(mov '#:complice:bind a3)
(mov (& 0) a2)
(mov (& 1) a1)
(jcall putprop)
114
(adjstk '2)
(bra 111)
112
(adjstk '1)
(mov 'cpexport a2)
(mov (& 4) a1)
(jcall getdefmodule)
(push a1)
(push nil)
115
(bfcons (& 1) 116)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 115)
116
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a3)
(mov (& 5) a2)
(mov (& 3) a1)
(jcall #:complice:generate-in-file)
(push (& 2))
117
(bfcons (& 0) 118)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push a4)
119
(bfcons (& 0) 120)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov '#:complice:ftype a2)
(mov (& 0) a1)
(jcall remprop)
(adjstk '1)
(bra 119)
120
(adjstk '2)
(bra 117)
118
(adjstk '1)
(push (& 1))
121
(bfcons (& 0) 122)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push '(#:complice:bind #:complice:fvar #:complice:ftype))
123
(bfcons (& 0) 124)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 123)
124
(adjstk '2)
(bra 121)
122
(adjstk '1)
(push (& 1))
125
(bfcons (& 0) 126)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push '(#:complice:bind #:complice:ftype))
127
(bfcons (& 0) 128)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 127)
128
(adjstk '2)
(bra 125)
126
(mov nil a1)
(adjstk '7)
(return)
))
(loader'((fentry #:complice:generate-in-file subr3)
(entry #:complice:generate-in-file subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp printlevel)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp printlength)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp outchan)
104
(eval ())
(push a1)
(push (@ 105))
(mov '0 a4)
(jmp rmargin)
105
(eval ())
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp lmargin)
106
(eval ())
(push a1)
(mov (& 6) a2)
(mov (& 8) a1)
(jcall #:complice:complement)
(push 't)
(push nil)
(push a1)
(push (cvalq #:system:print-for-read))
(mov (& 3) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:system:obj-extension))
(mov (& 18) a1)
(jcall string)
(push a1)
(push (@ 109))
(push (& 2))
(push a1)
(mov '2 a4)
(jmp index)
109
(eval ())
(hgsize (& 0) a4)
(hgsize (& 1) a3)
(diff a3 a4)
(cabne a1 a4 107)
(mov (& 0) a4)
(bra 108)
107
(push (@ 110))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp catenate)
110
(eval ())
(mov a1 a4)
108
(mov a4 (& 19))
(adjstk '2)
(push (@ 111))
(mov a4 a1)
(jcall openo)
(push a1)
(mov '1 a4)
(jmp outchan)
111
(eval ())
(push (@ 112))
(push '10)
(mov '1 a4)
(jmp obase)
112
(eval ())
(push (@ 113))
(push '1000)
(mov '1 a4)
(jmp printlevel)
113
(eval ())
(push (@ 114))
(push '30000)
(mov '1 a4)
(jmp printlength)
114
(eval ())
(push (@ 115))
(push (@ 116))
(mov '0 a4)
(jmp outbuf)
116
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
115
(eval ())
(push (@ 117))
(push '0)
(mov '1 a4)
(jmp lmargin)
117
(eval ())
(push (@ 118))
(push (@ 119))
(push 'loader)
(push (@ 120))
(push 'quote)
(push (@ 121))
(push (@ 122))
(push 'title)
(push (@ 123))
(push (& 26))
(mov '1 a4)
(jmp concat)
123
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
122
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
121
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
120
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
119
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
118
(eval ())
(push (@ 124))
(push dlink)
(push prot)
(stack dlink)
(push (& 19))
126
(bfcons (& 0) 127)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 128)
(push (@ 130))
(push (& 1))
(mov '1 a4)
(jmp print)
130
(eval ())
(bra 129)
128
(mov '#:complice:ftype a2)
(mov (& 0) a1)
(jcall get)
(btnil a1 132)
(mov nil a4)
(bra 133)
132
(mov 't a4)
133
(bfnil a4 129)
(mov nil a3)
(mov (& 12) a2)
(mov (& 0) a1)
(jcall #:complice:pass-two)
(push a1)
(mov (& 24) a2)
(mov (& 1) a1)
(jcall memq)
(btnil a1 134)
(mov '#:complice:fvar a2)
(mov (& 1) a1)
(jcall get)
(mov a1 (& 14))
(btnil a1 135)
(push (@ 138))
(push (@ 139))
(push 'putprop)
(push (@ 140))
(push 'quote)
(push (& 6))
(mov '2 a4)
(jmp list)
140
(eval ())
(push a1)
(push (@ 141))
(push 'quote)
(push (& 20))
(mov '2 a4)
(jmp list)
141
(eval ())
(push a1)
(push '('#:complice:fvar))
(mov '4 a4)
(jmp mcons)
139
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
138
(eval ())
(bra 135)
134
(mov (& 0) a4)
(mov (cdr a4) (& 0))
135
(push (@ 142))
(push '40)
(mov '1 a4)
(jmp princn)
142
(eval ())
(push (@ 143))
(push 'loader)
(mov '1 a4)
(jmp prin)
143
(eval ())
(push (@ 144))
(push '39)
(mov '1 a4)
(jmp princn)
144
(eval ())
(push (@ 145))
(push '40)
(mov '1 a4)
(jmp princn)
145
(eval ())
(push (& 0))
146
(bfcons (& 0) 147)
(push (@ 148))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
148
(eval ())
(bra 146)
147
(adjstk '1)
(push (@ 149))
(push '41)
(mov '1 a4)
(jmp princn)
149
(eval ())
(push (@ 150))
(push '41)
(mov '1 a4)
(jmp princn)
150
(eval ())
(push (@ 151))
(mov '0 a4)
(jmp terpri)
151
(eval ())
(adjstk '1)
129
(adjstk '1)
(bra 126)
127
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 125) a3)
124
(push a3)
(push a2)
(push (@ 152))
(push '(loader '((end))))
(mov '1 a4)
(jmp print)
152
(eval ())
(push (@ 153))
(push (@ 154))
(mov '0 a4)
(jmp outchan)
154
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
153
(eval ())
(push (@ 155))
(push (& 15))
(mov '1 a4)
(jmp rmargin)
155
(eval ())
(push (@ 156))
(push (& 14))
(mov '1 a4)
(jmp lmargin)
156
(eval ())
(push (@ 157))
(push (& 19))
(mov '1 a4)
(jmp obase)
157
(eval ())
(push (@ 158))
(push (& 18))
(mov '1 a4)
(jmp printlevel)
158
(eval ())
(push (@ 159))
(push (& 17))
(mov '1 a4)
(jmp printlength)
159
(eval ())
(push (@ 160))
(push (& 16))
(mov '1 a4)
(jmp outchan)
160
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
125
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '19)
(return)
))
(loader'((fentry pretty-lap subr2)
(entry pretty-lap subr2)
(push a1)
(bfnil a2 101)
(adjstk '1)
(return)
101
(cabne a2 '0 103)
(push (@ 105))
(push '"(loader '(")
(mov '1 a4)
(jmp print)
105
(eval ())
(mov (& 0) a1)
(call pretty-lap-lisp)
(push (@ 106))
(push '"))")
(mov '1 a4)
(jmp print)
106
(eval ())
(adjstk '1)
(return)
103
(adjstk '1)
(bra pretty-lap-llm3)
))
(loader'((entry pretty-lap-lisp subr1)
(push a1)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
101
(btnil (& 8) 102)
(mov (& 8) a4)
(btcons (car a4) 103)
(btnil (car a4) 104)
(push (@ 109))
(mov '0 a4)
(jmp outpos)
109
(eval ())
(cabeq a1 '0 108)
(push (@ 110))
(mov '0 a4)
(jmp terpri)
110
(eval ())
108
(push (@ 111))
(mov (& 9) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
111
(eval ())
(push (@ 114))
(mov '0 a4)
(jmp outpos)
114
(eval ())
(cnblt a1 '9 112)
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
(bra 104)
112
(push (@ 116))
(push '10)
(mov '1 a4)
(jmp outpos)
116
(eval ())
(bra 104)
103
(push (@ 119))
(mov '0 a4)
(jmp outpos)
119
(eval ())
(cabne a1 '0 118)
(push (@ 120))
(push '10)
(mov '1 a4)
(jmp outpos)
120
(eval ())
118
(push (@ 121))
(mov (& 9) a4)
(push (car a4))
(mov '1 a4)
(jmp print)
121
(eval ())
104
(mov (& 8) a4)
(mov (cdr a4) (& 8))
(bra 101)
102
(mov nil a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '9)
(return)
))
(loader'((entry pretty-lap-llm3 subr1)
(push a1)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
101
(btnil (& 8) 102)
(mov (& 8) a4)
(btcons (car a4) 103)
(btnil (car a4) 104)
(push (@ 109))
(mov '0 a4)
(jmp outpos)
109
(eval ())
(cabeq a1 '0 108)
(push (@ 110))
(mov '0 a4)
(jmp terpri)
110
(eval ())
108
(push (@ 111))
(mov (& 9) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
111
(eval ())
(push (@ 114))
(mov '0 a4)
(jmp outpos)
114
(eval ())
(cnblt a1 '9 112)
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
(bra 104)
112
(push (@ 116))
(push '10)
(mov '1 a4)
(jmp outpos)
116
(eval ())
(bra 104)
103
(push (@ 119))
(mov '0 a4)
(jmp outpos)
119
(eval ())
(cabne a1 '0 118)
(push (@ 120))
(push '10)
(mov '1 a4)
(jmp outpos)
120
(eval ())
118
(push (@ 121))
(mov (& 9) a4)
(mov (car a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
121
(eval ())
(push (@ 122))
(push '20)
(mov '1 a4)
(jmp outpos)
122
(eval ())
(mov (& 8) a4)
(mov (car a4) a4)
(btnil (cdr a4) 124)
(mov (& 8) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call prin-llm3-op)
124
(mov (& 8) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
125
(bfcons (& 0) 126)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 127))
(push '44)
(mov '1 a4)
(jmp princn)
127
(eval ())
(mov (& 0) a1)
(call prin-llm3-op)
(adjstk '1)
(bra 125)
126
(adjstk '1)
(push (@ 128))
(mov '0 a4)
(jmp terpri)
128
(eval ())
104
(mov (& 8) a4)
(mov (cdr a4) (& 8))
(bra 101)
102
(mov nil a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '9)
(return)
))
(loader'((entry prin-llm3-op subr1)
(push a1)
(btcons a1 101)
(push (@ 103))
(push a1)
(mov '1 a4)
(jmp prin)
103
(eval ())
(adjstk '1)
(return)
101
(cabne (car a1) 'cvalq 104)
(push (@ 106))
(mov (cdr a1) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
106
(eval ())
(adjstk '1)
(return)
104
(cabne (car a1) '@ 107)
(push (@ 109))
(push '64)
(mov '1 a4)
(jmp princn)
109
(eval ())
(push (@ 110))
(mov (& 1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
110
(eval ())
(adjstk '1)
(return)
107
(cabne (car a1) 'quote 111)
(push (@ 113))
(push '39)
(mov '1 a4)
(jmp princn)
113
(eval ())
(push (@ 114))
(mov (& 1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
114
(eval ())
(adjstk '1)
(return)
111
(cabne (car a1) '& 115)
(push (@ 117))
(push '38)
(mov '1 a4)
(jmp princn)
117
(eval ())
(push (@ 118))
(mov (& 1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
118
(eval ())
(adjstk '1)
(return)
115
(push (@ 119))
(push (car a1))
(mov '1 a4)
(jmp prin)
119
(eval ())
(push (@ 120))
(mov (& 1) a4)
(push (cdr a4))
(mov '1 a4)
(jmp prin)
120
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:complice:peephole subr1)
(entry #:complice:peephole subr1)
(bra #:compiler:peephole)
))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'peephole)))
(defvar #:sys-package:colon 'compiler)
(if (not (boundp '#:compiler:ph-debug)) (progn (defvar #:compiler:ph-debug ())))
(if (not (boundp '#:compiler:ph-stat)) (progn (defvar #:compiler:ph-stat ())))
(defvar #:compiler:no-jrst-hack '(#:llcp:nlist #:llcp:cbindl #:llcp:cbinds #:llcp:tagbody #:llcp:with-interrupts #:llcp:without-interrupts #:llcp:schedule #:llcp:block #:llcp:protect #:llcp:tag))
(loader'((entry #:compiler:peephole subr1)
(push a1)
(push nil)
(push '29999)
(push nil)
(push '29998)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov a1 (& 2))
101
(bfcons (& 2) 102)
(mov (& 2) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (& 0))
(bfcons (& 0) 103)
(mov (& 0) a3)
(bfnil (car a3) 103)
(mov (& 0) a3)
(mov (cdr a3) (cdr a4))
(bra 101)
103
(bfnil (& 1) 105)
(bfcons (& 0) 107)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov a4 a1)
(jcall rplac)
(bra 101)
107
(mov nil (& 2))
(bra 101)
105
(btcons (& 1) 109)
(mov (& 0) a3)
(btnil (car a3) 113)
(bfcons (car a3) 111)
113
(mov (& 0) (& 2))
(bra 101)
111
(mov (& 0) a1)
(mov (& 9) a3)
(mov (& 1) a2)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
109
(mov (& 1) a3)
(cabne (car a3) 'return 114)
(mov (& 0) a2)
(btnil (car a2) 118)
(bfcons (car a2) 116)
118
(mov (& 0) (& 2))
(bra 101)
116
(mov (& 0) a1)
(mov (& 9) a3)
(mov (& 8) a2)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
114
(cabne (car a3) 'bra 119)
(mov (& 0) a2)
(btnil (car a2) 123)
(bfcons (car a2) 121)
123
(mov (& 0) (& 2))
(bra 101)
121
(mov (& 0) a1)
(mov (cdr a3) a2)
(cabne (car a1) (car a2) 124)
(mov (& 6) a2)
(bra 125)
124
(mov (cdr a3) a2)
(mov (car a2) a2)
125
(mov (& 9) a3)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
119
(mov (& 0) (& 2))
(bra 101)
102
(push (& 9))
126
(bfcons (& 0) 127)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (& 10) a2)
(mov (cdr a1) a1)
(jcall cassq)
(mov a1 (& 4))
(btnil a1 128)
(mov (& 0) a4)
(mov (car a4) a3)
(cabeq a1 (car a3) 130)
(mov a1 a3)
(bra 131)
130
(mov (& 7) a3)
131
(mov (car a4) a2)
(mov a3 (cdr a2))
(bra 126)
128
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 126)
127
(adjstk '1)
(mov (& 10) (& 2))
132
(bfcons (& 2) 133)
(mov (& 2) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (& 0))
(btcons (& 1) 134)
(mov (& 0) a3)
(bfcons (car a3) 136)
(mov (car a3) a2)
(cabne (car a2) 'bra 136)
(mov (car a3) a1)
(mov (cdr a1) a1)
(cabeq (car a1) (& 1) 138)
(mov (car a3) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(cabne a1 (& 1) 136)
138
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 132)
136
(mov (& 0) (& 2))
(bra 132)
134
(mov (& 1) a3)
(cabne (car a3) 'bra 139)
(mov (cdr a3) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 3))
(cabne a1 (& 8) 141)
(mov (& 2) a4)
(mov '(return) (car a4))
(bra 132)
141
(mov (& 0) a4)
(bfcons (car a4) 143)
(mov (car a4) a3)
(mov (car a3) a3)
(cabeq a3 'bra 145)
(cabeq a3 'jmp 145)
(cabne a3 'return 143)
145
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
143
(btnil a1 146)
(mov (& 1) a1)
(jcall last)
(mov (& 3) (car a1))
(cabne (& 3) (& 6) 149)
(mov 't (& 5))
149
(mov (& 0) (& 2))
(bra 132)
146
(mov (& 0) (& 2))
(bra 132)
139
(cabne (car a3) 'push 150)
(mov (cdr a3) a2)
(bfcons (car a2) 150)
(mov (cdr a3) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 150)
(mov (cdr a3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 4))
(cabne a1 (& 8) 152)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
152
(btnil a1 154)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov a1 (car a3))
(mov (& 0) (& 2))
(bra 132)
154
(mov (& 0) (& 2))
(bra 132)
150
(cabne (car a3) 'mov 156)
(mov (cdr a3) a2)
(bfcons (car a2) 156)
(mov (cdr a3) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 156)
(mov (cdr a3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 4))
(btnil a1 159)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov a1 (car a3))
(cabne a1 (& 8) 159)
(mov 't (& 7))
159
(mov (& 0) (& 2))
(bra 132)
156
(cabne (car a3) 'return 162)
(mov (& 0) a2)
(bfcons (car a2) 162)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(cabeq a2 'bra 166)
(cabeq a2 'jmp 166)
(cabne a2 'return 164)
166
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov a4 a1)
(jcall rplac)
(bra 132)
164
(mov (& 0) a1)
(mov (car a1) a1)
(cabne (car a1) 'jcall 167)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:compiler:no-jrst-hack) a2)
(mov (car a1) a1)
(jcall memq)
(bfnil a1 167)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 2) a4)
(mov (car a4) a3)
(mov 'jmp (car a3))
(bra 132)
167
(mov (& 0) a4)
(mov (car a4) a4)
(cabne (car a4) 'call 169)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 2) a4)
(mov (car a4) a3)
(mov 'bra (car a3))
(bra 132)
169
(mov (& 0) (& 2))
(bra 132)
162
(cabne (car a3) 'adjstk 171)
(mov (& 0) a2)
(bfcons (car a2) 171)
(mov (car a2) a1)
(cabne (car a1) 'adjstk 171)
(mov (cdr a3) a4)
(bfcons (car a4) 171)
(mov (cdr a3) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 171)
(mov (cdr a3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 171)
(mov (& 0) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a3) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a2) a2)
(plus (car a1) a2)
(mov (cdr a4) a4)
(mov a2 (car a4))
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
171
(mov (cdr a3) a1)
(jcall last)
(mov (car a1) (& 4))
(bffix (car a1) 173)
(cabeq (& 4) (& 8) 173)
(mov (& 9) a2)
(mov (& 4) a1)
(jcall cassq)
(mov a1 (& 3))
(btnil a1 173)
(mov (& 1) a1)
(jcall last)
(cabne (& 3) (& 8) 175)
(mov 't (& 7))
(mov (& 8) a4)
(bra 176)
175
(cabne (& 3) (& 6) 177)
(mov 't (& 5))
(mov (& 6) a4)
(bra 176)
177
(mov (& 3) a4)
176
(mov a4 (car a1))
(bra 132)
173
(mov (& 0) (& 2))
(bra 132)
133
(btnil (& 7) 180)
(push (@ 181))
(push '(return))
(push (& 10))
(push (& 13))
(mov '3 a4)
(jmp mcons)
181
(eval ())
(mov a1 (& 10))
180
(btnil (& 5) 183)
(push (@ 184))
(push (@ 185))
(push 'bra)
(push (& 9))
(mov '2 a4)
(jmp list)
185
(eval ())
(push a1)
(push (& 8))
(push (& 13))
(mov '3 a4)
(jmp mcons)
184
(eval ())
(mov a1 (& 10))
183
(mov (& 10) a1)
(adjstk '11)
(return)
))
(loader '((end)))
(loader '((title |cp2.lo|)))
(defvar #:sys-package:colon 'complice)
(defvar #:complice:peephole-flag t)
(loader'((fentry #:complice:pass-two subr3)
(entry #:complice:pass-two subr3)
(push a1)
(push (cvalq #:sys-package:itsoft))
(push (cvalq #:complice:talk?))
(mov a3 (cvalq #:complice:talk?))
(push (cvalq #:complice:lfnt-module))
(mov a2 (cvalq #:complice:lfnt-module))
(push (cvalq #:complice:f))
(mov a1 (cvalq #:complice:f))
(push (cvalq #:sys-package:itsoft))
(mov (& 4) (cvalq #:sys-package:itsoft))
(push '4)
(push '(#:complice:talk? #:complice:lfnt-module #:complice:f #:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'complice a1)
(jcall cons)
(mov a1 (cvalq #:sys-package:itsoft))
(push (@ 101))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 15) a1)
(call #:complice:pass-two-aux)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (cvalq #:complice:lap) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(mov (& 7) (cvalq #:complice:f))
(mov (& 8) (cvalq #:complice:lfnt-module))
(mov (& 9) (cvalq #:complice:talk?))
(adjstk '12)
(return)
))
(loader'((entry #:complice:pass-two-aux subr1)
(mov (cvalq #:complice:f) a1)
(call #:complice:initall)
(push (cvalq #:complice:f))
(mov '#:complice:ftype a2)
(mov (cvalq #:complice:f) a1)
(jcall get)
(push a1)
(mov (cvalq #:complice:f) a1)
(jcall valfn)
(mov (car a1) a3)
(pop a2)
(pop a1)
(call #:complice:make-header)
(push a1)
(btnil (cvalq #:complice:&nobind) 102)
(mov nil (cvalq #:complice:tail?))
102
(mov (cvalq #:complice:f) a1)
(jcall valfn)
(mov (cdr a1) a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(mov 't a3)
(mov (& 0) a2)
(mov nil a1)
(call #:complice:reset-env)
(mov '(return) a1)
(call #:complice:code-last)
(call #:complice:hack-for-arg)
103
(btnil (cvalq #:complice:op-stack) 104)
(mov (cvalq #:complice:op-stack) a4)
(push (car a4))
(mov (car a4) a1)
(mov (car a1) a1)
(jcall ncons)
(pop a4)
(mov a1 (cdr a4))
(mov (cvalq #:complice:op-stack) a4)
(mov (cdr a4) (cvalq #:complice:op-stack))
(mov (car a4) a4)
(mov '& (car a4))
(bra 103)
104
(call #:complice:final-adjust)
(btnil (cvalq #:complice:peephole-flag) 106)
(mov (cvalq #:complice:lap) a1)
(jcall #:complice:peephole)
(mov a1 (cvalq #:complice:lap))
106
(mov (cvalq #:complice:lap) a1)
(jcall nreverse)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:talk?) a2)
(adjstk '1)
(jmp pretty-lap)
))
(loader'((entry #:complice:exp subr1)
(push a1)
(mov a1 a4)
(cabeq a4 '() 103)
(cabne a4 'nil 101)
103
(mov 'nil a1)
(adjstk '1)
(return)
101
(jcall numberp)
(bfnil a1 106)
(mov (& 0) a1)
(jcall constantp)
(btnil a1 104)
106
(push (@ 107))
(push 'quote)
(push (& 2))
(mov '2 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(return)
104
(mov (& 0) a1)
(call #:complice:is-in-reg?)
(bfnil a1 108)
(bfsymb (& 0) 109)
(btnil (cvalq #:complice:return?) 111)
(mov (& 0) a1)
(adjstk '1)
(bra #:complice:get-env)
111
(mov 'a1 a1)
(adjstk '1)
(return)
109
(mov (& 0) a4)
(bfcons (car a4) 113)
(mov a4 a1)
(adjstk '1)
(bra #:complice:app-lambda)
113
(mov (cdr a4) a2)
(mov (car a4) a1)
(call #:complice:cpfnt)
(bfnil a1 115)
(mov (& 0) a1)
(jcall #:complice:macroexpand)
(mov a1 (cvalq #:complice:x))
(cabeq (& 0) a1 116)
(adjstk '1)
(bra #:complice:exp)
116
(mov (& 0) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(adjstk '1)
(bra #:complice:exp-subr)
115
(adjstk '1)
(return)
108
(adjstk '1)
(return)
))
(loader'((entry #:complice:exp-subr subr2)
(push a2)
(push a1)
(mov '#:complice:ftype a2)
(jcall get)
(mov a1 a4)
(bfnil a4 101)
(mov (& 0) a1)
(jcall typefn)
(mov a1 a4)
101
(cabne a4 'nsubr 102)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:nsubr)
102
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov a4 a1)
(cabne a1 'subr0 105)
(bra 104)
105
(cabne a1 'subr1 106)
(mov (& 3) a1)
(call #:complice:subr1)
(bra 104)
106
(cabne a1 'subr2 107)
(mov (& 3) a1)
(call #:complice:subr2)
(bra 104)
107
(cabne a1 'subr3 108)
(mov (& 3) a1)
(call #:complice:subr3)
(bra 104)
108
(cabne a1 'fsubr 109)
(push (@ 110))
(push 'quote)
(push (& 5))
(mov '2 a4)
(jmp list)
110
(eval ())
(mov 'a1 a2)
(call #:complice:mov)
(bra 104)
109
(push (@ 112))
(push (@ 113))
(push 'quote)
(mov (& 6) a2)
(mov (& 5) a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
113
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
112
(eval ())
(mov a1 a2)
(mov 'eval a1)
(call #:complice:exp-subr)
(mov nil (& 2))
104
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(bfnil (& 0) 114)
(mov 'a1 a1)
(adjstk '2)
(return)
114
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:call)
))
(loader'((entry #:complice:subr1 subr1)
(mov (car a1) a1)
(call #:complice:exp)
(mov 'a1 a2)
(bra #:complice:mov)
))
(loader'((entry #:complice:subr2 subr1)
(push a1)
(mov (car a1) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(push a1)
(mov 'a2 (cvalq #:complice:return?))
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:complice:exp)
(mov 'a2 a2)
(call #:complice:mov)
(mov 'a1 a2)
(mov (& 0) a1)
(call #:complice:unprotect-op)
(mov 'a1 a2)
(adjstk '2)
(bra #:complice:mov)
))
(loader'((entry #:complice:subr3 subr1)
(push a1)
(mov (car a1) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(push nil)
(push a1)
(mov 'a2 (cvalq #:complice:return?))
(mov (& 2) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 1))
(mov 'a3 (cvalq #:complice:return?))
(mov (& 2) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:complice:exp)
(mov 'a3 a2)
(call #:complice:mov)
(mov 'a2 a2)
(mov (& 1) a1)
(call #:complice:unprotect-op)
(mov 'a2 a2)
(call #:complice:mov)
(mov 'a1 a2)
(mov (& 0) a1)
(call #:complice:unprotect-op)
(mov 'a1 a2)
(adjstk '3)
(bra #:complice:mov)
))
(loader'((entry #:complice:nsubr subr2)
(push a2)
(push a1)
(btnil (cvalq #:complice:tail?) 103)
(cabne a1 (cvalq #:complice:f) 103)
(bfnil (cvalq #:complice:funarg?) 103)
(bfnil (cvalq #:complice:lframe) 103)
(mov (cvalq #:complice:v-stack) a1)
(call #:complice:nfix)
(cabeq a1 '1 101)
103
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push '0)
(push a4)
(push (@ 104))
(push '@)
(push a4)
(mov '2 a4)
(jmp list)
104
(eval ())
(call #:complice:push)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
105
(btnil (& 5) 106)
(mov (& 5) a1)
(mov (cdr a1) (& 5))
(mov (car a1) a1)
(call #:complice:exp)
(call #:complice:push)
(mov (& 3) a4)
(plus '1 a4)
(mov a4 (& 3))
(bra 105)
106
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (@ 107))
(push 'quote)
(push (& 3))
(mov '2 a4)
(jmp list)
107
(eval ())
(mov 'a4 a2)
(call #:complice:mov)
(mov (& 2) a1)
(call #:complice:jmp)
(mov (cvalq #:complice:lap) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(call #:complice:clear-all-reg)
(mov (cvalq #:complice:stack) a4)
(mov (& 1) a3)
(plus '1 a3)
(mov (car a4) a4)
(diff a3 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(adjstk '2)
(bra 102)
101
(mov (& 0) a1)
(jcall valfn)
(mov (car a1) a1)
(jcall #:complice:flatt)
(push a1)
(jcall length)
(push '0)
(push a1)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
108
(btnil (& 6) 109)
(mov (& 6) a1)
(mov (cdr a1) (& 6))
(mov (car a1) a1)
(call #:complice:exp)
(call #:complice:push)
(mov (& 3) a4)
(plus '1 a4)
(mov a4 (& 3))
(bra 108)
109
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (@ 110))
(push 'quote)
(push (& 3))
(mov '2 a4)
(jmp list)
110
(eval ())
(mov 'a4 a2)
(call #:complice:mov)
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff (& 1) a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
111
(btnil (& 2) 113)
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (car a1) a1)
(call #:complice:get-env)
(bra 111)
113
(cabeq (& 1) '0 114)
(mov (& 1) a4)
(diff '1 a4)
(mov a4 (& 1))
(push (@ 115))
(push '&)
(push a4)
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(push (@ 116))
(push '&)
(mov (& 4) a4)
(plus (& 3) a4)
(push a4)
(mov '2 a4)
(jmp list)
116
(eval ())
(mov a1 a2)
(pop a1)
(call #:complice:mov)
(bra 113)
114
(push (@ 117))
(push 'adjstk)
(push (@ 118))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
118
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
117
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push (@ 119))
(push 'bra)
(push (& 5))
(mov '2 a4)
(jmp list)
119
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'done (cvalq #:complice:tail?))
(adjstk '3)
102
(mov 'a1 a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:nfix subr1)
(bfnil a1 101)
(mov '0 a1)
(return)
101
(bffix (car a1) 103)
(mov (cdr a1) a1)
(call #:complice:nfix)
(plus '1 a1)
(return)
103
(mov (cdr a1) a1)
(bra #:complice:nfix)
))
(loader'((entry #:complice:pred subr3)
(push a3)
(push a2)
(push a1)
(btnil a1 103)
(cabne a1 'nil 101)
103
(bfnil a2 104)
(push (@ 106))
(push 'bra)
(push a3)
(mov '2 a4)
(jmp list)
106
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '3)
(return)
104
(mov nil a1)
(adjstk '3)
(return)
101
(cabeq a1 't 109)
(mov ''t a2)
(jcall equal)
(btnil a1 107)
109
(btnil (& 1) 110)
(push (@ 112))
(push 'bra)
(push (& 4))
(mov '2 a4)
(jmp list)
112
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '3)
(return)
110
(mov nil a1)
(adjstk '3)
(return)
107
(mov (& 0) a1)
(jcall #:complice:macroexpand)
(mov a1 (cvalq #:complice:x))
(cabeq (& 0) a1 113)
(mov (& 2) a3)
(mov (& 1) a2)
(adjstk '3)
(bra #:complice:pred)
113
(btcons (& 0) 115)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(push (@ 117))
(btnil (& 4) 118)
(mov 'bfnil a4)
(bra 119)
118
(mov 'btnil a4)
119
(push a4)
(mov (& 4) a1)
(call #:complice:exp)
(call #:complice:read-op)
(push a1)
(push (& 7))
(mov '3 a4)
(jmp list)
117
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(mov (& 0) a1)
(adjstk '5)
(return)
115
(mov (& 0) a4)
(cabne (car a4) 'not 120)
(mov (cdr a4) a1)
(btnil (& 1) 122)
(mov nil a2)
(bra 123)
122
(mov 't a2)
123
(mov (& 2) a3)
(mov (car a1) a1)
(adjstk '3)
(bra #:complice:pred)
120
(mov (& 2) a3)
(mov (& 1) a2)
(mov a4 a1)
(call #:complice:cppred)
(bfnil a1 124)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 2) a1)
(call #:complice:exp)
(call #:complice:read-op)
(mov a1 (& 2))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (@ 125))
(btnil (& 2) 126)
(mov 'bfnil a4)
(bra 127)
126
(mov 'btnil a4)
127
(push a4)
(push a1)
(push (& 5))
(mov '3 a4)
(jmp list)
125
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
124
(adjstk '3)
(return)
))
(loader'((entry #:complice:progn subr1)
(push a1)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:return?))
101
(mov (& 2) a4)
(btnil (cdr a4) 102)
(mov (cdr a4) (& 2))
(mov (car a4) a1)
(call #:complice:exp)
(bra 101)
102
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (car a4) a1)
(adjstk '1)
(bra #:complice:exp)
))
(loader'((entry #:complice:make-header subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(push 'fentry)
(push a1)
(push a2)
(mov '3 a4)
(jmp list)
101
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push (@ 102))
(push 'entry)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp list)
102
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(cabne (& 1) 'nsubr 104)
(mov (& 2) a2)
(mov (& 0) a1)
(call #:complice:check-nsubr)
104
(mov (& 2) a2)
(mov (& 1) a1)
(call #:complice:init-header)
(mov 't a2)
(mov nil a1)
(adjstk '3)
(bra #:complice:deset-env)
))
(loader'((entry #:complice:check-nsubr subr2)
(push a2)
(push a1)
(bfcons a2 101)
(mov (cvalq #:complice:lfnt-module) a2)
(jcall memq)
(bfnil a1 101)
(mov (& 1) a1)
(jcall length)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(push a1)
(mov (& 3) a1)
(jcall last)
(bfnil (cdr a1) 103)
(push (@ 105))
(push 'cnbeq)
(push 'a4)
(push (@ 106))
(push 'quote)
(push (& 5))
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(push (& 5))
(mov '4 a4)
(jmp list)
105
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 104)
103
(push (@ 107))
(push 'cnbge)
(push 'a4)
(push (@ 108))
(push 'quote)
(push (& 5))
(mov '2 a4)
(jmp list)
108
(eval ())
(push a1)
(push (& 5))
(mov '4 a4)
(jmp list)
107
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
104
(push (@ 109))
(push 'mov)
(push (@ 110))
(push 'quote)
(push (& 6))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(push '(a1))
(mov '3 a4)
(jmp mcons)
109
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push (@ 111))
(push 'mov)
(push (@ 112))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
112
(eval ())
(push a1)
(push '(a2))
(mov '3 a4)
(jmp mcons)
111
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov '(jmp #:llcp:errwna) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '4)
(return)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:init-header subr2)
(push a2)
(mov a1 a4)
(cabeq a4 'fsubr 103)
(cabeq a4 'msubr 103)
(cabne a4 'dmsubr 101)
103
(btnil a2 104)
(push a2)
(mov 'a1 a2)
(pop a1)
(adjstk '1)
(bra #:complice:add-env)
104
(mov nil a1)
(adjstk '1)
(return)
101
(cabeq a1 'nsubr 106)
(push '(a1 a2 a3))
(push a2)
108
(bfcons (& 0) 109)
(bfcons (& 1) 109)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (& 1) a2)
(mov (cdr a2) (& 1))
(mov (car a2) a2)
(mov (car a1) a1)
(call #:complice:add-env)
(bra 108)
109
(mov nil a1)
(adjstk '3)
(return)
106
(cabne a2 '&nobind 110)
(mov 't (cvalq #:complice:&nobind))
(mov (cvalq #:complice:lap) a2)
(mov '(push a4) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov '&nobind a1)
(adjstk '1)
(bra #:complice:push-var)
110
(push '0)
112
(bfcons (& 1) 113)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(call #:complice:push-var)
(mov (& 0) a4)
(plus '1 a4)
(mov a4 (& 0))
(bra 112)
113
(btnil (& 1) 114)
(cabeq (& 0) '0 117)
(push (@ 118))
(push 'diff)
(push (@ 119))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
119
(eval ())
(push a1)
(push '(a4))
(mov '3 a4)
(jmp mcons)
118
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
117
(mov (cvalq #:complice:lap) a2)
(mov '(jcall #:llcp:nlist) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'a1 a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:add-env)
114
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:evlis2 subr2)
(push a2)
(push a1)
(push nil)
(push '0)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:return?))
101
(bfcons (& 4) 102)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 5) a1)
(mov (cdr a1) (& 5))
(mov (car a1) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(bra 101)
102
(btnil (& 4) 104)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
105
(btnil (& 5) 106)
(mov (& 5) a1)
(mov (cdr a1) (& 5))
(mov (car a1) a1)
(call #:complice:exp)
(call #:complice:push)
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 105)
106
(mov 'a1 a2)
(mov nil a1)
(call #:complice:write-op)
(mov 'a2 a2)
(mov nil a1)
(call #:complice:write-op)
(mov 'a3 a2)
(mov nil a1)
(call #:complice:write-op)
(push (@ 107))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
107
(eval ())
(mov 'a4 a2)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov '(jcall #:llcp:nlist) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff (& 2) a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov 'a1 a1)
(call #:complice:protect-op)
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
104
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (& 1))
108
(bfcons (& 0) 109)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(mov (car a4) a1)
(call #:complice:protected-op?)
(mov a1 a3)
(bfnil a3 110)
(mov 'sp a3)
110
(pop a4)
(mov a3 (car a4))
(bra 108)
109
(adjstk '1)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:app-lambda subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a1) a3)
(mov (car a1) a1)
(push a1)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push a3)
(push a2)
(push a4)
(push (cvalq #:complice:env))
(push nil)
(cabne a1 'flambda 102)
(push a4)
(push nil)
103
(bfcons (& 1) 104)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 105))
(push 'quote)
(push (& 2))
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 103)
104
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 (& 2))
102
(mov (& 2) a2)
(mov (& 4) a1)
(call #:complice:evlis2)
(jcall nreverse)
(mov a1 (& 2))
(push (cvalq #:complice:stack))
(mov (cvalq #:complice:stack) a4)
(push (car a4))
(mov a1 a2)
(mov 'sp a1)
(jcall #:complice:count)
(pop a4)
(diff a1 a4)
(pop a3)
(mov a4 (car a3))
(mov (& 2) a2)
(mov (& 4) a1)
(call #:complice:init-app-lambda)
(mov nil a2)
(mov (& 1) a1)
(call #:complice:deset-env)
(mov a1 (& 0))
(mov (& 3) a1)
(call #:complice:progn)
(mov a1 (& 5))
(btnil (cvalq #:complice:tail?) 106)
(mov (cvalq #:complice:return?) a2)
(call #:complice:mov)
(mov a1 (& 5))
(bra 107)
106
(btnil (cvalq #:complice:return?) 107)
(cabne a1 'a1 111)
(mov a1 a4)
(bra 110)
111
(cabne a1 'a2 112)
(mov a1 a4)
(bra 110)
112
(cabne a1 'a3 113)
(mov a1 a4)
(bra 110)
113
(cabne a1 'a4 114)
(mov a1 a4)
(bra 110)
114
(mov nil a4)
110
(bfnil a4 107)
(push (cvalq #:complice:return?))
(mov (& 0) a1)
(cabne a1 'a1 118)
(mov a1 a4)
(bra 117)
118
(cabne a1 'a2 119)
(mov a1 a4)
(bra 117)
119
(cabne a1 'a3 120)
(mov a1 a4)
(bra 117)
120
(cabne a1 'a4 121)
(mov a1 a4)
(bra 117)
121
(mov nil a4)
117
(adjstk '1)
(btnil a4 115)
(mov (cvalq #:complice:return?) a2)
(mov (& 5) a1)
(call #:complice:mov)
(mov a1 (& 5))
(bra 107)
115
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 a2)
(mov (& 5) a1)
(call #:complice:mov)
(mov a1 (& 5))
107
(mov nil a3)
(mov (& 0) a2)
(mov (& 1) a1)
(call #:complice:reset-env)
(mov (& 5) a1)
(adjstk '6)
(return)
))
(loader'((entry #:complice:init-app-lambda subr2)
(push a2)
(push a1)
(push a2)
(push a1)
101
(bfcons (& 0) 102)
(bfcons (& 1) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(cabne (& 0) 'sp 104)
(mov (& 1) a1)
(call #:complice:push-var)
104
(adjstk '2)
(bra 101)
102
(adjstk '2)
(push (& 0))
(push (& 2))
105
(bfcons (& 1) 106)
(bfcons (& 0) 106)
(push (& 1))
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(pop a4)
(push (& 0))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(pop a3)
(push a3)
(push a4)
(push (car a3))
(mov (& 0) a1)
(cabne a1 'a1 110)
(mov a1 a2)
(bra 109)
110
(cabne a1 'a2 111)
(mov a1 a2)
(bra 109)
111
(cabne a1 'a3 112)
(mov a1 a2)
(bra 109)
112
(cabne a1 'a4 113)
(mov a1 a2)
(bra 109)
113
(mov nil a2)
109
(adjstk '1)
(btnil a2 107)
(mov (cdr a3) a2)
(mov (car a3) a1)
(jcall memq)
(bfnil a1 107)
(mov (& 0) a1)
(mov (& 1) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:complice:add-env)
(bra 108)
107
(mov (& 1) a4)
(cabeq (car a4) 'sp 108)
(bfcons (car a4) 117)
(mov (car a4) a3)
(bffix (car a3) 117)
(push (car a4))
(mov (cdr a4) a2)
(mov 'sp a1)
(jcall #:complice:count)
(mov (& 2) a4)
(mov (car a4) a4)
(plus (car a4) a1)
(pop a3)
(mov a1 (car a3))
117
(push (@ 118))
(push 'push)
(mov (& 3) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
118
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 0) a1)
(mov (car a1) a1)
(call #:complice:push-var)
(mov (& 1) a4)
(push (cdr a4))
119
(bfcons (& 0) 120)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 122)
(mov (& 0) a4)
(bffix (car a4) 122)
(mov (& 0) a4)
(mov (car a4) a4)
(plus '1 a4)
(mov (& 0) a3)
(mov a4 (car a3))
122
(adjstk '1)
(bra 119)
120
(adjstk '1)
108
(adjstk '2)
(bra 105)
106
(adjstk '2)
(mov (& 0) a1)
(jcall variablep)
(mov a1 a4)
(bfnil a4 125)
(mov (& 0) a1)
(jcall last)
(mov (cdr a1) a4)
125
(mov a4 (& 0))
(btnil a4 123)
(mov 'a1 a2)
(mov a4 a1)
(adjstk '2)
(bra #:complice:add-env)
123
(mov nil a1)
(adjstk '2)
(return)
))
(defvar #:sys-package:colon 'complice)
(defvar #:complice:genlab 100)
(defvar #:complice:lap ())
(defvar #:complice:a1 ())
(defvar #:complice:a2 ())
(defvar #:complice:a3 ())
(defvar #:complice:a4 ())
(defvar #:complice:stack ())
(defvar #:complice:v-stack ())
(defvar #:complice:env ())
(defvar #:complice:protect ())
(defvar #:complice:op-stack ())
(defvar #:complice:l-adjust ())
(defvar #:complice:l-readjust ())
(defvar #:complice:tail? ())
(defvar #:complice:return? ())
(defvar #:complice:lframe ())
(defvar #:complice:bind ())
(defvar #:complice:&nobind ())
(defvar #:complice:funarg? ())
(loader'((entry #:complice:initall subr1)
(mov '100 (cvalq #:complice:genlab))
(mov nil (cvalq #:complice:lap))
(mov nil (cvalq #:complice:a1))
(mov nil (cvalq #:complice:a2))
(mov nil (cvalq #:complice:a3))
(mov nil (cvalq #:complice:a4))
(mov nil (cvalq #:complice:stack))
(mov nil (cvalq #:complice:v-stack))
(mov nil (cvalq #:complice:env))
(mov nil (cvalq #:complice:protect))
(mov nil (cvalq #:complice:op-stack))
(mov nil (cvalq #:complice:l-adjust))
(mov nil (cvalq #:complice:l-readjust))
(mov 't (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov nil (cvalq #:complice:lframe))
(mov '#:complice:bind a2)
(jcall get)
(mov a1 (cvalq #:complice:bind))
(mov nil (cvalq #:complice:&nobind))
(mov nil (cvalq #:complice:funarg?))
(mov nil a1)
(return)
))
(loader'((entry #:complice:real-reg subr1)
(push a1)
(cabne a1 'a1 103)
(bra 102)
103
(cabne a1 'a2 104)
(bra 102)
104
(cabne a1 'a3 105)
(bra 102)
105
(cabne a1 'a4 106)
(bra 102)
106
(mov nil a1)
102
(bfnil a1 101)
(bfcons (& 0) 107)
(mov (& 0) a4)
(btfix (car a4) 107)
(cabeq (car a4) 'quote 107)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '1)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
101
(adjstk '1)
(return)
))
(loader'((entry #:complice:set-all-reg subr1)
(push a1)
(mov (cdr a1) (& 0))
(mov (car a1) (cvalq #:complice:a1))
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (car a4) (cvalq #:complice:a2))
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (car a4) (cvalq #:complice:a3))
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (car a4) (cvalq #:complice:a4))
(mov (car a4) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:adjust-reg subr1)
(push a1)
(mov (cdr a1) (& 0))
(cabeq (car a1) (cvalq #:complice:a1) 102)
(mov nil (cvalq #:complice:a1))
102
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(cabeq (car a4) (cvalq #:complice:a2) 104)
(mov nil (cvalq #:complice:a2))
104
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(cabeq (car a4) (cvalq #:complice:a3) 106)
(mov nil (cvalq #:complice:a3))
106
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(cabeq (car a4) (cvalq #:complice:a4) 107)
(mov nil (cvalq #:complice:a4))
(mov nil a1)
(adjstk '1)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:adjust-saved-reg subr1)
(push a1)
(cabeq (car a1) (cvalq #:complice:a1) 102)
(mov nil (car a1))
102
(mov (cdr a1) (& 0))
(mov (& 0) a4)
(cabeq (car a4) (cvalq #:complice:a2) 104)
(mov nil (car a4))
104
(mov (cdr a4) (& 0))
(mov (& 0) a4)
(cabeq (car a4) (cvalq #:complice:a3) 106)
(mov nil (car a4))
106
(mov (cdr a4) (& 0))
(mov (& 0) a4)
(cabeq (car a4) (cvalq #:complice:a4) 107)
(mov nil (car a4))
(mov a4 a1)
(adjstk '1)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:alloc-reg subr2)
(push a2)
(push a1)
(call #:complice:real-reg)
(mov a1 (& 0))
(mov (& 1) a1)
(call #:complice:real-reg)
(mov a1 (& 1))
(bfnil (cvalq #:complice:a4) 101)
(cabeq (& 0) 'a4 101)
(cabeq a1 'a4 101)
(mov 'a4 a1)
(call #:complice:reg-protect?)
(bfnil a1 101)
(mov 'a4 a1)
(adjstk '2)
(return)
101
(bfnil (cvalq #:complice:a3) 103)
(cabeq (& 0) 'a3 103)
(cabeq (& 1) 'a3 103)
(mov 'a3 a1)
(call #:complice:reg-protect?)
(bfnil a1 103)
(mov 'a3 a1)
(adjstk '2)
(return)
103
(bfnil (cvalq #:complice:a2) 105)
(cabeq (& 0) 'a2 105)
(cabeq (& 1) 'a2 105)
(mov 'a2 a1)
(call #:complice:reg-protect?)
(bfnil a1 105)
(mov 'a2 a1)
(adjstk '2)
(return)
105
(bfnil (cvalq #:complice:a1) 107)
(cabeq (& 0) 'a1 107)
(cabeq (& 1) 'a1 107)
(mov 'a1 a1)
(call #:complice:reg-protect?)
(bfnil a1 107)
(mov 'a1 a1)
(adjstk '2)
(return)
107
(cabeq (& 0) 'a4 109)
(cabeq (& 1) 'a4 109)
(mov 'a4 a1)
(adjstk '2)
(return)
109
(cabeq (& 0) 'a3 111)
(cabeq (& 1) 'a3 111)
(mov 'a3 a1)
(adjstk '2)
(return)
111
(cabeq (& 0) 'a2 113)
(cabeq (& 1) 'a2 113)
(mov 'a2 a1)
(adjstk '2)
(return)
113
(cabeq (& 0) 'a1 115)
(cabeq (& 1) 'a1 115)
(mov 'a1 a1)
(adjstk '2)
(return)
115
(mov 'a4 a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:alloc-reg? subr0)
(bfnil (cvalq #:complice:a4) 101)
(mov 'a4 a1)
(return)
101
(bfnil (cvalq #:complice:a3) 103)
(mov 'a3 a1)
(return)
103
(bfnil (cvalq #:complice:a2) 105)
(mov 'a2 a1)
(return)
105
(bfnil (cvalq #:complice:a1) 107)
(mov 'a1 a1)
(return)
107
(mov nil a1)
(return)
))
(loader'((entry #:complice:is-in-reg? subr1)
(cabne a1 (cvalq #:complice:a1) 101)
(mov 'a1 a1)
(return)
101
(cabne a1 (cvalq #:complice:a2) 103)
(mov 'a2 a1)
(return)
103
(cabne a1 (cvalq #:complice:a3) 105)
(mov 'a3 a1)
(return)
105
(cabne a1 (cvalq #:complice:a4) 107)
(mov 'a4 a1)
(return)
107
(mov nil a1)
(return)
))
(loader'((entry #:complice:value-in-reg subr1)
(cabne a1 'a1 102)
(mov (cvalq #:complice:a1) a1)
(return)
102
(cabne a1 'a2 103)
(mov (cvalq #:complice:a2) a1)
(return)
103
(cabne a1 'a3 104)
(mov (cvalq #:complice:a3) a1)
(return)
104
(cabne a1 'a4 105)
(mov (cvalq #:complice:a4) a1)
(return)
105
(mov nil a1)
(return)
))
(loader'((entry #:complice:set-reg subr2)
(push a1)
(mov a2 a1)
(cabne a1 'a1 102)
(mov (& 0) (cvalq #:complice:a1))
(mov (& 0) a1)
(adjstk '1)
(return)
102
(cabne a1 'a2 103)
(mov (& 0) (cvalq #:complice:a2))
(mov (& 0) a1)
(adjstk '1)
(return)
103
(cabne a1 'a3 104)
(mov (& 0) (cvalq #:complice:a3))
(mov (& 0) a1)
(adjstk '1)
(return)
104
(cabne a1 'a4 105)
(mov (& 0) (cvalq #:complice:a4))
(mov (& 0) a1)
(adjstk '1)
(return)
105
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:write-reg subr2)
(push a2)
(push a1)
(bfnil a1 101)
(adjstk '2)
(bra #:complice:set-reg)
101
(cabne a1 'a1 106)
(mov a1 a4)
(bra 105)
106
(cabne a1 'a2 107)
(mov a1 a4)
(bra 105)
107
(cabne a1 'a3 108)
(mov a1 a4)
(bra 105)
108
(cabne a1 'a4 109)
(mov a1 a4)
(bra 105)
109
(mov nil a4)
105
(btnil a4 103)
(mov (& 0) a1)
(call #:complice:value-in-reg)
(mov (& 1) a2)
(adjstk '2)
(bra #:complice:set-reg)
103
(bfcons (& 0) 110)
(mov (& 0) a3)
(btfix (car a3) 112)
(cabne (car a3) 'cvalq 110)
112
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (& 1) a2)
(mov (car a1) a1)
(adjstk '2)
(bra #:complice:set-reg)
110
(mov (& 1) a2)
(mov '#:complice:?? a1)
(adjstk '2)
(bra #:complice:set-reg)
))
(loader'((entry #:complice:clear-var-in-all-reg subr1)
(push a1)
(cabne a1 (cvalq #:complice:a1) 102)
(mov 'a1 a2)
(mov nil a1)
(call #:complice:set-reg)
102
(cabne (& 0) (cvalq #:complice:a2) 104)
(mov 'a2 a2)
(mov nil a1)
(call #:complice:set-reg)
104
(cabne (& 0) (cvalq #:complice:a3) 106)
(mov 'a3 a2)
(mov nil a1)
(call #:complice:set-reg)
106
(cabne (& 0) (cvalq #:complice:a4) 107)
(mov 'a4 a2)
(mov nil a1)
(adjstk '1)
(bra #:complice:set-reg)
107
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:clear-all-reg subr0)
(push '(a1 a2 a3 a4))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov nil a1)
(call #:complice:write-op)
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:push-var subr1)
(push a1)
(mov 'sp a2)
(jcall cons)
(mov (cvalq #:complice:env) a2)
(jcall cons)
(mov a1 (cvalq #:complice:env))
(mov (cvalq #:complice:v-stack) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:v-stack))
(mov (cvalq #:complice:stack) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:stack))
(adjstk '1)
(return)
))
(loader'((entry #:complice:back-push-value subr1)
(mov (cvalq #:complice:v-stack) a3)
(mov (cvalq #:complice:stack) a2)
(bra #:complice:back-push-value-aux)
))
(loader'((entry #:complice:back-push-value-aux subr3)
(push a3)
(push a2)
(push a1)
101
(mov (& 2) a4)
(btfix (car a4) 103)
(cabeq (& 0) a4 103)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(bra 101)
103
(mov (& 1) a4)
(btfix (car a4) 104)
(mov (cdr a4) (& 1))
(bra 103)
104
(cabne (& 0) (& 2) 105)
(mov (car a4) a3)
(plus '1 a3)
(mov a3 (car a4))
(mov a4 a1)
(adjstk '3)
(return)
105
(mov (& 2) a3)
(mov (cdr a3) a3)
(mov (cdr a4) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:complice:back-push-value-aux)
))
(loader'((entry #:complice:back-push subr1)
(push a1)
(mov (cvalq #:complice:v-stack) a3)
(mov (cvalq #:complice:stack) a2)
(call #:complice:back-push-aux)
(mov a1 (cvalq #:complice:stack))
(push (cvalq #:complice:l-adjust))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 2) a2)
(mov (& 0) a1)
(call #:complice:adjust-adjust)
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:back-push-aux subr3)
(bfnil a2 101)
(mov (car a1) a1)
(jmp ncons)
101
(cabne a3 a1 103)
(mov (car a1) a1)
(jmp cons)
103
(cabeq (car a2) (car a3) 107)
(bffix (car a3) 105)
107
(push (car a2))
(mov (cdr a3) a3)
(mov (cdr a2) a2)
(call #:complice:back-push-aux)
(mov a1 a2)
(pop a1)
(jmp cons)
105
(mov (cdr a3) a3)
(bra #:complice:back-push-aux)
))
(loader'((entry #:complice:index-stack subr1)
(push a1)
(mov (cvalq #:complice:stack) a3)
(mov '0 a2)
(call #:complice:memnth)
(btnil a1 101)
(push a1)
(mov (cvalq #:complice:v-stack) a2)
(mov (& 1) a1)
(jcall memq)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp cons)
101
(adjstk '1)
(return)
))
(loader'((entry #:complice:memnth subr3)
(bfnil a3 101)
(mov a3 a1)
(return)
101
(cabne (car a3) a1 103)
(mov a2 a1)
(return)
103
(bffix (car a3) 105)
(mov (car a3) a4)
(plus a2 a4)
(mov (cdr a3) a3)
(mov a4 a2)
(bra #:complice:memnth)
105
(plus '1 a2)
(mov (cdr a3) a3)
(bra #:complice:memnth)
))
(loader'((entry #:complice:adjust-if-need subr0)
(push (@ 101))
(push (cvalq #:complice:v-stack))
(mov (cvalq #:complice:stack) a1)
(call #:complice:length-stack)
(push a1)
(mov (cvalq #:complice:lap) a2)
(mov nil a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push a1)
(mov '3 a4)
(jmp mcons)
101
(eval ())
(mov (cvalq #:complice:l-adjust) a2)
(jcall cons)
(mov a1 (cvalq #:complice:l-adjust))
(return)
))
(loader'((entry #:complice:adjust-adjust subr2)
(push a1)
(push a2)
(mov (car a1) a2)
(pop a1)
(jcall tailp)
(btnil a1 101)
(mov (& 0) a4)
(mov (cdr a4) a3)
(mov (car a3) a3)
(plus '1 a3)
(mov (cdr a4) a2)
(mov a3 (car a2))
(mov a2 a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:final-adjust subr0)
(push (cvalq #:complice:l-adjust))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (cdr a4) a4)
(cabeq (car a4) '0 104)
(mov (& 0) a3)
(mov (cdr a3) a3)
(push (cdr a3))
(push (@ 105))
(push 'adjstk)
(push (@ 106))
(push 'quote)
(mov (& 5) a2)
(mov (cdr a2) a2)
(push (car a2))
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(pop a4)
(mov a1 (car a4))
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(push (cvalq #:complice:l-readjust))
107
(bfcons (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov 'quote (car a4))
(adjstk '1)
(bra 107)
108
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:length-stack subr1)
(bfnil a1 101)
(mov '0 a1)
(return)
101
(bffix (car a1) 103)
(push (car a1))
(mov (cdr a1) a1)
(call #:complice:length-stack)
(pop a4)
(plus a1 a4)
(mov a4 a1)
(return)
103
(mov (cdr a1) a1)
(call #:complice:length-stack)
(plus '1 a1)
(return)
))
(loader'((entry #:complice:protect-op subr1)
(push a1)
(bfcons a1 103)
(cabeq (car a1) 'quote 102)
103
(call #:complice:read-op)
(push (@ 104))
(push (& 1))
(mov (cvalq #:complice:lap) a2)
(mov nil a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push a1)
(push (cvalq #:complice:v-stack))
(push (cvalq #:complice:op-stack))
(mov '4 a4)
(jmp mcons)
104
(eval ())
(mov (cvalq #:complice:protect) a2)
(jcall cons)
(mov a1 (cvalq #:complice:protect))
102
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:protected-op? subr1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(return)
101
(mov (cvalq #:complice:protect) a4)
(mov (cdr a4) (cvalq #:complice:protect))
(btnil (car a4) 103)
(return)
103
(mov nil a1)
(return)
))
(loader'((entry #:complice:unprotect-op subr2)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(return)
101
(mov (cvalq #:complice:protect) a4)
(mov (cdr a4) (cvalq #:complice:protect))
(btnil (car a4) 103)
(return)
103
(mov a2 a1)
(bra #:complice:pop)
))
(loader'((entry #:complice:adjust-op-stack subr2)
(push a2)
(push a1)
(push (cvalq #:complice:op-stack))
101
(mov (& 2) a2)
(mov (& 0) a1)
(jcall eq)
(bfnil a1 102)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(jcall tailp)
(btnil a1 104)
(mov (& 0) a4)
(mov (car a4) a3)
(mov (car a3) a3)
(plus '1 a3)
(mov (car a4) a2)
(mov a3 (car a2))
104
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 101)
102
(adjstk '3)
(return)
))
(loader'((entry #:complice:reg-protect? subr1)
(mov (cvalq #:complice:protect) a2)
(mov (car a2) a2)
(mov (cvalq #:complice:protect) a3)
(mov (car a2) a2)
(bra #:complice:reg-protect?-aux)
))
(loader'((entry #:complice:reg-protect?-aux subr3)
(push a3)
(push a1)
(btnil a3 101)
(btcons a2 106)
(cabeq a2 a1 105)
106
(bfcons a2 103)
(btfix (car a2) 103)
(cabeq (car a2) 'quote 103)
(mov (cdr a2) a2)
(jcall memq)
(btnil a1 103)
105
(mov 't a1)
(adjstk '2)
(return)
103
(mov (& 1) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (& 1) a3)
(mov (cdr a3) a3)
(mov (car a2) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:reg-protect?-aux)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:push-it-now subr2)
(mov (cdr a2) a4)
(mov (car a2) a2)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(push a3)
(push a2)
(push (@ 101))
(push 'push)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(pop a4)
(mov a1 (car a4))
(mov (& 1) a1)
(call #:complice:back-push-value)
(mov (& 0) a2)
(mov (& 1) a1)
(call #:complice:adjust-op-stack)
(mov 't a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:care-of-reg subr2)
(mov (cdr a2) a4)
(mov (car a2) a2)
(push a2)
(push a4)
(btcons a2 104)
(cabeq a2 a1 103)
104
(bfcons a2 101)
(btfix (car a2) 101)
(cabeq (car a2) 'quote 101)
(mov (cdr a2) a2)
(jcall memq)
(btnil a1 101)
103
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:push-it-now)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:care-of-all-var subr1)
(push a1)
(push nil)
(push nil)
(push nil)
(push (cvalq #:complice:protect))
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(mov (car a4) (& 4))
(btnil (& 4) 104)
(mov (& 4) a3)
(mov (car a3) (& 3))
(mov (cdr a3) (& 2))
(bfcons (& 3) 104)
(mov (& 3) a2)
(bffix (car a2) 104)
(mov (cdr a2) a1)
(cabne (car a1) (& 5) 104)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:complice:push-it-now)
(mov (& 0) a4)
(mov nil (car a4))
104
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:complice:care-of-all-cval subr0)
(push nil)
(push nil)
(push nil)
(push (cvalq #:complice:protect))
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(mov (car a4) (& 4))
(btnil (& 4) 104)
(mov (& 4) a3)
(mov (car a3) (& 3))
(mov (cdr a3) (& 2))
(bfcons (& 3) 104)
(mov (& 3) a2)
(mov (car a2) a2)
(cabeq a2 'cval 107)
(cabne a2 'cvalq 104)
107
(mov (& 2) a2)
(mov (& 3) a1)
(call #:complice:push-it-now)
(mov (& 0) a4)
(mov nil (car a4))
104
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:care-of-all-cvalq subr1)
(push a1)
(push nil)
(push nil)
(push nil)
(push (cvalq #:complice:protect))
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(mov (car a4) (& 4))
(btnil (& 4) 104)
(mov (& 4) a3)
(mov (car a3) (& 3))
(mov (cdr a3) (& 2))
(bfcons (& 3) 104)
(mov (& 3) a2)
(cabne (car a2) 'cvalq 104)
(mov (cdr a2) a1)
(cabne (car a1) (& 5) 104)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:complice:push-it-now)
(mov (& 0) a4)
(mov nil (car a4))
104
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:complice:care-of-all-ind subr1)
(push a1)
(push nil)
(push nil)
(push nil)
(push (cvalq #:complice:protect))
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(mov (car a4) (& 4))
(btnil (& 4) 104)
(mov (& 4) a3)
(mov (car a3) (& 3))
(mov (cdr a3) (& 2))
(bfcons (& 3) 104)
(mov (& 3) a2)
(cabne (car a2) (& 5) 104)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:complice:push-it-now)
(mov (& 0) a4)
(mov nil (car a4))
104
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:complice:add-env subr2)
(push a2)
(push a1)
(call #:complice:set-reg)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall cons)
(mov (cvalq #:complice:env) a2)
(jcall cons)
(mov a1 (cvalq #:complice:env))
(adjstk '2)
(return)
))
(loader'((entry #:complice:set-env subr2)
(mov (cvalq #:complice:env) a3)
(jmp #:complice:setcassq)
))
(loader'((entry #:complice:close-env subr0)
(mov (cvalq #:complice:v-stack) a2)
(mov '0 a1)
(jcall cons)
(mov a1 (cvalq #:complice:v-stack))
(mov (cvalq #:complice:stack) a2)
(mov '0 a1)
(jcall cons)
(mov a1 (cvalq #:complice:stack))
(return)
))
(loader'((entry #:complice:get-env subr1)
(push a1)
(mov (cvalq #:complice:env) a2)
(jcall assq)
(push a1)
(btnil a1 103)
(cabne (cdr a1) 'cval 101)
103
(push (@ 104))
(push 'cvalq)
(push (& 3))
(mov '2 a4)
(jmp list)
104
(eval ())
(adjstk '2)
(return)
101
(cabne (cdr a1) 'sp 105)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:index-stack)
105
(push (cdr a1))
(mov 'sp (cdr a1))
(pop a4)
(mov a4 (& 0))
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 107))
(push 'push)
(mov (& 3) a3)
(mov (cdr a3) (& 3))
(push (car a3))
(mov '2 a4)
(jmp list)
107
(eval ())
(pop a4)
(mov a1 (car a4))
(mov (& 0) a1)
(mov (car a1) a1)
(call #:complice:back-push)
(mov (& 0) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(call #:complice:adjust-op-stack)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:index-stack)
))
(loader'((entry #:complice:deset-env subr2)
(push a2)
(push a1)
(push (cvalq #:complice:env))
(mov (cvalq #:complice:bind) a4)
(mov (cdr a4) (cvalq #:complice:bind))
(push (car a4))
(push nil)
(push '0)
101
(cabeq (& 3) (& 4) 102)
(mov (& 3) a4)
(mov (car a4) a4)
(cabeq (cdr a4) 'sp 104)
(mov (& 3) a1)
(mov (car a1) a1)
(mov (& 3) a2)
(mov (car a2) a2)
(mov (& 2) a3)
(mov (cdr a2) a2)
(mov (car a1) a1)
(call #:complice:deset-reg)
104
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(bra 101)
102
(mov (& 4) a2)
(mov (& 2) a1)
(call #:complice:deset-env-stk)
(call #:complice:close-env)
(mov nil (& 2))
105
(mov (cvalq #:complice:bind) a4)
(bfvar (car a4) 106)
(mov (cdr a4) (cvalq #:complice:bind))
(mov (& 2) a2)
(mov (car a4) a1)
(jcall cons)
(mov a1 (& 2))
(bra 105)
106
(btnil (& 2) 108)
(push (& 2))
109
(bfcons (& 0) 110)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 111))
(push 'cvalq)
(push (& 2))
(mov '2 a4)
(jmp list)
111
(eval ())
(call #:complice:push)
(mov (& 0) a1)
(call #:complice:is-in-reg?)
(bfnil a1 112)
(mov (& 0) a1)
(call #:complice:get-env)
112
(push a1)
(push (@ 113))
(push 'cvalq)
(push (& 3))
(mov '2 a4)
(jmp list)
113
(eval ())
(mov a1 a2)
(pop a1)
(call #:complice:mov)
(mov 'cval a2)
(mov (& 0) a1)
(call #:complice:set-env)
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(adjstk '1)
(bra 109)
110
(adjstk '1)
(push (@ 114))
(push 'quote)
(push (& 2))
(mov '2 a4)
(jmp list)
114
(eval ())
(call #:complice:push)
(push (@ 115))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
115
(eval ())
(call #:complice:push)
(btnil (& 5) 116)
(push (@ 118))
(push '@)
(push (cvalq #:complice:f))
(mov '2 a4)
(jmp list)
118
(eval ())
(bra 117)
116
(mov ''lambda a1)
117
(call #:complice:push)
(mov 'llink a1)
(call #:complice:push)
(btnil (& 5) 120)
(mov 'llink a2)
(mov 'nil a1)
(call #:complice:mov)
120
(mov 'cbindn a1)
(call #:complice:push-top-block)
(call #:complice:close-env)
(push (@ 121))
(push 'lambda)
(push (cvalq #:complice:v-stack))
(mov '2 a4)
(jmp list)
121
(eval ())
(mov (cvalq #:complice:lframe) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lframe))
108
(mov (& 2) a1)
(adjstk '6)
(return)
))
(loader'((entry #:complice:deset-env-stk subr2)
(push a2)
(push a1)
(push (cvalq #:complice:env))
(push (cvalq #:complice:env))
101
(cabeq (& 0) (& 3) 102)
(mov (& 0) a4)
(mov (car a4) a4)
(cabne (cdr a4) 'sp 104)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (& 2) a2)
(mov (car a1) a1)
(call #:complice:deset-stk)
104
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 101)
102
(mov (& 1) a2)
(mov (cvalq #:complice:env) a1)
(jcall eq)
(bfnil a1 105)
(mov (& 3) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:complice:deset-env-stk)
105
(adjstk '4)
(return)
))
(loader'((entry #:complice:deset-reg subr3)
(push a3)
(push a2)
(push a1)
(bfvar a1 101)
(call #:complice:clear-var-in-all-reg)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:complice:set-reg)
(mov (cvalq #:complice:v-stack) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:v-stack))
(push (@ 103))
(mov (cvalq #:complice:lap) a2)
(mov nil a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push a1)
(push (& 3))
(push (cvalq #:complice:v-stack))
(push (cvalq #:complice:op-stack))
(mov '4 a4)
(jmp mcons)
103
(eval ())
(mov a1 a2)
(mov (& 0) a1)
(call #:complice:set-env)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 106)
(mov (& 0) a1)
(jcall #:complice:globalvarp)
(btnil a1 104)
106
(mov (cvalq #:complice:bind) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:bind))
(adjstk '3)
(return)
104
(mov nil a1)
(adjstk '3)
(return)
101
(bfnil (cdr a1) 107)
(push (car a1))
(push (@ 109))
(push 'car)
(push a2)
(mov '2 a4)
(jmp list)
109
(eval ())
(mov (& 2) a2)
(call #:complice:mov)
(mov a1 a2)
(pop a1)
(call #:complice:set-reg)
(mov (cvalq #:complice:env) a2)
(mov (& 0) a1)
(jcall assq)
(mov (& 0) a4)
(mov (car a4) (car a1))
(mov (& 2) a3)
(mov (& 1) a2)
(mov (car a4) a1)
(adjstk '3)
(bra #:complice:deset-reg)
107
(call #:complice:alloc-reg?)
(push a1)
(btnil a1 110)
(mov (& 1) a1)
(push (cdr a1))
(push (@ 112))
(push 'cdr)
(push (& 5))
(mov '2 a4)
(jmp list)
112
(eval ())
(mov (& 1) a2)
(call #:complice:mov)
(mov a1 a2)
(pop a1)
(call #:complice:add-env)
(bra 111)
110
(push (@ 113))
(push 'push)
(push (@ 114))
(push 'cdr)
(push (& 6))
(mov '2 a4)
(jmp list)
114
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
113
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) a1)
(mov (cdr a1) a1)
(call #:complice:push-var)
111
(mov (& 1) a1)
(push (car a1))
(push (@ 115))
(push 'car)
(push (& 5))
(mov '2 a4)
(jmp list)
115
(eval ())
(mov (& 3) a2)
(call #:complice:mov)
(mov a1 a2)
(pop a1)
(call #:complice:set-reg)
(mov (cvalq #:complice:env) a2)
(mov (& 1) a1)
(jcall assq)
(mov (& 1) a4)
(mov (car a4) (car a1))
(mov (& 3) a3)
(mov (& 2) a2)
(mov (car a4) a1)
(call #:complice:deset-reg)
(btnil (& 0) 116)
(mov (& 1) a1)
(mov (& 3) a3)
(mov (& 0) a2)
(mov (cdr a1) a1)
(adjstk '4)
(bra #:complice:deset-reg)
116
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:deset-stk subr2)
(push a2)
(push a1)
(btvar a1 101)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(push a1)
(mov (& 1) a1)
(call #:complice:index-stack)
(call #:complice:read-op)
(push a1)
(push (@ 103))
(push 'car)
(mov (& 3) a2)
(call #:complice:mov)
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (& 0) a2)
(call #:complice:mov)
(mov (cvalq #:complice:env) a2)
(mov (& 2) a1)
(jcall assq)
(mov (& 2) a4)
(mov (car a4) (car a1))
(mov (cvalq #:complice:v-stack) a2)
(mov a4 a1)
(jcall memq)
(mov (& 2) a4)
(mov (car a4) (car a1))
(mov (cvalq #:complice:stack) a2)
(mov a4 a1)
(jcall memq)
(mov (& 2) a4)
(mov (car a4) (car a1))
(bfnil (cdr a4) 104)
(mov (& 1) a2)
(mov nil a1)
(call #:complice:set-reg)
(bra 105)
104
(push (cdr a4))
(push (@ 106))
(push 'cdr)
(push (& 4))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov (& 2) a2)
(call #:complice:mov)
(mov a1 a2)
(pop a1)
(call #:complice:add-env)
(mov (& 2) a1)
(mov (& 3) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(call #:complice:deset-reg)
105
(mov (& 2) a1)
(mov (& 3) a2)
(mov (car a1) a1)
(adjstk '4)
(bra #:complice:deset-stk)
101
(call #:complice:clear-var-in-all-reg)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 109)
(mov (& 0) a1)
(jcall #:complice:globalvarp)
(btnil a1 107)
109
(mov (cvalq #:complice:bind) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:bind))
(adjstk '2)
(return)
107
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:reset-env subr3)
(push a3)
(push a2)
(push a1)
(push '6)
(btnil a2 102)
(mov nil a3)
(mov nil a2)
(mov (cvalq #:complice:env) a1)
(call #:complice:reset-env)
(mov (cvalq #:complice:lframe) a4)
(mov (cdr a4) (cvalq #:complice:lframe))
(mov (cvalq #:complice:lap) a2)
(mov '(mov (& 1) dlink) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(btnil (& 3) 104)
(mov a1 a2)
(mov '(mov (& 2) llink) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
104
(mov (& 2) a1)
(jcall reverse)
(push a1)
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 107))
(push '&)
(push (& 4))
(mov '2 a4)
(jmp list)
107
(eval ())
(push a1)
(push (@ 108))
(push 'cvalq)
(push (& 3))
(mov '2 a4)
(jmp list)
108
(eval ())
(mov a1 a2)
(pop a1)
(call #:complice:mov)
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(adjstk '1)
(bra 105)
106
(adjstk '1)
(mov (& 0) a1)
(call #:complice:adjstk)
102
(mov (cvalq #:complice:stack) a4)
(mov (cdr a4) (cvalq #:complice:stack))
(mov (car a4) (& 0))
(cabeq (& 0) '0 110)
(mov (& 0) a2)
(mov '"STACK NOT EMPTY" a1)
(jcall #:complice:ierror)
110
(mov (cvalq #:complice:v-stack) a4)
(mov (cdr a4) (cvalq #:complice:v-stack))
(btnil (cvalq #:complice:&nobind) 113)
(btnil (& 3) 113)
(mov (cvalq #:complice:lap) a2)
(mov '(pop a4) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:v-stack) a4)
(mov (cdr a4) (cvalq #:complice:v-stack))
(mov (cvalq #:complice:stack) a4)
(mov (cdr a4) (cvalq #:complice:stack))
(mov (cvalq #:complice:env) a4)
(mov (cdr a4) (cvalq #:complice:env))
113
(cabeq (& 1) (cvalq #:complice:env) 114)
(mov (cvalq #:complice:stack) a4)
(mov (cvalq #:complice:v-stack) a3)
(cabne (car a4) (car a3) 116)
(mov (& 0) a2)
(plus '1 a2)
(mov a2 (& 0))
(mov (cdr a4) (cvalq #:complice:stack))
116
(mov (cdr a3) (cvalq #:complice:v-stack))
(mov (car a3) a1)
(call #:complice:clear-var-in-all-reg)
(mov (cvalq #:complice:env) a4)
(mov (cdr a4) (cvalq #:complice:env))
(bra 113)
114
(btnil (& 3) 117)
(btnil (cvalq #:complice:&nobind) 117)
(mov (cvalq #:complice:lap) a2)
(mov '(adjstk a4) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '4)
(return)
117
(cabeq (& 0) '0 119)
(cabeq (cvalq #:complice:tail?) 'done 119)
(push (@ 121))
(push 'adjstk)
(push (@ 122))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
122
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
121
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '4)
(return)
119
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:copy-gensym subr1)
(push a1)
(bfnil a1 101)
(adjstk '1)
(return)
101
(btcons a1 103)
(adjstk '1)
(jmp gensym)
103
(mov (car a1) a1)
(call #:complice:copy-gensym)
(push a1)
(mov (& 1) a1)
(mov (cdr a1) a1)
(call #:complice:copy-gensym)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp cons)
))
(loader'((entry #:complice:peigne subr2)
(push a2)
(jcall #:complice:flatt)
(push a1)
(mov (& 1) a1)
(jcall #:complice:flatt)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:complice:peigne-aux)
))
(loader'((entry #:complice:peigne-aux subr2)
(btnil a1 29999)
(push (@ 102))
(push (car a1))
(push (car a2))
(mov (cdr a2) a2)
(mov (cdr a1) a1)
(call #:complice:peigne-aux)
(push a1)
(mov '3 a4)
(jmp mcons)
102
(eval ())
(return)
29999
(return)
))
(loader'((entry #:complice:read-op subr1)
(push a1)
(bfcons a1 102)
(bffix (car a1) 102)
(mov (cvalq #:complice:op-stack) a2)
(jcall memq)
(bfnil a1 102)
(mov (cvalq #:complice:op-stack) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:op-stack))
102
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:write-op subr2)
(push a2)
(bfcons a2 101)
(push (car a2))
(bffix (& 0) 103)
(push a2)
(mov (cvalq #:complice:op-stack) a2)
(pop a1)
(jcall memq)
(bfnil a1 106)
(mov (cvalq #:complice:op-stack) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:op-stack))
106
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '2)
(bra #:complice:care-of-all-var)
103
(cabne (& 0) 'quote 107)
(mov '"OPERANDE DESTINATION INCORRECTE" a1)
(adjstk '2)
(jmp #:complice:ierror)
107
(cabne (& 0) 'cval 109)
(adjstk '2)
(bra #:complice:care-of-all-cval)
109
(cabne (& 0) 'cval 111)
(mov (cdr a2) a1)
(mov (car a1) a1)
(adjstk '2)
(bra #:complice:care-of-all-cvalq)
111
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:care-of-all-ind)
101
(call #:complice:write-reg)
(push (cvalq #:complice:protect))
113
(bfcons (& 0) 114)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(btnil (car a4) 116)
(mov (car a4) a2)
(mov (& 2) a1)
(call #:complice:care-of-reg)
(btnil a1 116)
(mov (& 0) a4)
(mov nil (car a4))
116
(adjstk '1)
(bra 113)
114
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:make-op subr2)
(push a2)
(push a1)
(btcons a2 101)
(push (@ 103))
(push a1)
(push a2)
(mov '2 a4)
(jmp list)
103
(eval ())
(adjstk '2)
(return)
101
(push (cvalq #:complice:return?))
(mov (& 0) a1)
(cabne a1 'a1 107)
(mov a1 a4)
(bra 106)
107
(cabne a1 'a2 108)
(mov a1 a4)
(bra 106)
108
(cabne a1 'a3 109)
(mov a1 a4)
(bra 106)
109
(cabne a1 'a4 110)
(mov a1 a4)
(bra 106)
110
(mov nil a4)
106
(adjstk '1)
(btnil a4 104)
(push a2)
(mov (cvalq #:complice:return?) a2)
(pop a1)
(call #:complice:mov)
(push (@ 111))
(push (& 1))
(push (cvalq #:complice:return?))
(mov '2 a4)
(jmp list)
111
(eval ())
(adjstk '2)
(return)
104
(push a2)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 a2)
(pop a1)
(call #:complice:mov)
(mov a1 (& 1))
(push (@ 112))
(push (& 1))
(push a1)
(mov '2 a4)
(jmp list)
112
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:complice:mov subr2)
(push a2)
(push a1)
(cabeq a1 a2 102)
(call #:complice:read-op)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:complice:write-op)
(push (@ 103))
(push 'mov)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:adjstk subr1)
(push a1)
(push (@ 101))
(push 'adjstk)
(push (@ 102))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff (& 0) a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov a3 a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:call subr1)
(push a1)
(call #:complice:care-of-all-cval)
(push 'call)
(push 'bra)
(btfix (& 2) 102)
(mov (cvalq #:complice:lfnt-module) a2)
(mov (& 2) a1)
(jcall memq)
(bfnil a1 102)
(mov 'jcall (& 1))
(mov 'jmp (& 0))
102
(btnil (cvalq #:complice:tail?) 103)
(bfnil (cvalq #:complice:lframe) 103)
(call #:complice:adjust-if-need)
(push (@ 105))
(push (& 1))
(push (& 4))
(mov '2 a4)
(jmp list)
105
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'done (cvalq #:complice:tail?))
(bra 104)
103
(call #:complice:clear-all-reg)
(push (@ 106))
(push (& 2))
(push (& 4))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
104
(mov 'a1 a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:jmp subr1)
(push a1)
(call #:complice:care-of-all-cval)
(btfix (& 0) 103)
(mov (cvalq #:complice:lfnt-module) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 101)
103
(mov 'bra a4)
(bra 102)
101
(mov 'jmp a4)
102
(push (@ 104))
(push a4)
(push (& 2))
(mov '2 a4)
(jmp list)
104
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '1)
(bra #:complice:clear-all-reg)
))
(loader'((entry #:complice:push subr1)
(push a1)
(call #:complice:read-op)
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(plus '1 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(push (@ 101))
(push 'push)
(push (& 2))
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:push-top-block subr1)
(push a1)
(mov 'dlink a1)
(call #:complice:push)
(mov (& 0) a1)
(call #:complice:push)
(mov (cvalq #:complice:lap) a2)
(mov '(stack dlink) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '1)
(return)
))
(loader'((entry #:complice:pop subr1)
(push a1)
(mov a1 a2)
(mov nil a1)
(call #:complice:write-op)
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff '1 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(push (@ 101))
(push 'pop)
(push (& 2))
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:pop2 subr2)
(bfcons a2 #:complice:pop)
(bffix (car a2) #:complice:pop)
(mov (car a2) a4)
(diff '1 a4)
(mov a4 (car a2))
(bra #:complice:pop)
))
(loader'((entry #:complice:pop3 subr3)
(bfcons a2 102)
(bffix (car a2) 102)
(mov (car a2) a4)
(diff '1 a4)
(mov a4 (car a2))
102
(bfcons a3 #:complice:pop)
(bffix (car a3) #:complice:pop)
(mov (car a3) a4)
(diff '1 a4)
(mov a4 (car a3))
(bra #:complice:pop)
))
(loader'((entry #:complice:code-last subr1)
(btnil (cvalq #:complice:tail?) 101)
(bfnil (cvalq #:complice:lframe) 101)
(cabeq (cvalq #:complice:tail?) 'done 103)
(call #:complice:adjust-if-need)
(mov (cvalq #:complice:lap) a2)
(mov '(return) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'done (cvalq #:complice:tail?))
(mov 'done a1)
(return)
103
(mov nil a1)
(return)
101
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(return)
))
(defvar #:sys-package:colon 'complice)
(loader'((entry #:complice:cpfnt subr2)
(push a2)
(push a1)
(call #:complice:cpfnt-open)
(bfnil a1 101)
(mov (& 0) a1)
(cabne a1 'progn 103)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:progn)
103
(cabne a1 'if 104)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:if)
104
(cabne a1 'setq 105)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:setq)
105
(cabne a1 'quote 106)
(mov (& 1) a4)
(btnil (car a4) 107)
(mov a4 a2)
(mov 'quote a1)
(adjstk '2)
(jmp cons)
107
(mov 'nil a1)
(adjstk '2)
(return)
106
(cabeq a1 'lambda 110)
(cabne a1 'flambda 109)
110
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:funarg)
109
(cabne a1 'selectq 111)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:selectq)
111
(cabne a1 'while 112)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:while)
112
(cabne a1 'until 113)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:until)
113
(cabne a1 'repeat 114)
(bfnil (& 1) 115)
(mov ''t a1)
(adjstk '2)
(return)
115
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:repeat)
114
(cabne a1 'or 117)
(mov 'nil a3)
(mov 'bfnil a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:comp-or-and)
117
(cabne a1 'and 118)
(mov ''t a3)
(mov 'btnil a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:comp-or-and)
118
(cabne a1 'prog1 119)
(bfnil (& 1) 120)
(mov 'nil a1)
(adjstk '2)
(return)
120
(mov (& 1) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(adjstk '2)
(bra #:complice:prog1-not-empty)
119
(cabne a1 'arg 122)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:arg)
122
(cabne a1 'tag 123)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:tag)
123
(cabne a1 'evtag 124)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:evtag)
124
(cabne a1 'exit 125)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:exit)
125
(cabne a1 'evexit 126)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:evexit)
126
(cabne a1 'protect 127)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:protect)
127
(cabne a1 'lock 128)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:lock)
128
(cabne a1 'block 129)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:block)
129
(cabne a1 'return-from 130)
(mov (& 1) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(adjstk '2)
(bra #:complice:cpfnt:return)
130
(cabne a1 'schedule 131)
(mov (& 1) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(adjstk '2)
(bra #:complice:cpfnt:schedule)
131
(cabne a1 'with-interrupts 132)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:with-interrupts)
132
(cabne a1 'without-interrupts 133)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:without-interrupts)
133
(cabne a1 'tagbody 134)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:tagbody)
134
(cabne a1 'go 135)
(mov (& 1) a1)
(mov (car a1) a1)
(adjstk '2)
(bra #:complice:cpfnt:go)
135
(cabne a1 'identity 136)
(push (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:tail?))
(mov (& 2) a1)
(mov (car a1) a1)
(call #:complice:exp)
(mov a1 (& 2))
(mov (& 0) (cvalq #:complice:tail?))
(adjstk '1)
(push (@ 137))
(push 'jcall)
(push 'identity)
(mov '2 a4)
(jmp list)
137
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) a1)
(adjstk '2)
(return)
136
(cabne a1 'letv 138)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:letv)
138
(cabne a1 'declare 139)
(push (& 1))
140
(bfcons (& 0) 141)
(push (@ 142))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(bra #:complice:cpfnt:declare1)
142
(eval ())
(bra 140)
141
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
139
(cabne a1 'precompile 143)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:precomp)
143
(cabne a1 'not 144)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:not)
144
(cabne a1 'deset 145)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:cpfnt:deset)
145
(mov nil a1)
(adjstk '2)
(return)
101
(adjstk '2)
(return)
))
(loader'((entry #:complice:cpfnt-open subr2)
(push a2)
(btnil (cvalq #:compiler:open-p) 101)
(cabne a1 'car 104)
(mov (car a2) a2)
(mov 'car a1)
(adjstk '1)
(bra #:complice:op-mget)
104
(cabne a1 'cdr 105)
(mov (car a2) a2)
(mov 'cdr a1)
(adjstk '1)
(bra #:complice:op-mget)
105
(cabne a1 'rplaca 106)
(push (@ 107))
(push 'car)
(push (car a2))
(mov (cdr a2) a4)
(push (car a4))
(push 't)
(mov '4 a4)
(bra #:complice:op-mset)
107
(eval ())
(adjstk '1)
(return)
106
(cabne a1 'rplacd 108)
(push (@ 109))
(push 'cdr)
(push (car a2))
(mov (cdr a2) a4)
(push (car a4))
(push 't)
(mov '4 a4)
(bra #:complice:op-mset)
109
(eval ())
(adjstk '1)
(return)
108
(cabne a1 'symeval 110)
(mov (car a2) a2)
(mov 'cval a1)
(adjstk '1)
(bra #:complice:op-mget)
110
(cabne a1 'set 111)
(push (@ 112))
(push 'cval)
(push (car a2))
(mov (cdr a2) a4)
(push (car a4))
(push nil)
(mov '4 a4)
(bra #:complice:op-mset)
112
(eval ())
(adjstk '1)
(return)
111
(cabne a1 'plist 113)
(push (@ 114))
(push 'plist)
(push (car a2))
(push (cdr a2))
(push nil)
(mov '4 a4)
(bra #:complice:op-mget-set)
114
(eval ())
(adjstk '1)
(return)
113
(cabne a1 'objval 115)
(push (@ 116))
(push 'oval)
(push (car a2))
(push (cdr a2))
(push nil)
(mov '4 a4)
(bra #:complice:op-mget-set)
116
(eval ())
(adjstk '1)
(return)
115
(cabne a1 'packagecell 117)
(push (@ 118))
(push 'pkgc)
(push (car a2))
(push (cdr a2))
(push nil)
(mov '4 a4)
(bra #:complice:op-mget-set)
118
(eval ())
(adjstk '1)
(return)
117
(cabne a1 'typestring 119)
(push (@ 120))
(push 'cdr)
(push (car a2))
(push (cdr a2))
(push nil)
(mov '4 a4)
(bra #:complice:op-mget-set)
120
(eval ())
(adjstk '1)
(return)
119
(cabne a1 'typevector 121)
(push (@ 122))
(push 'cdr)
(push (car a2))
(push (cdr a2))
(push nil)
(mov '4 a4)
(bra #:complice:op-mget-set)
122
(eval ())
(adjstk '1)
(return)
121
(cabeq a1 'vlength 124)
(cabne a1 'slen 123)
124
(push (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:tail?))
(mov (car a2) a1)
(call #:complice:exp)
(call #:complice:read-op)
(mov a1 (& 1))
(mov (& 0) (cvalq #:complice:tail?))
(adjstk '1)
(btnil (cvalq #:complice:return?) 126)
(push (@ 127))
(push 'hgsize)
(push a1)
(push (cvalq #:complice:return?))
(mov '3 a4)
(jmp list)
127
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:return?) a2)
(mov nil a1)
(call #:complice:write-op)
126
(mov (cvalq #:complice:return?) a1)
(bfnil a1 128)
(mov 't a1)
128
(adjstk '1)
(return)
123
(cabne a1 'comment 129)
(mov ''comment a1)
(adjstk '1)
(return)
129
(cabne a1 'vref 130)
(push (car a2))
(mov (cdr a2) a2)
(mov 'hpxmov a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcop2)
130
(cabne a1 'sref 131)
(push (car a2))
(mov (cdr a2) a2)
(mov 'hbxmov a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcop2)
131
(cabne a1 'vset 132)
(push (@ 133))
(mov (cdr a2) (& 1))
(push (car a2))
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(push (car a4))
(mov (& 3) a4)
(push (car a4))
(push 'hpmovx)
(mov '4 a4)
(bra #:complice:mcop3)
133
(eval ())
(adjstk '1)
(return)
132
(cabne a1 'sset 134)
(push (@ 135))
(mov (cdr a2) (& 1))
(push (car a2))
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(push (car a4))
(mov (& 3) a4)
(push (car a4))
(push 'hbmovx)
(mov '4 a4)
(bra #:complice:mcop3)
135
(eval ())
(adjstk '1)
(return)
134
(cabne a1 'add1 136)
(push (car a2))
(mov 'plus a3)
(mov ''1 a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
136
(cabne a1 'sub1 137)
(push (car a2))
(mov 'diff a3)
(mov ''1 a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
137
(cabne a1 'add 138)
(push (car a2))
(mov (cdr a2) a2)
(mov 'plus a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
138
(cabne a1 'sub 139)
(push (car a2))
(mov (cdr a2) a2)
(mov 'diff a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
139
(cabne a1 'mul 140)
(push (car a2))
(mov (cdr a2) a2)
(mov 'times a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
140
(cabne a1 'div 141)
(push (car a2))
(mov (cdr a2) a2)
(mov 'quo a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
141
(cabne a1 'rem 142)
(push (car a2))
(mov (cdr a2) a2)
(mov 'rem a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
142
(cabne a1 'fadd 143)
(push (car a2))
(mov (cdr a2) a2)
(mov 'fplus a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
143
(cabne a1 'fsub 144)
(push (car a2))
(mov (cdr a2) a2)
(mov 'fdiff a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
144
(cabne a1 'fmul 145)
(push (car a2))
(mov (cdr a2) a2)
(mov 'ftimes a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
145
(cabne a1 'fdiv 146)
(push (car a2))
(mov (cdr a2) a2)
(mov 'fquo a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
146
(cabne a1 'logand 147)
(push (car a2))
(mov (cdr a2) a2)
(mov 'land a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
147
(cabne a1 'logor 148)
(push (car a2))
(mov (cdr a2) a2)
(mov 'lor a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
148
(cabne a1 'logxor 149)
(push (car a2))
(mov (cdr a2) a2)
(mov 'lxor a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
149
(cabne a1 'logshift 150)
(push (car a2))
(mov (cdr a2) a2)
(mov 'lshift a3)
(mov (car a2) a2)
(pop a1)
(adjstk '1)
(bra #:complice:mcopar)
150
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:op-mget subr2)
(push a2)
(push a1)
(push (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:tail?))
(mov a2 a1)
(call #:complice:exp)
(mov a1 (& 2))
(mov (& 0) (cvalq #:complice:tail?))
(adjstk '1)
(btnil (cvalq #:complice:return?) 101)
(mov a1 a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:make-op)
101
(mov 't a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:op-mset nsubr)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 4) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 4))
(mov nil a2)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 3) a1)
(call #:complice:exp)
(mov a1 (& 3))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (& 2) a1)
(call #:complice:protected-op?)
(btnil a1 101)
(push (& 2))
(mov (& 0) a1)
(cabne a1 'a1 106)
(mov a1 a4)
(bra 105)
106
(cabne a1 'a2 107)
(mov a1 a4)
(bra 105)
107
(cabne a1 'a3 108)
(mov a1 a4)
(bra 105)
108
(cabne a1 'a4 109)
(mov a1 a4)
(bra 105)
109
(mov nil a4)
105
(adjstk '1)
(bfnil a4 102)
(mov nil a2)
(mov (& 1) a1)
(call #:complice:alloc-reg)
(mov a1 a2)
(mov (& 2) a1)
(call #:complice:mov)
(mov a1 (& 2))
(bra 102)
101
(bfcons (& 1) 111)
(mov (& 1) a4)
(bffix (car a4) 111)
(mov (& 1) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall cons)
(call #:complice:read-op)
(mov a1 (& 1))
111
(mov nil a2)
(mov (& 1) a1)
(call #:complice:alloc-reg)
(mov (& 1) a2)
(call #:complice:pop2)
(mov a1 (& 2))
102
(mov (& 2) a2)
(mov (& 3) a1)
(call #:complice:make-op)
(mov a1 a2)
(mov (& 1) a1)
(call #:complice:mov)
(btnil (cvalq #:complice:return?) 112)
(btnil (& 0) 114)
(mov (& 2) a1)
(adjstk '4)
(return)
114
(mov (& 1) a1)
(adjstk '4)
(return)
112
(mov 't a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:op-mget-set nsubr)
(bfnil (& 1) 101)
(mov (& 2) a2)
(mov (& 3) a1)
(adjstk '4)
(bra #:complice:op-mget)
101
(push (@ 103))
(push (& 4))
(push (& 4))
(mov (& 4) a4)
(push (car a4))
(push (& 4))
(mov '4 a4)
(bra #:complice:op-mset)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:complice:mcop2 subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov (cvalq #:complice:return?) a4)
(bfnil a4 101)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 a4)
101
(mov a4 (cvalq #:complice:return?))
(mov (& 2) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 2))
(mov nil a2)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 3) a1)
(call #:complice:exp)
(mov a1 (& 3))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(bfcons a1 103)
(bffix (car a1) 103)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall cons)
(call #:complice:read-op)
(mov a1 (& 1))
103
(mov (& 0) a1)
(call #:complice:protected-op?)
(bfnil a1 105)
(mov nil a2)
(mov (& 1) a1)
(call #:complice:alloc-reg)
(mov (& 1) a2)
(call #:complice:pop2)
(mov a1 (& 0))
105
(bfnil (cvalq #:complice:return?) 106)
(mov 't a1)
(adjstk '3)
(return)
106
(push (@ 108))
(push (& 3))
(mov (& 2) a1)
(call #:complice:read-op)
(push a1)
(mov (& 4) a1)
(call #:complice:read-op)
(push a1)
(push (cvalq #:complice:return?))
(mov '4 a4)
(jmp list)
108
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:return?) a2)
(mov nil a1)
(call #:complice:write-op)
(mov (cvalq #:complice:return?) a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:mcopar subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov (cvalq #:complice:return?) a4)
(bfnil a4 101)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 a4)
101
(mov a4 (cvalq #:complice:return?))
(mov (& 2) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 2))
(mov nil a2)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 3) a1)
(call #:complice:exp)
(mov a1 (& 3))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(bfcons a1 103)
(bffix (car a1) 103)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall cons)
(call #:complice:read-op)
(mov a1 (& 1))
103
(mov (& 0) a1)
(call #:complice:protected-op?)
(bfnil a1 105)
(mov nil a2)
(mov (& 1) a1)
(call #:complice:alloc-reg)
(mov (& 1) a2)
(call #:complice:pop2)
(mov a1 (& 0))
105
(bfnil (cvalq #:complice:return?) 106)
(mov 't a1)
(adjstk '3)
(return)
106
(mov (cvalq #:complice:return?) a2)
(mov nil a1)
(call #:complice:write-op)
(push (& 0))
(mov (& 0) a1)
(cabne a1 'a1 111)
(mov a1 a4)
(bra 110)
111
(cabne a1 'a2 112)
(mov a1 a4)
(bra 110)
112
(cabne a1 'a3 113)
(mov a1 a4)
(bra 110)
113
(cabne a1 'a4 114)
(mov a1 a4)
(bra 110)
114
(mov nil a4)
110
(adjstk '1)
(bfnil a4 109)
(mov nil a2)
(mov (& 1) a1)
(call #:complice:alloc-reg)
(mov a1 a2)
(mov (& 0) a1)
(call #:complice:mov)
(mov a1 (& 0))
109
(mov (& 0) a2)
(mov nil a1)
(call #:complice:write-op)
(push (@ 115))
(push (& 3))
(mov (& 3) a1)
(call #:complice:read-op)
(push a1)
(mov (& 3) a1)
(call #:complice:read-op)
(push a1)
(mov '3 a4)
(jmp list)
115
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:mcop3 nsubr)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 5) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 5))
(mov nil a2)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 4) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 4))
(mov a1 a2)
(mov (& 5) a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 3) a1)
(call #:complice:exp)
(mov a1 (& 3))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(bfcons (& 2) 102)
(mov (& 2) a4)
(bffix (car a4) 102)
(mov (& 2) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall cons)
(call #:complice:read-op)
(mov a1 (& 2))
102
(bfcons (& 1) 104)
(mov (& 1) a4)
(bffix (car a4) 104)
(mov (& 1) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall cons)
(call #:complice:read-op)
(mov a1 (& 1))
104
(mov (& 2) a1)
(call #:complice:protected-op?)
(bfnil a1 106)
(mov (& 1) a2)
(mov (& 3) a1)
(call #:complice:alloc-reg)
(mov (& 1) a2)
(call #:complice:pop2)
(mov a1 (& 2))
106
(mov (& 3) a1)
(call #:complice:protected-op?)
(bfnil a1 108)
(mov (& 1) a2)
(mov (& 2) a1)
(call #:complice:alloc-reg)
(mov (& 1) a3)
(mov (& 2) a2)
(call #:complice:pop3)
(mov a1 (& 3))
108
(push (@ 109))
(push (& 1))
(mov (& 3) a1)
(call #:complice:read-op)
(push a1)
(mov (& 6) a1)
(call #:complice:read-op)
(push a1)
(mov (& 6) a1)
(call #:complice:read-op)
(push a1)
(mov '4 a4)
(jmp list)
109
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:prog1-not-empty subr2)
(push a2)
(push a1)
(push (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:tail?))
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 1))
(mov (& 0) (cvalq #:complice:tail?))
(adjstk '1)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:return?))
101
(btnil (& 3) 102)
(mov (& 3) a1)
(mov (cdr a1) (& 3))
(mov (car a1) a1)
(call #:complice:exp)
(bra 101)
102
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (cvalq #:complice:return?) a2)
(bfnil a2 103)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 a2)
103
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:unprotect-op)
))
(loader'((entry #:complice:cpfnt:letv subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(push a3)
(bfcons a1 103)
(cabeq (car a1) 'quote 101)
103
(adjstk '2)
(jmp #:complice:set-error)
101
(push (@ 104))
(push (@ 105))
(push 'lambda)
(push (@ 106))
(mov (cdr a1) a2)
(push (car a2))
(mov '1 a4)
(jmp list)
106
(eval ())
(push a1)
(push (& 4))
(mov '3 a4)
(jmp mcons)
105
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp list)
104
(eval ())
(adjstk '2)
(bra #:complice:exp)
))
(loader'((entry #:complice:cpfnt:if subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(push a3)
(mov (cvalq #:complice:genlab) a2)
(plus '1 a2)
(mov a2 (cvalq #:complice:genlab))
(push a2)
(plus '1 a2)
(mov a2 (cvalq #:complice:genlab))
(push nil)
(push nil)
(push a2)
(mov (& 3) a3)
(mov nil a2)
(call #:complice:pred)
(push (@ 101))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
101
(eval ())
(mov a1 (& 2))
(mov (& 5) a1)
(call #:complice:exp)
(mov a1 (& 5))
(btnil (cvalq #:complice:return?) 103)
(mov (cvalq #:complice:return?) a2)
(call #:complice:mov)
103
(bfnil (cvalq #:complice:tail?) 105)
(push (@ 106))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
106
(eval ())
(mov a1 (& 1))
105
(bfnil (cvalq #:complice:tail?) 109)
(bfnil (cvalq #:complice:return?) 109)
(btnil (& 4) 108)
109
(push (@ 110))
(push 'bra)
(push (& 2))
(mov '2 a4)
(jmp list)
110
(eval ())
(call #:complice:code-last)
108
(mov (cvalq #:complice:lap) a2)
(mov (& 3) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 2) a1)
(call #:complice:set-all-reg)
(btnil (cvalq #:complice:tail?) 112)
(mov 't (cvalq #:complice:tail?))
112
(mov (& 4) a1)
(call #:complice:progn)
(mov a1 (& 4))
(btnil (cvalq #:complice:return?) 114)
(mov (cvalq #:complice:return?) a2)
(call #:complice:mov)
114
(bfnil (cvalq #:complice:tail?) 116)
(mov (& 1) a1)
(call #:complice:adjust-reg)
116
(mov (& 0) a1)
(call #:complice:code-last)
(mov (cvalq #:complice:return?) a1)
(bfnil a1 117)
(mov 't a1)
117
(adjstk '6)
(return)
))
(loader'((entry #:complice:comp-or-and subr3)
(push a3)
(push a2)
(push a1)
(bfnil a1 101)
(btnil (cvalq #:complice:return?) 103)
(mov a3 a1)
(adjstk '3)
(return)
103
(mov nil a1)
(adjstk '3)
(return)
101
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push nil)
(push nil)
(push a4)
(mov (cvalq #:complice:return?) (& 5))
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(push (& 7))
(mov (& 0) a1)
(cabne a1 'a1 107)
(mov a1 a3)
(bra 106)
107
(cabne a1 'a2 108)
(mov a1 a3)
(bra 106)
108
(cabne a1 'a3 109)
(mov a1 a3)
(bra 106)
109
(cabne a1 'a4 110)
(mov a1 a3)
(bra 106)
110
(mov nil a3)
106
(adjstk '1)
(bfnil a3 105)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 a3)
105
(mov a3 (cvalq #:complice:return?))
111
(mov (& 5) a4)
(bfcons (cdr a4) 112)
(mov (cdr a4) (& 5))
(mov (car a4) a1)
(call #:complice:exp)
(call #:complice:read-op)
(mov a1 (& 3))
(btnil (& 7) 114)
(mov (cvalq #:complice:return?) a2)
(call #:complice:mov)
(mov a1 (& 3))
114
(push (@ 115))
(push (& 7))
(push a1)
(push (& 5))
(mov '3 a4)
(jmp list)
115
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(btnil (& 4) 116)
(mov (& 4) a1)
(call #:complice:adjust-saved-reg)
(bra 111)
116
(push (@ 118))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
118
(eval ())
(mov a1 (& 4))
(bra 111)
112
(mov (cvalq #:complice:return?) (& 7))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (car a4) a1)
(call #:complice:exp)
(mov a1 (& 1))
(btnil (cvalq #:complice:return?) 120)
(mov (& 5) a2)
(call #:complice:mov)
(mov a1 (& 1))
120
(btnil (& 2) 122)
(mov (& 2) a1)
(call #:complice:adjust-saved-reg)
(mov (& 2) a1)
(call #:complice:adjust-reg)
122
(mov (cvalq #:complice:lap) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(btnil (cvalq #:complice:tail?) 124)
(mov 't (cvalq #:complice:tail?))
124
(mov (& 1) a1)
(adjstk '6)
(return)
))
(loader'((entry #:complice:cpfnt:selectq subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov (cvalq #:complice:genlab) a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(push nil)
(push nil)
(push nil)
(push nil)
(push a3)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(call #:complice:exp)
(mov 'a1 a2)
(call #:complice:mov)
(mov a1 (& 8))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
101
(bfcons (& 5) 102)
(mov (& 5) a4)
(bfnil (car a4) 103)
(mov (cdr a4) (& 5))
(bra 101)
103
(mov (cvalq #:complice:genlab) a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(mov a3 (& 2))
(btcons (car a4) 105)
(mov (car a4) a2)
(mov '9 a1)
(jcall #:complice:error)
(bra 106)
105
(mov (car a4) a2)
(mov (car a2) (& 1))
(push (car a2))
(mov 't a2)
(pop a1)
(jcall eq)
(bfnil a1 106)
(btsymb (& 1) 110)
(bffix (& 1) 108)
110
(push (@ 111))
(push 'cabne)
(push 'a1)
(push (@ 112))
(push 'quote)
(push (& 6))
(mov '2 a4)
(jmp list)
112
(eval ())
(push a1)
(push (& 6))
(mov '4 a4)
(jmp list)
111
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 106)
108
(bfcons (& 1) 113)
(push (& 1))
(push 't)
115
(bfcons (& 1) 116)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall symbolp)
(mov a1 a4)
(bfnil a4 117)
(mov (& 0) a1)
(jcall fixp)
(mov a1 a4)
117
(adjstk '1)
(mov a4 (& 0))
(btnil a4 116)
(bra 115)
116
(mov (& 0) a4)
(adjstk '2)
(btnil a4 113)
(push (@ 118))
(push 'a1)
(push (& 3))
(push nil)
(push (& 6))
(mov '4 a4)
(bra #:complice:memq-p)
118
(eval ())
(bra 106)
113
(mov 'a1 a1)
(call #:complice:push)
(push (@ 119))
(push 'quote)
(push (& 3))
(mov '2 a4)
(jmp list)
119
(eval ())
(mov 'a2 a2)
(call #:complice:mov)
(push (@ 120))
(push 'jcall)
(btcons (& 3) 121)
(mov 'equal a4)
(bra 122)
121
(mov 'member a4)
122
(push a4)
(mov '2 a4)
(jmp list)
120
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(call #:complice:clear-all-reg)
(mov 'a2 a2)
(mov 'a1 a1)
(call #:complice:mov)
(mov 'a1 a1)
(call #:complice:pop)
(push (@ 123))
(push 'btnil)
(push 'a2)
(push (& 5))
(mov '3 a4)
(jmp list)
123
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
106
(btnil (& 3) 124)
(mov (& 3) a1)
(call #:complice:adjust-saved-reg)
(bra 125)
124
(push (@ 126))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
126
(eval ())
(mov a1 (& 3))
125
(mov (& 5) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(call #:complice:progn)
(mov a1 (cvalq #:complice:x))
(btnil (cvalq #:complice:return?) 128)
(mov (cvalq #:complice:return?) a2)
(call #:complice:mov)
128
(bfnil (cvalq #:complice:tail?) 130)
(btnil (& 4) 131)
(mov (& 4) a1)
(call #:complice:adjust-saved-reg)
(bra 130)
131
(push (@ 133))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
133
(eval ())
(mov a1 (& 4))
130
(cabne (& 1) 't 134)
(mov (& 0) a1)
(call #:complice:code-last)
(mov 'done (& 5))
(bra 101)
134
(mov (& 5) a4)
(mov (cdr a4) (& 5))
(push (@ 136))
(push 'bra)
(push (& 2))
(mov '2 a4)
(jmp list)
136
(eval ())
(call #:complice:code-last)
(mov (cvalq #:complice:lap) a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 3) a1)
(call #:complice:set-all-reg)
(btnil (cvalq #:complice:tail?) 101)
(mov 't (cvalq #:complice:tail?))
(bra 101)
102
(mov (& 4) a1)
(call #:complice:adjust-reg)
(bfnil (& 5) 140)
(btnil (cvalq #:complice:return?) 142)
(mov (cvalq #:complice:return?) a2)
(mov 'nil a1)
(call #:complice:mov)
142
(mov (& 0) a1)
(call #:complice:code-last)
140
(mov (cvalq #:complice:return?) a1)
(bfnil a1 143)
(mov 't a1)
143
(adjstk '7)
(return)
))
(loader'((entry #:complice:cpfnt:while subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(call #:complice:clear-all-reg)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push nil)
(push a4)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (cvalq #:complice:lap) a2)
(mov (& 4) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 2) a3)
(mov nil a2)
(mov (& 6) a1)
(call #:complice:pred)
(mov nil (cvalq #:complice:return?))
(push (@ 101))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
101
(eval ())
(mov a1 (& 3))
102
(btnil (& 5) 103)
(mov (& 5) a1)
(mov (cdr a1) (& 5))
(mov (car a1) a1)
(call #:complice:exp)
(bra 102)
103
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (@ 104))
(push 'bra)
(push (& 4))
(mov '2 a4)
(jmp list)
104
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push (& 1))
(push '(a1 a2 a3 a4))
105
(bfcons (& 1) 106)
(bfcons (& 0) 106)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (& 0) a2)
(mov (cdr a2) (& 0))
(mov (car a2) a2)
(mov (car a1) a1)
(call #:complice:set-reg)
(bra 105)
106
(adjstk '2)
(btnil (cvalq #:complice:return?) 107)
(mov 'nil a1)
(adjstk '5)
(return)
107
(mov 't a1)
(adjstk '5)
(return)
))
(loader'((entry #:complice:cpfnt:until subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(call #:complice:clear-all-reg)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push nil)
(push (cvalq #:complice:return?))
(push a4)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (cvalq #:complice:lap) a2)
(mov (& 5) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(btnil (& 3) 101)
(push (@ 103))
(push 'bfnil)
(mov (& 9) a1)
(call #:complice:exp)
(call #:complice:read-op)
(mov a1 (& 5))
(push a1)
(push (& 5))
(mov '3 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 102)
101
(mov (& 2) a3)
(mov 't a2)
(mov (& 7) a1)
(call #:complice:pred)
102
(push (@ 104))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
104
(eval ())
(mov a1 (& 4))
(mov nil (cvalq #:complice:return?))
(mov (& 6) a1)
(call #:complice:progn)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (@ 105))
(push 'bra)
(push (& 5))
(mov '2 a4)
(jmp list)
105
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push (& 2))
(push '(a1 a2 a3 a4))
106
(bfcons (& 1) 107)
(bfcons (& 0) 107)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (& 0) a2)
(mov (cdr a2) (& 0))
(mov (car a2) a2)
(mov (car a1) a1)
(call #:complice:set-reg)
(bra 106)
107
(adjstk '2)
(btnil (cvalq #:complice:return?) 108)
(mov (& 1) a1)
(adjstk '6)
(return)
108
(mov 't a1)
(adjstk '6)
(return)
))
(loader'((entry #:complice:cpfnt:repeat subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov (cvalq #:complice:genlab) a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(push a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(push nil)
(push nil)
(push a3)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 7) a1)
(call #:complice:exp)
(mov a1 (& 4))
(cabne a1 'a1 104)
(mov a1 a4)
(bra 103)
104
(cabne a1 'a2 105)
(mov a1 a4)
(bra 103)
105
(cabne a1 'a3 106)
(mov a1 a4)
(bra 103)
106
(cabne a1 'a4 107)
(mov a1 a4)
(bra 103)
107
(mov nil a4)
103
(bfnil a4 102)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 a2)
(mov (& 4) a1)
(call #:complice:mov)
(mov a1 (& 4))
102
(push (@ 108))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
108
(eval ())
(mov a1 (& 3))
(push (@ 109))
(push 'bra)
(push (& 4))
(mov '2 a4)
(jmp list)
109
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 5) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 4) a1)
(call #:complice:push)
(call #:complice:clear-all-reg)
(mov (& 6) a1)
(call #:complice:progn)
(mov (& 4) a1)
(call #:complice:pop)
(mov (cvalq #:complice:lap) a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push (@ 110))
(push 'sobgez)
(push (& 6))
(push (& 8))
(mov '3 a4)
(jmp list)
110
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (& 1) a1)
(call #:complice:adjust-reg)
(btnil (cvalq #:complice:return?) 111)
(mov ''t a1)
(adjstk '6)
(return)
111
(mov 't a1)
(adjstk '6)
(return)
))
(defvar #:complice:lhack-for-arg ())
(loader'((entry #:complice:cpfnt:arg subr1)
(push a1)
(btnil (cvalq #:complice:return?) 101)
(mov '&nobind a1)
(call #:complice:get-env)
(call #:complice:read-op)
(push nil)
(push a1)
(bfnil (& 2) 103)
(adjstk '3)
(return)
103
(mov (& 2) a1)
(mov (car a1) a1)
(call #:complice:exp)
(call #:complice:read-op)
(mov a1 (& 1))
(cabne a1 'a4 106)
(mov nil a2)
(mov 'a4 a1)
(call #:complice:alloc-reg)
(mov a1 (& 1))
(mov a1 a2)
(mov 'a4 a1)
(call #:complice:mov)
106
(mov 'a4 a2)
(mov (& 0) a1)
(call #:complice:mov)
(mov 'a4 a2)
(mov nil a1)
(call #:complice:write-op)
(bfcons (& 1) 107)
(mov (& 1) a4)
(cabne (car a4) 'quote 107)
(mov (cdr a4) a3)
(bffix (car a3) 107)
(push (@ 109))
(push (@ 110))
(push 'quote)
(push (@ 111))
(mov (& 4) a4)
(push (car a4))
(mov (& 6) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp |-|)
111
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov (& 2) a4)
(push (car a4))
(push a4)
(mov '3 a4)
(jmp list)
109
(eval ())
(mov (cvalq #:complice:lhack-for-arg) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lhack-for-arg))
(push (@ 112))
(push 'plus)
(mov (car a1) a4)
(push (car a4))
(push '(a4))
(mov '3 a4)
(jmp mcons)
112
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 108)
107
(push (@ 113))
(push 'plus)
(push (@ 114))
(push 'quote)
(mov (& 4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
114
(eval ())
(push a1)
(push '(a4))
(mov '3 a4)
(jmp mcons)
113
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push (@ 115))
(push 'diff)
(push (& 3))
(push '(a4))
(mov '3 a4)
(jmp mcons)
115
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
108
(push (@ 116))
(push 'xspmov)
(push 'a4)
(push (cvalq #:complice:return?))
(mov '3 a4)
(jmp list)
116
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:return?) a1)
(adjstk '3)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:hack-for-arg subr0)
(push (cvalq #:complice:lhack-for-arg))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (car a3) a3)
(mov (& 0) a2)
(mov (car a3) a1)
(diff a4 a1)
(mov (cdr a2) a4)
(plus (car a4) a1)
(mov (cdr a2) a4)
(mov a1 (car a4))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov nil (cvalq #:complice:lhack-for-arg))
(mov nil a1)
(return)
))
(loader'((entry #:complice:*tag subr2)
(push a2)
(push a1)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(push (@ 101))
(push '@)
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:complice:push)
(mov (& 1) a1)
(call #:complice:push)
(mov 'tag a1)
(call #:complice:push-top-block)
(bfcons (& 1) 102)
(mov (& 1) a4)
(cabne (car a4) 'quote 102)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(bra 103)
102
(mov 't a4)
103
(mov a4 (& 1))
(push (@ 104))
(push 'tag)
(push a4)
(push (cvalq #:complice:v-stack))
(push (& 4))
(mov '4 a4)
(jmp list)
104
(eval ())
(mov (cvalq #:complice:lframe) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lframe))
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov (& 4) a1)
(call #:complice:progn)
(mov a1 (& 4))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(btnil (cvalq #:complice:return?) 106)
(mov 'a1 a2)
(call #:complice:mov)
106
(mov (cvalq #:complice:lap) a2)
(mov '(mov (& 1) dlink) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov '4 a1)
(call #:complice:adjstk)
(mov (cvalq #:complice:lframe) a4)
(mov (cdr a4) (cvalq #:complice:lframe))
(mov (cvalq #:complice:lap) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(call #:complice:clear-all-reg)
(mov 'a1 a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:cpfnt:tag subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(push (@ 101))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (& 0) a2)
(adjstk '1)
(bra #:complice:*tag)
))
(loader'((entry #:complice:cpfnt:evtag subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov (cvalq #:complice:stack) a3)
(mov (car a3) a3)
(plus '1 a3)
(mov (cvalq #:complice:stack) a2)
(mov a3 (car a2))
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 3) a1)
(call #:complice:exp)
(mov a1 (& 3))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff '1 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov (& 0) a2)
(adjstk '2)
(bra #:complice:*tag)
))
(loader'((entry #:complice:cpfnt:exit subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov a4 a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (@ 101))
(push 'quote)
(push (& 2))
(mov '2 a4)
(jmp list)
101
(eval ())
(mov 'a2 a2)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov '(jmp #:llcp:exit) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:return?) a1)
(bfnil a1 102)
(mov 't a1)
102
(adjstk '1)
(return)
))
(loader'((entry #:complice:cpfnt:evexit subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a2 (cvalq #:complice:return?))
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 3))
(mov 'a1 (cvalq #:complice:return?))
(mov (& 2) a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov 'a2 a2)
(mov (& 1) a1)
(call #:complice:unprotect-op)
(mov 'a2 a2)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov '(jmp #:llcp:exit) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:return?) a1)
(bfnil a1 101)
(mov 't a1)
101
(adjstk '2)
(return)
))
(loader'((entry #:complice:cpfnt:protect subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov (cvalq #:complice:genlab) a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(push a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(push a3)
(push (@ 101))
(push '@)
(push (& 3))
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:complice:push)
(mov 'prot a1)
(call #:complice:push-top-block)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov (& 5) a1)
(call #:complice:exp)
(mov a1 (& 5))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(cabne a1 'a1 105)
(mov a1 a4)
(bra 104)
105
(cabne a1 'a2 106)
(mov a1 a4)
(bra 104)
106
(cabne a1 'a3 107)
(mov a1 a4)
(bra 104)
107
(cabne a1 'a4 108)
(mov a1 a4)
(bra 104)
108
(mov nil a4)
104
(bfnil a4 103)
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 a2)
(mov (& 3) a1)
(call #:complice:mov)
(mov a1 (& 3))
103
(mov (cvalq #:complice:lap) a2)
(mov '(mov (& 1) dlink) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov '3 a1)
(call #:complice:adjstk)
(mov (& 3) a1)
(call #:complice:push)
(push (@ 109))
(push '@)
(push (& 2))
(mov '2 a4)
(jmp list)
109
(eval ())
(mov 'a3 a2)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(call #:complice:clear-all-reg)
(mov 'a3 a1)
(call #:complice:protect-op)
(mov 'a2 a1)
(call #:complice:protect-op)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:return?))
110
(btnil (& 4) 111)
(mov (& 4) a1)
(mov (cdr a1) (& 4))
(mov (car a1) a1)
(call #:complice:exp)
(bra 110)
111
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov 'a2 a2)
(mov 'a2 a1)
(call #:complice:unprotect-op)
(mov 'a3 a2)
(mov 'a3 a1)
(call #:complice:unprotect-op)
(mov 'a1 a1)
(call #:complice:pop)
(mov (cvalq #:complice:lap) a2)
(mov '(bri a3) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'a1 a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:cpfnt:lock subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov (cvalq #:complice:genlab) a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(push a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(push nil)
(push nil)
(push a3)
(btcons a1 101)
(mov nil (& 1))
(bra 102)
101
(cabne (car a1) 'lambda 103)
(mov a1 (& 1))
(bra 102)
103
(cabne (car a1) 'quote 105)
(mov (cdr a1) a2)
(mov (car a2) (& 1))
(bra 102)
105
(mov nil (& 1))
102
(bfnil (& 1) 108)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov (& 7) a1)
(call #:complice:exp)
(call #:complice:push)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
108
(push (@ 109))
(push '@)
(push (& 5))
(mov '2 a4)
(jmp list)
109
(eval ())
(call #:complice:push)
(mov 'prot a1)
(call #:complice:push-top-block)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov (& 6) a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (cvalq #:complice:lap) a2)
(mov '(mov (& 1) dlink) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov '3 a1)
(call #:complice:adjstk)
(mov 'a1 a1)
(call #:complice:push)
(mov 'a2 a2)
(mov 'nil a1)
(call #:complice:mov)
(push (@ 110))
(push '@)
(push (& 2))
(mov '2 a4)
(jmp list)
110
(eval ())
(mov 'a3 a2)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov (& 3) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(call #:complice:clear-all-reg)
(mov 'a2 a1)
(call #:complice:push)
(mov 'a3 a1)
(call #:complice:push)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(push (@ 111))
(push 'bffix)
(push 'a2)
(push a4)
(mov '3 a4)
(jmp list)
111
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'a2 a2)
(mov 'nil a1)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '1)
(btnil (& 1) 112)
(jcall gensym)
(push a1)
(jcall gensym)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a1)
(mov 'a1 a2)
(mov 'a2 a1)
(call #:complice:mov)
(mov 'a2 a2)
(mov '(& 2) a1)
(call #:complice:mov)
(mov 'a1 a2)
(mov (& 1) a1)
(call #:complice:set-reg)
(mov 'a2 a2)
(mov (& 0) a1)
(call #:complice:set-reg)
(push (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:tail?))
(push (@ 114))
(push (& 5))
(push (& 4))
(push (& 4))
(mov '3 a4)
(jmp list)
114
(eval ())
(call #:complice:exp)
(mov a1 (& 5))
(mov (& 0) (cvalq #:complice:tail?))
(adjstk '3)
(bra 113)
112
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(push (@ 115))
(push '@)
(push a4)
(mov '2 a4)
(jmp list)
115
(eval ())
(call #:complice:push)
(mov '(& 4) a1)
(call #:complice:push)
(mov 'a2 a1)
(call #:complice:push)
(mov '(& 5) a1)
(call #:complice:push)
(mov 'a4 a2)
(mov ''3 a1)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov '(jmp funcall) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff '4 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov 'a1 (& 3))
(adjstk '1)
113
(push (@ 116))
(push 'btsymb)
(push '(& 1))
(push (& 3))
(mov '3 a4)
(jmp list)
116
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov '(mov (& 2) a1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov '(mov (& 1) a2) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov '(bri (& 0)) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(btnil (& 1) 117)
(mov '3 a1)
(bra 118)
117
(mov '4 a1)
118
(call #:complice:adjstk)
(mov (& 2) a1)
(adjstk '6)
(return)
))
(loader'((entry #:complice:cpfnt:block subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov (cvalq #:complice:genlab) a3)
(plus '1 a3)
(mov a3 (cvalq #:complice:genlab))
(push a3)
(push (@ 101))
(push '@)
(push a3)
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:complice:push)
(push (@ 102))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
102
(eval ())
(mov 'a1 a2)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov '(jcall #:llcp:block) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(plus '3 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(call #:complice:clear-all-reg)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov (& 3) a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(call #:complice:clear-all-reg)
(mov (cvalq #:complice:lap) a2)
(mov '(return) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff '4 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov a1 a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'a1 a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:cpfnt:return subr2)
(push a1)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(mov a2 a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (@ 101))
(push 'quote)
(push (& 2))
(mov '2 a4)
(jmp list)
101
(eval ())
(mov 'a2 a2)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov '(jmp #:llcp:retfrom) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'a1 a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:cpfnt:schedule subr2)
(push a2)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(call #:complice:exp)
(mov 'a1 a2)
(call #:complice:mov)
(push (@ 101))
(push '@)
(push (& 4))
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:complice:push)
(mov (cvalq #:complice:lap) a2)
(mov '(jcall #:llcp:schedule) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(plus '3 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(call #:complice:clear-all-reg)
(mov (& 3) a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(call #:complice:clear-all-reg)
(mov (cvalq #:complice:lap) a2)
(mov '(return) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff '4 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov a1 a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov 'a1 a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:cpfnt:with-interrupts subr1)
(push a1)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(push (@ 101))
(push '@)
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:complice:push)
(mov (cvalq #:complice:lap) a2)
(mov '(jcall #:llcp:with-interrupts) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(plus '4 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(call #:complice:clear-all-reg)
(mov (& 3) a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(call #:complice:clear-all-reg)
(mov (cvalq #:complice:lap) a2)
(mov '(return) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff '5 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov a1 a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov 'a1 a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:cpfnt:without-interrupts subr1)
(push a1)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(push (@ 101))
(push '@)
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:complice:push)
(mov (cvalq #:complice:lap) a2)
(mov '(jcall #:llcp:without-interrupts) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(plus '4 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(call #:complice:clear-all-reg)
(mov (& 3) a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(call #:complice:clear-all-reg)
(mov (cvalq #:complice:lap) a2)
(mov '(return) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(diff '5 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov a1 a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov 'a1 a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:cpfnt:tagbody subr1)
(push a1)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push nil)
(push '0)
(push a1)
(push a4)
(push (@ 101))
(push '@)
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:complice:push)
(push (& 1))
102
(bfcons (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(btcons (& 0) 105)
(push (@ 106))
(push '@)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(mov (& 7) a2)
(mov a4 a1)
(jcall cons)
(mov a1 (& 7))
(push (car a1))
(mov '2 a4)
(jmp list)
106
(eval ())
(call #:complice:push)
(push (@ 107))
(push 'quote)
(push (& 2))
(mov '2 a4)
(jmp list)
107
(eval ())
(call #:complice:push)
(mov (& 4) a4)
(plus '1 a4)
(mov a4 (& 4))
105
(adjstk '1)
(bra 102)
103
(adjstk '1)
(mov (& 3) a1)
(jcall nreverse)
(mov a1 (& 3))
(push (@ 108))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
108
(eval ())
(call #:complice:push)
(mov (cvalq #:complice:lap) a2)
(mov '(jcall #:llcp:tagbody) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov (car a4) a4)
(plus '3 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(call #:complice:clear-all-reg)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:return?))
(push (& 6))
109
(bfcons (& 0) 110)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 111)
(mov (& 0) a1)
(call #:complice:exp)
(bra 112)
111
(mov (& 7) a1)
(mov (cdr a1) (& 7))
(mov (cvalq #:complice:lap) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(call #:complice:clear-all-reg)
112
(adjstk '1)
(bra 109)
110
(adjstk '1)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (cvalq #:complice:lap) a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov '(return) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:stack) a4)
(mov '2 a3)
(times (& 2) a3)
(plus '5 a3)
(mov (car a4) a4)
(diff a3 a4)
(mov (cvalq #:complice:stack) a3)
(mov a4 (car a3))
(mov a1 a2)
(mov '(eval ()) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:complice:cpfnt:go subr1)
(push (@ 101))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov 'a1 a2)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov '(jmp #:llcp:go) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 'a1 a1)
(return)
))
(loader'((entry #:complice:cpfnt:declare1 nsubr)
(diff '1 a4)
(jcall #:llcp:nlist)
(mov ''comment a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:cpfnt:precomp subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push a3)
(push a2)
101
(bfcons (& 2) 102)
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (car a1) a1)
(jcall copy)
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 101)
102
(push (@ 103))
(push (& 2))
(mov '1 a4)
(jmp eval)
103
(eval ())
(mov (& 0) a1)
(mov (car a1) a1)
(bfnil a1 104)
(mov 'a1 a1)
104
(adjstk '3)
(return)
))
(loader'((entry #:complice:cpfnt:not subr1)
(mov (car a1) a1)
(push a1)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
(push (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:tail?))
(call #:complice:exp)
(call #:complice:read-op)
(mov a1 (& 3))
(mov (& 0) (cvalq #:complice:tail?))
(adjstk '1)
(bfnil (cvalq #:complice:return?) 101)
(mov 't a1)
(adjstk '3)
(return)
101
(push (@ 103))
(push 'btnil)
(push a1)
(push (& 4))
(mov '3 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:return?) a2)
(mov 'nil a1)
(call #:complice:mov)
(push (@ 104))
(push 'bra)
(push (& 2))
(mov '2 a4)
(jmp list)
104
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:return?) a2)
(mov ''t a1)
(call #:complice:mov)
(mov (cvalq #:complice:lap) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (cvalq #:complice:return?) a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:cpfnt:funarg subr1)
(push a1)
(push (cvalq #:complice:f))
(jcall gensym)
(mov a1 a2)
(pop a1)
(jcall symbol)
(push (cvalq #:complice:genlab))
(mov (cvalq #:complice:bind) a4)
(mov (cdr a4) (cvalq #:complice:bind))
(mov (car a4) a4)
(mov (cvalq #:complice:bind) a3)
(mov (cdr a3) (cvalq #:complice:bind))
(mov (car a3) a3)
(push nil)
(push nil)
(push (car a4))
(push (car a3))
(push (cvalq #:complice:lap))
(push a1)
(push (@ 101))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(push (cvalq #:complice:stack))
(push (cvalq #:complice:v-stack))
(push (cvalq #:complice:env))
(push (cvalq #:complice:protect))
(push (cvalq #:complice:op-stack))
(push (cvalq #:complice:l-adjust))
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(push (cvalq #:complice:lframe))
(push (cvalq #:complice:bind))
(push (cvalq #:complice:&nobind))
(push (cvalq #:complice:funarg?))
(mov '16 a4)
(jmp list)
101
(eval ())
(mov a1 (& 4))
(mov (& 0) a1)
(call #:complice:initall)
(mov (& 1) (cvalq #:complice:lap))
(mov (& 2) (cvalq #:complice:bind))
(mov (& 6) (cvalq #:complice:genlab))
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(mov a4 (& 5))
(mov 't (cvalq #:complice:funarg?))
(push (@ 102))
(push 'bra)
(push a4)
(mov '2 a4)
(jmp list)
102
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 7) a3)
(mov (car a3) a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:complice:make-header)
(mov a1 (& 2))
(mov (& 7) a1)
(mov (cdr a1) a1)
(call #:complice:progn)
(mov 'a1 a2)
(call #:complice:mov)
(mov 't a3)
(mov (& 2) a2)
(mov nil a1)
(call #:complice:reset-env)
(mov '(return) a1)
(call #:complice:code-last)
(call #:complice:final-adjust)
103
(btnil (cvalq #:complice:op-stack) 104)
(mov (cvalq #:complice:op-stack) a4)
(push (car a4))
(mov (car a4) a1)
(mov (car a1) a1)
(jcall ncons)
(pop a4)
(mov a1 (cdr a4))
(mov (cvalq #:complice:op-stack) a4)
(mov (cdr a4) (cvalq #:complice:op-stack))
(mov (car a4) a4)
(mov '& (car a4))
(bra 103)
104
(mov (cvalq #:complice:lap) a2)
(mov (& 5) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(push (& 4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push (cdr a2))
(mov (car a2) a2)
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push (cdr a4))
(mov (car a4) a4)
(push a4)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(push (cdr a4))
(mov (car a4) a4)
(push a4)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(push (cdr a4))
(mov (car a4) a4)
(push a4)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(push (cdr a4))
(mov (car a4) a4)
(push a4)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(push (cdr a4))
(mov (car a4) a4)
(push a4)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (& 12) (cvalq #:complice:a1))
(mov (& 11) (cvalq #:complice:a2))
(mov a3 (cvalq #:complice:a3))
(mov a2 (cvalq #:complice:a4))
(mov (& 10) (cvalq #:complice:stack))
(mov (& 8) (cvalq #:complice:v-stack))
(mov (& 9) (cvalq #:complice:env))
(mov (& 6) (cvalq #:complice:protect))
(mov (& 7) (cvalq #:complice:op-stack))
(mov (& 4) (cvalq #:complice:l-adjust))
(mov (& 5) (cvalq #:complice:tail?))
(mov (& 2) (cvalq #:complice:return?))
(mov (& 3) (cvalq #:complice:lframe))
(mov (& 0) (cvalq #:complice:bind))
(mov (& 1) (cvalq #:complice:&nobind))
(mov a4 (cvalq #:complice:funarg?))
(adjstk '13)
(push (@ 105))
(push 'quote)
(push (& 2))
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '8)
(return)
))
(loader'((entry #:complice:cpfnt:setq subr1)
(push a1)
(push 'nil)
(push nil)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
101
(btnil (& 4) 102)
(mov (& 4) a4)
(btsymb (car a4) 103)
(mov (car a4) a2)
(mov '8 a1)
(jcall #:complice:error)
(bra 104)
103
(mov (car a4) a1)
(call #:complice:get-env)
(call #:complice:read-op)
(mov a1 (& 2))
(mov (& 4) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:complice:exp)
(mov a1 (& 3))
(mov (& 2) a2)
(call #:complice:mov)
(mov (& 4) a1)
(mov (car a1) a1)
(call #:complice:clear-var-in-all-reg)
(push (& 3))
(mov (& 0) a1)
(cabne a1 'a1 108)
(mov a1 a4)
(bra 107)
108
(cabne a1 'a2 109)
(mov a1 a4)
(bra 107)
109
(cabne a1 'a3 110)
(mov a1 a4)
(bra 107)
110
(cabne a1 'a4 111)
(mov a1 a4)
(bra 107)
111
(mov nil a4)
107
(adjstk '1)
(btnil a4 104)
(mov (& 4) a1)
(mov (& 3) a2)
(mov (car a1) a1)
(call #:complice:set-reg)
104
(mov (& 4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) (& 4))
(bra 101)
102
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov (& 1) a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:cpfnt:deset subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push a4)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:complice:copy-gensym)
(push a1)
(push (@ 103))
(push (@ 104))
(push 'lambda)
(push (@ 105))
(push a1)
(mov '1 a4)
(jmp list)
105
(eval ())
(push a1)
(mov (& 6) a1)
(mov (cdr a1) a1)
(mov (& 4) a2)
(mov (car a1) a1)
(call #:complice:peigne)
(mov a1 a2)
(mov 'setq a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp list)
103
(eval ())
(call #:complice:exp)
(mov ''t a1)
(adjstk '3)
(return)
101
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov 'a1 (cvalq #:complice:return?))
(push a1)
(mov a4 a1)
(jcall ncons)
(mov a1 a2)
(pop a1)
(jcall cons)
(call #:complice:subr2)
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov 'deset a1)
(adjstk '2)
(bra #:complice:call)
))
(defvar #:sys-package:colon 'complice)
(loader'((entry #:complice:cppred subr3)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(cabne a1 'atom 102)
(btnil a2 103)
(mov 'bfcons a1)
(bra 104)
103
(mov 'btcons a1)
104
(mov (car a4) a2)
(adjstk '1)
(bra #:complice:s-pred)
102
(cabne a1 'variablep 105)
(btnil a2 106)
(mov 'btvar a1)
(bra 107)
106
(mov 'bfvar a1)
107
(mov (car a4) a2)
(adjstk '1)
(bra #:complice:s-pred)
105
(cabne a1 'consp 108)
(btnil a2 109)
(mov 'btcons a1)
(bra 110)
109
(mov 'bfcons a1)
110
(mov (car a4) a2)
(adjstk '1)
(bra #:complice:s-pred)
108
(cabne a1 'symbolp 111)
(btnil a2 112)
(mov 'btsymb a1)
(bra 113)
112
(mov 'bfsymb a1)
113
(mov (car a4) a2)
(adjstk '1)
(bra #:complice:s-pred)
111
(cabne a1 'fixp 114)
(btnil a2 115)
(mov 'btfix a1)
(bra 116)
115
(mov 'bffix a1)
116
(mov (car a4) a2)
(adjstk '1)
(bra #:complice:s-pred)
114
(cabne a1 'floatp 117)
(btnil a2 118)
(mov 'btfloat a1)
(bra 119)
118
(mov 'bffloat a1)
119
(mov (car a4) a2)
(adjstk '1)
(bra #:complice:s-pred)
117
(cabne a1 'vectorp 120)
(btnil a2 121)
(mov 'btvect a1)
(bra 122)
121
(mov 'bfvect a1)
122
(mov (car a4) a2)
(adjstk '1)
(bra #:complice:s-pred)
120
(cabne a1 'stringp 123)
(btnil a2 124)
(mov 'btstrg a1)
(bra 125)
124
(mov 'bfstrg a1)
125
(mov (car a4) a2)
(adjstk '1)
(bra #:complice:s-pred)
123
(cabne a1 'eq 126)
(push (@ 127))
(btnil a2 128)
(mov 'cabeq a4)
(bra 129)
128
(mov 'cabne a4)
129
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
127
(eval ())
(adjstk '1)
(return)
126
(cabne a1 'eqn 130)
(push (@ 131))
(btnil a2 132)
(mov 'cnbeq a4)
(bra 133)
132
(mov 'cnbne a4)
133
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
131
(eval ())
(adjstk '1)
(return)
130
(cabne a1 'neqn 134)
(push (@ 135))
(btnil a2 136)
(mov 'cnbne a4)
(bra 137)
136
(mov 'cnbeq a4)
137
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
135
(eval ())
(adjstk '1)
(return)
134
(cabne a1 'ge 138)
(push (@ 139))
(btnil a2 140)
(mov 'cnbge a4)
(bra 141)
140
(mov 'cnblt a4)
141
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
139
(eval ())
(adjstk '1)
(return)
138
(cabne a1 'gt 142)
(push (@ 143))
(btnil a2 144)
(mov 'cnbgt a4)
(bra 145)
144
(mov 'cnble a4)
145
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
143
(eval ())
(adjstk '1)
(return)
142
(cabne a1 'le 146)
(push (@ 147))
(btnil a2 148)
(mov 'cnble a4)
(bra 149)
148
(mov 'cnbgt a4)
149
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
147
(eval ())
(adjstk '1)
(return)
146
(cabne a1 'lt 150)
(push (@ 151))
(btnil a2 152)
(mov 'cnblt a4)
(bra 153)
152
(mov 'cnbge a4)
153
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
151
(eval ())
(adjstk '1)
(return)
150
(cabne a1 'feqn 154)
(push (@ 155))
(btnil a2 156)
(mov 'cfbeq a4)
(bra 157)
156
(mov 'cfbne a4)
157
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
155
(eval ())
(adjstk '1)
(return)
154
(cabne a1 'fneqn 158)
(push (@ 159))
(btnil a2 160)
(mov 'cfbne a4)
(bra 161)
160
(mov 'cfbeq a4)
161
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
159
(eval ())
(adjstk '1)
(return)
158
(cabne a1 'fge 162)
(push (@ 163))
(btnil a2 164)
(mov 'cfbge a4)
(bra 165)
164
(mov 'cfblt a4)
165
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
163
(eval ())
(adjstk '1)
(return)
162
(cabne a1 'fgt 166)
(push (@ 167))
(btnil a2 168)
(mov 'cfbgt a4)
(bra 169)
168
(mov 'cfble a4)
169
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
167
(eval ())
(adjstk '1)
(return)
166
(cabne a1 'fle 170)
(push (@ 171))
(btnil a2 172)
(mov 'cfble a4)
(bra 173)
172
(mov 'cfbgt a4)
173
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
171
(eval ())
(adjstk '1)
(return)
170
(cabne a1 'flt 174)
(push (@ 175))
(btnil a2 176)
(mov 'cfblt a4)
(bra 177)
176
(mov 'cfbge a4)
177
(push a4)
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(push a3)
(mov '4 a4)
(bra #:complice:d-pred)
175
(eval ())
(adjstk '1)
(return)
174
(cabne a1 'or 178)
(push (@ 179))
(push a4)
(push a2)
(push a3)
(push a2)
(mov '4 a4)
(bra #:complice:pred-or-and)
179
(eval ())
(adjstk '1)
(return)
178
(cabne a1 'and 180)
(push (@ 181))
(push a4)
(push a2)
(push a3)
(btnil a2 182)
(mov nil a4)
(bra 183)
182
(mov 't a4)
183
(push a4)
(mov '4 a4)
(bra #:complice:pred-or-and)
181
(eval ())
(adjstk '1)
(return)
180
(cabne a1 'memq 184)
(mov a4 a1)
(adjstk '1)
(bra #:complice:memq)
184
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:s-pred subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(push (@ 101))
(push (& 3))
(mov (& 5) a1)
(call #:complice:exp)
(call #:complice:read-op)
(push a1)
(push (& 7))
(mov '3 a4)
(jmp list)
101
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(mov 't a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:d-pred nsubr)
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 4) a1)
(call #:complice:exp)
(call #:complice:protect-op)
(mov a1 (& 4))
(mov nil a2)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 3) a1)
(call #:complice:exp)
(call #:complice:read-op)
(mov a1 (& 3))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(bfcons a1 102)
(bffix (car a1) 102)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall cons)
(call #:complice:read-op)
(mov a1 (& 1))
102
(mov (& 2) a1)
(call #:complice:protected-op?)
(bfnil a1 104)
(mov nil a2)
(mov (& 1) a1)
(call #:complice:alloc-reg)
(mov (& 1) a2)
(call #:complice:pop2)
(mov a1 (& 2))
104
(push (@ 105))
(push (& 4))
(mov (& 4) a1)
(call #:complice:read-op)
(push a1)
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp list)
105
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov 't a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:pred-or-and nsubr)
(bfnil (& 3) 101)
(cabne (& 2) (& 0) 103)
(bfnil (& 2) 102)
(push (@ 107))
(push 'bra)
(push (& 3))
(mov '2 a4)
(jmp list)
107
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 102)
103
(btnil (& 2) 102)
(push (@ 110))
(push 'bra)
(push (& 3))
(mov '2 a4)
(jmp list)
110
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 102)
101
(push (@ 111))
(push (cvalq #:complice:a1))
(push (cvalq #:complice:a2))
(push (cvalq #:complice:a3))
(push (cvalq #:complice:a4))
(mov '4 a4)
(jmp list)
111
(eval ())
(push a1)
(bfnil (& 1) 118)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
114
(mov (& 5) a4)
(btnil (cdr a4) 115)
(mov (cdr a4) (& 5))
(btnil (& 4) 116)
(mov nil a2)
(bra 117)
116
(mov 't a2)
117
(mov (& 0) a3)
(mov (car a4) a1)
(call #:complice:pred)
(mov (& 1) a1)
(call #:complice:adjust-saved-reg)
(bra 114)
115
(mov (& 3) a3)
(mov (& 4) a2)
(mov (car a4) a1)
(call #:complice:pred)
(mov (& 1) a1)
(call #:complice:adjust-saved-reg)
(mov (& 1) a1)
(call #:complice:adjust-reg)
(mov (cvalq #:complice:lap) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '1)
(bra 113)
118
(btnil (& 4) 119)
(mov (& 4) a1)
(mov (cdr a1) (& 4))
(mov (& 2) a3)
(mov (& 3) a2)
(mov (car a1) a1)
(call #:complice:pred)
(mov (& 0) a1)
(call #:complice:adjust-saved-reg)
(bra 118)
119
(mov (& 0) a1)
(call #:complice:adjust-reg)
113
(adjstk '1)
102
(mov 't a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:memq subr3)
(push a3)
(push a2)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push a4)
(bfcons a4 103)
(cabeq (car a4) 'quote 101)
103
(push (cvalq #:complice:tail?))
(mov nil (cvalq #:complice:tail?))
(push (@ 104))
(btnil a2 105)
(mov 'bfnil a4)
(bra 106)
105
(mov 'btnil a4)
106
(push a4)
(push (@ 107))
(push a1)
(push (& 5))
(mov '2 a4)
(jmp list)
107
(eval ())
(mov a1 a2)
(mov 'memq a1)
(call #:complice:exp-subr)
(push a1)
(push (& 7))
(mov '3 a4)
(jmp list)
104
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(mov (& 0) (cvalq #:complice:tail?))
(adjstk '1)
(bra 102)
101
(push (cvalq #:complice:tail?))
(push (cvalq #:complice:return?))
(mov nil (cvalq #:complice:tail?))
(mov nil a2)
(mov nil a1)
(call #:complice:alloc-reg)
(mov a1 (cvalq #:complice:return?))
(mov (& 3) a1)
(call #:complice:exp)
(mov (cvalq #:complice:return?) a2)
(call #:complice:mov)
(mov a1 (& 3))
(mov (& 1) (cvalq #:complice:tail?))
(mov (& 0) (cvalq #:complice:return?))
(adjstk '2)
(push (@ 108))
(push a1)
(mov (& 2) a4)
(mov (cdr a4) a4)
(push (car a4))
(push (& 5))
(push (& 7))
(mov '4 a4)
(bra #:complice:memq-p)
108
(eval ())
102
(mov 't a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:memq-p nsubr)
(bfnil (& 1) 111)
(mov (cvalq #:complice:genlab) a4)
(plus '1 a4)
(mov a4 (cvalq #:complice:genlab))
(push a4)
103
(mov (& 3) a4)
(btnil (cdr a4) 104)
(push (@ 105))
(push 'cabeq)
(push (& 6))
(push (@ 106))
(push 'quote)
(mov (cdr a4) (& 8))
(push (car a4))
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(push (& 4))
(mov '4 a4)
(jmp list)
105
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 103)
104
(bfcons a4 108)
(push (@ 109))
(push 'cabne)
(push (& 6))
(push (@ 110))
(push 'quote)
(push (car a4))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(push (& 5))
(mov '4 a4)
(jmp list)
109
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
108
(mov (cvalq #:complice:lap) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(adjstk '5)
(return)
111
(btnil (& 2) 112)
(push (@ 113))
(push 'cabeq)
(push (& 5))
(push (@ 114))
(push 'quote)
(mov (& 7) a4)
(mov (cdr a4) (& 7))
(push (car a4))
(mov '2 a4)
(jmp list)
114
(eval ())
(push a1)
(push (& 4))
(mov '4 a4)
(jmp list)
113
(eval ())
(mov (cvalq #:complice:lap) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lap))
(bra 111)
112
(mov nil a1)
(adjstk '4)
(return)
))
(loader '((end)))
(loader '((title |cp.lo|)))
(defvar #:sys-package:colon 'complice)
(add-feature 'compiler)
(add-feature 'complice)
(loader'((fentry dont-compile fsubr)
(entry dont-compile fsubr)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:dont-compile-one-fonction)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:dont-compile-one-fonction subr1)
(push a1)
(mov 'dont-compile a3)
(mov a1 a2)
(jcall putprop)
(push (@ 101))
(push 'larg)
(push (@ 102))
(push 'list)
(push ''eval)
(push (@ 103))
(push 'list)
(push ''quote)
(push (@ 104))
(push 'cons)
(push (@ 105))
(push 'quote)
(push (& 12))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(push '(larg))
(mov '3 a4)
(jmp mcons)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov a1 a2)
(mov (& 0) a1)
(adjstk '1)
(jmp make-macro-open)
))
(loader'((fentry compile fsubr)
(entry compile fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(push (@ 101))
(push a1)
(mov (cdr a4) (& 2))
(push (car a4))
(mov (& 3) a3)
(mov (cdr a3) (& 3))
(push (car a3))
(mov (& 4) a3)
(mov (cdr a3) (& 4))
(push (car a3))
(mov '4 a4)
(jmp compiler)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry compiler nsubr)
(entry compiler nsubr)
(cnbge a4 '1 101)
(mov 'compiler a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov (cdr a1) (& 0))
(push (car a1))
102
(bfcons (& 0) 103)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:dont-compile-one-fonction)
(bra 102)
103
(adjstk '1)
(btcons (& 1) 105)
(push (@ 106))
(push (& 2))
(mov '1 a4)
(jmp list)
106
(eval ())
(mov a1 (& 1))
105
(mov (& 0) a2)
(mov (cdr a2) (& 0))
(mov (& 0) a3)
(mov (cdr a3) (& 0))
(mov (car a3) a3)
(mov (car a2) a2)
(mov (& 1) a1)
(call #:complice:compiler-aux)
(btnil (cvalq #:complice:error-occured) 107)
(push (@ 109))
(push '((abort)))
(mov '1 a4)
(jmp loader)
109
(eval ())
(mov 'abort a1)
(adjstk '2)
(return)
107
(push (@ 110))
(push '((end)))
(mov '1 a4)
(jmp loader)
110
(eval ())
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:compiler-aux subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(mov a1 (cvalq #:complice:outchan))
(mov (& 0) a1)
(jcall #:complice:pass-one)
(push a1)
(push (cdr a1))
102
(bfcons (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a3)
(mov '4 a2)
(mov 'compiler a1)
(jcall #:complice:warningf)
(adjstk '1)
(bra 102)
103
(adjstk '1)
(bfnil (cvalq #:complice:error-occured) 104)
(mov (& 0) a4)
(push (car a4))
(push (& 0))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall typefn)
(push a1)
(mov (& 1) a1)
(jcall valfn)
(mov a1 a2)
(pop a1)
(jcall cons)
(mov '#:complice:save a3)
(mov a1 a2)
(mov (& 0) a1)
(jcall putprop)
(mov (& 5) a3)
(mov nil a2)
(mov (& 0) a1)
(jcall #:complice:pass-two)
(mov a1 (& 0))
(bfnil (cvalq #:complice:error-occured) 109)
(push (@ 110))
(push a1)
(push (& 8))
(mov '2 a4)
(jmp loader)
110
(eval ())
109
(adjstk '1)
(bra 106)
107
(adjstk '1)
(push (& 0))
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(btnil (cvalq #:complice:error-occured) 114)
(mov '#:complice:save a2)
(mov (& 0) a1)
(jcall get)
(btnil a1 114)
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (& 0) a1)
(jcall setfn)
114
(push '(#:complice:save #:complice:bind #:complice:ftype))
117
(bfcons (& 0) 118)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 117)
118
(adjstk '2)
(bra 111)
112
(mov nil a1)
(adjstk '6)
(return)
104
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry compile-all-in-core nsubr)
(entry compile-all-in-core nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov (cdr a1) (& 0))
(push (car a1))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 2) a3)
(push (car a3))
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push nil)
(push (cvalq #:complice:outchan))
(mov a1 (cvalq #:complice:outchan))
(push (cvalq old))
(mov (& 2) (cvalq old))
(push (cvalq #:complice:warning-flag))
(mov (& 4) (cvalq #:complice:warning-flag))
(push (cvalq f2))
(mov (& 6) (cvalq f2))
(push (cvalq f1))
(mov (& 8) (cvalq f1))
(push '5)
(push '(#:complice:outchan old #:complice:warning-flag f2 f1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bra 102)
(fentry #:compile-all-in-core:g104 subr1)
(entry #:compile-all-in-core:g104 subr1)
(push a1)
(mov 'dont-compile a2)
(jcall getprop)
(bfnil a1 103)
(mov 'resetfn a2)
(mov (& 0) a1)
(jcall get)
(mov a1 (cvalq old))
(btnil a1 106)
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (& 0) a1)
(jcall setfn)
106
(mov (& 0) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'expr 109)
(cabeq a4 'fexpr 109)
(cabeq a4 'macro 109)
(cabne a4 'dmacro 107)
109
(push (@ 110))
(push (& 1))
(push 't)
(push (cvalq f1))
(push (cvalq f2))
(mov '4 a4)
(jmp compiler)
110
(eval ())
(adjstk '1)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
103
(mov nil a1)
(adjstk '1)
(return)
102
(mov '#:compile-all-in-core:g104 a1)
(jcall mapoblist)
(mov (& 1) dlink)
(mov (& 6) (cvalq f1))
(mov (& 7) (cvalq f2))
(mov (& 8) (cvalq #:complice:warning-flag))
(mov (& 9) (cvalq old))
(mov (& 10) (cvalq #:complice:outchan))
(adjstk '16)
(return)
))
(loader'((fentry compilefiles nsubr)
(entry compilefiles nsubr)
(cnbge a4 '1 101)
(mov 'compilefiles a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(btcons (& 1) 103)
(push (@ 104))
(push (& 2))
(mov '1 a4)
(jmp list)
104
(eval ())
(mov a1 (& 1))
103
(bfcons (& 0) 105)
(mov (& 0) a4)
(mov (car a4) a4)
(bra 106)
105
(mov (& 1) a4)
(mov (car a4) a4)
106
(mov a4 (& 0))
(mov nil (cvalq #:complice:list-of-loaded-file))
(push (@ 107))
(mov '0 a4)
(jmp outchan)
107
(eval ())
(mov a1 (cvalq #:complice:outchan))
(push nil)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 1) (cvalq #:system:print-with-abbrev-flag))
(push '1)
(push '(#:system:print-with-abbrev-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov nil a2)
(mov (& 9) a1)
(jcall #:complice:get-all-def-in-files)
(push a1)
(jcall #:complice:pass-one)
(push a1)
(push (cdr a1))
108
(bfcons (& 0) 109)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a3)
(mov '4 a2)
(mov 'compilefiles a1)
(jcall #:complice:warningf)
(adjstk '1)
(bra 108)
109
(adjstk '1)
(bfnil (cvalq #:complice:error-occured) 111)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (& 1) a1)
(jcall #:complice:complement)
(push a1)
112
(bfcons (& 0) 113)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a3)
(mov '9 a2)
(mov 'compilefiles a1)
(jcall #:complice:warningf)
(adjstk '1)
(bra 112)
113
(adjstk '1)
(mov (& 1) a3)
(mov (& 10) a2)
(mov (& 1) a1)
(jcall #:complice:generate-in-file)
111
(mov (& 0) a4)
(push (car a4))
114
(bfcons (& 0) 115)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push '(#:complice:bind #:complice:fvar #:complice:ftype))
116
(bfcons (& 0) 117)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 116)
117
(adjstk '2)
(bra 114)
115
(mov nil a1)
(adjstk '3)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(adjstk '10)
(return)
))
(loader'((fentry compilemodule nsubr)
(entry compilemodule nsubr)
(cnbge a4 '1 101)
(mov 'compilemodule a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov nil (cvalq #:complice:list-of-loaded-file))
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(mov a1 (cvalq #:complice:outchan))
(push nil)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 1) (cvalq #:system:print-with-abbrev-flag))
(push '1)
(push '(#:system:print-with-abbrev-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 9) a1)
(jcall makemodule)
(bfnil (cvalq #:complice:error-occured) 103)
(mov (& 8) a4)
(btnil (car a4) 105)
(push a1)
107
(bfcons (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfnil (cvalq #:complice:error-occured) 110)
(mov (& 0) a1)
(jcall makemodule-pass-two)
110
(adjstk '1)
(bra 107)
108
(mov nil a1)
(adjstk '1)
(bra 104)
105
(mov (& 9) a1)
(jcall makemodule-pass-two)
(bra 104)
103
(mov nil a1)
104
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(adjstk '10)
(return)
))
(loader '((end)))
