(loader '((title |path.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'pathname)))
(#:messages:put-message 'errpathversion 'french '"Version n'est pas un nume'rique" 'defmessage)
(#:messages:put-message 'errpathversion 'english '"Version is not numerical" 'defmessage)
'errpathversion
(#:messages:put-message 'errpathnotpath 'french '"l'argument n'est pas un pathname" 'defmessage)
(#:messages:put-message 'errpathnotpath 'english '"not a pathname" 'defmessage)
'errpathnotpath
(#:messages:put-message 'errpathfields 'french '"Attention: un des champs Host, Device ou Version n'est pas vide" 'defmessage)
(#:messages:put-message 'errpathfields 'english '"Warning : Host, Device or Version fields are not empty" 'defmessage)
'errpathfields
(#:messages:put-message 'errpathnotvms 'french '"Pas une spe'cification VMS" 'defmessage)
(#:messages:put-message 'errpathnotvms 'english '"not a VMS specification" 'defmessage)
'errpathnotvms
(#:messages:put-message 'errpathnotbsd 'french '"Pas une spe'cification BSD" 'defmessage)
(#:messages:put-message 'errpathnotbsd 'english '"not a BSD specification" 'defmessage)
'errpathnotbsd
(#:messages:put-message 'errpathnotsys5 'french '"Pas une spe'cification SYS5" 'defmessage)
(#:messages:put-message 'errpathnotsys5 'english '"not a SYS5 specification" 'defmessage)
'errpathnotsys5
(#:messages:put-message 'errpathnotaegis 'french '"Pas une spe'cification AEGIS" 'defmessage)
(#:messages:put-message 'errpathnotaegis 'english '"not an AEGIS specification" 'defmessage)
'errpathnotaegis
(#:messages:put-message 'errpathnotdos 'french '"Pas une spe'cification DOS" 'defmessage)
(#:messages:put-message 'errpathnotdos 'english '"not a DOS specification" 'defmessage)
'errpathnotdos
(#:messages:put-message 'errpathbadname 'french '"Champ NAME incorrect" 'defmessage)
(#:messages:put-message 'errpathbadname 'english '"Bad NAME field" 'defmessage)
'errpathbadname
(#:messages:put-message 'errpathreaddir 'french '"Ne peut acce'der au re'pertoire" 'defmessage)
(#:messages:put-message 'errpathreaddir 'english '"Can not access directory" 'defmessage)
'errpathreaddir
(#:messages:put-message 'errpathmatch 'french '"Mauvais joker dans le filtre" 'defmessage)
(#:messages:put-message 'errpathmatch 'english '"Bad wild-card in pattern" 'defmessage)
'errpathmatch
(setq #:sys-package:colon 'pathname)
(add-feature 'pathname)
(if (boundp '#:pathname:wild) (progn (makunbound '#:pathname:wild)))
(defvar #:pathname:wild-string "*")
(defvar #:pathname:wild-length (slen #:pathname:wild-string))
(defvar #:pathname:one-char-string "?")
(defvar #:pathname:one-char-length (slen #:pathname:one-char-string))
(defvar #:pathname:root-string "")
(defvar #:pathname:dot ".")
(defvar #:pathname:slash "/")
(defvar #:pathname:up-string "..")
(defvar #:pathname:colon ":")
(defvar #:pathname:backslash "\")
(#:messages:put-message 'errpathsystem 'french '"mauvais syste`me. Vous devez recompiler le module <path> sur" 'defmessage)
(#:messages:put-message 'errpathsystem 'english '"bad system. You have to recompile <path> module on" 'defmessage)
'errpathsystem
(if (neq (or #:system:unixp #:system:dosp #:system:vmsp) 't) (error 'path 'errpathsystem (system)))
(putprop 'pathname '((() () () () () ()) host device directory name type version) 'defstruct)
(loader'((fentry #:pathname:make subr0)
(entry #:pathname:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '6 a4)
(jmp vector)
101
(eval ())
(mov 'pathname (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:host '#:pathname:host 'setf-inverse) '#:pathname:host)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:host (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:device '#:pathname:device 'setf-inverse) '#:pathname:device)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:device (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:directory '#:pathname:directory 'setf-inverse) '#:pathname:directory)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:directory (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:name '#:pathname:name 'setf-inverse) '#:pathname:name)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:name (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:type '#:pathname:type 'setf-inverse) '#:pathname:type)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:type (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:version '#:pathname:version 'setf-inverse) '#:pathname:version)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:version (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry pathnamep subr1)
(entry pathnamep subr1)
(jcall type-of)
(mov 'pathname a2)
(jmp eq)
))
(loader'((fentry namestring subr1)
(entry namestring subr1)
(push a1)
(bfstrg a1 101)
(adjstk '1)
(return)
101
(bfsymb a1 103)
(adjstk '1)
(jmp string)
103
(jcall pathnamep)
(bfnil a1 105)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'namestring a1)
(adjstk '1)
(jmp error)
105
(mov (& 0) a1)
(adjstk '1)
(bra #:unix:namestring)
))
(loader'((entry #:unix:namestring subr1)
(push a1)
(push (@ 101))
(call #:unix:device-namestring)
(push a1)
(mov (& 2) a1)
(call #:unix:directory-namestring)
(push a1)
(mov (& 3) a1)
(call #:unix:file-namestring)
(push a1)
(mov '3 a4)
(jmp catenate)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry pathname-host subr1)
(entry pathname-host subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
102
(hpxmov (& 0) '0 a1)
(adjstk '1)
(return)
))
(loader'((fentry pathname-device subr1)
(entry pathname-device subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
102
(hpxmov (& 0) '1 a1)
(adjstk '1)
(return)
))
(loader'((fentry pathname-directory subr1)
(entry pathname-directory subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
102
(hpxmov (& 0) '2 a1)
(adjstk '1)
(return)
))
(loader'((fentry pathname-name subr1)
(entry pathname-name subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
102
(hpxmov (& 0) '3 a1)
(adjstk '1)
(return)
))
(loader'((fentry pathname-type subr1)
(entry pathname-type subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
102
(hpxmov (& 0) '4 a1)
(adjstk '1)
(return)
))
(loader'((fentry pathname-version subr1)
(entry pathname-version subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
102
(hpxmov (& 0) '5 a1)
(adjstk '1)
(return)
))
(loader'((fentry set-pathname-host subr2)
(entry set-pathname-host subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'set-pathname-host a1)
(jcall error)
102
(btnil (& 1) 104)
(btstrg (& 1) 104)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'set-pathname-host a1)
(jcall error)
104
(hpmovx (& 1) (& 0) '0)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry set-pathname-device subr2)
(entry set-pathname-device subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'set-pathname-device a1)
(jcall error)
102
(btnil (& 1) 104)
(btstrg (& 1) 104)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'set-pathname-device a1)
(jcall error)
104
(hpmovx (& 1) (& 0) '1)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry set-pathname-directory subr2)
(entry set-pathname-directory subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'set-pathname-directory a1)
(jcall error)
102
(mov (& 1) a1)
(jcall listp)
(bfnil a1 104)
(mov (& 1) a3)
(mov 'errnla a2)
(mov 'set-pathname-directory a1)
(jcall error)
104
(push (& 1))
(push nil)
105
(btnil (& 1) 106)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(mov (car a4) (& 0))
(btstrg (& 0) 105)
(mov (& 0) a4)
(cabeq a4 '#:pathname:current 105)
(cabeq a4 '#:pathname:up 105)
(cabeq a4 '#:pathname:wild 105)
(cabeq a4 '#:pathname:root 105)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'set-pathname-directory a1)
(jcall error)
(bra 105)
106
(adjstk '2)
(hpmovx (& 1) (& 0) '2)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry set-pathname-name subr2)
(entry set-pathname-name subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'set-pathname-name a1)
(jcall error)
102
(btnil (& 1) 104)
(btstrg (& 1) 104)
(cabeq (& 1) '#:pathname:wild 104)
(mov (& 1) a3)
(mov 'errpathbadname a2)
(mov 'set-pathname-name a1)
(jcall error)
104
(hpmovx (& 1) (& 0) '3)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry set-pathname-type subr2)
(entry set-pathname-type subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'set-pathname-type a1)
(jcall error)
102
(btnil (& 1) 104)
(btstrg (& 1) 104)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'set-pathname-type a1)
(jcall error)
104
(hpmovx (& 1) (& 0) '4)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry set-pathname-version subr2)
(entry set-pathname-version subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'set-pathname-version a1)
(jcall error)
102
(mov (& 1) a1)
(jcall numberp)
(bfnil a1 104)
(btnil (& 1) 104)
(mov (& 1) a3)
(mov 'errpathversion a2)
(mov 'set-pathname-version a1)
(jcall error)
104
(hpmovx (& 1) (& 0) '5)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry copy-pathname subr1)
(entry copy-pathname subr1)
(push a1)
(mov 'pathname a1)
(jcall new)
(push a1)
(hpxmov (& 1) '0 a4)
(hpmovx a4 a1 '0)
(hpxmov (& 1) '1 a4)
(hpmovx a4 a1 '1)
(push a1)
(hpxmov (& 2) '2 a1)
(jcall copylist)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 1) '3 a4)
(hpmovx a4 (& 0) '3)
(hpxmov (& 1) '4 a4)
(hpmovx a4 (& 0) '4)
(hpxmov (& 1) '5 a4)
(hpmovx a4 (& 0) '5)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry pathname subr1)
(entry pathname subr1)
(push a1)
(jcall pathnamep)
(btnil a1 101)
(mov (& 0) a1)
(adjstk '1)
(return)
101
(bfsymb (& 0) 104)
(mov (& 0) a1)
(jcall string)
(mov a1 (& 0))
104
(btstrg (& 0) 105)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'pathname a1)
(adjstk '1)
(jmp error)
105
(mov '"" a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 107)
(mov 'pathname a1)
(adjstk '1)
(jmp new)
107
(mov (& 0) a1)
(adjstk '1)
(jmp #:unix:pathname)
))
(loader'((fentry #:unix:pathname subr1)
(entry #:unix:pathname subr1)
(push a1)
(mov 'pathname a1)
(jcall new)
(push a1)
(mov (& 1) a1)
(jcall string)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push a1)
(hgsize a1 a4)
(cabne a4 '0 101)
(mov (& 7) a1)
(adjstk '9)
(return)
101
(hbxmov a1 '0 a4)
(cabne a4 '47 103)
(hgsize a1 a4)
(cnble a4 '1 105)
(hbxmov a1 '1 a4)
(cabne a4 '47 105)
(btnil (cvalq #:system:unixp) 105)
(jcall system)
(cabne a1 'apollo 105)
(push nil)
107
(bfnil (& 0) 108)
(push (@ 109))
(push '47)
(push (& 3))
(push '2)
(mov '3 a4)
(jmp chrpos)
109
(eval ())
(mov a1 (& 3))
(push (@ 110))
(push (& 2))
(push '2)
(bffix a1 111)
(diff '2 a1)
(mov a1 a4)
(bra 112)
111
(hgsize (& 4) a4)
(mov a4 (& 6))
112
(push a4)
(mov '3 a4)
(jmp substring)
110
(eval ())
(mov a1 (& 7))
(mov (cvalq #:pathname:up-string) a2)
(jcall eqstring)
(btnil a1 113)
(push (@ 115))
(push (& 2))
(push '3)
(mov '2 a4)
(jmp substring)
115
(eval ())
(mov a1 (& 1))
(bra 107)
113
(mov (cvalq #:pathname:dot) a2)
(mov (& 7) a1)
(jcall eqstring)
(btnil a1 116)
(push (@ 118))
(push (& 2))
(push '2)
(mov '2 a4)
(jmp substring)
118
(eval ())
(mov a1 (& 1))
(bra 107)
116
(mov (cvalq #:pathname:wild-string) a2)
(mov (& 7) a1)
(jcall eqstring)
(btnil a1 119)
(mov '#:pathname:wild (& 0))
(bra 107)
119
(mov (& 7) (& 0))
(bra 107)
108
(push (@ 121))
(push (& 2))
(mov (& 5) a4)
(plus '1 a4)
(push a4)
(mov '2 a4)
(jmp substring)
121
(eval ())
(mov a1 (& 1))
(hgsize (& 0) a4)
(cabeq a4 '0 123)
(mov (& 0) a2)
(mov (& 8) a1)
(jcall set-pathname-device)
123
(adjstk '1)
(bra 106)
105
(push (@ 124))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp substring)
124
(eval ())
(mov a1 (& 0))
106
(mov '#:pathname:root a1)
(jcall ncons)
(mov a1 (& 1))
(bra 136)
103
(push (@ 127))
(push '"../")
(push a1)
(mov '2 a4)
(jmp index)
127
(eval ())
(cabne a1 '0 125)
(push (@ 128))
(push (& 1))
(push '3)
(mov '2 a4)
(jmp substring)
128
(eval ())
(mov a1 (& 0))
(mov '#:pathname:up a1)
(jcall ncons)
(mov a1 (& 1))
(bra 136)
125
(push (@ 131))
(push '"./")
(push (& 2))
(mov '2 a4)
(jmp index)
131
(eval ())
(cabne a1 '0 129)
(push (@ 132))
(push (& 1))
(push '2)
(mov '2 a4)
(jmp substring)
132
(eval ())
(mov a1 (& 0))
(mov '#:pathname:current a1)
(jcall ncons)
(mov a1 (& 1))
(bra 136)
129
(push (@ 135))
(push '47)
(push (& 2))
(mov '2 a4)
(jmp chrpos)
135
(eval ())
(btnil a1 136)
(mov '#:pathname:current a1)
(jcall ncons)
(mov a1 (& 1))
136
(push (@ 138))
(push '47)
(push (& 2))
(mov '2 a4)
(jmp chrpos)
138
(eval ())
(mov a1 (& 2))
(btnil a1 137)
(push (@ 139))
(push (& 1))
(push '0)
(push a1)
(mov '3 a4)
(jmp substring)
139
(eval ())
(mov a1 (& 6))
(mov (cvalq #:pathname:up-string) a2)
(jcall eqstring)
(btnil a1 140)
(mov (& 1) a4)
(cabeq (car a4) '#:pathname:root 141)
(mov a4 a2)
(mov '#:pathname:up a1)
(jcall cons)
(mov a1 (& 1))
(bra 141)
140
(mov (cvalq #:pathname:dot) a2)
(mov (& 6) a1)
(jcall eqstring)
(btnil a1 144)
(mov (& 1) a4)
(cabeq (car a4) '#:pathname:root 141)
(mov a4 a2)
(mov '#:pathname:current a1)
(jcall cons)
(mov a1 (& 1))
(bra 141)
144
(mov (cvalq #:pathname:wild-string) a2)
(mov (& 6) a1)
(jcall eqstring)
(btnil a1 148)
(mov (& 1) a2)
(mov '#:pathname:wild a1)
(jcall cons)
(mov a1 (& 1))
(bra 141)
148
(mov (cvalq #:pathname:root-string) a2)
(mov (& 6) a1)
(jcall eqstring)
(bfnil a1 141)
(mov (& 1) a2)
(mov (& 6) a1)
(jcall cons)
(mov a1 (& 1))
141
(push (@ 151))
(push (& 1))
(mov (& 4) a4)
(plus '1 a4)
(push a4)
(mov '2 a4)
(jmp substring)
151
(eval ())
(mov a1 (& 0))
(bra 136)
137
(mov (& 1) a1)
(jcall nreverse)
(mov a1 (& 1))
(cabne (car a1) '#:pathname:root 153)
(btnil (cdr a1) 154)
(mov (cdr a1) (& 1))
(bra 153)
154
(mov (cvalq #:pathname:root-string) a1)
(jcall ncons)
(mov a1 (& 1))
153
(hpmovx (& 1) (& 7) '2)
(hgsize (& 0) a4)
(cnbeq a4 '0 157)
(hgsize (& 0) a2)
(diff '1 a2)
(mov (& 0) a1)
(call #:pathname:lastindex)
(push nil)
(push a1)
(bfnil a1 158)
(mov (& 2) a2)
(mov (& 9) a1)
(call #:pathname:name*)
(bra 159)
158
(push (@ 162))
(push (& 3))
(plus '1 a1)
(push a1)
(mov '2 a4)
(jmp substring)
162
(eval ())
(mov a1 (& 8))
(mov (& 0) a4)
(diff '1 a4)
(mov a4 a2)
(mov (& 2) a1)
(call #:pathname:lastindex)
(mov a1 (& 1))
(btnil a1 160)
(hgsize (& 8) a1)
(mov nil a3)
(mov (& 8) a2)
(jcall stratom)
(push a1)
(btfix a1 165)
(jcall string)
(mov (cvalq #:pathname:wild-string) a2)
(jcall eqstring)
(btnil a1 163)
165
(bffix (& 0) 166)
(hpmovx (& 0) (& 10) '5)
(bra 167)
166
(hpmovx '#:pathname:wild (& 10) '5)
167
(push (@ 168))
(push (& 4))
(mov (& 4) a4)
(plus '1 a4)
(push a4)
(mov (& 5) a4)
(plus '1 a4)
(mov (& 4) a3)
(diff a4 a3)
(push a3)
(mov '3 a4)
(jmp substring)
168
(eval ())
(mov a1 a2)
(mov (& 10) a1)
(call #:pathname:type*)
(push (@ 169))
(push (& 4))
(push '0)
(push (& 5))
(mov '3 a4)
(jmp substring)
169
(eval ())
(mov a1 a2)
(mov (& 10) a1)
(call #:pathname:name*)
(bra 164)
163
(mov (& 9) a2)
(mov (& 10) a1)
(call #:pathname:type*)
(push (@ 170))
(push (& 4))
(push '0)
(push (& 4))
(mov '3 a4)
(jmp substring)
170
(eval ())
(mov a1 a2)
(mov (& 10) a1)
(call #:pathname:name*)
164
(adjstk '1)
(bra 159)
160
(mov (& 8) a2)
(mov (& 9) a1)
(call #:pathname:type*)
(push (@ 171))
(push (& 3))
(push '0)
(push (& 3))
(mov '3 a4)
(jmp substring)
171
(eval ())
(mov a1 a2)
(mov (& 9) a1)
(call #:pathname:name*)
159
(adjstk '2)
157
(mov (& 7) a1)
(adjstk '9)
(return)
))
(loader'((entry #:pathname:type* subr2)
(push a2)
(push a1)
(push a2)
(mov (cvalq #:pathname:wild-string) a2)
(pop a1)
(jcall eqstring)
(btnil a1 101)
(mov '#:pathname:wild a4)
(bra 102)
101
(mov (& 1) a4)
102
(pop a3)
(hpmovx a4 a3 '4)
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((entry #:pathname:name* subr2)
(push a2)
(push a1)
(push a2)
(mov (cvalq #:pathname:wild-string) a2)
(pop a1)
(jcall eqstring)
(btnil a1 101)
(mov '#:pathname:wild a4)
(bra 102)
101
(mov (& 1) a4)
102
(pop a3)
(hpmovx a4 a3 '3)
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((entry #:pathname:lastindex subr2)
(cnbge a2 '0 101)
(mov nil a1)
(return)
101
(hbxmov a1 a2 a4)
(cabne a4 '46 103)
(mov a2 a1)
(return)
103
(diff '1 a2)
(bra #:pathname:lastindex)
))
(loader'((entry #:pathname:c-pathname subr1)
(push a1)
(jcall copy-pathname)
(mov a1 (& 0))
(hpxmov a1 '2 a4)
(push nil)
(push nil)
(push a4)
(btnil a4 102)
(bfstrg (car a4) 107)
(mov '#:pathname:root a1)
(jcall ncons)
(mov a1 (& 2))
(mov (& 0) a1)
(mov (cvalq #:pathname:root-string) a2)
(mov (car a1) a1)
(jcall eqstring)
(btnil a1 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
107
(btnil (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (car a4) (& 1))
(mov (& 1) a1)
(cabne a1 '#:pathname:up 110)
(mov (& 2) a4)
(cabeq (car a4) '#:pathname:root 107)
(mov a4 a2)
(mov '#:pathname:up a1)
(jcall cons)
(mov a1 (& 2))
(bra 107)
110
(cabne a1 '#:pathname:current 113)
(bra 107)
113
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(bra 107)
108
(mov (& 2) a1)
(jcall reverse)
(mov a1 (& 2))
(cabne (car a1) '#:pathname:root 115)
(btnil (cdr a1) 117)
(mov (cdr a1) (& 2))
(bra 116)
117
(mov (cvalq #:pathname:root-string) a1)
(jcall ncons)
(mov a1 (& 2))
(bra 116)
115
(cabeq (car a1) '#:pathname:up 116)
(mov (& 3) a1)
(jcall pathname-directory)
(btnil a1 116)
(mov (& 2) a2)
(mov '#:pathname:current a1)
(jcall cons)
(mov a1 (& 2))
116
(mov (& 2) a2)
(mov (& 3) a1)
(jcall set-pathname-directory)
102
(mov (& 3) a1)
(adjstk '4)
(return)
))
(loader'((fentry equal-pathname subr2)
(entry equal-pathname subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'equal-pathname a1)
(jcall error)
102
(mov (& 1) a1)
(jcall pathnamep)
(bfnil a1 104)
(mov (& 1) a3)
(mov 'errpathnotpath a2)
(mov 'equal-pathname a1)
(jcall error)
104
(mov (& 0) a1)
(jcall copy-pathname)
(mov a1 (& 0))
(mov (& 1) a1)
(jcall copy-pathname)
(mov a1 (& 1))
(hpxmov (& 0) '3 a4)
(push a4)
(hpxmov (& 1) '4 a3)
(hpxmov a1 '3 a2)
(hpxmov a1 '4 a4)
(push a4)
(btnil (& 1) 106)
(hgsize (& 1) a4)
(cnbne a4 '0 106)
(hpmovx nil (& 2) '3)
106
(btnil a2 108)
(hgsize a2 a4)
(cnbne a4 '0 108)
(hpmovx nil a1 '3)
108
(btnil a3 110)
(hgsize a3 a4)
(cnbne a4 '0 110)
(hpmovx nil (& 2) '4)
110
(btnil (& 0) 112)
(hgsize (& 0) a4)
(cnbne a4 '0 112)
(hpmovx nil a1 '4)
112
(mov (& 2) a1)
(call #:pathname:c-pathname)
(push a1)
(mov (& 4) a1)
(call #:pathname:c-pathname)
(mov a1 a2)
(pop a1)
(adjstk '4)
(jmp equal)
))
(loader'((fentry user-homedir-pathname subr0)
(entry user-homedir-pathname subr0)
(bra #:unix:user-homedir-pathname)
))
(loader'((fentry control-file-pathname nsubr)
(entry control-file-pathname nsubr)
(push a4)
(cnblt (& 0) '1 103)
(cnble (& 0) '2 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'control-file-pathname a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall string)
(push a1)
(cnbne (& 1) '2 104)
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall pathnamep)
(btnil a1 106)
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 105)
106
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a4)
(btstrg a4 110)
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a4)
(bfsymb a4 108)
110
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall pathname)
(mov a1 a4)
(bra 105)
108
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errpathnotpath a2)
(mov 'control-file-pathname a1)
(jcall error)
(mov a1 a4)
(bra 105)
104
(mov nil a4)
105
(push a4)
(btnil a4 111)
(mov (& 1) a2)
(mov nil a1)
(jcall symbol)
(mov 'control-file-pathname a3)
(mov (& 0) a2)
(jcall putprop)
(bra 112)
111
(mov (& 1) a2)
(mov nil a1)
(jcall symbol)
(mov 'control-file-pathname a2)
(jcall getprop)
(mov a1 (& 0))
(btnil a1 113)
(push a1)
(jcall user-homedir-pathname)
(mov a1 a2)
(pop a1)
(jcall merge-pathnames)
(bra 112)
113
(mov (& 1) a1)
(call #:unix:control-file-pathname)
112
(adjstk '2)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry temporary-file-pathname subr1)
(entry temporary-file-pathname subr1)
(bra #:unix:temporary-file-pathname)
))
(loader'((entry #:unix:user-homedir-pathname subr0)
(push (@ 101))
(mov '"HOME" a1)
(jcall getenv)
(push a1)
(push (cvalq #:pathname:slash))
(mov '2 a4)
(jmp catenate)
101
(eval ())
(jmp #:unix:pathname)
))
(loader'((entry #:unix:control-file-pathname subr1)
(push a1)
(jcall user-homedir-pathname)
(hpmovx (& 0) a1 '4)
(adjstk '1)
(return)
))
(loader'((entry #:unix:temporary-file-pathname subr1)
(push (@ 101))
(push '"/tmp/")
(push a1)
(mov '2 a4)
(jmp catenate)
101
(eval ())
(jmp pathname)
))
(loader'((entry #:bsd:pathname-check subr1)
(mov 't a1)
(return)
))
(loader'((entry #:sys5:pathname-check subr1)
(push (@ 101))
(hpxmov a1 '4 a4)
(push a4)
(hpxmov a1 '3 a4)
(push a4)
(hpxmov a1 '2 a4)
(push a4)
(mov '3 a4)
(jmp mcons)
101
(eval ())
(push a1)
(push 't)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(btnil (& 0) 104)
(mov (& 0) a1)
(jcall string)
(hgsize a1 a1)
(mov '14 a2)
(jcall le)
(mov a1 a4)
(bra 105)
104
(mov 't a4)
105
(adjstk '1)
(mov a4 (& 0))
(btnil a4 103)
(bra 102)
103
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:aegis:pathname-check subr1)
(mov 't a1)
(return)
))
(loader'((entry #:vms:pathname-check subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '4 a4)
(push a4)
(hpxmov a1 '3 a4)
(push a4)
(hpxmov a1 '2 a4)
(push a4)
(mov '3 a4)
(jmp mcons)
101
(eval ())
(push a1)
(hpxmov (& 1) '2 a1)
(jcall length)
(mov '8 a2)
(jcall le)
(btnil a1 102)
(push (& 0))
(push 't)
103
(bfcons (& 1) 104)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(btnil (& 0) 105)
(mov (& 0) a1)
(jcall string)
(hgsize a1 a1)
(mov '32 a2)
(jcall le)
(mov a1 a4)
(bra 106)
105
(mov 't a4)
106
(adjstk '1)
(mov a4 (& 0))
(btnil a4 104)
(bra 103)
104
(mov (& 0) a1)
(adjstk '2)
(btnil a1 102)
(push (& 0))
(push 't)
107
(bfcons (& 1) 108)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 111))
(push (& 1))
(push '"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_-$")
(mov '2 a4)
(jmp spanstring)
111
(eval ())
(btnil a1 109)
(mov nil a4)
(bra 110)
109
(mov 't a4)
110
(adjstk '1)
(mov a4 (& 0))
(btnil a4 108)
(bra 107)
108
(mov (& 0) a1)
(adjstk '2)
(btnil a1 102)
(hpxmov (& 1) '5 a4)
(btnil a4 112)
(hpxmov (& 1) '5 a1)
(adjstk '2)
(jmp fixp)
112
(mov 't a1)
(adjstk '2)
(return)
102
(adjstk '2)
(return)
))
(loader'((entry #:dos:pathname-check subr1)
(push a1)
(hpxmov a1 '3 a4)
(btnil a4 102)
(hpxmov a1 '3 a1)
(jcall stringp)
(btnil a1 103)
(hpxmov (& 0) '3 a1)
(hgsize a1 a1)
(mov '8 a2)
(jcall le)
(btnil a1 103)
(hpxmov (& 0) '3 a1)
(hgsize a1 a1)
(mov '1 a2)
(jcall ge)
(bra 103)
102
(mov 't a1)
103
(btnil a1 101)
(hpxmov (& 0) '4 a4)
(btnil a4 105)
(hpxmov (& 0) '4 a1)
(jcall stringp)
(btnil a1 106)
(hpxmov (& 0) '4 a1)
(hgsize a1 a1)
(mov '3 a2)
(jcall le)
(bra 106)
105
(mov 't a1)
106
(btnil a1 101)
(hpxmov (& 0) '2 a4)
(push a4)
(push 't)
108
(bfcons (& 1) 109)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(btnil (& 0) 110)
(push nil)
(push nil)
(mov (& 2) a1)
(jcall string)
(hgsize a1 a1)
(mov '12 a2)
(jcall le)
(mov a1 (& 1))
(mov a1 a4)
(btnil a4 112)
(push (@ 115))
(push (cvalq #:pathname:dot))
(push (& 4))
(push '0)
(mov '3 a4)
(jmp index)
115
(eval ())
(mov a1 (& 0))
(btnil a1 113)
(mov '8 a2)
(jcall le)
(mov a1 a4)
(btnil a4 112)
(mov '1 a2)
(mov (& 0) a1)
(jcall ge)
(mov a1 a4)
(btnil a4 112)
(push (@ 117))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp |-|)
117
(eval ())
(mov '4 a2)
(jcall le)
(mov a1 a4)
(bra 112)
113
(mov 't a4)
112
(adjstk '2)
(bra 111)
110
(mov 't a4)
111
(adjstk '1)
(mov a4 (& 0))
(btnil a4 109)
(bra 108)
109
(mov (& 0) a1)
(adjstk '2)
(btnil a1 101)
(push (@ 118))
(hpxmov (& 1) '4 a4)
(push a4)
(hpxmov (& 2) '3 a4)
(push a4)
(hpxmov (& 3) '2 a4)
(push a4)
(mov '3 a4)
(jmp mcons)
118
(eval ())
(push a1)
(push 't)
119
(bfcons (& 1) 120)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 123))
(push (& 1))
(push '"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_-$.\")
(mov '2 a4)
(jmp spanstring)
123
(eval ())
(btnil a1 121)
(mov nil a4)
(bra 122)
121
(mov 't a4)
122
(adjstk '1)
(mov a4 (& 0))
(btnil a4 120)
(bra 119)
120
(mov (& 0) a1)
(adjstk '2)
101
(adjstk '1)
(return)
))
(loader'((fentry portable-pathname-p subr1)
(entry portable-pathname-p subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push 't)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(mov (& 4) a1)
(jcall pathnamep)
(bfnil a1 106)
(mov (& 4) a3)
(mov 'errpathnotpath a2)
(mov 'portable-pathname-p a1)
(jcall error)
106
(hpxmov (& 4) '0 a4)
(bfnil a4 109)
(hpxmov (& 4) '1 a4)
(bfnil a4 109)
(hpxmov (& 4) '5 a4)
(btnil a4 108)
109
(btnil (cvalq #:system:error-flag) 108)
(mov (& 4) a3)
(mov 'errpathfields a2)
(mov 'portable-pathname-p a1)
(jcall printerror)
108
(hpxmov (& 4) '0 a1)
(bfnil a1 112)
(hpxmov (& 4) '1 a1)
(bfnil a1 112)
(hpxmov (& 4) '5 a1)
(bfnil a1 112)
(mov (& 4) a1)
(call #:vms:pathname-check)
(bfnil a1 114)
(mov (cvalq #:system:error-flag) a1)
(btnil a1 115)
(mov (& 4) a3)
(mov 'errpathnotvms a2)
(mov 'portable-pathname-p a1)
(jcall printerror)
(bra 115)
114
(mov nil a1)
115
(bfnil a1 112)
(mov (& 4) a1)
(call #:bsd:pathname-check)
(bfnil a1 117)
(mov (cvalq #:system:error-flag) a1)
(btnil a1 118)
(mov (& 4) a3)
(mov 'errpathnotbsd a2)
(mov 'portable-pathname-p a1)
(jcall printerror)
(bra 118)
117
(mov nil a1)
118
(bfnil a1 112)
(mov (& 4) a1)
(call #:sys5:pathname-check)
(bfnil a1 120)
(mov (cvalq #:system:error-flag) a1)
(btnil a1 121)
(mov (& 4) a3)
(mov 'errpathnotsys5 a2)
(mov 'portable-pathname-p a1)
(jcall printerror)
(bra 121)
120
(mov nil a1)
121
(bfnil a1 112)
(mov (& 4) a1)
(call #:aegis:pathname-check)
(bfnil a1 123)
(mov (cvalq #:system:error-flag) a1)
(btnil a1 124)
(mov (& 4) a3)
(mov 'errpathnotaegis a2)
(mov 'portable-pathname-p a1)
(jcall printerror)
(bra 124)
123
(mov nil a1)
124
(bfnil a1 112)
(mov (& 4) a1)
(call #:dos:pathname-check)
(bfnil a1 126)
(mov (cvalq #:system:error-flag) a1)
(btnil a1 112)
(mov (& 4) a3)
(mov 'errpathnotdos a2)
(mov 'portable-pathname-p a1)
(jcall printerror)
(bra 112)
126
(mov nil a1)
112
(btnil a1 110)
(mov nil a1)
(bra 111)
110
(mov 't a1)
111
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 129))
(push (& 4))
(mov '1 a4)
(jmp outchan)
129
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:pathname:prin subr1)
(entry #:pathname:prin subr1)
(push a1)
(btnil (cvalq #:system:print-for-read) 101)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '"#:")
(push 'pathname)
(push '":#[ ")
(mov '3 a4)
(jmp prin)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(push '0)
(push (& 1))
(hgsize (& 0) a4)
(push a4)
104
(cnbge (& 2) (& 0) 105)
(hpxmov (& 1) (& 2) a4)
(push (@ 106))
(push a4)
(mov '1 a4)
(jmp prin)
106
(eval ())
(push (@ 107))
(push '32)
(mov '1 a4)
(jmp princn)
107
(eval ())
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 104)
105
(adjstk '3)
(push (@ 108))
(push '93)
(mov '1 a4)
(jmp princn)
108
(eval ())
(bra 102)
101
(push (@ 109))
(push (@ 110))
(push '"#p""")
(jcall namestring)
(push a1)
(push '"""")
(mov '3 a4)
(jmp catenate)
110
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
109
(eval ())
102
(mov (& 0) a1)
(adjstk '1)
(return)
))
(defsharp p () (ncons (pathname (read))))
(defsharp u () (ncons (#:unix:pathname (read))))
(defvar *default-pathname-defaults* #:pathname:#[ () () () () () () ])
(defvar *portable-pathname* ())
(loader'((fentry make-pathname nsubr)
(entry make-pathname nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov 'pathname a1)
(jcall new)
(push a1)
(mov (& 1) a4)
(mov (car a4) a4)
(bfnil a4 101)
(hpxmov (cvalq *default-pathname-defaults*) '0 a4)
101
(hpmovx a4 a1 '0)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(bfnil a4 102)
(hpxmov (cvalq *default-pathname-defaults*) '1 a4)
102
(hpmovx a4 a1 '1)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(bfnil a4 103)
(hpxmov (cvalq *default-pathname-defaults*) '2 a4)
103
(hpmovx a4 a1 '2)
(push a1)
(mov (& 2) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(bfnil (& 0) 104)
(hpxmov (cvalq *default-pathname-defaults*) '3 a4)
(bra 105)
104
(btnil (& 0) 107)
(btstrg (& 0) 107)
(cabeq (& 0) '#:pathname:wild 107)
(mov (& 0) a3)
(mov 'errpathbadname a2)
(mov 'make-pathname a1)
(jcall error)
107
(mov (& 0) a4)
105
(adjstk '1)
(pop a3)
(hpmovx a4 a3 '3)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(bfnil a4 108)
(hpxmov (cvalq *default-pathname-defaults*) '4 a4)
108
(hpmovx a4 (& 0) '4)
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 109)
(hpxmov (cvalq *default-pathname-defaults*) '5 a4)
109
(hpmovx a4 (& 0) '5)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry file-namestring subr1)
(entry file-namestring subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'file-namestring a1)
(jcall error)
102
(mov (& 0) a1)
(adjstk '1)
(bra #:unix:file-namestring)
))
(loader'((fentry directory-namestring subr1)
(entry directory-namestring subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'directory-namestring a1)
(jcall error)
102
(mov (& 0) a1)
(adjstk '1)
(bra #:unix:directory-namestring)
))
(loader'((fentry host-namestring subr1)
(entry host-namestring subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'host-namestring a1)
(jcall error)
102
(mov (& 0) a1)
(adjstk '1)
(bra #:unix:host-namestring)
))
(loader'((fentry device-namestring subr1)
(entry device-namestring subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'device-namestring a1)
(jcall error)
102
(mov (& 0) a1)
(adjstk '1)
(bra #:unix:device-namestring)
))
(loader'((entry #:unix:host-namestring subr1)
(mov '"" a1)
(return)
))
(loader'((entry #:unix:device-namestring subr1)
(push a1)
(mov (cvalq #:system:unixp) a1)
(btnil a1 103)
(jcall system)
(mov 'apollo a2)
(jcall eq)
103
(btnil a1 102)
(hpxmov (& 0) '1 a1)
(btnil a1 102)
(push (@ 104))
(push '"//")
(hpxmov (& 2) '1 a4)
(push a4)
(mov '2 a4)
(jmp catenate)
104
(eval ())
102
(bfnil a1 101)
(mov '"" a1)
101
(adjstk '1)
(return)
))
(loader'((entry #:unix:directory-namestring subr1)
(push a1)
(hpxmov a1 '2 a4)
(bfnil a4 101)
(mov '"" a1)
(adjstk '1)
(return)
101
(hpxmov a1 '2 a1)
(mov (car a1) a1)
(jcall stringp)
(push a1)
(btnil a1 103)
(hgsize a1 a4)
(cnble a4 '0 103)
(mov (cvalq #:pathname:slash) a4)
(bra 104)
103
(mov '"" a4)
104
(mov a4 (& 0))
(hpxmov (& 1) '2 a3)
(push a3)
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 107))
(push (& 3))
(bfstrg (& 2) 108)
(mov (& 2) a4)
(bra 109)
108
(cabne (& 2) '#:pathname:up 110)
(mov (cvalq #:pathname:up-string) a4)
(bra 109)
110
(cabne (& 2) '#:pathname:wild 112)
(mov (cvalq #:pathname:wild-string) a4)
(bra 109)
112
(cabne (& 2) '#:pathname:current 114)
(mov (cvalq #:pathname:dot) a4)
(bra 109)
114
(mov nil a4)
109
(push a4)
(push (cvalq #:pathname:slash))
(mov '3 a4)
(jmp catenate)
107
(eval ())
(mov a1 (& 2))
(adjstk '1)
(bra 105)
106
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:unix:file-namestring subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '3 a1)
(jcall stringp)
(mov a1 a4)
(bfnil a4 102)
(hpxmov (& 1) '3 a4)
(bfnil a4 103)
(mov '"" a4)
(bra 102)
103
(hpxmov (& 1) '3 a4)
(cabne a4 '#:pathname:wild 105)
(mov (cvalq #:pathname:wild-string) a4)
(bra 102)
105
(mov nil a4)
102
(push a4)
(hpxmov (& 2) '4 a4)
(btnil a4 107)
(mov (cvalq #:pathname:dot) a4)
(bra 108)
107
(mov nil a4)
108
(push a4)
(hpxmov (& 3) '4 a4)
(bfstrg a4 109)
(hpxmov (& 3) '4 a4)
(bra 110)
109
(hpxmov (& 3) '4 a4)
(bfnil a4 111)
(mov '"" a4)
(bra 110)
111
(hpxmov (& 3) '4 a4)
(cabne a4 '#:pathname:wild 113)
(mov (cvalq #:pathname:wild-string) a4)
(bra 110)
113
(mov nil a4)
110
(push a4)
(hpxmov (& 4) '5 a4)
(btnil a4 115)
(mov (cvalq #:pathname:dot) a4)
(bra 116)
115
(mov nil a4)
116
(push a4)
(hpxmov (& 5) '5 a4)
(bffix a4 117)
(hpxmov (& 5) '5 a1)
(jcall string)
(mov a1 a4)
(bra 118)
117
(hpxmov (& 5) '5 a4)
(cabne a4 '#:pathname:wild 119)
(mov (cvalq #:pathname:wild-string) a4)
(bra 118)
119
(mov '"" a4)
118
(push a4)
(mov '5 a4)
(jmp catenate)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry merge-pathnames subr2)
(entry merge-pathnames subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'merge-pathnames a1)
(jcall error)
102
(mov (& 1) a1)
(jcall pathnamep)
(bfnil a1 104)
(mov (& 1) a3)
(mov 'errpathnotpath a2)
(mov 'merge-pathnames a1)
(jcall error)
104
(mov 'pathname a1)
(jcall new)
(hpxmov (& 0) '0 a4)
(bfnil a4 105)
(hpxmov (& 1) '0 a4)
105
(hpmovx a4 a1 '0)
(hpxmov (& 0) '1 a4)
(bfnil a4 106)
(hpxmov (& 1) '1 a4)
106
(hpmovx a4 a1 '1)
(hpxmov (& 0) '2 a4)
(bfnil a4 107)
(hpxmov (& 1) '2 a4)
107
(hpmovx a4 a1 '2)
(hpxmov (& 0) '3 a4)
(bfnil a4 108)
(hpxmov (& 1) '3 a4)
108
(hpmovx a4 a1 '3)
(hpxmov (& 0) '4 a4)
(bfnil a4 109)
(hpxmov (& 1) '4 a4)
109
(hpmovx a4 a1 '4)
(hpxmov (& 0) '5 a4)
(bfnil a4 110)
(hpxmov (& 1) '5 a4)
110
(hpmovx a4 a1 '5)
(adjstk '2)
(return)
))
(loader'((fentry combine-pathnames subr2)
(entry combine-pathnames subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'combine-pathnames a1)
(jcall error)
102
(mov (& 1) a1)
(jcall pathnamep)
(bfnil a1 104)
(mov (& 1) a3)
(mov 'errpathnotpath a2)
(mov 'combine-pathnames a1)
(jcall error)
104
(hpxmov (& 1) '2 a4)
(push a4)
(mov (& 1) a1)
(call #:pathname:c-pathname)
(push a1)
(mov (& 3) a1)
(call #:pathname:c-pathname)
(push nil)
(push nil)
(push a1)
(mov (& 4) a4)
(bfsymb (car a4) 107)
(cabne (car a4) '#:pathname:root 105)
107
(mov (& 4) (& 2))
(bra 106)
105
(hpxmov (& 3) '2 a1)
(jcall reverse)
(mov a1 (& 2))
108
(mov (& 4) a4)
(cabne (car a4) '#:pathname:up 109)
(mov (cdr a4) (& 4))
(mov (& 2) a1)
(mov (car a1) a1)
(cabne a1 '#:pathname:up 111)
(mov (& 2) a2)
(mov '#:pathname:up a1)
(jcall cons)
(mov a1 (& 2))
(bra 110)
111
(cabne a1 '#:pathname:current 112)
(mov (& 2) a2)
(mov (cdr a2) a2)
(mov '#:pathname:up a1)
(jcall cons)
(mov a1 (& 2))
(bra 110)
112
(mov (& 2) a4)
(mov (cdr a4) (& 2))
110
(bfnil (& 2) 108)
(mov (cvalq #:pathname:root-string) a1)
(jcall ncons)
(mov a1 (& 2))
(bra 108)
109
(cabne (car a4) '#:pathname:current 117)
(mov (cdr a4) (& 4))
117
(mov (& 4) a2)
(mov (& 2) a1)
(jcall nreconc)
(mov a1 (& 2))
(mov (cvalq #:pathname:root-string) a2)
(mov (car a1) a1)
(jcall equal)
(btnil a1 106)
(mov (& 2) a4)
(btnil (cdr a4) 106)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
106
(hpxmov (& 0) '0 a4)
(bfnil a4 121)
(hpxmov (& 3) '0 a4)
(hpmovx a4 (& 0) '0)
121
(hpxmov (& 0) '1 a4)
(bfnil a4 123)
(hpxmov (& 3) '1 a4)
(hpmovx a4 (& 0) '1)
123
(hpmovx (& 2) (& 0) '2)
(mov (& 0) a1)
(adjstk '7)
(return)
))
(loader'((fentry enough-namestring nsubr)
(entry enough-namestring nsubr)
(cnbge a4 '1 101)
(mov 'enough-namestring a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(bfnil a1 102)
(mov (cvalq *default-pathname-defaults*) (& 0))
(bra 103)
102
(mov (car a1) (& 0))
(mov (car a1) a1)
(jcall pathnamep)
(bfnil a1 103)
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
103
(mov 'pathname a1)
(jcall new)
(push a1)
(hpxmov (& 1) '0 a1)
(hpxmov (& 2) '0 a2)
(jcall equal)
(bfnil a1 107)
(hpxmov (& 2) '0 a4)
(hpmovx a4 (& 0) '0)
107
(hpxmov (& 1) '1 a1)
(hpxmov (& 2) '1 a2)
(jcall equal)
(bfnil a1 109)
(hpxmov (& 2) '1 a4)
(hpmovx a4 (& 0) '1)
109
(hpxmov (& 1) '2 a1)
(hpxmov (& 2) '2 a2)
(jcall equal)
(bfnil a1 111)
(hpxmov (& 2) '2 a4)
(hpmovx a4 (& 0) '2)
111
(hpxmov (& 1) '3 a1)
(hpxmov (& 2) '3 a2)
(jcall equal)
(bfnil a1 113)
(hpxmov (& 2) '3 a4)
(hpmovx a4 (& 0) '3)
113
(hpxmov (& 1) '4 a1)
(hpxmov (& 2) '4 a2)
(jcall equal)
(bfnil a1 115)
(hpxmov (& 2) '4 a4)
(hpmovx a4 (& 0) '4)
115
(hpxmov (& 1) '5 a1)
(hpxmov (& 2) '5 a2)
(jcall equal)
(bfnil a1 117)
(hpxmov (& 2) '5 a4)
(hpmovx a4 (& 0) '5)
117
(mov (& 0) a1)
(adjstk '3)
(jmp namestring)
))
(loader'((fentry true-pathname subr1)
(entry true-pathname subr1)
(push a1)
(bfstrg a1 102)
(jcall pathname)
(mov a1 (& 0))
102
(jcall pathnamep)
(bfnil a1 104)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'true-pathname a1)
(jcall error)
104
(mov (& 0) a1)
(adjstk '1)
(bra #:unix:true-pathname)
))
(loader'((entry #:unix:true-pathname subr1)
(push a1)
(mov 'pathname a1)
(jcall new)
(push nil)
(push a1)
(hpxmov (& 2) '2 a4)
(cabne (car a4) '#:pathname:current 101)
(hpxmov (& 2) '2 a4)
(mov (cdr a4) a4)
(bfstrg (car a4) 101)
(hpxmov (& 2) '2 a3)
(mov (cdr a3) a3)
(hbxmov (car a3) '0 a3)
(cabne a3 '36 101)
(push (@ 103))
(hpxmov (& 3) '2 a3)
(mov (cdr a3) a3)
(push (car a3))
(push '1)
(mov '2 a4)
(jmp substring)
103
(eval ())
(jcall getenv)
(mov a1 (& 1))
(btnil a1 101)
(jcall string)
(mov a1 (& 1))
(btnil a1 101)
(hbxmov (& 1) '0 a4)
(cabeq a4 '47 104)
(mov (& 1) a1)
(bra 105)
104
(push (@ 106))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp substring)
106
(eval ())
105
(hpxmov (& 2) '2 a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(jcall cons)
(hpmovx a1 (& 0) '2)
(bra 102)
101
(hpxmov (& 2) '2 a4)
(hpmovx a4 (& 0) '2)
102
(hpxmov (& 2) '3 a4)
(bfstrg a4 107)
(hpxmov (& 2) '3 a4)
(hbxmov a4 '0 a4)
(cabne a4 '36 107)
(push (@ 109))
(hpxmov (& 3) '3 a4)
(push a4)
(push '1)
(mov '2 a4)
(jmp substring)
109
(eval ())
(jcall getenv)
(jcall string)
(mov a1 (& 1))
(btnil a1 107)
(hpmovx (& 1) (& 0) '3)
(bra 108)
107
(hpxmov (& 2) '3 a4)
(hpmovx a4 (& 0) '3)
108
(hpxmov (& 2) '4 a4)
(hpmovx a4 (& 0) '4)
(hpxmov (& 2) '5 a4)
(hpmovx a4 (& 0) '5)
(mov (& 0) a1)
(call #:unix:namestring)
(adjstk '3)
(jmp #:unix:pathname)
))
(loader'((fentry current-directory nsubr)
(entry current-directory nsubr)
(push a4)
(cnble (& 0) '1 101)
(mov '0 a3)
(mov 'errwna a2)
(mov 'current-directory a1)
(jcall error)
(bra 102)
101
(cabne (& 0) '0 103)
(mov nil a4)
(bra 104)
103
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
104
(mov a4 a1)
(call #:unix:current-directory)
102
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:unix:current-directory subr1)
(push a1)
(bfnil a1 101)
(mov '32 a2)
(mov '1024 a1)
(jcall makestring)
(push '0)
(push a1)
(mov '1024 a2)
(call llgetwd)
(mov a1 (& 1))
(diff '1 a1)
(hbxmov (& 0) a1 a4)
(cabeq a4 '47 104)
(hbmovx '47 (& 0) (& 1))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
104
(push (@ 105))
(push (& 1))
(push '0)
(push (& 4))
(mov '3 a4)
(jmp substring)
105
(eval ())
(adjstk '3)
(return)
101
(jcall pathnamep)
(bfnil a1 108)
(bfstrg (& 0) 106)
108
(mov (& 0) a1)
(jcall stringp)
(mov a1 a4)
(bfnil a4 109)
(push (@ 110))
(mov (& 1) a1)
(jcall device-namestring)
(push a1)
(mov (& 2) a1)
(jcall directory-namestring)
(push a1)
(mov '2 a4)
(jmp catenate)
110
(eval ())
(mov a1 a4)
109
(mov a4 a1)
(adjstk '1)
(bra cchdir)
106
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'current-directory a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry directoryp subr1)
(entry directoryp subr1)
(push a1)
(jcall pathnamep)
(btnil a1 101)
(mov (& 0) a1)
(adjstk '1)
(bra #:unix:directoryp)
101
(bfstrg (& 0) 103)
(mov (& 0) a1)
(call #:unix:directoryp)
(btnil a1 105)
(adjstk '1)
(jmp namestring)
105
(mov nil a1)
(adjstk '1)
(return)
103
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'directoryp a1)
(adjstk '1)
(jmp error)
))
(loader'((entry #:unix:directoryp subr1)
(push a1)
(bfstrg a1 101)
(push (@ 105))
(push '47)
(push a1)
(push '0)
(mov '3 a4)
(jmp chrpos)
105
(eval ())
(bfnil a1 104)
(push (@ 106))
(push '"./")
(push (& 2))
(mov '2 a4)
(jmp catenate)
106
(eval ())
(mov a1 (& 0))
104
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
(bra 102)
101
(jcall pathname-directory)
(bfnil a1 102)
(mov '(#:pathname:current) a2)
(mov (& 0) a1)
(jcall set-pathname-directory)
102
(mov (& 0) a1)
(jcall namestring)
(call lldirectoryp)
(cabne a1 '0 109)
(hpxmov (& 0) '3 a4)
(bfnil a4 113)
(hpxmov (& 0) '4 a4)
(bfnil a4 113)
(hpxmov (& 0) '5 a4)
(btnil a4 111)
113
(push (@ 114))
(hpxmov (& 1) '0 a4)
(push a4)
(hpxmov (& 2) '1 a4)
(push a4)
(push (@ 115))
(hpxmov (& 4) '2 a4)
(push a4)
(push (@ 116))
(mov (& 6) a1)
(jcall file-namestring)
(push a1)
(mov '1 a4)
(jmp list)
116
(eval ())
(push a1)
(mov '2 a4)
(jmp append)
115
(eval ())
(push a1)
(push nil)
(push nil)
(push nil)
(mov '6 a4)
(jmp make-pathname)
114
(eval ())
(adjstk '1)
(return)
111
(mov (& 0) a1)
(adjstk '1)
(return)
109
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry file-in-pattern subr1)
(push a1)
(jcall file-namestring)
(mov '"" a2)
(jcall eqstring)
(btnil a1 102)
(hpxmov (& 0) '2 a4)
(push a4)
(hpxmov (& 1) '2 a1)
(jcall length)
(push a1)
(mov (& 1) a1)
(jcall last)
(hpmovx (car a1) (& 2) '3)
(mov (& 0) a1)
(jcall |1-|)
(mov a1 (& 0))
(mov (& 1) a2)
(jcall firstn)
(hpmovx a1 (& 2) '2)
(adjstk '2)
(hpxmov (& 0) '2 a4)
(bfnil a4 102)
(mov (cvalq #:pathname:root-string) a1)
(jcall ncons)
(hpmovx a1 (& 0) '2)
102
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry expand-pathname subr1)
(entry expand-pathname subr1)
(push a1)
(bfstrg a1 101)
(jcall pathname)
(mov a1 a4)
(bra 102)
101
(jcall pathnamep)
(btnil a1 103)
(mov (& 0) a1)
(jcall copy-pathname)
(mov a1 a4)
(bra 102)
103
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'expand-pathname a1)
(jcall error)
(mov a1 a4)
102
(mov a4 a1)
(adjstk '1)
(bra #:unix:wild)
))
(loader'((fentry map-expand-pathname subr2)
(entry map-expand-pathname subr2)
(push a2)
(push a1)
(bfstrg a2 101)
(mov a2 a1)
(jcall pathname)
(mov a1 a4)
(bra 102)
101
(mov a2 a1)
(jcall pathnamep)
(btnil a1 103)
(mov (& 1) a1)
(jcall copy-pathname)
(mov a1 a4)
(bra 102)
103
(mov (& 1) a3)
(mov 'errpathnotpath a2)
(mov 'map-expand-pathname a1)
(jcall error)
(mov a1 a4)
102
(mov a4 a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:unix:map-wild)
))
(loader'((entry #:unix:wild subr1)
(push a1)
(jcall directoryp)
(btnil a1 101)
(mov nil a2)
(mov (& 0) a1)
(adjstk '1)
(jmp cons)
101
(mov (& 0) a1)
(call file-in-pattern)
(mov a1 (& 0))
(jcall file-namestring)
(call #:c-wild:match-compile)
(push a1)
(mov (& 1) a1)
(call #:c-wild:expand-tree)
(push a1)
(push nil)
103
(bfcons (& 1) 104)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov nil a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:c-wild:get-entries)
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 103)
104
(mov (& 0) a1)
(adjstk '4)
(jmp nreverse)
))
(loader'((entry #:unix:map-wild subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall directoryp)
(btnil a1 101)
(mov nil a2)
(mov (& 1) a1)
(adjstk '2)
(jmp cons)
101
(mov (& 1) a1)
(call file-in-pattern)
(mov a1 (& 1))
(jcall file-namestring)
(call #:c-wild:match-compile)
(push a1)
(mov (& 2) a1)
(call #:c-wild:expand-tree)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 3) a3)
(mov (& 2) a2)
(mov (& 0) a1)
(call #:c-wild:get-entries)
(adjstk '1)
(bra 103)
104
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry lldirectoryp subr1)
(push a1)
(btstrg a1 102)
(mov a1 a3)
(mov 'errnsa a2)
(mov 'lldirectoryp a1)
(jcall error)
102
(push (@ 103))
(push (eval (kwote (#:system:cached-getglobal 'lldirectoryp))))
(push '1)
(push (& 3))
(push '3)
(mov '4 a4)
(jmp callextern)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((entry llgetwd subr2)
(push a2)
(push a1)
(btstrg a1 102)
(mov a1 a3)
(mov 'errnsa a2)
(mov 'llgetwd a1)
(jcall error)
102
(mov (& 1) a1)
(jcall numberp)
(bfnil a1 103)
(mov (& 1) a3)
(mov 'errnna a2)
(mov 'llgetwd a1)
(jcall error)
(bra 104)
103
(mov (& 1) a1)
(jcall fix)
(mov a1 (& 1))
104
(push (@ 105))
(push (eval (kwote (#:system:cached-getglobal 'llgetwd))))
(push '1)
(push (& 3))
(push '3)
(push (& 6))
(push '1)
(mov '6 a4)
(jmp callextern)
105
(eval ())
(adjstk '2)
(return)
))
(loader'((entry llopendir subr1)
(push a1)
(btstrg a1 102)
(mov a1 a3)
(mov 'errnsa a2)
(mov 'llopendir a1)
(jcall error)
102
(push (@ 103))
(push (eval (kwote (#:system:cached-getglobal 'llopendir))))
(push '0)
(push (& 3))
(push '3)
(mov '4 a4)
(jmp callextern)
103
(eval ())
(adjstk '1)
(jmp loc)
))
(loader'((entry llreaddir subr1)
(push a1)
(btfix a1 102)
(bfcons a1 103)
(bffix (car a1) 103)
(btfix (cdr a1) 102)
103
(mov a1 a3)
(mov 'errnda a2)
(mov 'llreaddir a1)
(jcall error)
102
(push (@ 104))
(push (eval (kwote (#:system:cached-getglobal 'llreaddir))))
(push '3)
(mov (& 3) a1)
(jcall vag)
(push a1)
(push '0)
(mov '4 a4)
(jmp callextern)
104
(eval ())
(adjstk '1)
(return)
))
(loader'((entry llclosedir subr1)
(push a1)
(btfix a1 102)
(bfcons a1 103)
(bffix (car a1) 103)
(btfix (cdr a1) 102)
103
(mov a1 a3)
(mov 'errnda a2)
(mov 'llclosedir a1)
(jcall error)
102
(push (@ 104))
(push (eval (kwote (#:system:cached-getglobal 'llclosedir))))
(push '1)
(mov (& 3) a1)
(jcall vag)
(push a1)
(push '0)
(mov '4 a4)
(jmp callextern)
104
(eval ())
(adjstk '1)
(return)
))
(loader'((entry cchdir subr1)
(push a1)
(btstrg a1 102)
(mov a1 a3)
(mov 'errnsa a2)
(mov 'cchdir a1)
(jcall error)
102
(push (@ 103))
(push (eval (kwote (#:system:cached-getglobal 'cchdir))))
(push '1)
(push (& 3))
(push '3)
(mov '4 a4)
(jmp callextern)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:c-wild:expand-tree subr1)
(push a1)
(jcall pathname-directory)
(push a1)
(btnil a1 101)
(mov 'pathname a1)
(jcall new)
(push a1)
(mov (& 1) a4)
(cabne (car a4) '#:pathname:current 103)
(push a1)
(push (@ 105))
(push '#:pathname:current)
(mov '1 a4)
(jmp list)
105
(eval ())
(pop a4)
(hpmovx a1 a4 '2)
(push (@ 106))
(push (& 1))
(mov '1 a4)
(jmp list)
106
(eval ())
(mov (& 1) a2)
(mov (cdr a2) a2)
(adjstk '3)
(bra #:c-wild:wild-tree)
103
(cabne (car a4) '#:pathname:up 107)
(push a1)
(push (@ 109))
(push '#:pathname:up)
(mov '1 a4)
(jmp list)
109
(eval ())
(pop a4)
(hpmovx a1 a4 '2)
(push (@ 110))
(push (& 1))
(mov '1 a4)
(jmp list)
110
(eval ())
(mov (& 1) a2)
(mov (cdr a2) a2)
(adjstk '3)
(bra #:c-wild:wild-tree)
107
(push a1)
(mov (& 3) a1)
(jcall pathname-host)
(pop a4)
(hpmovx a1 a4 '0)
(mov (& 2) a1)
(jcall pathname-device)
(hpmovx a1 (& 0) '1)
(push (@ 111))
(push '#:pathname:root)
(mov '1 a4)
(jmp list)
111
(eval ())
(hpmovx a1 (& 0) '2)
(push (@ 112))
(push (& 1))
(mov '1 a4)
(jmp list)
112
(eval ())
(push a1)
(mov (& 2) a4)
(cabeq (car a4) '#:pathname:root 115)
(mov '"" a2)
(mov (car a4) a1)
(jcall eqstring)
(btnil a1 113)
115
(mov (& 2) a2)
(mov (cdr a2) a2)
(bra 114)
113
(mov (& 2) a2)
114
(pop a1)
(adjstk '3)
(bra #:c-wild:wild-tree)
101
(push (@ 116))
(push (& 2))
(mov '1 a4)
(jmp list)
116
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:c-wild:wild-tree subr2)
(push a2)
(btnil a1 101)
(btnil a2 101)
(push a1)
(push nil)
103
(bfcons (& 1) 104)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 107))
(mov (& 1) a1)
(jcall directory-namestring)
(push a1)
(mov (& 5) a4)
(push (car a4))
(mov '2 a4)
(jmp catenate)
107
(eval ())
(jcall directoryp)
(btnil a1 105)
(hpxmov (& 0) '2 a1)
(mov (& 3) a2)
(mov (car a2) a2)
(jcall append1)
(hpmovx a1 (& 0) '2)
(push (@ 108))
(push (& 1))
(mov '1 a4)
(jmp list)
108
(eval ())
(bra 106)
105
(mov (& 3) a1)
(mov (car a1) a1)
(call #:c-wild:match-compile)
(mov a1 a2)
(mov (& 0) a1)
(call #:c-wild:get-directories)
106
(mov (& 3) a2)
(mov (cdr a2) a2)
(call #:c-wild:wild-tree)
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 103)
104
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
101
(adjstk '1)
(return)
))
(loader'((entry #:c-wild:get-directories subr2)
(push a2)
(push a1)
(jcall namestring)
(call llopendir)
(push a1)
(bffix a1 101)
(cnbne a1 '0 101)
(mov (& 1) a3)
(mov 'errpathreaddir a2)
(mov 'expand-pathname a1)
(adjstk '3)
(jmp printerror)
101
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(mov (& 4) a1)
(jcall namestring)
(push nil)
(push nil)
(push nil)
(push nil)
(push a1)
105
(mov (& 8) a1)
(call llreaddir)
(mov a1 (& 3))
(mov '"" a2)
(jcall eqstring)
(bfnil a1 106)
(push (@ 107))
(push (& 1))
(push (& 5))
(mov '2 a4)
(jmp catenate)
107
(eval ())
(mov a1 (& 2))
(jcall directoryp)
(btnil a1 105)
(mov '"." a2)
(mov (& 3) a1)
(jcall eqstring)
(bfnil a1 105)
(mov '".." a2)
(mov (& 3) a1)
(jcall eqstring)
(bfnil a1 105)
(mov '0 a3)
(mov (& 10) a2)
(mov (& 3) a1)
(call #:c-wild:match-step)
(btnil a1 105)
(mov 'pathname a1)
(jcall new)
(mov a1 (& 1))
(push a1)
(hpxmov (& 10) '0 a4)
(hpmovx a4 a1 '0)
(hpxmov (& 10) '1 a4)
(hpmovx a4 a1 '1)
(push a1)
(hpxmov (& 11) '2 a1)
(mov (& 5) a2)
(jcall append1)
(pop a4)
(hpmovx a1 a4 '2)
(pop a1)
(mov (& 4) a2)
(jcall cons)
(mov a1 (& 4))
(bra 105)
106
(mov (& 4) a1)
(jcall nreverse)
(adjstk '5)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 104) a3)
103
(push a3)
(push a2)
(mov (& 3) a1)
(call llclosedir)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
104
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:c-wild:get-entries subr3)
(push a3)
(push a2)
(push a1)
(push nil)
(push nil)
(push nil)
(hpxmov a1 '2 a4)
(btnil a4 101)
(jcall namestring)
(mov a1 (& 2))
(call llopendir)
(mov a1 (& 1))
(bra 102)
101
(mov '"" (& 2))
(mov '"." a1)
(call llopendir)
(mov a1 (& 1))
102
(bffix a1 103)
(cnbne a1 '0 103)
(mov (& 3) a3)
(mov 'errpathreaddir a2)
(mov 'expand-pathname a1)
(adjstk '6)
(jmp printerror)
103
(push (@ 105))
(mov '0 a4)
(jmp current-directory)
105
(eval ())
(mov a1 (& 0))
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push nil)
(push nil)
(push (@ 108))
(push (& 8))
(mov '1 a4)
(jmp current-directory)
108
(eval ())
109
(mov (& 6) a1)
(call llreaddir)
(mov a1 (& 0))
(mov '"" a2)
(jcall eqstring)
(bfnil a1 110)
(mov '0 a3)
(mov (& 9) a2)
(mov (& 0) a1)
(call #:c-wild:match-step)
(btnil a1 109)
(mov (& 0) a1)
(jcall probefile)
(btnil a1 109)
(btnil (& 10) 113)
(push (@ 115))
(mov '0 a4)
(jmp current-directory)
115
(eval ())
(push a1)
(push (@ 116))
(push dlink)
(push prot)
(stack dlink)
(push (@ 118))
(push (& 10))
(mov '1 a4)
(jmp current-directory)
118
(eval ())
(push (@ 119))
(push (& 15))
(push (@ 120))
(push (& 14))
(push (& 8))
(mov '2 a4)
(jmp catenate)
120
(eval ())
(jcall pathname)
(push a1)
(mov '2 a4)
(jmp funcall)
119
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 117) a3)
116
(push a3)
(push a2)
(push (@ 121))
(push (& 4))
(mov '1 a4)
(jmp current-directory)
121
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
117
(eval ())
(adjstk '1)
(bra 109)
113
(push (@ 122))
(push (& 8))
(push (& 2))
(mov '2 a4)
(jmp catenate)
122
(eval ())
(jcall pathname)
(mov (& 1) a2)
(jcall cons)
(mov a1 (& 1))
(bra 109)
110
(bfnil (& 10) 123)
(mov (& 1) a1)
(jcall nreverse)
(bra 124)
123
(mov nil a1)
124
(adjstk '2)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 125))
(push (& 4))
(mov '1 a4)
(jmp current-directory)
125
(eval ())
(mov (& 4) a1)
(call llclosedir)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(adjstk '6)
(return)
))
(loader'((entry #:c-wild:match-compile subr1)
(push a1)
(bfstrg a1 101)
(hgsize a1 a4)
(push '0)
(push '0)
(push nil)
(push a4)
103
(cnbge (& 3) (& 0) 104)
(mov (& 0) a4)
(diff (cvalq #:pathname:wild-length) a4)
(cnbgt (& 3) a4 105)
(push (@ 107))
(push (cvalq #:pathname:wild-length))
(push (cvalq #:pathname:wild-string))
(push '0)
(push (& 8))
(push (& 8))
(mov '5 a4)
(jmp substring-equal)
107
(eval ())
(btnil a1 105)
(cnbeq (& 3) (& 2) 109)
(push (@ 110))
(push (& 5))
(push (& 4))
(mov (& 6) a4)
(diff (& 5) a4)
(push a4)
(mov '3 a4)
(jmp substring)
110
(eval ())
(mov (& 1) a2)
(jcall cons)
(mov a1 (& 1))
109
(mov (& 1) a2)
(mov '#:pathname:wild a1)
(jcall cons)
(mov a1 (& 1))
(mov (& 3) a4)
(plus (cvalq #:pathname:wild-length) a4)
(mov a4 (& 3))
(mov a4 (& 2))
(bra 103)
105
(mov (& 0) a4)
(diff (cvalq #:pathname:one-char-length) a4)
(cnbgt (& 3) a4 111)
(push (@ 113))
(push (cvalq #:pathname:one-char-length))
(push (cvalq #:pathname:one-char-string))
(push '0)
(push (& 8))
(push (& 8))
(mov '5 a4)
(jmp substring-equal)
113
(eval ())
(btnil a1 111)
(cnbeq (& 3) (& 2) 115)
(push (@ 116))
(push (& 5))
(push (& 4))
(mov (& 6) a4)
(diff (& 5) a4)
(push a4)
(mov '3 a4)
(jmp substring)
116
(eval ())
(mov (& 1) a2)
(jcall cons)
(mov a1 (& 1))
115
(mov (& 1) a2)
(mov '#:pathname:one-char a1)
(jcall cons)
(mov a1 (& 1))
(mov (& 3) a4)
(plus (cvalq #:pathname:one-char-length) a4)
(mov a4 (& 3))
(mov a4 (& 2))
(bra 103)
111
(mov (& 3) a1)
(jcall |1+|)
(mov a1 (& 3))
(bra 103)
104
(cnbeq (& 3) (& 2) 118)
(push (@ 119))
(push (& 5))
(push (& 4))
(mov '2 a4)
(jmp substring)
119
(eval ())
(mov (& 1) a2)
(jcall cons)
(mov a1 (& 1))
118
(mov (& 1) a1)
(adjstk '5)
(jmp nreverse)
101
(push (@ 120))
(push a1)
(mov '1 a4)
(jmp list)
120
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:c-wild:match-step subr3)
(push a3)
(push a2)
(push a1)
(hgsize a1 a4)
(push (car a2))
(bfstrg (& 0) 101)
(hgsize (& 0) a4)
(push a4)
(hgsize a1 a2)
(diff a3 a2)
(mov a4 a1)
(jcall le)
(btnil a1 103)
(push (@ 104))
(push (& 1))
(push (& 3))
(push '0)
(push (& 6))
(push (& 9))
(mov '5 a4)
(jmp substring-equal)
104
(eval ())
(btnil a1 103)
(mov (& 3) a2)
(mov (& 4) a4)
(plus (& 0) a4)
(mov a4 a3)
(mov (cdr a2) a2)
(mov (& 2) a1)
(adjstk '5)
(bra #:c-wild:match-step)
103
(adjstk '5)
(return)
101
(bfnil (& 0) 105)
(mov a4 a2)
(mov a3 a1)
(adjstk '4)
(jmp eqn)
105
(bfsymb (& 0) 107)
(mov (& 0) a1)
(cabne a1 '#:pathname:one-char 110)
(diff a3 a4)
(mov '1 a2)
(mov a4 a1)
(jcall ge)
(btnil a1 111)
(mov (& 2) a2)
(mov (& 3) a4)
(plus '1 a4)
(mov a4 a3)
(mov (cdr a2) a2)
(mov (& 1) a1)
(adjstk '4)
(bra #:c-wild:match-step)
111
(adjstk '4)
(return)
110
(cabne a1 '#:pathname:wild 112)
(btnil (cdr a2) 114)
(mov nil a1)
(bra 115)
114
(mov 't a1)
115
(bfnil a1 113)
(mov (cdr a2) a2)
(mov (& 1) a1)
(adjstk '4)
(bra #:c-wild:match-sweep-string)
113
(adjstk '4)
(return)
112
(mov a1 a3)
(mov 'errpathmatch a2)
(mov 'expand-pathname a1)
(adjstk '4)
(jmp error)
107
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:c-wild:match-sweep-string subr3)
(push a2)
(push a1)
(push (car a2))
(push nil)
(push (@ 103))
(push (& 2))
(push a1)
(push a3)
(mov '3 a4)
(jmp index)
103
(eval ())
(mov a1 (& 0))
(btnil a1 101)
(mov (& 3) a2)
(hgsize (& 1) a4)
(plus a4 a1)
(mov a1 a3)
(mov (cdr a2) a2)
(mov (& 2) a1)
(call #:c-wild:match-step)
(bfnil a1 104)
(mov (& 0) a4)
(plus '1 a4)
(mov a4 a3)
(mov (& 3) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:c-wild:match-sweep-string)
104
(adjstk '4)
(return)
101
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry wildcard subr1)
(entry wildcard subr1)
(jmp expand-pathname)
))
(loader'((fentry coerce-namestring subr1)
(entry coerce-namestring subr1)
(push a1)
(jcall pathnamep)
(btnil a1 101)
(btnil (cvalq *portable-pathname*) 104)
(mov (& 0) a1)
(jcall portable-pathname-p)
104
(mov (& 0) a1)
(adjstk '1)
(jmp namestring)
101
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader '((end)))
