(loader '((title |vircolor.lo|)))
(defvar #:sys-package:colon 'color)
(loader'((fentry #:color:prin subr1)
(entry #:color:prin subr1)
(push a1)
(push (@ 101))
(push '35)
(mov '1 a4)
(jmp princn)
101
(eval ())
(push (@ 102))
(push '60)
(mov '1 a4)
(jmp princn)
102
(eval ())
(push (@ 103))
(mov (& 1) a1)
(jcall type-of)
(push a1)
(mov '1 a4)
(jmp prin)
103
(eval ())
(push (@ 104))
(push '32)
(mov '1 a4)
(jmp princn)
104
(eval ())
(push (@ 105))
(hpxmov (& 1) '0 a4)
(push a4)
(mov '1 a4)
(jmp prin)
105
(eval ())
(push (@ 106))
(push '32)
(mov '1 a4)
(jmp princn)
106
(eval ())
(push (@ 107))
(hpxmov (& 1) '1 a4)
(push a4)
(mov '1 a4)
(jmp prin)
107
(eval ())
(push (@ 108))
(push '32)
(mov '1 a4)
(jmp princn)
108
(eval ())
(push (@ 109))
(hpxmov (& 1) '2 a4)
(push a4)
(mov '1 a4)
(jmp prin)
109
(eval ())
(push (@ 110))
(push '32)
(mov '1 a4)
(jmp princn)
110
(eval ())
(push (@ 111))
(hpxmov (& 1) '3 a4)
(push a4)
(mov '1 a4)
(jmp prin)
111
(eval ())
(push (@ 112))
(push '32)
(mov '1 a4)
(jmp princn)
112
(eval ())
(push (@ 113))
(hpxmov (& 1) '6 a4)
(push a4)
(mov '1 a4)
(jmp prin)
113
(eval ())
(push (@ 114))
(push '62)
(mov '1 a4)
(jmp princn)
114
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry make-color subr3)
(entry make-color subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'make-color a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'make-color a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'make-color a1)
(jcall error)
106
(bfnil (cvalq #:display:current-display) 108)
(mov (cvalq #:display:current-display) a3)
(mov '#:display:no-current-display a2)
(mov 'make-color a1)
(jcall error)
108
(jcall #:color:make)
(push a1)
(hpmovx (cvalq #:display:current-display) a1 '5)
(hpmovx (& 1) a1 '1)
(hpmovx (& 2) a1 '2)
(hpmovx (& 3) a1 '3)
(push (@ 109))
(push 'make-color)
(push (cvalq #:display:current-display))
(push a1)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
109
(eval ())
(mov a1 (& 0))
(hpxmov (cvalq #:display:current-display) '17 a2)
(jcall memq)
(bfnil a1 111)
(push (cvalq #:display:current-display))
(hpxmov (cvalq #:display:current-display) '17 a1)
(mov (& 1) a2)
(jcall nconc1)
(pop a4)
(hpmovx a1 a4 '17)
111
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((fentry make-mutable-color subr3)
(entry make-mutable-color subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'make-mutable-color a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'make-mutable-color a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'make-mutable-color a1)
(jcall error)
106
(bfnil (cvalq #:display:current-display) 108)
(mov (cvalq #:display:current-display) a3)
(mov '#:display:no-current-display a2)
(mov 'make-mutable-color a1)
(jcall error)
108
(jcall #:color:make)
(push a1)
(hpmovx (cvalq #:display:current-display) a1 '5)
(hpmovx (& 1) a1 '1)
(hpmovx (& 2) a1 '2)
(hpmovx (& 3) a1 '3)
(hpmovx 't a1 '4)
(push (@ 109))
(push 'make-mutable-color)
(push (cvalq #:display:current-display))
(push a1)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
109
(eval ())
(mov a1 (& 0))
(hpxmov (cvalq #:display:current-display) '17 a2)
(jcall memq)
(bfnil a1 111)
(push (cvalq #:display:current-display))
(hpxmov (cvalq #:display:current-display) '17 a1)
(mov (& 1) a2)
(jcall nconc1)
(pop a4)
(hpmovx a1 a4 '17)
111
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((fentry make-named-color subr1)
(entry make-named-color subr1)
(push a1)
(btstrg a1 102)
(mov a1 a3)
(mov 'errnsa a2)
(mov 'make-named-color a1)
(jcall error)
102
(bfnil (cvalq #:display:current-display) 104)
(mov (cvalq #:display:current-display) a3)
(mov '#:display:no-current-display a2)
(mov 'make-named-color a1)
(jcall error)
104
(jcall #:color:make)
(push a1)
(hpmovx (cvalq #:display:current-display) a1 '5)
(hpmovx (& 1) a1 '0)
(push (@ 105))
(push 'make-named-color)
(push (cvalq #:display:current-display))
(push a1)
(push (& 5))
(mov '4 a4)
(jmp send)
105
(eval ())
(mov a1 (& 0))
(hpxmov (cvalq #:display:current-display) '17 a2)
(jcall memq)
(bfnil a1 107)
(push (cvalq #:display:current-display))
(hpxmov (cvalq #:display:current-display) '17 a1)
(mov (& 1) a2)
(jcall nconc1)
(pop a4)
(hpmovx a1 a4 '17)
107
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry kill-color subr1)
(entry kill-color subr1)
(push a1)
(mov 'color a2)
(jcall typep)
(btnil a1 103)
(hpxmov (& 0) '5 a4)
(bfnil a4 102)
103
(mov (& 0) a3)
(mov '#:display:errnotacolor a2)
(mov 'kill-color a1)
(jcall error)
102
(push (@ 104))
(push 'kill-color)
(hpxmov (& 2) '5 a4)
(push a4)
(push (& 3))
(mov '3 a4)
(jmp send)
104
(eval ())
(hpxmov (& 0) '5 a4)
(push a4)
(hpxmov (& 1) '5 a2)
(hpxmov a2 '17 a2)
(mov (& 1) a1)
(jcall delq)
(pop a4)
(hpmovx a1 a4 '17)
(hpmovx nil (& 0) '6)
(hpmovx nil (& 0) '5)
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry red-component nsubr)
(entry red-component nsubr)
(push a4)
(cnbge (& 0) '1 102)
(mov nil a3)
(mov 'errwna a2)
(mov 'red-component a1)
(jcall error)
102
(cnble (& 0) '2 104)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(mov 'errwna a2)
(mov 'red-component a1)
(jcall error)
104
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov 'color a2)
(jcall typep)
(btnil a1 107)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpxmov a4 '5 a4)
(bfnil a4 106)
107
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:errnotacolor a2)
(mov 'red-component a1)
(jcall error)
106
(cabne '1 (& 0) 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(hpxmov a1 '1 a1)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpxmov a4 '4 a4)
(bfnil a4 111)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:errnotmutable a2)
(mov 'red-component a1)
(jcall error)
111
(push (@ 112))
(push 'red-component)
(mov (& 2) a4)
(plus '2 a4)
(xspmov a4 a4)
(hpxmov a4 '5 a4)
(push a4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov '4 a4)
(jmp send)
112
(eval ())
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push a4)
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a3)
(pop a4)
(hpmovx a3 a4 '1)
(mov a3 a1)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry blue-component nsubr)
(entry blue-component nsubr)
(push a4)
(cnbge (& 0) '1 102)
(mov nil a3)
(mov 'errwna a2)
(mov 'blue-component a1)
(jcall error)
102
(cnble (& 0) '2 104)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(mov 'errwna a2)
(mov 'blue-component a1)
(jcall error)
104
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov 'color a2)
(jcall typep)
(btnil a1 107)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpxmov a4 '5 a4)
(bfnil a4 106)
107
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:errnotacolor a2)
(mov 'blue-component a1)
(jcall error)
106
(cabne '1 (& 0) 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(hpxmov a1 '3 a1)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpxmov a4 '4 a4)
(bfnil a4 111)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:errnotmutable a2)
(mov 'blue-component a1)
(jcall error)
111
(push (@ 112))
(push 'blue-component)
(mov (& 2) a4)
(plus '2 a4)
(xspmov a4 a4)
(hpxmov a4 '5 a4)
(push a4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov '4 a4)
(jmp send)
112
(eval ())
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push a4)
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a3)
(pop a4)
(hpmovx a3 a4 '3)
(mov a3 a1)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry green-component nsubr)
(entry green-component nsubr)
(push a4)
(cnbge (& 0) '1 102)
(mov nil a3)
(mov 'errwna a2)
(mov 'green-component a1)
(jcall error)
102
(cnble (& 0) '2 104)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(mov 'errwna a2)
(mov 'green-component a1)
(jcall error)
104
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov 'color a2)
(jcall typep)
(btnil a1 107)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpxmov a4 '5 a4)
(bfnil a4 106)
107
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:errnotacolor a2)
(mov 'green-component a1)
(jcall error)
106
(cabne '1 (& 0) 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(hpxmov a1 '2 a1)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpxmov a4 '4 a4)
(bfnil a4 111)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:errnotmutable a2)
(mov 'green-component a1)
(jcall error)
111
(push (@ 112))
(push 'green-component)
(mov (& 2) a4)
(plus '2 a4)
(xspmov a4 a4)
(hpxmov a4 '5 a4)
(push a4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov '4 a4)
(jmp send)
112
(eval ())
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push a4)
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a3)
(pop a4)
(hpmovx a3 a4 '2)
(mov a3 a1)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry all-colors nsubr)
(entry all-colors nsubr)
(push a4)
(bfnil (cvalq #:display:current-display) 102)
(mov (cvalq #:display:current-display) a3)
(mov '#:display:no-current-display a2)
(mov 'all-colors a1)
(jcall error)
102
(cabne (& 0) '0 103)
(mov (cvalq #:display:current-display) a4)
(bra 104)
103
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
104
(push a4)
(bfnil a4 106)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'all-colors a1)
(jcall error)
106
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 109)
(hpxmov (& 0) '6 a4)
(bfnil a4 108)
109
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'all-colors a1)
(jcall error)
108
(hpxmov (& 0) '17 a1)
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry name-to-rgb subr1)
(entry name-to-rgb subr1)
(push a1)
(btstrg a1 102)
(mov a1 a3)
(mov 'errnsa a2)
(mov 'name-to-rgb a1)
(jcall error)
102
(mov nil a2)
(mov '3 a1)
(jcall makevector)
(push (cvalq #:display:current-display))
(push a1)
(bfnil (& 1) 104)
(mov (& 1) a3)
(mov '#:display:no-current-display a2)
(mov 'name-to-rgb a1)
(jcall error)
104
(mov 'display a2)
(mov (& 1) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 1) '6 a4)
(bfnil a4 106)
107
(mov (& 1) a3)
(mov '#:display:errnotadisplay a2)
(mov 'name-to-rgb a1)
(jcall error)
106
(push (@ 109))
(push 'name-to-rgb)
(push (cvalq #:display:current-display))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
109
(eval ())
(bfnil a1 108)
(mov nil a1)
108
(adjstk '3)
(return)
))
(loader'((fentry get-rgb-values subr1)
(entry get-rgb-values subr1)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'get-rgb-values a1)
(jcall error)
102
(mov nil a2)
(mov '3 a1)
(jcall makevector)
(push (cvalq #:display:current-display))
(push a1)
(bfnil (& 1) 104)
(mov (& 1) a3)
(mov '#:display:no-current-display a2)
(mov 'get-rgb-values a1)
(jcall error)
104
(mov 'display a2)
(mov (& 1) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 1) '6 a4)
(bfnil a4 106)
107
(mov (& 1) a3)
(mov '#:display:errnotadisplay a2)
(mov 'get-rgb-values a1)
(jcall error)
106
(push (@ 109))
(push 'get-rgb-values)
(push (& 3))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
109
(eval ())
(bfnil a1 108)
(mov nil a1)
108
(adjstk '3)
(return)
))
(loader '((end)))
