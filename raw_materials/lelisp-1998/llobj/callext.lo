(loader '((title |callext.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'callext)))
(defvar #:sys-package:colon 'callext)
(add-feature 'callext)
(#:messages:put-message '#:callext:errnotyet 'french '"non imple'mente' dans le syste`me" 'defmessage)
(#:messages:put-message '#:callext:errnotyet 'english '"not implemented in this system" 'defmessage)
'#:callext:errnotyet
(#:messages:put-message '#:callext:errnotlib 'french '"Librairie inexistante" 'defmessage)
(#:messages:put-message '#:callext:errnotlib 'english '"No such librarie" 'defmessage)
'#:callext:errnotlib
(loader'((fentry #:system:cached-getglobal subr1)
(entry #:system:cached-getglobal subr1)
(push a1)
(push nil)
(bfnil (cvalq #:system:defextern-cache) 101)
(jcall string)
(jcall getglobal)
(mov a1 (& 0))
(bffix a1 103)
(cnbge a1 '0 103)
(mov a1 a2)
(mov '0 a1)
(adjstk '2)
(jmp cons)
103
(adjstk '2)
(return)
101
(mov '0 a2)
(mov '0 a1)
(jcall cons)
(mov a1 (& 0))
(mov (& 1) a1)
(jcall string)
(mov (& 0) a2)
(jcall cons)
(mov (cvalq #:system:getglobal-cache) a2)
(jcall cons)
(mov a1 (cvalq #:system:getglobal-cache))
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry loaded-shared-libs subr0)
(entry loaded-shared-libs subr0)
(bfnil (cvalq #:system:getinlibp) 102)
(jcall system)
(mov a1 a3)
(mov '#:callext:errnotyet a2)
(mov 'loaded-shared-libs a1)
(jcall error)
102
(mov 'getinlib a4)
(push (plist a4))
(push nil)
103
(btnil (& 1) 104)
(mov (& 1) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 106)
(mov (& 1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
106
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 103)
104
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry load-shared-lib subr1)
(entry load-shared-lib subr1)
(push a1)
(bfnil (cvalq #:system:getinlibp) 102)
(jcall system)
(mov a1 a3)
(mov '#:callext:errnotyet a2)
(mov 'load-shared-lib a1)
(jcall error)
102
(mov (& 0) a1)
(call map-lib)
(btnil a1 103)
(mov (& 0) a1)
(adjstk '1)
(return)
103
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry unload-shared-lib subr1)
(entry unload-shared-lib subr1)
(push a1)
(bfnil (cvalq #:system:getinlibp) 102)
(jcall system)
(mov a1 a3)
(mov '#:callext:errnotyet a2)
(mov 'unload-shared-lib a1)
(jcall error)
102
(mov (& 0) a2)
(mov nil a1)
(jcall symbol)
(push a1)
(push (@ 105))
(push '(ll_rem_shared_lib (or (getprop 'getinlib lib) 0)))
(mov '1 a4)
(jmp eval)
105
(eval ())
(cabne a1 '0 103)
(mov (& 0) a2)
(mov 'getinlib a1)
(jcall remprop)
(mov (& 1) a1)
(adjstk '2)
(return)
103
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry map-lib subr1)
(mov a1 a2)
(mov nil a1)
(jcall symbol)
(push a1)
(mov a1 a2)
(mov 'getinlib a1)
(jcall getprop)
(bfnil a1 101)
(push (@ 102))
(push '(ll_add_shared_lib (string l)))
(mov '1 a4)
(jmp eval)
102
(eval ())
(cabeq a1 '0 103)
(mov (& 0) a3)
(mov a1 a2)
(mov 'getinlib a1)
(adjstk '1)
(jmp putprop)
103
(mov nil a1)
(adjstk '1)
(return)
101
(adjstk '1)
(return)
))
(loader'((fentry getinlib subr3)
(entry getinlib subr3)
(push a3)
(push a2)
(btnil (cvalq #:system:getinlibp) 101)
(btnil (cvalq #:system:unixp) 101)
(push (@ 103))
(push a2)
(mov '1 a4)
(jmp eval)
103
(eval ())
(call map-lib)
(btnil a1 104)
(push (@ 106))
(push '(llunixgetinlib (string s) handle (string (eval l))))
(mov '1 a4)
(jmp eval)
106
(eval ())
(adjstk '2)
(return)
104
(mov (& 0) a3)
(mov '#:callext:errnotlib a2)
(mov 'defextern a1)
(adjstk '2)
(jmp error)
101
(btnil (cvalq #:system:getinlibp) 107)
(push (@ 109))
(jcall string)
(push a1)
(push (@ 110))
(push (& 3))
(mov '1 a4)
(jmp eval)
110
(eval ())
(jcall string)
(push a1)
(push (@ 111))
(push 'vector)
(push (& 6))
(push nil)
112
(bfcons (& 1) 113)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(call #:callext:conv-ll-to-extern)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 112)
113
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp apply)
111
(eval ())
(push a1)
(mov (& 5) a1)
(jcall length)
(push a1)
(mov '4 a4)
(bra llgetinlib)
109
(eval ())
(adjstk '2)
(return)
107
(jcall system)
(mov a1 a3)
(mov '#:callext:errnotyet a2)
(mov 'getinlib a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry defextern dmsubr)
(entry defextern dmsubr)
(push a1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '(fix rfix float rfloat string fstring vector fixvector floatvector external adress t))
(bfcons (car a1) 101)
(push (@ 103))
(push (car a1))
(mov '1 a4)
(jmp eval)
103
(eval ())
(mov a1 a4)
(bra 102)
101
(mov (car a1) a4)
102
(mov a4 (& 5))
(mov (& 6) a3)
(mov (cdr a3) (& 6))
(mov (& 6) a3)
(mov (car a3) (& 2))
(mov (& 2) (& 3))
(mov (cdr a3) (& 6))
(mov (& 3) a1)
(jcall listp)
(btnil a1 105)
(push (& 2))
(push '0)
106
(btnil (& 1) 107)
(mov (& 1) a1)
(mov (& 2) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 109)
(mov (& 0) a1)
(jcall |1+|)
(mov a1 (& 0))
109
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 106)
107
(mov (& 5) a1)
(jcall length)
(cabne (& 0) a1 111)
(mov nil (& 5))
111
(adjstk '2)
105
(bfcons (& 3) 113)
(push (@ 114))
(push (& 4))
(mov '1 a4)
(jmp eval)
114
(eval ())
(mov a1 (& 2))
(push '0)
(push a1)
(bfcons a1 115)
117
(btnil (& 0) 116)
(mov (& 0) a1)
(mov (& 2) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 120)
(mov (& 1) a1)
(jcall |1+|)
(mov a1 (& 1))
120
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 117)
115
(mov (& 5) a1)
(jcall length)
(cabne (& 1) a1 116)
(mov nil (& 5))
116
(adjstk '2)
113
(btnil (& 3) 124)
(mov (& 2) (& 3))
(hgsize (& 3) a4)
(cabne a4 '0 126)
(mov nil (& 3))
126
(mov (& 6) a4)
(mov (cdr a4) (& 6))
(mov (car a4) (& 2))
124
(push nil)
(push (& 3))
(mov (& 0) a1)
(jcall listp)
(btnil a1 128)
129
(btnil (& 0) 128)
(mov (& 0) a1)
(mov (& 2) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 132)
(mov 't (& 1))
132
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 129)
128
(bfnil (& 1) 134)
(mov (& 4) a1)
(jcall listp)
(btnil a1 134)
(push (@ 135))
(push (& 5))
(mov '1 a4)
(jmp eval)
135
(eval ())
(mov a1 (& 4))
134
(adjstk '2)
(mov (& 2) a1)
(jcall listp)
(bfnil a1 137)
(push (@ 138))
(push 'defextern)
(push '" ")
(push (& 8))
(mov '3 a4)
(jmp catenate)
138
(eval ())
(mov (& 2) a3)
(mov 'erroob a2)
(jcall error)
137
(mov (& 6) a4)
(mov (car a4) a4)
(bfnil a4 139)
(mov 'fix a4)
139
(mov a4 (& 1))
(mov (& 6) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(bfnil a3 140)
(mov (& 5) a3)
140
(mov a3 (& 4))
(bfcons a4 142)
(push (@ 143))
(push a4)
(mov '1 a4)
(jmp eval)
143
(eval ())
(mov a1 (& 1))
142
(bfcons (& 4) 145)
(push (@ 146))
(push (& 5))
(mov '1 a4)
(jmp eval)
146
(eval ())
(mov a1 (& 4))
145
(bfcons (& 1) 148)
(push (@ 149))
(push 'defextern)
(push '" ")
(push (& 8))
(mov '3 a4)
(jmp catenate)
149
(eval ())
(mov (& 1) a3)
(mov 'errbal a2)
(jcall error)
148
(bfcons (& 4) 151)
(push (@ 152))
(push 'defextern)
(push '" ")
(push (& 8))
(mov '3 a4)
(jmp catenate)
152
(eval ())
(mov (& 4) a3)
(mov 'errbal a2)
(jcall error)
151
(push (@ 153))
(push (& 6))
(btnil (& 5) 154)
(mov (& 4) a3)
(mov (& 5) a2)
(mov (& 6) a1)
(jcall getinlib)
(mov a1 a4)
(bra 155)
154
(mov (& 6) a1)
(jcall #:system:cached-getglobal)
(mov a1 a4)
155
(push a4)
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 10))
(mov '6 a4)
(bra #:callext:build)
153
(eval ())
(adjstk '7)
(return)
))
(loader'((fentry buildextern nsubr)
(entry buildextern nsubr)
(cnbeq a4 '4 101)
(mov 'buildextern a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 4))
(push (& 4))
(push nil)
(push (& 5))
(push (& 5))
(push (& 9))
(mov '6 a4)
(bra #:callext:build)
102
(eval ())
(adjstk '4)
(return)
))
(defvar #:system:callextern-notesttypes (when (boundp '#:system:callextern-notesttypes) #:system:callextern-notesttypes))
(loader'((entry #:callext:build nsubr)
(mov '1 a2)
(mov (& 2) a1)
(call #:callext:build-parameter-list)
(push nil)
(push nil)
(push a1)
(bfnil (cvalq #:system:callextern-notesttypes) 102)
(push (& 5))
(push a1)
103
(bfcons (& 1) 104)
(bfcons (& 0) 104)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(mov (& 0) a3)
(mov (cdr a3) (& 0))
(push (car a4))
(push (car a3))
(mov (& 1) a1)
(cabeq a1 'external 107)
(cabne a1 'adress 106)
107
(push (@ 108))
(push 'unless)
(push (@ 109))
(push 'or)
(push (@ 110))
(push 'fixp)
(push (& 6))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(push (@ 111))
(push 'and)
(push (@ 112))
(push 'consp)
(push (& 9))
(mov '2 a4)
(jmp list)
112
(eval ())
(push a1)
(push (@ 113))
(push 'fixp)
(push (@ 114))
(push 'car)
(push (& 12))
(mov '2 a4)
(jmp list)
114
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
113
(eval ())
(push a1)
(push (@ 115))
(push 'fixp)
(push (@ 116))
(push 'cdr)
(push (& 13))
(mov '2 a4)
(jmp list)
116
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
111
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
109
(eval ())
(push a1)
(push (@ 117))
(push 'error)
(push (@ 118))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
118
(eval ())
(push a1)
(push ''errnda)
(push (& 7))
(mov '4 a4)
(jmp list)
117
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
108
(eval ())
(mov (& 6) a2)
(jcall cons)
(mov a1 (& 6))
(bra 105)
106
(cabeq a1 'fix 120)
(cabne a1 'rfix 119)
120
(push (@ 121))
(push 'ifn)
(push (@ 122))
(push 'numberp)
(push (& 4))
(mov '2 a4)
(jmp list)
122
(eval ())
(push a1)
(push (@ 123))
(push 'error)
(push (@ 124))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
124
(eval ())
(push a1)
(push ''errnna)
(push (& 7))
(mov '4 a4)
(jmp list)
123
(eval ())
(push a1)
(push (@ 125))
(push 'setq)
(push (& 6))
(push (@ 126))
(push 'fix)
(push (& 9))
(mov '2 a4)
(jmp list)
126
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
125
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
121
(eval ())
(mov (& 6) a2)
(jcall cons)
(mov a1 (& 6))
(bra 105)
119
(cabeq a1 'float 128)
(cabne a1 'rfloat 127)
128
(push (@ 129))
(push 'ifn)
(push (@ 130))
(push 'numberp)
(push (& 4))
(mov '2 a4)
(jmp list)
130
(eval ())
(push a1)
(push (@ 131))
(push 'error)
(push (@ 132))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
132
(eval ())
(push a1)
(push ''errnna)
(push (& 7))
(mov '4 a4)
(jmp list)
131
(eval ())
(push a1)
(push (@ 133))
(push 'setq)
(push (& 6))
(push (@ 134))
(push 'float)
(push (& 9))
(mov '2 a4)
(jmp list)
134
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
133
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
129
(eval ())
(mov (& 6) a2)
(jcall cons)
(mov a1 (& 6))
(bra 105)
127
(cabeq a1 'string 136)
(cabne a1 'fstring 135)
136
(push (@ 137))
(push 'unless)
(push (@ 138))
(push 'stringp)
(push (& 4))
(mov '2 a4)
(jmp list)
138
(eval ())
(push a1)
(push (@ 139))
(push 'error)
(push (@ 140))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
140
(eval ())
(push a1)
(push ''errnsa)
(push (& 7))
(mov '4 a4)
(jmp list)
139
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
137
(eval ())
(mov (& 6) a2)
(jcall cons)
(mov a1 (& 6))
(bra 105)
135
(cabeq a1 'vector 142)
(cabeq a1 'fixvector 142)
(cabne a1 'floatvector 105)
142
(push (@ 143))
(push 'unless)
(push (@ 144))
(push 'vectorp)
(push (& 4))
(mov '2 a4)
(jmp list)
144
(eval ())
(push a1)
(push (@ 145))
(push 'error)
(push (@ 146))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
146
(eval ())
(push a1)
(push ''errvec)
(push (& 7))
(mov '4 a4)
(jmp list)
145
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
143
(eval ())
(mov (& 6) a2)
(jcall cons)
(mov a1 (& 6))
105
(adjstk '2)
(bra 103)
104
(adjstk '2)
(mov (& 2) a1)
(jcall nreverse)
(mov a1 (& 2))
102
(push (@ 148))
(btnil (& 7) 149)
(mov 'calllibextern a4)
(bra 150)
149
(mov 'callextern a4)
150
(push a4)
(push (@ 151))
(push 'precompile)
(mov (& 11) a1)
(jcall numberp)
(btnil a1 152)
(mov (& 11) a3)
(bra 153)
152
(mov (& 11) a1)
(jcall kwote)
(mov a1 a3)
153
(push a3)
(push nil)
(push nil)
(push (@ 154))
(push 'eval)
(push (@ 155))
(push 'kwote)
(btnil (& 17) 156)
(push (@ 158))
(push 'getinlib)
(mov (& 16) a1)
(jcall kwote)
(push a1)
(mov (& 20) a1)
(jcall kwote)
(push a1)
(mov (& 20) a1)
(jcall kwote)
(push a1)
(mov '4 a4)
(jmp list)
158
(eval ())
(mov a1 a4)
(bra 157)
156
(push (@ 159))
(push '#:system:cached-getglobal)
(mov (& 16) a1)
(jcall kwote)
(push a1)
(mov '2 a4)
(jmp list)
159
(eval ())
(mov a1 a4)
157
(push a4)
(mov '2 a4)
(jmp list)
155
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
154
(eval ())
(push a1)
(mov '5 a4)
(jmp list)
151
(eval ())
(push a1)
(mov (& 7) a1)
(call #:callext:conv-extern-to-ll)
(push a1)
(push (& 9))
(push (& 5))
(push nil)
160
(bfcons (& 2) 161)
(bfcons (& 1) 161)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(cabeq (& 1) 'external 164)
(cabne (& 1) 'adress 162)
164
(push (@ 165))
(push (@ 166))
(push 'vag)
(push (& 3))
(mov '2 a4)
(jmp list)
166
(eval ())
(push a1)
(mov (& 3) a1)
(call #:callext:conv-ll-to-extern)
(push a1)
(mov '2 a4)
(jmp list)
165
(eval ())
(bra 163)
162
(push (@ 167))
(push (& 1))
(mov (& 3) a1)
(call #:callext:conv-ll-to-extern)
(push a1)
(mov '2 a4)
(jmp list)
167
(eval ())
163
(adjstk '2)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 160)
161
(mov (& 0) a1)
(jcall nreverse)
(adjstk '3)
(push a1)
(mov '4 a4)
(jmp mcons)
148
(eval ())
(mov a1 (& 1))
(cabeq (& 4) 'external 170)
(cabne (& 4) 'adress 169)
170
(push (@ 171))
(push 'loc)
(push a1)
(mov '2 a4)
(jmp list)
171
(eval ())
(mov a1 (& 1))
169
(mov (& 7) a1)
(jcall numberp)
(btnil a1 172)
(mov (& 7) a1)
(jcall zerop)
(btnil a1 172)
(mov (& 8) a3)
(mov 'errudf a2)
(mov 'defextern a1)
(adjstk '9)
(jmp error)
172
(push (@ 174))
(push 'defun)
(push (& 10))
(push (& 3))
(mov (& 5) a2)
(mov (& 6) a1)
(jcall append1)
(push a1)
(mov '4 a4)
(jmp mcons)
174
(eval ())
(adjstk '9)
(return)
))
(loader'((entry #:callext:build-parameter-list subr2)
(push a2)
(push a1)
(btnil a1 101)
(push (@ 103))
(push '"arg")
(push a2)
(mov '2 a4)
(jmp concat)
103
(eval ())
(mov a1 a2)
(mov '#:callext:callext a1)
(jcall symbol)
(push a1)
(mov (& 1) a1)
(mov (& 2) a4)
(plus '1 a4)
(mov a4 a2)
(mov (cdr a1) a1)
(call #:callext:build-parameter-list)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp cons)
101
(mov nil a1)
(adjstk '2)
(return)
))
(defvar InvokeIndirectFunction (getglobal 'InvokeIndirectFunction))
(loader'((fentry calllibextern dmsubr)
(entry calllibextern dmsubr)
(btnil (cvalq #:system:getinlibp) 101)
(mov (cdr a1) a4)
(mov (cdr a1) a3)
(push (car a1))
(push (car a4))
(push (cdr a3))
(jcall system)
(cabeq a1 'nt386 105)
(cabeq a1 'win32 105)
(cabeq a1 'win64 105)
(cabne a1 'win95 104)
105
(push (@ 106))
(push 'callextern)
(push (& 4))
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp mcons)
106
(eval ())
(adjstk '3)
(return)
104
(cabeq a1 'msdos 108)
(cabne a1 'rs6000 107)
108
(push (@ 109))
(push 'callextern)
(push 'InvokeIndirectFunction)
(push (& 4))
(push (@ 110))
(push 'vag)
(push (& 8))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(push '0)
(push (& 6))
(mov '6 a4)
(jmp mcons)
109
(eval ())
(adjstk '3)
(return)
107
(push (@ 112))
(push 'callextern)
(push (& 4))
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp mcons)
112
(eval ())
(adjstk '3)
(return)
101
(jcall system)
(mov a1 a3)
(mov '#:callext:errnotyet a2)
(mov 'calllibextern a1)
(jmp error)
))
(loader'((entry #:callext:conv-ll-to-extern subr1)
(cabeq a1 'external 103)
(cabne a1 'adress 102)
103
(mov '0 a1)
(return)
102
(cabne a1 'fix 104)
(mov '1 a1)
(return)
104
(cabne a1 'float 105)
(mov '2 a1)
(return)
105
(cabne a1 'string 106)
(mov '3 a1)
(return)
106
(cabne a1 'fstring 107)
(jcall system)
(mov a1 a4)
(cabeq a4 'vaxvms 110)
(cabne a4 'alphavms 108)
110
(mov '9 a1)
(return)
108
(mov '3 a1)
(return)
107
(cabne a1 'vector 111)
(mov '4 a1)
(return)
111
(cabne a1 'rfix 112)
(mov '5 a1)
(return)
112
(cabne a1 'rfloat 113)
(mov '6 a1)
(return)
113
(cabne a1 'fixvector 114)
(mov '7 a1)
(return)
114
(cabne a1 'floatvector 115)
(cabne '0. '0. 116)
(mov '8 a1)
(return)
116
(mov '"floatvector (64BITFLOATS)" a3)
(mov 'errgen a2)
(mov 'defextern a1)
(jmp error)
115
(cabne a1 't 118)
119
(mov '0 a1)
(return)
118
(mov a1 a3)
(mov 'erroob a2)
(mov 'defextern a1)
(jmp error)
))
(loader'((entry #:callext:conv-extern-to-ll subr1)
(cabeq a1 'external 103)
(cabne a1 'adress 102)
103
(mov '0 a1)
(return)
102
(cabne a1 'fix 104)
(mov '1 a1)
(return)
104
(cabne a1 'float 105)
(mov '2 a1)
(return)
105
(cabne a1 'string 106)
(mov '3 a1)
(return)
106
(cabne a1 't 107)
108
(mov '0 a1)
(return)
107
(mov a1 a3)
(mov 'errgen a2)
(mov 'defextern a1)
(jmp error)
))
(defvar #:system:defextern-cache (when (boundp '#:system:defextern-cache) #:system:defextern-cache))
(defvar #:system:getglobal-cache (when (boundp '#:system:getglobal-cache) #:system:getglobal-cache))
(loader'((fentry defextern-cache nsubr)
(entry defextern-cache nsubr)
(push a4)
(mov (& 0) a1)
(cabne a1 '0 102)
(mov (cvalq #:system:defextern-cache) a1)
(bra 101)
102
(cabne a1 '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bfnil a4 104)
(btnil (cvalq #:system:defextern-cache) 104)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(call getglobal-flush-cache)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(mov nil (cvalq #:system:defextern-cache))
(pop a1)
(bri a3)
107
(eval ())
(bra 101)
104
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(mov a4 (cvalq #:system:defextern-cache))
(mov a4 a1)
(bra 101)
103
(mov '1 a3)
(mov 'errwna a2)
(mov 'defextern-cache a1)
(jcall error)
101
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry getglobal-flush-cache subr0)
(btnil (cvalq #:system:getglobal-cache) 101)
(bra 103)
(fentry #:getglobal-flush-cache:g102 subr2)
(entry #:getglobal-flush-cache:g102 subr2)
(mov (car a2) a2)
(mov (car a1) a1)
(jmp alphalessp)
103
(mov (cvalq #:system:getglobal-cache) a2)
(mov '#:getglobal-flush-cache:g102 a1)
(jcall sort)
(mov a1 (cvalq #:system:getglobal-cache))
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push a1)
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(mov (car a1) a1)
(jcall string)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 106)
107
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push nil)
(push a1)
(mov nil a2)
(call llmgetglo)
(mov (& 0) a2)
(mov (cvalq #:system:getglobal-cache) a1)
(call #:callext:flush-cache)
(mov a1 (& 1))
(btnil a1 108)
(mov '((lambda (x y) (alphalessp (car x) (car y)))) a1)
(jcall function)
(push a1)
(push (cvalq #:system:getglobal-cache))
(push nil)
110
(bfcons (& 1) 111)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(mov (& 5) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 112)
(push (@ 114))
(push (& 1))
(mov '1 a4)
(jmp list)
114
(eval ())
(bra 113)
112
(mov nil a1)
113
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 110)
111
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(pop a1)
(jcall sort)
(push a1)
(push a1)
(push nil)
115
(bfcons (& 1) 116)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(mov (car a1) a1)
(jcall string)
(hbxmov a1 '0 a4)
(cabne a4 '95 118)
(push (@ 119))
(push a1)
(push '1)
(mov '2 a4)
(jmp substring)
119
(eval ())
118
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 115)
116
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push nil)
(mov nil a2)
(call llmgetglo)
(mov (& 1) a2)
(mov (& 2) a1)
(call #:callext:flush-cache)
(mov a1 (& 0))
(btnil a1 120)
(push a1)
122
(bfcons (& 0) 123)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov nil a1)
(jcall symbol)
(jcall remfn)
(adjstk '1)
(bra 122)
123
(adjstk '1)
(mov (& 0) a3)
(mov 'errudf a2)
(mov 'defextern a1)
(jcall error)
(bra 121)
120
(mov nil a1)
121
(adjstk '3)
(bra 109)
108
(mov nil a1)
109
(adjstk '2)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(mov nil (cvalq #:system:getglobal-cache))
(pop a1)
(bri a3)
105
(eval ())
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:callext:flush-cache subr2)
(push nil)
(push a2)
(push a1)
101
(bfcons (& 0) 102)
(bfcons (& 1) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(cabne '0 (& 0) 103)
(mov (& 1) a1)
(mov (& 4) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 4))
(bra 104)
103
(mov (& 0) a1)
(jcall loc)
(mov a1 (& 0))
(mov (& 1) a1)
(bffix (& 0) 105)
(mov '0 a2)
(bra 106)
105
(mov (& 0) a2)
(mov (car a2) a2)
106
(bffix (& 0) 107)
(mov (& 0) a3)
(bra 108)
107
(mov (& 0) a3)
(mov (cdr a3) a3)
108
(mov (cdr a1) a1)
(jcall rplac)
104
(adjstk '2)
(bra 101)
102
(adjstk '2)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(defvar #:system:recloadp ())
(loader'((fentry cload subr1)
(entry cload subr1)
(btnil (cvalq #:system:cloadp) 101)
(btnil (cvalq #:system:recloadp) 103)
(push (@ 105))
(push (@ 106))
(push '(llcload (string s) 1 (#:system:ccode) (#:system:ecode)))
(mov '1 a4)
(jmp eval)
106
(eval ())
(push a1)
(mov '1 a4)
(jmp #:system:ccode)
105
(eval ())
(return)
103
(push (@ 107))
(push (@ 108))
(push '(llcload (string s) 0 (#:system:ccode) (#:system:ecode)))
(mov '1 a4)
(jmp eval)
108
(eval ())
(push a1)
(mov '1 a4)
(jmp #:system:ccode)
107
(eval ())
(return)
101
(jcall system)
(mov a1 a3)
(mov '#:callext:errnotyet a2)
(mov 'cload a1)
(jmp error)
))
(loader'((entry llmgetglo subr2)
(push (@ 101))
(push (eval (kwote (#:system:cached-getglobal 'llmgetglo))))
(push '1)
(push a1)
(push '0)
(push a2)
(push '0)
(mov '6 a4)
(jmp callextern)
101
(eval ())
(return)
))
(loader'((entry llgetinlib nsubr)
(btstrg (& 3) 102)
(mov (& 3) a3)
(mov 'errnsa a2)
(mov 'llgetinlib a1)
(jcall error)
102
(btstrg (& 2) 104)
(mov (& 2) a3)
(mov 'errnsa a2)
(mov 'llgetinlib a1)
(jcall error)
104
(btvect (& 1) 106)
(mov (& 1) a3)
(mov 'errvec a2)
(mov 'llgetinlib a1)
(jcall error)
106
(mov (& 0) a1)
(jcall numberp)
(bfnil a1 107)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'llgetinlib a1)
(jcall error)
(bra 108)
107
(mov (& 0) a1)
(jcall fix)
(mov a1 (& 0))
108
(push (@ 109))
(push (eval (kwote (#:system:cached-getglobal 'llgetinlib))))
(push '0)
(push (& 6))
(push '3)
(push (& 7))
(push '3)
(push (& 8))
(push '4)
(push (& 9))
(push '1)
(mov '10 a4)
(jmp callextern)
109
(eval ())
(adjstk '4)
(jmp loc)
))
(loader '((end)))
