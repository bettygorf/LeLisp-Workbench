(loader '((title |x11event.lo|)))
(defvar #:sys-package:colon '#:display:x11)
(loader'((fentry #:display:x11:event-mode subr2)
(entry #:display:x11:event-mode subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:flush-event subr1)
(entry #:display:x11:flush-event subr1)
(push a1)
(hpmovx nil a1 '29)
(hpxmov a1 '21 a1)
(jcall x11_flush_event)
(hpmovx nil (& 0) '28)
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:eventp subr1)
(entry #:display:x11:eventp subr1)
(push a1)
(hpxmov a1 '29 a1)
(bfnil a1 101)
(hpxmov (& 0) '21 a1)
(jcall x11_eventp)
(bfnil a1 101)
(hpxmov (& 0) '28 a1)
101
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:read-event subr2)
(entry #:display:x11:read-event subr2)
(push a2)
(push a1)
(hpxmov a1 '29 a4)
(btnil a4 101)
(hpxmov a1 '29 a4)
(push (car a4))
(hpxmov a1 '29 a4)
(hpmovx (cdr a4) a1 '29)
(push (@ 103))
(push a2)
(push '0)
(push (& 3))
(push '0)
(mov '4 a4)
(jmp bltvector)
103
(eval ())
(adjstk '1)
(bra 102)
101
(push (@ 104))
(push a2)
(push '0)
(push nil)
(mov '3 a4)
(jmp fillvector)
104
(eval ())
(hpxmov (& 0) '21 a1)
(mov (& 1) a2)
(jcall x11_read_event)
(mov 't a3)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall #:display:x11:parse-event)
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:x11:peek-event subr2)
(entry #:display:x11:peek-event subr2)
(push a2)
(push a1)
(hpxmov a1 '29 a4)
(btnil a4 101)
(push (@ 103))
(push a2)
(push '0)
(hpxmov a1 '29 a4)
(push (car a4))
(push '0)
(mov '4 a4)
(jmp bltvector)
103
(eval ())
(bra 102)
101
(push (@ 104))
(push a2)
(push '0)
(push nil)
(mov '3 a4)
(jmp fillvector)
104
(eval ())
(hpxmov (& 0) '21 a1)
(mov (& 1) a2)
(jcall x11_peek_event)
(mov 't a3)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall #:display:x11:parse-event)
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:x11:read-mouse subr2)
(entry #:display:x11:read-mouse subr2)
(push a2)
(push a1)
(push (@ 101))
(push a2)
(push '0)
(push nil)
(mov '3 a4)
(jmp fillvector)
101
(eval ())
(hpxmov (& 0) '21 a1)
(mov (& 1) a2)
(adjstk '2)
(jmp x11_read_mouse)
))
(loader'((fentry #:display:x11:add-event subr2)
(entry #:display:x11:add-event subr2)
(push a2)
(push a1)
(jcall #:event:make)
(push a1)
(push (@ 101))
(push a1)
(push '0)
(push (& 5))
(push '0)
(mov '4 a4)
(jmp bltvector)
101
(eval ())
(hpxmov (& 1) '29 a1)
(mov (& 0) a2)
(jcall nconc1)
(hpmovx a1 (& 1) '29)
(adjstk '3)
(return)
))
(loader'((fentry #:display:x11:grab-event subr2)
(entry #:display:x11:grab-event subr2)
(hpxmov a1 '35 a4)
(hpxmov a2 '11 a3)
(hpxmov a4 a3 a4)
(hpxmov a1 '21 a1)
(hpxmov a2 '8 a2)
(hpxmov a2 '0 a2)
(mov a4 a3)
(jmp x11_grab_event)
))
(loader'((fentry #:display:x11:ungrab-event subr1)
(entry #:display:x11:ungrab-event subr1)
(hpxmov a1 '21 a1)
(jmp x11_ungrab_event)
))
(loader'((fentry #:display:x11:itsoft-event subr1)
(entry #:display:x11:itsoft-event subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:default-event-code subr2)
(entry #:display:x11:default-event-code subr2)
(hpmovx 'no-event a2 '0)
(mov 'no-event a1)
(return)
))
(loader'((fentry #:display:x11:ascii-event-code subr2)
(entry #:display:x11:ascii-event-code subr2)
(hpxmov a1 '7 a4)
(btnil a4 102)
(hpxmov a1 '7 a4)
(hpmovx a4 a2 '1)
102
(hpxmov a1 '56 a4)
(btnil a4 103)
(mov 'ascii-event a4)
(bra 104)
103
(mov 'no-event a4)
104
(hpmovx a4 a2 '0)
(mov a4 a1)
(return)
))
(loader'((fentry #:display:x11:functionkey-event-code subr2)
(entry #:display:x11:functionkey-event-code subr2)
(push a2)
(push a1)
(hpxmov a1 '7 a4)
(btnil a4 102)
(hpxmov a1 '7 a4)
(hpmovx a4 a2 '1)
102
(push a2)
(hpxmov a2 '2 a1)
(hpxmov (& 1) '32 a2)
(jcall cassq)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 0) '55 a4)
(btnil a4 103)
(mov 'functionkey-event a4)
(bra 104)
103
(mov 'no-event a4)
104
(hpmovx a4 (& 1) '0)
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:x11:down-event-code subr2)
(entry #:display:x11:down-event-code subr2)
(hpmovx 'down-event a2 '0)
(mov 'down-event a1)
(return)
))
(loader'((fentry #:display:x11:up-event-code subr2)
(entry #:display:x11:up-event-code subr2)
(hpmovx 'up-event a2 '0)
(mov 'up-event a1)
(return)
))
(loader'((fentry #:display:x11:enterwindow-event-code subr2)
(entry #:display:x11:enterwindow-event-code subr2)
(hpmovx 'enterwindow-event a2 '0)
(mov 'enterwindow-event a1)
(return)
))
(loader'((fentry #:display:x11:leavewindow-event-code subr2)
(entry #:display:x11:leavewindow-event-code subr2)
(hpmovx 'leavewindow-event a2 '0)
(mov 'leavewindow-event a1)
(return)
))
(loader'((fentry #:display:x11:movedrag-event-code subr2)
(entry #:display:x11:movedrag-event-code subr2)
(hpxmov a2 '2 a4)
(btnil a4 101)
(hpxmov a1 '53 a4)
(btnil a4 103)
(mov 'drag-event a4)
(bra 102)
103
(mov 'no-event a4)
(bra 102)
101
(hpxmov a1 '54 a4)
(btnil a4 105)
(mov 'move-event a4)
(bra 102)
105
(mov 'no-event a4)
102
(hpmovx a4 a2 '0)
(mov a4 a1)
(return)
))
(loader'((fentry #:display:x11:keyboard-focus-event-code subr2)
(entry #:display:x11:keyboard-focus-event-code subr2)
(hpxmov a2 '0 a4)
(cabne '9 a4 101)
(mov 't a4)
(bra 102)
101
(mov nil a4)
102
(hpmovx a4 a2 '2)
(hpmovx 'keyboard-focus-event a2 '0)
(mov 'keyboard-focus-event a1)
(return)
))
(loader'((fentry #:display:x11:repaint-window-event-code subr2)
(entry #:display:x11:repaint-window-event-code subr2)
(hpmovx 'repaint-window-event a2 '0)
(mov 'repaint-window-event a1)
(return)
))
(loader'((fentry #:display:x11:kill-window-event-code subr2)
(entry #:display:x11:kill-window-event-code subr2)
(hpmovx 'kill-window-event a2 '0)
(mov 'kill-window-event a1)
(return)
))
(loader'((fentry #:display:x11:modify-window-event-code subr2)
(entry #:display:x11:modify-window-event-code subr2)
(hpxmov a2 '2 a4)
(hpxmov a2 '1 a3)
(push a3)
(push a4)
(btnil a3 102)
(hpxmov a3 '9 a4)
(bfnil a4 102)
(bffix (& 0) 102)
(cabne (& 0) '0 102)
(hpxmov a2 '3 a4)
(hpmovx a4 a2 '5)
(hpxmov a2 '4 a4)
(hpmovx a4 a2 '6)
102
(btnil a3 105)
(hpxmov a2 '5 a4)
(btnil a4 106)
(hpxmov a3 '0 a4)
(hpxmov a2 '5 a3)
(cabne a4 a3 103)
106
(hpxmov a2 '6 a4)
(btnil a4 107)
(hpxmov (& 1) '1 a4)
(hpxmov a2 '6 a3)
(cabne a4 a3 103)
107
(hpxmov a2 '7 a4)
(btnil a4 108)
(hpxmov (& 1) '2 a4)
(hpxmov a2 '7 a3)
(cabne a4 a3 103)
108
(hpxmov a2 '8 a4)
(btnil a4 105)
(hpxmov (& 1) '3 a4)
(hpxmov a2 '8 a3)
(cabne a4 a3 103)
105
(mov 'no-event a4)
(bra 104)
103
(mov 'modify-window-event a4)
104
(hpmovx a4 a2 '0)
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:x11:unmap-window-code subr2)
(entry #:display:x11:unmap-window-code subr2)
(hpmovx 'no-event a2 '0)
(hpxmov a2 '1 a4)
(btnil a4 101)
(hpxmov a2 '1 a4)
(hpmovx 'unmap a4 '17)
(hpxmov a1 '57 a4)
(btnil a4 103)
(hpmovx 'unmap-window a2 '0)
(mov 'unmap-window a1)
(return)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:map-window-code subr2)
(entry #:display:x11:map-window-code subr2)
(hpmovx 'no-event a2 '0)
(hpxmov a2 '1 a4)
(btnil a4 101)
(hpxmov a2 '1 a4)
(hpmovx 'map a4 '17)
(hpxmov a1 '58 a4)
(btnil a4 103)
(hpmovx 'map-window a2 '0)
(mov 'map-window a1)
(return)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:client-message-code subr2)
(entry #:display:x11:client-message-code subr2)
(push a2)
(hpmovx 'no-event a2 '0)
(hpxmov a2 '1 a4)
(btnil a4 101)
(hpxmov a1 '59 a4)
(btnil a4 103)
(hpmovx 'client-message a2 '0)
(jcall x11_get_format)
(cabne a1 '8 105)
(jcall x11_get_data_string)
(hpmovx a1 (& 0) '2)
(adjstk '1)
(return)
105
(mov nil a1)
(adjstk '1)
(return)
103
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:visibility-change-code subr2)
(entry #:display:x11:visibility-change-code subr2)
(hpmovx 'no-event a2 '0)
(hpxmov a2 '1 a4)
(btnil a4 101)
(hpxmov a1 '60 a4)
(btnil a4 103)
(hpmovx 'visibility-change a2 '0)
(mov 'visibility-change a1)
(return)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:reparent-notify-code subr2)
(entry #:display:x11:reparent-notify-code subr2)
(hpmovx 'no-event a2 '0)
(hpxmov a2 '1 a4)
(btnil a4 101)
(hpxmov a1 '61 a4)
(btnil a4 103)
(hpmovx 'reparent-notify a2 '0)
(mov 'reparent-notify a1)
(return)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:parse-event subr3)
(entry #:display:x11:parse-event subr3)
(hpxmov a2 '0 a4)
(bffix a4 101)
(hpxmov a1 '62 a4)
(hpxmov a2 '0 a3)
(hpxmov a4 a3 a4)
(push (@ 103))
(push a4)
(push a1)
(push a2)
(mov '3 a4)
(jmp funcall)
103
(eval ())
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:compute-event-mask subr1)
(entry #:display:x11:compute-event-mask subr1)
(push a1)
(push '0)
(jcall length)
(push a1)
(mov '0 a2)
(jcall makevector)
(push a1)
(push (& 3))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(cabeq a1 'ascii-event 105)
(cabne a1 'functionkey-event 104)
105
(hpmovx '0 (& 2) (& 4))
(bra 103)
104
(cabne a1 'down-event 106)
(hpmovx '2 (& 2) (& 4))
(bra 103)
106
(cabne a1 'up-event 107)
(hpmovx '3 (& 2) (& 4))
(bra 103)
107
(cabne a1 'enterwindow-event 108)
(hpmovx '4 (& 2) (& 4))
(bra 103)
108
(cabne a1 'leavewindow-event 109)
(hpmovx '5 (& 2) (& 4))
(bra 103)
109
(cabne a1 'drag-event 110)
(hpmovx '13 (& 2) (& 4))
(bra 103)
110
(cabne a1 'move-event 111)
(hpmovx '6 (& 2) (& 4))
(bra 103)
111
(cabne a1 'repaint-event 112)
(hpmovx '15 (& 2) (& 4))
(bra 103)
112
(cabne a1 'modify-window-event 113)
(hpmovx '17 (& 2) (& 4))
(bra 103)
113
(cabne a1 'visibility-change 114)
(hpmovx '16 (& 2) (& 4))
(bra 103)
114
(cabne a1 'map-window 115)
(hpmovx '17 (& 2) (& 4))
(bra 103)
115
(cabne a1 'unmap-window 116)
(hpmovx '17 (& 2) (& 4))
(bra 103)
116
(cabne a1 'reparent-notify 117)
(hpmovx '17 (& 2) (& 4))
(bra 103)
117
(cabne a1 'client-message 118)
(bra 103)
118
(cabne a1 'keyboard-focus-event 119)
(hpmovx '21 (& 2) (& 4))
(bra 103)
119
(mov a1 a3)
(mov '"Not a valid X11 event" a2)
(mov '#:display:x11:compute-event-mask a1)
(jcall printerror)
103
(mov (& 4) a4)
(plus '1 a4)
(mov a4 (& 4))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '4)
(jmp x11_build_mask)
))
(loader'((fentry #:display:x11:allow-event subr2)
(entry #:display:x11:allow-event subr2)
(push a2)
(push a1)
(mov a2 a1)
(cabne a1 'ascii-event 102)
(hpmovx 't (& 0) '56)
(bra 101)
102
(cabne a1 'functionkey-event 103)
(hpmovx 't (& 0) '55)
(bra 101)
103
(cabne a1 'move-event 104)
(hpmovx 't (& 0) '54)
(hpmovx 't (& 0) '53)
(bra 101)
104
(cabne a1 'drag-event 105)
(hpmovx 't (& 0) '53)
(bra 101)
105
(cabne a1 'client-message 101)
(hpmovx 't (& 0) '59)
101
(hpxmov (& 0) '31 a4)
(push a4)
(mov a4 a2)
(jcall memq)
(bfnil a1 109)
(push (& 2))
(push (@ 110))
(push (& 2))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
110
(eval ())
(adjstk '1)
(mov a1 (& 0))
(mov a1 (& 0))
109
(mov (& 0) a2)
(mov 'move-event a1)
(jcall memq)
(btnil a1 112)
(mov (& 0) a2)
(mov 'drag-event a1)
(jcall memq)
(bfnil a1 112)
(push 'drag-event)
(push (@ 113))
(push (& 2))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
113
(eval ())
(adjstk '1)
(mov a1 (& 0))
(mov a1 (& 0))
112
(hpmovx (& 0) (& 1) '31)
(push (@ 114))
(push (& 1))
(push '(repaint-event modify-window-event))
(mov '2 a4)
(jmp append)
114
(eval ())
(hpmovx a1 (& 1) '39)
(mov 'repaint-event a2)
(mov (& 0) a1)
(jcall append1)
(hpmovx a1 (& 1) '40)
(hpmovx (& 0) (& 1) '41)
(hpxmov (& 1) '39 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 1) '42)
(hpxmov (& 1) '40 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 1) '43)
(hpxmov (& 1) '41 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 1) '44)
(adjstk '3)
(return)
))
(loader'((fentry #:display:x11:disallow-event subr2)
(entry #:display:x11:disallow-event subr2)
(push a2)
(push a1)
(mov a2 a1)
(cabne a1 'ascii-event 102)
(hpmovx nil (& 0) '56)
(bra 101)
102
(cabne a1 'functionkey-event 103)
(hpmovx nil (& 0) '55)
(bra 101)
103
(cabne a1 'move-event 104)
(hpmovx nil (& 0) '54)
(bra 101)
104
(cabne a1 'drag-event 105)
(hpmovx nil (& 0) '53)
(bra 101)
105
(cabne a1 'client-message 101)
(hpmovx nil (& 0) '59)
101
(hpxmov (& 0) '39 a2)
(jcall delq)
(hpmovx a1 (& 0) '39)
(hpxmov (& 0) '40 a2)
(mov (& 1) a1)
(jcall delq)
(hpmovx a1 (& 0) '40)
(hpxmov (& 0) '41 a2)
(mov (& 1) a1)
(jcall delq)
(hpmovx a1 (& 0) '41)
(hpxmov (& 0) '39 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 0) '42)
(hpxmov (& 0) '40 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 0) '43)
(hpxmov (& 0) '41 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 0) '44)
(adjstk '2)
(return)
))
(loader'((fentry #:display:x11:allowed-event-p subr2)
(entry #:display:x11:allowed-event-p subr2)
(push a2)
(hpxmov a1 '31 a2)
(pop a1)
(jmp memq)
))
(loader '((end)))
