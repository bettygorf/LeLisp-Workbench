(loader '((title |make.lo|)))
(setq #:sys-package:colon 'rtproject)
(defvar #:rtproject:makefile:rmargin (if (boundp '#:rtproject:makefile:rmargin) #:rtproject:makefile:rmargin 60))
(defvar #:rtproject:complice-command (if (boundp '#:rtproject:complice-command) #:rtproject:complice-command "$(LLDIR)$(SYSTEM)/complice"))
(defvar #:rtproject:verbose-makefile (if (boundp '#:rtproject:verbose-makefile) #:rtproject:verbose-makefile (gt #:crunch:verbose 0)))
(defvar #:rtproject:extension ())
(loader'((fentry #:rtproject:build-make subr2)
(entry #:rtproject:build-make subr2)
(push a2)
(mov a1 a4)
(bfnil a4 101)
(hpxmov a2 '14 a4)
101
(push a4)
(push (@ 102))
(hpxmov a2 '0 a3)
(push a3)
(push '".pth")
(mov '2 a4)
(jmp catenate)
102
(eval ())
(push a1)
(mov '0 a2)
(mov (cvalq #:crunch:verbose) a1)
(jcall gt)
(push (cvalq #:rtproject:verbose-makefile))
(mov a1 (cvalq #:rtproject:verbose-makefile))
(push '1)
(push '(#:rtproject:verbose-makefile))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 8) a1)
(jcall #:crunch:save-file)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp rmargin)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(mov (& 14) a1)
(jcall openo)
(push a1)
(mov '1 a4)
(jmp outchan)
107
(eval ())
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push dlink)
(push prot)
(stack dlink)
(mov (& 17) a1)
(call #:rtproject:print-modules-makefile)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 111) a3)
110
(push a3)
(push a2)
(push (@ 112))
(push (@ 113))
(mov '0 a4)
(jmp outchan)
113
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
111
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 114))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
114
(eval ())
(push (@ 115))
(push (& 5))
(mov '1 a4)
(jmp outchan)
115
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '2)
(mov (& 7) a1)
(jcall #:crunch:save-file)
(push (@ 116))
(mov '0 a4)
(jmp outchan)
116
(eval ())
(push a1)
(push (@ 117))
(mov '0 a4)
(jmp rmargin)
117
(eval ())
(push a1)
(push (@ 118))
(push dlink)
(push prot)
(stack dlink)
(push (@ 120))
(mov (& 13) a1)
(jcall openo)
(push a1)
(mov '1 a4)
(jmp outchan)
120
(eval ())
(push (@ 121))
(push (@ 122))
(mov '0 a4)
(jmp outbuf)
122
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
121
(eval ())
(push (@ 123))
(push dlink)
(push prot)
(stack dlink)
(push (@ 125))
(push '"(setq #:system:path (append #:system:path '(")
(mov '1 a4)
(jmp print)
125
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 124) a3)
123
(push a3)
(push a2)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 25) a1)
(jcall list-complice-directories)
(push a1)
126
(bfcons (& 0) 127)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 128))
(mov (& 1) a1)
(jcall namestring)
(push a1)
(mov '1 a4)
(jmp print)
128
(eval ())
(adjstk '1)
(bra 126)
127
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(push (@ 129))
(push '")))")
(mov '1 a4)
(jmp print)
129
(eval ())
(push (@ 130))
(push (@ 131))
(mov '0 a4)
(jmp outchan)
131
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
130
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
124
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 119) a3)
118
(push a3)
(push a2)
(push (@ 132))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
132
(eval ())
(push (@ 133))
(push (& 5))
(mov '1 a4)
(jmp outchan)
133
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
119
(eval ())
(adjstk '2)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:rtproject:verbose-makefile))
(adjstk '10)
(return)
))
(loader'((entry #:rtproject:print-modules-makefile subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-mr)
101
(eval ())
(hpxmov a1 '1 a4)
(push a4)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov (& 1) a1)
(jcall get-system-directory)
(push a1)
(mov (& 2) a1)
(jcall get-main-ll-object-directory)
(push a1)
(mov (& 3) a1)
(jcall get-main-ll-module-directory)
(push nil)
(push nil)
(push nil)
(push a1)
(hpxmov (& 7) '11 a4)
(mov a4 (cvalq #:rtproject:extension))
(push (@ 104))
(push '"# This makefile was generated by the ILOG Analyzer.")
(mov '1 a4)
(jmp print)
104
(eval ())
(push (@ 105))
(push '"# Version     : ")
(push (cvalq #:crunch:version))
(push '"         Date : ")
(jcall date)
(push a1)
(mov '4 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push '"# SubVersion  : ")
(push (cvalq #:crunch:subversion))
(mov '2 a4)
(jmp print)
106
(eval ())
(push (@ 107))
(push '"# It enables to build modules from Lisp source files for ")
(mov '1 a4)
(jmp print)
107
(eval ())
(push (@ 108))
(push '"# - project : ")
(hpxmov (& 9) '0 a4)
(push a4)
(mov '2 a4)
(jmp print)
108
(eval ())
(push (@ 109))
(push '"#")
(mov '1 a4)
(jmp print)
109
(eval ())
(cnble (cvalq #:crunch:verbose) '1 111)
(mov (cvalq #:sys-package:itsoft) a2)
(mov '#:rtproject:makefile:comment a1)
(jcall cons)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 112))
(push '"# ")
(mov '1 a4)
(jmp prin)
112
(eval ())
(push (@ 113))
(mov '0 a4)
(jmp terpri)
113
(eval ())
(push (@ 114))
(mov '0 a4)
(jmp terpri)
114
(eval ())
(mov (& 14) a1)
(jcall pprint)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '7)
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
111
(push (@ 116))
(push '"######")
(mov '1 a4)
(jmp print)
116
(eval ())
(push (@ 117))
(push '"# Directories")
(mov '1 a4)
(jmp print)
117
(eval ())
(push (@ 118))
(push '"######")
(mov '1 a4)
(jmp print)
118
(eval ())
(push (@ 119))
(mov '0 a4)
(jmp terpri)
119
(eval ())
(hpxmov (& 7) '2 a1)
(bfnil a1 120)
(mov '"./" a1)
120
(jcall namestring)
(mov a1 a2)
(mov '"ROOTDIR" a1)
(jcall #:rtproject:print-env)
(jcall system)
(jcall string)
(mov a1 a2)
(mov '"SYSTEM" a1)
(jcall #:rtproject:print-env)
(mov (cvalq rt-lelisp-directory) a1)
(jcall namestring)
(mov a1 a2)
(mov '"LLDIR" a1)
(jcall #:rtproject:print-env)
(btnil (& 4) 122)
(mov (& 4) a1)
(jcall namestring)
(mov a1 (& 2))
(mov a1 a2)
(mov '"LLOBJDIR" a1)
(jcall #:rtproject:print-env)
(mov '"$(LLOBJDIR)" (& 4))
122
(btnil (& 0) 124)
(mov (& 0) a1)
(jcall namestring)
(mov a1 (& 1))
(mov a1 a2)
(mov '"LLMODDIR" a1)
(jcall #:rtproject:print-env)
(mov '"$(LLMODDIR)" (& 0))
124
(mov '"touch" a2)
(mov '"TOUCH" a1)
(jcall #:rtproject:print-env)
(mov '"cp" a2)
(mov '"CP" a1)
(jcall #:rtproject:print-env)
(push (@ 125))
(mov '0 a4)
(jmp terpri)
125
(eval ())
(push (@ 126))
(push '"######")
(mov '1 a4)
(jmp print)
126
(eval ())
(push (@ 127))
(push '"# Make use of standard complice")
(mov '1 a4)
(jmp print)
127
(eval ())
(push (@ 128))
(push '"######")
(mov '1 a4)
(jmp print)
128
(eval ())
(push (@ 129))
(mov '0 a4)
(jmp terpri)
129
(eval ())
(mov (cvalq #:rtproject:complice-command) a2)
(mov '"COMPLICE" a1)
(jcall #:rtproject:print-env)
(push (@ 130))
(mov '0 a4)
(jmp terpri)
130
(eval ())
(push (@ 131))
(push '"######")
(mov '1 a4)
(jmp print)
131
(eval ())
(push (@ 132))
(push '"# Complice options")
(mov '1 a4)
(jmp print)
132
(eval ())
(push (@ 133))
(push '"######")
(mov '1 a4)
(jmp print)
133
(eval ())
(push (@ 134))
(mov '0 a4)
(jmp terpri)
134
(eval ())
(push (@ 135))
(push '"USERFLAGS=")
(mov '1 a4)
(jmp print)
135
(eval ())
(push (@ 136))
(push '"#COMPLICEOPT=-hh")
(mov '1 a4)
(jmp print)
136
(eval ())
(push (@ 137))
(push '"COMPLICEFLAGS=")
(mov '1 a4)
(jmp prin)
137
(eval ())
(push (@ 138))
(cnble (cvalq #:crunch:verbose) '1 139)
(mov '("-v") a4)
(bra 140)
139
(mov nil a4)
140
(push a4)
(push (@ 141))
(push '"-e ""(set (symbol (quote system)(quote path)) (list ")
(push '"\""\""")
(push '"\""$(LLDIR)$(SYSTEM)/\""")
(push (@ 142))
(mov (& 14) a1)
(jcall list-complice-directories)
(push a1)
(push nil)
143
(bfcons (& 1) 144)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall namestring)
(mov a1 (& 0))
(btnil (& 10) 145)
(mov (& 11) a2)
(jcall equal)
(btnil a1 145)
(mov '"\""$(LLMODDIR)\""" a1)
(bra 146)
145
(btnil (& 14) 147)
(mov (& 12) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 147)
(mov '"\""$(LLOBJDIR)\""" a1)
(bra 146)
147
(push (@ 149))
(push '"\""")
(push (& 2))
(push '"\""")
(mov '3 a4)
(jmp catenate)
149
(eval ())
146
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 143)
144
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (@ 150))
(hpxmov (& 16) '29 a2)
(mov '"all" a1)
(jcall cassoc)
(push a1)
(push '("$(USERFLAGS)"))
(mov '2 a4)
(jmp append)
150
(eval ())
(mov a1 a2)
(mov '"))""" a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp nconc)
142
(eval ())
(push a1)
(mov '4 a4)
(jmp mcons)
141
(eval ())
(push a1)
(mov '2 a4)
(jmp append)
138
(eval ())
(mov a1 a2)
(mov '"$(COMPLICEOPT)" a1)
(jcall cons)
(jcall #:rtproject:prinf)
(push (@ 151))
(push '2)
(mov '1 a4)
(jmp terpri)
151
(eval ())
(push (@ 152))
(push '"######")
(mov '1 a4)
(jmp print)
152
(eval ())
(push (@ 153))
(push '"# LL Objects involved")
(mov '1 a4)
(jmp print)
153
(eval ())
(push (@ 154))
(push '"######")
(mov '1 a4)
(jmp print)
154
(eval ())
(push (@ 155))
(mov '0 a4)
(jmp terpri)
155
(eval ())
(push (@ 156))
(push '"LLOBJS=")
(mov '1 a4)
(jmp prin)
156
(eval ())
(push (& 6))
(push nil)
157
(bfcons (& 1) 158)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 7) a2)
(mov (& 0) a1)
(call #:rtproject:make-object-filename)
(jcall namestring)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 157)
158
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(jcall #:rtproject:prinf)
(push (@ 159))
(push '2)
(mov '1 a4)
(jmp terpri)
159
(eval ())
(push (@ 160))
(push '"######")
(mov '1 a4)
(jmp print)
160
(eval ())
(push (@ 161))
(push '"# Generic entries")
(mov '1 a4)
(jmp print)
161
(eval ())
(push (@ 162))
(push '"######")
(mov '1 a4)
(jmp print)
162
(eval ())
(push (@ 163))
(mov '0 a4)
(jmp terpri)
163
(eval ())
(push (@ 164))
(push '"all : $(LLOBJS)")
(mov '1 a4)
(jmp print)
164
(eval ())
(push (@ 165))
(mov '0 a4)
(jmp terpri)
165
(eval ())
(push (@ 166))
(push '"clean :")
(mov '1 a4)
(jmp print)
166
(eval ())
(push (@ 167))
(push '9)
(mov '1 a4)
(jmp princn)
167
(eval ())
(push (@ 168))
(push '"rm -f $(LLOBJS)")
(mov '1 a4)
(jmp print)
168
(eval ())
(push (@ 169))
(push '2)
(mov '1 a4)
(jmp terpri)
169
(eval ())
(push (@ 170))
(push '"info :")
(mov '1 a4)
(jmp print)
170
(eval ())
(push (@ 171))
(push '9)
(mov '1 a4)
(jmp princn)
171
(eval ())
(push (@ 172))
(push '"@echo complice=$(COMPLICE)")
(mov '1 a4)
(jmp print)
172
(eval ())
(push (@ 173))
(push '9)
(mov '1 a4)
(jmp princn)
173
(eval ())
(push (@ 174))
(push '"@echo compliceflags=$(COMPLICEFLAGS)")
(mov '1 a4)
(jmp print)
174
(eval ())
(push (@ 175))
(mov '0 a4)
(jmp terpri)
175
(eval ())
(push (@ 176))
(push '"i :")
(mov '1 a4)
(jmp print)
176
(eval ())
(push (@ 177))
(push '9)
(mov '1 a4)
(jmp princn)
177
(eval ())
(push (@ 178))
(push '"@$(COMPLICE) $(COMPLICEFLAGS) -v -i")
(mov '1 a4)
(jmp prinf)
178
(eval ())
(push (@ 179))
(push '2)
(mov '1 a4)
(jmp terpri)
179
(eval ())
(push (@ 180))
(push '"######")
(mov '1 a4)
(jmp print)
180
(eval ())
(push (@ 181))
(push '"# Module dependencies")
(mov '1 a4)
(jmp print)
181
(eval ())
(push (@ 182))
(push '"######")
(mov '1 a4)
(jmp print)
182
(eval ())
(push (@ 183))
(mov '0 a4)
(jmp terpri)
183
(eval ())
(push (& 6))
184
(bfcons (& 0) 185)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 186))
(push (& 1))
(push (@ 187))
(push (& 12))
(push (& 4))
(push (& 11))
(push (& 8))
(mov '4 a4)
(bra #:rtproject:print-lo-dependencies)
187
(eval ())
(push a1)
(hpxmov (& 12) '29 a2)
(mov (& 3) a1)
(jcall cassoc)
(push a1)
(push (& 10))
(push (& 7))
(mov '5 a4)
(bra #:rtproject:print-complice-command)
186
(eval ())
(adjstk '1)
(bra 184)
185
(adjstk '1)
(push (@ 188))
(mov '0 a4)
(jmp terpri)
188
(eval ())
(adjstk '8)
(return)
))
(defvar #:rtproject:defmod)
(loader'((entry #:rtproject:print-lo-dependencies nsubr)
(btnil (& 0) 101)
(push (@ 103))
(push (& 1))
(push (& 4))
(push (cvalq #:system:mod-extension))
(mov '3 a4)
(jmp catenate)
103
(eval ())
(mov a1 a4)
(bra 102)
101
(mov (& 2) a1)
(jcall probepathm)
(mov a1 a4)
102
(push a4)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:rtproject:make-object-filename)
(push nil)
(push a1)
(push (cvalq #:rtproject:defmod))
(mov (& 2) (cvalq #:rtproject:defmod))
(push '1)
(push '(#:rtproject:defmod))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (& 9) 104)
(btnil (cvalq #:rtproject:extension) 106)
(push (@ 108))
(push '".")
(push (cvalq #:rtproject:extension))
(mov '2 a4)
(jmp catenate)
108
(eval ())
(push (cvalq #:system:mod-extension))
(mov a1 (cvalq #:system:mod-extension))
(push '1)
(push '(#:system:mod-extension))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 19) a1)
(jcall probepathm)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:mod-extension))
(adjstk '7)
(mov a1 a4)
(bra 107)
106
(mov nil a4)
107
(push a4)
(mov (& 13) a1)
(jcall readdefmodule)
(mov a1 (cvalq #:rtproject:defmod))
(btnil (& 0) 110)
(mov (& 0) a1)
(jcall namestring)
(mov a1 (& 0))
(push (@ 111))
(push (& 11))
(push '":")
(push a1)
(mov '3 a4)
(jmp list)
111
(eval ())
(jcall #:rtproject:prinf)
(push (@ 112))
(mov '0 a4)
(jmp terpri)
112
(eval ())
(push (@ 113))
(push '9)
(mov '1 a4)
(jmp princn)
113
(eval ())
(push (@ 114))
(bfnil (cvalq #:rtproject:verbose-makefile) 115)
(mov '("@") a4)
(bra 116)
115
(mov nil a4)
116
(push a4)
(push (@ 117))
(push '"$(CP) ")
(push (& 4))
(push '" ")
(push (& 16))
(mov '4 a4)
(jmp list)
117
(eval ())
(push a1)
(mov '2 a4)
(jmp append)
114
(eval ())
(jcall #:rtproject:prinf)
(push (@ 118))
(mov '0 a4)
(jmp terpri)
118
(eval ())
110
(mov (& 8) a1)
(jcall namestring)
(push a1)
(push (@ 119))
(push (& 15))
(push (cvalq #:system:obj-extension))
(mov '2 a4)
(jmp catenate)
119
(eval ())
(push a1)
(push (@ 120))
(mov a1 a2)
(mov (& 2) a1)
(jcall equal)
(bfnil a1 121)
(mov (& 1) a1)
(jcall ncons)
(mov a1 a4)
(bra 122)
121
(mov nil a4)
122
(push a4)
(push '(":"))
(mov '2 a4)
(jmp append)
120
(eval ())
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(jcall #:rtproject:prinf)
(adjstk '2)
(push (@ 123))
(push (@ 124))
(mov 'files a2)
(mov (cvalq #:rtproject:defmod) a1)
(jcall getdefmodule)
(push a1)
(mov 'include a2)
(mov (cvalq #:rtproject:defmod) a1)
(jcall getdefmodule)
(push a1)
(mov '2 a4)
(jmp append)
124
(eval ())
(push a1)
(push nil)
125
(bfcons (& 1) 126)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall probepathf)
(btnil a1 127)
(jcall namestring)
(jcall ncons)
(bra 128)
127
(push (@ 129))
(mov '0 a4)
(jmp outchan)
129
(eval ())
(push a1)
(push (@ 130))
(push dlink)
(push prot)
(stack dlink)
(push (@ 132))
(push nil)
(mov '1 a4)
(jmp outchan)
132
(eval ())
(mov (cvalq #:crunch:w-flag) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 134)
(mov (cvalq #:crunch:w-flag) a2)
(mov '126 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
134
(cnbgt (cvalq #:crunch:verbose) '0 137)
(mov (cvalq #:crunch:no-warning) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 135)
137
(mov (& 4) a3)
(mov '|26| a2)
(mov '"W.126" a1)
(jcall printerror)
(bra 136)
135
(mov nil a1)
136
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 131) a3)
130
(push a3)
(push a2)
(push (@ 138))
(push (& 4))
(mov '1 a4)
(jmp outchan)
138
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
131
(eval ())
(adjstk '1)
(mov nil a1)
128
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 125)
126
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(cnble (cvalq #:crunch:dependancy) '0 139)
(cnbgt (cvalq #:crunch:dependancy) '2 141)
(push (@ 143))
(mov 'import a2)
(mov (cvalq #:rtproject:defmod) a1)
(jcall getdefmodule)
(push a1)
(push (cvalq #:crunch:all-modules))
(mov '2 a4)
(jmp intersection)
143
(eval ())
(mov a1 a4)
(bra 142)
141
(mov 'import a2)
(mov (cvalq #:rtproject:defmod) a1)
(jcall getdefmodule)
(mov a1 a4)
142
(push a4)
(push nil)
144
(bfcons (& 1) 145)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(cnbeq (cvalq #:crunch:dependancy) '1 148)
(cnbne (cvalq #:crunch:dependancy) '3 146)
148
(push (@ 149))
(push (& 1))
(push (& 18))
(push (@ 150))
(push (cvalq #:system:mod-extension))
(push '1)
(mov '2 a4)
(jmp substring)
150
(eval ())
(push a1)
(push 'probepathm)
(mov '4 a4)
(jmp #:rtproject:make-output-filename)
149
(eval ())
(btnil a1 151)
(jcall namestring)
(jcall ncons)
(bra 147)
151
(push (@ 153))
(mov '0 a4)
(jmp outchan)
153
(eval ())
(push a1)
(push (@ 154))
(push dlink)
(push prot)
(stack dlink)
(push (@ 156))
(push nil)
(mov '1 a4)
(jmp outchan)
156
(eval ())
(mov (cvalq #:crunch:w-flag) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 158)
(mov (cvalq #:crunch:w-flag) a2)
(mov '126 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
158
(cnbgt (cvalq #:crunch:verbose) '0 161)
(mov (cvalq #:crunch:no-warning) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 159)
161
(mov (& 4) a3)
(mov '|26| a2)
(mov '"W.126" a1)
(jcall printerror)
(bra 160)
159
(mov nil a1)
160
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 155) a3)
154
(push a3)
(push a2)
(push (@ 162))
(push (& 4))
(mov '1 a4)
(jmp outchan)
162
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
155
(eval ())
(adjstk '1)
(mov nil a1)
(bra 147)
146
(mov (& 17) a2)
(mov (& 0) a1)
(call #:rtproject:make-object-filename)
(jcall namestring)
(jcall ncons)
147
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 144)
145
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a4)
(bra 140)
139
(mov nil a4)
140
(push a4)
(mov '2 a4)
(jmp nconc)
123
(eval ())
(mov a1 a2)
(mov (& 10) a1)
(jcall cons)
(jcall #:rtproject:prinf)
(push (@ 163))
(mov '0 a4)
(jmp terpri)
163
(eval ())
(adjstk '1)
(bra 105)
104
(mov (cvalq #:crunch:e-flag) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 165)
(mov (cvalq #:crunch:e-flag) a2)
(mov '126 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
165
(mov (& 12) a3)
(mov '|26| a2)
(mov '"E.126" a1)
(jcall syserror)
105
(mov (& 7) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:rtproject:defmod))
(adjstk '14)
(return)
))
(loader'((entry #:rtproject:print-complice-command nsubr)
(btnil (& 0) 101)
(push (@ 103))
(push (& 1))
(push (& 6))
(push (cvalq #:system:mod-extension))
(mov '3 a4)
(jmp catenate)
103
(eval ())
(bra 102)
101
(mov (& 4) a1)
(jcall probepathm)
102
(jcall namestring)
(push a1)
(mov (& 4) a1)
(jcall namestring)
(push nil)
(push (@ 104))
(push '9)
(mov '1 a4)
(jmp princn)
104
(eval ())
(push (@ 105))
(push '"@echo ""+++++ COMPLICE : """)
(push (& 3))
(mov '2 a4)
(jmp list)
105
(eval ())
(jcall #:rtproject:prinf)
(push (@ 106))
(mov '0 a4)
(jmp terpri)
106
(eval ())
(push (@ 107))
(push '9)
(mov '1 a4)
(jmp princn)
107
(eval ())
(push (@ 108))
(bfnil (cvalq #:rtproject:verbose-makefile) 109)
(mov '("@") a4)
(bra 110)
109
(mov nil a4)
110
(push a4)
(push (@ 111))
(push '"$(COMPLICE)")
(push (& 10))
(push '"$(COMPLICEFLAGS)")
(push (@ 112))
(bfnil (& 10) 115)
(mov (& 12) a1)
(jcall pathname-directory)
(btnil a1 113)
115
(push (@ 116))
(push '"-o ")
(mov (& 12) a4)
(bfnil a4 117)
(mov (& 14) a1)
(jcall directory-namestring)
(mov a1 a4)
117
(push a4)
(mov '2 a4)
(jmp catenate)
116
(eval ())
(jcall ncons)
(mov a1 a3)
(bra 114)
113
(mov nil a3)
114
(push a3)
(push (& 12))
(mov '2 a4)
(jmp nconc)
112
(eval ())
(push a1)
(mov '4 a4)
(jmp mcons)
111
(eval ())
(push a1)
(mov '2 a4)
(jmp append)
108
(eval ())
(jcall #:rtproject:prinf)
(push (@ 118))
(mov '0 a4)
(jmp terpri)
118
(eval ())
(push (@ 119))
(mov '0 a4)
(jmp terpri)
119
(eval ())
(adjstk '7)
(return)
))
(loader'((fentry #:rtproject:prinf subr1)
(entry #:rtproject:prinf subr1)
(push a1)
(push nil)
101
(btnil (& 1) 102)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall string)
(mov a1 (& 0))
(push (@ 105))
(push a1)
(push '" ")
(mov '2 a4)
(jmp spanstring)
105
(eval ())
(btnil a1 101)
(hgsize (& 0) a4)
(push a4)
(push (@ 108))
(mov '0 a4)
(jmp outpos)
108
(eval ())
(pop a4)
(plus a1 a4)
(cnble a4 (cvalq #:rtproject:makefile:rmargin) 107)
(push (@ 109))
(push '92)
(mov '1 a4)
(jmp princn)
109
(eval ())
(push (@ 110))
(mov '0 a4)
(jmp terpri)
110
(eval ())
(push (@ 111))
(push '9)
(mov '1 a4)
(jmp princn)
111
(eval ())
107
(push (@ 112))
(push (& 1))
(mov '1 a4)
(jmp prin)
112
(eval ())
(push (@ 113))
(push '32)
(mov '1 a4)
(jmp princn)
113
(eval ())
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:rtproject:make-object-filename subr2)
(push (@ 101))
(push a1)
(push a2)
(push '"lo")
(push 'probepathm)
(mov '4 a4)
(jmp #:rtproject:make-output-filename)
101
(eval ())
(return)
))
(loader'((fentry #:rtproject:make-output-filename nsubr)
(entry #:rtproject:make-output-filename nsubr)
(cnbeq a4 '4 101)
(mov '#:rtproject:make-output-filename a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov (& 3) a1)
(jcall pathname)
(mov a1 a2)
(mov '#:pathname:#[ () () () () () () ] a1)
(jcall merge-pathnames)
(push a1)
(mov (& 2) a2)
(jcall set-pathname-type)
(btnil (& 3) 102)
(mov (& 3) a1)
(jcall pathnamep)
(btnil a1 104)
(mov (& 0) a2)
(mov (& 3) a1)
(adjstk '5)
(jmp merge-pathnames)
104
(push (@ 106))
(push (& 4))
(mov (& 2) a1)
(jcall file-namestring)
(push a1)
(mov '2 a4)
(jmp catenate)
106
(eval ())
(adjstk '5)
(return)
102
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 107))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 108))
(push (& 14))
(push (& 18))
(mov '2 a4)
(jmp funcall)
108
(eval ())
(jcall pathname)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
107
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov (car a1) a1)
(bfnil a1 109)
(mov (cvalq #:crunch:e-flag) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 111)
(mov (cvalq #:crunch:e-flag) a2)
(mov '126 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
111
(mov (& 4) a3)
(mov '|26| a2)
(mov '"E.126" a1)
(jcall syserror)
109
(mov (& 0) a2)
(adjstk '5)
(jmp combine-pathnames)
))
(loader'((fentry #:rtproject:make-module-filename subr2)
(entry #:rtproject:make-module-filename subr2)
(push (@ 101))
(push a1)
(push a2)
(push (@ 102))
(push (cvalq #:system:mod-extension))
(push '1)
(mov '2 a4)
(jmp substring)
102
(eval ())
(push a1)
(push 'probepathf)
(mov '4 a4)
(jmp #:rtproject:make-output-filename)
101
(eval ())
(return)
))
(defvar #:rtproject:sed-values)
(loader'((entry #:rtproject:declare-sed-value subr2)
(push a2)
(push a1)
(mov (cvalq #:rtproject:sed-values) a2)
(jcall assoc)
(btnil a1 101)
(mov (& 1) (cdr a1))
(bra 102)
101
(mov (cvalq #:rtproject:sed-values) a3)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall acons)
(mov a1 (cvalq #:rtproject:sed-values))
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:rtproject:print-env subr2)
(entry #:rtproject:print-env subr2)
(push a2)
(push a1)
(push (@ 101))
(push a1)
(push '"=")
(push a2)
(mov '3 a4)
(jmp print)
101
(eval ())
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:rtproject:declare-sed-value)
))
(defvar #:rtproject:sed-marker "SEDMARKER")
(defvar #:rtproject:sed-file-p (if (boundp '#:rtproject:sed-file-p) #:rtproject:sed-file-p t))
(loader'((fentry #:rtproject:makefile:comment:eol subr0)
(entry #:rtproject:makefile:comment:eol subr0)
(mov nil a3)
(mov 'eol a2)
(mov '#:rtproject:makefile:comment a1)
(jcall super-itsoft)
(push (@ 101))
(push '0)
(push '35)
(mov '2 a4)
(jmp outbuf)
101
(eval ())
(push (@ 102))
(push '1)
(push '32)
(mov '2 a4)
(jmp outbuf)
102
(eval ())
(push (@ 103))
(push '2)
(mov '1 a4)
(jmp outpos)
103
(eval ())
(return)
))
(loader '((end)))
