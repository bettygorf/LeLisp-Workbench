(loader '((title |kernellm.lo|)))
(put-abbrev 'llmodule 'llmodule)
(setq #:sys-package:colon 'llmodule)
(loader'((fentry #:llmodule:format-export subr1)
(entry #:llmodule:format-export subr1)
(push nil)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 105)
(bfnil (cvalq #:crunch:export-accessors) 106)
(mov '#:llmodule:exportable-definition a2)
(mov (& 0) a1)
(jcall get)
(bfnil a1 104)
106
(mov (& 0) a1)
(jcall #:llmodule:unknow-abbrev-p)
(bfnil a1 104)
105
(mov (& 2) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 2))
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(jmp nreverse)
))
(loader'((fentry #:llmodule:exportable-definition-p dmsubr)
(entry #:llmodule:exportable-definition-p dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'get)
(push a1)
(push '('#:llmodule:exportable-definition))
(mov '3 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry #:llmodule:unknow-abbrev-p subr1)
(entry #:llmodule:unknow-abbrev-p subr1)
(push a1)
(bfcons a1 101)
(mov (car a1) a1)
(jcall #:llmodule:unknow-abbrev-p)
(bfnil a1 103)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(jmp #:llmodule:unknow-abbrev-p)
103
(adjstk '1)
(return)
101
(btnil a1 104)
(jcall string)
(mov a1 a2)
(mov nil a1)
(jcall symbol)
(cabeq a1 'unknow-abbrev 104)
(mov (& 0) a4)
(mov (pkgc a4) (& 0))
(cabeq (pkgc a4) 'unknow-abbrev 104)
(mov (& 0) a1)
(adjstk '1)
(jmp #:llmodule:unknow-abbrev-p)
104
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry simplify-list subr1)
(entry simplify-list subr1)
(push a1)
(push nil)
(push nil)
101
(btnil (& 2) 102)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (car a4) (& 0))
(mov (& 1) a2)
(mov (car a4) a1)
(jcall cons)
(mov a1 (& 1))
(mov (& 2) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (& 2))
(bra 101)
102
(mov (& 1) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((fentry assert-value dmsubr)
(entry assert-value dmsubr)
(mov '(progn) a1)
(return)
))
(loader'((fentry assert-values dmsubr)
(entry assert-values dmsubr)
(mov '(progn) a1)
(return)
))
(loader '((end)))
