(loader '((title |gfn.lo|)))
(loader'((fentry |(version)| subr0)
(entry |(version)| subr0)
(jmp version)
))
(loader'((fentry |(herald)| subr0)
(entry |(herald)| subr0)
(jmp herald)
))
(loader'((fentry |(terpri)| subr0)
(entry |(terpri)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp terpri)
101
(eval ())
(return)
))
(loader'((fentry |(gensym)| subr0)
(entry |(gensym)| subr0)
(jmp gensym)
))
(loader'((fentry |(test-read)| subr0)
(entry |(test-read)| subr0)
(push (@ 101))
(push '(test-read))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(car '(a))| subr0)
(entry |(car '(a))| subr0)
(mov '(a) a1)
(mov (car a1) a1)
(return)
))
(loader'((fentry |(cons 'a 'b)| subr0)
(entry |(cons 'a 'b)| subr0)
(mov 'b a2)
(mov 'a a1)
(jmp cons)
))
(loader'((fentry |(putprop 'a 'b 'c)| subr0)
(entry |(putprop 'a 'b 'c)| subr0)
(mov 'c a3)
(mov 'b a2)
(mov 'a a1)
(jmp putprop)
))
(loader'((fentry |(list 1 2)| subr0)
(entry |(list 1 2)| subr0)
(push (@ 101))
(push '1)
(push '2)
(mov '2 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'version ())| subr0)
(entry |(apply 'version ())| subr0)
(push (@ 101))
(push 'version)
(push nil)
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'car '((a)))| subr0)
(entry |(apply 'car '((a)))| subr0)
(push (@ 101))
(push 'car)
(push '((a)))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'cons '(a b))| subr0)
(entry |(apply 'cons '(a b))| subr0)
(push (@ 101))
(push 'cons)
(push '(a b))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'cons 'a '(b))| subr0)
(entry |(apply 'cons 'a '(b))| subr0)
(push (@ 101))
(push 'cons)
(push 'a)
(push '(b))
(mov '3 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'putprop 'a '(b c))| subr0)
(entry |(apply 'putprop 'a '(b c))| subr0)
(push (@ 101))
(push 'putprop)
(push 'a)
(push '(b c))
(mov '3 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'putprop 'a 'b '(c))| subr0)
(entry |(apply 'putprop 'a 'b '(c))| subr0)
(push (@ 101))
(push 'putprop)
(push 'a)
(push 'b)
(push '(c))
(mov '4 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'putprop '(a b c))| subr0)
(entry |(apply 'putprop '(a b c))| subr0)
(push (@ 101))
(push 'putprop)
(push '(a b c))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'list 1 2 3 '(4 5))| subr0)
(entry |(apply 'list 1 2 3 '(4 5))| subr0)
(push (@ 101))
(push 'list)
(push '1)
(push '2)
(push '3)
(push '(4 5))
(mov '5 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'version)| subr0)
(entry |(funcall 'version)| subr0)
(push (@ 101))
(push 'version)
(mov '1 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'car '(a))| subr0)
(entry |(funcall 'car '(a))| subr0)
(push (@ 101))
(push 'car)
(push '(a))
(mov '2 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'cons 'a 'b)| subr0)
(entry |(funcall 'cons 'a 'b)| subr0)
(push (@ 101))
(push 'cons)
(push 'a)
(push 'b)
(mov '3 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'putprop 'a 'b 'c)| subr0)
(entry |(funcall 'putprop 'a 'b 'c)| subr0)
(push (@ 101))
(push 'putprop)
(push 'a)
(push 'b)
(push 'c)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'list 1 2 3 '(4 5))| subr0)
(entry |(funcall 'list 1 2 3 '(4 5))| subr0)
(push (@ 101))
(push 'list)
(push '1)
(push '2)
(push '3)
(push '(4 5))
(mov '5 a4)
(jmp funcall)
101
(eval ())
(return)
))
(putprop '|(funcall 'vref v 2)| '(v) '#:complice:fvar)
(loader'((fentry |(funcall 'vref v 2)| subr0)
(entry |(funcall 'vref v 2)| subr0)
(push (@ 101))
(push 'vref)
(push (cvalq v))
(push '2)
(mov '3 a4)
(jmp funcall)
101
(eval ())
(return)
))
(putprop '|(funcall 'vset v 2 33)| '(v) '#:complice:fvar)
(loader'((fentry |(funcall 'vset v 2 33)| subr0)
(entry |(funcall 'vset v 2 33)| subr0)
(push (@ 101))
(push 'vset)
(push (cvalq v))
(push '2)
(push '33)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(return)
))
(putprop '|(funcall 'aset v 2 333)| '(v) '#:complice:fvar)
(loader'((fentry |(funcall 'aset v 2 333)| subr0)
(entry |(funcall 'aset v 2 333)| subr0)
(push (@ 101))
(push 'aset)
(push (cvalq v))
(push '2)
(push '333)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |((lambda (x y) (list x y)) (1+ 1) (1+ 2))| subr0)
(entry |((lambda (x y) (list x y)) (1+ 1) (1+ 2))| subr0)
(mov '1 a1)
(jcall |1+|)
(push a1)
(mov '2 a1)
(jcall |1+|)
(push (@ 101))
(push (& 1))
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(putprop '|(list x y z)| '(z y x) '#:complice:fvar)
(loader'((fentry |(list x y z)| subr0)
(entry |(list x y z)| subr0)
(push (@ 101))
(push (cvalq x))
(push (cvalq y))
(push (cvalq z))
(mov '3 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry |((lambda (x . y) (list x y)) (1+ 1) (1+ 2))| subr0)
(entry |((lambda (x . y) (list x y)) (1+ 1) (1+ 2))| subr0)
(mov '1 a1)
(jcall |1+|)
(push a1)
(mov '2 a1)
(jcall |1+|)
(push a1)
(mov '1 a4)
(jcall #:llcp:nlist)
(push (@ 101))
(push (& 1))
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |((lambda x x) (1+ 1) 2 3)| subr0)
(entry |((lambda x x) (1+ 1) 2 3)| subr0)
(mov '1 a1)
(jcall |1+|)
(push a1)
(push '2)
(push '3)
(mov '3 a4)
(jcall #:llcp:nlist)
(return)
))
(loader'((fentry |((lambda ((x)) x) '(1))| subr0)
(entry |((lambda ((x)) x) '(1))| subr0)
(push '(1))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry |((lambda (x (y . z)) (list x y z)) (1+ 1) (cons 3 4))| subr0)
(entry |((lambda (x (y . z)) (list x y z)) (1+ 1) (cons 3 4))| subr0)
(mov '1 a1)
(jcall |1+|)
(push a1)
(mov '4 a2)
(mov '3 a1)
(jcall cons)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push (@ 101))
(push (& 1))
(push a1)
(push a4)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |((lambda ((x . y)) (list x y)) ())| subr0)
(entry |((lambda ((x . y)) (list x y)) ())| subr0)
(push nil)
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push (@ 101))
(push (& 1))
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(putprop '|(list x y z u v w)| '(w v u z y x) '#:complice:fvar)
(loader'((fentry |(list x y z u v w)| subr0)
(entry |(list x y z u v w)| subr0)
(push (@ 101))
(push (cvalq x))
(push (cvalq y))
(push (cvalq z))
(push (cvalq u))
(push (cvalq v))
(push (cvalq w))
(mov '6 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry |((lambda (x (y (z . u) . v) . w) (list x y z u v w)) 1 '(2 (3 . 4) . 5) 6)| subr0)
(entry |((lambda (x (y (z . u) . v) . w) (list x y z u v w)) 1 '(2 (3 . 4) . 5) 6)| subr0)
(push '6)
(mov '1 a4)
(jcall #:llcp:nlist)
(push '1)
(push '(2 (3 . 4) . 5))
(mov (& 0) a3)
(mov (car a3) (& 0))
(mov (cdr a3) a3)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push (cdr a3))
(mov (car a3) a3)
(push (@ 101))
(push (& 3))
(push (& 3))
(push a3)
(push (& 4))
(push a2)
(push a1)
(mov '6 a4)
(jmp list)
101
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry |((lambda ((x) ((y . z) u . v) . w) (list x y z u v w)) '(1) '((2 . 3) 4 . 5) 6)| subr0)
(entry |((lambda ((x) ((y . z) u . v) . w) (list x y z u v w)) '(1) '((2 . 3) 4 . 5) 6)| subr0)
(push '6)
(mov '1 a4)
(jcall #:llcp:nlist)
(push '(1))
(push '((2 . 3) 4 . 5))
(mov (& 0) a3)
(mov (car a3) (& 0))
(mov (cdr a3) a3)
(mov (cdr a3) a2)
(mov (car a3) a3)
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push a4)
(mov (& 2) a4)
(mov (car a4) (& 2))
(push (@ 101))
(push (& 3))
(push (& 3))
(push (& 3))
(push a3)
(push a2)
(push a1)
(mov '6 a4)
(jmp list)
101
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry |((lambda (((x) . y)) (list x y)) '((1) . 2))| subr0)
(entry |((lambda (((x) . y)) (list x y)) '((1) . 2))| subr0)
(push '((1) . 2))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (& 0) a3)
(mov (car a3) (& 0))
(push (@ 101))
(push (& 1))
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |(let ((x 10)) (let (((y z) '(1 2))) (list y z)))| subr0)
(entry |(let ((x 10)) (let (((y z) '(1 2))) (list y z)))| subr0)
(push '10)
(push '(1 2))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (car a4) a4)
(push (@ 101))
(push (& 1))
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry |(let ((x 10)) (let (((y z) '(1 2))) x))| subr0)
(entry |(let ((x 10)) (let (((y z) '(1 2))) x))| subr0)
(push '10)
(push '(1 2))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry |(dynamic-let () 3)| subr0)
(entry |(dynamic-let () 3)| subr0)
(mov '3 a1)
(return)
))
(putprop '|(dynamic-let () dynx)| '(dynx) '#:complice:fvar)
(loader'((fentry |(dynamic-let () dynx)| subr0)
(entry |(dynamic-let () dynx)| subr0)
(mov (cvalq dynx) a1)
(return)
))
(loader'((fentry |(dynamic-let ((dynx 3)) (dynamic dynx))| subr0)
(entry |(dynamic-let ((dynx 3)) (dynamic dynx))| subr0)
(push '3)
(push (cvalq dynx))
(mov (& 1) (cvalq dynx))
(push '1)
(push '(dynx))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq dynx) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynx))
(adjstk '8)
(return)
))
(loader'((fentry |(dynamic-let ((dynx 'x) (dyny 'y)) (list dynx dyny))| subr0)
(entry |(dynamic-let ((dynx 'x) (dyny 'y)) (list dynx dyny))| subr0)
(push 'x)
(push 'y)
(push (cvalq dyny))
(mov (& 1) (cvalq dyny))
(push (cvalq dynx))
(mov (& 3) (cvalq dynx))
(push '2)
(push '(dyny dynx))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push (cvalq dynx))
(push (cvalq dyny))
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq dynx))
(mov (& 7) (cvalq dyny))
(adjstk '10)
(return)
))
(loader'((fentry |(dynamic-let ((dynz 'z)) (dynfoo))| subr0)
(entry |(dynamic-let ((dynz 'z)) (dynfoo))| subr0)
(push 'z)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '(dynfoo))
(mov '1 a4)
(jmp eval)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(return)
))
(loader'((fentry |(let ((dynz 3)) (dynamic-let ((dynz 4)) (dynamic dynz)))| subr0)
(entry |(let ((dynz 3)) (dynamic-let ((dynz 4)) (dynamic dynz)))| subr0)
(push '3)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push '4)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq dynz) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(return)
))
(loader'((fentry |(let ((dynz 3)) (dynamic-let ((dynz 4)) dynz))| subr0)
(entry |(let ((dynz 3)) (dynamic-let ((dynz 4)) dynz))| subr0)
(push '3)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push '4)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq dynz) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(return)
))
(loader'((fentry |(dynamic-let ((dynz 'dynval)) (let ((dynz 'lexval)) (dynamic dynz)))| subr0)
(entry |(dynamic-let ((dynz 'dynval)) (let ((dynz 'lexval)) (dynamic dynz)))| subr0)
(push 'dynval)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push 'lexval)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq dynz) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(return)
))
(loader'((fentry |(dynamic-let ((dynz 'dynval)) (let ((dynz 'lexval)) dynz))| subr0)
(entry |(dynamic-let ((dynz 'dynval)) (let ((dynz 'lexval)) dynz))| subr0)
(push 'dynval)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push 'lexval)
(push (cvalq dynz))
(mov (& 1) (cvalq dynz))
(push '1)
(push '(dynz))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq dynz) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 6) (cvalq dynz))
(adjstk '8)
(return)
))
(loader'((fentry |((flambda (x y) (list x y)) (1+ 1) (1+ 2))| subr0)
(entry |((flambda (x y) (list x y)) (1+ 1) (1+ 2))| subr0)
(push '(|1+| 1))
(push '(|1+| 2))
(push (@ 101))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry |((flambda (x . y) (list x y)) (1+ 1) (1+ 2))| subr0)
(entry |((flambda (x . y) (list x y)) (1+ 1) (1+ 2))| subr0)
(push '(|1+| 2))
(mov '1 a4)
(jcall #:llcp:nlist)
(push '(|1+| 1))
(push (@ 101))
(push (& 1))
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |((flambda x x) (1+ 1) 2 3)| subr0)
(entry |((flambda x x) (1+ 1) 2 3)| subr0)
(push '(|1+| 1))
(push '2)
(push '3)
(mov '3 a4)
(jcall #:llcp:nlist)
(return)
))
(loader'((fentry |((flambda (x (y . z)) (list x y z)) 1 (2 . 3))| subr0)
(entry |((flambda (x (y . z)) (list x y z)) 1 (2 . 3))| subr0)
(push '1)
(push '(2 . 3))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push (@ 101))
(push (& 2))
(push (& 2))
(push a4)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry |((flambda (x (y (z))) (list x y z)) 1 (2 (3)))| subr0)
(entry |((flambda (x (y (z))) (list x y z)) 1 (2 (3)))| subr0)
(push '1)
(push '(2 (3)))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (car a4) a4)
(push (@ 101))
(push (& 2))
(push (& 2))
(push a4)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry |(faa)| subr0)
(entry |(faa)| subr0)
(push (@ 101))
(push '(faa))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(fuu 1)| subr0)
(entry |(fuu 1)| subr0)
(push (@ 101))
(push '(fuu 1))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(gee 1 2)| subr0)
(entry |(gee 1 2)| subr0)
(push (@ 101))
(push '(gee 1 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(gaa 1 2 3)| subr0)
(entry |(gaa 1 2 3)| subr0)
(push (@ 101))
(push '(gaa 1 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo0 ())| subr0)
(entry |(foo0 ())| subr0)
(push (@ 101))
(push '(foo0 ()))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo0 1)| subr0)
(entry |(foo0 1)| subr0)
(push (@ 101))
(push '(foo0 1))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo0 1 2)| subr0)
(entry |(foo0 1 2)| subr0)
(push (@ 101))
(push '(foo0 1 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo0 1 2 3)| subr0)
(entry |(foo0 1 2 3)| subr0)
(push (@ 101))
(push '(foo0 1 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(fee 1 2)| subr0)
(entry |(fee 1 2)| subr0)
(push (@ 101))
(push '(fee 1 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(fee 1 2 3)| subr0)
(entry |(fee 1 2 3)| subr0)
(push (@ 101))
(push '(fee 1 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(fee 1 2 3 4)| subr0)
(entry |(fee 1 2 3 4)| subr0)
(push (@ 101))
(push '(fee 1 2 3 4))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(buc '(1 2))| subr0)
(entry |(buc '(1 2))| subr0)
(push (@ 101))
(push '(buc '(1 2)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(buc '(1))| subr0)
(entry |(buc '(1))| subr0)
(push (@ 101))
(push '(buc '(1)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(bic '(1 (2)) 3)| subr0)
(entry |(bic '(1 (2)) 3)| subr0)
(push (@ 101))
(push '(bic '(1 (2)) 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(boc '(1 2) 3)| subr0)
(entry |(boc '(1 2) 3)| subr0)
(push (@ 101))
(push '(boc '(1 2) 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(boc '(1) 3)| subr0)
(entry |(boc '(1) 3)| subr0)
(push (@ 101))
(push '(boc '(1) 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(bar ())| subr0)
(entry |(bar ())| subr0)
(push (@ 101))
(push '(bar ()))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(bar '(100 101))| subr0)
(entry |(bar '(100 101))| subr0)
(push (@ 101))
(push '(bar '(100 101)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(bar '(1))| subr0)
(entry |(bar '(1))| subr0)
(push (@ 101))
(push '(bar '(1)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo1 1 2)| subr0)
(entry |(foo1 1 2)| subr0)
(push (@ 101))
(push '(foo1 1 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo1 1 2 3 4 5)| subr0)
(entry |(foo1 1 2 3 4 5)| subr0)
(push (@ 101))
(push '(foo1 1 2 3 4 5))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo1 1)| subr0)
(entry |(foo1 1)| subr0)
(push (@ 101))
(push '(foo1 1))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo2)| subr0)
(entry |(foo2)| subr0)
(push (@ 101))
(push '(foo2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo2 1)| subr0)
(entry |(foo2 1)| subr0)
(push (@ 101))
(push '(foo2 1))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo2 1 2)| subr0)
(entry |(foo2 1 2)| subr0)
(push (@ 101))
(push '(foo2 1 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(foo2 1 2 3)| subr0)
(entry |(foo2 1 2 3)| subr0)
(push (@ 101))
(push '(foo2 1 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(macr 1 2 3)| subr0)
(entry |(macr 1 2 3)| subr0)
(push (@ 101))
(push '(macr 1 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'macr '(1 2 3))| subr0)
(entry |(apply 'macr '(1 2 3))| subr0)
(push (@ 101))
(push 'macr)
(push '(1 2 3))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'macr 1 2 3)| subr0)
(entry |(funcall 'macr 1 2 3)| subr0)
(push (@ 101))
(push 'macr)
(push '1)
(push '2)
(push '3)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(dmd dmacr (a b c) (list '+ a b c))| subr0)
(entry |(dmd dmacr (a b c) (list '+ a b c))| subr0)
(mov '(dmacr (a b c) (list '|+| a b c)) a1)
(jmp dmd)
))
(loader'((fentry |(dmacr 1 2 3)| subr0)
(entry |(dmacr 1 2 3)| subr0)
(push (@ 101))
(push '(dmacr 1 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'dmacr '(1 2 3))| subr0)
(entry |(apply 'dmacr '(1 2 3))| subr0)
(push (@ 101))
(push 'dmacr)
(push '(1 2 3))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'dmacr 1 2 3)| subr0)
(entry |(funcall 'dmacr 1 2 3)| subr0)
(push (@ 101))
(push 'dmacr)
(push '1)
(push '2)
(push '3)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(eval '(1+ 55))| subr0)
(entry |(eval '(1+ 55))| subr0)
(push (@ 101))
(push '(|1+| 55))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(eval (list '+ 8 '(1+ 3)))| subr0)
(entry |(eval (list '+ 8 '(1+ 3)))| subr0)
(push (@ 101))
(push (@ 102))
(push '|+|)
(push '8)
(push '(|1+| 3))
(mov '3 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(eval (list (car '(cdr)) ''(a b c)))| subr0)
(entry |(eval (list (car '(cdr)) ''(a b c)))| subr0)
(push (@ 101))
(push (@ 102))
(mov '(cdr) a4)
(push (car a4))
(push ''(a b c))
(mov '2 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(evlis '((1+ 4) (1+ 5) (1+ 6)))| subr0)
(entry |(evlis '((1+ 4) (1+ 5) (1+ 6)))| subr0)
(mov '((|1+| 4) (|1+| 5) (|1+| 6)) a1)
(jmp evlis)
))
(loader'((fentry |(eprogn '(1 2 3))| subr0)
(entry |(eprogn '(1 2 3))| subr0)
(mov '(1 2 3) a1)
(jmp eprogn)
))
(loader'((fentry |(prog1)| subr0)
(entry |(prog1)| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(prog1 (1- 10))| subr0)
(entry |(prog1 (1- 10))| subr0)
(mov '10 a1)
(jmp |1-|)
))
(loader'((fentry |(prog1 (1+ 1) (1+ 2) (1+ 3))| subr0)
(entry |(prog1 (1+ 1) (1+ 2) (1+ 3))| subr0)
(mov '1 a1)
(jcall |1+|)
(push a1)
(mov '2 a1)
(jcall |1+|)
(mov '3 a1)
(jcall |1+|)
(pop a1)
(return)
))
(loader'((fentry |(prog2)| subr0)
(entry |(prog2)| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(prog2 1)| subr0)
(entry |(prog2 1)| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(prog2 1 2)| subr0)
(entry |(prog2 1 2)| subr0)
(mov '2 a1)
(return)
))
(loader'((fentry |(prog2 1 2 3)| subr0)
(entry |(prog2 1 2 3)| subr0)
(mov '2 a1)
(return)
))
(loader'((fentry |(prog2 1 2 3 4)| subr0)
(entry |(prog2 1 2 3 4)| subr0)
(mov '2 a1)
(return)
))
(loader'((fentry |(progn)| subr0)
(entry |(progn)| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(progn 1)| subr0)
(entry |(progn 1)| subr0)
(mov '1 a1)
(return)
))
(loader'((fentry |(progn 1 2 3)| subr0)
(entry |(progn 1 2 3)| subr0)
(mov '3 a1)
(return)
))
(loader'((fentry |'a| subr0)
(entry |'a| subr0)
(mov 'a a1)
(return)
))
(loader'((fentry |''a| subr0)
(entry |''a| subr0)
(mov ''a a1)
(return)
))
(loader'((fentry |'''a| subr0)
(entry |'''a| subr0)
(mov '''a a1)
(return)
))
(loader'((fentry |'(quote a b)| subr0)
(entry |'(quote a b)| subr0)
(mov '(quote a b) a1)
(return)
))
(loader'((fentry |'(quote . 2)| subr0)
(entry |'(quote . 2)| subr0)
(mov '(quote . 2) a1)
(return)
))
(loader'((fentry |(cons 'quote 'a)| subr0)
(entry |(cons 'quote 'a)| subr0)
(mov 'a a2)
(mov 'quote a1)
(jmp cons)
))
(loader'((fentry |(identity (1+ 3))| subr0)
(entry |(identity (1+ 3))| subr0)
(mov '3 a1)
(jcall |1+|)
(jmp identity)
))
(loader'((fentry |(comment)| subr0)
(entry |(comment)| subr0)
(mov 'comment a1)
(return)
))
(loader'((fentry |(comment 2)| subr0)
(entry |(comment 2)| subr0)
(mov 'comment a1)
(return)
))
(loader'((fentry |(precompile (car '(a)) ((mov 'a a1)) () a1)| subr0)
(entry |(precompile (car '(a)) ((mov 'a a1)) () a1)| subr0)
(mov 'a a1)
(return)
))
(loader'((fentry |(mlambda (x) x)| subr0)
(entry |(mlambda (x) x)| subr0)
(mov '((x) x) a1)
(jmp mlambda)
))
(loader'((fentry |(apply '1+ '(2))| subr0)
(entry |(apply '1+ '(2))| subr0)
(push (@ 101))
(push '|1+|)
(push '(2))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'scale '(1000 1000 1000))| subr0)
(entry |(apply 'scale '(1000 1000 1000))| subr0)
(push (@ 101))
(push 'scale)
(push '(1000 1000 1000))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply '+ '(2 3 4 5))| subr0)
(entry |(apply '+ '(2 3 4 5))| subr0)
(push (@ 101))
(push '|+|)
(push '(2 3 4 5))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'incr '(x (1+ 5)))| subr0)
(entry |(apply 'incr '(x (1+ 5)))| subr0)
(push (@ 101))
(push 'incr)
(push '(x (|1+| 5)))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply (lambda (x y) (+ x y)) '(1 2))| subr0)
(entry |(apply (lambda (x y) (+ x y)) '(1 2))| subr0)
(push (@ 101))
(bra 102)
(fentry #:|(apply (lambda (x y) (+ x y)) '(1 2))|:g105 subr2)
(entry #:|(apply (lambda (x y) (+ x y)) '(1 2))|:g105 subr2)
(push (@ 103))
(push a1)
(push a2)
(mov '2 a4)
(jmp |+|)
103
(eval ())
(return)
102
(push '#:|(apply (lambda (x y) (+ x y)) '(1 2))|:g105)
(push '(1 2))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(apply (flambda (x y) (cons x y)) '((1+ 1) (1- 2)))| subr0)
(entry |(apply (flambda (x y) (cons x y)) '((1+ 1) (1- 2)))| subr0)
(push (@ 101))
(bra 102)
(fentry #:|(apply (flambda (x y) (cons x y)) '((1+ 1) (1- 2)))|:g106 fsubr)
(entry #:|(apply (flambda (x y) (cons x y)) '((1+ 1) (1- 2)))|:g106 fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(mov a4 a2)
(jmp cons)
102
(push '#:|(apply (flambda (x y) (cons x y)) '((1+ 1) (1- 2)))|:g106)
(push '((|1+| 1) (|1-| 2)))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(funcall '1+ 2)| subr0)
(entry |(funcall '1+ 2)| subr0)
(push (@ 101))
(push '|1+|)
(push '2)
(mov '2 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'scale 1000 1000 1000)| subr0)
(entry |(funcall 'scale 1000 1000 1000)| subr0)
(push (@ 101))
(push 'scale)
(push '1000)
(push '1000)
(push '1000)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall '+)| subr0)
(entry |(funcall '+)| subr0)
(push (@ 101))
(push '|+|)
(mov '1 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall '+ 10)| subr0)
(entry |(funcall '+ 10)| subr0)
(push (@ 101))
(push '|+|)
(push '10)
(mov '2 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall '+ 10 20)| subr0)
(entry |(funcall '+ 10 20)| subr0)
(push (@ 101))
(push '|+|)
(push '10)
(push '20)
(mov '3 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall '+ 2 3 4 5)| subr0)
(entry |(funcall '+ 2 3 4 5)| subr0)
(push (@ 101))
(push '|+|)
(push '2)
(push '3)
(push '4)
(push '5)
(mov '5 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'incr 'x '(1+ 5))| subr0)
(entry |(funcall 'incr 'x '(1+ 5))| subr0)
(push (@ 101))
(push 'incr)
(push 'x)
(push '(|1+| 5))
(mov '3 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'if)| subr0)
(entry |(funcall 'if)| subr0)
(push (@ 101))
(push 'if)
(mov '1 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'if 1)| subr0)
(entry |(funcall 'if 1)| subr0)
(push (@ 101))
(push 'if)
(push '1)
(mov '2 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'if 1 2)| subr0)
(entry |(funcall 'if 1 2)| subr0)
(push (@ 101))
(push 'if)
(push '1)
(push '2)
(mov '3 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(dmd foo (x) (list '1+ x))| subr0)
(entry |(dmd foo (x) (list '1+ x))| subr0)
(mov '(foo (x) (list '|1+| x)) a1)
(jmp dmd)
))
(loader'((fentry |(funcall 'foo 3)| subr0)
(entry |(funcall 'foo 3)| subr0)
(push (@ 101))
(push 'foo)
(push '3)
(mov '2 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'foo '(3))| subr0)
(entry |(apply 'foo '(3))| subr0)
(push (@ 101))
(push 'foo)
(push '(3))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'foom 3)| subr0)
(entry |(funcall 'foom 3)| subr0)
(push (@ 101))
(push 'foom)
(push '3)
(mov '2 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'foom '(3))| subr0)
(entry |(apply 'foom '(3))| subr0)
(push (@ 101))
(push 'foom)
(push '(3))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(funcall (lambda (x y) (cons x y)) 'a 'b)| subr0)
(entry |(funcall (lambda (x y) (cons x y)) 'a 'b)| subr0)
(push (@ 101))
(bra 102)
(fentry #:|(funcall (lambda (x y) (cons x y)) 'a 'b)|:g107 subr2)
(entry #:|(funcall (lambda (x y) (cons x y)) 'a 'b)|:g107 subr2)
(jmp cons)
102
(push '#:|(funcall (lambda (x y) (cons x y)) 'a 'b)|:g107)
(push 'a)
(push 'b)
(mov '3 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(funcall (lambda &nobind (arg)) 8 8 8)| subr0)
(entry |(funcall (lambda &nobind (arg)) 8 8 8)| subr0)
(push (@ 101))
(bra 102)
(fentry #:|(funcall (lambda &nobind (arg)) 8 8 8)|:g108 nsubr)
(entry #:|(funcall (lambda &nobind (arg)) 8 8 8)|:g108 nsubr)
(push a4)
(mov (& 0) a1)
(pop a4)
(adjstk a4)
(return)
102
(push '#:|(funcall (lambda &nobind (arg)) 8 8 8)|:g108)
(push '8)
(push '8)
(push '8)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(return)
))
(putprop '|(funcall kons (1+ 1) (1+ 2))| '(kons) '#:complice:fvar)
(loader'((fentry |(funcall kons (1+ 1) (1+ 2))| subr0)
(entry |(funcall kons (1+ 1) (1+ 2))| subr0)
(push (@ 101))
(push (cvalq kons))
(mov '1 a1)
(jcall |1+|)
(push a1)
(mov '2 a1)
(jcall |1+|)
(push a1)
(mov '3 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(call (valfn 'car) '(a) () ())| subr0)
(entry |(call (valfn 'car) '(a) () ())| subr0)
(push (@ 101))
(mov 'car a1)
(jcall valfn)
(push a1)
(push '(a))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
101
(eval ())
(return)
))
(loader'((fentry |(calln (valfn 'list) '(a b c))| subr0)
(entry |(calln (valfn 'list) '(a b c))| subr0)
(mov 'list a1)
(jcall valfn)
(mov '(a b c) a2)
(jmp calln)
))
(putprop '|(mapl (lambda (x) (newl l x)) '(a (b c) d))| '(l) '#:complice:fvar)
(loader'((fentry |(mapl (lambda (x) (newl l x)) '(a (b c) d))| subr0)
(entry |(mapl (lambda (x) (newl l x)) '(a (b c) d))| subr0)
(push '(a (b c) d))
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(mov (cvalq l) a2)
(mov a4 a1)
(jcall cons)
(mov a1 (cvalq l))
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(putprop '|(map (lambda (x) (newl l x)) '(a (b c) d))| '(l) '#:complice:fvar)
(loader'((fentry |(map (lambda (x) (newl l x)) '(a (b c) d))| subr0)
(entry |(map (lambda (x) (newl l x)) '(a (b c) d))| subr0)
(push '(a (b c) d))
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(mov (cvalq l) a2)
(mov a4 a1)
(jcall cons)
(mov a1 (cvalq l))
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(putprop '|(mapc (lambda (x) (newl l x)) '(a (b c) d))| '(l) '#:complice:fvar)
(loader'((fentry |(mapc (lambda (x) (newl l x)) '(a (b c) d))| subr0)
(entry |(mapc (lambda (x) (newl l x)) '(a (b c) d))| subr0)
(push '(a (b c) d))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq l) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq l))
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry |(let ((n 0)) (map (lambda (l) (rplacd l (cddr l)) (incr n)) '(0 1 2 3)) n)| subr0)
(entry |(let ((n 0)) (map (lambda (l) (rplacd l (cddr l)) (incr n)) '(0 1 2 3)) n)| subr0)
(push '0)
(push '(0 1 2 3))
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(mov (cdr a4) a3)
(mov (cdr a3) (cdr a4))
(mov (& 1) a1)
(jcall |1+|)
(mov a1 (& 1))
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry |(maplist 'length '(a b c d))| subr0)
(entry |(maplist 'length '(a b c d))| subr0)
(push '(a b c d))
(push nil)
101
(bfcons (& 1) 102)
(push (& 1))
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(pop a1)
(jcall length)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(jmp nreverse)
))
(loader'((fentry |(mapcar 'cons '(a b c) '(1 2 3))| subr0)
(entry |(mapcar 'cons '(a b c) '(1 2 3))| subr0)
(push '(a b c))
(push '(1 2 3))
(push nil)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (& 1) a2)
(mov (cdr a2) (& 1))
(mov (car a2) a2)
(mov (car a1) a1)
(jcall cons)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((fentry |(mapcar 'list '(a b c d e f) (cirlist 1 2))| subr0)
(entry |(mapcar 'list '(a b c d e f) (cirlist 1 2))| subr0)
(push (@ 101))
(push '1)
(push '2)
(mov '2 a4)
(jmp cirlist)
101
(eval ())
(push '(a b c d |e| f))
(push a1)
(push nil)
102
(bfcons (& 2) 103)
(bfcons (& 1) 103)
(push (@ 104))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov '2 a4)
(jmp list)
104
(eval ())
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((fentry |(mapcon 'list '(1 2 3) '(4 5 6))| subr0)
(entry |(mapcon 'list '(1 2 3) '(4 5 6))| subr0)
(push '(1 2 3))
(push '(4 5 6))
(push nil)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(push (@ 103))
(push (& 3))
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(pop a4)
(push a4)
(push (& 3))
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(pop a4)
(push a4)
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((fentry |(mapcon (lambda (x) (list (car (last x)))) '(a b c))| subr0)
(entry |(mapcon (lambda (x) (list (car (last x)))) '(a b c))| subr0)
(push '(a b c))
(push nil)
101
(bfcons (& 1) 102)
(push (& 1))
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(pop a4)
(push (@ 103))
(mov a4 a1)
(jcall last)
(push (car a1))
(mov '1 a4)
(jmp list)
103
(eval ())
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(jmp nreverse)
))
(loader'((fentry |(mapcan 'list '(1 2 3) '(4 5 6))| subr0)
(entry |(mapcan 'list '(1 2 3) '(4 5 6))| subr0)
(push '(1 2 3))
(push '(4 5 6))
(push nil)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(push (@ 103))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((fentry |(mapcan 'list '(a b c d) (cirlist 1 2) '(w x y z) (cirlist 0))| subr0)
(entry |(mapcan 'list '(a b c d) (cirlist 1 2) '(w x y z) (cirlist 0))| subr0)
(push (@ 101))
(push '1)
(push '2)
(mov '2 a4)
(jmp cirlist)
101
(eval ())
(push a1)
(push (@ 102))
(push '0)
(mov '1 a4)
(jmp cirlist)
102
(eval ())
(push '(a b c d))
(push '(w x y z))
(push a1)
(push nil)
103
(bfcons (& 3) 104)
(bfcons (& 4) 104)
(bfcons (& 2) 104)
(bfcons (& 1) 104)
(push (@ 105))
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(push (car a4))
(mov (& 6) a4)
(mov (cdr a4) (& 6))
(push (car a4))
(mov (& 5) a4)
(mov (cdr a4) (& 5))
(push (car a4))
(mov (& 5) a4)
(mov (cdr a4) (& 5))
(push (car a4))
(mov '4 a4)
(jmp list)
105
(eval ())
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 103)
104
(mov (& 0) a1)
(adjstk '5)
(jmp nreverse)
))
(loader'((fentry |(mapcan (lambda (x y) (list (1+ x) (1- y))) '(1 2 3) '(1 2 3))| subr0)
(entry |(mapcan (lambda (x y) (list (1+ x) (1- y))) '(1 2 3) '(1 2 3))| subr0)
(push '(1 2 3))
(push '(1 2 3))
(push nil)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(push (@ 103))
(mov (& 2) a1)
(jcall |1+|)
(push a1)
(mov (& 2) a1)
(jcall |1-|)
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(adjstk '2)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((fentry |(every 'consp '((1) (2) (3)))| subr0)
(entry |(every 'consp '((1) (2) (3)))| subr0)
(push '((1) (2) (3)))
(push 't)
101
(bfcons (& 1) 102)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall consp)
(mov a1 (& 0))
(btnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry |(every 'eq '(1 2 3) '(1 2 3))| subr0)
(entry |(every 'eq '(1 2 3) '(1 2 3))| subr0)
(push '(1 2 3))
(push '(1 2 3))
(push 't)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (& 1) a2)
(mov (cdr a2) (& 1))
(mov (car a2) a2)
(mov (car a1) a1)
(jcall eq)
(mov a1 (& 0))
(btnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry |(every 'eq '(1 2) '(1 2 3))| subr0)
(entry |(every 'eq '(1 2) '(1 2 3))| subr0)
(push '(1 2))
(push '(1 2 3))
(push 't)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (& 1) a2)
(mov (cdr a2) (& 1))
(mov (car a2) a2)
(mov (car a1) a1)
(jcall eq)
(mov a1 (& 0))
(btnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry |(every 'eq '(1 2) '(1 3))| subr0)
(entry |(every 'eq '(1 2) '(1 3))| subr0)
(push '(1 2))
(push '(1 3))
(push 't)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (& 1) a2)
(mov (cdr a2) (& 1))
(mov (car a2) a2)
(mov (car a1) a1)
(jcall eq)
(mov a1 (& 0))
(btnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry |(every 'consp ())| subr0)
(entry |(every 'consp ())| subr0)
(push nil)
(push 't)
101
(bfcons (& 1) 102)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall consp)
(mov a1 (& 0))
(btnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry |(every (lambda (s v) (set s v)) '(x y z w) '(10 () 20 30))| subr0)
(entry |(every (lambda (s v) (set s v)) '(x y z w) '(10 () 20 30))| subr0)
(push '(x y z w))
(push '(10 () 20 30))
(push 't)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(mov (& 1) a4)
(mov (& 0) (cval a4))
(mov (& 0) a4)
(adjstk '2)
(mov a4 (& 0))
(btnil a4 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry |(any 'consp '(1 ddd (1) 10))| subr0)
(entry |(any 'consp '(1 ddd (1) 10))| subr0)
(push '(1 "ddd" (1) 10))
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall consp)
(mov a1 (& 0))
(bfnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry |(any '= '(1 2 3) '(10 2 3))| subr0)
(entry |(any '= '(1 2 3) '(10 2 3))| subr0)
(push '(1 2 3))
(push '(10 2 3))
(push nil)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(push (@ 103))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov '2 a4)
(jmp =)
103
(eval ())
(mov a1 (& 0))
(bfnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry |(any 'eq '(1 2) '(3 4 ()))| subr0)
(entry |(any 'eq '(1 2) '(3 4 ()))| subr0)
(push '(1 2))
(push '(3 4 ()))
(push nil)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (& 1) a2)
(mov (cdr a2) (& 1))
(mov (car a2) a2)
(mov (car a1) a1)
(jcall eq)
(mov a1 (& 0))
(bfnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry |(any 'not ())| subr0)
(entry |(any 'not ())| subr0)
(push nil)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(btnil (car a4) 103)
(mov nil a4)
(bra 104)
103
(mov 't a4)
104
(mov a4 (& 0))
(bfnil a4 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry |(any 'consp '((1 . 2)))| subr0)
(entry |(any 'consp '((1 . 2)))| subr0)
(push '((1 . 2)))
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall consp)
(mov a1 (& 0))
(bfnil a1 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry |(any (lambda (x y) y) '(1) '((1 . 2)))| subr0)
(entry |(any (lambda (x y) y) '(1) '((1 . 2)))| subr0)
(push '(1))
(push '((1 . 2)))
(push nil)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(mov (& 0) a4)
(adjstk '2)
(mov a4 (& 0))
(bfnil a4 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry |(any (lambda (s v) (set s v)) '(x y z w) '(() () 20 30))| subr0)
(entry |(any (lambda (s v) (set s v)) '(x y z w) '(() () 20 30))| subr0)
(push '(x y z w))
(push '(() () 20 30))
(push nil)
101
(bfcons (& 2) 102)
(bfcons (& 1) 102)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(mov (& 1) a4)
(mov (& 0) (cval a4))
(mov (& 0) a4)
(adjstk '2)
(mov a4 (& 0))
(bfnil a4 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(putprop '|(mapvector (lambda (arg) (newl x arg)) #[a b c d])| '(x) '#:complice:fvar)
(loader'((fentry |(mapvector (lambda (arg) (newl x arg)) #[a b c d])| subr0)
(entry |(mapvector (lambda (arg) (newl x arg)) #[a b c d])| subr0)
(push '0)
(push '#[a b c d])
(hgsize (& 0) a4)
(push a4)
101
(cnbge (& 2) (& 0) 102)
(hpxmov (& 1) (& 2) a4)
(mov (cvalq x) a2)
(mov a4 a1)
(jcall cons)
(mov a1 (cvalq x))
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 101)
102
(mov nil a1)
(adjstk '3)
(return)
))
(putprop '|(eval l)| '(l) '#:complice:fvar)
(loader'((fentry |(eval l)| subr0)
(entry |(eval l)| subr0)
(push (@ 101))
(push (cvalq l))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(let (i (j 10) k) (list i j k))| subr0)
(entry |(let (i (j 10) k) (list i j k))| subr0)
(push nil)
(push '10)
(push nil)
(push (@ 101))
(push (& 3))
(push (& 3))
(push (& 3))
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry |(let (((a . b) '(1 . 2)) (c 3)) (list a b c))| subr0)
(entry |(let (((a . b) '(1 . 2)) (c 3)) (list a b c))| subr0)
(push '(1 . 2))
(push '3)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(push (@ 101))
(push (& 2))
(push a4)
(push (& 3))
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry |(letv '(a (b . c) d) '(1 (2 . 3) 4) (list a b c d))| subr0)
(entry |(letv '(a (b . c) d) '(1 (2 . 3) 4) (list a b c d))| subr0)
(push '(1 (2 . 3) 4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a4) a2)
(mov (car a4) a4)
(mov (car a3) a3)
(push (@ 101))
(push (& 1))
(push a4)
(push a2)
(push a3)
(mov '4 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |(letv '(a (b . c) . d) '(1 (2 . 3) . 4) (list a b c d))| subr0)
(entry |(letv '(a (b . c) . d) '(1 (2 . 3) . 4) (list a b c d))| subr0)
(push '(1 (2 . 3) . 4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a4) a2)
(mov (car a4) a4)
(push (@ 101))
(push (& 1))
(push a4)
(push a2)
(push a3)
(mov '4 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |(letvq (a . b) '(1 2) (list a b))| subr0)
(entry |(letvq (a . b) '(1 2) (list a b))| subr0)
(push '(1 2))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push (@ 101))
(push (& 1))
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |(let ((i 10)) (lets ((i 20) (j (+ i i))) (list i j)))| subr0)
(entry |(let ((i 10)) (lets ((i 20) (j (+ i i))) (list i j)))| subr0)
(push '10)
(push '20)
(push (@ 101))
(push (& 1))
(push (& 2))
(mov '2 a4)
(jmp |+|)
101
(eval ())
(push (@ 102))
(push (& 1))
(push a1)
(mov '2 a4)
(jmp list)
102
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry |(dmd foo (x1 x2) (list 'mcons x1 'foo x2))| subr0)
(entry |(dmd foo (x1 x2) (list 'mcons x1 'foo x2))| subr0)
(mov '(foo (x1 x2) (list 'mcons x1 'foo x2)) a1)
(jmp dmd)
))
(loader'((fentry |(macroexpand1 '(foo 10 20))| subr0)
(entry |(macroexpand1 '(foo 10 20))| subr0)
(mov '(foo 10 20) a1)
(jmp macroexpand1)
))
(loader'((fentry |(monindic 'x (list 'a))| subr0)
(entry |(monindic 'x (list 'a))| subr0)
(push (@ 101))
(push '(monindic 'x (list 'a)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(monindic 'x)| subr0)
(entry |(monindic 'x)| subr0)
(push (@ 101))
(push '(monindic 'x))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(with ((monindic 'x 20)) (monindic 'x))| subr0)
(entry |(with ((monindic 'x 20)) (monindic 'x))| subr0)
(push (@ 101))
(push '(monindic 'x))
(mov '1 a4)
(jmp eval)
101
(eval ())
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push '(monindic 'x 20))
(mov '1 a4)
(jmp eval)
104
(eval ())
(push (@ 105))
(push '(monindic 'x))
(mov '1 a4)
(jmp eval)
105
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 106))
(push '(monindic 'x #:with:arg0))
(mov '1 a4)
(jmp eval)
106
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(return)
))
(loader'((fentry |(synonym 'kons 'cons)| subr0)
(entry |(synonym 'kons 'cons)| subr0)
(mov 'cons a2)
(mov 'kons a1)
(jmp synonym)
))
(loader'((fentry |(kons 'a 'b)| subr0)
(entry |(kons 'a 'b)| subr0)
(push (@ 101))
(push '(kons 'a 'b))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(synonymq conse cons)| subr0)
(entry |(synonymq conse cons)| subr0)
(mov '(conse cons) a1)
(jmp synonymq)
))
(loader'((fentry |(conse 'a 'b)| subr0)
(entry |(conse 'a 'b)| subr0)
(push (@ 101))
(push '(conse 'a 'b))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(typefn 'car)| subr0)
(entry |(typefn 'car)| subr0)
(mov 'car a1)
(jmp typefn)
))
(loader'((fentry |(typefn 'if)| subr0)
(entry |(typefn 'if)| subr0)
(mov 'if a1)
(jmp typefn)
))
(loader'((fentry |(typefn 'list)| subr0)
(entry |(typefn 'list)| subr0)
(mov 'list a1)
(jmp typefn)
))
(loader'((fentry |(remob 'babar)| subr0)
(entry |(remob 'babar)| subr0)
(mov 'babar a1)
(jmp remob)
))
(loader'((fentry |(eval '(de babar (n) (+ n n)))| subr0)
(entry |(eval '(de babar (n) (+ n n)))| subr0)
(push (@ 101))
(push '(de babar (n) (|+| n n)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(funcall 'babar 10)| subr0)
(entry |(funcall 'babar 10)| subr0)
(push (@ 101))
(push 'babar)
(push '10)
(mov '2 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(typefn 'babar)| subr0)
(entry |(typefn 'babar)| subr0)
(mov 'babar a1)
(jmp typefn)
))
(loader'((fentry |(valfn 'babar)| subr0)
(entry |(valfn 'babar)| subr0)
(mov 'babar a1)
(jmp valfn)
))
(loader'((fentry |(findfn (valfn 'babar))| subr0)
(entry |(findfn (valfn 'babar))| subr0)
(mov 'babar a1)
(jcall valfn)
(jmp findfn)
))
(loader'((fentry |(getdef 'babar)| subr0)
(entry |(getdef 'babar)| subr0)
(mov 'babar a1)
(jmp getdef)
))
(loader'((fentry |(makedef 'babar (typefn 'babar) (valfn 'babar))| subr0)
(entry |(makedef 'babar (typefn 'babar) (valfn 'babar))| subr0)
(mov 'babar a1)
(jcall typefn)
(push a1)
(mov 'babar a1)
(jcall valfn)
(mov a1 a3)
(pop a2)
(mov 'babar a1)
(jmp makedef)
))
(loader'((fentry |(setfn 'foo (typefn 'babar) (valfn 'babar))| subr0)
(entry |(setfn 'foo (typefn 'babar) (valfn 'babar))| subr0)
(mov 'babar a1)
(jcall typefn)
(push a1)
(mov 'babar a1)
(jcall valfn)
(mov a1 a3)
(pop a2)
(mov 'foo a1)
(jmp setfn)
))
(loader'((fentry |(typefn 'foo)| subr0)
(entry |(typefn 'foo)| subr0)
(mov 'foo a1)
(jmp typefn)
))
(loader'((fentry |(valfn 'foo)| subr0)
(entry |(valfn 'foo)| subr0)
(mov 'foo a1)
(jmp valfn)
))
(loader'((fentry |(foo 10)| subr0)
(entry |(foo 10)| subr0)
(push (@ 101))
(push '(foo 10))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(remfn 'foo)| subr0)
(entry |(remfn 'foo)| subr0)
(mov 'foo a1)
(jmp remfn)
))
(loader'((fentry |(t2 '(y . x))| subr0)
(entry |(t2 '(y . x))| subr0)
(push (@ 101))
(push '(t2 '(y . x)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(if t 1 2 3)| subr0)
(entry |(if t 1 2 3)| subr0)
(mov '1 a1)
(return)
101
(mov '3 a1)
(return)
))
(loader'((fentry |(if nil 1 2 3)| subr0)
(entry |(if nil 1 2 3)| subr0)
(bra 101)
(mov '1 a1)
(return)
101
(mov '3 a1)
(return)
))
(loader'((fentry |(if)| subr0)
(entry |(if)| subr0)
(bra 101)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if 1)| subr0)
(entry |(if 1)| subr0)
(btnil '1 101)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn t 1 2 3)| subr0)
(entry |(ifn t 1 2 3)| subr0)
(bra 101)
(mov '1 a1)
(return)
101
(mov '3 a1)
(return)
))
(loader'((fentry |(ifn nil 1 2 3)| subr0)
(entry |(ifn nil 1 2 3)| subr0)
(mov '1 a1)
(return)
101
(mov '3 a1)
(return)
))
(loader'((fentry |(ifn)| subr0)
(entry |(ifn)| subr0)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn 1)| subr0)
(entry |(ifn 1)| subr0)
(bfnil '1 101)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn ())| subr0)
(entry |(ifn ())| subr0)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(when t 1 2 3)| subr0)
(entry |(when t 1 2 3)| subr0)
(mov '3 a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(when nil 1 2 3)| subr0)
(entry |(when nil 1 2 3)| subr0)
(bra 101)
(mov '3 a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(when)| subr0)
(entry |(when)| subr0)
(bra 101)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(when t)| subr0)
(entry |(when t)| subr0)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(unless t 1 2 3)| subr0)
(entry |(unless t 1 2 3)| subr0)
(bra 101)
(mov '3 a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(unless nil 1 2 3)| subr0)
(entry |(unless nil 1 2 3)| subr0)
(mov '3 a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(unless)| subr0)
(entry |(unless)| subr0)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(unless t)| subr0)
(entry |(unless t)| subr0)
(bra 101)
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(or)| subr0)
(entry |(or)| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(cons (or) (or))| subr0)
(entry |(cons (or) (or))| subr0)
(mov nil a2)
(mov nil a1)
(jmp cons)
))
(loader'((fentry |(or nil)| subr0)
(entry |(or nil)| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(cons (or nil) (or nil))| subr0)
(entry |(cons (or nil) (or nil))| subr0)
(mov nil a1)
101
(mov nil a2)
102
(jmp cons)
))
(loader'((fentry |(or 1 2)| subr0)
(entry |(or 1 2)| subr0)
(mov '1 a1)
(bfnil a1 29999)
(mov '2 a1)
(return)
29999
(return)
))
(loader'((fentry |(cons (or 1 2) (or 1 2))| subr0)
(entry |(cons (or 1 2) (or 1 2))| subr0)
(mov '1 a1)
(bfnil a1 101)
(mov '2 a1)
101
(mov '1 a2)
(bfnil a2 102)
(mov '2 a2)
102
(jmp cons)
))
(loader'((fentry |(or nil nil 2 3)| subr0)
(entry |(or nil nil 2 3)| subr0)
(mov nil a1)
(bfnil a1 29999)
(mov nil a1)
(bfnil a1 29999)
(mov '2 a1)
(bfnil a1 29999)
(mov '3 a1)
(return)
29999
(return)
))
(loader'((fentry |(or nil nil 1 2 . 3)| subr0)
(entry |(or nil nil 1 2 . 3)| subr0)
(mov nil a1)
(bfnil a1 29999)
(mov nil a1)
(bfnil a1 29999)
(mov '1 a1)
(bfnil a1 29999)
(mov '2 a1)
(return)
29999
(return)
))
(loader'((fentry |(and)| subr0)
(entry |(and)| subr0)
(mov 't a1)
(return)
))
(loader'((fentry |(cons (and) (and))| subr0)
(entry |(cons (and) (and))| subr0)
(mov 't a2)
(mov 't a1)
(jmp cons)
))
(loader'((fentry |(and nil)| subr0)
(entry |(and nil)| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(cons (and nil) (and nil))| subr0)
(entry |(cons (and nil) (and nil))| subr0)
(mov nil a1)
101
(mov nil a2)
102
(jmp cons)
))
(loader'((fentry |(and 1)| subr0)
(entry |(and 1)| subr0)
(mov '1 a1)
(return)
))
(loader'((fentry |(and 1 2 3 4)| subr0)
(entry |(and 1 2 3 4)| subr0)
(mov '1 a1)
(btnil a1 29999)
(mov '2 a1)
(btnil a1 29999)
(mov '3 a1)
(btnil a1 29999)
(mov '4 a1)
(return)
29999
(return)
))
(loader'((fentry |(cons (and 1 2) (and 1 2))| subr0)
(entry |(cons (and 1 2) (and 1 2))| subr0)
(mov '1 a1)
(btnil a1 101)
(mov '2 a1)
101
(mov '1 a2)
(btnil a2 102)
(mov '2 a2)
102
(jmp cons)
))
(loader'((fentry |(and 1 2 () 4)| subr0)
(entry |(and 1 2 () 4)| subr0)
(mov '1 a1)
(btnil a1 29999)
(mov '2 a1)
(btnil a1 29999)
(mov nil a1)
(btnil a1 29999)
(mov '4 a1)
(return)
29999
(return)
))
(loader'((fentry |(and 1 2 () 3 . 4)| subr0)
(entry |(and 1 2 () 3 . 4)| subr0)
(mov '1 a1)
(btnil a1 29999)
(mov '2 a1)
(btnil a1 29999)
(mov nil a1)
(btnil a1 29999)
(mov '3 a1)
(return)
29999
(return)
))
(loader'((fentry |(cond (nil 1 2) (t 3 4 5))| subr0)
(entry |(cond (nil 1 2) (t 3 4 5))| subr0)
(bra 101)
(mov '2 a1)
(return)
101
(mov '5 a1)
(return)
))
(loader'((fentry |(cond)| subr0)
(entry |(cond)| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(cond (() 1) () (t 2))| subr0)
(entry |(cond (() 1) () (t 2))| subr0)
(bra 101)
(mov '1 a1)
(return)
101
(mov nil a1)
(bfnil a1 29999)
(mov '2 a1)
(return)
29999
(return)
))
(loader'((fentry |(selectq 'red (green 'hope) (red 'ok) (t 'no))| subr0)
(entry |(selectq 'red (green 'hope) (red 'ok) (t 'no))| subr0)
(mov 'red a1)
(cabne a1 'green 102)
(mov 'hope a1)
(return)
102
(cabne a1 'red 103)
(mov 'ok a1)
(return)
103
(mov 'no a1)
(return)
))
(loader'((fentry |(selectq 'blue (green 'hope) (red 'ok) (t 'no))| subr0)
(entry |(selectq 'blue (green 'hope) (red 'ok) (t 'no))| subr0)
(mov 'blue a1)
(cabne a1 'green 102)
(mov 'hope a1)
(return)
102
(cabne a1 'red 103)
(mov 'ok a1)
(return)
103
(mov 'no a1)
(return)
))
(loader'((fentry |(selectq 'blue (green 'hope) (red 'ok))| subr0)
(entry |(selectq 'blue (green 'hope) (red 'ok))| subr0)
(mov 'blue a1)
(cabne a1 'green 102)
(mov 'hope a1)
(return)
102
(cabne a1 'red 103)
(mov 'ok a1)
(return)
103
(mov nil a1)
(return)
))
(loader'((fentry |(selectq 'blue ((blue green red) 'color) (t 'unknow))| subr0)
(entry |(selectq 'blue ((blue green red) 'color) (t 'unknow))| subr0)
(mov 'blue a1)
(cabeq a1 'blue 103)
(cabeq a1 'green 103)
(cabne a1 'red 102)
103
(mov 'color a1)
(return)
102
(mov 'unknow a1)
(return)
))
(loader'((fentry |(selectq 'green ((blue green red) 'color) (t 'unknow))| subr0)
(entry |(selectq 'green ((blue green red) 'color) (t 'unknow))| subr0)
(mov 'green a1)
(cabeq a1 'blue 103)
(cabeq a1 'green 103)
(cabne a1 'red 102)
103
(mov 'color a1)
(return)
102
(mov 'unknow a1)
(return)
))
(loader'((fentry |(selectq 'red ((blue green red) 'color) (t 'unknow))| subr0)
(entry |(selectq 'red ((blue green red) 'color) (t 'unknow))| subr0)
(mov 'red a1)
(cabeq a1 'blue 103)
(cabeq a1 'green 103)
(cabne a1 'red 102)
103
(mov 'color a1)
(return)
102
(mov 'unknow a1)
(return)
))
(loader'((fentry |(selectq 'jaune ((blue green red) 'color) (t 'unknow))| subr0)
(entry |(selectq 'jaune ((blue green red) 'color) (t 'unknow))| subr0)
(mov 'jaune a1)
(cabeq a1 'blue 103)
(cabeq a1 'green 103)
(cabne a1 'red 102)
103
(mov 'color a1)
(return)
102
(mov 'unknow a1)
(return)
))
(loader'((fentry |(selectq 'red ((foo bar) 'ok) ((blue green red) 'color) (t 'unknow))| subr0)
(entry |(selectq 'red ((foo bar) 'ok) ((blue green red) 'color) (t 'unknow))| subr0)
(mov 'red a1)
(push a1)
(mov '("foo" "bar") a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 102)
(mov 'ok a1)
(return)
102
(cabeq a1 'blue 104)
(cabeq a1 'green 104)
(cabne a1 'red 103)
104
(mov 'color a1)
(return)
103
(mov 'unknow a1)
(return)
))
(loader'((fentry |(selectq 10 (10 'ten))| subr0)
(entry |(selectq 10 (10 'ten))| subr0)
(mov '10 a1)
(cabne a1 '10 102)
(mov 'ten a1)
(return)
102
(mov nil a1)
(return)
))
(loader'((fentry |(selectq 11 (10 'ten))| subr0)
(entry |(selectq 11 (10 'ten))| subr0)
(mov '11 a1)
(cabne a1 '10 102)
(mov 'ten a1)
(return)
102
(mov nil a1)
(return)
))
(loader'((fentry |(selectq 3.2 (3.2 'ok) (t 'no))| subr0)
(entry |(selectq 3.2 (3.2 'ok) (t 'no))| subr0)
(mov '3.2 a1)
(push a1)
(mov '3.2 a2)
(jcall equal)
(mov a1 a2)
(pop a1)
(btnil a2 102)
(mov 'ok a1)
(return)
102
(mov 'no a1)
(return)
))
(loader'((fentry |(selectq abc ((abc 3.2) 'no) (abc 'yes) (t 'unknow))| subr0)
(entry |(selectq abc ((abc 3.2) 'no) (abc 'yes) (t 'unknow))| subr0)
(mov '"abc" a1)
(push a1)
(mov '(abc 3.2) a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 102)
(mov 'no a1)
(return)
102
(push a1)
(mov '"abc" a2)
(jcall equal)
(mov a1 a2)
(pop a1)
(btnil a2 103)
(mov 'yes a1)
(return)
103
(mov 'unknow a1)
(return)
))
(loader'((fentry |(let ((a 10) (b hoe)) (selectq b (hoe (setq a 12) (list a b)) (t 12)))| subr0)
(entry |(let ((a 10) (b hoe)) (selectq b (hoe (setq a 12) (list a b)) (t 12)))| subr0)
(push '10)
(push '"hoe")
(mov (& 0) a1)
(push a1)
(mov '"hoe" a2)
(jcall equal)
(mov a1 a2)
(pop a1)
(btnil a2 102)
(mov '12 (& 1))
(push (@ 103))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp list)
103
(eval ())
(adjstk '2)
(return)
102
(mov '12 a1)
(adjstk '2)
(return)
))
(loader'((fentry |(selectq 'foo (t (1+ 2)))| subr0)
(entry |(selectq 'foo (t (1+ 2)))| subr0)
(mov 'foo a1)
(mov '2 a1)
(jmp |1+|)
))
(loader'((fentry |(selectq)| subr0)
(entry |(selectq)| subr0)
(mov nil a1)
(mov nil a1)
(return)
))
(loader'((fentry |(selectq t)| subr0)
(entry |(selectq t)| subr0)
(mov 't a1)
(mov nil a1)
(return)
))
(loader'((fentry |(selectq 1 () (1 2))| subr0)
(entry |(selectq 1 () (1 2))| subr0)
(mov '1 a1)
(cabne a1 '1 102)
(mov '2 a1)
(return)
102
(mov nil a1)
(return)
))
(loader'((fentry |(selectq 3 (3) (1 2))| subr0)
(entry |(selectq 3 (3) (1 2))| subr0)
(mov '3 a1)
(cabne a1 '3 102)
(mov nil a1)
(return)
102
(cabne a1 '1 103)
(mov '2 a1)
(return)
103
(mov nil a1)
(return)
))
(putprop '|(while s (newl l (nextl s)))| '(l s) '#:complice:fvar)
(loader'((fentry |(while s (newl l (nextl s)))| subr0)
(entry |(while s (newl l (nextl s)))| subr0)
101
(btnil (cvalq s) 102)
(mov (cvalq s) a1)
(mov (cdr a1) (cvalq s))
(mov (cvalq l) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq l))
(bra 101)
102
(mov nil a1)
(return)
))
(putprop '|(until (null s) (newl l (nextl s)))| '(l s) '#:complice:fvar)
(loader'((fentry |(until (null s) (newl l (nextl s)))| subr0)
(entry |(until (null s) (newl l (nextl s)))| subr0)
101
(btnil (cvalq s) 103)
(mov nil a4)
(bra 104)
103
(mov 't a4)
104
(bfnil a4 102)
(mov (cvalq s) a1)
(mov (cdr a1) (cvalq s))
(mov (cvalq l) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq l))
(bra 101)
102
(mov a4 a1)
(return)
))
(putprop '|(until (consp (car s)) (nextl s))| '(s) '#:complice:fvar)
(loader'((fentry |(until (consp (car s)) (nextl s))| subr0)
(entry |(until (consp (car s)) (nextl s))| subr0)
101
(mov (cvalq s) a1)
(mov (car a1) a1)
(jcall consp)
(bfnil a1 29999)
(mov (cvalq s) a4)
(mov (cdr a4) (cvalq s))
(bra 101)
29999
(return)
))
(loader'((fentry |(while)| subr0)
(entry |(while)| subr0)
102
(mov nil a1)
(return)
))
(putprop '|(repeat 10 (incr x))| '(x) '#:complice:fvar)
(loader'((fentry |(repeat 10 (incr x))| subr0)
(entry |(repeat 10 (incr x))| subr0)
(mov '10 a4)
(bra 102)
101
(push a4)
(mov (cvalq x) a1)
(jcall |1+|)
(mov a1 (cvalq x))
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(return)
))
(loader'((fentry |(repeat 0 (prin '-))| subr0)
(entry |(repeat 0 (prin '-))| subr0)
(mov '0 a4)
(bra 102)
101
(push a4)
(push (@ 103))
(push '|-|)
(mov '1 a4)
(jmp prin)
103
(eval ())
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(return)
))
(loader'((fentry |(repeat -1000 (prin '-))| subr0)
(entry |(repeat -1000 (prin '-))| subr0)
(mov '-1000 a4)
(bra 102)
101
(push a4)
(push (@ 103))
(push '|-|)
(mov '1 a4)
(jmp prin)
103
(eval ())
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(return)
))
(loader'((fentry |(repeat)| subr0)
(entry |(repeat)| subr0)
(mov 't a1)
(return)
))
(loader'((fentry |(repeat 10)| subr0)
(entry |(repeat 10)| subr0)
(mov '10 a4)
(bra 102)
101
(push a4)
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(return)
))
(loader'((fentry |(tag foo (exit foo 'ko 'ok))| subr0)
(entry |(tag foo (exit foo 'ko 'ok))| subr0)
(push (@ 101))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(mov 'ok a1)
(mov 'foo a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry |(tag foo (exit foo 'ok) (exit foo 'ko))| subr0)
(entry |(tag foo (exit foo 'ok) (exit foo 'ko))| subr0)
(push (@ 101))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(mov 'ok a1)
(mov 'foo a2)
(jmp #:llcp:exit)
(mov 'ko a1)
(mov 'foo a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry |(tag foo (tag bar (protect (exit bar 'ko) (exit foo 'ok))))| subr0)
(entry |(tag foo (tag bar (protect (exit bar 'ko) (exit foo 'ok))))| subr0)
(push (@ 101))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(push 'bar)
(push dlink)
(push tag)
(stack dlink)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(mov 'ko a1)
(mov 'bar a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 104) a3)
103
(push a2)
(mov 'ok a1)
(mov 'foo a2)
(jmp #:llcp:exit)
(pop a2)
(pop a1)
(bri a3)
104
(eval ())
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry |(present '(1 (2 . 3) 4) 3)| subr0)
(entry |(present '(1 (2 . 3) 4) 3)| subr0)
(push (@ 101))
(push '(present '(1 (2 . 3) 4) 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(present '(1 (2 . 3) 4) 5)| subr0)
(entry |(present '(1 (2 . 3) 4) 5)| subr0)
(push (@ 101))
(push '(present '(1 (2 . 3) 4) 5))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(evtag 'foo (evexit 'foo 'ko 'ok))| subr0)
(entry |(evtag 'foo (evexit 'foo 'ko 'ok))| subr0)
(push (@ 101))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(mov 'ok a1)
(mov 'foo a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry |(evtag 'foo (evexit 'foo 'ok) (evexit 'foo 'ko))| subr0)
(entry |(evtag 'foo (evexit 'foo 'ok) (evexit 'foo 'ko))| subr0)
(push (@ 101))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(mov 'ok a1)
(mov 'foo a2)
(jmp #:llcp:exit)
(mov 'ko a1)
(mov 'foo a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry |(tag foo (lock (lambda (tag val) (if tag (evexit tag val) val)) (exit foo (1+ 3))))| subr0)
(entry |(tag foo (lock (lambda (tag val) (if tag (evexit tag val) val)) (exit foo (1+ 3))))| subr0)
(push (@ 101))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(mov '3 a1)
(jcall |1+|)
(mov 'foo a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov nil a2)
(mov (@ 103) a3)
102
(push a2)
(push a3)
(bffix a2 104)
(mov nil a2)
104
(mov a2 a1)
(mov (& 2) a2)
(btnil a1 106)
(push a1)
(mov a2 a1)
(pop a2)
(jmp #:llcp:exit)
106
(mov a2 a1)
107
(btsymb (& 1) 103)
(mov (& 2) a1)
(mov (& 1) a2)
(bri (& 0))
103
(adjstk '3)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry |(tag foo (1+ (tag bar (lock (lambda (tag val) (if (eq tag 'foo) (evexit tag val) val)) (exit foo (1+ 3))))))| subr0)
(entry |(tag foo (1+ (tag bar (lock (lambda (tag val) (if (eq tag 'foo) (evexit tag val) val)) (exit foo (1+ 3))))))| subr0)
(push (@ 101))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(push 'bar)
(push dlink)
(push tag)
(stack dlink)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(mov '3 a1)
(jcall |1+|)
(mov 'foo a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov nil a2)
(mov (@ 104) a3)
103
(push a2)
(push a3)
(bffix a2 105)
(mov nil a2)
105
(mov a2 a1)
(mov (& 2) a2)
(cabne a1 'foo 107)
(push a1)
(mov a2 a1)
(pop a2)
(jmp #:llcp:exit)
107
(mov a2 a1)
108
(btsymb (& 1) 104)
(mov (& 2) a1)
(mov (& 1) a2)
(bri (& 0))
104
(adjstk '3)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(jcall |1+|)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry |(tag foo (1+ (tag bar (lock (lambda (tag val) (if (eq tag 'foo) (evexit tag val) val)) (exit bar (1+ 3))))))| subr0)
(entry |(tag foo (1+ (tag bar (lock (lambda (tag val) (if (eq tag 'foo) (evexit tag val) val)) (exit bar (1+ 3))))))| subr0)
(push (@ 101))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(push 'bar)
(push dlink)
(push tag)
(stack dlink)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(mov '3 a1)
(jcall |1+|)
(mov 'bar a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov nil a2)
(mov (@ 104) a3)
103
(push a2)
(push a3)
(bffix a2 105)
(mov nil a2)
105
(mov a2 a1)
(mov (& 2) a2)
(cabne a1 'foo 107)
(push a1)
(mov a2 a1)
(pop a2)
(jmp #:llcp:exit)
107
(mov a2 a1)
108
(btsymb (& 1) 104)
(mov (& 2) a1)
(mov (& 1) a2)
(bri (& 0))
104
(adjstk '3)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(jcall |1+|)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry |(let ((lll 10)) (tag out (let ((lll 20)) (unexit out lll))))| subr0)
(entry |(let ((lll 10)) (tag out (let ((lll 20)) (unexit out lll))))| subr0)
(push '10)
(push (@ 101))
(push 'out)
(push dlink)
(push tag)
(stack dlink)
(push '20)
(mov '(out lll) a1)
(jcall unexit)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |(protect (+ 10 20) (+ 1 2))| subr0)
(entry |(protect (+ 10 20) (+ 1 2))| subr0)
(push (@ 101))
(push dlink)
(push prot)
(stack dlink)
(push (@ 103))
(push '10)
(push '20)
(mov '2 a4)
(jmp |+|)
103
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 102) a3)
101
(push a3)
(push a2)
(push (@ 104))
(push '1)
(push '2)
(mov '2 a4)
(jmp |+|)
104
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
102
(eval ())
(return)
))
(loader'((fentry |(block foo 1 (return-from foo 2) 3)| subr0)
(entry |(block foo 1 (return-from foo 2) 3)| subr0)
(push (@ 101))
(mov 'foo a1)
(jcall #:llcp:block)
(mov '2 a1)
(mov 'foo a2)
(jmp #:llcp:retfrom)
(mov '3 a1)
(return)
101
(eval ())
(return)
))
(loader'((fentry |(block () 1 (block bar 2 (return 3) 4) 5)| subr0)
(entry |(block () 1 (block bar 2 (return 3) 4) 5)| subr0)
(push (@ 101))
(mov '() a1)
(jcall #:llcp:block)
(push (@ 102))
(mov 'bar a1)
(jcall #:llcp:block)
(mov '3 a1)
(mov '() a2)
(jmp #:llcp:retfrom)
(mov '4 a1)
(return)
102
(eval ())
(mov '5 a1)
(return)
101
(eval ())
(return)
))
(loader'((fentry |(block foo (block bar (return-from foo 10) (print ERREUR)))| subr0)
(entry |(block foo (block bar (return-from foo 10) (print ERREUR)))| subr0)
(push (@ 101))
(mov 'foo a1)
(jcall #:llcp:block)
(push (@ 102))
(mov 'bar a1)
(jcall #:llcp:block)
(mov '10 a1)
(mov 'foo a2)
(jmp #:llcp:retfrom)
(push (@ 103))
(push '"ERREUR")
(mov '1 a4)
(jmp print)
103
(eval ())
(return)
102
(eval ())
(return)
101
(eval ())
(return)
))
(loader'((fentry |(block foo (block bar (return-from foo 10)) (print ERREUR))| subr0)
(entry |(block foo (block bar (return-from foo 10)) (print ERREUR))| subr0)
(push (@ 101))
(mov 'foo a1)
(jcall #:llcp:block)
(push (@ 102))
(mov 'bar a1)
(jcall #:llcp:block)
(mov '10 a1)
(mov 'foo a2)
(jmp #:llcp:retfrom)
102
(eval ())
(push (@ 103))
(push '"ERREUR")
(mov '1 a4)
(jmp print)
103
(eval ())
(return)
101
(eval ())
(return)
))
(loader'((fentry |(block foo (tag bar (let (x) (protect (lock (lambda (tag val) val) (schedule 'identity (tagbody (return-from foo 1))))))))| subr0)
(entry |(block foo (tag bar (let (x) (protect (lock (lambda (tag val) val) (schedule 'identity (tagbody (return-from foo 1))))))))| subr0)
(push (@ 101))
(mov 'foo a1)
(jcall #:llcp:block)
(push (@ 102))
(push 'bar)
(push dlink)
(push tag)
(stack dlink)
(push nil)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(mov 'identity a1)
(push (@ 107))
(jcall #:llcp:schedule)
(push (@ 108))
(push '0)
(jcall #:llcp:tagbody)
(mov '1 a1)
(mov 'foo a2)
(jmp #:llcp:retfrom)
(eval ())
(return)
108
(eval ())
(mov nil a1)
(return)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov nil a2)
(mov (@ 106) a3)
105
(push a2)
(push a3)
(bffix a2 109)
(mov nil a2)
109
(mov a2 a1)
(mov (& 2) a2)
(btsymb (& 1) 106)
(mov (& 2) a1)
(mov (& 1) a2)
(bri (& 0))
106
(adjstk '3)
(mov (& 1) dlink)
(adjstk '3)
(push a2)
(mov (@ 104) a3)
103
(pop a1)
(bri a3)
104
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(return)
101
(eval ())
(return)
))
(loader'((fentry |(block b 1 (block bar 2 (return-from b 3) 4) 5)| subr0)
(entry |(block b 1 (block bar 2 (return-from b 3) 4) 5)| subr0)
(push (@ 101))
(mov 'b a1)
(jcall #:llcp:block)
(push (@ 102))
(mov 'bar a1)
(jcall #:llcp:block)
(mov '3 a1)
(mov 'b a2)
(jmp #:llcp:retfrom)
(mov '4 a1)
(return)
102
(eval ())
(mov '5 a1)
(return)
101
(eval ())
(return)
))
(loader'((fentry |(block foo (eval '(car '(a))) (return-from foo 10))| subr0)
(entry |(block foo (eval '(car '(a))) (return-from foo 10))| subr0)
(push (@ 101))
(mov 'foo a1)
(jcall #:llcp:block)
(push (@ 102))
(push '(car '(a)))
(mov '1 a4)
(jmp eval)
102
(eval ())
(mov '10 a1)
(mov 'foo a2)
(jmp #:llcp:retfrom)
101
(eval ())
(return)
))
(loader'((fentry |(block foo (let ((y (function (lambda () (return-from foo 10))))) (funcall y)))| subr0)
(entry |(block foo (let ((y (function (lambda () (return-from foo 10))))) (funcall y)))| subr0)
(push (@ 101))
(mov 'foo a1)
(jcall #:llcp:block)
(mov '((lambda () (return-from foo 10))) a1)
(jcall function)
(push (@ 102))
(push a1)
(mov '1 a4)
(jmp funcall)
102
(eval ())
(return)
101
(eval ())
(return)
))
(loader'((fentry |(tagbody (1+ 1) (1+ 2) (1+ 3))| subr0)
(entry |(tagbody (1+ 1) (1+ 2) (1+ 3))| subr0)
(push (@ 101))
(push '0)
(jcall #:llcp:tagbody)
(mov '1 a1)
(jcall |1+|)
(mov '2 a1)
(jcall |1+|)
(mov '3 a1)
(jcall |1+|)
(eval ())
(return)
101
(eval ())
(mov nil a1)
(return)
))
(loader'((fentry |(let (l) (tagbody (newl l 1) (newl l 2)) l)| subr0)
(entry |(let (l) (tagbody (newl l 1) (newl l 2)) l)| subr0)
(push nil)
(push (@ 101))
(push '0)
(jcall #:llcp:tagbody)
(mov (& 5) a2)
(mov '1 a1)
(jcall cons)
(mov a1 (& 5))
(mov a1 a2)
(mov '2 a1)
(jcall cons)
(mov a1 (& 5))
(eval ())
(return)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry |(let ((n 5) l) (tagbody tour (if (<= n 0) (go magne) (newl l (decr n)) (go tour)) magne) l)| subr0)
(entry |(let ((n 5) l) (tagbody tour (if (<= n 0) (go magne) (newl l (decr n)) (go tour)) magne) l)| subr0)
(push '5)
(push nil)
(push (@ 101))
(push (@ 102))
(push 'tour)
(push (@ 103))
(push 'magne)
(push '2)
(jcall #:llcp:tagbody)
102
(push (@ 106))
(push (& 11))
(push '0)
(mov '2 a4)
(jmp <=)
106
(eval ())
(btnil a1 104)
(mov 'magne a1)
(jmp #:llcp:go)
104
(mov (& 10) a1)
(jcall |1-|)
(mov a1 (& 10))
(mov (& 9) a2)
(jcall cons)
(mov a1 (& 9))
(mov 'tour a1)
(jmp #:llcp:go)
103
(eval ())
(return)
101
(eval ())
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry |(tagbody (tag foo (mapc (function (lambda (x) (if (numberp x) () (go out)))) '(1 2 t 3)) (return)) out)| subr0)
(entry |(tagbody (tag foo (mapc (function (lambda (x) (if (numberp x) () (go out)))) '(1 2 t 3)) (return)) out)| subr0)
(push (@ 101))
(push (@ 102))
(push 'out)
(push '1)
(jcall #:llcp:tagbody)
(push (@ 103))
(push 'foo)
(push dlink)
(push tag)
(stack dlink)
(push '(1 2 t 3))
104
(bfcons (& 0) 105)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall numberp)
(btnil a1 106)
(bra 107)
106
(mov 'out a1)
(jmp #:llcp:go)
107
(adjstk '1)
(bra 104)
105
(adjstk '1)
(mov nil a1)
(mov '() a2)
(jmp #:llcp:retfrom)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
102
(eval ())
(return)
101
(eval ())
(mov nil a1)
(return)
))
(loader'((fentry |(let (l (n 4)) (block foo (tagbody re (if (<= n 0) (return-from foo l)) (newl l (decr n)) (go re))))| subr0)
(entry |(let (l (n 4)) (block foo (tagbody re (if (<= n 0) (return-from foo l)) (newl l (decr n)) (go re))))| subr0)
(push nil)
(push '4)
(push (@ 101))
(mov 'foo a1)
(jcall #:llcp:block)
(push (@ 102))
(push (@ 103))
(push 're)
(push '1)
(jcall #:llcp:tagbody)
103
(push (@ 106))
(push (& 12))
(push '0)
(mov '2 a4)
(jmp <=)
106
(eval ())
(btnil a1 105)
(mov (& 12) a1)
(mov 'foo a2)
(jmp #:llcp:retfrom)
105
(mov (& 11) a1)
(jcall |1-|)
(mov a1 (& 11))
(mov (& 12) a2)
(jcall cons)
(mov a1 (& 12))
(mov 're a1)
(jmp #:llcp:go)
(eval ())
(return)
102
(eval ())
(mov nil a1)
(return)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry |(tagbody foo (tag bar (let (x) (progn (protect (lock (lambda (tag val) val) (schedule 'identity (block bar 't))))))))| subr0)
(entry |(tagbody foo (tag bar (let (x) (progn (protect (lock (lambda (tag val) val) (schedule 'identity (block bar 't))))))))| subr0)
(push (@ 101))
(push (@ 102))
(push 'foo)
(push '1)
(jcall #:llcp:tagbody)
102
(push (@ 103))
(push 'bar)
(push dlink)
(push tag)
(stack dlink)
(push nil)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(mov 'identity a1)
(push (@ 108))
(jcall #:llcp:schedule)
(push (@ 109))
(mov 'bar a1)
(jcall #:llcp:block)
(mov 't a1)
(return)
109
(eval ())
(return)
108
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov nil a2)
(mov (@ 107) a3)
106
(push a2)
(push a3)
(bffix a2 110)
(mov nil a2)
110
(mov a2 a1)
(mov (& 2) a2)
(btsymb (& 1) 107)
(mov (& 2) a1)
(mov (& 1) a2)
(bri (& 0))
107
(adjstk '3)
(mov (& 1) dlink)
(adjstk '3)
(push a2)
(mov (@ 105) a3)
104
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(eval ())
(return)
101
(eval ())
(mov nil a1)
(return)
))
(loader'((fentry |(tagbody (tagbody (go 1)) 1)| subr0)
(entry |(tagbody (tagbody (go 1)) 1)| subr0)
(push (@ 101))
(push (@ 102))
(push '1)
(push '1)
(jcall #:llcp:tagbody)
(push (@ 103))
(push '0)
(jcall #:llcp:tagbody)
(mov '1 a1)
(jmp #:llcp:go)
(eval ())
(return)
103
(eval ())
102
(eval ())
(return)
101
(eval ())
(mov nil a1)
(return)
))
(loader'((fentry |(false)| subr0)
(entry |(false)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp false)
101
(eval ())
(return)
))
(loader'((fentry |(false 1 2 3)| subr0)
(entry |(false 1 2 3)| subr0)
(push (@ 101))
(push '1)
(push '2)
(push '3)
(mov '3 a4)
(jmp false)
101
(eval ())
(return)
))
(loader'((fentry |(true)| subr0)
(entry |(true)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp true)
101
(eval ())
(return)
))
(loader'((fentry |(true 1 2 3)| subr0)
(entry |(true 1 2 3)| subr0)
(push (@ 101))
(push '1)
(push '2)
(push '3)
(mov '3 a4)
(jmp true)
101
(eval ())
(return)
))
(loader'((fentry |(null ())| subr0)
(entry |(null ())| subr0)
(btnil nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(null t)| subr0)
(entry |(null t)| subr0)
(btnil 't 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(not '(a))| subr0)
(entry |(not '(a))| subr0)
(btnil '(a) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(atom ())| subr0)
(entry |(atom ())| subr0)
(mov nil a1)
(jmp atom)
))
(loader'((fentry |(atom 'a)| subr0)
(entry |(atom 'a)| subr0)
(mov 'a a1)
(jmp atom)
))
(loader'((fentry |(atom 42)| subr0)
(entry |(atom 42)| subr0)
(mov '42 a1)
(jmp atom)
))
(loader'((fentry |(atom #[1 2])| subr0)
(entry |(atom #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp atom)
))
(loader'((fentry |(atom arg)| subr0)
(entry |(atom arg)| subr0)
(mov '"arg" a1)
(jmp atom)
))
(loader'((fentry |(atom '(a b))| subr0)
(entry |(atom '(a b))| subr0)
(mov '(a b) a1)
(jmp atom)
))
(loader'((fentry |(atomp ())| subr0)
(entry |(atomp ())| subr0)
(mov nil a1)
(jmp atom)
))
(loader'((fentry |(atomp 'a)| subr0)
(entry |(atomp 'a)| subr0)
(mov 'a a1)
(jmp atom)
))
(loader'((fentry |(atomp 42)| subr0)
(entry |(atomp 42)| subr0)
(mov '42 a1)
(jmp atom)
))
(loader'((fentry |(atomp #[1 2])| subr0)
(entry |(atomp #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp atom)
))
(loader'((fentry |(atomp arg)| subr0)
(entry |(atomp arg)| subr0)
(mov '"arg" a1)
(jmp atom)
))
(loader'((fentry |(atomp '(a b))| subr0)
(entry |(atomp '(a b))| subr0)
(mov '(a b) a1)
(jmp atom)
))
(loader'((fentry |(constantp ())| subr0)
(entry |(constantp ())| subr0)
(mov nil a1)
(jmp constantp)
))
(loader'((fentry |(constantp nil)| subr0)
(entry |(constantp nil)| subr0)
(mov nil a1)
(jmp constantp)
))
(loader'((fentry |(constantp 'nil)| subr0)
(entry |(constantp 'nil)| subr0)
(mov 'nil a1)
(jmp constantp)
))
(loader'((fentry |(constantp 'a)| subr0)
(entry |(constantp 'a)| subr0)
(mov 'a a1)
(jmp constantp)
))
(loader'((fentry |(constantp 42)| subr0)
(entry |(constantp 42)| subr0)
(mov '42 a1)
(jmp constantp)
))
(loader'((fentry |(constantp 1.14)| subr0)
(entry |(constantp 1.14)| subr0)
(mov '1.14 a1)
(jmp constantp)
))
(loader'((fentry |(constantp #[1 2])| subr0)
(entry |(constantp #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp constantp)
))
(loader'((fentry |(constantp arg)| subr0)
(entry |(constantp arg)| subr0)
(mov '"arg" a1)
(jmp constantp)
))
(loader'((fentry |(constantp '(a b))| subr0)
(entry |(constantp '(a b))| subr0)
(mov '(a b) a1)
(jmp constantp)
))
(loader'((fentry |(symbolp ())| subr0)
(entry |(symbolp ())| subr0)
(mov nil a1)
(jmp symbolp)
))
(loader'((fentry |(symbolp 'a)| subr0)
(entry |(symbolp 'a)| subr0)
(mov 'a a1)
(jmp symbolp)
))
(loader'((fentry |(symbolp 42)| subr0)
(entry |(symbolp 42)| subr0)
(mov '42 a1)
(jmp symbolp)
))
(loader'((fentry |(symbolp #[1 2])| subr0)
(entry |(symbolp #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp symbolp)
))
(loader'((fentry |(symbolp arg)| subr0)
(entry |(symbolp arg)| subr0)
(mov '"arg" a1)
(jmp symbolp)
))
(loader'((fentry |(symbolp '(a b))| subr0)
(entry |(symbolp '(a b))| subr0)
(mov '(a b) a1)
(jmp symbolp)
))
(loader'((fentry |(variablep ())| subr0)
(entry |(variablep ())| subr0)
(mov nil a1)
(jmp variablep)
))
(loader'((fentry |(variablep nil)| subr0)
(entry |(variablep nil)| subr0)
(mov nil a1)
(jmp variablep)
))
(loader'((fentry |(variablep 'nil)| subr0)
(entry |(variablep 'nil)| subr0)
(mov 'nil a1)
(jmp variablep)
))
(loader'((fentry |(variablep 'a)| subr0)
(entry |(variablep 'a)| subr0)
(mov 'a a1)
(jmp variablep)
))
(loader'((fentry |(variablep 42)| subr0)
(entry |(variablep 42)| subr0)
(mov '42 a1)
(jmp variablep)
))
(loader'((fentry |(variablep arg)| subr0)
(entry |(variablep arg)| subr0)
(mov '"arg" a1)
(jmp variablep)
))
(loader'((fentry |(variablep #[1 2])| subr0)
(entry |(variablep #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp variablep)
))
(loader'((fentry |(variablep '(a b))| subr0)
(entry |(variablep '(a b))| subr0)
(mov '(a b) a1)
(jmp variablep)
))
(loader'((fentry |(numberp ())| subr0)
(entry |(numberp ())| subr0)
(mov nil a1)
(jmp numberp)
))
(loader'((fentry |(numberp 'a)| subr0)
(entry |(numberp 'a)| subr0)
(mov 'a a1)
(jmp numberp)
))
(loader'((fentry |(numberp 42)| subr0)
(entry |(numberp 42)| subr0)
(mov '42 a1)
(jmp numberp)
))
(loader'((fentry |(numberp 20000)| subr0)
(entry |(numberp 20000)| subr0)
(mov '20000 a1)
(jmp numberp)
))
(loader'((fentry |(numberp #[1 2])| subr0)
(entry |(numberp #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp numberp)
))
(loader'((fentry |(numberp arg)| subr0)
(entry |(numberp arg)| subr0)
(mov '"arg" a1)
(jmp numberp)
))
(loader'((fentry |(numberp '(a b))| subr0)
(entry |(numberp '(a b))| subr0)
(mov '(a b) a1)
(jmp numberp)
))
(loader'((fentry |(numberp '#(1.2))| subr0)
(entry |(numberp '#(1.2))| subr0)
(mov '#(1.2) a1)
(jmp numberp)
))
(loader'((fentry |(numberp '#(a))| subr0)
(entry |(numberp '#(a))| subr0)
(mov '#("a") a1)
(jmp numberp)
))
(loader'((fentry |(stringp ())| subr0)
(entry |(stringp ())| subr0)
(mov nil a1)
(jmp stringp)
))
(loader'((fentry |(stringp 'a)| subr0)
(entry |(stringp 'a)| subr0)
(mov 'a a1)
(jmp stringp)
))
(loader'((fentry |(stringp 42)| subr0)
(entry |(stringp 42)| subr0)
(mov '42 a1)
(jmp stringp)
))
(loader'((fentry |(stringp #[1 2])| subr0)
(entry |(stringp #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp stringp)
))
(loader'((fentry |(stringp arg)| subr0)
(entry |(stringp arg)| subr0)
(mov '"arg" a1)
(jmp stringp)
))
(loader'((fentry |(stringp '(a b))| subr0)
(entry |(stringp '(a b))| subr0)
(mov '(a b) a1)
(jmp stringp)
))
(loader'((fentry |(consp ())| subr0)
(entry |(consp ())| subr0)
(mov nil a1)
(jmp consp)
))
(loader'((fentry |(consp nil)| subr0)
(entry |(consp nil)| subr0)
(mov nil a1)
(jmp consp)
))
(loader'((fentry |(consp 'nil)| subr0)
(entry |(consp 'nil)| subr0)
(mov 'nil a1)
(jmp consp)
))
(loader'((fentry |(consp 'a)| subr0)
(entry |(consp 'a)| subr0)
(mov 'a a1)
(jmp consp)
))
(loader'((fentry |(consp 42)| subr0)
(entry |(consp 42)| subr0)
(mov '42 a1)
(jmp consp)
))
(loader'((fentry |(consp #[1 2])| subr0)
(entry |(consp #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp consp)
))
(loader'((fentry |(consp arg)| subr0)
(entry |(consp arg)| subr0)
(mov '"arg" a1)
(jmp consp)
))
(loader'((fentry |(consp '(a b))| subr0)
(entry |(consp '(a b))| subr0)
(mov '(a b) a1)
(jmp consp)
))
(loader'((fentry |(listp ())| subr0)
(entry |(listp ())| subr0)
(mov nil a1)
(jmp listp)
))
(loader'((fentry |(listp nil)| subr0)
(entry |(listp nil)| subr0)
(mov nil a1)
(jmp listp)
))
(loader'((fentry |(listp 'nil)| subr0)
(entry |(listp 'nil)| subr0)
(mov 'nil a1)
(jmp listp)
))
(loader'((fentry |(listp 'a)| subr0)
(entry |(listp 'a)| subr0)
(mov 'a a1)
(jmp listp)
))
(loader'((fentry |(listp 42)| subr0)
(entry |(listp 42)| subr0)
(mov '42 a1)
(jmp listp)
))
(loader'((fentry |(listp #[1 2])| subr0)
(entry |(listp #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp listp)
))
(loader'((fentry |(listp arg)| subr0)
(entry |(listp arg)| subr0)
(mov '"arg" a1)
(jmp listp)
))
(loader'((fentry |(listp '(a b))| subr0)
(entry |(listp '(a b))| subr0)
(mov '(a b) a1)
(jmp listp)
))
(loader'((fentry |(nlistp ())| subr0)
(entry |(nlistp ())| subr0)
(mov nil a1)
(jmp nlistp)
))
(loader'((fentry |(nlistp nil)| subr0)
(entry |(nlistp nil)| subr0)
(mov nil a1)
(jmp nlistp)
))
(loader'((fentry |(nlistp 'nil)| subr0)
(entry |(nlistp 'nil)| subr0)
(mov 'nil a1)
(jmp nlistp)
))
(loader'((fentry |(nlistp 'a)| subr0)
(entry |(nlistp 'a)| subr0)
(mov 'a a1)
(jmp nlistp)
))
(loader'((fentry |(nlistp 42)| subr0)
(entry |(nlistp 42)| subr0)
(mov '42 a1)
(jmp nlistp)
))
(loader'((fentry |(nlistp #[1 2])| subr0)
(entry |(nlistp #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp nlistp)
))
(loader'((fentry |(nlistp arg)| subr0)
(entry |(nlistp arg)| subr0)
(mov '"arg" a1)
(jmp nlistp)
))
(loader'((fentry |(nlistp '(a b))| subr0)
(entry |(nlistp '(a b))| subr0)
(mov '(a b) a1)
(jmp nlistp)
))
(loader'((fentry |(eq () ())| subr0)
(entry |(eq () ())| subr0)
(mov nil a2)
(mov nil a1)
(jmp eq)
))
(loader'((fentry |(eq () nil)| subr0)
(entry |(eq () nil)| subr0)
(mov nil a2)
(mov nil a1)
(jmp eq)
))
(loader'((fentry |(eq () 'nil)| subr0)
(entry |(eq () 'nil)| subr0)
(mov 'nil a2)
(mov nil a1)
(jmp eq)
))
(loader'((fentry |(eq 'a (car '(a)))| subr0)
(entry |(eq 'a (car '(a)))| subr0)
(mov '(a) a2)
(mov (car a2) a2)
(mov 'a a1)
(jmp eq)
))
(loader'((fentry |(eq (1+ 119) 120)| subr0)
(entry |(eq (1+ 119) 120)| subr0)
(mov '119 a1)
(jcall |1+|)
(mov '120 a2)
(jmp eq)
))
(loader'((fentry |(eq (list 'a 'b) (list 'a 'b))| subr0)
(entry |(eq (list 'a 'b) (list 'a 'b))| subr0)
(push (@ 101))
(push 'a)
(push 'b)
(mov '2 a4)
(jmp list)
101
(eval ())
(push a1)
(push (@ 102))
(push 'a)
(push 'b)
(mov '2 a4)
(jmp list)
102
(eval ())
(mov a1 a2)
(pop a1)
(jmp eq)
))
(loader'((fentry |(eq #[1 2] #[1 2])| subr0)
(entry |(eq #[1 2] #[1 2])| subr0)
(mov '#[1 2] a2)
(mov '#[1 2] a1)
(jmp eq)
))
(loader'((fentry |(eq #[] #[])| subr0)
(entry |(eq #[] #[])| subr0)
(mov '#[] a2)
(mov '#[] a1)
(jmp eq)
))
(loader'((fentry |(eq ARG 'arg)| subr0)
(entry |(eq ARG 'arg)| subr0)
(mov 'arg a2)
(mov '"ARG" a1)
(jmp eq)
))
(loader'((fentry |(eq arg arg)| subr0)
(entry |(eq arg arg)| subr0)
(mov '"arg" a2)
(mov '"arg" a1)
(jmp eq)
))
(putprop '|(eq l l)| '(l) '#:complice:fvar)
(loader'((fentry |(eq l l)| subr0)
(entry |(eq l l)| subr0)
(mov (cvalq l) a2)
(mov (cvalq l) a1)
(jmp eq)
))
(loader'((fentry |(eq  )| subr0)
(entry |(eq  )| subr0)
(mov '"" a2)
(mov '"" a1)
(jmp eq)
))
(loader'((fentry |(neq 'a (car '(a)))| subr0)
(entry |(neq 'a (car '(a)))| subr0)
(mov '(a) a2)
(mov (car a2) a2)
(mov 'a a1)
(jcall eq)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(neq (1+ 119) 120)| subr0)
(entry |(neq (1+ 119) 120)| subr0)
(mov '119 a1)
(jcall |1+|)
(mov '120 a2)
(jcall eq)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(neq (list 'a 'b) (list 'a 'b))| subr0)
(entry |(neq (list 'a 'b) (list 'a 'b))| subr0)
(push (@ 103))
(push 'a)
(push 'b)
(mov '2 a4)
(jmp list)
103
(eval ())
(push a1)
(push (@ 104))
(push 'a)
(push 'b)
(mov '2 a4)
(jmp list)
104
(eval ())
(mov a1 a2)
(pop a1)
(jcall eq)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(neq #[1 2] #[1 2])| subr0)
(entry |(neq #[1 2] #[1 2])| subr0)
(mov '#[1 2] a2)
(mov '#[1 2] a1)
(jcall eq)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(neq ARG 'arg)| subr0)
(entry |(neq ARG 'arg)| subr0)
(mov 'arg a2)
(mov '"ARG" a1)
(jcall eq)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(putprop '|(neq l l)| '(l) '#:complice:fvar)
(loader'((fentry |(neq l l)| subr0)
(entry |(neq l l)| subr0)
(mov (cvalq l) a2)
(mov (cvalq l) a1)
(jcall eq)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(equal () ())| subr0)
(entry |(equal () ())| subr0)
(mov nil a2)
(mov nil a1)
(jmp equal)
))
(loader'((fentry |(equal 'a. 'A.)| subr0)
(entry |(equal 'a. 'A.)| subr0)
(mov '|A.| a2)
(mov '|a.| a1)
(jmp equal)
))
(loader'((fentry |(equal 1214 (1+ 1213))| subr0)
(entry |(equal 1214 (1+ 1213))| subr0)
(mov '1213 a1)
(jcall |1+|)
(mov a1 a2)
(mov '1214 a1)
(jmp equal)
))
(loader'((fentry |(equal (1+ 1213) 1214)| subr0)
(entry |(equal (1+ 1213) 1214)| subr0)
(mov '1213 a1)
(jcall |1+|)
(mov '1214 a2)
(jmp equal)
))
(loader'((fentry |(equal 20000 20000)| subr0)
(entry |(equal 20000 20000)| subr0)
(mov '20000 a2)
(mov '20000 a1)
(jmp equal)
))
(loader'((fentry |(equal 10 10.)| subr0)
(entry |(equal 10 10.)| subr0)
(mov '10. a2)
(mov '10 a1)
(jmp equal)
))
(loader'((fentry |(equal 10. 10)| subr0)
(entry |(equal 10. 10)| subr0)
(mov '10 a2)
(mov '10. a1)
(jmp equal)
))
(loader'((fentry |(equal 10. 10.)| subr0)
(entry |(equal 10. 10.)| subr0)
(mov '10. a2)
(mov '10. a1)
(jmp equal)
))
(loader'((fentry |(equal 10 ())| subr0)
(entry |(equal 10 ())| subr0)
(mov nil a2)
(mov '10 a1)
(jmp equal)
))
(loader'((fentry |(equal () 10)| subr0)
(entry |(equal () 10)| subr0)
(mov '10 a2)
(mov nil a1)
(jmp equal)
))
(loader'((fentry |(equal 10. ())| subr0)
(entry |(equal 10. ())| subr0)
(mov nil a2)
(mov '10. a1)
(jmp equal)
))
(loader'((fentry |(equal () 10.)| subr0)
(entry |(equal () 10.)| subr0)
(mov '10. a2)
(mov nil a1)
(jmp equal)
))
(loader'((fentry |(equal '(10) '(10.))| subr0)
(entry |(equal '(10) '(10.))| subr0)
(mov '(10.) a2)
(mov '(10) a1)
(jmp equal)
))
(loader'((fentry |(equal '(10.) '(10))| subr0)
(entry |(equal '(10.) '(10))| subr0)
(mov '(10) a2)
(mov '(10.) a1)
(jmp equal)
))
(loader'((fentry |(equal '(10.) '(10.))| subr0)
(entry |(equal '(10.) '(10.))| subr0)
(mov '(10.) a2)
(mov '(10.) a1)
(jmp equal)
))
(loader'((fentry |(equal '(10) '(t))| subr0)
(entry |(equal '(10) '(t))| subr0)
(mov '(t) a2)
(mov '(10) a1)
(jmp equal)
))
(loader'((fentry |(equal '(t) '(10))| subr0)
(entry |(equal '(t) '(10))| subr0)
(mov '(10) a2)
(mov '(t) a1)
(jmp equal)
))
(loader'((fentry |(equal '(10.) '(t))| subr0)
(entry |(equal '(10.) '(t))| subr0)
(mov '(t) a2)
(mov '(10.) a1)
(jmp equal)
))
(loader'((fentry |(equal '(t) '(10.))| subr0)
(entry |(equal '(t) '(10.))| subr0)
(mov '(10.) a2)
(mov '(t) a1)
(jmp equal)
))
(loader'((fentry |(equal #[1 2] #[1 2])| subr0)
(entry |(equal #[1 2] #[1 2])| subr0)
(mov '#[1 2] a2)
(mov '#[1 2] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1 2 3] #[1 2])| subr0)
(entry |(equal #[1 2 3] #[1 2])| subr0)
(mov '#[1 2] a2)
(mov '#[1 2 3] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1 2] #[1 2 3])| subr0)
(entry |(equal #[1 2] #[1 2 3])| subr0)
(mov '#[1 2 3] a2)
(mov '#[1 2] a1)
(jmp equal)
))
(loader'((fentry |(equal #[(1 2) (3 4)] #[(1 2) (3 5)])| subr0)
(entry |(equal #[(1 2) (3 4)] #[(1 2) (3 5)])| subr0)
(mov '#[(1 2) (3 5)] a2)
(mov '#[(1 2) (3 4)] a1)
(jmp equal)
))
(loader'((fentry |(equal #[(1 2) (3 5)] #[(1 2) (3 4)])| subr0)
(entry |(equal #[(1 2) (3 5)] #[(1 2) (3 4)])| subr0)
(mov '#[(1 2) (3 4)] a2)
(mov '#[(1 2) (3 5)] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1. 2] #[1 2])| subr0)
(entry |(equal #[1. 2] #[1 2])| subr0)
(mov '#[1 2] a2)
(mov '#[1. 2] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1 2.] #[1 2])| subr0)
(entry |(equal #[1 2.] #[1 2])| subr0)
(mov '#[1 2] a2)
(mov '#[1 2.] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1. 2.] #[1 2])| subr0)
(entry |(equal #[1. 2.] #[1 2])| subr0)
(mov '#[1 2] a2)
(mov '#[1. 2.] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1 2] #[1. 2])| subr0)
(entry |(equal #[1 2] #[1. 2])| subr0)
(mov '#[1. 2] a2)
(mov '#[1 2] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1 2] #[1 2.])| subr0)
(entry |(equal #[1 2] #[1 2.])| subr0)
(mov '#[1 2.] a2)
(mov '#[1 2] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1 2] #[1. 2.])| subr0)
(entry |(equal #[1 2] #[1. 2.])| subr0)
(mov '#[1. 2.] a2)
(mov '#[1 2] a1)
(jmp equal)
))
(loader'((fentry |(equal #[1. 2.] #[1. 2.])| subr0)
(entry |(equal #[1. 2.] #[1. 2.])| subr0)
(mov '#[1. 2.] a2)
(mov '#[1. 2.] a1)
(jmp equal)
))
(loader'((fentry |(equal Foo bar Foo bar)| subr0)
(entry |(equal Foo bar Foo bar)| subr0)
(mov '"Foo bar" a2)
(mov '"Foo bar" a1)
(jmp equal)
))
(loader'((fentry |(equal  )| subr0)
(entry |(equal  )| subr0)
(mov '"" a2)
(mov '"" a1)
(jmp equal)
))
(loader'((fentry |(equal a A)| subr0)
(entry |(equal a A)| subr0)
(mov '"A" a2)
(mov '"a" a1)
(jmp equal)
))
(loader'((fentry |(equal A a)| subr0)
(entry |(equal A a)| subr0)
(mov '"a" a2)
(mov '"A" a1)
(jmp equal)
))
(loader'((fentry |(equal '(a (b . c) d) '(a (b . c) d))| subr0)
(entry |(equal '(a (b . c) d) '(a (b . c) d))| subr0)
(mov '(a (b . c) d) a2)
(mov '(a (b . c) d) a1)
(jmp equal)
))
(loader'((fentry |(equal '(a b c d) '(a b c . d))| subr0)
(entry |(equal '(a b c d) '(a b c . d))| subr0)
(mov '(a b c . d) a2)
(mov '(a b c d) a1)
(jmp equal)
))
(loader'((fentry |(equal '(a b c . d) '(a b c d))| subr0)
(entry |(equal '(a b c . d) '(a b c d))| subr0)
(mov '(a b c d) a2)
(mov '(a b c . d) a1)
(jmp equal)
))
(loader'((fentry |(nequal () ())| subr0)
(entry |(nequal () ())| subr0)
(mov nil a2)
(mov nil a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal 1214 (1+ 1213))| subr0)
(entry |(nequal 1214 (1+ 1213))| subr0)
(mov '1213 a1)
(jcall |1+|)
(mov a1 a2)
(mov '1214 a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal 1215 1214)| subr0)
(entry |(nequal 1215 1214)| subr0)
(mov '1214 a2)
(mov '1215 a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal 1214 1215)| subr0)
(entry |(nequal 1214 1215)| subr0)
(mov '1215 a2)
(mov '1214 a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal 10. 10)| subr0)
(entry |(nequal 10. 10)| subr0)
(mov '10 a2)
(mov '10. a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal 10 10.)| subr0)
(entry |(nequal 10 10.)| subr0)
(mov '10. a2)
(mov '10 a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal 10 11.)| subr0)
(entry |(nequal 10 11.)| subr0)
(mov '11. a2)
(mov '10 a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal 10. 11)| subr0)
(entry |(nequal 10. 11)| subr0)
(mov '11 a2)
(mov '10. a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal Foo bar Foo bar)| subr0)
(entry |(nequal Foo bar Foo bar)| subr0)
(mov '"Foo bar" a2)
(mov '"Foo bar" a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(nequal '(a (b . c) d) '(a (b . d) d))| subr0)
(entry |(nequal '(a (b . c) d) '(a (b . d) d))| subr0)
(mov '(a (b . d) d) a2)
(mov '(a (b . c) d) a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(boundp ())| subr0)
(entry |(boundp ())| subr0)
(mov nil a1)
(jmp boundp)
))
(loader'((fentry |(boundp t)| subr0)
(entry |(boundp t)| subr0)
(mov 't a1)
(jmp boundp)
))
(loader'((fentry |(boundp 'sur-qu-il-existe-pas)| subr0)
(entry |(boundp 'sur-qu-il-existe-pas)| subr0)
(mov 'sur-qu-il-existe-pas a1)
(jmp boundp)
))
(loader'((fentry |(boundp '(ca doit pas marcher))| subr0)
(entry |(boundp '(ca doit pas marcher))| subr0)
(mov '(ca doit pas marcher) a1)
(jmp boundp)
))
(loader'((fentry |(if (false) t ())| subr0)
(entry |(if (false) t ())| subr0)
(push (@ 103))
(mov '0 a4)
(jmp false)
103
(eval ())
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (true) t ())| subr0)
(entry |(if (true) t ())| subr0)
(push (@ 103))
(mov '0 a4)
(jmp true)
103
(eval ())
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (null ()) t ())| subr0)
(entry |(if (null ()) t ())| subr0)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (null t) t ())| subr0)
(entry |(if (null t) t ())| subr0)
(bra 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (not '(a)) t ())| subr0)
(entry |(if (not '(a)) t ())| subr0)
(bfnil '(a) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atom ()) t ())| subr0)
(entry |(if (atom ()) t ())| subr0)
(btcons nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atom 'a) t ())| subr0)
(entry |(if (atom 'a) t ())| subr0)
(btcons 'a 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atom 42) t ())| subr0)
(entry |(if (atom 42) t ())| subr0)
(btcons '42 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atom #[1 2]) t ())| subr0)
(entry |(if (atom #[1 2]) t ())| subr0)
(btcons '#[1 2] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atom arg) t ())| subr0)
(entry |(if (atom arg) t ())| subr0)
(btcons '"arg" 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atom '(a b)) t ())| subr0)
(entry |(if (atom '(a b)) t ())| subr0)
(btcons '(a b) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atomp ()) t ())| subr0)
(entry |(if (atomp ()) t ())| subr0)
(btcons nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atomp 'a) t ())| subr0)
(entry |(if (atomp 'a) t ())| subr0)
(btcons 'a 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atomp 42) t ())| subr0)
(entry |(if (atomp 42) t ())| subr0)
(btcons '42 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atomp #[1 2]) t ())| subr0)
(entry |(if (atomp #[1 2]) t ())| subr0)
(btcons '#[1 2] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atomp arg) t ())| subr0)
(entry |(if (atomp arg) t ())| subr0)
(btcons '"arg" 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (atomp '(a b)) t ())| subr0)
(entry |(if (atomp '(a b)) t ())| subr0)
(btcons '(a b) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (constantp ()) t ())| subr0)
(entry |(if (constantp ()) t ())| subr0)
(mov nil a1)
(jcall constantp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (constantp 'a) t ())| subr0)
(entry |(if (constantp 'a) t ())| subr0)
(mov 'a a1)
(jcall constantp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (constantp 42) t ())| subr0)
(entry |(if (constantp 42) t ())| subr0)
(mov '42 a1)
(jcall constantp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (constantp #[1 2]) t ())| subr0)
(entry |(if (constantp #[1 2]) t ())| subr0)
(mov '#[1 2] a1)
(jcall constantp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (constantp arg) t ())| subr0)
(entry |(if (constantp arg) t ())| subr0)
(mov '"arg" a1)
(jcall constantp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (constantp '(a b)) t ())| subr0)
(entry |(if (constantp '(a b)) t ())| subr0)
(mov '(a b) a1)
(jcall constantp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (symbolp ()) t ())| subr0)
(entry |(if (symbolp ()) t ())| subr0)
(bfsymb nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (symbolp 'a) t ())| subr0)
(entry |(if (symbolp 'a) t ())| subr0)
(bfsymb 'a 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (symbolp 42) t ())| subr0)
(entry |(if (symbolp 42) t ())| subr0)
(bfsymb '42 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (symbolp #[1 2]) t ())| subr0)
(entry |(if (symbolp #[1 2]) t ())| subr0)
(bfsymb '#[1 2] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (symbolp arg) t ())| subr0)
(entry |(if (symbolp arg) t ())| subr0)
(bfsymb '"arg" 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (symbolp '(a b)) t ())| subr0)
(entry |(if (symbolp '(a b)) t ())| subr0)
(bfsymb '(a b) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (variablep ()) t ())| subr0)
(entry |(if (variablep ()) t ())| subr0)
(bfvar nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (variablep 'a) t ())| subr0)
(entry |(if (variablep 'a) t ())| subr0)
(bfvar 'a 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (variablep 42) t ())| subr0)
(entry |(if (variablep 42) t ())| subr0)
(bfvar '42 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (variablep arg) t ())| subr0)
(entry |(if (variablep arg) t ())| subr0)
(bfvar '"arg" 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (variablep #[1 2]) t ())| subr0)
(entry |(if (variablep #[1 2]) t ())| subr0)
(bfvar '#[1 2] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (variablep '(a b)) t ())| subr0)
(entry |(if (variablep '(a b)) t ())| subr0)
(bfvar '(a b) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (numberp ()) t ())| subr0)
(entry |(if (numberp ()) t ())| subr0)
(mov nil a1)
(jcall numberp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (numberp 'a) t ())| subr0)
(entry |(if (numberp 'a) t ())| subr0)
(mov 'a a1)
(jcall numberp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (numberp 42) t ())| subr0)
(entry |(if (numberp 42) t ())| subr0)
(mov '42 a1)
(jcall numberp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (numberp 20000) t ())| subr0)
(entry |(if (numberp 20000) t ())| subr0)
(mov '20000 a1)
(jcall numberp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (numberp #[1 2]) t ())| subr0)
(entry |(if (numberp #[1 2]) t ())| subr0)
(mov '#[1 2] a1)
(jcall numberp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (numberp arg) t ())| subr0)
(entry |(if (numberp arg) t ())| subr0)
(mov '"arg" a1)
(jcall numberp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (numberp '(a b)) t ())| subr0)
(entry |(if (numberp '(a b)) t ())| subr0)
(mov '(a b) a1)
(jcall numberp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (stringp ()) t ())| subr0)
(entry |(if (stringp ()) t ())| subr0)
(bfstrg nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (stringp 'a) t ())| subr0)
(entry |(if (stringp 'a) t ())| subr0)
(bfstrg 'a 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (stringp 42) t ())| subr0)
(entry |(if (stringp 42) t ())| subr0)
(bfstrg '42 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (stringp #[1 2]) t ())| subr0)
(entry |(if (stringp #[1 2]) t ())| subr0)
(bfstrg '#[1 2] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (stringp arg) t ())| subr0)
(entry |(if (stringp arg) t ())| subr0)
(bfstrg '"arg" 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (stringp '(a b)) t ())| subr0)
(entry |(if (stringp '(a b)) t ())| subr0)
(bfstrg '(a b) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (consp ()) t ())| subr0)
(entry |(if (consp ()) t ())| subr0)
(bfcons nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (consp nil) t ())| subr0)
(entry |(if (consp nil) t ())| subr0)
(bfcons nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (consp 'nil) t ())| subr0)
(entry |(if (consp 'nil) t ())| subr0)
(bfcons 'nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (consp 'a) t ())| subr0)
(entry |(if (consp 'a) t ())| subr0)
(bfcons 'a 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (consp 42) t ())| subr0)
(entry |(if (consp 42) t ())| subr0)
(bfcons '42 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (consp #[1 2]) t ())| subr0)
(entry |(if (consp #[1 2]) t ())| subr0)
(bfcons '#[1 2] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (consp arg) t ())| subr0)
(entry |(if (consp arg) t ())| subr0)
(bfcons '"arg" 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (consp '(a b)) t ())| subr0)
(entry |(if (consp '(a b)) t ())| subr0)
(bfcons '(a b) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (listp ()) t ())| subr0)
(entry |(if (listp ()) t ())| subr0)
(mov nil a1)
(jcall listp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (listp nil) t ())| subr0)
(entry |(if (listp nil) t ())| subr0)
(mov nil a1)
(jcall listp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (listp 'nil) t ())| subr0)
(entry |(if (listp 'nil) t ())| subr0)
(mov 'nil a1)
(jcall listp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (listp 'a) t ())| subr0)
(entry |(if (listp 'a) t ())| subr0)
(mov 'a a1)
(jcall listp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (listp 42) t ())| subr0)
(entry |(if (listp 42) t ())| subr0)
(mov '42 a1)
(jcall listp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (listp #[1 2]) t ())| subr0)
(entry |(if (listp #[1 2]) t ())| subr0)
(mov '#[1 2] a1)
(jcall listp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (listp arg) t ())| subr0)
(entry |(if (listp arg) t ())| subr0)
(mov '"arg" a1)
(jcall listp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (listp '(a b)) t ())| subr0)
(entry |(if (listp '(a b)) t ())| subr0)
(mov '(a b) a1)
(jcall listp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nlistp ()) t ())| subr0)
(entry |(if (nlistp ()) t ())| subr0)
(mov nil a1)
(jcall nlistp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nlistp nil) t ())| subr0)
(entry |(if (nlistp nil) t ())| subr0)
(mov nil a1)
(jcall nlistp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nlistp 'nil) t ())| subr0)
(entry |(if (nlistp 'nil) t ())| subr0)
(mov 'nil a1)
(jcall nlistp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nlistp 'a) t ())| subr0)
(entry |(if (nlistp 'a) t ())| subr0)
(mov 'a a1)
(jcall nlistp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nlistp 42) t ())| subr0)
(entry |(if (nlistp 42) t ())| subr0)
(mov '42 a1)
(jcall nlistp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nlistp #[1 2]) t ())| subr0)
(entry |(if (nlistp #[1 2]) t ())| subr0)
(mov '#[1 2] a1)
(jcall nlistp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nlistp arg) t ())| subr0)
(entry |(if (nlistp arg) t ())| subr0)
(mov '"arg" a1)
(jcall nlistp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nlistp '(a b)) t ())| subr0)
(entry |(if (nlistp '(a b)) t ())| subr0)
(mov '(a b) a1)
(jcall nlistp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq () ()) t ())| subr0)
(entry |(if (eq () ()) t ())| subr0)
(cabne nil nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq () nil) t ())| subr0)
(entry |(if (eq () nil) t ())| subr0)
(cabne nil nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq () 'nil) t ())| subr0)
(entry |(if (eq () 'nil) t ())| subr0)
(cabne nil 'nil 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq 'a (car '(a))) t ())| subr0)
(entry |(if (eq 'a (car '(a))) t ())| subr0)
(mov '(a) a4)
(cabne 'a (car a4) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq (1+ 119) 120) t ())| subr0)
(entry |(if (eq (1+ 119) 120) t ())| subr0)
(mov '119 a1)
(jcall |1+|)
(cabne a1 '120 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq '(a b) '(a b)) t ())| subr0)
(entry |(if (eq '(a b) '(a b)) t ())| subr0)
(cabne '(a b) '(a b) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq #[1 2] #[1 2]) t ())| subr0)
(entry |(if (eq #[1 2] #[1 2]) t ())| subr0)
(cabne '#[1 2] '#[1 2] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq #[] #[]) () t)| subr0)
(entry |(if (eq #[] #[]) () t)| subr0)
(cabne '#[] '#[] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(if (eq ARG 'arg) t ())| subr0)
(entry |(if (eq ARG 'arg) t ())| subr0)
(cabne '"ARG" 'arg 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq arg arg) t ())| subr0)
(entry |(if (eq arg arg) t ())| subr0)
(cabne '"arg" '"arg" 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(putprop '|(if (setq l '(a b c)) t ())| '(l) '#:complice:fvar)
(loader'((fentry |(if (setq l '(a b c)) t ())| subr0)
(entry |(if (setq l '(a b c)) t ())| subr0)
(mov '(a b c) (cvalq l))
(btnil '(a b c) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(putprop '|(if (eq l l) t ())| '(l) '#:complice:fvar)
(loader'((fentry |(if (eq l l) t ())| subr0)
(entry |(if (eq l l) t ())| subr0)
(cabne (cvalq l) (cvalq l) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eq  ) t ())| subr0)
(entry |(if (eq  ) t ())| subr0)
(cabne '"" '"" 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neq 'a (car '(a))) t ())| subr0)
(entry |(if (neq 'a (car '(a))) t ())| subr0)
(mov '(a) a4)
(cabeq 'a (car a4) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neq (1+ 119) 120) t ())| subr0)
(entry |(if (neq (1+ 119) 120) t ())| subr0)
(mov '119 a1)
(jcall |1+|)
(cabeq a1 '120 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neq '(a b) '(a b)) t ())| subr0)
(entry |(if (neq '(a b) '(a b)) t ())| subr0)
(cabeq '(a b) '(a b) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neq #[1 2] #[1 2]) t ())| subr0)
(entry |(if (neq #[1 2] #[1 2]) t ())| subr0)
(cabeq '#[1 2] '#[1 2] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neq ARG 'arg) t ())| subr0)
(entry |(if (neq ARG 'arg) t ())| subr0)
(cabeq '"ARG" 'arg 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(putprop '|(if (neq l l) t ())| '(l) '#:complice:fvar)
(loader'((fentry |(if (neq l l) t ())| subr0)
(entry |(if (neq l l) t ())| subr0)
(cabeq (cvalq l) (cvalq l) 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal () ()) t ())| subr0)
(entry |(if (equal () ()) t ())| subr0)
(mov nil a2)
(mov nil a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal 'a. 'A.) t ())| subr0)
(entry |(if (equal 'a. 'A.) t ())| subr0)
(mov '|A.| a2)
(mov '|a.| a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal 1214 (1+ 1213)) t ())| subr0)
(entry |(if (equal 1214 (1+ 1213)) t ())| subr0)
(mov '1213 a1)
(jcall |1+|)
(mov a1 a2)
(mov '1214 a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal 20000 20000) t ())| subr0)
(entry |(if (equal 20000 20000) t ())| subr0)
(mov '20000 a2)
(mov '20000 a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal 10 10.) t ())| subr0)
(entry |(if (equal 10 10.) t ())| subr0)
(mov '10. a2)
(mov '10 a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal #[1 2] #[1 2]) t ())| subr0)
(entry |(if (equal #[1 2] #[1 2]) t ())| subr0)
(mov '#[1 2] a2)
(mov '#[1 2] a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal #[1 2 3] #[1 2]) t ())| subr0)
(entry |(if (equal #[1 2 3] #[1 2]) t ())| subr0)
(mov '#[1 2] a2)
(mov '#[1 2 3] a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal #[(1 2) (3 4)] #[(1 2) (3 5)]) t ())| subr0)
(entry |(if (equal #[(1 2) (3 4)] #[(1 2) (3 5)]) t ())| subr0)
(mov '#[(1 2) (3 5)] a2)
(mov '#[(1 2) (3 4)] a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal Foo bar Foo bar) t ())| subr0)
(entry |(if (equal Foo bar Foo bar) t ())| subr0)
(mov '"Foo bar" a2)
(mov '"Foo bar" a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal  ) t ())| subr0)
(entry |(if (equal  ) t ())| subr0)
(mov '"" a2)
(mov '"" a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal a A) t ())| subr0)
(entry |(if (equal a A) t ())| subr0)
(mov '"A" a2)
(mov '"a" a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal '(a (b . c) d) '(a (b . c) d)) t ())| subr0)
(entry |(if (equal '(a (b . c) d) '(a (b . c) d)) t ())| subr0)
(mov '(a (b . c) d) a2)
(mov '(a (b . c) d) a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (equal '(a b c d) '(a b c . d)) t ())| subr0)
(entry |(if (equal '(a b c d) '(a b c . d)) t ())| subr0)
(mov '(a b c . d) a2)
(mov '(a b c d) a1)
(jcall equal)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nequal () ()) t ())| subr0)
(entry |(if (nequal () ()) t ())| subr0)
(mov nil a2)
(mov nil a1)
(jcall equal)
(bfnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nequal 1214 (1+ 1213)) t ())| subr0)
(entry |(if (nequal 1214 (1+ 1213)) t ())| subr0)
(mov '1213 a1)
(jcall |1+|)
(mov a1 a2)
(mov '1214 a1)
(jcall equal)
(bfnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nequal 1215 1214) t ())| subr0)
(entry |(if (nequal 1215 1214) t ())| subr0)
(mov '1214 a2)
(mov '1215 a1)
(jcall equal)
(bfnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nequal Foo bar Foo bar) t ())| subr0)
(entry |(if (nequal Foo bar Foo bar) t ())| subr0)
(mov '"Foo bar" a2)
(mov '"Foo bar" a1)
(jcall equal)
(bfnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (nequal '(a (b . c) d) '(a (b . d) d)) t ())| subr0)
(entry |(if (nequal '(a (b . c) d) '(a (b . d) d)) t ())| subr0)
(mov '(a (b . d) d) a2)
(mov '(a (b . c) d) a1)
(jcall equal)
(bfnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (boundp ()) t ())| subr0)
(entry |(if (boundp ()) t ())| subr0)
(mov nil a1)
(jcall boundp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (boundp t) t ())| subr0)
(entry |(if (boundp t) t ())| subr0)
(mov 't a1)
(jcall boundp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (boundp 'sur-qu-il-existe-pas) t ())| subr0)
(entry |(if (boundp 'sur-qu-il-existe-pas) t ())| subr0)
(mov 'sur-qu-il-existe-pas a1)
(jcall boundp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (boundp '(ca doit pas marcher)) t ())| subr0)
(entry |(if (boundp '(ca doit pas marcher)) t ())| subr0)
(mov '(ca doit pas marcher) a1)
(jcall boundp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (false) () t)| subr0)
(entry |(ifn (false) () t)| subr0)
(push (@ 103))
(mov '0 a4)
(jmp false)
103
(eval ())
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (true) () t)| subr0)
(entry |(ifn (true) () t)| subr0)
(push (@ 103))
(mov '0 a4)
(jmp true)
103
(eval ())
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (null ()) () t)| subr0)
(entry |(ifn (null ()) () t)| subr0)
(bra 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (null t) () t)| subr0)
(entry |(ifn (null t) () t)| subr0)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (not '(a)) () t)| subr0)
(entry |(ifn (not '(a)) () t)| subr0)
(btnil '(a) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atom ()) () t)| subr0)
(entry |(ifn (atom ()) () t)| subr0)
(bfcons nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atom 'a) () t)| subr0)
(entry |(ifn (atom 'a) () t)| subr0)
(bfcons 'a 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atom 42) () t)| subr0)
(entry |(ifn (atom 42) () t)| subr0)
(bfcons '42 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atom #[1 2]) () t)| subr0)
(entry |(ifn (atom #[1 2]) () t)| subr0)
(bfcons '#[1 2] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atom arg) () t)| subr0)
(entry |(ifn (atom arg) () t)| subr0)
(bfcons '"arg" 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atom '(a b)) () t)| subr0)
(entry |(ifn (atom '(a b)) () t)| subr0)
(bfcons '(a b) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atomp ()) () t)| subr0)
(entry |(ifn (atomp ()) () t)| subr0)
(bfcons nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atomp 'a) () t)| subr0)
(entry |(ifn (atomp 'a) () t)| subr0)
(bfcons 'a 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atomp 42) () t)| subr0)
(entry |(ifn (atomp 42) () t)| subr0)
(bfcons '42 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atomp #[1 2]) () t)| subr0)
(entry |(ifn (atomp #[1 2]) () t)| subr0)
(bfcons '#[1 2] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atomp arg) () t)| subr0)
(entry |(ifn (atomp arg) () t)| subr0)
(bfcons '"arg" 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (atomp '(a b)) () t)| subr0)
(entry |(ifn (atomp '(a b)) () t)| subr0)
(bfcons '(a b) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (constantp ()) () t)| subr0)
(entry |(ifn (constantp ()) () t)| subr0)
(mov nil a1)
(jcall constantp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (constantp 'a) () t)| subr0)
(entry |(ifn (constantp 'a) () t)| subr0)
(mov 'a a1)
(jcall constantp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (constantp 42) () t)| subr0)
(entry |(ifn (constantp 42) () t)| subr0)
(mov '42 a1)
(jcall constantp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (constantp #[1 2]) () t)| subr0)
(entry |(ifn (constantp #[1 2]) () t)| subr0)
(mov '#[1 2] a1)
(jcall constantp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (constantp arg) () t)| subr0)
(entry |(ifn (constantp arg) () t)| subr0)
(mov '"arg" a1)
(jcall constantp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (constantp '(a b)) () t)| subr0)
(entry |(ifn (constantp '(a b)) () t)| subr0)
(mov '(a b) a1)
(jcall constantp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (symbolp ()) () t)| subr0)
(entry |(ifn (symbolp ()) () t)| subr0)
(btsymb nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (symbolp 'a) () t)| subr0)
(entry |(ifn (symbolp 'a) () t)| subr0)
(btsymb 'a 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (symbolp 42) () t)| subr0)
(entry |(ifn (symbolp 42) () t)| subr0)
(btsymb '42 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (symbolp #[1 2]) () t)| subr0)
(entry |(ifn (symbolp #[1 2]) () t)| subr0)
(btsymb '#[1 2] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (symbolp arg) () t)| subr0)
(entry |(ifn (symbolp arg) () t)| subr0)
(btsymb '"arg" 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (symbolp '(a b)) () t)| subr0)
(entry |(ifn (symbolp '(a b)) () t)| subr0)
(btsymb '(a b) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (variablep ()) () t)| subr0)
(entry |(ifn (variablep ()) () t)| subr0)
(btvar nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (variablep 'a) () t)| subr0)
(entry |(ifn (variablep 'a) () t)| subr0)
(btvar 'a 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (variablep 42) () t)| subr0)
(entry |(ifn (variablep 42) () t)| subr0)
(btvar '42 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (variablep arg) () t)| subr0)
(entry |(ifn (variablep arg) () t)| subr0)
(btvar '"arg" 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (variablep #[1 2]) () t)| subr0)
(entry |(ifn (variablep #[1 2]) () t)| subr0)
(btvar '#[1 2] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (variablep '(a b)) () t)| subr0)
(entry |(ifn (variablep '(a b)) () t)| subr0)
(btvar '(a b) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (numberp ()) () t)| subr0)
(entry |(ifn (numberp ()) () t)| subr0)
(mov nil a1)
(jcall numberp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (numberp 'a) () t)| subr0)
(entry |(ifn (numberp 'a) () t)| subr0)
(mov 'a a1)
(jcall numberp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (numberp 42) () t)| subr0)
(entry |(ifn (numberp 42) () t)| subr0)
(mov '42 a1)
(jcall numberp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (numberp 20000) () t)| subr0)
(entry |(ifn (numberp 20000) () t)| subr0)
(mov '20000 a1)
(jcall numberp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (numberp #[1 2]) () t)| subr0)
(entry |(ifn (numberp #[1 2]) () t)| subr0)
(mov '#[1 2] a1)
(jcall numberp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (numberp arg) () t)| subr0)
(entry |(ifn (numberp arg) () t)| subr0)
(mov '"arg" a1)
(jcall numberp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (numberp '(a b)) () t)| subr0)
(entry |(ifn (numberp '(a b)) () t)| subr0)
(mov '(a b) a1)
(jcall numberp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(if (integerp 2) t ())| subr0)
(entry |(if (integerp 2) t ())| subr0)
(mov '2 a1)
(jcall integerp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (integerp -2) t ())| subr0)
(entry |(if (integerp -2) t ())| subr0)
(mov '-2 a1)
(jcall integerp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (integerp 2.) t ())| subr0)
(entry |(if (integerp 2.) t ())| subr0)
(mov '2. a1)
(jcall integerp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (integerp -2.) t ())| subr0)
(entry |(if (integerp -2.) t ())| subr0)
(mov '-2. a1)
(jcall integerp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (integerp 0.) t ())| subr0)
(entry |(if (integerp 0.) t ())| subr0)
(mov '0. a1)
(jcall integerp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (integerp 'foo) t ())| subr0)
(entry |(if (integerp 'foo) t ())| subr0)
(mov 'foo a1)
(jcall integerp)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (floatp 2) t ())| subr0)
(entry |(if (floatp 2) t ())| subr0)
(bffloat '2 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (floatp -2) t ())| subr0)
(entry |(if (floatp -2) t ())| subr0)
(bffloat '-2 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (floatp 2.) t ())| subr0)
(entry |(if (floatp 2.) t ())| subr0)
(bffloat '2. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (floatp -2.) t ())| subr0)
(entry |(if (floatp -2.) t ())| subr0)
(bffloat '-2. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (floatp 0.) t ())| subr0)
(entry |(if (floatp 0.) t ())| subr0)
(bffloat '0. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (floatp 'foo) t ())| subr0)
(entry |(if (floatp 'foo) t ())| subr0)
(bffloat 'foo 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (stringp ()) () t)| subr0)
(entry |(ifn (stringp ()) () t)| subr0)
(btstrg nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (stringp 'a) () t)| subr0)
(entry |(ifn (stringp 'a) () t)| subr0)
(btstrg 'a 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (stringp 42) () t)| subr0)
(entry |(ifn (stringp 42) () t)| subr0)
(btstrg '42 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (stringp #[1 2]) () t)| subr0)
(entry |(ifn (stringp #[1 2]) () t)| subr0)
(btstrg '#[1 2] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (stringp arg) () t)| subr0)
(entry |(ifn (stringp arg) () t)| subr0)
(btstrg '"arg" 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (stringp '(a b)) () t)| subr0)
(entry |(ifn (stringp '(a b)) () t)| subr0)
(btstrg '(a b) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (consp ()) () t)| subr0)
(entry |(ifn (consp ()) () t)| subr0)
(btcons nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (consp nil) () t)| subr0)
(entry |(ifn (consp nil) () t)| subr0)
(btcons nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (consp 'nil) () t)| subr0)
(entry |(ifn (consp 'nil) () t)| subr0)
(btcons 'nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (consp 'a) () t)| subr0)
(entry |(ifn (consp 'a) () t)| subr0)
(btcons 'a 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (consp 42) () t)| subr0)
(entry |(ifn (consp 42) () t)| subr0)
(btcons '42 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (consp #[1 2]) () t)| subr0)
(entry |(ifn (consp #[1 2]) () t)| subr0)
(btcons '#[1 2] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (consp arg) () t)| subr0)
(entry |(ifn (consp arg) () t)| subr0)
(btcons '"arg" 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (consp '(a b)) () t)| subr0)
(entry |(ifn (consp '(a b)) () t)| subr0)
(btcons '(a b) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (listp ()) () t)| subr0)
(entry |(ifn (listp ()) () t)| subr0)
(mov nil a1)
(jcall listp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (listp nil) () t)| subr0)
(entry |(ifn (listp nil) () t)| subr0)
(mov nil a1)
(jcall listp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (listp 'nil) () t)| subr0)
(entry |(ifn (listp 'nil) () t)| subr0)
(mov 'nil a1)
(jcall listp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (listp 'a) () t)| subr0)
(entry |(ifn (listp 'a) () t)| subr0)
(mov 'a a1)
(jcall listp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (listp 42) () t)| subr0)
(entry |(ifn (listp 42) () t)| subr0)
(mov '42 a1)
(jcall listp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (listp #[1 2]) () t)| subr0)
(entry |(ifn (listp #[1 2]) () t)| subr0)
(mov '#[1 2] a1)
(jcall listp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (listp arg) () t)| subr0)
(entry |(ifn (listp arg) () t)| subr0)
(mov '"arg" a1)
(jcall listp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (listp '(a b)) () t)| subr0)
(entry |(ifn (listp '(a b)) () t)| subr0)
(mov '(a b) a1)
(jcall listp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nlistp ()) () t)| subr0)
(entry |(ifn (nlistp ()) () t)| subr0)
(mov nil a1)
(jcall nlistp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nlistp nil) () t)| subr0)
(entry |(ifn (nlistp nil) () t)| subr0)
(mov nil a1)
(jcall nlistp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nlistp 'nil) () t)| subr0)
(entry |(ifn (nlistp 'nil) () t)| subr0)
(mov 'nil a1)
(jcall nlistp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nlistp 'a) () t)| subr0)
(entry |(ifn (nlistp 'a) () t)| subr0)
(mov 'a a1)
(jcall nlistp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nlistp 42) () t)| subr0)
(entry |(ifn (nlistp 42) () t)| subr0)
(mov '42 a1)
(jcall nlistp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nlistp #[1 2]) () t)| subr0)
(entry |(ifn (nlistp #[1 2]) () t)| subr0)
(mov '#[1 2] a1)
(jcall nlistp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nlistp arg) () t)| subr0)
(entry |(ifn (nlistp arg) () t)| subr0)
(mov '"arg" a1)
(jcall nlistp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nlistp '(a b)) () t)| subr0)
(entry |(ifn (nlistp '(a b)) () t)| subr0)
(mov '(a b) a1)
(jcall nlistp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq () ()) () t)| subr0)
(entry |(ifn (eq () ()) () t)| subr0)
(cabeq nil nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq () nil) () t)| subr0)
(entry |(ifn (eq () nil) () t)| subr0)
(cabeq nil nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq () 'nil) () t)| subr0)
(entry |(ifn (eq () 'nil) () t)| subr0)
(cabeq nil 'nil 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq 'a (car '(a))) () t)| subr0)
(entry |(ifn (eq 'a (car '(a))) () t)| subr0)
(mov '(a) a4)
(cabeq 'a (car a4) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq (1+ 119) 120) () t)| subr0)
(entry |(ifn (eq (1+ 119) 120) () t)| subr0)
(mov '119 a1)
(jcall |1+|)
(cabeq a1 '120 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq '(a b) '(a b)) () t)| subr0)
(entry |(ifn (eq '(a b) '(a b)) () t)| subr0)
(cabeq '(a b) '(a b) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq #[1 2] #[1 2]) () t)| subr0)
(entry |(ifn (eq #[1 2] #[1 2]) () t)| subr0)
(cabeq '#[1 2] '#[1 2] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq #[] #[]) t ())| subr0)
(entry |(ifn (eq #[] #[]) t ())| subr0)
(cabeq '#[] '#[] 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (eq ARG 'arg) () t)| subr0)
(entry |(ifn (eq ARG 'arg) () t)| subr0)
(cabeq '"ARG" 'arg 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq arg arg) () t)| subr0)
(entry |(ifn (eq arg arg) () t)| subr0)
(cabeq '"arg" '"arg" 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(putprop '|(ifn (setq l '(a b c)) () t)| '(l) '#:complice:fvar)
(loader'((fentry |(ifn (setq l '(a b c)) () t)| subr0)
(entry |(ifn (setq l '(a b c)) () t)| subr0)
(mov '(a b c) (cvalq l))
(bfnil '(a b c) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(putprop '|(ifn (eq l l) () t)| '(l) '#:complice:fvar)
(loader'((fentry |(ifn (eq l l) () t)| subr0)
(entry |(ifn (eq l l) () t)| subr0)
(cabeq (cvalq l) (cvalq l) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (eq  ) () t)| subr0)
(entry |(ifn (eq  ) () t)| subr0)
(cabeq '"" '"" 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (neq 'a (car '(a))) () t)| subr0)
(entry |(ifn (neq 'a (car '(a))) () t)| subr0)
(mov '(a) a4)
(cabne 'a (car a4) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (neq (1+ 119) 120) () t)| subr0)
(entry |(ifn (neq (1+ 119) 120) () t)| subr0)
(mov '119 a1)
(jcall |1+|)
(cabne a1 '120 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (neq '(a b) '(a b)) () t)| subr0)
(entry |(ifn (neq '(a b) '(a b)) () t)| subr0)
(cabne '(a b) '(a b) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (neq #[1 2] #[1 2]) () t)| subr0)
(entry |(ifn (neq #[1 2] #[1 2]) () t)| subr0)
(cabne '#[1 2] '#[1 2] 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (neq ARG 'arg) () t)| subr0)
(entry |(ifn (neq ARG 'arg) () t)| subr0)
(cabne '"ARG" 'arg 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(putprop '|(ifn (neq l l) () t)| '(l) '#:complice:fvar)
(loader'((fentry |(ifn (neq l l) () t)| subr0)
(entry |(ifn (neq l l) () t)| subr0)
(cabne (cvalq l) (cvalq l) 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal () ()) () t)| subr0)
(entry |(ifn (equal () ()) () t)| subr0)
(mov nil a2)
(mov nil a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal 'a. 'A.) () t)| subr0)
(entry |(ifn (equal 'a. 'A.) () t)| subr0)
(mov '|A.| a2)
(mov '|a.| a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal 1214 (1+ 1213)) () t)| subr0)
(entry |(ifn (equal 1214 (1+ 1213)) () t)| subr0)
(mov '1213 a1)
(jcall |1+|)
(mov a1 a2)
(mov '1214 a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal 20000 20000) () t)| subr0)
(entry |(ifn (equal 20000 20000) () t)| subr0)
(mov '20000 a2)
(mov '20000 a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal 10 10.) () t)| subr0)
(entry |(ifn (equal 10 10.) () t)| subr0)
(mov '10. a2)
(mov '10 a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal #[1 2] #[1 2]) () t)| subr0)
(entry |(ifn (equal #[1 2] #[1 2]) () t)| subr0)
(mov '#[1 2] a2)
(mov '#[1 2] a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal #[1 2 3] #[1 2]) () t)| subr0)
(entry |(ifn (equal #[1 2 3] #[1 2]) () t)| subr0)
(mov '#[1 2] a2)
(mov '#[1 2 3] a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal #[(1 2) (3 4)] #[(1 2) (3 5)]) () t)| subr0)
(entry |(ifn (equal #[(1 2) (3 4)] #[(1 2) (3 5)]) () t)| subr0)
(mov '#[(1 2) (3 5)] a2)
(mov '#[(1 2) (3 4)] a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal Foo bar Foo bar) () t)| subr0)
(entry |(ifn (equal Foo bar Foo bar) () t)| subr0)
(mov '"Foo bar" a2)
(mov '"Foo bar" a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal  ) () t)| subr0)
(entry |(ifn (equal  ) () t)| subr0)
(mov '"" a2)
(mov '"" a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal a A) () t)| subr0)
(entry |(ifn (equal a A) () t)| subr0)
(mov '"A" a2)
(mov '"a" a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal '(a (b . c) d) '(a (b . c) d)) () t)| subr0)
(entry |(ifn (equal '(a (b . c) d) '(a (b . c) d)) () t)| subr0)
(mov '(a (b . c) d) a2)
(mov '(a (b . c) d) a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (equal '(a b c d) '(a b c . d)) () t)| subr0)
(entry |(ifn (equal '(a b c d) '(a b c . d)) () t)| subr0)
(mov '(a b c . d) a2)
(mov '(a b c d) a1)
(jcall equal)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nequal () ()) () t)| subr0)
(entry |(ifn (nequal () ()) () t)| subr0)
(mov nil a2)
(mov nil a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nequal 1214 (1+ 1213)) () t)| subr0)
(entry |(ifn (nequal 1214 (1+ 1213)) () t)| subr0)
(mov '1213 a1)
(jcall |1+|)
(mov a1 a2)
(mov '1214 a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nequal 1215 1214) () t)| subr0)
(entry |(ifn (nequal 1215 1214) () t)| subr0)
(mov '1214 a2)
(mov '1215 a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nequal Foo bar Foo bar) () t)| subr0)
(entry |(ifn (nequal Foo bar Foo bar) () t)| subr0)
(mov '"Foo bar" a2)
(mov '"Foo bar" a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (nequal '(a (b . c) d) '(a (b . d) d)) () t)| subr0)
(entry |(ifn (nequal '(a (b . c) d) '(a (b . d) d)) () t)| subr0)
(mov '(a (b . d) d) a2)
(mov '(a (b . c) d) a1)
(jcall equal)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (boundp ()) () t)| subr0)
(entry |(ifn (boundp ()) () t)| subr0)
(mov nil a1)
(jcall boundp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (boundp t) () t)| subr0)
(entry |(ifn (boundp t) () t)| subr0)
(mov 't a1)
(jcall boundp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (boundp 'sur-qu-il-existe-pas) () t)| subr0)
(entry |(ifn (boundp 'sur-qu-il-existe-pas) () t)| subr0)
(mov 'sur-qu-il-existe-pas a1)
(jcall boundp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(ifn (boundp '(ca doit pas marcher)) () t)| subr0)
(entry |(ifn (boundp '(ca doit pas marcher)) () t)| subr0)
(mov '(ca doit pas marcher) a1)
(jcall boundp)
(bfnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(loader'((fentry |(type-of ())| subr0)
(entry |(type-of ())| subr0)
(mov nil a1)
(jmp type-of)
))
(loader'((fentry |(type-of t)| subr0)
(entry |(type-of t)| subr0)
(mov 't a1)
(jmp type-of)
))
(loader'((fentry |(type-of 10)| subr0)
(entry |(type-of 10)| subr0)
(mov '10 a1)
(jmp type-of)
))
(loader'((fentry |(type-of 10.)| subr0)
(entry |(type-of 10.)| subr0)
(mov '10. a1)
(jmp type-of)
))
(loader'((fentry |(type-of Foo)| subr0)
(entry |(type-of Foo)| subr0)
(mov '"Foo" a1)
(jmp type-of)
))
(loader'((fentry |(type-of #[1 2])| subr0)
(entry |(type-of #[1 2])| subr0)
(mov '#[1 2] a1)
(jmp type-of)
))
(loader'((fentry |(type-of '(a b))| subr0)
(entry |(type-of '(a b))| subr0)
(mov '(a b) a1)
(jmp type-of)
))
(loader'((fentry |(type-of '#(a . b))| subr0)
(entry |(type-of '#(a . b))| subr0)
(mov '#(a . b) a1)
(jmp type-of)
))
(loader'((fentry |(type-of '#(123 123))| subr0)
(entry |(type-of '#(123 123))| subr0)
(mov '#(123 123) a1)
(jmp type-of)
))
(loader'((fentry |(type-of '#((123 . 123) . 123))| subr0)
(entry |(type-of '#((123 . 123) . 123))| subr0)
(mov '#((123 . 123) . 123) a1)
(jmp type-of)
))
(loader'((fentry |(type-of '#((a b c) ()))| subr0)
(entry |(type-of '#((a b c) ()))| subr0)
(mov '#((a b c) ()) a1)
(jmp type-of)
))
(loader'((fentry |(car '(a . b))| subr0)
(entry |(car '(a . b))| subr0)
(mov '(a . b) a1)
(mov (car a1) a1)
(return)
))
(loader'((fentry |(cdr '(a . b))| subr0)
(entry |(cdr '(a . b))| subr0)
(mov '(a . b) a1)
(mov (cdr a1) a1)
(return)
))
(loader'((fentry |(caar '((a . c) b . d))| subr0)
(entry |(caar '((a . c) b . d))| subr0)
(mov '((a . c) b . d) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(return)
))
(loader'((fentry |(cadr '((a . c) b . d))| subr0)
(entry |(cadr '((a . c) b . d))| subr0)
(mov '((a . c) b . d) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
))
(loader'((fentry |(cdar '((a . c) b . d))| subr0)
(entry |(cdar '((a . c) b . d))| subr0)
(mov '((a . c) b . d) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(return)
))
(loader'((fentry |(cddr '((a . c) b . d))| subr0)
(entry |(cddr '((a . c) b . d))| subr0)
(mov '((a . c) b . d) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(caaar l)| '(l) '#:complice:fvar)
(loader'((fentry |(caaar l)| subr0)
(entry |(caaar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(caadr l)| '(l) '#:complice:fvar)
(loader'((fentry |(caadr l)| subr0)
(entry |(caadr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(cadar l)| '(l) '#:complice:fvar)
(loader'((fentry |(cadar l)| subr0)
(entry |(cadar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(caddr l)| '(l) '#:complice:fvar)
(loader'((fentry |(caddr l)| subr0)
(entry |(caddr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(cdaar l)| '(l) '#:complice:fvar)
(loader'((fentry |(cdaar l)| subr0)
(entry |(cdaar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cdadr l)| '(l) '#:complice:fvar)
(loader'((fentry |(cdadr l)| subr0)
(entry |(cdadr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cddar l)| '(l) '#:complice:fvar)
(loader'((fentry |(cddar l)| subr0)
(entry |(cddar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cdddr l)| '(l) '#:complice:fvar)
(loader'((fentry |(cdddr l)| subr0)
(entry |(cdddr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(caaaar l)| '(l) '#:complice:fvar)
(loader'((fentry |(caaaar l)| subr0)
(entry |(caaaar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(caaadr l)| '(l) '#:complice:fvar)
(loader'((fentry |(caaadr l)| subr0)
(entry |(caaadr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(caadar l)| '(l) '#:complice:fvar)
(loader'((fentry |(caadar l)| subr0)
(entry |(caadar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(caaddr l)| '(l) '#:complice:fvar)
(loader'((fentry |(caaddr l)| subr0)
(entry |(caaddr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(cadaar l)| '(l) '#:complice:fvar)
(loader'((fentry |(cadaar l)| subr0)
(entry |(cadaar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(cadadr l)| '(l) '#:complice:fvar)
(loader'((fentry |(cadadr l)| subr0)
(entry |(cadadr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(caddar l)| '(l) '#:complice:fvar)
(loader'((fentry |(caddar l)| subr0)
(entry |(caddar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(cadddr l)| '(l) '#:complice:fvar)
(loader'((fentry |(cadddr l)| subr0)
(entry |(cadddr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
))
(putprop '|(cdaaar l)| '(l) '#:complice:fvar)
(loader'((fentry |(cdaaar l)| subr0)
(entry |(cdaaar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cdaadr l)| '(l) '#:complice:fvar)
(loader'((fentry |(cdaadr l)| subr0)
(entry |(cdaadr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cdadar l)| '(l) '#:complice:fvar)
(loader'((fentry |(cdadar l)| subr0)
(entry |(cdadar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cdaddr l)| '(l) '#:complice:fvar)
(loader'((fentry |(cdaddr l)| subr0)
(entry |(cdaddr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cddaar l)| '(l) '#:complice:fvar)
(loader'((fentry |(cddaar l)| subr0)
(entry |(cddaar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cddadr l)| '(l) '#:complice:fvar)
(loader'((fentry |(cddadr l)| subr0)
(entry |(cddadr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cdddar l)| '(l) '#:complice:fvar)
(loader'((fentry |(cdddar l)| subr0)
(entry |(cdddar l)| subr0)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(cddddr l)| '(l) '#:complice:fvar)
(loader'((fentry |(cddddr l)| subr0)
(entry |(cddddr l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(return)
))
(loader'((fentry |(memq 'c '(a b c d e))| subr0)
(entry |(memq 'c '(a b c d e))| subr0)
(mov '(a b c d |e|) a2)
(mov 'c a1)
(jmp memq)
))
(loader'((fentry |(memq 'c '(a . c))| subr0)
(entry |(memq 'c '(a . c))| subr0)
(mov '(a . c) a2)
(mov 'c a1)
(jmp memq)
))
(loader'((fentry |(memq 'z '(a b c d e))| subr0)
(entry |(memq 'z '(a b c d e))| subr0)
(mov '(a b c d |e|) a2)
(mov 'z a1)
(jmp memq)
))
(loader'((fentry |(member 'c '(a b c d e))| subr0)
(entry |(member 'c '(a b c d e))| subr0)
(mov '(a b c d |e|) a2)
(mov 'c a1)
(jmp member)
))
(loader'((fentry |(member 'z '(a b c d e))| subr0)
(entry |(member 'z '(a b c d e))| subr0)
(mov '(a b c d |e|) a2)
(mov 'z a1)
(jmp member)
))
(loader'((fentry |(member 'f '(a . f))| subr0)
(entry |(member 'f '(a . f))| subr0)
(mov '(a . f) a2)
(mov 'f a1)
(jmp member)
))
(loader'((fentry |(member '(a b) '(a (a b) c))| subr0)
(entry |(member '(a b) '(a (a b) c))| subr0)
(mov '(a (a b) c) a2)
(mov '(a b) a1)
(jmp member)
))
(putprop '|(tailp ll l)| '(l ll) '#:complice:fvar)
(loader'((fentry |(tailp ll l)| subr0)
(entry |(tailp ll l)| subr0)
(mov (cvalq l) a2)
(mov (cvalq ll) a1)
(jmp tailp)
))
(loader'((fentry |(tailp '(c d) '(a b c d))| subr0)
(entry |(tailp '(c d) '(a b c d))| subr0)
(mov '(a b c d) a2)
(mov '(c d) a1)
(jmp tailp)
))
(loader'((fentry |(nthcdr 3 '(a b c d e f))| subr0)
(entry |(nthcdr 3 '(a b c d e f))| subr0)
(mov '(a b c d |e| f) a2)
(mov '3 a1)
(jmp nthcdr)
))
(loader'((fentry |(nthcdr 10 '(a b c d e . f))| subr0)
(entry |(nthcdr 10 '(a b c d e . f))| subr0)
(mov '(a b c d |e| . f) a2)
(mov '10 a1)
(jmp nthcdr)
))
(loader'((fentry |(nthcdr 1 '(a b))| subr0)
(entry |(nthcdr 1 '(a b))| subr0)
(mov '(a b) a2)
(mov '1 a1)
(jmp nthcdr)
))
(loader'((fentry |(nthcdr 0 '(a b))| subr0)
(entry |(nthcdr 0 '(a b))| subr0)
(mov '(a b) a2)
(mov '0 a1)
(jmp nthcdr)
))
(loader'((fentry |(nthcdr -100 '(a b))| subr0)
(entry |(nthcdr -100 '(a b))| subr0)
(mov '(a b) a2)
(mov '-100 a1)
(jmp nthcdr)
))
(loader'((fentry |(nth 3 '(a b c d e f))| subr0)
(entry |(nth 3 '(a b c d e f))| subr0)
(mov '(a b c d |e| f) a2)
(mov '3 a1)
(jmp nth)
))
(loader'((fentry |(nth 100 '(a b c))| subr0)
(entry |(nth 100 '(a b c))| subr0)
(mov '(a b c) a2)
(mov '100 a1)
(jmp nth)
))
(loader'((fentry |(nth 0 '(a b))| subr0)
(entry |(nth 0 '(a b))| subr0)
(mov '(a b) a2)
(mov '0 a1)
(jmp nth)
))
(loader'((fentry |(nth -1 '(a b))| subr0)
(entry |(nth -1 '(a b))| subr0)
(mov '(a b) a2)
(mov '-1 a1)
(jmp nth)
))
(loader'((fentry |(nth -10000 '(a b))| subr0)
(entry |(nth -10000 '(a b))| subr0)
(mov '(a b) a2)
(mov '-10000 a1)
(jmp nth)
))
(loader'((fentry |(last 120)| subr0)
(entry |(last 120)| subr0)
(mov '120 a1)
(jmp last)
))
(loader'((fentry |(last '(a b c))| subr0)
(entry |(last '(a b c))| subr0)
(mov '(a b c) a1)
(jmp last)
))
(loader'((fentry |(last '(a b c . d))| subr0)
(entry |(last '(a b c . d))| subr0)
(mov '(a b c . d) a1)
(jmp last)
))
(loader'((fentry |(length ())| subr0)
(entry |(length ())| subr0)
(mov nil a1)
(jmp length)
))
(loader'((fentry |(length 10)| subr0)
(entry |(length 10)| subr0)
(mov '10 a1)
(jmp length)
))
(loader'((fentry |(length '(1 1 1))| subr0)
(entry |(length '(1 1 1))| subr0)
(mov '(1 1 1) a1)
(jmp length)
))
(loader'((fentry |(length '(a b . c))| subr0)
(entry |(length '(a b . c))| subr0)
(mov '(a b . c) a1)
(jmp length)
))
(putprop '|(tconsmk x)| '(x) '#:complice:fvar)
(loader'((fentry |(tconsmk x)| subr0)
(entry |(tconsmk x)| subr0)
(mov (cvalq x) a1)
(jmp tconsmk)
))
(putprop '|(tconscl x)| '(x) '#:complice:fvar)
(loader'((fentry |(tconscl x)| subr0)
(entry |(tconscl x)| subr0)
(mov (cvalq x) a1)
(jmp tconscl)
))
(loader'((fentry |(gc)| subr0)
(entry |(gc)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp gc)
101
(eval ())
(return)
))
(putprop '|(consp x)| '(x) '#:complice:fvar)
(loader'((fentry |(consp x)| subr0)
(entry |(consp x)| subr0)
(mov (cvalq x) a1)
(jmp consp)
))
(putprop '|(tconsp x)| '(x) '#:complice:fvar)
(loader'((fentry |(tconsp x)| subr0)
(entry |(tconsp x)| subr0)
(mov (cvalq x) a1)
(jmp tconsp)
))
(putprop '|(eq (car x) 'a)| '(x) '#:complice:fvar)
(loader'((fentry |(eq (car x) 'a)| subr0)
(entry |(eq (car x) 'a)| subr0)
(mov (cvalq x) a1)
(mov 'a a2)
(mov (car a1) a1)
(jmp eq)
))
(putprop '|(tconsp (cdr x))| '(x) '#:complice:fvar)
(loader'((fentry |(tconsp (cdr x))| subr0)
(entry |(tconsp (cdr x))| subr0)
(mov (cvalq x) a1)
(mov (cdr a1) a1)
(jmp tconsp)
))
(putprop '|(rplaca x 'z)| '(x) '#:complice:fvar)
(loader'((fentry |(rplaca x 'z)| subr0)
(entry |(rplaca x 'z)| subr0)
(mov (cvalq x) a4)
(mov 'z (car a4))
(mov a4 a1)
(return)
))
(putprop '|(rplacd x 'a)| '(x) '#:complice:fvar)
(loader'((fentry |(rplacd x 'a)| subr0)
(entry |(rplacd x 'a)| subr0)
(mov (cvalq x) a4)
(mov 'a (cdr a4))
(mov a4 a1)
(return)
))
(putprop '|(tconsp (car x))| '(x) '#:complice:fvar)
(loader'((fentry |(tconsp (car x))| subr0)
(entry |(tconsp (car x))| subr0)
(mov (cvalq x) a1)
(mov (car a1) a1)
(jmp tconsp)
))
(putprop '|(tconsp (cons (car x) (cdr x)))| '(x) '#:complice:fvar)
(loader'((fentry |(tconsp (cons (car x) (cdr x)))| subr0)
(entry |(tconsp (cons (car x) (cdr x)))| subr0)
(mov (cvalq x) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall cons)
(jmp tconsp)
))
(loader'((fentry |(cons 'a ())| subr0)
(entry |(cons 'a ())| subr0)
(mov nil a2)
(mov 'a a1)
(jmp cons)
))
(loader'((fentry |(cons 'a '(b c))| subr0)
(entry |(cons 'a '(b c))| subr0)
(mov '(b c) a2)
(mov 'a a1)
(jmp cons)
))
(putprop '|(equal (cons (car l) (cdr l)) l)| '(l) '#:complice:fvar)
(loader'((fentry |(equal (cons (car l) (cdr l)) l)| subr0)
(entry |(equal (cons (car l) (cdr l)) l)| subr0)
(mov (cvalq l) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall cons)
(mov (cvalq l) a2)
(jmp equal)
))
(loader'((fentry |(xcons 'a ())| subr0)
(entry |(xcons 'a ())| subr0)
(mov nil a2)
(mov 'a a1)
(jmp xcons)
))
(loader'((fentry |(xcons 'a 'b)| subr0)
(entry |(xcons 'a 'b)| subr0)
(mov 'b a2)
(mov 'a a1)
(jmp xcons)
))
(putprop '|(xcons (incr x) (incr x))| '(x) '#:complice:fvar)
(loader'((fentry |(xcons (incr x) (incr x))| subr0)
(entry |(xcons (incr x) (incr x))| subr0)
(mov (cvalq x) a1)
(jcall |1+|)
(mov a1 (cvalq x))
(push a1)
(jcall |1+|)
(mov a1 (cvalq x))
(mov a1 a2)
(pop a1)
(jmp xcons)
))
(loader'((fentry |(ncons ())| subr0)
(entry |(ncons ())| subr0)
(mov nil a1)
(jmp ncons)
))
(loader'((fentry |(ncons 'a)| subr0)
(entry |(ncons 'a)| subr0)
(mov 'a a1)
(jmp ncons)
))
(loader'((fentry |(mcons)| subr0)
(entry |(mcons)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry |(mcons 'a)| subr0)
(entry |(mcons 'a)| subr0)
(push (@ 101))
(push 'a)
(mov '1 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry |(mcons 'a 'b)| subr0)
(entry |(mcons 'a 'b)| subr0)
(push (@ 101))
(push 'a)
(push 'b)
(mov '2 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry |(mcons 'a 'b 'c)| subr0)
(entry |(mcons 'a 'b 'c)| subr0)
(push (@ 101))
(push 'a)
(push 'b)
(push 'c)
(mov '3 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry |(mcons 'a 'b 'c 'd)| subr0)
(entry |(mcons 'a 'b 'c 'd)| subr0)
(push (@ 101))
(push 'a)
(push 'b)
(push 'c)
(push 'd)
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry |(list)| subr0)
(entry |(list)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry |(list 'a 'b 'c)| subr0)
(entry |(list 'a 'b 'c)| subr0)
(push (@ 101))
(push 'a)
(push 'b)
(push 'c)
(mov '3 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry |(kwote ())| subr0)
(entry |(kwote ())| subr0)
(mov nil a1)
(jmp kwote)
))
(loader'((fentry |(kwote 'a)| subr0)
(entry |(kwote 'a)| subr0)
(mov 'a a1)
(jmp kwote)
))
(loader'((fentry |(kwote (cdr '(a . b)))| subr0)
(entry |(kwote (cdr '(a . b)))| subr0)
(mov '(a . b) a1)
(mov (cdr a1) a1)
(jmp kwote)
))
(loader'((fentry |(kwote '(a b c))| subr0)
(entry |(kwote '(a b c))| subr0)
(mov '(a b c) a1)
(jmp kwote)
))
(loader'((fentry |(makelist 0 ())| subr0)
(entry |(makelist 0 ())| subr0)
(mov nil a2)
(mov '0 a1)
(jmp makelist)
))
(loader'((fentry |(makelist 3 ())| subr0)
(entry |(makelist 3 ())| subr0)
(mov nil a2)
(mov '3 a1)
(jmp makelist)
))
(loader'((fentry |(makelist -1 ())| subr0)
(entry |(makelist -1 ())| subr0)
(mov nil a2)
(mov '-1 a1)
(jmp makelist)
))
(loader'((fentry |(makelist 4 'a)| subr0)
(entry |(makelist 4 'a)| subr0)
(mov 'a a2)
(mov '4 a1)
(jmp makelist)
))
(loader'((fentry |(length (makelist 10000 t))| subr0)
(entry |(length (makelist 10000 t))| subr0)
(mov 't a2)
(mov '10000 a1)
(jcall makelist)
(jmp length)
))
(loader'((fentry |(length (makelist 0 t))| subr0)
(entry |(length (makelist 0 t))| subr0)
(mov 't a2)
(mov '0 a1)
(jcall makelist)
(jmp length)
))
(loader'((fentry |(append '(a b c) ())| subr0)
(entry |(append '(a b c) ())| subr0)
(push (@ 101))
(push '(a b c))
(push nil)
(mov '2 a4)
(jmp append)
101
(eval ())
(return)
))
(loader'((fentry |(append () '(d e f))| subr0)
(entry |(append () '(d e f))| subr0)
(push (@ 101))
(push nil)
(push '(d |e| f))
(mov '2 a4)
(jmp append)
101
(eval ())
(return)
))
(loader'((fentry |(append '(a b c) '(d e f) '(g h))| subr0)
(entry |(append '(a b c) '(d e f) '(g h))| subr0)
(push (@ 101))
(push '(a b c))
(push '(d |e| f))
(push '(g h))
(mov '3 a4)
(jmp append)
101
(eval ())
(return)
))
(loader'((fentry |(append () '(a) () '(b) () '(c))| subr0)
(entry |(append () '(a) () '(b) () '(c))| subr0)
(push (@ 101))
(push nil)
(push '(a))
(push nil)
(push '(b))
(push nil)
(push '(c))
(mov '6 a4)
(jmp append)
101
(eval ())
(return)
))
(loader'((fentry |(append '(a) () '(b) () '(c) ())| subr0)
(entry |(append '(a) () '(b) () '(c) ())| subr0)
(push (@ 101))
(push '(a))
(push nil)
(push '(b))
(push nil)
(push '(c))
(push nil)
(mov '6 a4)
(jmp append)
101
(eval ())
(return)
))
(putprop '|(append l)| '(l) '#:complice:fvar)
(loader'((fentry |(append l)| subr0)
(entry |(append l)| subr0)
(push (@ 101))
(push (cvalq l))
(mov '1 a4)
(jmp append)
101
(eval ())
(return)
))
(putprop '|(eq l (append l))| '(l) '#:complice:fvar)
(loader'((fentry |(eq l (append l))| subr0)
(entry |(eq l (append l))| subr0)
(push (cvalq l))
(push (@ 101))
(push (cvalq l))
(mov '1 a4)
(jmp append)
101
(eval ())
(mov a1 a2)
(pop a1)
(jmp eq)
))
(putprop '|(eq l (append l ()))| '(l) '#:complice:fvar)
(loader'((fentry |(eq l (append l ()))| subr0)
(entry |(eq l (append l ()))| subr0)
(push (cvalq l))
(push (@ 101))
(push (cvalq l))
(push nil)
(mov '2 a4)
(jmp append)
101
(eval ())
(mov a1 a2)
(pop a1)
(jmp eq)
))
(putprop '|(append l 'z)| '(l) '#:complice:fvar)
(loader'((fentry |(append l 'z)| subr0)
(entry |(append l 'z)| subr0)
(push (@ 101))
(push (cvalq l))
(push 'z)
(mov '2 a4)
(jmp append)
101
(eval ())
(return)
))
(loader'((fentry |(append1 '(a) 'b)| subr0)
(entry |(append1 '(a) 'b)| subr0)
(mov 'b a2)
(mov '(a) a1)
(jmp append1)
))
(loader'((fentry |(append1 () 'b)| subr0)
(entry |(append1 () 'b)| subr0)
(mov 'b a2)
(mov nil a1)
(jmp append1)
))
(loader'((fentry |(append1 '(a) ())| subr0)
(entry |(append1 '(a) ())| subr0)
(mov nil a2)
(mov '(a) a1)
(jmp append1)
))
(loader'((fentry |(reverse 'a)| subr0)
(entry |(reverse 'a)| subr0)
(mov 'a a1)
(jmp reverse)
))
(loader'((fentry |(reverse '(a b c))| subr0)
(entry |(reverse '(a b c))| subr0)
(mov '(a b c) a1)
(jmp reverse)
))
(loader'((fentry |(reverse '(a (b c) d))| subr0)
(entry |(reverse '(a (b c) d))| subr0)
(mov '(a (b c) d) a1)
(jmp reverse)
))
(loader'((fentry |(reverse '(a b c . d))| subr0)
(entry |(reverse '(a b c . d))| subr0)
(mov '(a b c . d) a1)
(jmp reverse)
))
(loader'((fentry |(copylist 'a)| subr0)
(entry |(copylist 'a)| subr0)
(mov 'a a1)
(jmp copylist)
))
(loader'((fentry |(copylist '(a (b (c (d)))))| subr0)
(entry |(copylist '(a (b (c (d)))))| subr0)
(mov '(a (b (c (d)))) a1)
(jmp copylist)
))
(loader'((fentry |(copylist '#(a b . #(d)))| subr0)
(entry |(copylist '#(a b . #(d)))| subr0)
(mov '#(a b . #(d)) a1)
(jmp copylist)
))
(putprop '|(eq strg strg)| '(strg) '#:complice:fvar)
(loader'((fentry |(eq strg strg)| subr0)
(entry |(eq strg strg)| subr0)
(mov (cvalq strg) a2)
(mov (cvalq strg) a1)
(jmp eq)
))
(putprop '|(eq strg (copy strg))| '(strg) '#:complice:fvar)
(loader'((fentry |(eq strg (copy strg))| subr0)
(entry |(eq strg (copy strg))| subr0)
(push (cvalq strg))
(mov (cvalq strg) a1)
(jcall copy)
(mov a1 a2)
(pop a1)
(jmp eq)
))
(putprop '|(equal strg (copy strg))| '(strg) '#:complice:fvar)
(loader'((fentry |(equal strg (copy strg))| subr0)
(entry |(equal strg (copy strg))| subr0)
(push (cvalq strg))
(mov (cvalq strg) a1)
(jcall copy)
(mov a1 a2)
(pop a1)
(jmp equal)
))
(putprop '|(eq vect vect)| '(vect) '#:complice:fvar)
(loader'((fentry |(eq vect vect)| subr0)
(entry |(eq vect vect)| subr0)
(mov (cvalq vect) a2)
(mov (cvalq vect) a1)
(jmp eq)
))
(putprop '|(eq vect (copy vect))| '(vect) '#:complice:fvar)
(loader'((fentry |(eq vect (copy vect))| subr0)
(entry |(eq vect (copy vect))| subr0)
(push (cvalq vect))
(mov (cvalq vect) a1)
(jcall copy)
(mov a1 a2)
(pop a1)
(jmp eq)
))
(putprop '|(equal vect (copy vect))| '(vect) '#:complice:fvar)
(loader'((fentry |(equal vect (copy vect))| subr0)
(entry |(equal vect (copy vect))| subr0)
(push (cvalq vect))
(mov (cvalq vect) a1)
(jcall copy)
(mov a1 a2)
(pop a1)
(jmp equal)
))
(loader'((fentry |(copy '#(a b . #(d)))| subr0)
(entry |(copy '#(a b . #(d)))| subr0)
(mov '#(a b . #(d)) a1)
(jmp copy)
))
(loader'((fentry |(firstn 3 'a)| subr0)
(entry |(firstn 3 'a)| subr0)
(mov 'a a2)
(mov '3 a1)
(jmp firstn)
))
(loader'((fentry |(firstn 3 '(a b c d e f))| subr0)
(entry |(firstn 3 '(a b c d e f))| subr0)
(mov '(a b c d |e| f) a2)
(mov '3 a1)
(jmp firstn)
))
(loader'((fentry |(firstn 5 '(a b c d))| subr0)
(entry |(firstn 5 '(a b c d))| subr0)
(mov '(a b c d) a2)
(mov '5 a1)
(jmp firstn)
))
(loader'((fentry |(firstn 5 '(a b c . d))| subr0)
(entry |(firstn 5 '(a b c . d))| subr0)
(mov '(a b c . d) a2)
(mov '5 a1)
(jmp firstn)
))
(loader'((fentry |(firstn 0 '(a b c))| subr0)
(entry |(firstn 0 '(a b c))| subr0)
(mov '(a b c) a2)
(mov '0 a1)
(jmp firstn)
))
(loader'((fentry |(firstn -100 '(a b c))| subr0)
(entry |(firstn -100 '(a b c))| subr0)
(mov '(a b c) a2)
(mov '-100 a1)
(jmp firstn)
))
(loader'((fentry |(lastn 10 'a)| subr0)
(entry |(lastn 10 'a)| subr0)
(mov 'a a2)
(mov '10 a1)
(jmp lastn)
))
(loader'((fentry |(lastn 2 '(a b c d e))| subr0)
(entry |(lastn 2 '(a b c d e))| subr0)
(mov '(a b c d |e|) a2)
(mov '2 a1)
(jmp lastn)
))
(loader'((fentry |(lastn 2 '(a b c d . e))| subr0)
(entry |(lastn 2 '(a b c d . e))| subr0)
(mov '(a b c d . |e|) a2)
(mov '2 a1)
(jmp lastn)
))
(loader'((fentry |(lastn 10 '(a b c))| subr0)
(entry |(lastn 10 '(a b c))| subr0)
(mov '(a b c) a2)
(mov '10 a1)
(jmp lastn)
))
(loader'((fentry |(lastn -10 '(a b c))| subr0)
(entry |(lastn -10 '(a b c))| subr0)
(mov '(a b c) a2)
(mov '-10 a1)
(jmp lastn)
))
(loader'((fentry |(lastn 0 '(a))| subr0)
(entry |(lastn 0 '(a))| subr0)
(mov '(a) a2)
(mov '0 a1)
(jmp lastn)
))
(loader'((fentry |(subst 'z 'a '(a c (d a)))| subr0)
(entry |(subst 'z 'a '(a c (d a)))| subr0)
(mov '(a c (d a)) a3)
(mov 'a a2)
(mov 'z a1)
(jmp subst)
))
(loader'((fentry |(subst () () '(a b c))| subr0)
(entry |(subst () () '(a b c))| subr0)
(mov '(a b c) a3)
(mov nil a2)
(mov nil a1)
(jmp subst)
))
(loader'((fentry |(subst 'z '(a) '((a) c (d (a))))| subr0)
(entry |(subst 'z '(a) '((a) c (d (a))))| subr0)
(mov '((a) c (d (a))) a3)
(mov '(a) a2)
(mov 'z a1)
(jmp subst)
))
(loader'((fentry |(remq 'a '(a b a (c a b) d a s))| subr0)
(entry |(remq 'a '(a b a (c a b) d a s))| subr0)
(mov '(a b a (c a b) d a s) a2)
(mov 'a a1)
(jmp remq)
))
(loader'((fentry |(remq 'a '(a a))| subr0)
(entry |(remq 'a '(a a))| subr0)
(mov '(a a) a2)
(mov 'a a1)
(jmp remq)
))
(loader'((fentry |(remq 'a '(a . b))| subr0)
(entry |(remq 'a '(a . b))| subr0)
(mov '(a . b) a2)
(mov 'a a1)
(jmp remq)
))
(loader'((fentry |(remq 'a '(a b . a))| subr0)
(entry |(remq 'a '(a b . a))| subr0)
(mov '(a b . a) a2)
(mov 'a a1)
(jmp remq)
))
(loader'((fentry |(remq 'a '(a b . c))| subr0)
(entry |(remq 'a '(a b . c))| subr0)
(mov '(a b . c) a2)
(mov 'a a1)
(jmp remq)
))
(loader'((fentry |(remove '(a) '(a b (a) (c a b) (a) s))| subr0)
(entry |(remove '(a) '(a b (a) (c a b) (a) s))| subr0)
(mov '(a b (a) (c a b) (a) s) a2)
(mov '(a) a1)
(jmp remove)
))
(loader'((fentry |(remove '(a) '((a) (a) (a)))| subr0)
(entry |(remove '(a) '((a) (a) (a)))| subr0)
(mov '((a) (a) (a)) a2)
(mov '(a) a1)
(jmp remove)
))
(loader'((fentry |(tconsp (progn (freecons (tcons 1 2)) (cons 1 2)))| subr0)
(entry |(tconsp (progn (freecons (tcons 1 2)) (cons 1 2)))| subr0)
(mov '2 a2)
(mov '1 a1)
(jcall tcons)
(jcall freecons)
(mov '2 a2)
(mov '1 a1)
(jcall cons)
(jmp tconsp)
))
(loader'((fentry |(tconsp (progn (freetree '#(#(1 2) #(1 2))) (cons 1 2)))| subr0)
(entry |(tconsp (progn (freetree '#(#(1 2) #(1 2))) (cons 1 2)))| subr0)
(mov '#(#(1 2) #(1 2)) a1)
(jcall freetree)
(mov '2 a2)
(mov '1 a1)
(jcall cons)
(jmp tconsp)
))
(loader'((fentry |(progn (freetree '#(#(1) #(3))) (list 1 2 3))| subr0)
(entry |(progn (freetree '#(#(1) #(3))) (list 1 2 3))| subr0)
(mov '#(#(1) #(3)) a1)
(jcall freetree)
(push (@ 101))
(push '1)
(push '2)
(push '3)
(mov '3 a4)
(jmp list)
101
(eval ())
(return)
))
(putprop '|(rplaca x '(c))| '(x) '#:complice:fvar)
(loader'((fentry |(rplaca x '(c))| subr0)
(entry |(rplaca x '(c))| subr0)
(mov (cvalq x) a4)
(mov '(c) (car a4))
(mov a4 a1)
(return)
))
(putprop '|(rplacd x '(u))| '(x) '#:complice:fvar)
(loader'((fentry |(rplacd x '(u))| subr0)
(entry |(rplacd x '(u))| subr0)
(mov (cvalq x) a4)
(mov '(u) (cdr a4))
(mov a4 a1)
(return)
))
(putprop '|(rplaca x (cdr y))| '(y x) '#:complice:fvar)
(loader'((fentry |(rplaca x (cdr y))| subr0)
(entry |(rplaca x (cdr y))| subr0)
(mov (cvalq y) a4)
(mov (cvalq x) a3)
(mov (cdr a4) (car a3))
(mov a3 a1)
(return)
))
(putprop '|(rplac l1 'x '(z))| '(l1) '#:complice:fvar)
(loader'((fentry |(rplac l1 'x '(z))| subr0)
(entry |(rplac l1 'x '(z))| subr0)
(mov '(z) a3)
(mov 'x a2)
(mov (cvalq l1) a1)
(jmp rplac)
))
(putprop '|(displace l1 '(x y))| '(l1) '#:complice:fvar)
(loader'((fentry |(displace l1 '(x y))| subr0)
(entry |(displace l1 '(x y))| subr0)
(mov '(x y) a2)
(mov (cvalq l1) a1)
(jmp displace)
))
(putprop '|(displace l1 'z)| '(l1) '#:complice:fvar)
(loader'((fentry |(displace l1 'z)| subr0)
(entry |(displace l1 'z)| subr0)
(mov 'z a2)
(mov (cvalq l1) a1)
(jmp displace)
))
(putprop '|(displace l1 '#(a . b))| '(l1) '#:complice:fvar)
(loader'((fentry |(displace l1 '#(a . b))| subr0)
(entry |(displace l1 '#(a . b))| subr0)
(mov '#(a . b) a2)
(mov (cvalq l1) a1)
(jmp displace)
))
(loader'((fentry |(nconc)| subr0)
(entry |(nconc)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc ())| subr0)
(entry |(nconc ())| subr0)
(push (@ 101))
(push nil)
(mov '1 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc () ())| subr0)
(entry |(nconc () ())| subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc () () ())| subr0)
(entry |(nconc () () ())| subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(mov '3 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc () () () '(a b c))| subr0)
(entry |(nconc () () () '(a b c))| subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push '(a b c))
(mov '4 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc '(a b))| subr0)
(entry |(nconc '(a b))| subr0)
(push (@ 101))
(push '(a b))
(mov '1 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc '(a b) '(c d))| subr0)
(entry |(nconc '(a b) '(c d))| subr0)
(push (@ 101))
(push '(a b))
(push '(c d))
(mov '2 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc '(a b) '(c d) '(e f))| subr0)
(entry |(nconc '(a b) '(c d) '(e f))| subr0)
(push (@ 101))
(push '(a b))
(push '(c d))
(push '(|e| f))
(mov '3 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc '(a b) () '(c d) () '(e f))| subr0)
(entry |(nconc '(a b) () '(c d) () '(e f))| subr0)
(push (@ 101))
(push '(a b))
(push nil)
(push '(c d))
(push nil)
(push '(|e| f))
(mov '5 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc '(a b) 2 '(c d) 3 'e)| subr0)
(entry |(nconc '(a b) 2 '(c d) 3 'e)| subr0)
(push (@ 101))
(push '(a b))
(push '2)
(push '(c d))
(push '3)
(push '|e|)
(mov '5 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc '(a b) () '(c d) () '(e f) ())| subr0)
(entry |(nconc '(a b) () '(c d) () '(e f) ())| subr0)
(push (@ 101))
(push '(a b))
(push nil)
(push '(c d))
(push nil)
(push '(|e| f))
(push nil)
(mov '6 a4)
(jmp nconc)
101
(eval ())
(return)
))
(putprop '|(nconc (setq value (list 'value)) (list '()))| '(value) '#:complice:fvar)
(loader'((fentry |(nconc (setq value (list 'value)) (list '()))| subr0)
(entry |(nconc (setq value (list 'value)) (list '()))| subr0)
(push (@ 101))
(push (@ 102))
(push 'value)
(mov '1 a4)
(jmp list)
102
(eval ())
(mov a1 (cvalq value))
(push a1)
(push (@ 103))
(push nil)
(mov '1 a4)
(jmp list)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(return)
))
(putprop '|(nconc value (list '()))| '(value) '#:complice:fvar)
(loader'((fentry |(nconc value (list '()))| subr0)
(entry |(nconc value (list '()))| subr0)
(push (@ 101))
(push (cvalq value))
(push (@ 102))
(push nil)
(mov '1 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(return)
))
(loader'((fentry |(nconc1 (list 'a 'b 'c) 'd)| subr0)
(entry |(nconc1 (list 'a 'b 'c) 'd)| subr0)
(push (@ 101))
(push 'a)
(push 'b)
(push 'c)
(mov '3 a4)
(jmp list)
101
(eval ())
(mov 'd a2)
(jmp nconc1)
))
(putprop '|(nreverse l1)| '(l1) '#:complice:fvar)
(loader'((fentry |(nreverse l1)| subr0)
(entry |(nreverse l1)| subr0)
(mov (cvalq l1) a1)
(jmp nreverse)
))
(putprop '|(nreconc l1 '(x y))| '(l1) '#:complice:fvar)
(loader'((fentry |(nreconc l1 '(x y))| subr0)
(entry |(nreconc l1 '(x y))| subr0)
(mov '(x y) a2)
(mov (cvalq l1) a1)
(jmp nreconc)
))
(putprop '|(nsubst '(x y) 'a l)| '(l) '#:complice:fvar)
(loader'((fentry |(nsubst '(x y) 'a l)| subr0)
(entry |(nsubst '(x y) 'a l)| subr0)
(mov (cvalq l) a3)
(mov 'a a2)
(mov '(x y) a1)
(jmp nsubst)
))
(putprop '|(nsubst 1 l l)| '(l) '#:complice:fvar)
(loader'((fentry |(nsubst 1 l l)| subr0)
(entry |(nsubst 1 l l)| subr0)
(mov (cvalq l) a3)
(mov (cvalq l) a2)
(mov '1 a1)
(jmp nsubst)
))
(putprop '|(nsubst 1 (cdr l) l)| '(l) '#:complice:fvar)
(loader'((fentry |(nsubst 1 (cdr l) l)| subr0)
(entry |(nsubst 1 (cdr l) l)| subr0)
(mov (cvalq l) a2)
(mov a2 a3)
(mov (cdr a2) a2)
(mov '1 a1)
(jmp nsubst)
))
(putprop '|(delq 'b l)| '(l) '#:complice:fvar)
(loader'((fentry |(delq 'b l)| subr0)
(entry |(delq 'b l)| subr0)
(mov (cvalq l) a2)
(mov 'b a1)
(jmp delq)
))
(putprop '|(delq 'a l)| '(l) '#:complice:fvar)
(loader'((fentry |(delq 'a l)| subr0)
(entry |(delq 'a l)| subr0)
(mov (cvalq l) a2)
(mov 'a a1)
(jmp delq)
))
(putprop '|(delete '(b) l)| '(l) '#:complice:fvar)
(loader'((fentry |(delete '(b) l)| subr0)
(entry |(delete '(b) l)| subr0)
(mov (cvalq l) a2)
(mov '(b) a1)
(jmp delete)
))
(putprop '|(delete 'a l)| '(l) '#:complice:fvar)
(loader'((fentry |(delete 'a l)| subr0)
(entry |(delete 'a l)| subr0)
(mov (cvalq l) a2)
(mov 'a a1)
(jmp delete)
))
(putprop '|(newr l 4)| '(l) '#:complice:fvar)
(loader'((fentry |(newr l 4)| subr0)
(entry |(newr l 4)| subr0)
(push '4)
(push (@ 101))
(push (cvalq l))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(adjstk '1)
(mov a1 (cvalq l))
(return)
))
(loader'((fentry |(foo3)| subr0)
(entry |(foo3)| subr0)
(push (@ 101))
(push '(foo3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(acons 'a '10 '((b . 11) (z . 40)))| subr0)
(entry |(acons 'a '10 '((b . 11) (z . 40)))| subr0)
(mov '((b . 11) (z . 40)) a3)
(mov '10 a2)
(mov 'a a1)
(jmp acons)
))
(loader'((fentry |(pairlis '(a b) '(1 2) '((c . 3)))| subr0)
(entry |(pairlis '(a b) '(1 2) '((c . 3)))| subr0)
(mov '((c . 3)) a3)
(mov '(1 2) a2)
(mov '(a b) a1)
(jmp pairlis)
))
(loader'((fentry |(pairlis '(x y z) '(a (b)) '((a . x) (b . y)))| subr0)
(entry |(pairlis '(x y z) '(a (b)) '((a . x) (b . y)))| subr0)
(mov '((a . x) (b . y)) a3)
(mov '(a (b)) a2)
(mov '(x y z) a1)
(jmp pairlis)
))
(loader'((fentry |(pairlis '(ya jestem wielky) '(le merle chante) ())| subr0)
(entry |(pairlis '(ya jestem wielky) '(le merle chante) ())| subr0)
(mov nil a3)
(mov '(le merle chante) a2)
(mov '(ya jestem wielky) a1)
(jmp pairlis)
))
(loader'((fentry |(assq 'b '((a) (b 1) (c d e)))| subr0)
(entry |(assq 'b '((a) (b 1) (c d e)))| subr0)
(mov '((a) (b 1) (c d |e|)) a2)
(mov 'b a1)
(jmp assq)
))
(loader'((fentry |(assoc '(b) '((a) ((b) 1) (c d e)))| subr0)
(entry |(assoc '(b) '((a) ((b) 1) (c d e)))| subr0)
(mov '((a) ((b) 1) (c d |e|)) a2)
(mov '(b) a1)
(jmp assoc)
))
(loader'((fentry |(cassq 'c '((a) (b 1) (c d e)))| subr0)
(entry |(cassq 'c '((a) (b 1) (c d e)))| subr0)
(mov '((a) (b 1) (c d |e|)) a2)
(mov 'c a1)
(jmp cassq)
))
(loader'((fentry |(cassoc '(c) '((a) (b 1) ((c) d e)))| subr0)
(entry |(cassoc '(c) '((a) (b 1) ((c) d e)))| subr0)
(mov '((a) (b 1) ((c) d |e|)) a2)
(mov '(c) a1)
(jmp cassoc)
))
(loader'((fentry |(rassq 1 '((a) (b . 1) (c d e)))| subr0)
(entry |(rassq 1 '((a) (b . 1) (c d e)))| subr0)
(mov '((a) (b . 1) (c d |e|)) a2)
(mov '1 a1)
(jmp rassq)
))
(loader'((fentry |(rassoc '(d e) '((a) ((b) 1) (c d e)))| subr0)
(entry |(rassoc '(d e) '((a) ((b) 1) (c d e)))| subr0)
(mov '((a) ((b) 1) (c d |e|)) a2)
(mov '(d |e|) a1)
(jmp rassoc)
))
(loader'((fentry |(sublis '((a . z) (b 2 3)) '(a (b a c) d b . b))| subr0)
(entry |(sublis '((a . z) (b 2 3)) '(a (b a c) d b . b))| subr0)
(mov '(a (b a c) d b . b) a2)
(mov '((a . z) (b 2 3)) a1)
(jmp sublis)
))
(putprop '|(eq (sublis '((x 1)) l) l)| '(l) '#:complice:fvar)
(loader'((fentry |(eq (sublis '((x 1)) l) l)| subr0)
(entry |(eq (sublis '((x 1)) l) l)| subr0)
(mov (cvalq l) a2)
(mov '((x 1)) a1)
(jcall sublis)
(mov (cvalq l) a2)
(jmp eq)
))
(putprop '|(eq (cdr (sublis '((a x)) l)) (cdr l))| '(l) '#:complice:fvar)
(loader'((fentry |(eq (cdr (sublis '((a x)) l)) (cdr l))| subr0)
(entry |(eq (cdr (sublis '((a x)) l)) (cdr l))| subr0)
(mov (cvalq l) a2)
(mov '((a x)) a1)
(jcall sublis)
(mov (cvalq l) a2)
(mov (cdr a2) a2)
(mov (cdr a1) a1)
(jmp eq)
))
(loader'((fentry |(boundp 'l3)| subr0)
(entry |(boundp 'l3)| subr0)
(mov 'l3 a1)
(jmp boundp)
))
(loader'((fentry |(symeval 'l3)| subr0)
(entry |(symeval 'l3)| subr0)
(mov 'l3 a1)
(mov (cval a1) a1)
(return)
))
(loader'((fentry |(makunbound 'l3)| subr0)
(entry |(makunbound 'l3)| subr0)
(mov 'l3 a1)
(jmp makunbound)
))
(loader'((fentry |(set 'l1 '(a b c))| subr0)
(entry |(set 'l1 '(a b c))| subr0)
(mov 'l1 a4)
(mov '(a b c) (cval a4))
(mov '(a b c) a1)
(return)
))
(putprop '|(psetq l1 l2 l2 l1)| '(l2 l1) '#:complice:fvar)
(loader'((fentry |(psetq l1 l2 l2 l1)| subr0)
(entry |(psetq l1 l2 l2 l1)| subr0)
(push (cvalq l2))
(mov (cvalq l1) (cvalq l2))
(pop a4)
(mov a4 (cvalq l1))
(mov a4 a1)
(return)
))
(loader'((fentry |(setqq)| subr0)
(entry |(setqq)| subr0)
(mov nil (cvalq ()))
(mov nil a1)
(return)
))
(putprop '|(setqq l1 2 l2 3)| '(l2 l1) '#:complice:fvar)
(loader'((fentry |(setqq l1 2 l2 3)| subr0)
(entry |(setqq l1 2 l2 3)| subr0)
(mov '2 (cvalq l1))
(mov '3 (cvalq l2))
(mov '3 a1)
(return)
))
(putprop '|(deset '(a (b . c)) '((1 2) (3 4)))| '(c b a) '#:complice:fvar)
(loader'((fentry |(deset '(a (b . c)) '((1 2) (3 4)))| subr0)
(entry |(deset '(a (b . c)) '((1 2) (3 4)))| subr0)
(push '((1 2) (3 4)))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (& 0) (cvalq a))
(mov a4 (cvalq b))
(mov a3 (cvalq c))
(mov a3 a1)
(adjstk '1)
(mov 't a1)
(return)
))
(putprop '|(desetq (a (b . c)) '((1 2) (3 4)))| '(c b a) '#:complice:fvar)
(loader'((fentry |(desetq (a (b . c)) '((1 2) (3 4)))| subr0)
(entry |(desetq (a (b . c)) '((1 2) (3 4)))| subr0)
(push '((1 2) (3 4)))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (& 0) (cvalq a))
(mov a4 (cvalq b))
(mov a3 (cvalq c))
(mov a3 a1)
(adjstk '1)
(mov 't a1)
(return)
))
(putprop '|(nextl a)| '(a) '#:complice:fvar)
(loader'((fentry |(nextl a)| subr0)
(entry |(nextl a)| subr0)
(mov (cvalq a) a1)
(mov (cdr a1) (cvalq a))
(mov (car a1) a1)
(return)
))
(putprop '|(nextl a b)| '(a b) '#:complice:fvar)
(loader'((fentry |(nextl a b)| subr0)
(entry |(nextl a b)| subr0)
(mov (cvalq a) a4)
(mov (car a4) (cvalq b))
(mov (cdr a4) (cvalq a))
(mov (car a4) a1)
(return)
))
(putprop '|(progn (nextl l) (nextl l x) (nextl l z))| '(z x l) '#:complice:fvar)
(loader'((fentry |(progn (nextl l) (nextl l x) (nextl l z))| subr0)
(entry |(progn (nextl l) (nextl l x) (nextl l z))| subr0)
(mov (cvalq l) a4)
(mov (cdr a4) (cvalq l))
(mov (cvalq l) a4)
(mov (car a4) (cvalq x))
(mov (cdr a4) (cvalq l))
(mov (cvalq l) a4)
(mov (car a4) (cvalq z))
(mov (cdr a4) (cvalq l))
(mov (car a4) a1)
(return)
))
(putprop '|(newl a 'w)| '(a) '#:complice:fvar)
(loader'((fentry |(newl a 'w)| subr0)
(entry |(newl a 'w)| subr0)
(mov (cvalq a) a2)
(mov 'w a1)
(jcall cons)
(mov a1 (cvalq a))
(return)
))
(putprop '|(newr a 'w)| '(a) '#:complice:fvar)
(loader'((fentry |(newr a 'w)| subr0)
(entry |(newr a 'w)| subr0)
(push 'w)
(push (@ 101))
(push (cvalq a))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(adjstk '1)
(mov a1 (cvalq a))
(return)
))
(putprop '|(newr b 'z)| '(b) '#:complice:fvar)
(loader'((fentry |(newr b 'z)| subr0)
(entry |(newr b 'z)| subr0)
(push 'z)
(push (@ 101))
(push (cvalq b))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(adjstk '1)
(mov a1 (cvalq b))
(return)
))
(putprop '|(incr x)| '(x) '#:complice:fvar)
(loader'((fentry |(incr x)| subr0)
(entry |(incr x)| subr0)
(mov (cvalq x) a1)
(jcall |1+|)
(mov a1 (cvalq x))
(return)
))
(putprop '|(incr x 4)| '(x) '#:complice:fvar)
(loader'((fentry |(incr x 4)| subr0)
(entry |(incr x 4)| subr0)
(push (@ 101))
(push (cvalq x))
(push '4)
(mov '2 a4)
(jmp |+|)
101
(eval ())
(mov a1 (cvalq x))
(return)
))
(putprop '|(incr x 1.5)| '(x) '#:complice:fvar)
(loader'((fentry |(incr x 1.5)| subr0)
(entry |(incr x 1.5)| subr0)
(push (@ 101))
(push (cvalq x))
(push '1.5)
(mov '2 a4)
(jmp |+|)
101
(eval ())
(mov a1 (cvalq x))
(return)
))
(putprop '|(decr x 4)| '(x) '#:complice:fvar)
(loader'((fentry |(decr x 4)| subr0)
(entry |(decr x 4)| subr0)
(push (@ 101))
(push (cvalq x))
(push '4)
(mov '2 a4)
(jmp |-|)
101
(eval ())
(mov a1 (cvalq x))
(return)
))
(putprop '|(decr x)| '(x) '#:complice:fvar)
(loader'((fentry |(decr x)| subr0)
(entry |(decr x)| subr0)
(mov (cvalq x) a1)
(jcall |1-|)
(mov a1 (cvalq x))
(return)
))
(putprop '|(decr x 1.5)| '(x) '#:complice:fvar)
(loader'((fentry |(decr x 1.5)| subr0)
(entry |(decr x 1.5)| subr0)
(push (@ 101))
(push (cvalq x))
(push '1.5)
(mov '2 a4)
(jmp |-|)
101
(eval ())
(mov a1 (cvalq x))
(return)
))
(loader'((fentry |(plist 'rose '(nom commun genre feminin))| subr0)
(entry |(plist 'rose '(nom commun genre feminin))| subr0)
(mov 'rose a4)
(mov '(nom commun genre feminin) (plist a4))
(mov '(nom commun genre feminin) a1)
(return)
))
(loader'((fentry |(plist 'rose)| subr0)
(entry |(plist 'rose)| subr0)
(mov 'rose a1)
(mov (plist a1) a1)
(return)
))
(loader'((fentry |(getprop 'nil 'genre)| subr0)
(entry |(getprop 'nil 'genre)| subr0)
(mov 'genre a2)
(mov 'nil a1)
(jmp getprop)
))
(loader'((fentry |(getprop 'rose 'genre)| subr0)
(entry |(getprop 'rose 'genre)| subr0)
(mov 'genre a2)
(mov 'rose a1)
(jmp getprop)
))
(loader'((fentry |(getprop 'rose 'famille)| subr0)
(entry |(getprop 'rose 'famille)| subr0)
(mov 'famille a2)
(mov 'rose a1)
(jmp getprop)
))
(loader'((fentry |(getl 'rose '(genre nom))| subr0)
(entry |(getl 'rose '(genre nom))| subr0)
(mov '(genre nom) a2)
(mov 'rose a1)
(jmp getl)
))
(loader'((fentry |(getl 'rose '(taille genre))| subr0)
(entry |(getl 'rose '(taille genre))| subr0)
(mov '(taille genre) a2)
(mov 'rose a1)
(jmp getl)
))
(loader'((fentry |(getl 'rose '(type taille))| subr0)
(entry |(getl 'rose '(type taille))| subr0)
(mov '(type taille) a2)
(mov 'rose a1)
(jmp getl)
))
(loader'((fentry |(addprop 'rose 'fleur 'famille)| subr0)
(entry |(addprop 'rose 'fleur 'famille)| subr0)
(mov 'famille a3)
(mov 'fleur a2)
(mov 'rose a1)
(jmp addprop)
))
(loader'((fentry |(putprop 'rose 'jouli 'nom)| subr0)
(entry |(putprop 'rose 'jouli 'nom)| subr0)
(mov 'nom a3)
(mov 'jouli a2)
(mov 'rose a1)
(jmp putprop)
))
(loader'((fentry |(remprop 'rose 'nom)| subr0)
(entry |(remprop 'rose 'nom)| subr0)
(mov 'nom a2)
(mov 'rose a1)
(jmp remprop)
))
(loader'((fentry |(remprop 'rose 'foo)| subr0)
(entry |(remprop 'rose 'foo)| subr0)
(mov 'foo a2)
(mov 'rose a1)
(jmp remprop)
))
(loader'((fentry |(remprop 'rose 'famille)| subr0)
(entry |(remprop 'rose 'famille)| subr0)
(mov 'famille a2)
(mov 'rose a1)
(jmp remprop)
))
(loader'((fentry |(defprop rose test defprop)| subr0)
(entry |(defprop rose test defprop)| subr0)
(mov 'defprop a3)
(mov 'test a2)
(mov 'rose a1)
(jmp putprop)
))
(loader'((fentry |(remprop 'rose 'genre)| subr0)
(entry |(remprop 'rose 'genre)| subr0)
(mov 'genre a2)
(mov 'rose a1)
(jmp remprop)
))
(loader'((fentry |(remprop 'rose 'defprop)| subr0)
(entry |(remprop 'rose 'defprop)| subr0)
(mov 'defprop a2)
(mov 'rose a1)
(jmp remprop)
))
(loader'((fentry |(plist 'plt '(i1 a i2 b))| subr0)
(entry |(plist 'plt '(i1 a i2 b))| subr0)
(mov 'plt a4)
(mov '(i1 a i2 b) (plist a4))
(mov '(i1 a i2 b) a1)
(return)
))
(loader'((fentry |(addprop 'plt 'c 'i1)| subr0)
(entry |(addprop 'plt 'c 'i1)| subr0)
(mov 'i1 a3)
(mov 'c a2)
(mov 'plt a1)
(jmp addprop)
))
(loader'((fentry |(plist 'plt)| subr0)
(entry |(plist 'plt)| subr0)
(mov 'plt a1)
(mov (plist a1) a1)
(return)
))
(loader'((fentry |(putprop 'plt 'c 'i1)| subr0)
(entry |(putprop 'plt 'c 'i1)| subr0)
(mov 'i1 a3)
(mov 'c a2)
(mov 'plt a1)
(jmp putprop)
))
(loader'((fentry |(putprop 'plt 0 'i9)| subr0)
(entry |(putprop 'plt 0 'i9)| subr0)
(mov 'i9 a3)
(mov '0 a2)
(mov 'plt a1)
(jmp putprop)
))
(loader'((fentry |(objval 'gee ())| subr0)
(entry |(objval 'gee ())| subr0)
(mov 'gee a4)
(mov nil (oval a4))
(mov nil a1)
(return)
))
(loader'((fentry |(objval 'gee)| subr0)
(entry |(objval 'gee)| subr0)
(mov 'gee a1)
(mov (oval a1) a1)
(return)
))
(loader'((fentry |(objval 'gee 'haugh)| subr0)
(entry |(objval 'gee 'haugh)| subr0)
(mov 'gee a4)
(mov 'haugh (oval a4))
(mov 'haugh a1)
(return)
))
(loader'((fentry |(packagecell '#:sator:arepo:tenet:opera:rotas '#:sator:arepo:tenet:opera)| subr0)
(entry |(packagecell '#:sator:arepo:tenet:opera:rotas '#:sator:arepo:tenet:opera)| subr0)
(mov '#:sator:arepo:tenet:opera:rotas a4)
(mov '#:sator:arepo:tenet:opera (pkgc a4))
(mov '#:sator:arepo:tenet:opera a1)
(return)
))
(putprop '|(packagecell x)| '(x) '#:complice:fvar)
(loader'((fentry |(packagecell x)| subr0)
(entry |(packagecell x)| subr0)
(mov (cvalq x) a1)
(mov (pkgc a1) a1)
(return)
))
(putprop '|(packagecell (packagecell x))| '(x) '#:complice:fvar)
(loader'((fentry |(packagecell (packagecell x))| subr0)
(entry |(packagecell (packagecell x))| subr0)
(mov (cvalq x) a1)
(mov (pkgc a1) a1)
(mov (pkgc a1) a1)
(return)
))
(putprop '|(packagecell (packagecell (packagecell x)))| '(x) '#:complice:fvar)
(loader'((fentry |(packagecell (packagecell (packagecell x)))| subr0)
(entry |(packagecell (packagecell (packagecell x)))| subr0)
(mov (cvalq x) a1)
(mov (pkgc a1) a1)
(mov (pkgc a1) a1)
(mov (pkgc a1) a1)
(return)
))
(putprop '|(packagecell x '#:en:to:pan)| '(x) '#:complice:fvar)
(loader'((fentry |(packagecell x '#:en:to:pan)| subr0)
(entry |(packagecell x '#:en:to:pan)| subr0)
(mov (cvalq x) a4)
(mov '#:en:to:pan (pkgc a4))
(mov '#:en:to:pan a1)
(return)
))
(putprop '|(subtypep a b)| '(b a) '#:complice:fvar)
(loader'((fentry |(subtypep a b)| subr0)
(entry |(subtypep a b)| subr0)
(mov (cvalq b) a2)
(mov (cvalq a) a1)
(jmp subtypep)
))
(loader'((fentry |(subtypep '#:a:b:d:e:f:g '#:a:b:d:e)| subr0)
(entry |(subtypep '#:a:b:d:e:f:g '#:a:b:d:e)| subr0)
(mov '#:a:b:d:|e| a2)
(mov '#:a:b:d:|e|:f:g a1)
(jmp subtypep)
))
(loader'((fentry |(subtypep '#:a:b:d:e '#:a:b:d:e:f:g)| subr0)
(entry |(subtypep '#:a:b:d:e '#:a:b:d:e:f:g)| subr0)
(mov '#:a:b:d:|e|:f:g a2)
(mov '#:a:b:d:|e| a1)
(jmp subtypep)
))
(loader'((fentry |(progn '(#:foo:xyzzy xyzzy #:bar:xyzzy) ())| subr0)
(entry |(progn '(#:foo:xyzzy xyzzy #:bar:xyzzy) ())| subr0)
(mov nil a1)
(return)
))
(loader'((fentry |(3d-root-symbol '#:foo:xyzzy)| subr0)
(entry |(3d-root-symbol '#:foo:xyzzy)| subr0)
(mov '#:foo:xyzzy a1)
(jmp 3d-root-symbol)
))
(loader'((fentry |(3d-root-symbol '#:bar:xyzzy)| subr0)
(entry |(3d-root-symbol '#:bar:xyzzy)| subr0)
(mov '#:bar:xyzzy a1)
(jmp 3d-root-symbol)
))
(loader'((fentry |(3d-root-symbol 'xyzzy)| subr0)
(entry |(3d-root-symbol 'xyzzy)| subr0)
(mov 'xyzzy a1)
(jmp 3d-root-symbol)
))
(loader'((fentry |(getfn1 () 'car)| subr0)
(entry |(getfn1 () 'car)| subr0)
(mov 'car a2)
(mov nil a1)
(jmp getfn1)
))
(loader'((fentry |(getfn1 'foo 'bar)| subr0)
(entry |(getfn1 'foo 'bar)| subr0)
(mov 'bar a2)
(mov 'foo a1)
(jmp getfn1)
))
(loader'((fentry |(getfn1 'gee 'bar)| subr0)
(entry |(getfn1 'gee 'bar)| subr0)
(mov 'bar a2)
(mov 'gee a1)
(jmp getfn1)
))
(loader'((fentry |(getfn2 '#:a:b '#:c:d 'foo1)| subr0)
(entry |(getfn2 '#:a:b '#:c:d 'foo1)| subr0)
(mov 'foo1 a3)
(mov '#:c:d a2)
(mov '#:a:b a1)
(jmp getfn2)
))
(loader'((fentry |(funcall (getfn2 '#:a:b '#:c:d 'foo1))| subr0)
(entry |(funcall (getfn2 '#:a:b '#:c:d 'foo1))| subr0)
(push (@ 101))
(mov 'foo1 a3)
(mov '#:c:d a2)
(mov '#:a:b a1)
(jcall getfn2)
(push a1)
(mov '1 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(getfn2 '#:a:b '#:c:d 'foo2)| subr0)
(entry |(getfn2 '#:a:b '#:c:d 'foo2)| subr0)
(mov 'foo2 a3)
(mov '#:c:d a2)
(mov '#:a:b a1)
(jmp getfn2)
))
(loader'((fentry |(funcall (getfn2 '#:a:b '#:c:d 'foo2))| subr0)
(entry |(funcall (getfn2 '#:a:b '#:c:d 'foo2))| subr0)
(push (@ 101))
(mov 'foo2 a3)
(mov '#:c:d a2)
(mov '#:a:b a1)
(jcall getfn2)
(push a1)
(mov '1 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(getfn2 '#:a:b '#:c:d 'foo3)| subr0)
(entry |(getfn2 '#:a:b '#:c:d 'foo3)| subr0)
(mov 'foo3 a3)
(mov '#:c:d a2)
(mov '#:a:b a1)
(jmp getfn2)
))
(loader'((fentry |(funcall (getfn2 '#:a:b '#:c:d 'foo3))| subr0)
(entry |(funcall (getfn2 '#:a:b '#:c:d 'foo3))| subr0)
(push (@ 101))
(mov 'foo3 a3)
(mov '#:c:d a2)
(mov '#:a:b a1)
(jcall getfn2)
(push a1)
(mov '1 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(getfn2 '#:a:b '#:c:d 'foo4)| subr0)
(entry |(getfn2 '#:a:b '#:c:d 'foo4)| subr0)
(mov 'foo4 a3)
(mov '#:c:d a2)
(mov '#:a:b a1)
(jmp getfn2)
))
(loader'((fentry |(funcall (getfn2 '#:a:b '#:c:d 'foo4))| subr0)
(entry |(funcall (getfn2 '#:a:b '#:c:d 'foo4))| subr0)
(push (@ 101))
(mov 'foo4 a3)
(mov '#:c:d a2)
(mov '#:a:b a1)
(jcall getfn2)
(push a1)
(mov '1 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry |(getfn2 '#:a:b:a '#:c:d:a 'foo1)| subr0)
(entry |(getfn2 '#:a:b:a '#:c:d:a 'foo1)| subr0)
(mov 'foo1 a3)
(mov '#:c:d:a a2)
(mov '#:a:b:a a1)
(jmp getfn2)
))
(loader'((fentry |(getfn2 '#:a:b:a '#:c:d 'foo1)| subr0)
(entry |(getfn2 '#:a:b:a '#:c:d 'foo1)| subr0)
(mov 'foo1 a3)
(mov '#:c:d a2)
(mov '#:a:b:a a1)
(jmp getfn2)
))
(loader'((fentry |(getfn '#:bar:gee:buz 'foo)| subr0)
(entry |(getfn '#:bar:gee:buz 'foo)| subr0)
(push (@ 101))
(push '#:bar:gee:buz)
(push 'foo)
(mov '2 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn '#:bar:gee 'foo)| subr0)
(entry |(getfn '#:bar:gee 'foo)| subr0)
(push (@ 101))
(push '#:bar:gee)
(push 'foo)
(mov '2 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn 'bar 'foo)| subr0)
(entry |(getfn 'bar 'foo)| subr0)
(push (@ 101))
(push 'bar)
(push 'foo)
(mov '2 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn () 'foo)| subr0)
(entry |(getfn () 'foo)| subr0)
(push (@ 101))
(push nil)
(push 'foo)
(mov '2 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn '#:potop:teraz 'foo)| subr0)
(entry |(getfn '#:potop:teraz 'foo)| subr0)
(push (@ 101))
(push '#:potop:teraz)
(push 'foo)
(mov '2 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn '#:bar:gee 'foo ())| subr0)
(entry |(getfn '#:bar:gee 'foo ())| subr0)
(push (@ 101))
(push '#:bar:gee)
(push 'foo)
(push nil)
(mov '3 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn 'bar 'foo ())| subr0)
(entry |(getfn 'bar 'foo ())| subr0)
(push (@ 101))
(push 'bar)
(push 'foo)
(push nil)
(mov '3 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn 'gee 'foo ())| subr0)
(entry |(getfn 'gee 'foo ())| subr0)
(push (@ 101))
(push 'gee)
(push 'foo)
(push nil)
(mov '3 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn '#:bar:gee:buz 'foo 'bar)| subr0)
(entry |(getfn '#:bar:gee:buz 'foo 'bar)| subr0)
(push (@ 101))
(push '#:bar:gee:buz)
(push 'foo)
(push 'bar)
(mov '3 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn '#:bar:gee 'foo 'bar)| subr0)
(entry |(getfn '#:bar:gee 'foo 'bar)| subr0)
(push (@ 101))
(push '#:bar:gee)
(push 'foo)
(push 'bar)
(mov '3 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn '(bar gee) 'fuu ())| subr0)
(entry |(getfn '(bar gee) 'fuu ())| subr0)
(push (@ 101))
(push '(bar gee))
(push 'fuu)
(push nil)
(mov '3 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(getfn '(gee bar) 'fuu ())| subr0)
(entry |(getfn '(gee bar) 'fuu ())| subr0)
(push (@ 101))
(push '(gee bar))
(push 'fuu)
(push nil)
(mov '3 a4)
(jmp getfn)
101
(eval ())
(return)
))
(loader'((fentry |(ascii 99)| subr0)
(entry |(ascii 99)| subr0)
(mov '99 a1)
(jmp ascii)
))
(loader'((fentry |(1+ (ascii 49))| subr0)
(entry |(1+ (ascii 49))| subr0)
(mov '49 a1)
(jcall ascii)
(jmp |1+|)
))
(loader'((fentry |(cascii 'c)| subr0)
(entry |(cascii 'c)| subr0)
(mov 'c a1)
(jmp cascii)
))
(loader'((fentry |(cascii 1)| subr0)
(entry |(cascii 1)| subr0)
(mov '1 a1)
(jmp cascii)
))
(loader'((fentry |(cascii 2)| subr0)
(entry |(cascii 2)| subr0)
(mov '2 a1)
(jmp cascii)
))
(loader'((fentry |(uppercase 48)| subr0)
(entry |(uppercase 48)| subr0)
(mov '48 a1)
(jmp uppercase)
))
(loader'((fentry |(uppercase 97)| subr0)
(entry |(uppercase 97)| subr0)
(mov '97 a1)
(jmp uppercase)
))
(loader'((fentry |(uppercase 122)| subr0)
(entry |(uppercase 122)| subr0)
(mov '122 a1)
(jmp uppercase)
))
(loader'((fentry |(lowercase 48)| subr0)
(entry |(lowercase 48)| subr0)
(mov '48 a1)
(jmp lowercase)
))
(loader'((fentry |(lowercase 65)| subr0)
(entry |(lowercase 65)| subr0)
(mov '65 a1)
(jmp lowercase)
))
(loader'((fentry |(lowercase 90)| subr0)
(entry |(lowercase 90)| subr0)
(mov '90 a1)
(jmp lowercase)
))
(loader'((fentry |(lowercase 106)| subr0)
(entry |(lowercase 106)| subr0)
(mov '106 a1)
(jmp lowercase)
))
(loader'((fentry |(asciip 0)| subr0)
(entry |(asciip 0)| subr0)
(mov '0 a1)
(jmp asciip)
))
(loader'((fentry |(asciip 127)| subr0)
(entry |(asciip 127)| subr0)
(mov '127 a1)
(jmp asciip)
))
(loader'((fentry |(asciip -1)| subr0)
(entry |(asciip -1)| subr0)
(mov '-1 a1)
(jmp asciip)
))
(loader'((fentry |(asciip 128)| subr0)
(entry |(asciip 128)| subr0)
(mov '128 a1)
(jmp asciip)
))
(loader'((fentry |(asciip 256)| subr0)
(entry |(asciip 256)| subr0)
(mov '256 a1)
(jmp asciip)
))
(loader'((fentry |(digitp 48)| subr0)
(entry |(digitp 48)| subr0)
(mov '48 a1)
(jmp digitp)
))
(loader'((fentry |(digitp 57)| subr0)
(entry |(digitp 57)| subr0)
(mov '57 a1)
(jmp digitp)
))
(loader'((fentry |(digitp 47)| subr0)
(entry |(digitp 47)| subr0)
(mov '47 a1)
(jmp digitp)
))
(loader'((fentry |(digitp 58)| subr0)
(entry |(digitp 58)| subr0)
(mov '58 a1)
(jmp digitp)
))
(loader'((fentry |(letterp 97)| subr0)
(entry |(letterp 97)| subr0)
(mov '97 a1)
(jmp letterp)
))
(loader'((fentry |(letterp 122)| subr0)
(entry |(letterp 122)| subr0)
(mov '122 a1)
(jmp letterp)
))
(loader'((fentry |(letterp 65)| subr0)
(entry |(letterp 65)| subr0)
(mov '65 a1)
(jmp letterp)
))
(loader'((fentry |(letterp 90)| subr0)
(entry |(letterp 90)| subr0)
(mov '90 a1)
(jmp letterp)
))
(loader'((fentry |(letterp 32)| subr0)
(entry |(letterp 32)| subr0)
(mov '32 a1)
(jmp letterp)
))
(loader'((fentry |(letterp 46)| subr0)
(entry |(letterp 46)| subr0)
(mov '46 a1)
(jmp letterp)
))
(loader'((fentry |(letterp 93)| subr0)
(entry |(letterp 93)| subr0)
(mov '93 a1)
(jmp letterp)
))
(loader'((fentry |(slen abcdef)| subr0)
(entry |(slen abcdef)| subr0)
(hgsize '"abcdef" a1)
(return)
))
(loader'((fentry |(slen )| subr0)
(entry |(slen )| subr0)
(hgsize '"" a1)
(return)
))
(loader'((fentry |(slength abcdef)| subr0)
(entry |(slength abcdef)| subr0)
(mov '"abcdef" a1)
(jmp slength)
))
(loader'((fentry |(slength )| subr0)
(entry |(slength )| subr0)
(mov '"" a1)
(jmp slength)
))
(loader'((fentry |(slength 'foo)| subr0)
(entry |(slength 'foo)| subr0)
(mov 'foo a1)
(jmp slength)
))
(putprop '|(sref s 1)| '(s) '#:complice:fvar)
(loader'((fentry |(sref s 1)| subr0)
(entry |(sref s 1)| subr0)
(hbxmov (cvalq s) '1 a1)
(return)
))
(putprop '|(sref s 0)| '(s) '#:complice:fvar)
(loader'((fentry |(sref s 0)| subr0)
(entry |(sref s 0)| subr0)
(hbxmov (cvalq s) '0 a1)
(return)
))
(putprop '|(sref s 5)| '(s) '#:complice:fvar)
(loader'((fentry |(sref s 5)| subr0)
(entry |(sref s 5)| subr0)
(hbxmov (cvalq s) '5 a1)
(return)
))
(putprop '|(sset s 1 122)| '(s) '#:complice:fvar)
(loader'((fentry |(sset s 1 122)| subr0)
(entry |(sset s 1 122)| subr0)
(hbmovx '122 (cvalq s) '1)
(mov '122 a1)
(return)
))
(putprop '|(sset s 5 -2)| '(s) '#:complice:fvar)
(loader'((fentry |(sset s 5 -2)| subr0)
(entry |(sset s 5 -2)| subr0)
(hbmovx '-2 (cvalq s) '5)
(mov '-2 a1)
(return)
))
(putprop '|(sset s 5 121)| '(s) '#:complice:fvar)
(loader'((fentry |(sset s 5 121)| subr0)
(entry |(sset s 5 121)| subr0)
(hbmovx '121 (cvalq s) '5)
(mov '121 a1)
(return)
))
(putprop '|(type-of s)| '(s) '#:complice:fvar)
(loader'((fentry |(type-of s)| subr0)
(entry |(type-of s)| subr0)
(mov (cvalq s) a1)
(jmp type-of)
))
(putprop '|(typestring s)| '(s) '#:complice:fvar)
(loader'((fentry |(typestring s)| subr0)
(entry |(typestring s)| subr0)
(mov (cvalq s) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(typestring s 'foo-the-bar)| '(s) '#:complice:fvar)
(loader'((fentry |(typestring s 'foo-the-bar)| subr0)
(entry |(typestring s 'foo-the-bar)| subr0)
(mov (cvalq s) a4)
(mov 'foo-the-bar (cdr a4))
(mov 'foo-the-bar a1)
(return)
))
(putprop '|(typestring s '(1 2 3))| '(s) '#:complice:fvar)
(loader'((fentry |(typestring s '(1 2 3))| subr0)
(entry |(typestring s '(1 2 3))| subr0)
(mov (cvalq s) a4)
(mov '(1 2 3) (cdr a4))
(mov '(1 2 3) a1)
(return)
))
(putprop '|(typestring v 'foo)| '(v) '#:complice:fvar)
(loader'((fentry |(typestring v 'foo)| subr0)
(entry |(typestring v 'foo)| subr0)
(mov (cvalq v) a4)
(mov 'foo (cdr a4))
(mov 'foo a1)
(return)
))
(putprop '|(exchstring v w)| '(w v) '#:complice:fvar)
(loader'((fentry |(exchstring v w)| subr0)
(entry |(exchstring v w)| subr0)
(mov (cvalq w) a2)
(mov (cvalq v) a1)
(jmp exchstring)
))
(loader'((fentry |(string abc)| subr0)
(entry |(string abc)| subr0)
(mov '"abc" a1)
(jmp string)
))
(loader'((fentry |(string '(45 49 50 48))| subr0)
(entry |(string '(45 49 50 48))| subr0)
(mov '(45 49 50 48) a1)
(jmp string)
))
(loader'((fentry |(string 'abcd)| subr0)
(entry |(string 'abcd)| subr0)
(mov 'abcd a1)
(jmp string)
))
(loader'((fentry |(string 234)| subr0)
(entry |(string 234)| subr0)
(mov '234 a1)
(jmp string)
))
(loader'((fentry |(string -1)| subr0)
(entry |(string -1)| subr0)
(mov '-1 a1)
(jmp string)
))
(loader'((fentry |(string 0)| subr0)
(entry |(string 0)| subr0)
(mov '0 a1)
(jmp string)
))
(loader'((fentry |(string 1.5)| subr0)
(entry |(string 1.5)| subr0)
(mov '1.5 a1)
(jmp string)
))
(loader'((fentry |(string ())| subr0)
(entry |(string ())| subr0)
(mov nil a1)
(jmp string)
))
(loader'((fentry |(string (makelist 1023 97))| subr0)
(entry |(string (makelist 1023 97))| subr0)
(mov '97 a2)
(mov '1023 a1)
(jcall makelist)
(jmp string)
))
(loader'((fentry |(eq (string ) (string ()))| subr0)
(entry |(eq (string ) (string ()))| subr0)
(mov '"" a1)
(jcall string)
(push a1)
(mov nil a1)
(jcall string)
(mov a1 a2)
(pop a1)
(jmp eq)
))
(loader'((fentry |(eq (string ) (string ))| subr0)
(entry |(eq (string ) (string ))| subr0)
(mov '"" a1)
(jcall string)
(push a1)
(mov '"" a1)
(jcall string)
(mov a1 a2)
(pop a1)
(jmp eq)
))
(loader'((fentry |(pname ())| subr0)
(entry |(pname ())| subr0)
(mov nil a1)
(jmp pname)
))
(loader'((fentry |(pname nil)| subr0)
(entry |(pname nil)| subr0)
(mov nil a1)
(jmp pname)
))
(loader'((fentry |(pname 'nil)| subr0)
(entry |(pname 'nil)| subr0)
(mov 'nil a1)
(jmp pname)
))
(loader'((fentry |(pname 'foobar)| subr0)
(entry |(pname 'foobar)| subr0)
(mov 'foobar a1)
(jmp pname)
))
(loader'((fentry |(pname -123)| subr0)
(entry |(pname -123)| subr0)
(mov '-123 a1)
(jmp pname)
))
(loader'((fentry |(pname )| subr0)
(entry |(pname )| subr0)
(mov '"" a1)
(jmp pname)
))
(loader'((fentry |(pname abcdef)| subr0)
(entry |(pname abcdef)| subr0)
(mov '"abcdef" a1)
(jmp pname)
))
(loader'((fentry |(pname '(97 98 99 100))| subr0)
(entry |(pname '(97 98 99 100))| subr0)
(mov '(97 98 99 100) a1)
(jmp pname)
))
(loader'((fentry |(hash ())| subr0)
(entry |(hash ())| subr0)
(mov nil a1)
(jmp hash)
))
(loader'((fentry |(hash 'nil)| subr0)
(entry |(hash 'nil)| subr0)
(mov 'nil a1)
(jmp hash)
))
(loader'((fentry |(hash 'foobar)| subr0)
(entry |(hash 'foobar)| subr0)
(mov 'foobar a1)
(jmp hash)
))
(loader'((fentry |(hash -123)| subr0)
(entry |(hash -123)| subr0)
(mov '-123 a1)
(jmp hash)
))
(loader'((fentry |(hash abcdef)| subr0)
(entry |(hash abcdef)| subr0)
(mov '"abcdef" a1)
(jmp hash)
))
(loader'((fentry |(hash '(97 98 99 100))| subr0)
(entry |(hash '(97 98 99 100))| subr0)
(mov '(97 98 99 100) a1)
(jmp hash)
))
(loader'((fentry |(plength ())| subr0)
(entry |(plength ())| subr0)
(mov nil a1)
(jmp plength)
))
(loader'((fentry |(plength nil)| subr0)
(entry |(plength nil)| subr0)
(mov nil a1)
(jmp plength)
))
(loader'((fentry |(plength 'nil)| subr0)
(entry |(plength 'nil)| subr0)
(mov 'nil a1)
(jmp plength)
))
(loader'((fentry |(plength 'foobar)| subr0)
(entry |(plength 'foobar)| subr0)
(mov 'foobar a1)
(jmp plength)
))
(loader'((fentry |(plength -100)| subr0)
(entry |(plength -100)| subr0)
(mov '-100 a1)
(jmp plength)
))
(loader'((fentry |(plength )| subr0)
(entry |(plength )| subr0)
(mov '"" a1)
(jmp plength)
))
(loader'((fentry |(plength abcdef)| subr0)
(entry |(plength abcdef)| subr0)
(mov '"abcdef" a1)
(jmp plength)
))
(loader'((fentry |(plength '(97 98 99 100))| subr0)
(entry |(plength '(97 98 99 100))| subr0)
(mov '(97 98 99 100) a1)
(jmp plength)
))
(loader'((fentry |(eqstring foo bar)| subr0)
(entry |(eqstring foo bar)| subr0)
(mov '"bar" a2)
(mov '"foo" a1)
(jmp eqstring)
))
(loader'((fentry |(eqstring foo foo)| subr0)
(entry |(eqstring foo foo)| subr0)
(mov '"foo" a2)
(mov '"foo" a1)
(jmp eqstring)
))
(loader'((fentry |(eqstring  bar)| subr0)
(entry |(eqstring  bar)| subr0)
(mov '"bar" a2)
(mov '"" a1)
(jmp eqstring)
))
(loader'((fentry |(eqstring 12 (catenate 1 2))| subr0)
(entry |(eqstring 12 (catenate 1 2))| subr0)
(push (@ 101))
(push '1)
(push '2)
(mov '2 a4)
(jmp catenate)
101
(eval ())
(mov a1 a2)
(mov '12 a1)
(jmp eqstring)
))
(loader'((fentry |(eqstring 'FooBar FooBar)| subr0)
(entry |(eqstring 'FooBar FooBar)| subr0)
(mov '"FooBar" a2)
(mov 'foobar a1)
(jmp eqstring)
))
(loader'((fentry |(catenate foo bar 'toto)| subr0)
(entry |(catenate foo bar 'toto)| subr0)
(push (@ 101))
(push '"foo")
(push '"bar")
(push 'toto)
(mov '3 a4)
(jmp catenate)
101
(eval ())
(return)
))
(loader'((fentry |(equal (catenate  () () nil) )| subr0)
(entry |(equal (catenate  () () nil) )| subr0)
(push (@ 101))
(push '"")
(push nil)
(push nil)
(push nil)
(mov '4 a4)
(jmp catenate)
101
(eval ())
(mov '"" a2)
(jmp equal)
))
(loader'((fentry |(catenate 12 -34 0)| subr0)
(entry |(catenate 12 -34 0)| subr0)
(push (@ 101))
(push '12)
(push '-34)
(push '0)
(mov '3 a4)
(jmp catenate)
101
(eval ())
(return)
))
(loader'((fentry |(catenate)| subr0)
(entry |(catenate)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp catenate)
101
(eval ())
(return)
))
(loader'((fentry |(substring-equal 0 fobar 0 afob 0)| subr0)
(entry |(substring-equal 0 fobar 0 afob 0)| subr0)
(push (@ 101))
(push '0)
(push '"fobar")
(push '0)
(push '"afob")
(push '0)
(mov '5 a4)
(jmp substring-equal)
101
(eval ())
(return)
))
(loader'((fentry |(substring-equal 0 fobar 0 gezu 0)| subr0)
(entry |(substring-equal 0 fobar 0 gezu 0)| subr0)
(push (@ 101))
(push '0)
(push '"fobar")
(push '0)
(push '"gezu")
(push '0)
(mov '5 a4)
(jmp substring-equal)
101
(eval ())
(return)
))
(loader'((fentry |(substring-equal 5 fobar 0 fobar 0)| subr0)
(entry |(substring-equal 5 fobar 0 fobar 0)| subr0)
(push (@ 101))
(push '5)
(push '"fobar")
(push '0)
(push '"fobar")
(push '0)
(mov '5 a4)
(jmp substring-equal)
101
(eval ())
(return)
))
(loader'((fentry |(substring-equal 5 fobara 0 fobar 0)| subr0)
(entry |(substring-equal 5 fobara 0 fobar 0)| subr0)
(push (@ 101))
(push '5)
(push '"fobara")
(push '0)
(push '"fobar")
(push '0)
(mov '5 a4)
(jmp substring-equal)
101
(eval ())
(return)
))
(loader'((fentry |(substring-equal 5 fobar 0 fobara 0)| subr0)
(entry |(substring-equal 5 fobar 0 fobara 0)| subr0)
(push (@ 101))
(push '5)
(push '"fobar")
(push '0)
(push '"fobara")
(push '0)
(mov '5 a4)
(jmp substring-equal)
101
(eval ())
(return)
))
(loader'((fentry |(substring-equal 2 fobar 0 afob 1)| subr0)
(entry |(substring-equal 2 fobar 0 afob 1)| subr0)
(push (@ 101))
(push '2)
(push '"fobar")
(push '0)
(push '"afob")
(push '1)
(mov '5 a4)
(jmp substring-equal)
101
(eval ())
(return)
))
(loader'((fentry |(substring-equal 2 fobar 0 afab 1)| subr0)
(entry |(substring-equal 2 fobar 0 afab 1)| subr0)
(push (@ 101))
(push '2)
(push '"fobar")
(push '0)
(push '"afab")
(push '1)
(mov '5 a4)
(jmp substring-equal)
101
(eval ())
(return)
))
(loader'((fentry |(substring-equal 2 fobar 3 afar 2)| subr0)
(entry |(substring-equal 2 fobar 3 afar 2)| subr0)
(push (@ 101))
(push '2)
(push '"fobar")
(push '3)
(push '"afar")
(push '2)
(mov '5 a4)
(jmp substring-equal)
101
(eval ())
(return)
))
(loader'((fentry |(substring abcde 0 3)| subr0)
(entry |(substring abcde 0 3)| subr0)
(push (@ 101))
(push '"abcde")
(push '0)
(push '3)
(mov '3 a4)
(jmp substring)
101
(eval ())
(return)
))
(loader'((fentry |(substring abcde 1 2)| subr0)
(entry |(substring abcde 1 2)| subr0)
(push (@ 101))
(push '"abcde")
(push '1)
(push '2)
(mov '3 a4)
(jmp substring)
101
(eval ())
(return)
))
(loader'((fentry |(substring abcde 9 2)| subr0)
(entry |(substring abcde 9 2)| subr0)
(push (@ 101))
(push '"abcde")
(push '9)
(push '2)
(mov '3 a4)
(jmp substring)
101
(eval ())
(return)
))
(loader'((fentry |(substring abcde 0 9)| subr0)
(entry |(substring abcde 0 9)| subr0)
(push (@ 101))
(push '"abcde")
(push '0)
(push '9)
(mov '3 a4)
(jmp substring)
101
(eval ())
(return)
))
(loader'((fentry |(substring abcde 1 -1)| subr0)
(entry |(substring abcde 1 -1)| subr0)
(push (@ 101))
(push '"abcde")
(push '1)
(push '-1)
(mov '3 a4)
(jmp substring)
101
(eval ())
(return)
))
(loader'((fentry |(makestring 0 97)| subr0)
(entry |(makestring 0 97)| subr0)
(mov '97 a2)
(mov '0 a1)
(jmp makestring)
))
(loader'((fentry |(makestring 4 97)| subr0)
(entry |(makestring 4 97)| subr0)
(mov '97 a2)
(mov '4 a1)
(jmp makestring)
))
(loader'((fentry |(makestring -1 97)| subr0)
(entry |(makestring -1 97)| subr0)
(mov '97 a2)
(mov '-1 a1)
(jmp makestring)
))
(loader'((fentry |(pname (makestring 4 -2))| subr0)
(entry |(pname (makestring 4 -2))| subr0)
(mov '-2 a2)
(mov '4 a1)
(jcall makestring)
(jmp pname)
))
(loader'((fentry |(slength (makestring 10000 97))| subr0)
(entry |(slength (makestring 10000 97))| subr0)
(mov '97 a2)
(mov '10000 a1)
(jcall makestring)
(jmp slength)
))
(loader'((fentry |(slength (makestring -1 97))| subr0)
(entry |(slength (makestring -1 97))| subr0)
(mov '97 a2)
(mov '-1 a1)
(jcall makestring)
(jmp slength)
))
(loader'((fentry |(duplstring 3 ab)| subr0)
(entry |(duplstring 3 ab)| subr0)
(mov '"ab" a2)
(mov '3 a1)
(jmp duplstring)
))
(loader'((fentry |(duplstring 3 )| subr0)
(entry |(duplstring 3 )| subr0)
(mov '"" a2)
(mov '3 a1)
(jmp duplstring)
))
(loader'((fentry |(duplstring 1 abc)| subr0)
(entry |(duplstring 1 abc)| subr0)
(mov '"abc" a2)
(mov '1 a1)
(jmp duplstring)
))
(loader'((fentry |(duplstring 0 abc)| subr0)
(entry |(duplstring 0 abc)| subr0)
(mov '"abc" a2)
(mov '0 a1)
(jmp duplstring)
))
(loader'((fentry |(bltstring foobar1 1 xyz 2 1)| subr0)
(entry |(bltstring foobar1 1 xyz 2 1)| subr0)
(push (@ 101))
(push '"foobar1")
(push '1)
(push '"xyz")
(push '2)
(push '1)
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(loader'((fentry |(bltstring foobar2 1 gee 0)| subr0)
(entry |(bltstring foobar2 1 gee 0)| subr0)
(push (@ 101))
(push '"foobar2")
(push '1)
(push '"gee")
(push '0)
(mov '4 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(loader'((fentry |(bltstring foobar3 1 toto 0 6)| subr0)
(entry |(bltstring foobar3 1 toto 0 6)| subr0)
(push (@ 101))
(push '"foobar3")
(push '1)
(push '"toto")
(push '0)
(push '6)
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(loader'((fentry |(bltstring foobar5 3 totota 0 8)| subr0)
(entry |(bltstring foobar5 3 totota 0 8)| subr0)
(push (@ 101))
(push '"foobar5")
(push '3)
(push '"totota")
(push '0)
(push '8)
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(putprop '|(bltstring strt 1 strt 3 4)| '(strt) '#:complice:fvar)
(loader'((fentry |(bltstring strt 1 strt 3 4)| subr0)
(entry |(bltstring strt 1 strt 3 4)| subr0)
(push (@ 101))
(push (cvalq strt))
(push '1)
(push (cvalq strt))
(push '3)
(push '4)
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(putprop '|(bltstring strt 6 strt 0 2)| '(strt) '#:complice:fvar)
(loader'((fentry |(bltstring strt 6 strt 0 2)| subr0)
(entry |(bltstring strt 6 strt 0 2)| subr0)
(push (@ 101))
(push (cvalq strt))
(push '6)
(push (cvalq strt))
(push '0)
(push '2)
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(putprop '|(bltstring strt 0 strt 4 4)| '(strt) '#:complice:fvar)
(loader'((fentry |(bltstring strt 0 strt 4 4)| subr0)
(entry |(bltstring strt 0 strt 4 4)| subr0)
(push (@ 101))
(push (cvalq strt))
(push '0)
(push (cvalq strt))
(push '4)
(push '4)
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(putprop '|(bltstring strt 0 strt 1)| '(strt) '#:complice:fvar)
(loader'((fentry |(bltstring strt 0 strt 1)| subr0)
(entry |(bltstring strt 0 strt 1)| subr0)
(push (@ 101))
(push (cvalq strt))
(push '0)
(push (cvalq strt))
(push '1)
(mov '4 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(putprop '|(bltstring strt 1 strt 0)| '(strt) '#:complice:fvar)
(loader'((fentry |(bltstring strt 1 strt 0)| subr0)
(entry |(bltstring strt 1 strt 0)| subr0)
(push (@ 101))
(push (cvalq strt))
(push '1)
(push (cvalq strt))
(push '0)
(mov '4 a4)
(jmp bltstring)
101
(eval ())
(return)
))
(loader'((fentry |(fillstring foobar6 1 88 2)| subr0)
(entry |(fillstring foobar6 1 88 2)| subr0)
(push (@ 101))
(push '"foobar6")
(push '1)
(push '88)
(push '2)
(mov '4 a4)
(jmp fillstring)
101
(eval ())
(return)
))
(loader'((fentry |(fillstring foobar7 0 89 3)| subr0)
(entry |(fillstring foobar7 0 89 3)| subr0)
(push (@ 101))
(push '"foobar7")
(push '0)
(push '89)
(push '3)
(mov '4 a4)
(jmp fillstring)
101
(eval ())
(return)
))
(loader'((fentry |(fillstring foobar9 2 88)| subr0)
(entry |(fillstring foobar9 2 88)| subr0)
(push (@ 101))
(push '"foobar9")
(push '2)
(push '88)
(mov '3 a4)
(jmp fillstring)
101
(eval ())
(return)
))
(loader'((fentry |(fillstring foobar0 2 88 20)| subr0)
(entry |(fillstring foobar0 2 88 20)| subr0)
(push (@ 101))
(push '"foobar0")
(push '2)
(push '88)
(push '20)
(mov '4 a4)
(jmp fillstring)
101
(eval ())
(return)
))
(loader'((fentry |(pname (fillstring foobara 2 -2 20))| subr0)
(entry |(pname (fillstring foobara 2 -2 20))| subr0)
(push (@ 101))
(push '"foobara")
(push '2)
(push '-2)
(push '20)
(mov '4 a4)
(jmp fillstring)
101
(eval ())
(jmp pname)
))
(loader'((fentry |(scanstring abc sbe)| subr0)
(entry |(scanstring abc sbe)| subr0)
(push (@ 101))
(push '"abc")
(push '"sbe")
(mov '2 a4)
(jmp scanstring)
101
(eval ())
(return)
))
(loader'((fentry |(scanstring abcd efg)| subr0)
(entry |(scanstring abcd efg)| subr0)
(push (@ 101))
(push '"abcd")
(push '"efg")
(mov '2 a4)
(jmp scanstring)
101
(eval ())
(return)
))
(loader'((fentry |(scanstring abcd  ,.a 1)| subr0)
(entry |(scanstring abcd  ,.a 1)| subr0)
(push (@ 101))
(push '"abcd")
(push '" ,.a")
(push '1)
(mov '3 a4)
(jmp scanstring)
101
(eval ())
(return)
))
(loader'((fentry |(scanstring abc defcgh)| subr0)
(entry |(scanstring abc defcgh)| subr0)
(push (@ 101))
(push '"abc")
(push '"defcgh")
(mov '2 a4)
(jmp scanstring)
101
(eval ())
(return)
))
(loader'((fentry |(scanstring  foo)| subr0)
(entry |(scanstring  foo)| subr0)
(push (@ 101))
(push '"")
(push '"foo")
(mov '2 a4)
(jmp scanstring)
101
(eval ())
(return)
))
(loader'((fentry |(scanstring foo )| subr0)
(entry |(scanstring foo )| subr0)
(push (@ 101))
(push '"foo")
(push '"")
(mov '2 a4)
(jmp scanstring)
101
(eval ())
(return)
))
(loader'((fentry |(spanstring abc abe)| subr0)
(entry |(spanstring abc abe)| subr0)
(push (@ 101))
(push '"abc")
(push '"abe")
(mov '2 a4)
(jmp spanstring)
101
(eval ())
(return)
))
(loader'((fentry |(spanstring abcd abccd)| subr0)
(entry |(spanstring abcd abccd)| subr0)
(push (@ 101))
(push '"abcd")
(push '"abccd")
(mov '2 a4)
(jmp spanstring)
101
(eval ())
(return)
))
(loader'((fentry |(spanstring abcd bcd 1)| subr0)
(entry |(spanstring abcd bcd 1)| subr0)
(push (@ 101))
(push '"abcd")
(push '"bcd")
(push '1)
(mov '3 a4)
(jmp spanstring)
101
(eval ())
(return)
))
(loader'((fentry |(spanstring abc abc 9)| subr0)
(entry |(spanstring abc abc 9)| subr0)
(push (@ 101))
(push '"abc")
(push '"abc")
(push '9)
(mov '3 a4)
(jmp spanstring)
101
(eval ())
(return)
))
(loader'((fentry |(spanstring  foo)| subr0)
(entry |(spanstring  foo)| subr0)
(push (@ 101))
(push '"")
(push '"foo")
(mov '2 a4)
(jmp spanstring)
101
(eval ())
(return)
))
(loader'((fentry |(spanstring foo )| subr0)
(entry |(spanstring foo )| subr0)
(push (@ 101))
(push '"foo")
(push '"")
(mov '2 a4)
(jmp spanstring)
101
(eval ())
(return)
))
(loader'((fentry |(chrpos 97 'abc)| subr0)
(entry |(chrpos 97 'abc)| subr0)
(push (@ 101))
(push '97)
(push 'abc)
(mov '2 a4)
(jmp chrpos)
101
(eval ())
(return)
))
(loader'((fentry |(chrpos 98 'aaa)| subr0)
(entry |(chrpos 98 'aaa)| subr0)
(push (@ 101))
(push '98)
(push 'aaa)
(mov '2 a4)
(jmp chrpos)
101
(eval ())
(return)
))
(loader'((fentry |(chrpos 99 'abc)| subr0)
(entry |(chrpos 99 'abc)| subr0)
(push (@ 101))
(push '99)
(push 'abc)
(mov '2 a4)
(jmp chrpos)
101
(eval ())
(return)
))
(loader'((fentry |(chrpos 68 '(48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70))| subr0)
(entry |(chrpos 68 '(48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70))| subr0)
(push (@ 101))
(push '68)
(push '(48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70))
(mov '2 a4)
(jmp chrpos)
101
(eval ())
(return)
))
(loader'((fentry |(chrpos 97 'abc 1)| subr0)
(entry |(chrpos 97 'abc 1)| subr0)
(push (@ 101))
(push '97)
(push 'abc)
(push '1)
(mov '3 a4)
(jmp chrpos)
101
(eval ())
(return)
))
(loader'((fentry |(chrpos 97 'abc 5)| subr0)
(entry |(chrpos 97 'abc 5)| subr0)
(push (@ 101))
(push '97)
(push 'abc)
(push '5)
(mov '3 a4)
(jmp chrpos)
101
(eval ())
(return)
))
(loader'((fentry |(chrpos -138 aaaav)| subr0)
(entry |(chrpos -138 aaaav)| subr0)
(push (@ 101))
(push '-138)
(push '"aaaav")
(mov '2 a4)
(jmp chrpos)
101
(eval ())
(return)
))
(loader'((fentry |(chrnth 0 'abc)| subr0)
(entry |(chrnth 0 'abc)| subr0)
(mov 'abc a2)
(mov '0 a1)
(jmp chrnth)
))
(loader'((fentry |(chrnth 0 abc)| subr0)
(entry |(chrnth 0 abc)| subr0)
(mov '"abc" a2)
(mov '0 a1)
(jmp chrnth)
))
(loader'((fentry |(chrnth 2 abc)| subr0)
(entry |(chrnth 2 abc)| subr0)
(mov '"abc" a2)
(mov '2 a1)
(jmp chrnth)
))
(loader'((fentry |(chrnth 3 abc)| subr0)
(entry |(chrnth 3 abc)| subr0)
(mov '"abc" a2)
(mov '3 a1)
(jmp chrnth)
))
(loader'((fentry |(chrnth -1 abc)| subr0)
(entry |(chrnth -1 abc)| subr0)
(mov '"abc" a2)
(mov '-1 a1)
(jmp chrnth)
))
(loader'((fentry |(chrnth 10 0123456789ABCDEF)| subr0)
(entry |(chrnth 10 0123456789ABCDEF)| subr0)
(mov '"0123456789ABCDEF" a2)
(mov '10 a1)
(jmp chrnth)
))
(loader'((fentry |(chrset 0 abc 65)| subr0)
(entry |(chrset 0 abc 65)| subr0)
(mov '65 a3)
(mov '"abc" a2)
(mov '0 a1)
(jmp chrset)
))
(putprop '|(progn (setq x abc) (chrset 0 x 65) x)| '(x) '#:complice:fvar)
(loader'((fentry |(progn (setq x abc) (chrset 0 x 65) x)| subr0)
(entry |(progn (setq x abc) (chrset 0 x 65) x)| subr0)
(mov '"abc" (cvalq x))
(mov '65 a3)
(mov (cvalq x) a2)
(mov '0 a1)
(jcall chrset)
(mov (cvalq x) a1)
(return)
))
(putprop '|(progn (setq x bcd) (chrset 2 x 65) x)| '(x) '#:complice:fvar)
(loader'((fentry |(progn (setq x bcd) (chrset 2 x 65) x)| subr0)
(entry |(progn (setq x bcd) (chrset 2 x 65) x)| subr0)
(mov '"bcd" (cvalq x))
(mov '65 a3)
(mov (cvalq x) a2)
(mov '2 a1)
(jcall chrset)
(mov (cvalq x) a1)
(return)
))
(putprop '|(progn (setq x efg) (chrset 0 x -1) (pname x))| '(x) '#:complice:fvar)
(loader'((fentry |(progn (setq x efg) (chrset 0 x -1) (pname x))| subr0)
(entry |(progn (setq x efg) (chrset 0 x -1) (pname x))| subr0)
(mov '"efg" (cvalq x))
(mov '-1 a3)
(mov (cvalq x) a2)
(mov '0 a1)
(jcall chrset)
(mov (cvalq x) a1)
(jmp pname)
))
(loader'((fentry |(index goo goobar)| subr0)
(entry |(index goo goobar)| subr0)
(push (@ 101))
(push '"goo")
(push '"goobar")
(mov '2 a4)
(jmp index)
101
(eval ())
(return)
))
(loader'((fentry |(index bar goobar)| subr0)
(entry |(index bar goobar)| subr0)
(push (@ 101))
(push '"bar")
(push '"goobar")
(mov '2 a4)
(jmp index)
101
(eval ())
(return)
))
(loader'((fentry |(index goo xgoobar)| subr0)
(entry |(index goo xgoobar)| subr0)
(push (@ 101))
(push '"goo")
(push '"xgoobar")
(mov '2 a4)
(jmp index)
101
(eval ())
(return)
))
(loader'((fentry |(index goo xgoobar 2)| subr0)
(entry |(index goo xgoobar 2)| subr0)
(push (@ 101))
(push '"goo")
(push '"xgoobar")
(push '2)
(mov '3 a4)
(jmp index)
101
(eval ())
(return)
))
(loader'((fentry |(index goo xgoobar 1)| subr0)
(entry |(index goo xgoobar 1)| subr0)
(push (@ 101))
(push '"goo")
(push '"xgoobar")
(push '1)
(mov '3 a4)
(jmp index)
101
(eval ())
(return)
))
(loader'((fentry |(index goo xgoobar 9)| subr0)
(entry |(index goo xgoobar 9)| subr0)
(push (@ 101))
(push '"goo")
(push '"xgoobar")
(push '9)
(mov '3 a4)
(jmp index)
101
(eval ())
(return)
))
(loader'((fentry |(index goo  0)| subr0)
(entry |(index goo  0)| subr0)
(push (@ 101))
(push '"goo")
(push '"")
(push '0)
(mov '3 a4)
(jmp index)
101
(eval ())
(return)
))
(loader'((fentry |(index  goo 0)| subr0)
(entry |(index  goo 0)| subr0)
(push (@ 101))
(push '"")
(push '"goo")
(push '0)
(mov '3 a4)
(jmp index)
101
(eval ())
(return)
))
(loader'((fentry |(alphalessp 'a 'a)| subr0)
(entry |(alphalessp 'a 'a)| subr0)
(mov 'a a2)
(mov 'a a1)
(jmp alphalessp)
))
(loader'((fentry |(alphalessp 'aa 'a)| subr0)
(entry |(alphalessp 'aa 'a)| subr0)
(mov 'a a2)
(mov 'aa a1)
(jmp alphalessp)
))
(loader'((fentry |(alphalessp 'a 'aa)| subr0)
(entry |(alphalessp 'a 'aa)| subr0)
(mov 'aa a2)
(mov 'a a1)
(jmp alphalessp)
))
(loader'((fentry |(alphalessp 'aaa 'aab)| subr0)
(entry |(alphalessp 'aaa 'aab)| subr0)
(mov 'aab a2)
(mov 'aaa a1)
(jmp alphalessp)
))
(loader'((fentry |(alphalessp 'aab 'aaa)| subr0)
(entry |(alphalessp 'aab 'aaa)| subr0)
(mov 'aaa a2)
(mov 'aab a1)
(jmp alphalessp)
))
(loader'((fentry |(alphalessp 'aab 'aaac)| subr0)
(entry |(alphalessp 'aab 'aaac)| subr0)
(mov 'aaac a2)
(mov 'aab a1)
(jmp alphalessp)
))
(loader'((fentry |(alphalessp 'aba 'aa)| subr0)
(entry |(alphalessp 'aba 'aa)| subr0)
(mov 'aa a2)
(mov 'aba a1)
(jmp alphalessp)
))
(loader'((fentry |(sortl '(dies irae dies illa solvet saeclum in favila))| subr0)
(entry |(sortl '(dies irae dies illa solvet saeclum in favila))| subr0)
(mov '(dies irae dies illa solvet saeclum in favila) a1)
(jmp sortl)
))
(loader'((fentry |(sortl '(requiem aeternam donna eis domine et lux perpetua luceat eis))| subr0)
(entry |(sortl '(requiem aeternam donna eis domine et lux perpetua luceat eis))| subr0)
(mov '(requiem aeternam donna eis domine et lux perpetua luceat eis) a1)
(jmp sortl)
))
(loader'((fentry |(mapcar 'sortl '((requiem aeternam dona eis domine) (et lux perpetua luceat eis) (in memoria aeterna eris justus) (ab auditione mala non timebit)))| subr0)
(entry |(mapcar 'sortl '((requiem aeternam dona eis domine) (et lux perpetua luceat eis) (in memoria aeterna eris justus) (ab auditione mala non timebit)))| subr0)
(push '((requiem aeternam dona eis domine) (et lux perpetua luceat eis) (in memoria aeterna eris justus) (ab auditione mala non timebit)))
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall sortl)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(jmp nreverse)
))
(loader'((fentry |(sortl '(a z b s d))| subr0)
(entry |(sortl '(a z b s d))| subr0)
(mov '(a z b s d) a1)
(jmp sortl)
))
(loader'((fentry |(sortn '(6 4 8 6 5 8 7))| subr0)
(entry |(sortn '(6 4 8 6 5 8 7))| subr0)
(mov '(6 4 8 6 5 8 7) a1)
(jmp sortn)
))
(loader'((fentry |(symbol () ())| subr0)
(entry |(symbol () ())| subr0)
(mov nil a2)
(mov nil a1)
(jmp symbol)
))
(loader'((fentry |(symbol () 'zoo)| subr0)
(entry |(symbol () 'zoo)| subr0)
(mov 'zoo a2)
(mov nil a1)
(jmp symbol)
))
(loader'((fentry |(symbol () zoo)| subr0)
(entry |(symbol () zoo)| subr0)
(mov '"zoo" a2)
(mov nil a1)
(jmp symbol)
))
(loader'((fentry |(symbol () '#:zoo:bar)| subr0)
(entry |(symbol () '#:zoo:bar)| subr0)
(mov '#:zoo:bar a2)
(mov nil a1)
(jmp symbol)
))
(loader'((fentry |(symbol 'zoo 'bar)| subr0)
(entry |(symbol 'zoo 'bar)| subr0)
(mov 'bar a2)
(mov 'zoo a1)
(jmp symbol)
))
(loader'((fentry |(symbol 'zoo bar)| subr0)
(entry |(symbol 'zoo bar)| subr0)
(mov '"bar" a2)
(mov 'zoo a1)
(jmp symbol)
))
(loader'((fentry |(symbol '#:zoo:bar 'bar)| subr0)
(entry |(symbol '#:zoo:bar 'bar)| subr0)
(mov 'bar a2)
(mov '#:zoo:bar a1)
(jmp symbol)
))
(loader'((fentry |(symbol 'zoo '#:zoo:bar)| subr0)
(entry |(symbol 'zoo '#:zoo:bar)| subr0)
(mov '#:zoo:bar a2)
(mov 'zoo a1)
(jmp symbol)
))
(loader'((fentry |(concat)| subr0)
(entry |(concat)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp concat)
101
(eval ())
(return)
))
(loader'((fentry |(concat 'a (1+ 5) () 'b)| subr0)
(entry |(concat 'a (1+ 5) () 'b)| subr0)
(push (@ 101))
(push 'a)
(mov '5 a1)
(jcall |1+|)
(push a1)
(push nil)
(push 'b)
(mov '4 a4)
(jmp concat)
101
(eval ())
(return)
))
(loader'((fentry |(concat Foo nil '(66 97 114) -2)| subr0)
(entry |(concat Foo nil '(66 97 114) -2)| subr0)
(push (@ 101))
(push '"Foo")
(push nil)
(push '(66 97 114))
(push '-2)
(mov '4 a4)
(jmp concat)
101
(eval ())
(return)
))
(loader'((fentry |(concat Foo 'nil '(66 97 114) -2)| subr0)
(entry |(concat Foo 'nil '(66 97 114) -2)| subr0)
(push (@ 101))
(push '"Foo")
(push 'nil)
(push '(66 97 114))
(push '-2)
(mov '4 a4)
(jmp concat)
101
(eval ())
(return)
))
(loader'((fentry |(concatpkgc () ())| subr0)
(entry |(concatpkgc () ())| subr0)
(mov nil a2)
(mov nil a1)
(jmp concatpkgc)
))
(loader'((fentry |(concatpkgc 'zoo ())| subr0)
(entry |(concatpkgc 'zoo ())| subr0)
(mov nil a2)
(mov 'zoo a1)
(jmp concatpkgc)
))
(loader'((fentry |(concatpkgc '#:zoo:bar ())| subr0)
(entry |(concatpkgc '#:zoo:bar ())| subr0)
(mov nil a2)
(mov '#:zoo:bar a1)
(jmp concatpkgc)
))
(loader'((fentry |(concatpkgc 'zoo 'bar)| subr0)
(entry |(concatpkgc 'zoo 'bar)| subr0)
(mov 'bar a2)
(mov 'zoo a1)
(jmp concatpkgc)
))
(loader'((fentry |(concatpkgc 'zoo '#:bar:gee)| subr0)
(entry |(concatpkgc 'zoo '#:bar:gee)| subr0)
(mov '#:bar:gee a2)
(mov 'zoo a1)
(jmp concatpkgc)
))
(loader'((fentry |(concatpkgc '#:zoo:bar '#:gee:fuu)| subr0)
(entry |(concatpkgc '#:zoo:bar '#:gee:fuu)| subr0)
(mov '#:gee:fuu a2)
(mov '#:zoo:bar a1)
(jmp concatpkgc)
))
(loader'((fentry |(explode -120)| subr0)
(entry |(explode -120)| subr0)
(mov '-120 a1)
(jmp explode)
))
(loader'((fentry |(explode '(car '(a b)))| subr0)
(entry |(explode '(car '(a b)))| subr0)
(mov '(car '(a b)) a1)
(jmp explode)
))
(loader'((fentry |(explodech -120)| subr0)
(entry |(explodech -120)| subr0)
(mov '-120 a1)
(jmp explodech)
))
(loader'((fentry |(explodech '(car '(a b)))| subr0)
(entry |(explodech '(car '(a b)))| subr0)
(mov '(car '(a b)) a1)
(jmp explodech)
))
(loader'((fentry |(implode '(45 50 51 55))| subr0)
(entry |(implode '(45 50 51 55))| subr0)
(mov '(45 50 51 55) a1)
(jmp implode)
))
(loader'((fentry |(implode (explode '(a b)))| subr0)
(entry |(implode (explode '(a b)))| subr0)
(mov '(a b) a1)
(jcall explode)
(jmp implode)
))
(loader'((fentry |(implodech '(- 2 3 7))| subr0)
(entry |(implodech '(- 2 3 7))| subr0)
(mov '(|-| 2 3 7) a1)
(jmp implodech)
))
(loader'((fentry |(implodech (explodech '(a b)))| subr0)
(entry |(implodech (explodech '(a b)))| subr0)
(mov '(a b) a1)
(jcall explodech)
(jmp implodech)
))
(loader'((fentry |(stratom 3 abcdef ())| subr0)
(entry |(stratom 3 abcdef ())| subr0)
(mov nil a3)
(mov '"abcdef" a2)
(mov '3 a1)
(jmp stratom)
))
(loader'((fentry |(stratom 3 01234 ())| subr0)
(entry |(stratom 3 01234 ())| subr0)
(mov nil a3)
(mov '"01234" a2)
(mov '3 a1)
(jmp stratom)
))
(loader'((fentry |(stratom 3 01234 t)| subr0)
(entry |(stratom 3 01234 t)| subr0)
(mov 't a3)
(mov '"01234" a2)
(mov '3 a1)
(jmp stratom)
))
(loader'((fentry |(stratom 4  ()  ())| subr0)
(entry |(stratom 4  ()  ())| subr0)
(mov nil a3)
(mov '" () " a2)
(mov '4 a1)
(jmp stratom)
))
(loader'((fentry |(stratom 5 00012.34 ())| subr0)
(entry |(stratom 5 00012.34 ())| subr0)
(mov nil a3)
(mov '"00012.34" a2)
(mov '5 a1)
(jmp stratom)
))
(loader'((fentry |(stratom 6 00012.34 ())| subr0)
(entry |(stratom 6 00012.34 ())| subr0)
(mov nil a3)
(mov '"00012.34" a2)
(mov '6 a1)
(jmp stratom)
))
(loader'((fentry |(stratom 7 00012.34 ())| subr0)
(entry |(stratom 7 00012.34 ())| subr0)
(mov nil a3)
(mov '"00012.34" a2)
(mov '7 a1)
(jmp stratom)
))
(loader'((fentry |(makevector 5 ())| subr0)
(entry |(makevector 5 ())| subr0)
(mov nil a2)
(mov '5 a1)
(jmp makevector)
))
(loader'((fentry |(makevector 3 'a)| subr0)
(entry |(makevector 3 'a)| subr0)
(mov 'a a2)
(mov '3 a1)
(jmp makevector)
))
(loader'((fentry |(makevector 0 t)| subr0)
(entry |(makevector 0 t)| subr0)
(mov 't a2)
(mov '0 a1)
(jmp makevector)
))
(loader'((fentry |(vector 0 1 2 3 4)| subr0)
(entry |(vector 0 1 2 3 4)| subr0)
(push (@ 101))
(push '0)
(push '1)
(push '2)
(push '3)
(push '4)
(mov '5 a4)
(jmp vector)
101
(eval ())
(return)
))
(loader'((fentry |(apply 'vector '(1 #[1 2] Foo a (b c)))| subr0)
(entry |(apply 'vector '(1 #[1 2] Foo a (b c)))| subr0)
(push (@ 101))
(push 'vector)
(push '(1 #[1 2] "Foo" a (b c)))
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((fentry |(vector 1 #[1 2] Foo 'a '(b c))| subr0)
(entry |(vector 1 #[1 2] Foo 'a '(b c))| subr0)
(push (@ 101))
(push '1)
(push '#[1 2])
(push '"Foo")
(push 'a)
(push '(b c))
(mov '5 a4)
(jmp vector)
101
(eval ())
(return)
))
(loader'((fentry |(vector)| subr0)
(entry |(vector)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp vector)
101
(eval ())
(return)
))
(loader'((fentry |(vlength (makevector 10000 t))| subr0)
(entry |(vlength (makevector 10000 t))| subr0)
(mov 't a2)
(mov '10000 a1)
(jcall makevector)
(hgsize a1 a1)
(return)
))
(loader'((fentry |(vlength #[])| subr0)
(entry |(vlength #[])| subr0)
(hgsize '#[] a1)
(return)
))
(putprop '|(vlength x)| '(x) '#:complice:fvar)
(loader'((fentry |(vlength x)| subr0)
(entry |(vlength x)| subr0)
(hgsize (cvalq x) a1)
(return)
))
(putprop '|(vref x 0)| '(x) '#:complice:fvar)
(loader'((fentry |(vref x 0)| subr0)
(entry |(vref x 0)| subr0)
(hpxmov (cvalq x) '0 a1)
(return)
))
(putprop '|(vref x 1)| '(x) '#:complice:fvar)
(loader'((fentry |(vref x 1)| subr0)
(entry |(vref x 1)| subr0)
(hpxmov (cvalq x) '1 a1)
(return)
))
(putprop '|(vref x 4)| '(x) '#:complice:fvar)
(loader'((fentry |(vref x 4)| subr0)
(entry |(vref x 4)| subr0)
(hpxmov (cvalq x) '4 a1)
(return)
))
(putprop '|(vset x 0 '(x y))| '(x) '#:complice:fvar)
(loader'((fentry |(vset x 0 '(x y))| subr0)
(entry |(vset x 0 '(x y))| subr0)
(hpmovx '(x y) (cvalq x) '0)
(mov '(x y) a1)
(return)
))
(putprop '|(vset x 4 '(t))| '(x) '#:complice:fvar)
(loader'((fentry |(vset x 4 '(t))| subr0)
(entry |(vset x 4 '(t))| subr0)
(hpmovx '(t) (cvalq x) '4)
(mov '(t) a1)
(return)
))
(putprop '|(vset x 2 ())| '(x) '#:complice:fvar)
(loader'((fentry |(vset x 2 ())| subr0)
(entry |(vset x 2 ())| subr0)
(hpmovx nil (cvalq x) '2)
(mov nil a1)
(return)
))
(putprop '|(type-of v)| '(v) '#:complice:fvar)
(loader'((fentry |(type-of v)| subr0)
(entry |(type-of v)| subr0)
(mov (cvalq v) a1)
(jmp type-of)
))
(putprop '|(typevector v)| '(v) '#:complice:fvar)
(loader'((fentry |(typevector v)| subr0)
(entry |(typevector v)| subr0)
(mov (cvalq v) a1)
(mov (cdr a1) a1)
(return)
))
(putprop '|(typevector v 'foo-the-bar)| '(v) '#:complice:fvar)
(loader'((fentry |(typevector v 'foo-the-bar)| subr0)
(entry |(typevector v 'foo-the-bar)| subr0)
(mov (cvalq v) a4)
(mov 'foo-the-bar (cdr a4))
(mov 'foo-the-bar a1)
(return)
))
(putprop '|(typevector v '(1 2 3))| '(v) '#:complice:fvar)
(loader'((fentry |(typevector v '(1 2 3))| subr0)
(entry |(typevector v '(1 2 3))| subr0)
(mov (cvalq v) a4)
(mov '(1 2 3) (cdr a4))
(mov '(1 2 3) a1)
(return)
))
(loader'((fentry |(eqvector #[1 (a b c) d] #[1 (a b c) d])| subr0)
(entry |(eqvector #[1 (a b c) d] #[1 (a b c) d])| subr0)
(mov '#[1 (a b c) d] a2)
(mov '#[1 (a b c) d] a1)
(jmp eqvector)
))
(loader'((fentry |(eqvector #:foo:#[1 2] #[1 2])| subr0)
(entry |(eqvector #:foo:#[1 2] #[1 2])| subr0)
(mov '#[1 2] a2)
(mov '#:foo:#[1 2] a1)
(jmp eqvector)
))
(loader'((fentry |(eqvector #:foo:#[1 2] #:foo:#[1 2])| subr0)
(entry |(eqvector #:foo:#[1 2] #:foo:#[1 2])| subr0)
(mov '#:foo:#[1 2] a2)
(mov '#:foo:#[1 2] a1)
(jmp eqvector)
))
(loader'((fentry |(eqvector #[] #[])| subr0)
(entry |(eqvector #[] #[])| subr0)
(mov '#[] a2)
(mov '#[] a1)
(jmp eqvector)
))
(putprop '|(typevector v 'foo)| '(v) '#:complice:fvar)
(loader'((fentry |(typevector v 'foo)| subr0)
(entry |(typevector v 'foo)| subr0)
(mov (cvalq v) a4)
(mov 'foo (cdr a4))
(mov 'foo a1)
(return)
))
(putprop '|(exchvector v w)| '(w v) '#:complice:fvar)
(loader'((fentry |(exchvector v w)| subr0)
(entry |(exchvector v w)| subr0)
(mov (cvalq w) a2)
(mov (cvalq v) a1)
(jmp exchvector)
))
(loader'((fentry |(bltvector #[f o o b a r] 1 #[x y z] 2 1)| subr0)
(entry |(bltvector #[f o o b a r] 1 #[x y z] 2 1)| subr0)
(push (@ 101))
(push '#[f o o b a r])
(push '1)
(push '#[x y z])
(push '2)
(push '1)
(mov '5 a4)
(jmp bltvector)
101
(eval ())
(return)
))
(loader'((fentry |(bltvector #[f o o b a r] 1 #[t o t o] 0 6)| subr0)
(entry |(bltvector #[f o o b a r] 1 #[t o t o] 0 6)| subr0)
(push (@ 101))
(push '#[f o o b a r])
(push '1)
(push '#[t o t o])
(push '0)
(push '6)
(mov '5 a4)
(jmp bltvector)
101
(eval ())
(return)
))
(loader'((fentry |(bltvector #[f o o b a r] 3 #[t o t o t a] 0 8)| subr0)
(entry |(bltvector #[f o o b a r] 3 #[t o t o t a] 0 8)| subr0)
(push (@ 101))
(push '#[f o o b a r])
(push '3)
(push '#[t o t o t a])
(push '0)
(push '8)
(mov '5 a4)
(jmp bltvector)
101
(eval ())
(return)
))
(putprop '|(bltvector vect 1 vect 3 4)| '(vect) '#:complice:fvar)
(loader'((fentry |(bltvector vect 1 vect 3 4)| subr0)
(entry |(bltvector vect 1 vect 3 4)| subr0)
(push (@ 101))
(push (cvalq vect))
(push '1)
(push (cvalq vect))
(push '3)
(push '4)
(mov '5 a4)
(jmp bltvector)
101
(eval ())
(return)
))
(putprop '|(bltvector vect 6 vect 0 2)| '(vect) '#:complice:fvar)
(loader'((fentry |(bltvector vect 6 vect 0 2)| subr0)
(entry |(bltvector vect 6 vect 0 2)| subr0)
(push (@ 101))
(push (cvalq vect))
(push '6)
(push (cvalq vect))
(push '0)
(push '2)
(mov '5 a4)
(jmp bltvector)
101
(eval ())
(return)
))
(putprop '|(bltvector vect 0 vect 4 4)| '(vect) '#:complice:fvar)
(loader'((fentry |(bltvector vect 0 vect 4 4)| subr0)
(entry |(bltvector vect 0 vect 4 4)| subr0)
(push (@ 101))
(push (cvalq vect))
(push '0)
(push (cvalq vect))
(push '4)
(push '4)
(mov '5 a4)
(jmp bltvector)
101
(eval ())
(return)
))
(putprop '|(bltvector vect 0 vect 1)| '(vect) '#:complice:fvar)
(loader'((fentry |(bltvector vect 0 vect 1)| subr0)
(entry |(bltvector vect 0 vect 1)| subr0)
(push (@ 101))
(push (cvalq vect))
(push '0)
(push (cvalq vect))
(push '1)
(mov '4 a4)
(jmp bltvector)
101
(eval ())
(return)
))
(putprop '|(fillvector x 1 'z 2)| '(x) '#:complice:fvar)
(loader'((fentry |(fillvector x 1 'z 2)| subr0)
(entry |(fillvector x 1 'z 2)| subr0)
(push (@ 101))
(push (cvalq x))
(push '1)
(push 'z)
(push '2)
(mov '4 a4)
(jmp fillvector)
101
(eval ())
(return)
))
(putprop '|(fillvector x 0 'y 3)| '(x) '#:complice:fvar)
(loader'((fentry |(fillvector x 0 'y 3)| subr0)
(entry |(fillvector x 0 'y 3)| subr0)
(push (@ 101))
(push (cvalq x))
(push '0)
(push 'y)
(push '3)
(mov '4 a4)
(jmp fillvector)
101
(eval ())
(return)
))
(putprop '|(fillvector x 2 'u)| '(x) '#:complice:fvar)
(loader'((fentry |(fillvector x 2 'u)| subr0)
(entry |(fillvector x 2 'u)| subr0)
(push (@ 101))
(push (cvalq x))
(push '2)
(push 'u)
(mov '3 a4)
(jmp fillvector)
101
(eval ())
(return)
))
(putprop '|(fillvector x 4 'v 20)| '(x) '#:complice:fvar)
(loader'((fentry |(fillvector x 4 'v 20)| subr0)
(entry |(fillvector x 4 'v 20)| subr0)
(push (@ 101))
(push (cvalq x))
(push '4)
(push 'v)
(push '20)
(mov '4 a4)
(jmp fillvector)
101
(eval ())
(return)
))
(putprop '|(aset x 1 2 -1)| '(x) '#:complice:fvar)
(loader'((fentry |(aset x 1 2 -1)| subr0)
(entry |(aset x 1 2 -1)| subr0)
(hpxmov (cvalq x) '1 a4)
(hpmovx '-1 a4 '2)
(mov '-1 a1)
(return)
))
(putprop '|(aref x 1 2)| '(x) '#:complice:fvar)
(loader'((fentry |(aref x 1 2)| subr0)
(entry |(aref x 1 2)| subr0)
(hpxmov (cvalq x) '1 a1)
(hpxmov a1 '2 a1)
(return)
))
(loader'((fentry |(#:foo:b a)| subr0)
(entry |(#:foo:b a)| subr0)
(push (@ 101))
(push '(#:foo:b a))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:b a 2)| subr0)
(entry |(#:foo:b a 2)| subr0)
(push (@ 101))
(push '(#:foo:b a 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:b b)| subr0)
(entry |(#:foo:b b)| subr0)
(push (@ 101))
(push '(#:foo:b b))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:b b 'b)| subr0)
(entry |(#:foo:bar:b b 'b)| subr0)
(push (@ 101))
(push '(#:foo:bar:b b 'b))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:b b)| subr0)
(entry |(#:foo:bar:b b)| subr0)
(push (@ 101))
(push '(#:foo:bar:b b))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:b x)| subr0)
(entry |(#:foo:b x)| subr0)
(push (@ 101))
(push '(#:foo:b x))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:b x)| subr0)
(entry |(#:foo:bar:b x)| subr0)
(push (@ 101))
(push '(#:foo:bar:b x))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:gee:b x)| subr0)
(entry |(#:foo:bar:gee:b x)| subr0)
(push (@ 101))
(push '(#:foo:bar:gee:b x))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:e x)| subr0)
(entry |(#:foo:bar:e x)| subr0)
(push (@ 101))
(push '(#:foo:bar:|e| x))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:gee:e x)| subr0)
(entry |(#:foo:bar:gee:e x)| subr0)
(push (@ 101))
(push '(#:foo:bar:gee:|e| x))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:gee:f x)| subr0)
(entry |(#:foo:bar:gee:f x)| subr0)
(push (@ 101))
(push '(#:foo:bar:gee:f x))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:b x 0)| subr0)
(entry |(#:foo:b x 0)| subr0)
(push (@ 101))
(push '(#:foo:b x 0))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:e x 14)| subr0)
(entry |(#:foo:bar:e x 14)| subr0)
(push (@ 101))
(push '(#:foo:bar:|e| x 14))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:gee:f x 10)| subr0)
(entry |(#:foo:bar:gee:f x 10)| subr0)
(push (@ 101))
(push '(#:foo:bar:gee:f x 10))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:b x 2)| subr0)
(entry |(#:foo:bar:b x 2)| subr0)
(push (@ 101))
(push '(#:foo:bar:b x 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:gee:e x 15)| subr0)
(entry |(#:foo:bar:gee:e x 15)| subr0)
(push (@ 101))
(push '(#:foo:bar:gee:|e| x 15))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(#:foo:bar:gee:b x 3)| subr0)
(entry |(#:foo:bar:gee:b x 3)| subr0)
(push (@ 101))
(push '(#:foo:bar:gee:b x 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(putprop '|(progn (setq x (cond ((eq (system) 'vaxvms) sys$scratch:tfiles1) (t /tmp/tfiles1))) (setq y (cond ((eq (system) 'vaxvms) sys$scratch:tfiles2) (t /tmp/tfiles2))) (setq z (cond ((eq (system) 'vaxvms) sys$scratch:tfiles3) (t /tmp/tfiles3))) ())| '(z y x) '#:complice:fvar)
(loader'((fentry |(progn (setq x (cond ((eq (system) 'vaxvms) sys$scratch:tfiles1) (t /tmp/tfiles1))) (setq y (cond ((eq (system) 'vaxvms) sys$scratch:tfiles2) (t /tmp/tfiles2))) (setq z (cond ((eq (system) 'vaxvms) sys$scratch:tfiles3) (t /tmp/tfiles3))) ())| subr0)
(entry |(progn (setq x (cond ((eq (system) 'vaxvms) sys$scratch:tfiles1) (t /tmp/tfiles1))) (setq y (cond ((eq (system) 'vaxvms) sys$scratch:tfiles2) (t /tmp/tfiles2))) (setq z (cond ((eq (system) 'vaxvms) sys$scratch:tfiles3) (t /tmp/tfiles3))) ())| subr0)
(jcall system)
(cabne a1 'vaxvms 101)
(mov '"sys$scratch:tfiles1" a4)
(bra 102)
101
(mov '"/tmp/tfiles1" a4)
102
(mov a4 (cvalq x))
(jcall system)
(cabne a1 'vaxvms 103)
(mov '"sys$scratch:tfiles2" a3)
(bra 104)
103
(mov '"/tmp/tfiles2" a3)
104
(mov a3 (cvalq y))
(jcall system)
(cabne a1 'vaxvms 105)
(mov '"sys$scratch:tfiles3" a4)
(bra 106)
105
(mov '"/tmp/tfiles3" a4)
106
(mov a4 (cvalq z))
(mov nil a1)
(return)
))
(putprop '|(progn (with ((outchan (openo x))) (print coucou) (close (outchan))) ())| '(x) '#:complice:fvar)
(loader'((fentry |(progn (with ((outchan (openo x))) (print coucou) (close (outchan))) ())| subr0)
(entry |(progn (with ((outchan (openo x))) (print coucou) (close (outchan))) ())| subr0)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(mov (cvalq x) a1)
(jcall openo)
(push a1)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push (@ 105))
(push '"coucou")
(mov '1 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push (@ 107))
(mov '0 a4)
(jmp outchan)
107
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
106
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(mov nil a1)
(return)
))
(putprop '|(probefile x)| '(x) '#:complice:fvar)
(loader'((fentry |(probefile x)| subr0)
(entry |(probefile x)| subr0)
(mov (cvalq x) a1)
(jmp probefile)
))
(putprop '|(probefile y)| '(y) '#:complice:fvar)
(loader'((fentry |(probefile y)| subr0)
(entry |(probefile y)| subr0)
(mov (cvalq y) a1)
(jmp probefile)
))
(putprop '|(copyfile x y)| '(y x) '#:complice:fvar)
(loader'((fentry |(copyfile x y)| subr0)
(entry |(copyfile x y)| subr0)
(mov (cvalq y) a2)
(mov (cvalq x) a1)
(jmp copyfile)
))
(putprop '|(renamefile y z)| '(z y) '#:complice:fvar)
(loader'((fentry |(renamefile y z)| subr0)
(entry |(renamefile y z)| subr0)
(mov (cvalq z) a2)
(mov (cvalq y) a1)
(jmp renamefile)
))
(putprop '|(probefile z)| '(z) '#:complice:fvar)
(loader'((fentry |(probefile z)| subr0)
(entry |(probefile z)| subr0)
(mov (cvalq z) a1)
(jmp probefile)
))
(putprop '|(let (a) (with ((inchan (openi z))) (setq a (read)) (close (inchan))) a)| '(z) '#:complice:fvar)
(loader'((fentry |(let (a) (with ((inchan (openi z))) (setq a (read)) (close (inchan))) a)| subr0)
(entry |(let (a) (with ((inchan (openi z))) (setq a (read)) (close (inchan))) a)| subr0)
(push nil)
(push (@ 101))
(mov '0 a4)
(jmp inchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(mov (cvalq z) a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
104
(eval ())
(jcall read)
(mov a1 (& 4))
(push (@ 105))
(push (@ 106))
(mov '0 a4)
(jmp inchan)
106
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
105
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 107))
(push (& 4))
(mov '1 a4)
(jmp inchan)
107
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(putprop '|(deletefile x)| '(x) '#:complice:fvar)
(loader'((fentry |(deletefile x)| subr0)
(entry |(deletefile x)| subr0)
(mov (cvalq x) a1)
(jmp deletefile)
))
(putprop '|(deletefile z)| '(z) '#:complice:fvar)
(loader'((fentry |(deletefile z)| subr0)
(entry |(deletefile z)| subr0)
(mov (cvalq z) a1)
(jmp deletefile)
))
(putprop '|(progn (setq foo /tmp/lldtest) (setq bar /tmp/lldtest/) (setq gee /) ())| '(gee bar foo) '#:complice:fvar)
(loader'((fentry |(progn (setq foo /tmp/lldtest) (setq bar /tmp/lldtest/) (setq gee /) ())| subr0)
(entry |(progn (setq foo /tmp/lldtest) (setq bar /tmp/lldtest/) (setq gee /) ())| subr0)
(mov '"/tmp/lldtest" (cvalq foo))
(mov '"/tmp/lldtest/" (cvalq bar))
(mov '"/" (cvalq gee))
(mov nil a1)
(return)
))
(putprop '|(create-directory foo)| '(foo) '#:complice:fvar)
(loader'((fentry |(create-directory foo)| subr0)
(entry |(create-directory foo)| subr0)
(mov (cvalq foo) a1)
(jmp create-directory)
))
(putprop '|(delete-directory foo)| '(foo) '#:complice:fvar)
(loader'((fentry |(delete-directory foo)| subr0)
(entry |(delete-directory foo)| subr0)
(mov (cvalq foo) a1)
(jmp delete-directory)
))
(putprop '|(create-directory bar)| '(bar) '#:complice:fvar)
(loader'((fentry |(create-directory bar)| subr0)
(entry |(create-directory bar)| subr0)
(mov (cvalq bar) a1)
(jmp create-directory)
))
(putprop '|(delete-directory bar)| '(bar) '#:complice:fvar)
(loader'((fentry |(delete-directory bar)| subr0)
(entry |(delete-directory bar)| subr0)
(mov (cvalq bar) a1)
(jmp delete-directory)
))
(loader'((fentry |(fix 10.4)| subr0)
(entry |(fix 10.4)| subr0)
(mov '10.4 a1)
(jmp fix)
))
(loader'((fentry |(fix 10.5)| subr0)
(entry |(fix 10.5)| subr0)
(mov '10.5 a1)
(jmp fix)
))
(loader'((fentry |(fix 10.6)| subr0)
(entry |(fix 10.6)| subr0)
(mov '10.6 a1)
(jmp fix)
))
(loader'((fentry |(fix 0.4)| subr0)
(entry |(fix 0.4)| subr0)
(mov '0.4 a1)
(jmp fix)
))
(loader'((fentry |(fix 0.5)| subr0)
(entry |(fix 0.5)| subr0)
(mov '0.5 a1)
(jmp fix)
))
(loader'((fentry |(fix 0.6)| subr0)
(entry |(fix 0.6)| subr0)
(mov '0.6 a1)
(jmp fix)
))
(loader'((fentry |(fix -0.4)| subr0)
(entry |(fix -0.4)| subr0)
(mov '-0.4 a1)
(jmp fix)
))
(loader'((fentry |(fix -0.5)| subr0)
(entry |(fix -0.5)| subr0)
(mov '-0.5 a1)
(jmp fix)
))
(loader'((fentry |(fix -0.6)| subr0)
(entry |(fix -0.6)| subr0)
(mov '-0.6 a1)
(jmp fix)
))
(loader'((fentry |(fix -10.4)| subr0)
(entry |(fix -10.4)| subr0)
(mov '-10.4 a1)
(jmp fix)
))
(loader'((fentry |(fix -10.5)| subr0)
(entry |(fix -10.5)| subr0)
(mov '-10.5 a1)
(jmp fix)
))
(loader'((fentry |(fix -10.6)| subr0)
(entry |(fix -10.6)| subr0)
(mov '-10.6 a1)
(jmp fix)
))
(loader'((fentry |(truncate -10.6)| subr0)
(entry |(truncate -10.6)| subr0)
(mov '-10.6 a1)
(jmp truncate)
))
(loader'((fentry |(truncate 32767.)| subr0)
(entry |(truncate 32767.)| subr0)
(mov '32767. a1)
(jmp truncate)
))
(loader'((fentry |(truncate 32766.9)| subr0)
(entry |(truncate 32766.9)| subr0)
(mov '32766.9 a1)
(jmp truncate)
))
(loader'((fentry |(truncate -32767.)| subr0)
(entry |(truncate -32767.)| subr0)
(mov '-32767. a1)
(jmp truncate)
))
(loader'((fentry |(truncate -32766.9)| subr0)
(entry |(truncate -32766.9)| subr0)
(mov '-32766.9 a1)
(jmp truncate)
))
(loader'((fentry |(1+ 6)| subr0)
(entry |(1+ 6)| subr0)
(mov '6 a1)
(jmp |1+|)
))
(loader'((fentry |(1+ -3)| subr0)
(entry |(1+ -3)| subr0)
(mov '-3 a1)
(jmp |1+|)
))
(loader'((fentry |(1+ 10.)| subr0)
(entry |(1+ 10.)| subr0)
(mov '10. a1)
(jmp |1+|)
))
(loader'((fentry |(1+ -1)| subr0)
(entry |(1+ -1)| subr0)
(mov '-1 a1)
(jmp |1+|)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (1+ 32767))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (1+ 32767))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '32767 a1)
(jcall |1+|)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(1- 7)| subr0)
(entry |(1- 7)| subr0)
(mov '7 a1)
(jmp |1-|)
))
(loader'((fentry |(1- -3)| subr0)
(entry |(1- -3)| subr0)
(mov '-3 a1)
(jmp |1-|)
))
(loader'((fentry |(1- 0)| subr0)
(entry |(1- 0)| subr0)
(mov '0 a1)
(jmp |1-|)
))
(loader'((fentry |(1- 10.)| subr0)
(entry |(1- 10.)| subr0)
(mov '10. a1)
(jmp |1-|)
))
(loader'((fentry |(1- -9.)| subr0)
(entry |(1- -9.)| subr0)
(mov '-9. a1)
(jmp |1-|)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (1- #$8000))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (1- #$8000))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#$8000 a1)
(jcall |1-|)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (1- -32767))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (1- -32767))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '-32767 a1)
(jcall |1-|)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(abs 10)| subr0)
(entry |(abs 10)| subr0)
(mov '10 a1)
(jmp abs)
))
(loader'((fentry |(abs -10)| subr0)
(entry |(abs -10)| subr0)
(mov '-10 a1)
(jmp abs)
))
(loader'((fentry |(abs 10.23)| subr0)
(entry |(abs 10.23)| subr0)
(mov '10.23 a1)
(jmp abs)
))
(loader'((fentry |(abs -10.23)| subr0)
(entry |(abs -10.23)| subr0)
(mov '-10.23 a1)
(jmp abs)
))
(loader'((fentry |(+)| subr0)
(entry |(+)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ 8)| subr0)
(entry |(+ 8)| subr0)
(push (@ 101))
(push '8)
(mov '1 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ 8.)| subr0)
(entry |(+ 8.)| subr0)
(push (@ 101))
(push '8.)
(mov '1 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ 5 6)| subr0)
(entry |(+ 5 6)| subr0)
(push (@ 101))
(push '5)
(push '6)
(mov '2 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ -5 -6 1)| subr0)
(entry |(+ -5 -6 1)| subr0)
(push (@ 101))
(push '-5)
(push '-6)
(push '1)
(mov '3 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ 5 6 7)| subr0)
(entry |(+ 5 6 7)| subr0)
(push (@ 101))
(push '5)
(push '6)
(push '7)
(mov '3 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ 5. 6 7)| subr0)
(entry |(+ 5. 6 7)| subr0)
(push (@ 101))
(push '5.)
(push '6)
(push '7)
(mov '3 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ 5 6. 7)| subr0)
(entry |(+ 5 6. 7)| subr0)
(push (@ 101))
(push '5)
(push '6.)
(push '7)
(mov '3 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ 5 6 7.)| subr0)
(entry |(+ 5 6 7.)| subr0)
(push (@ 101))
(push '5)
(push '6)
(push '7.)
(mov '3 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (+ 32000 32000))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (+ 32000 32000))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '32000)
(push '32000)
(mov '2 a4)
(jmp |+|)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(+ 32000. 32000. 1)| subr0)
(entry |(+ 32000. 32000. 1)| subr0)
(push (@ 101))
(push '32000.)
(push '32000.)
(push '1)
(mov '3 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(+ 100. 1000. 10000. 100000.)| subr0)
(entry |(+ 100. 1000. 10000. 100000.)| subr0)
(push (@ 101))
(push '100.)
(push '1000.)
(push '10000.)
(push '100000.)
(mov '4 a4)
(jmp |+|)
101
(eval ())
(return)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (+ 32000 32000 1))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (+ 32000 32000 1))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '32000)
(push '32000)
(push '1)
(mov '3 a4)
(jmp |+|)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (+ 32000 1 32000 1))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (+ 32000 1 32000 1))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '32000)
(push '1)
(push '32000)
(push '1)
(mov '4 a4)
(jmp |+|)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(-)| subr0)
(entry |(-)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- 20)| subr0)
(entry |(- 20)| subr0)
(push (@ 101))
(push '20)
(mov '1 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- 20.)| subr0)
(entry |(- 20.)| subr0)
(push (@ 101))
(push '20.)
(mov '1 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- 20 5)| subr0)
(entry |(- 20 5)| subr0)
(push (@ 101))
(push '20)
(push '5)
(mov '2 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- -20 -10)| subr0)
(entry |(- -20 -10)| subr0)
(push (@ 101))
(push '-20)
(push '-10)
(mov '2 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- 20. 5 2)| subr0)
(entry |(- 20. 5 2)| subr0)
(push (@ 101))
(push '20.)
(push '5)
(push '2)
(mov '3 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- 20 5. 2)| subr0)
(entry |(- 20 5. 2)| subr0)
(push (@ 101))
(push '20)
(push '5.)
(push '2)
(mov '3 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- 20 5 2.)| subr0)
(entry |(- 20 5 2.)| subr0)
(push (@ 101))
(push '20)
(push '5)
(push '2.)
(mov '3 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (- #$8000 1 1 1))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (- #$8000 1 1 1))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '#$8000)
(push '1)
(push '1)
(push '1)
(mov '4 a4)
(jmp |-|)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(- 1 #$8000 1 1)| subr0)
(entry |(- 1 #$8000 1 1)| subr0)
(push (@ 101))
(push '1)
(push '#$8000)
(push '1)
(push '1)
(mov '4 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- 1 1 #$8000 1)| subr0)
(entry |(- 1 1 #$8000 1)| subr0)
(push (@ 101))
(push '1)
(push '1)
(push '#$8000)
(push '1)
(mov '4 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(- 1 1 1 #$8000)| subr0)
(entry |(- 1 1 1 #$8000)| subr0)
(push (@ 101))
(push '1)
(push '1)
(push '1)
(push '#$8000)
(mov '4 a4)
(jmp |-|)
101
(eval ())
(return)
))
(loader'((fentry |(*)| subr0)
(entry |(*)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(* 5)| subr0)
(entry |(* 5)| subr0)
(push (@ 101))
(push '5)
(mov '1 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(* 5.)| subr0)
(entry |(* 5.)| subr0)
(push (@ 101))
(push '5.)
(mov '1 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(* 10 20)| subr0)
(entry |(* 10 20)| subr0)
(push (@ 101))
(push '10)
(push '20)
(mov '2 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(* -100 200)| subr0)
(entry |(* -100 200)| subr0)
(push (@ 101))
(push '-100)
(push '200)
(mov '2 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(* 2 3 4)| subr0)
(entry |(* 2 3 4)| subr0)
(push (@ 101))
(push '2)
(push '3)
(push '4)
(mov '3 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(* 2. 3 4)| subr0)
(entry |(* 2. 3 4)| subr0)
(push (@ 101))
(push '2.)
(push '3)
(push '4)
(mov '3 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(* 2 3. 4)| subr0)
(entry |(* 2 3. 4)| subr0)
(push (@ 101))
(push '2)
(push '3.)
(push '4)
(mov '3 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(* 2 3 4.)| subr0)
(entry |(* 2 3 4.)| subr0)
(push (@ 101))
(push '2)
(push '3)
(push '4.)
(mov '3 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (* 1 10 100 1000))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (* 1 10 100 1000))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '1)
(push '10)
(push '100)
(push '1000)
(mov '4 a4)
(jmp *)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(/)| subr0)
(entry |(/)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 1)| subr0)
(entry |(/ 1)| subr0)
(push (@ 101))
(push '1)
(mov '1 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 40.)| subr0)
(entry |(/ 40.)| subr0)
(push (@ 101))
(push '40.)
(mov '1 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 12 4)| subr0)
(entry |(/ 12 4)| subr0)
(push (@ 101))
(push '12)
(push '4)
(mov '2 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 24 4 2)| subr0)
(entry |(/ 24 4 2)| subr0)
(push (@ 101))
(push '24)
(push '4)
(push '2)
(mov '3 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 12 5.)| subr0)
(entry |(/ 12 5.)| subr0)
(push (@ 101))
(push '12)
(push '5.)
(mov '2 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 12. 5)| subr0)
(entry |(/ 12. 5)| subr0)
(push (@ 101))
(push '12.)
(push '5)
(mov '2 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 24. 1.2 2)| subr0)
(entry |(/ 24. 1.2 2)| subr0)
(push (@ 101))
(push '24.)
(push '1.2)
(push '2)
(mov '3 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 24 1.2 2)| subr0)
(entry |(/ 24 1.2 2)| subr0)
(push (@ 101))
(push '24)
(push '1.2)
(push '2)
(mov '3 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 24 1.2 2.)| subr0)
(entry |(/ 24 1.2 2.)| subr0)
(push (@ 101))
(push '24)
(push '1.2)
(push '2.)
(mov '3 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ -8 2)| subr0)
(entry |(/ -8 2)| subr0)
(push (@ 101))
(push '-8)
(push '2)
(mov '2 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(/ 20000 -20000)| subr0)
(entry |(/ 20000 -20000)| subr0)
(push (@ 101))
(push '20000)
(push '-20000)
(mov '2 a4)
(jmp /)
101
(eval ())
(return)
))
(loader'((fentry |(quotient 5 3)| subr0)
(entry |(quotient 5 3)| subr0)
(mov '3 a2)
(mov '5 a1)
(jmp quotient)
))
(loader'((fentry |(quotient 5 -3)| subr0)
(entry |(quotient 5 -3)| subr0)
(mov '-3 a2)
(mov '5 a1)
(jmp quotient)
))
(loader'((fentry |(quotient -5 3)| subr0)
(entry |(quotient -5 3)| subr0)
(mov '3 a2)
(mov '-5 a1)
(jmp quotient)
))
(loader'((fentry |(quotient -5 -3)| subr0)
(entry |(quotient -5 -3)| subr0)
(mov '-3 a2)
(mov '-5 a1)
(jmp quotient)
))
(loader'((fentry |(quotient 12 4)| subr0)
(entry |(quotient 12 4)| subr0)
(mov '4 a2)
(mov '12 a1)
(jmp quotient)
))
(loader'((fentry |(quotient 12 5)| subr0)
(entry |(quotient 12 5)| subr0)
(mov '5 a2)
(mov '12 a1)
(jmp quotient)
))
(loader'((fentry |(quotient 12 6)| subr0)
(entry |(quotient 12 6)| subr0)
(mov '6 a2)
(mov '12 a1)
(jmp quotient)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (quotient 12 5.))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (quotient 12 5.))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '5. a2)
(mov '12 a1)
(jcall quotient)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (quotient -12 5.))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (quotient -12 5.))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '5. a2)
(mov '-12 a1)
(jcall quotient)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(quotient -8 2)| subr0)
(entry |(quotient -8 2)| subr0)
(mov '2 a2)
(mov '-8 a1)
(jmp quotient)
))
(loader'((fentry |(quotient 20000 -20000)| subr0)
(entry |(quotient 20000 -20000)| subr0)
(mov '-20000 a2)
(mov '20000 a1)
(jmp quotient)
))
(loader'((fentry |(modulo 5 3)| subr0)
(entry |(modulo 5 3)| subr0)
(mov '3 a2)
(mov '5 a1)
(jmp modulo)
))
(loader'((fentry |(modulo 5 -3)| subr0)
(entry |(modulo 5 -3)| subr0)
(mov '-3 a2)
(mov '5 a1)
(jmp modulo)
))
(loader'((fentry |(modulo -5 3)| subr0)
(entry |(modulo -5 3)| subr0)
(mov '3 a2)
(mov '-5 a1)
(jmp modulo)
))
(loader'((fentry |(modulo -5 -3)| subr0)
(entry |(modulo -5 -3)| subr0)
(mov '-3 a2)
(mov '-5 a1)
(jmp modulo)
))
(loader'((fentry |(modulo 14 4)| subr0)
(entry |(modulo 14 4)| subr0)
(mov '4 a2)
(mov '14 a1)
(jmp modulo)
))
(loader'((fentry |(modulo -8 2)| subr0)
(entry |(modulo -8 2)| subr0)
(mov '2 a2)
(mov '-8 a1)
(jmp modulo)
))
(loader'((fentry |(modulo 30001 3)| subr0)
(entry |(modulo 30001 3)| subr0)
(mov '3 a2)
(mov '30001 a1)
(jmp modulo)
))
(loader'((fentry |(let ((#:sys-package:genarith 'genarith)) (modulo 12.4 2))| subr0)
(entry |(let ((#:sys-package:genarith 'genarith)) (modulo 12.4 2))| subr0)
(push 'genarith)
(push (cvalq #:sys-package:genarith))
(mov (& 1) (cvalq #:sys-package:genarith))
(push '1)
(push '(#:sys-package:genarith))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '2 a2)
(mov '12.4 a1)
(jcall modulo)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:genarith))
(adjstk '8)
(return)
))
(loader'((fentry |(<?> 100 100)| subr0)
(entry |(<?> 100 100)| subr0)
(mov '100 a2)
(mov '100 a1)
(jmp <?>)
))
(loader'((fentry |(<?> 100 200)| subr0)
(entry |(<?> 100 200)| subr0)
(mov '200 a2)
(mov '100 a1)
(jmp <?>)
))
(loader'((fentry |(<?> 200 100)| subr0)
(entry |(<?> 200 100)| subr0)
(mov '100 a2)
(mov '200 a1)
(jmp <?>)
))
(loader'((fentry |(<?> 100. 100)| subr0)
(entry |(<?> 100. 100)| subr0)
(mov '100 a2)
(mov '100. a1)
(jmp <?>)
))
(loader'((fentry |(<?> 100. 200)| subr0)
(entry |(<?> 100. 200)| subr0)
(mov '200 a2)
(mov '100. a1)
(jmp <?>)
))
(loader'((fentry |(<?> 200. 100)| subr0)
(entry |(<?> 200. 100)| subr0)
(mov '100 a2)
(mov '200. a1)
(jmp <?>)
))
(loader'((fentry |(<?> 100 100.)| subr0)
(entry |(<?> 100 100.)| subr0)
(mov '100. a2)
(mov '100 a1)
(jmp <?>)
))
(loader'((fentry |(<?> 100 200.)| subr0)
(entry |(<?> 100 200.)| subr0)
(mov '200. a2)
(mov '100 a1)
(jmp <?>)
))
(loader'((fentry |(<?> 200 100.)| subr0)
(entry |(<?> 200 100.)| subr0)
(mov '100. a2)
(mov '200 a1)
(jmp <?>)
))
(loader'((fentry |(<?> 100. 100.)| subr0)
(entry |(<?> 100. 100.)| subr0)
(mov '100. a2)
(mov '100. a1)
(jmp <?>)
))
(loader'((fentry |(<?> 100. 200.)| subr0)
(entry |(<?> 100. 200.)| subr0)
(mov '200. a2)
(mov '100. a1)
(jmp <?>)
))
(loader'((fentry |(<?> 200. 100.)| subr0)
(entry |(<?> 200. 100.)| subr0)
(mov '100. a2)
(mov '200. a1)
(jmp <?>)
))
(loader'((fentry |(zerop 1)| subr0)
(entry |(zerop 1)| subr0)
(mov '1 a1)
(jmp zerop)
))
(loader'((fentry |(zerop 0)| subr0)
(entry |(zerop 0)| subr0)
(mov '0 a1)
(jmp zerop)
))
(loader'((fentry |(zerop 0.)| subr0)
(entry |(zerop 0.)| subr0)
(mov '0. a1)
(jmp zerop)
))
(loader'((fentry |(zerop 20000)| subr0)
(entry |(zerop 20000)| subr0)
(mov '20000 a1)
(jmp zerop)
))
(loader'((fentry |(zerop -1)| subr0)
(entry |(zerop -1)| subr0)
(mov '-1 a1)
(jmp zerop)
))
(loader'((fentry |(plusp 0)| subr0)
(entry |(plusp 0)| subr0)
(mov '0 a1)
(jmp plusp)
))
(loader'((fentry |(plusp 0.)| subr0)
(entry |(plusp 0.)| subr0)
(mov '0. a1)
(jmp plusp)
))
(loader'((fentry |(plusp 123.324)| subr0)
(entry |(plusp 123.324)| subr0)
(mov '123.324 a1)
(jmp plusp)
))
(loader'((fentry |(plusp 20000)| subr0)
(entry |(plusp 20000)| subr0)
(mov '20000 a1)
(jmp plusp)
))
(loader'((fentry |(plusp 2000.)| subr0)
(entry |(plusp 2000.)| subr0)
(mov '2000. a1)
(jmp plusp)
))
(loader'((fentry |(plusp -1)| subr0)
(entry |(plusp -1)| subr0)
(mov '-1 a1)
(jmp plusp)
))
(loader'((fentry |(plusp -10.23)| subr0)
(entry |(plusp -10.23)| subr0)
(mov '-10.23 a1)
(jmp plusp)
))
(loader'((fentry |(minusp 1)| subr0)
(entry |(minusp 1)| subr0)
(mov '1 a1)
(jmp minusp)
))
(loader'((fentry |(minusp 0)| subr0)
(entry |(minusp 0)| subr0)
(mov '0 a1)
(jmp minusp)
))
(loader'((fentry |(minusp -1.)| subr0)
(entry |(minusp -1.)| subr0)
(mov '-1. a1)
(jmp minusp)
))
(loader'((fentry |(minusp -1)| subr0)
(entry |(minusp -1)| subr0)
(mov '-1 a1)
(jmp minusp)
))
(loader'((fentry |(minusp 20000)| subr0)
(entry |(minusp 20000)| subr0)
(mov '20000 a1)
(jmp minusp)
))
(loader'((fentry |(minusp -123.45)| subr0)
(entry |(minusp -123.45)| subr0)
(mov '-123.45 a1)
(jmp minusp)
))
(loader'((fentry |(= 10. 10)| subr0)
(entry |(= 10. 10)| subr0)
(push (@ 101))
(push '10.)
(push '10)
(mov '2 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(= 10 10.)| subr0)
(entry |(= 10 10.)| subr0)
(push (@ 101))
(push '10)
(push '10.)
(mov '2 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(= 10. 10.)| subr0)
(entry |(= 10. 10.)| subr0)
(push (@ 101))
(push '10.)
(push '10.)
(mov '2 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(= 10 10)| subr0)
(entry |(= 10 10)| subr0)
(push (@ 101))
(push '10)
(push '10)
(mov '2 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(= 10 10 10)| subr0)
(entry |(= 10 10 10)| subr0)
(push (@ 101))
(push '10)
(push '10)
(push '10)
(mov '3 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(= 10. 10 10)| subr0)
(entry |(= 10. 10 10)| subr0)
(push (@ 101))
(push '10.)
(push '10)
(push '10)
(mov '3 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(= 10 10. 10)| subr0)
(entry |(= 10 10. 10)| subr0)
(push (@ 101))
(push '10)
(push '10.)
(push '10)
(mov '3 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(= 10 10 10.)| subr0)
(entry |(= 10 10 10.)| subr0)
(push (@ 101))
(push '10)
(push '10)
(push '10.)
(mov '3 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(= 20000 20000)| subr0)
(entry |(= 20000 20000)| subr0)
(push (@ 101))
(push '20000)
(push '20000)
(mov '2 a4)
(jmp =)
101
(eval ())
(return)
))
(loader'((fentry |(/= 10. 10)| subr0)
(entry |(/= 10. 10)| subr0)
(mov '10 a2)
(mov '10. a1)
(jmp /=)
))
(loader'((fentry |(/= 10 10.)| subr0)
(entry |(/= 10 10.)| subr0)
(mov '10. a2)
(mov '10 a1)
(jmp /=)
))
(loader'((fentry |(/= 10. 10.)| subr0)
(entry |(/= 10. 10.)| subr0)
(mov '10. a2)
(mov '10. a1)
(jmp /=)
))
(loader'((fentry |(/= 10 10)| subr0)
(entry |(/= 10 10)| subr0)
(mov '10 a2)
(mov '10 a1)
(jmp /=)
))
(loader'((fentry |(/= 20000 20000)| subr0)
(entry |(/= 20000 20000)| subr0)
(mov '20000 a2)
(mov '20000 a1)
(jmp /=)
))
(loader'((fentry |(/= 10 20)| subr0)
(entry |(/= 10 20)| subr0)
(mov '20 a2)
(mov '10 a1)
(jmp /=)
))
(loader'((fentry |(/= 10. 20)| subr0)
(entry |(/= 10. 20)| subr0)
(mov '20 a2)
(mov '10. a1)
(jmp /=)
))
(loader'((fentry |(>= 20000 20000)| subr0)
(entry |(>= 20000 20000)| subr0)
(push (@ 101))
(push '20000)
(push '20000)
(mov '2 a4)
(jmp >=)
101
(eval ())
(return)
))
(loader'((fentry |(>= 20000 100)| subr0)
(entry |(>= 20000 100)| subr0)
(push (@ 101))
(push '20000)
(push '100)
(mov '2 a4)
(jmp >=)
101
(eval ())
(return)
))
(loader'((fentry |(>= 9. 10)| subr0)
(entry |(>= 9. 10)| subr0)
(push (@ 101))
(push '9.)
(push '10)
(mov '2 a4)
(jmp >=)
101
(eval ())
(return)
))
(loader'((fentry |(>= 9. 9)| subr0)
(entry |(>= 9. 9)| subr0)
(push (@ 101))
(push '9.)
(push '9)
(mov '2 a4)
(jmp >=)
101
(eval ())
(return)
))
(loader'((fentry |(>= 10 9.)| subr0)
(entry |(>= 10 9.)| subr0)
(push (@ 101))
(push '10)
(push '9.)
(mov '2 a4)
(jmp >=)
101
(eval ())
(return)
))
(loader'((fentry |(>= 10 10 11 12)| subr0)
(entry |(>= 10 10 11 12)| subr0)
(push (@ 101))
(push '10)
(push '10)
(push '11)
(push '12)
(mov '4 a4)
(jmp >=)
101
(eval ())
(return)
))
(loader'((fentry |(>= 10 10 11 10)| subr0)
(entry |(>= 10 10 11 10)| subr0)
(push (@ 101))
(push '10)
(push '10)
(push '11)
(push '10)
(mov '4 a4)
(jmp >=)
101
(eval ())
(return)
))
(loader'((fentry |(>= 10 10 9 8)| subr0)
(entry |(>= 10 10 9 8)| subr0)
(push (@ 101))
(push '10)
(push '10)
(push '9)
(push '8)
(mov '4 a4)
(jmp >=)
101
(eval ())
(return)
))
(loader'((fentry |(> 9. 10)| subr0)
(entry |(> 9. 10)| subr0)
(push (@ 101))
(push '9.)
(push '10)
(mov '2 a4)
(jmp >)
101
(eval ())
(return)
))
(loader'((fentry |(> 9. 9)| subr0)
(entry |(> 9. 9)| subr0)
(push (@ 101))
(push '9.)
(push '9)
(mov '2 a4)
(jmp >)
101
(eval ())
(return)
))
(loader'((fentry |(> 10 9.)| subr0)
(entry |(> 10 9.)| subr0)
(push (@ 101))
(push '10)
(push '9.)
(mov '2 a4)
(jmp >)
101
(eval ())
(return)
))
(loader'((fentry |(> 10 10 11)| subr0)
(entry |(> 10 10 11)| subr0)
(push (@ 101))
(push '10)
(push '10)
(push '11)
(mov '3 a4)
(jmp >)
101
(eval ())
(return)
))
(loader'((fentry |(> 10 11 12)| subr0)
(entry |(> 10 11 12)| subr0)
(push (@ 101))
(push '10)
(push '11)
(push '12)
(mov '3 a4)
(jmp >)
101
(eval ())
(return)
))
(loader'((fentry |(> 10 9 8)| subr0)
(entry |(> 10 9 8)| subr0)
(push (@ 101))
(push '10)
(push '9)
(push '8)
(mov '3 a4)
(jmp >)
101
(eval ())
(return)
))
(loader'((fentry |(< 9. 10)| subr0)
(entry |(< 9. 10)| subr0)
(push (@ 101))
(push '9.)
(push '10)
(mov '2 a4)
(jmp <)
101
(eval ())
(return)
))
(loader'((fentry |(< 9. 9)| subr0)
(entry |(< 9. 9)| subr0)
(push (@ 101))
(push '9.)
(push '9)
(mov '2 a4)
(jmp <)
101
(eval ())
(return)
))
(loader'((fentry |(< 10 9.)| subr0)
(entry |(< 10 9.)| subr0)
(push (@ 101))
(push '10)
(push '9.)
(mov '2 a4)
(jmp <)
101
(eval ())
(return)
))
(loader'((fentry |(< 9 10 11)| subr0)
(entry |(< 9 10 11)| subr0)
(push (@ 101))
(push '9)
(push '10)
(push '11)
(mov '3 a4)
(jmp <)
101
(eval ())
(return)
))
(loader'((fentry |(< 9 10 10)| subr0)
(entry |(< 9 10 10)| subr0)
(push (@ 101))
(push '9)
(push '10)
(push '10)
(mov '3 a4)
(jmp <)
101
(eval ())
(return)
))
(loader'((fentry |(<= 9. 10)| subr0)
(entry |(<= 9. 10)| subr0)
(push (@ 101))
(push '9.)
(push '10)
(mov '2 a4)
(jmp <=)
101
(eval ())
(return)
))
(loader'((fentry |(<= 9. 9)| subr0)
(entry |(<= 9. 9)| subr0)
(push (@ 101))
(push '9.)
(push '9)
(mov '2 a4)
(jmp <=)
101
(eval ())
(return)
))
(loader'((fentry |(<= 10 9.)| subr0)
(entry |(<= 10 9.)| subr0)
(push (@ 101))
(push '10)
(push '9.)
(mov '2 a4)
(jmp <=)
101
(eval ())
(return)
))
(loader'((fentry |(<= 9 10 11)| subr0)
(entry |(<= 9 10 11)| subr0)
(push (@ 101))
(push '9)
(push '10)
(push '11)
(mov '3 a4)
(jmp <=)
101
(eval ())
(return)
))
(loader'((fentry |(<= 9 10 10)| subr0)
(entry |(<= 9 10 10)| subr0)
(push (@ 101))
(push '9)
(push '10)
(push '10)
(mov '3 a4)
(jmp <=)
101
(eval ())
(return)
))
(loader'((fentry |(<= 9 10 9)| subr0)
(entry |(<= 9 10 9)| subr0)
(push (@ 101))
(push '9)
(push '10)
(push '9)
(mov '3 a4)
(jmp <=)
101
(eval ())
(return)
))
(loader'((fentry |(<= 9 9 10)| subr0)
(entry |(<= 9 9 10)| subr0)
(push (@ 101))
(push '9)
(push '9)
(push '10)
(mov '3 a4)
(jmp <=)
101
(eval ())
(return)
))
(loader'((fentry |(plus)| subr0)
(entry |(plus)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 8)| subr0)
(entry |(plus 8)| subr0)
(push (@ 101))
(push '8)
(mov '1 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 8.)| subr0)
(entry |(plus 8.)| subr0)
(push (@ 101))
(push '8.)
(mov '1 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 5 6)| subr0)
(entry |(plus 5 6)| subr0)
(push (@ 101))
(push '5)
(push '6)
(mov '2 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 5 6 7)| subr0)
(entry |(plus 5 6 7)| subr0)
(push (@ 101))
(push '5)
(push '6)
(push '7)
(mov '3 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 5. 6 7)| subr0)
(entry |(plus 5. 6 7)| subr0)
(push (@ 101))
(push '5.)
(push '6)
(push '7)
(mov '3 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 5 6. 7)| subr0)
(entry |(plus 5 6. 7)| subr0)
(push (@ 101))
(push '5)
(push '6.)
(push '7)
(mov '3 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 5 6 7.)| subr0)
(entry |(plus 5 6 7.)| subr0)
(push (@ 101))
(push '5)
(push '6)
(push '7.)
(mov '3 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 32000 32000 1)| subr0)
(entry |(plus 32000 32000 1)| subr0)
(push (@ 101))
(push '32000)
(push '32000)
(push '1)
(mov '3 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 30000 30000)| subr0)
(entry |(plus 30000 30000)| subr0)
(push (@ 101))
(push '30000)
(push '30000)
(mov '2 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 50000. 10000)| subr0)
(entry |(plus 50000. 10000)| subr0)
(push (@ 101))
(push '50000.)
(push '10000)
(mov '2 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(plus 10000 50000.)| subr0)
(entry |(plus 10000 50000.)| subr0)
(push (@ 101))
(push '10000)
(push '50000.)
(mov '2 a4)
(jmp plus)
101
(eval ())
(return)
))
(loader'((fentry |(differ)| subr0)
(entry |(differ)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ 20)| subr0)
(entry |(differ 20)| subr0)
(push (@ 101))
(push '20)
(mov '1 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ 20.)| subr0)
(entry |(differ 20.)| subr0)
(push (@ 101))
(push '20.)
(mov '1 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ 20 5)| subr0)
(entry |(differ 20 5)| subr0)
(push (@ 101))
(push '20)
(push '5)
(mov '2 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ 20 5.)| subr0)
(entry |(differ 20 5.)| subr0)
(push (@ 101))
(push '20)
(push '5.)
(mov '2 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ 20. 5)| subr0)
(entry |(differ 20. 5)| subr0)
(push (@ 101))
(push '20.)
(push '5)
(mov '2 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ -20 -10)| subr0)
(entry |(differ -20 -10)| subr0)
(push (@ 101))
(push '-20)
(push '-10)
(mov '2 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ -20. -10)| subr0)
(entry |(differ -20. -10)| subr0)
(push (@ 101))
(push '-20.)
(push '-10)
(mov '2 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ -20 -10.)| subr0)
(entry |(differ -20 -10.)| subr0)
(push (@ 101))
(push '-20)
(push '-10.)
(mov '2 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ 20. 5 2)| subr0)
(entry |(differ 20. 5 2)| subr0)
(push (@ 101))
(push '20.)
(push '5)
(push '2)
(mov '3 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ 20 5. 2)| subr0)
(entry |(differ 20 5. 2)| subr0)
(push (@ 101))
(push '20)
(push '5.)
(push '2)
(mov '3 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ 20 5 2.)| subr0)
(entry |(differ 20 5 2.)| subr0)
(push (@ 101))
(push '20)
(push '5)
(push '2.)
(mov '3 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(differ #$8000 1 1)| subr0)
(entry |(differ #$8000 1 1)| subr0)
(push (@ 101))
(push '#$8000)
(push '1)
(push '1)
(mov '3 a4)
(jmp differ)
101
(eval ())
(return)
))
(loader'((fentry |(times)| subr0)
(entry |(times)| subr0)
(push (@ 101))
(mov '0 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 5)| subr0)
(entry |(times 5)| subr0)
(push (@ 101))
(push '5)
(mov '1 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 5.)| subr0)
(entry |(times 5.)| subr0)
(push (@ 101))
(push '5.)
(mov '1 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 10 20)| subr0)
(entry |(times 10 20)| subr0)
(push (@ 101))
(push '10)
(push '20)
(mov '2 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 10. 20)| subr0)
(entry |(times 10. 20)| subr0)
(push (@ 101))
(push '10.)
(push '20)
(mov '2 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 10 20.)| subr0)
(entry |(times 10 20.)| subr0)
(push (@ 101))
(push '10)
(push '20.)
(mov '2 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times -100 200)| subr0)
(entry |(times -100 200)| subr0)
(push (@ 101))
(push '-100)
(push '200)
(mov '2 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 2 3 4)| subr0)
(entry |(times 2 3 4)| subr0)
(push (@ 101))
(push '2)
(push '3)
(push '4)
(mov '3 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 2. 3 4)| subr0)
(entry |(times 2. 3 4)| subr0)
(push (@ 101))
(push '2.)
(push '3)
(push '4)
(mov '3 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 2 3. 4)| subr0)
(entry |(times 2 3. 4)| subr0)
(push (@ 101))
(push '2)
(push '3.)
(push '4)
(mov '3 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 2 3 4.)| subr0)
(entry |(times 2 3 4.)| subr0)
(push (@ 101))
(push '2)
(push '3)
(push '4.)
(mov '3 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 1000 1000)| subr0)
(entry |(times 1000 1000)| subr0)
(push (@ 101))
(push '1000)
(push '1000)
(mov '2 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 1000. 1000)| subr0)
(entry |(times 1000. 1000)| subr0)
(push (@ 101))
(push '1000.)
(push '1000)
(mov '2 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 1000 1000.)| subr0)
(entry |(times 1000 1000.)| subr0)
(push (@ 101))
(push '1000)
(push '1000.)
(mov '2 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(times 1 10 100 1000)| subr0)
(entry |(times 1 10 100 1000)| subr0)
(push (@ 101))
(push '1)
(push '10)
(push '100)
(push '1000)
(mov '4 a4)
(jmp times)
101
(eval ())
(return)
))
(loader'((fentry |(divide 12 4)| subr0)
(entry |(divide 12 4)| subr0)
(mov '4 a2)
(mov '12 a1)
(jmp divide)
))
(loader'((fentry |(divide 12 5)| subr0)
(entry |(divide 12 5)| subr0)
(mov '5 a2)
(mov '12 a1)
(jmp divide)
))
(loader'((fentry |(divide 12 5.)| subr0)
(entry |(divide 12 5.)| subr0)
(mov '5. a2)
(mov '12 a1)
(jmp divide)
))
(loader'((fentry |(divide 12. 5)| subr0)
(entry |(divide 12. 5)| subr0)
(mov '5 a2)
(mov '12. a1)
(jmp divide)
))
(loader'((fentry |(divide -8 2)| subr0)
(entry |(divide -8 2)| subr0)
(mov '2 a2)
(mov '-8 a1)
(jmp divide)
))
(loader'((fentry |(divide 20000 -20000)| subr0)
(entry |(divide 20000 -20000)| subr0)
(mov '-20000 a2)
(mov '20000 a1)
(jmp divide)
))
(loader'((fentry |(add1 1)| subr0)
(entry |(add1 1)| subr0)
(mov '1 a4)
(plus '1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(add1 -1)| subr0)
(entry |(add1 -1)| subr0)
(mov '-1 a4)
(plus '1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(add1 32767)| subr0)
(entry |(add1 32767)| subr0)
(mov '32767 a4)
(plus '1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(sub1 1)| subr0)
(entry |(sub1 1)| subr0)
(mov '1 a4)
(diff '1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(sub1 -1)| subr0)
(entry |(sub1 -1)| subr0)
(mov '-1 a4)
(diff '1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(sub1 #$8000)| subr0)
(entry |(sub1 #$8000)| subr0)
(mov '#$8000 a4)
(diff '1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(add 10 20)| subr0)
(entry |(add 10 20)| subr0)
(mov '10 a4)
(plus '20 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(add 28672 28672)| subr0)
(entry |(add 28672 28672)| subr0)
(mov '28672 a4)
(plus '28672 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(sub 20 11)| subr0)
(entry |(sub 20 11)| subr0)
(mov '20 a4)
(diff '11 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(mul 10 9)| subr0)
(entry |(mul 10 9)| subr0)
(mov '10 a4)
(times '9 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(div 11 2)| subr0)
(entry |(div 11 2)| subr0)
(mov '11 a4)
(quo '2 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(div 10 2)| subr0)
(entry |(div 10 2)| subr0)
(mov '10 a4)
(quo '2 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(rem 14 4)| subr0)
(entry |(rem 14 4)| subr0)
(mov '14 a4)
(rem '4 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(rem -8 2)| subr0)
(entry |(rem -8 2)| subr0)
(mov '-8 a4)
(rem '2 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(rem 30001 3)| subr0)
(entry |(rem 30001 3)| subr0)
(mov '30001 a4)
(rem '3 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(scale 1000 20000 1000)| subr0)
(entry |(scale 1000 20000 1000)| subr0)
(mov '1000 a3)
(mov '20000 a2)
(mov '1000 a1)
(jmp scale)
))
(loader'((fentry |(scale -100 2000 -1000)| subr0)
(entry |(scale -100 2000 -1000)| subr0)
(mov '-1000 a3)
(mov '2000 a2)
(mov '-100 a1)
(jmp scale)
))
(loader'((fentry |(scale 1000 1000 3000)| subr0)
(entry |(scale 1000 1000 3000)| subr0)
(mov '3000 a3)
(mov '1000 a2)
(mov '1000 a1)
(jmp scale)
))
(loader'((fentry |(min 10)| subr0)
(entry |(min 10)| subr0)
(push (@ 101))
(push '10)
(mov '1 a4)
(jmp min)
101
(eval ())
(return)
))
(loader'((fentry |(min 10 20)| subr0)
(entry |(min 10 20)| subr0)
(push (@ 101))
(push '10)
(push '20)
(mov '2 a4)
(jmp min)
101
(eval ())
(return)
))
(loader'((fentry |(min -10 -20)| subr0)
(entry |(min -10 -20)| subr0)
(push (@ 101))
(push '-10)
(push '-20)
(mov '2 a4)
(jmp min)
101
(eval ())
(return)
))
(loader'((fentry |(min 1 3. 2 -7)| subr0)
(entry |(min 1 3. 2 -7)| subr0)
(push (@ 101))
(push '1)
(push '3.)
(push '2)
(push '-7)
(mov '4 a4)
(jmp min)
101
(eval ())
(return)
))
(loader'((fentry |(min -2. 3 0 7)| subr0)
(entry |(min -2. 3 0 7)| subr0)
(push (@ 101))
(push '-2.)
(push '3)
(push '0)
(push '7)
(mov '4 a4)
(jmp min)
101
(eval ())
(return)
))
(loader'((fentry |(max 10)| subr0)
(entry |(max 10)| subr0)
(push (@ 101))
(push '10)
(mov '1 a4)
(jmp max)
101
(eval ())
(return)
))
(loader'((fentry |(max 10 20)| subr0)
(entry |(max 10 20)| subr0)
(push (@ 101))
(push '10)
(push '20)
(mov '2 a4)
(jmp max)
101
(eval ())
(return)
))
(loader'((fentry |(max -10 -20)| subr0)
(entry |(max -10 -20)| subr0)
(push (@ 101))
(push '-10)
(push '-20)
(mov '2 a4)
(jmp max)
101
(eval ())
(return)
))
(loader'((fentry |(max 1 3 2 -7)| subr0)
(entry |(max 1 3 2 -7)| subr0)
(push (@ 101))
(push '1)
(push '3)
(push '2)
(push '-7)
(mov '4 a4)
(jmp max)
101
(eval ())
(return)
))
(loader'((fentry |(max 1 3. 2 -7)| subr0)
(entry |(max 1 3. 2 -7)| subr0)
(push (@ 101))
(push '1)
(push '3.)
(push '2)
(push '-7)
(mov '4 a4)
(jmp max)
101
(eval ())
(return)
))
(loader'((fentry |(max -2 3. 0 7)| subr0)
(entry |(max -2 3. 0 7)| subr0)
(push (@ 101))
(push '-2)
(push '3.)
(push '0)
(push '7)
(mov '4 a4)
(jmp max)
101
(eval ())
(return)
))
(loader'((fentry |(oddp -1)| subr0)
(entry |(oddp -1)| subr0)
(mov '-1 a1)
(jmp oddp)
))
(loader'((fentry |(oddp 0)| subr0)
(entry |(oddp 0)| subr0)
(mov '0 a1)
(jmp oddp)
))
(loader'((fentry |(oddp 1)| subr0)
(entry |(oddp 1)| subr0)
(mov '1 a1)
(jmp oddp)
))
(loader'((fentry |(oddp 2)| subr0)
(entry |(oddp 2)| subr0)
(mov '2 a1)
(jmp oddp)
))
(loader'((fentry |(evenp -1)| subr0)
(entry |(evenp -1)| subr0)
(mov '-1 a1)
(jmp evenp)
))
(loader'((fentry |(evenp 0)| subr0)
(entry |(evenp 0)| subr0)
(mov '0 a1)
(jmp evenp)
))
(loader'((fentry |(evenp 1)| subr0)
(entry |(evenp 1)| subr0)
(mov '1 a1)
(jmp evenp)
))
(loader'((fentry |(evenp 2)| subr0)
(entry |(evenp 2)| subr0)
(mov '2 a1)
(jmp evenp)
))
(loader'((fentry |(eqn -10 -10)| subr0)
(entry |(eqn -10 -10)| subr0)
(mov '-10 a2)
(mov '-10 a1)
(jmp eqn)
))
(loader'((fentry |(eqn 10 10)| subr0)
(entry |(eqn 10 10)| subr0)
(mov '10 a2)
(mov '10 a1)
(jmp eqn)
))
(loader'((fentry |(eqn 10 9)| subr0)
(entry |(eqn 10 9)| subr0)
(mov '9 a2)
(mov '10 a1)
(jmp eqn)
))
(loader'((fentry |(eqn -10 -9)| subr0)
(entry |(eqn -10 -9)| subr0)
(mov '-9 a2)
(mov '-10 a1)
(jmp eqn)
))
(loader'((fentry |(eqn -20000 20000)| subr0)
(entry |(eqn -20000 20000)| subr0)
(mov '20000 a2)
(mov '-20000 a1)
(jmp eqn)
))
(loader'((fentry |(neqn -10 -10)| subr0)
(entry |(neqn -10 -10)| subr0)
(mov '-10 a2)
(mov '-10 a1)
(jmp neqn)
))
(loader'((fentry |(neqn 10 10)| subr0)
(entry |(neqn 10 10)| subr0)
(mov '10 a2)
(mov '10 a1)
(jmp neqn)
))
(loader'((fentry |(neqn 10 9)| subr0)
(entry |(neqn 10 9)| subr0)
(mov '9 a2)
(mov '10 a1)
(jmp neqn)
))
(loader'((fentry |(neqn -10 -9)| subr0)
(entry |(neqn -10 -9)| subr0)
(mov '-9 a2)
(mov '-10 a1)
(jmp neqn)
))
(loader'((fentry |(neqn -20000 20000)| subr0)
(entry |(neqn -20000 20000)| subr0)
(mov '20000 a2)
(mov '-20000 a1)
(jmp neqn)
))
(loader'((fentry |(gt 9 10)| subr0)
(entry |(gt 9 10)| subr0)
(mov '10 a2)
(mov '9 a1)
(jmp gt)
))
(loader'((fentry |(gt 9 9)| subr0)
(entry |(gt 9 9)| subr0)
(mov '9 a2)
(mov '9 a1)
(jmp gt)
))
(loader'((fentry |(gt 10 9)| subr0)
(entry |(gt 10 9)| subr0)
(mov '9 a2)
(mov '10 a1)
(jmp gt)
))
(loader'((fentry |(gt -9 -10)| subr0)
(entry |(gt -9 -10)| subr0)
(mov '-10 a2)
(mov '-9 a1)
(jmp gt)
))
(loader'((fentry |(gt -9 -9)| subr0)
(entry |(gt -9 -9)| subr0)
(mov '-9 a2)
(mov '-9 a1)
(jmp gt)
))
(loader'((fentry |(gt -10 -9)| subr0)
(entry |(gt -10 -9)| subr0)
(mov '-9 a2)
(mov '-10 a1)
(jmp gt)
))
(loader'((fentry |(gt -20000 20000)| subr0)
(entry |(gt -20000 20000)| subr0)
(mov '20000 a2)
(mov '-20000 a1)
(jmp gt)
))
(loader'((fentry |(gt 20000 -20000)| subr0)
(entry |(gt 20000 -20000)| subr0)
(mov '-20000 a2)
(mov '20000 a1)
(jmp gt)
))
(loader'((fentry |(ge 9 10)| subr0)
(entry |(ge 9 10)| subr0)
(mov '10 a2)
(mov '9 a1)
(jmp ge)
))
(loader'((fentry |(ge 9 9)| subr0)
(entry |(ge 9 9)| subr0)
(mov '9 a2)
(mov '9 a1)
(jmp ge)
))
(loader'((fentry |(ge 10 9)| subr0)
(entry |(ge 10 9)| subr0)
(mov '9 a2)
(mov '10 a1)
(jmp ge)
))
(loader'((fentry |(ge -9 -10)| subr0)
(entry |(ge -9 -10)| subr0)
(mov '-10 a2)
(mov '-9 a1)
(jmp ge)
))
(loader'((fentry |(ge -9 -9)| subr0)
(entry |(ge -9 -9)| subr0)
(mov '-9 a2)
(mov '-9 a1)
(jmp ge)
))
(loader'((fentry |(ge -10 -9)| subr0)
(entry |(ge -10 -9)| subr0)
(mov '-9 a2)
(mov '-10 a1)
(jmp ge)
))
(loader'((fentry |(ge -20000 20000)| subr0)
(entry |(ge -20000 20000)| subr0)
(mov '20000 a2)
(mov '-20000 a1)
(jmp ge)
))
(loader'((fentry |(ge 20000 -20000)| subr0)
(entry |(ge 20000 -20000)| subr0)
(mov '-20000 a2)
(mov '20000 a1)
(jmp ge)
))
(loader'((fentry |(lt 9 10)| subr0)
(entry |(lt 9 10)| subr0)
(mov '10 a2)
(mov '9 a1)
(jmp lt)
))
(loader'((fentry |(lt 9 9)| subr0)
(entry |(lt 9 9)| subr0)
(mov '9 a2)
(mov '9 a1)
(jmp lt)
))
(loader'((fentry |(lt 10 9)| subr0)
(entry |(lt 10 9)| subr0)
(mov '9 a2)
(mov '10 a1)
(jmp lt)
))
(loader'((fentry |(lt -9 -10)| subr0)
(entry |(lt -9 -10)| subr0)
(mov '-10 a2)
(mov '-9 a1)
(jmp lt)
))
(loader'((fentry |(lt -9 -9)| subr0)
(entry |(lt -9 -9)| subr0)
(mov '-9 a2)
(mov '-9 a1)
(jmp lt)
))
(loader'((fentry |(lt -10 -9)| subr0)
(entry |(lt -10 -9)| subr0)
(mov '-9 a2)
(mov '-10 a1)
(jmp lt)
))
(loader'((fentry |(lt -20000 20000)| subr0)
(entry |(lt -20000 20000)| subr0)
(mov '20000 a2)
(mov '-20000 a1)
(jmp lt)
))
(loader'((fentry |(lt 20000 -20000)| subr0)
(entry |(lt 20000 -20000)| subr0)
(mov '-20000 a2)
(mov '20000 a1)
(jmp lt)
))
(loader'((fentry |(le 9 10)| subr0)
(entry |(le 9 10)| subr0)
(mov '10 a2)
(mov '9 a1)
(jmp le)
))
(loader'((fentry |(le 9 9)| subr0)
(entry |(le 9 9)| subr0)
(mov '9 a2)
(mov '9 a1)
(jmp le)
))
(loader'((fentry |(le 10 9)| subr0)
(entry |(le 10 9)| subr0)
(mov '9 a2)
(mov '10 a1)
(jmp le)
))
(loader'((fentry |(le -9 -10)| subr0)
(entry |(le -9 -10)| subr0)
(mov '-10 a2)
(mov '-9 a1)
(jmp le)
))
(loader'((fentry |(le -9 -9)| subr0)
(entry |(le -9 -9)| subr0)
(mov '-9 a2)
(mov '-9 a1)
(jmp le)
))
(loader'((fentry |(le -10 -9)| subr0)
(entry |(le -10 -9)| subr0)
(mov '-9 a2)
(mov '-10 a1)
(jmp le)
))
(loader'((fentry |(le -20000 20000)| subr0)
(entry |(le -20000 20000)| subr0)
(mov '20000 a2)
(mov '-20000 a1)
(jmp le)
))
(loader'((fentry |(le 20000 -20000)| subr0)
(entry |(le 20000 -20000)| subr0)
(mov '-20000 a2)
(mov '20000 a1)
(jmp le)
))
(loader'((fentry |(imin 10 10)| subr0)
(entry |(imin 10 10)| subr0)
(mov '10 a2)
(mov '10 a1)
(jmp imin)
))
(loader'((fentry |(imin 10 11)| subr0)
(entry |(imin 10 11)| subr0)
(mov '11 a2)
(mov '10 a1)
(jmp imin)
))
(loader'((fentry |(imin 11 10)| subr0)
(entry |(imin 11 10)| subr0)
(mov '10 a2)
(mov '11 a1)
(jmp imin)
))
(loader'((fentry |(imin -10 -10)| subr0)
(entry |(imin -10 -10)| subr0)
(mov '-10 a2)
(mov '-10 a1)
(jmp imin)
))
(loader'((fentry |(imin -10 -11)| subr0)
(entry |(imin -10 -11)| subr0)
(mov '-11 a2)
(mov '-10 a1)
(jmp imin)
))
(loader'((fentry |(imin -11 -10)| subr0)
(entry |(imin -11 -10)| subr0)
(mov '-10 a2)
(mov '-11 a1)
(jmp imin)
))
(loader'((fentry |(imax 10 10)| subr0)
(entry |(imax 10 10)| subr0)
(mov '10 a2)
(mov '10 a1)
(jmp imax)
))
(loader'((fentry |(imax 10 11)| subr0)
(entry |(imax 10 11)| subr0)
(mov '11 a2)
(mov '10 a1)
(jmp imax)
))
(loader'((fentry |(imax 11 10)| subr0)
(entry |(imax 11 10)| subr0)
(mov '10 a2)
(mov '11 a1)
(jmp imax)
))
(loader'((fentry |(imax -10 -10)| subr0)
(entry |(imax -10 -10)| subr0)
(mov '-10 a2)
(mov '-10 a1)
(jmp imax)
))
(loader'((fentry |(imax -10 -11)| subr0)
(entry |(imax -10 -11)| subr0)
(mov '-11 a2)
(mov '-10 a1)
(jmp imax)
))
(loader'((fentry |(imax -11 -10)| subr0)
(entry |(imax -11 -10)| subr0)
(mov '-10 a2)
(mov '-11 a1)
(jmp imax)
))
(loader'((fentry |(if (eqn -10 -10) t ())| subr0)
(entry |(if (eqn -10 -10) t ())| subr0)
(cnbne '-10 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eqn 10 10) t ())| subr0)
(entry |(if (eqn 10 10) t ())| subr0)
(cnbne '10 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eqn 10 9) t ())| subr0)
(entry |(if (eqn 10 9) t ())| subr0)
(cnbne '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eqn -10 -9) t ())| subr0)
(entry |(if (eqn -10 -9) t ())| subr0)
(cnbne '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (eqn -20000 20000) t ())| subr0)
(entry |(if (eqn -20000 20000) t ())| subr0)
(cnbne '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neqn -10 -10) t ())| subr0)
(entry |(if (neqn -10 -10) t ())| subr0)
(cnbeq '-10 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neqn 10 10) t ())| subr0)
(entry |(if (neqn 10 10) t ())| subr0)
(cnbeq '10 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neqn 10 9) t ())| subr0)
(entry |(if (neqn 10 9) t ())| subr0)
(cnbeq '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neqn -10 -9) t ())| subr0)
(entry |(if (neqn -10 -9) t ())| subr0)
(cnbeq '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (neqn -20000 20000) t ())| subr0)
(entry |(if (neqn -20000 20000) t ())| subr0)
(cnbeq '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (gt 9 10) t ())| subr0)
(entry |(if (gt 9 10) t ())| subr0)
(cnble '9 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (gt 9 9) t ())| subr0)
(entry |(if (gt 9 9) t ())| subr0)
(cnble '9 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (gt 10 9) t ())| subr0)
(entry |(if (gt 10 9) t ())| subr0)
(cnble '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (gt -9 -10) t ())| subr0)
(entry |(if (gt -9 -10) t ())| subr0)
(cnble '-9 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (gt -9 -9) t ())| subr0)
(entry |(if (gt -9 -9) t ())| subr0)
(cnble '-9 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (gt -10 -9) t ())| subr0)
(entry |(if (gt -10 -9) t ())| subr0)
(cnble '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (gt -20000 20000) t ())| subr0)
(entry |(if (gt -20000 20000) t ())| subr0)
(cnble '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (gt 20000 -20000) t ())| subr0)
(entry |(if (gt 20000 -20000) t ())| subr0)
(cnble '20000 '-20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (ge 9 10) t ())| subr0)
(entry |(if (ge 9 10) t ())| subr0)
(cnblt '9 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (ge 9 9) t ())| subr0)
(entry |(if (ge 9 9) t ())| subr0)
(cnblt '9 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (ge 10 9) t ())| subr0)
(entry |(if (ge 10 9) t ())| subr0)
(cnblt '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (ge -9 -10) t ())| subr0)
(entry |(if (ge -9 -10) t ())| subr0)
(cnblt '-9 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (ge -9 -9) t ())| subr0)
(entry |(if (ge -9 -9) t ())| subr0)
(cnblt '-9 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (ge -10 -9) t ())| subr0)
(entry |(if (ge -10 -9) t ())| subr0)
(cnblt '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (ge -20000 20000) t ())| subr0)
(entry |(if (ge -20000 20000) t ())| subr0)
(cnblt '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (ge 20000 -20000) t ())| subr0)
(entry |(if (ge 20000 -20000) t ())| subr0)
(cnblt '20000 '-20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (lt 9 10) t ())| subr0)
(entry |(if (lt 9 10) t ())| subr0)
(cnbge '9 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (lt 9 9) t ())| subr0)
(entry |(if (lt 9 9) t ())| subr0)
(cnbge '9 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (lt 10 9) t ())| subr0)
(entry |(if (lt 10 9) t ())| subr0)
(cnbge '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (lt -9 -10) t ())| subr0)
(entry |(if (lt -9 -10) t ())| subr0)
(cnbge '-9 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (lt -9 -9) t ())| subr0)
(entry |(if (lt -9 -9) t ())| subr0)
(cnbge '-9 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (lt -10 -9) t ())| subr0)
(entry |(if (lt -10 -9) t ())| subr0)
(cnbge '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (lt -20000 20000) t ())| subr0)
(entry |(if (lt -20000 20000) t ())| subr0)
(cnbge '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (lt 20000 -20000) t ())| subr0)
(entry |(if (lt 20000 -20000) t ())| subr0)
(cnbge '20000 '-20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (le 9 10) t ())| subr0)
(entry |(ifn (le 9 10) t ())| subr0)
(cnble '9 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (le 9 9) t ())| subr0)
(entry |(ifn (le 9 9) t ())| subr0)
(cnble '9 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (le 10 9) t ())| subr0)
(entry |(ifn (le 10 9) t ())| subr0)
(cnble '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (le -9 -10) t ())| subr0)
(entry |(ifn (le -9 -10) t ())| subr0)
(cnble '-9 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (le -9 -9) t ())| subr0)
(entry |(ifn (le -9 -9) t ())| subr0)
(cnble '-9 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (le -10 -9) t ())| subr0)
(entry |(ifn (le -10 -9) t ())| subr0)
(cnble '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (le -20000 20000) t ())| subr0)
(entry |(ifn (le -20000 20000) t ())| subr0)
(cnble '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (le 20000 -20000) t ())| subr0)
(entry |(ifn (le 20000 -20000) t ())| subr0)
(cnble '20000 '-20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (eqn -10 -10) t ())| subr0)
(entry |(ifn (eqn -10 -10) t ())| subr0)
(cnbeq '-10 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (eqn 10 10) t ())| subr0)
(entry |(ifn (eqn 10 10) t ())| subr0)
(cnbeq '10 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (eqn 10 9) t ())| subr0)
(entry |(ifn (eqn 10 9) t ())| subr0)
(cnbeq '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (eqn -10 -9) t ())| subr0)
(entry |(ifn (eqn -10 -9) t ())| subr0)
(cnbeq '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (eqn -20000 20000) t ())| subr0)
(entry |(ifn (eqn -20000 20000) t ())| subr0)
(cnbeq '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (neqn -10 -10) t ())| subr0)
(entry |(ifn (neqn -10 -10) t ())| subr0)
(cnbne '-10 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (neqn 10 10) t ())| subr0)
(entry |(ifn (neqn 10 10) t ())| subr0)
(cnbne '10 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (neqn 10 9) t ())| subr0)
(entry |(ifn (neqn 10 9) t ())| subr0)
(cnbne '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (neqn -10 -9) t ())| subr0)
(entry |(ifn (neqn -10 -9) t ())| subr0)
(cnbne '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (neqn -20000 20000) t ())| subr0)
(entry |(ifn (neqn -20000 20000) t ())| subr0)
(cnbne '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (gt 9 10) t ())| subr0)
(entry |(ifn (gt 9 10) t ())| subr0)
(cnbgt '9 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (gt 9 9) t ())| subr0)
(entry |(ifn (gt 9 9) t ())| subr0)
(cnbgt '9 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (gt 10 9) t ())| subr0)
(entry |(ifn (gt 10 9) t ())| subr0)
(cnbgt '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (gt -9 -10) t ())| subr0)
(entry |(ifn (gt -9 -10) t ())| subr0)
(cnbgt '-9 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (gt -9 -9) t ())| subr0)
(entry |(ifn (gt -9 -9) t ())| subr0)
(cnbgt '-9 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (gt -10 -9) t ())| subr0)
(entry |(ifn (gt -10 -9) t ())| subr0)
(cnbgt '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (gt -20000 20000) t ())| subr0)
(entry |(ifn (gt -20000 20000) t ())| subr0)
(cnbgt '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (gt 20000 -20000) t ())| subr0)
(entry |(ifn (gt 20000 -20000) t ())| subr0)
(cnbgt '20000 '-20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (ge 9 10) t ())| subr0)
(entry |(ifn (ge 9 10) t ())| subr0)
(cnbge '9 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (ge 9 9) t ())| subr0)
(entry |(ifn (ge 9 9) t ())| subr0)
(cnbge '9 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (ge 10 9) t ())| subr0)
(entry |(ifn (ge 10 9) t ())| subr0)
(cnbge '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (ge -9 -10) t ())| subr0)
(entry |(ifn (ge -9 -10) t ())| subr0)
(cnbge '-9 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (ge -9 -9) t ())| subr0)
(entry |(ifn (ge -9 -9) t ())| subr0)
(cnbge '-9 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (ge -10 -9) t ())| subr0)
(entry |(ifn (ge -10 -9) t ())| subr0)
(cnbge '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (ge -20000 20000) t ())| subr0)
(entry |(ifn (ge -20000 20000) t ())| subr0)
(cnbge '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (ge 20000 -20000) t ())| subr0)
(entry |(ifn (ge 20000 -20000) t ())| subr0)
(cnbge '20000 '-20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (lt 9 10) t ())| subr0)
(entry |(ifn (lt 9 10) t ())| subr0)
(cnblt '9 '10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (lt 9 9) t ())| subr0)
(entry |(ifn (lt 9 9) t ())| subr0)
(cnblt '9 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (lt 10 9) t ())| subr0)
(entry |(ifn (lt 10 9) t ())| subr0)
(cnblt '10 '9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (lt -9 -10) t ())| subr0)
(entry |(ifn (lt -9 -10) t ())| subr0)
(cnblt '-9 '-10 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (lt -9 -9) t ())| subr0)
(entry |(ifn (lt -9 -9) t ())| subr0)
(cnblt '-9 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (lt -10 -9) t ())| subr0)
(entry |(ifn (lt -10 -9) t ())| subr0)
(cnblt '-10 '-9 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (lt -20000 20000) t ())| subr0)
(entry |(ifn (lt -20000 20000) t ())| subr0)
(cnblt '-20000 '20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (lt 20000 -20000) t ())| subr0)
(entry |(ifn (lt 20000 -20000) t ())| subr0)
(cnblt '20000 '-20000 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(testdiv/rem)| subr0)
(entry |(testdiv/rem)| subr0)
(push (@ 101))
(push '(testdiv/rem))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(testquo/mod1)| subr0)
(entry |(testquo/mod1)| subr0)
(push (@ 101))
(push '(testquo/mod1))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(testquo/mod2)| subr0)
(entry |(testquo/mod2)| subr0)
(push (@ 101))
(push '(testquo/mod2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(stringtestdiv)| subr0)
(entry |(stringtestdiv)| subr0)
(push (@ 101))
(push '(stringtestdiv))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(lognot 0)| subr0)
(entry |(lognot 0)| subr0)
(mov '0 a4)
(lxor '-1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(lognot -2)| subr0)
(entry |(lognot -2)| subr0)
(mov '-2 a4)
(lxor '-1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(lognot -21846)| subr0)
(entry |(lognot -21846)| subr0)
(mov '-21846 a4)
(lxor '-1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logand 54 37)| subr0)
(entry |(logand 54 37)| subr0)
(mov '54 a4)
(land '37 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logand 240 170)| subr0)
(entry |(logand 240 170)| subr0)
(mov '240 a4)
(land '170 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logor 21 23)| subr0)
(entry |(logor 21 23)| subr0)
(mov '21 a4)
(lor '23 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logxor 5 3)| subr0)
(entry |(logxor 5 3)| subr0)
(mov '5 a4)
(lxor '3 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logshift 1 0)| subr0)
(entry |(logshift 1 0)| subr0)
(mov '1 a4)
(lshift '0 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logshift -1 0)| subr0)
(entry |(logshift -1 0)| subr0)
(mov '-1 a4)
(lshift '0 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logshift 1 1)| subr0)
(entry |(logshift 1 1)| subr0)
(mov '1 a4)
(lshift '1 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logshift 1 3)| subr0)
(entry |(logshift 1 3)| subr0)
(mov '1 a4)
(lshift '3 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logshift 1 15)| subr0)
(entry |(logshift 1 15)| subr0)
(mov '1 a4)
(lshift '15 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(logshift 8 -3)| subr0)
(entry |(logshift 8 -3)| subr0)
(mov '8 a4)
(lshift '-3 a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(2** 0)| subr0)
(entry |(2** 0)| subr0)
(mov '0 a1)
(jmp 2**)
))
(loader'((fentry |(2** 4)| subr0)
(entry |(2** 4)| subr0)
(mov '4 a1)
(jmp 2**)
))
(loader'((fentry |(2** 15)| subr0)
(entry |(2** 15)| subr0)
(mov '15 a1)
(jmp 2**)
))
(loader'((fentry |(2** 16)| subr0)
(entry |(2** 16)| subr0)
(mov '16 a1)
(jmp 2**)
))
(loader'((fentry |(2** -1)| subr0)
(entry |(2** -1)| subr0)
(mov '-1 a1)
(jmp 2**)
))
(loader'((fentry |(load-byte 240 2 4)| subr0)
(entry |(load-byte 240 2 4)| subr0)
(mov '4 a3)
(mov '2 a2)
(mov '240 a1)
(jmp load-byte)
))
(loader'((fentry |(mask-field 240 2 4)| subr0)
(entry |(mask-field 240 2 4)| subr0)
(mov '4 a3)
(mov '2 a2)
(mov '240 a1)
(jmp mask-field)
))
(loader'((fentry |(deposit-byte 240 2 4 3)| subr0)
(entry |(deposit-byte 240 2 4 3)| subr0)
(push (@ 101))
(push '240)
(push '2)
(push '4)
(push '3)
(mov '4 a4)
(jmp deposit-byte)
101
(eval ())
(return)
))
(loader'((fentry |(deposit-field 240 2 4 12)| subr0)
(entry |(deposit-field 240 2 4 12)| subr0)
(push (@ 101))
(push '240)
(push '2)
(push '4)
(push '12)
(mov '4 a4)
(jmp deposit-field)
101
(eval ())
(return)
))
(loader'((fentry |(load-byte-test 240 2 2)| subr0)
(entry |(load-byte-test 240 2 2)| subr0)
(mov '2 a3)
(mov '2 a2)
(mov '240 a1)
(jmp load-byte-test)
))
(loader'((fentry |(load-byte-test 240 2 4)| subr0)
(entry |(load-byte-test 240 2 4)| subr0)
(mov '4 a3)
(mov '2 a2)
(mov '240 a1)
(jmp load-byte-test)
))
(loader'((fentry |(sin 0)| subr0)
(entry |(sin 0)| subr0)
(mov '0 a1)
(jmp sin)
))
(putprop '|(sin pi/4)| '(pi/4) '#:complice:fvar)
(loader'((fentry |(sin pi/4)| subr0)
(entry |(sin pi/4)| subr0)
(mov (cvalq pi/4) a1)
(jmp sin)
))
(putprop '|(sin pi/2)| '(pi/2) '#:complice:fvar)
(loader'((fentry |(sin pi/2)| subr0)
(entry |(sin pi/2)| subr0)
(mov (cvalq pi/2) a1)
(jmp sin)
))
(loader'((fentry |(asin (sin 1.2))| subr0)
(entry |(asin (sin 1.2))| subr0)
(mov '1.2 a1)
(jcall sin)
(jmp asin)
))
(loader'((fentry |(cos 0)| subr0)
(entry |(cos 0)| subr0)
(mov '0 a1)
(jmp cos)
))
(putprop '|(cos pi/4)| '(pi/4) '#:complice:fvar)
(loader'((fentry |(cos pi/4)| subr0)
(entry |(cos pi/4)| subr0)
(mov (cvalq pi/4) a1)
(jmp cos)
))
(putprop '|(cos pi/2)| '(pi/2) '#:complice:fvar)
(loader'((fentry |(cos pi/2)| subr0)
(entry |(cos pi/2)| subr0)
(mov (cvalq pi/2) a1)
(jmp cos)
))
(loader'((fentry |(acos (cos 1.2))| subr0)
(entry |(acos (cos 1.2))| subr0)
(mov '1.2 a1)
(jcall cos)
(jmp acos)
))
(putprop '|(sqrt (+ (power (sin x) 2) (power (cos x) 2)))| '(x) '#:complice:fvar)
(loader'((fentry |(sqrt (+ (power (sin x) 2) (power (cos x) 2)))| subr0)
(entry |(sqrt (+ (power (sin x) 2) (power (cos x) 2)))| subr0)
(push (@ 101))
(mov (cvalq x) a1)
(jcall sin)
(mov '2 a2)
(jcall power)
(push a1)
(mov (cvalq x) a1)
(jcall cos)
(mov '2 a2)
(jcall power)
(push a1)
(mov '2 a4)
(jmp |+|)
101
(eval ())
(jmp sqrt)
))
(loader'((fentry |(* 4 (atan 1))| subr0)
(entry |(* 4 (atan 1))| subr0)
(push (@ 101))
(push '4)
(mov '1 a1)
(jcall atan)
(push a1)
(mov '2 a4)
(jmp *)
101
(eval ())
(return)
))
(loader'((fentry |(power 10 0)| subr0)
(entry |(power 10 0)| subr0)
(mov '0 a2)
(mov '10 a1)
(jmp power)
))
(loader'((fentry |(power 10 1)| subr0)
(entry |(power 10 1)| subr0)
(mov '1 a2)
(mov '10 a1)
(jmp power)
))
(loader'((fentry |(power 10 10)| subr0)
(entry |(power 10 10)| subr0)
(mov '10 a2)
(mov '10 a1)
(jmp power)
))
(loader'((fentry |(power 10 -1)| subr0)
(entry |(power 10 -1)| subr0)
(mov '-1 a2)
(mov '10 a1)
(jmp power)
))
(loader'((fentry |(power 10 -2)| subr0)
(entry |(power 10 -2)| subr0)
(mov '-2 a2)
(mov '10 a1)
(jmp power)
))
(loader'((fentry |(power 2. 0.5)| subr0)
(entry |(power 2. 0.5)| subr0)
(mov '0.5 a2)
(mov '2. a1)
(jmp power)
))
(loader'((fentry |(exp 0)| subr0)
(entry |(exp 0)| subr0)
(mov '0 a1)
(jmp exp)
))
(loader'((fentry |(log 1)| subr0)
(entry |(log 1)| subr0)
(mov '1 a1)
(jmp log)
))
(loader'((fentry |(errudv eval eneper)| subr0)
(entry |(errudv eval eneper)| subr0)
(push (@ 101))
(push '(errudv eval eneper))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(log (exp 1))| subr0)
(entry |(log (exp 1))| subr0)
(mov '1 a1)
(jcall exp)
(jmp log)
))
(loader'((fentry |(log10 1)| subr0)
(entry |(log10 1)| subr0)
(mov '1 a1)
(jmp log10)
))
(loader'((fentry |(log10 10)| subr0)
(entry |(log10 10)| subr0)
(mov '10 a1)
(jmp log10)
))
(loader'((fentry |(log10 20)| subr0)
(entry |(log10 20)| subr0)
(mov '20 a1)
(jmp log10)
))
(loader'((fentry |(log10 100)| subr0)
(entry |(log10 100)| subr0)
(mov '100 a1)
(jmp log10)
))
(loader'((fentry |(sqrt 100)| subr0)
(entry |(sqrt 100)| subr0)
(mov '100 a1)
(jmp sqrt)
))
(loader'((fentry |(sqrt 1e+06)| subr0)
(entry |(sqrt 1e+06)| subr0)
(mov '1e+06 a1)
(jmp sqrt)
))
(loader'((fentry |(fadd 10. 20.)| subr0)
(entry |(fadd 10. 20.)| subr0)
(mov '10. a4)
(fplus '20. a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(fsub 20. 11.)| subr0)
(entry |(fsub 20. 11.)| subr0)
(mov '20. a4)
(fdiff '11. a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(fmul 10. 9.)| subr0)
(entry |(fmul 10. 9.)| subr0)
(mov '10. a4)
(ftimes '9. a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(fdiv 11. 2.)| subr0)
(entry |(fdiv 11. 2.)| subr0)
(mov '11. a4)
(fquo '2. a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(fdiv 10. 2.)| subr0)
(entry |(fdiv 10. 2.)| subr0)
(mov '10. a4)
(fquo '2. a4)
(mov a4 a1)
(return)
))
(loader'((fentry |(feqn -10. -10.)| subr0)
(entry |(feqn -10. -10.)| subr0)
(mov '-10. a2)
(mov '-10. a1)
(jmp feqn)
))
(loader'((fentry |(feqn 10. 10.)| subr0)
(entry |(feqn 10. 10.)| subr0)
(mov '10. a2)
(mov '10. a1)
(jmp feqn)
))
(loader'((fentry |(feqn 10. 9.)| subr0)
(entry |(feqn 10. 9.)| subr0)
(mov '9. a2)
(mov '10. a1)
(jmp feqn)
))
(loader'((fentry |(feqn -10. -9.)| subr0)
(entry |(feqn -10. -9.)| subr0)
(mov '-9. a2)
(mov '-10. a1)
(jmp feqn)
))
(loader'((fentry |(feqn -20000. 20000.)| subr0)
(entry |(feqn -20000. 20000.)| subr0)
(mov '20000. a2)
(mov '-20000. a1)
(jmp feqn)
))
(loader'((fentry |(fneqn -10. -10.)| subr0)
(entry |(fneqn -10. -10.)| subr0)
(mov '-10. a2)
(mov '-10. a1)
(jmp fneqn)
))
(loader'((fentry |(fneqn 10. 10.)| subr0)
(entry |(fneqn 10. 10.)| subr0)
(mov '10. a2)
(mov '10. a1)
(jmp fneqn)
))
(loader'((fentry |(fneqn 10. 9.)| subr0)
(entry |(fneqn 10. 9.)| subr0)
(mov '9. a2)
(mov '10. a1)
(jmp fneqn)
))
(loader'((fentry |(fneqn -10. -9.)| subr0)
(entry |(fneqn -10. -9.)| subr0)
(mov '-9. a2)
(mov '-10. a1)
(jmp fneqn)
))
(loader'((fentry |(fneqn -20000. 20000.)| subr0)
(entry |(fneqn -20000. 20000.)| subr0)
(mov '20000. a2)
(mov '-20000. a1)
(jmp fneqn)
))
(loader'((fentry |(fgt 9. 10.)| subr0)
(entry |(fgt 9. 10.)| subr0)
(mov '10. a2)
(mov '9. a1)
(jmp fgt)
))
(loader'((fentry |(fgt 9. 9.)| subr0)
(entry |(fgt 9. 9.)| subr0)
(mov '9. a2)
(mov '9. a1)
(jmp fgt)
))
(loader'((fentry |(fgt 10. 9.)| subr0)
(entry |(fgt 10. 9.)| subr0)
(mov '9. a2)
(mov '10. a1)
(jmp fgt)
))
(loader'((fentry |(fgt -9. -10.)| subr0)
(entry |(fgt -9. -10.)| subr0)
(mov '-10. a2)
(mov '-9. a1)
(jmp fgt)
))
(loader'((fentry |(fgt -9. -9.)| subr0)
(entry |(fgt -9. -9.)| subr0)
(mov '-9. a2)
(mov '-9. a1)
(jmp fgt)
))
(loader'((fentry |(fgt -10. -9.)| subr0)
(entry |(fgt -10. -9.)| subr0)
(mov '-9. a2)
(mov '-10. a1)
(jmp fgt)
))
(loader'((fentry |(fgt -20000. 20000.)| subr0)
(entry |(fgt -20000. 20000.)| subr0)
(mov '20000. a2)
(mov '-20000. a1)
(jmp fgt)
))
(loader'((fentry |(fgt 20000. -20000.)| subr0)
(entry |(fgt 20000. -20000.)| subr0)
(mov '-20000. a2)
(mov '20000. a1)
(jmp fgt)
))
(loader'((fentry |(fge 9. 10.)| subr0)
(entry |(fge 9. 10.)| subr0)
(mov '10. a2)
(mov '9. a1)
(jmp fge)
))
(loader'((fentry |(fge 9. 9.)| subr0)
(entry |(fge 9. 9.)| subr0)
(mov '9. a2)
(mov '9. a1)
(jmp fge)
))
(loader'((fentry |(fge 10. 9.)| subr0)
(entry |(fge 10. 9.)| subr0)
(mov '9. a2)
(mov '10. a1)
(jmp fge)
))
(loader'((fentry |(fge -9. -10.)| subr0)
(entry |(fge -9. -10.)| subr0)
(mov '-10. a2)
(mov '-9. a1)
(jmp fge)
))
(loader'((fentry |(fge -9. -9.)| subr0)
(entry |(fge -9. -9.)| subr0)
(mov '-9. a2)
(mov '-9. a1)
(jmp fge)
))
(loader'((fentry |(fge -10. -9.)| subr0)
(entry |(fge -10. -9.)| subr0)
(mov '-9. a2)
(mov '-10. a1)
(jmp fge)
))
(loader'((fentry |(fge -20000. 20000.)| subr0)
(entry |(fge -20000. 20000.)| subr0)
(mov '20000. a2)
(mov '-20000. a1)
(jmp fge)
))
(loader'((fentry |(fge 20000. -20000.)| subr0)
(entry |(fge 20000. -20000.)| subr0)
(mov '-20000. a2)
(mov '20000. a1)
(jmp fge)
))
(loader'((fentry |(flt 9. 10.)| subr0)
(entry |(flt 9. 10.)| subr0)
(mov '10. a2)
(mov '9. a1)
(jmp flt)
))
(loader'((fentry |(flt 9. 9.)| subr0)
(entry |(flt 9. 9.)| subr0)
(mov '9. a2)
(mov '9. a1)
(jmp flt)
))
(loader'((fentry |(flt 10. 9.)| subr0)
(entry |(flt 10. 9.)| subr0)
(mov '9. a2)
(mov '10. a1)
(jmp flt)
))
(loader'((fentry |(flt -9. -10.)| subr0)
(entry |(flt -9. -10.)| subr0)
(mov '-10. a2)
(mov '-9. a1)
(jmp flt)
))
(loader'((fentry |(flt -9. -9.)| subr0)
(entry |(flt -9. -9.)| subr0)
(mov '-9. a2)
(mov '-9. a1)
(jmp flt)
))
(loader'((fentry |(flt -10. -9.)| subr0)
(entry |(flt -10. -9.)| subr0)
(mov '-9. a2)
(mov '-10. a1)
(jmp flt)
))
(loader'((fentry |(flt -20000. 20000.)| subr0)
(entry |(flt -20000. 20000.)| subr0)
(mov '20000. a2)
(mov '-20000. a1)
(jmp flt)
))
(loader'((fentry |(flt 20000. -20000.)| subr0)
(entry |(flt 20000. -20000.)| subr0)
(mov '-20000. a2)
(mov '20000. a1)
(jmp flt)
))
(loader'((fentry |(fle 9. 10.)| subr0)
(entry |(fle 9. 10.)| subr0)
(mov '10. a2)
(mov '9. a1)
(jmp fle)
))
(loader'((fentry |(fle 9. 9.)| subr0)
(entry |(fle 9. 9.)| subr0)
(mov '9. a2)
(mov '9. a1)
(jmp fle)
))
(loader'((fentry |(fle 10. 9.)| subr0)
(entry |(fle 10. 9.)| subr0)
(mov '9. a2)
(mov '10. a1)
(jmp fle)
))
(loader'((fentry |(fle -9. -10.)| subr0)
(entry |(fle -9. -10.)| subr0)
(mov '-10. a2)
(mov '-9. a1)
(jmp fle)
))
(loader'((fentry |(fle -9. -9.)| subr0)
(entry |(fle -9. -9.)| subr0)
(mov '-9. a2)
(mov '-9. a1)
(jmp fle)
))
(loader'((fentry |(fle -10. -9.)| subr0)
(entry |(fle -10. -9.)| subr0)
(mov '-9. a2)
(mov '-10. a1)
(jmp fle)
))
(loader'((fentry |(fle -20000. 20000.)| subr0)
(entry |(fle -20000. 20000.)| subr0)
(mov '20000. a2)
(mov '-20000. a1)
(jmp fle)
))
(loader'((fentry |(fle 20000. -20000.)| subr0)
(entry |(fle 20000. -20000.)| subr0)
(mov '-20000. a2)
(mov '20000. a1)
(jmp fle)
))
(loader'((fentry |(fmin 10. 10.)| subr0)
(entry |(fmin 10. 10.)| subr0)
(mov '10. a2)
(mov '10. a1)
(jmp fmin)
))
(loader'((fentry |(fmin 10. 11.)| subr0)
(entry |(fmin 10. 11.)| subr0)
(mov '11. a2)
(mov '10. a1)
(jmp fmin)
))
(loader'((fentry |(fmin 11. 10.)| subr0)
(entry |(fmin 11. 10.)| subr0)
(mov '10. a2)
(mov '11. a1)
(jmp fmin)
))
(loader'((fentry |(fmin -10. -10.)| subr0)
(entry |(fmin -10. -10.)| subr0)
(mov '-10. a2)
(mov '-10. a1)
(jmp fmin)
))
(loader'((fentry |(fmin -10. -11.)| subr0)
(entry |(fmin -10. -11.)| subr0)
(mov '-11. a2)
(mov '-10. a1)
(jmp fmin)
))
(loader'((fentry |(fmin -11. -10.)| subr0)
(entry |(fmin -11. -10.)| subr0)
(mov '-10. a2)
(mov '-11. a1)
(jmp fmin)
))
(loader'((fentry |(fmax 10. 10.)| subr0)
(entry |(fmax 10. 10.)| subr0)
(mov '10. a2)
(mov '10. a1)
(jmp fmax)
))
(loader'((fentry |(fmax 10. 11.)| subr0)
(entry |(fmax 10. 11.)| subr0)
(mov '11. a2)
(mov '10. a1)
(jmp fmax)
))
(loader'((fentry |(fmax 11. 10.)| subr0)
(entry |(fmax 11. 10.)| subr0)
(mov '10. a2)
(mov '11. a1)
(jmp fmax)
))
(loader'((fentry |(fmax -10. -10.)| subr0)
(entry |(fmax -10. -10.)| subr0)
(mov '-10. a2)
(mov '-10. a1)
(jmp fmax)
))
(loader'((fentry |(fmax -10. -11.)| subr0)
(entry |(fmax -10. -11.)| subr0)
(mov '-11. a2)
(mov '-10. a1)
(jmp fmax)
))
(loader'((fentry |(fmax -11. -10.)| subr0)
(entry |(fmax -11. -10.)| subr0)
(mov '-10. a2)
(mov '-11. a1)
(jmp fmax)
))
(loader'((fentry |(if (feqn -10. -10.) t ())| subr0)
(entry |(if (feqn -10. -10.) t ())| subr0)
(cfbne '-10. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (feqn 10. 10.) t ())| subr0)
(entry |(if (feqn 10. 10.) t ())| subr0)
(cfbne '10. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (feqn 10. 9.) t ())| subr0)
(entry |(if (feqn 10. 9.) t ())| subr0)
(cfbne '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (feqn -10. -9.) t ())| subr0)
(entry |(if (feqn -10. -9.) t ())| subr0)
(cfbne '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (feqn -20000. 20000.) t ())| subr0)
(entry |(if (feqn -20000. 20000.) t ())| subr0)
(cfbne '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fneqn -10. -10.) t ())| subr0)
(entry |(if (fneqn -10. -10.) t ())| subr0)
(cfbeq '-10. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fneqn 10. 10.) t ())| subr0)
(entry |(if (fneqn 10. 10.) t ())| subr0)
(cfbeq '10. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fneqn 10. 9.) t ())| subr0)
(entry |(if (fneqn 10. 9.) t ())| subr0)
(cfbeq '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fneqn -10. -9.) t ())| subr0)
(entry |(if (fneqn -10. -9.) t ())| subr0)
(cfbeq '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fneqn -20000. 20000.) t ())| subr0)
(entry |(if (fneqn -20000. 20000.) t ())| subr0)
(cfbeq '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fgt 9. 10.) t ())| subr0)
(entry |(if (fgt 9. 10.) t ())| subr0)
(cfble '9. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fgt 9. 9.) t ())| subr0)
(entry |(if (fgt 9. 9.) t ())| subr0)
(cfble '9. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fgt 10. 9.) t ())| subr0)
(entry |(if (fgt 10. 9.) t ())| subr0)
(cfble '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fgt -9. -10.) t ())| subr0)
(entry |(if (fgt -9. -10.) t ())| subr0)
(cfble '-9. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fgt -9. -9.) t ())| subr0)
(entry |(if (fgt -9. -9.) t ())| subr0)
(cfble '-9. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fgt -10. -9.) t ())| subr0)
(entry |(if (fgt -10. -9.) t ())| subr0)
(cfble '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fgt -20000. 20000.) t ())| subr0)
(entry |(if (fgt -20000. 20000.) t ())| subr0)
(cfble '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fgt 20000. -20000.) t ())| subr0)
(entry |(if (fgt 20000. -20000.) t ())| subr0)
(cfble '20000. '-20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fge 9. 10.) t ())| subr0)
(entry |(if (fge 9. 10.) t ())| subr0)
(cfblt '9. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fge 9. 9.) t ())| subr0)
(entry |(if (fge 9. 9.) t ())| subr0)
(cfblt '9. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fge 10. 9.) t ())| subr0)
(entry |(if (fge 10. 9.) t ())| subr0)
(cfblt '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fge -9. -10.) t ())| subr0)
(entry |(if (fge -9. -10.) t ())| subr0)
(cfblt '-9. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fge -9. -9.) t ())| subr0)
(entry |(if (fge -9. -9.) t ())| subr0)
(cfblt '-9. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fge -10. -9.) t ())| subr0)
(entry |(if (fge -10. -9.) t ())| subr0)
(cfblt '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fge -20000. 20000.) t ())| subr0)
(entry |(if (fge -20000. 20000.) t ())| subr0)
(cfblt '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (fge 20000. -20000.) t ())| subr0)
(entry |(if (fge 20000. -20000.) t ())| subr0)
(cfblt '20000. '-20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (flt 9. 10.) t ())| subr0)
(entry |(if (flt 9. 10.) t ())| subr0)
(cfbge '9. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (flt 9. 9.) t ())| subr0)
(entry |(if (flt 9. 9.) t ())| subr0)
(cfbge '9. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (flt 10. 9.) t ())| subr0)
(entry |(if (flt 10. 9.) t ())| subr0)
(cfbge '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (flt -9. -10.) t ())| subr0)
(entry |(if (flt -9. -10.) t ())| subr0)
(cfbge '-9. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (flt -9. -9.) t ())| subr0)
(entry |(if (flt -9. -9.) t ())| subr0)
(cfbge '-9. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (flt -10. -9.) t ())| subr0)
(entry |(if (flt -10. -9.) t ())| subr0)
(cfbge '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (flt -20000. 20000.) t ())| subr0)
(entry |(if (flt -20000. 20000.) t ())| subr0)
(cfbge '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(if (flt 20000. -20000.) t ())| subr0)
(entry |(if (flt 20000. -20000.) t ())| subr0)
(cfbge '20000. '-20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fle 9. 10.) t ())| subr0)
(entry |(ifn (fle 9. 10.) t ())| subr0)
(cfble '9. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fle 9. 9.) t ())| subr0)
(entry |(ifn (fle 9. 9.) t ())| subr0)
(cfble '9. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fle 10. 9.) t ())| subr0)
(entry |(ifn (fle 10. 9.) t ())| subr0)
(cfble '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fle -9. -10.) t ())| subr0)
(entry |(ifn (fle -9. -10.) t ())| subr0)
(cfble '-9. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fle -9. -9.) t ())| subr0)
(entry |(ifn (fle -9. -9.) t ())| subr0)
(cfble '-9. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fle -10. -9.) t ())| subr0)
(entry |(ifn (fle -10. -9.) t ())| subr0)
(cfble '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fle -20000. 20000.) t ())| subr0)
(entry |(ifn (fle -20000. 20000.) t ())| subr0)
(cfble '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fle 20000. -20000.) t ())| subr0)
(entry |(ifn (fle 20000. -20000.) t ())| subr0)
(cfble '20000. '-20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (feqn -10. -10.) t ())| subr0)
(entry |(ifn (feqn -10. -10.) t ())| subr0)
(cfbeq '-10. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (feqn 10. 10.) t ())| subr0)
(entry |(ifn (feqn 10. 10.) t ())| subr0)
(cfbeq '10. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (feqn 10. 9.) t ())| subr0)
(entry |(ifn (feqn 10. 9.) t ())| subr0)
(cfbeq '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (feqn -10. -9.) t ())| subr0)
(entry |(ifn (feqn -10. -9.) t ())| subr0)
(cfbeq '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (feqn -20000. 20000.) t ())| subr0)
(entry |(ifn (feqn -20000. 20000.) t ())| subr0)
(cfbeq '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fneqn -10. -10.) t ())| subr0)
(entry |(ifn (fneqn -10. -10.) t ())| subr0)
(cfbne '-10. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fneqn 10. 10.) t ())| subr0)
(entry |(ifn (fneqn 10. 10.) t ())| subr0)
(cfbne '10. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fneqn 10. 9.) t ())| subr0)
(entry |(ifn (fneqn 10. 9.) t ())| subr0)
(cfbne '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fneqn -10. -9.) t ())| subr0)
(entry |(ifn (fneqn -10. -9.) t ())| subr0)
(cfbne '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fneqn -20000. 20000.) t ())| subr0)
(entry |(ifn (fneqn -20000. 20000.) t ())| subr0)
(cfbne '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fgt 9. 10.) t ())| subr0)
(entry |(ifn (fgt 9. 10.) t ())| subr0)
(cfbgt '9. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fgt 9. 9.) t ())| subr0)
(entry |(ifn (fgt 9. 9.) t ())| subr0)
(cfbgt '9. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fgt 10. 9.) t ())| subr0)
(entry |(ifn (fgt 10. 9.) t ())| subr0)
(cfbgt '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fgt -9. -10.) t ())| subr0)
(entry |(ifn (fgt -9. -10.) t ())| subr0)
(cfbgt '-9. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fgt -9. -9.) t ())| subr0)
(entry |(ifn (fgt -9. -9.) t ())| subr0)
(cfbgt '-9. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fgt -10. -9.) t ())| subr0)
(entry |(ifn (fgt -10. -9.) t ())| subr0)
(cfbgt '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fgt -20000. 20000.) t ())| subr0)
(entry |(ifn (fgt -20000. 20000.) t ())| subr0)
(cfbgt '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fgt 20000. -20000.) t ())| subr0)
(entry |(ifn (fgt 20000. -20000.) t ())| subr0)
(cfbgt '20000. '-20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fge 9. 10.) t ())| subr0)
(entry |(ifn (fge 9. 10.) t ())| subr0)
(cfbge '9. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fge 9. 9.) t ())| subr0)
(entry |(ifn (fge 9. 9.) t ())| subr0)
(cfbge '9. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fge 10. 9.) t ())| subr0)
(entry |(ifn (fge 10. 9.) t ())| subr0)
(cfbge '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fge -9. -10.) t ())| subr0)
(entry |(ifn (fge -9. -10.) t ())| subr0)
(cfbge '-9. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fge -9. -9.) t ())| subr0)
(entry |(ifn (fge -9. -9.) t ())| subr0)
(cfbge '-9. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fge -10. -9.) t ())| subr0)
(entry |(ifn (fge -10. -9.) t ())| subr0)
(cfbge '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fge -20000. 20000.) t ())| subr0)
(entry |(ifn (fge -20000. 20000.) t ())| subr0)
(cfbge '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (fge 20000. -20000.) t ())| subr0)
(entry |(ifn (fge 20000. -20000.) t ())| subr0)
(cfbge '20000. '-20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (flt 9. 10.) t ())| subr0)
(entry |(ifn (flt 9. 10.) t ())| subr0)
(cfblt '9. '10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (flt 9. 9.) t ())| subr0)
(entry |(ifn (flt 9. 9.) t ())| subr0)
(cfblt '9. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (flt 10. 9.) t ())| subr0)
(entry |(ifn (flt 10. 9.) t ())| subr0)
(cfblt '10. '9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (flt -9. -10.) t ())| subr0)
(entry |(ifn (flt -9. -10.) t ())| subr0)
(cfblt '-9. '-10. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (flt -9. -9.) t ())| subr0)
(entry |(ifn (flt -9. -9.) t ())| subr0)
(cfblt '-9. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (flt -10. -9.) t ())| subr0)
(entry |(ifn (flt -10. -9.) t ())| subr0)
(cfblt '-10. '-9. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (flt -20000. 20000.) t ())| subr0)
(entry |(ifn (flt -20000. 20000.) t ())| subr0)
(cfblt '-20000. '20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ifn (flt 20000. -20000.) t ())| subr0)
(entry |(ifn (flt 20000. -20000.) t ())| subr0)
(cfblt '20000. '-20000. 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry |(ex1+ 10)| subr0)
(entry |(ex1+ 10)| subr0)
(mov '10 a1)
(jmp ex1+)
))
(loader'((fentry |(ex1+ -1)| subr0)
(entry |(ex1+ -1)| subr0)
(mov '-1 a1)
(jmp ex1+)
))
(loader'((fentry |(ex+ 100 200)| subr0)
(entry |(ex+ 100 200)| subr0)
(mov '200 a2)
(mov '100 a1)
(jmp ex+)
))
(loader'((fentry |(ex+ -1 -1)| subr0)
(entry |(ex+ -1 -1)| subr0)
(mov '-1 a2)
(mov '-1 a1)
(jmp ex+)
))
(loader'((fentry |(ex- -2)| subr0)
(entry |(ex- -2)| subr0)
(mov '-2 a1)
(jmp ex-)
))
(loader'((fentry |(ex- -1)| subr0)
(entry |(ex- -1)| subr0)
(mov '-1 a1)
(jmp ex-)
))
(loader'((fentry |(ex- 0)| subr0)
(entry |(ex- 0)| subr0)
(mov '0 a1)
(jmp ex-)
))
(loader'((fentry |(ex- 1)| subr0)
(entry |(ex- 1)| subr0)
(mov '1 a1)
(jmp ex-)
))
(loader'((fentry |(ex- 2)| subr0)
(entry |(ex- 2)| subr0)
(mov '2 a1)
(jmp ex-)
))
(loader'((fentry |(ex* 100 100 0)| subr0)
(entry |(ex* 100 100 0)| subr0)
(mov '0 a3)
(mov '100 a2)
(mov '100 a1)
(jmp ex*)
))
(loader'((fentry |(ex* 100 100 10)| subr0)
(entry |(ex* 100 100 10)| subr0)
(mov '10 a3)
(mov '100 a2)
(mov '100 a1)
(jmp ex*)
))
(loader'((fentry |(ex* -1 -1 0)| subr0)
(entry |(ex* -1 -1 0)| subr0)
(mov '0 a3)
(mov '-1 a2)
(mov '-1 a1)
(jmp ex*)
))
(loader'((fentry |(ex/ 100 5)| subr0)
(entry |(ex/ 100 5)| subr0)
(mov '5 a2)
(mov '100 a1)
(jmp ex/)
))
(loader'((fentry |(ex/ 0 -1)| subr0)
(entry |(ex/ 0 -1)| subr0)
(mov '-1 a2)
(mov '0 a1)
(jmp ex/)
))
(loader'((fentry |(ex/ 3 -1)| subr0)
(entry |(ex/ 3 -1)| subr0)
(mov '-1 a2)
(mov '3 a1)
(jmp ex/)
))
(loader'((fentry |(ex? 0 0)| subr0)
(entry |(ex? 0 0)| subr0)
(mov '0 a2)
(mov '0 a1)
(jmp ex?)
))
(loader'((fentry |(ex? 2 3)| subr0)
(entry |(ex? 2 3)| subr0)
(mov '3 a2)
(mov '2 a1)
(jmp ex?)
))
(loader'((fentry |(ex? 3 2)| subr0)
(entry |(ex? 3 2)| subr0)
(mov '2 a2)
(mov '3 a1)
(jmp ex?)
))
(loader'((fentry |(ex? -1 -2)| subr0)
(entry |(ex? -1 -2)| subr0)
(mov '-2 a2)
(mov '-1 a1)
(jmp ex?)
))
(loader'((fentry |(ex? -1 1)| subr0)
(entry |(ex? -1 1)| subr0)
(mov '1 a2)
(mov '-1 a1)
(jmp ex?)
))
(loader'((fentry |(ex? -1 -1)| subr0)
(entry |(ex? -1 -1)| subr0)
(mov '-1 a2)
(mov '-1 a1)
(jmp ex?)
))
(loader'((fentry |(ex? -2 -1)| subr0)
(entry |(ex? -2 -1)| subr0)
(mov '-1 a2)
(mov '-2 a1)
(jmp ex?)
))
(loader'((fentry |(charsout 255 1)| subr0)
(entry |(charsout 255 1)| subr0)
(push (@ 101))
(push '(charsout 255 1))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(charsin 255 1)| subr0)
(entry |(charsin 255 1)| subr0)
(push (@ 101))
(push '(charsin 255 1))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(charsout 255 2)| subr0)
(entry |(charsout 255 2)| subr0)
(push (@ 101))
(push '(charsout 255 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(charsin 255 2)| subr0)
(entry |(charsin 255 2)| subr0)
(push (@ 101))
(push '(charsin 255 2))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(charsout 193 3)| subr0)
(entry |(charsout 193 3)| subr0)
(push (@ 101))
(push '(charsout 193 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(charsin 193 3)| subr0)
(entry |(charsin 193 3)| subr0)
(push (@ 101))
(push '(charsin 193 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(ll '(a b c d e f))| subr0)
(entry |(ll '(a b c d e f))| subr0)
(push (@ 101))
(push '(ll '(a b c d |e| f)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(lr '(a b c d e f))| subr0)
(entry |(lr '(a b c d e f))| subr0)
(push (@ 101))
(push '(lr '(a b c d |e| f)))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(expt1 2 3)| subr0)
(entry |(expt1 2 3)| subr0)
(push (@ 101))
(push '(expt1 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(expt2 2 3)| subr0)
(entry |(expt2 2 3)| subr0)
(push (@ 101))
(push '(expt2 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(expt3 2 3)| subr0)
(entry |(expt3 2 3)| subr0)
(push (@ 101))
(push '(expt3 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(expt4 2 3)| subr0)
(entry |(expt4 2 3)| subr0)
(push (@ 101))
(push '(expt4 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(expt5 2 3)| subr0)
(entry |(expt5 2 3)| subr0)
(push (@ 101))
(push '(expt5 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(expt6 2 3)| subr0)
(entry |(expt6 2 3)| subr0)
(push (@ 101))
(push '(expt6 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader'((fentry |(expt7 2 3)| subr0)
(entry |(expt7 2 3)| subr0)
(push (@ 101))
(push '(expt7 2 3))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(putprop '|(send 'bar x)| '(x) '#:complice:fvar)
(loader'((fentry |(send 'bar x)| subr0)
(entry |(send 'bar x)| subr0)
(push (@ 101))
(push 'bar)
(push (cvalq x))
(mov '2 a4)
(jmp send)
101
(eval ())
(return)
))
(loader'((fentry |(send2 'foo '#(a) '#(a))| subr0)
(entry |(send2 'foo '#(a) '#(a))| subr0)
(push (@ 101))
(push 'foo)
(push '#(a))
(push '#(a))
(mov '3 a4)
(jmp send2)
101
(eval ())
(return)
))
(loader'((fentry |(send2 'foo '#(a) '#(#:a:b))| subr0)
(entry |(send2 'foo '#(a) '#(#:a:b))| subr0)
(push (@ 101))
(push 'foo)
(push '#(a))
(push '#(#:a:b))
(mov '3 a4)
(jmp send2)
101
(eval ())
(return)
))
(loader'((fentry |(send2 'foo '#(#:a:b) '#(a))| subr0)
(entry |(send2 'foo '#(#:a:b) '#(a))| subr0)
(push (@ 101))
(push 'foo)
(push '#(#:a:b))
(push '#(a))
(mov '3 a4)
(jmp send2)
101
(eval ())
(return)
))
(loader'((fentry |(send2 'foo '#(#:a:b) '#(#:a:b))| subr0)
(entry |(send2 'foo '#(#:a:b) '#(#:a:b))| subr0)
(push (@ 101))
(push 'foo)
(push '#(#:a:b))
(push '#(#:a:b))
(mov '3 a4)
(jmp send2)
101
(eval ())
(return)
))
(loader'((fentry |(send2 'foo '#(#:a:c) '#(#:a:b))| subr0)
(entry |(send2 'foo '#(#:a:c) '#(#:a:b))| subr0)
(push (@ 101))
(push 'foo)
(push '#(#:a:c))
(push '#(#:a:b))
(mov '3 a4)
(jmp send2)
101
(eval ())
(return)
))
(loader'((fentry |(send2 'foo '#(#:a:b) '#(#:a:c))| subr0)
(entry |(send2 'foo '#(#:a:b) '#(#:a:c))| subr0)
(push (@ 101))
(push 'foo)
(push '#(#:a:b))
(push '#(#:a:c))
(mov '3 a4)
(jmp send2)
101
(eval ())
(return)
))
(loader'((fentry |(send2 'foo '#(#:a:c) '#(#:a:c))| subr0)
(entry |(send2 'foo '#(#:a:c) '#(#:a:c))| subr0)
(push (@ 101))
(push 'foo)
(push '#(#:a:c))
(push '#(#:a:c))
(mov '3 a4)
(jmp send2)
101
(eval ())
(return)
))
(loader'((fentry |(subadr '(-1 . -32763) -32763)| subr0)
(entry |(subadr '(-1 . -32763) -32763)| subr0)
(mov '-32763 a2)
(mov '(-1 . -32763) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(0 . 32767) 32767)| subr0)
(entry |(subadr '(0 . 32767) 32767)| subr0)
(mov '32767 a2)
(mov '(0 . 32767) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(0 . -32763) '(0 . 32767))| subr0)
(entry |(subadr '(0 . -32763) '(0 . 32767))| subr0)
(mov '(0 . 32767) a2)
(mov '(0 . -32763) a1)
(jmp subadr)
))
(loader'((fentry |(subadr -32763 32767)| subr0)
(entry |(subadr -32763 32767)| subr0)
(mov '32767 a2)
(mov '-32763 a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(-1 . -32763) '(-1 . 32767))| subr0)
(entry |(subadr '(-1 . -32763) '(-1 . 32767))| subr0)
(mov '(-1 . 32767) a2)
(mov '(-1 . -32763) a1)
(jmp subadr)
))
(loader'((fentry |(addadr '(3 . 657) '(4 . 4567))| subr0)
(entry |(addadr '(3 . 657) '(4 . 4567))| subr0)
(mov '(4 . 4567) a2)
(mov '(3 . 657) a1)
(jmp addadr)
))
(loader'((fentry |(addadr '(1 . #$8000) '(1 . #$8000))| subr0)
(entry |(addadr '(1 . #$8000) '(1 . #$8000))| subr0)
(mov '(1 . #$8000) a2)
(mov '(1 . #$8000) a1)
(jmp addadr)
))
(loader'((fentry |(addadr -1 -1)| subr0)
(entry |(addadr -1 -1)| subr0)
(mov '-1 a2)
(mov '-1 a1)
(jmp addadr)
))
(loader'((fentry |(addadr -1 1)| subr0)
(entry |(addadr -1 1)| subr0)
(mov '1 a2)
(mov '-1 a1)
(jmp addadr)
))
(loader'((fentry |(addadr 0 -1)| subr0)
(entry |(addadr 0 -1)| subr0)
(mov '-1 a2)
(mov '0 a1)
(jmp addadr)
))
(loader'((fentry |(addadr -2 2)| subr0)
(entry |(addadr -2 2)| subr0)
(mov '2 a2)
(mov '-2 a1)
(jmp addadr)
))
(loader'((fentry |(addadr 2 -2)| subr0)
(entry |(addadr 2 -2)| subr0)
(mov '-2 a2)
(mov '2 a1)
(jmp addadr)
))
(loader'((fentry |(addadr -1000 0)| subr0)
(entry |(addadr -1000 0)| subr0)
(mov '0 a2)
(mov '-1000 a1)
(jmp addadr)
))
(loader'((fentry |(addadr 1 2)| subr0)
(entry |(addadr 1 2)| subr0)
(mov '2 a2)
(mov '1 a1)
(jmp addadr)
))
(loader'((fentry |(addadr 32767 1)| subr0)
(entry |(addadr 32767 1)| subr0)
(mov '1 a2)
(mov '32767 a1)
(jmp addadr)
))
(loader'((fentry |(addadr 32766 1)| subr0)
(entry |(addadr 32766 1)| subr0)
(mov '1 a2)
(mov '32766 a1)
(jmp addadr)
))
(loader'((fentry |(addadr 0 '(3 . 657))| subr0)
(entry |(addadr 0 '(3 . 657))| subr0)
(mov '(3 . 657) a2)
(mov '0 a1)
(jmp addadr)
))
(loader'((fentry |(addadr 1 '(1 . 234))| subr0)
(entry |(addadr 1 '(1 . 234))| subr0)
(mov '(1 . 234) a2)
(mov '1 a1)
(jmp addadr)
))
(loader'((fentry |(addadr 1 '(1 . -1))| subr0)
(entry |(addadr 1 '(1 . -1))| subr0)
(mov '(1 . -1) a2)
(mov '1 a1)
(jmp addadr)
))
(loader'((fentry |(addadr '(3 . 657) 0)| subr0)
(entry |(addadr '(3 . 657) 0)| subr0)
(mov '0 a2)
(mov '(3 . 657) a1)
(jmp addadr)
))
(loader'((fentry |(addadr '(1 . 234) 1)| subr0)
(entry |(addadr '(1 . 234) 1)| subr0)
(mov '1 a2)
(mov '(1 . 234) a1)
(jmp addadr)
))
(loader'((fentry |(addadr '(1 . -1) 1)| subr0)
(entry |(addadr '(1 . -1) 1)| subr0)
(mov '1 a2)
(mov '(1 . -1) a1)
(jmp addadr)
))
(loader'((fentry |(addadr '(-1 . 1) 1)| subr0)
(entry |(addadr '(-1 . 1) 1)| subr0)
(mov '1 a2)
(mov '(-1 . 1) a1)
(jmp addadr)
))
(loader'((fentry |(addadr '(-1 . -32767) 1)| subr0)
(entry |(addadr '(-1 . -32767) 1)| subr0)
(mov '1 a2)
(mov '(-1 . -32767) a1)
(jmp addadr)
))
(loader'((fentry |(addadr '(0 . -32767) 1)| subr0)
(entry |(addadr '(0 . -32767) 1)| subr0)
(mov '1 a2)
(mov '(0 . -32767) a1)
(jmp addadr)
))
(loader'((fentry |(addadr '(0 . #$8000) 1)| subr0)
(entry |(addadr '(0 . #$8000) 1)| subr0)
(mov '1 a2)
(mov '(0 . #$8000) a1)
(jmp addadr)
))
(loader'((fentry |(subadr '(56 . 7899) '(45 . 3333))| subr0)
(entry |(subadr '(56 . 7899) '(45 . 3333))| subr0)
(mov '(45 . 3333) a2)
(mov '(56 . 7899) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(1 . #$8000) '(1 . #$8000))| subr0)
(entry |(subadr '(1 . #$8000) '(1 . #$8000))| subr0)
(mov '(1 . #$8000) a2)
(mov '(1 . #$8000) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(1 . -32752) '(1 . #$8000))| subr0)
(entry |(subadr '(1 . -32752) '(1 . #$8000))| subr0)
(mov '(1 . #$8000) a2)
(mov '(1 . -32752) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(1 . #$8000) '(1 . -32767))| subr0)
(entry |(subadr '(1 . #$8000) '(1 . -32767))| subr0)
(mov '(1 . -32767) a2)
(mov '(1 . #$8000) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(5 . -32648) '(5 . 32767))| subr0)
(entry |(subadr '(5 . -32648) '(5 . 32767))| subr0)
(mov '(5 . 32767) a2)
(mov '(5 . -32648) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(5 . -32648) '(5 . #$8000))| subr0)
(entry |(subadr '(5 . -32648) '(5 . #$8000))| subr0)
(mov '(5 . #$8000) a2)
(mov '(5 . -32648) a1)
(jmp subadr)
))
(loader'((fentry |(subadr -1 -1)| subr0)
(entry |(subadr -1 -1)| subr0)
(mov '-1 a2)
(mov '-1 a1)
(jmp subadr)
))
(loader'((fentry |(subadr -1 1)| subr0)
(entry |(subadr -1 1)| subr0)
(mov '1 a2)
(mov '-1 a1)
(jmp subadr)
))
(loader'((fentry |(subadr 0 -1)| subr0)
(entry |(subadr 0 -1)| subr0)
(mov '-1 a2)
(mov '0 a1)
(jmp subadr)
))
(loader'((fentry |(subadr 1 2)| subr0)
(entry |(subadr 1 2)| subr0)
(mov '2 a2)
(mov '1 a1)
(jmp subadr)
))
(loader'((fentry |(subadr 2 2)| subr0)
(entry |(subadr 2 2)| subr0)
(mov '2 a2)
(mov '2 a1)
(jmp subadr)
))
(loader'((fentry |(subadr -2 -2)| subr0)
(entry |(subadr -2 -2)| subr0)
(mov '-2 a2)
(mov '-2 a1)
(jmp subadr)
))
(loader'((fentry |(subadr -1000 0)| subr0)
(entry |(subadr -1000 0)| subr0)
(mov '0 a2)
(mov '-1000 a1)
(jmp subadr)
))
(loader'((fentry |(subadr 0 -1000)| subr0)
(entry |(subadr 0 -1000)| subr0)
(mov '-1000 a2)
(mov '0 a1)
(jmp subadr)
))
(loader'((fentry |(subadr 0 '(3 . 3))| subr0)
(entry |(subadr 0 '(3 . 3))| subr0)
(mov '(3 . 3) a2)
(mov '0 a1)
(jmp subadr)
))
(loader'((fentry |(subadr 1 '(1 . 0))| subr0)
(entry |(subadr 1 '(1 . 0))| subr0)
(mov '(1 . 0) a2)
(mov '1 a1)
(jmp subadr)
))
(loader'((fentry |(subadr 1 '(1 . -1))| subr0)
(entry |(subadr 1 '(1 . -1))| subr0)
(mov '(1 . -1) a2)
(mov '1 a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(3 . 657) 0)| subr0)
(entry |(subadr '(3 . 657) 0)| subr0)
(mov '0 a2)
(mov '(3 . 657) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(1 . 234) 1)| subr0)
(entry |(subadr '(1 . 234) 1)| subr0)
(mov '1 a2)
(mov '(1 . 234) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(1 . -1) 1)| subr0)
(entry |(subadr '(1 . -1) 1)| subr0)
(mov '1 a2)
(mov '(1 . -1) a1)
(jmp subadr)
))
(loader'((fentry |(subadr '(1 . 0) 1)| subr0)
(entry |(subadr '(1 . 0) 1)| subr0)
(mov '1 a2)
(mov '(1 . 0) a1)
(jmp subadr)
))
(putprop '|(incradr adr 1)| '(adr) '#:complice:fvar)
(loader'((fentry |(incradr adr 1)| subr0)
(entry |(incradr adr 1)| subr0)
(mov '1 a2)
(mov (cvalq adr) a1)
(jmp incradr)
))
(putprop '|(incradr adr 100)| '(adr) '#:complice:fvar)
(loader'((fentry |(incradr adr 100)| subr0)
(entry |(incradr adr 100)| subr0)
(mov '100 a2)
(mov (cvalq adr) a1)
(jmp incradr)
))
(putprop '|(incradr adr '(-1 . -102))| '(adr) '#:complice:fvar)
(loader'((fentry |(incradr adr '(-1 . -102))| subr0)
(entry |(incradr adr '(-1 . -102))| subr0)
(mov '(-1 . -102) a2)
(mov (cvalq adr) a1)
(jmp incradr)
))
(putprop '|(incradr 0 adr)| '(adr) '#:complice:fvar)
(loader'((fentry |(incradr 0 adr)| subr0)
(entry |(incradr 0 adr)| subr0)
(mov (cvalq adr) a2)
(mov '0 a1)
(jmp incradr)
))
(putprop '|(incradr 1 adr)| '(adr) '#:complice:fvar)
(loader'((fentry |(incradr 1 adr)| subr0)
(entry |(incradr 1 adr)| subr0)
(mov (cvalq adr) a2)
(mov '1 a1)
(jmp incradr)
))
(loader'((fentry |(incradr '(1 . 0) -1)| subr0)
(entry |(incradr '(1 . 0) -1)| subr0)
(mov '-1 a2)
(mov '(1 . 0) a1)
(jmp incradr)
))
(loader'((fentry |(incradr -1 -1)| subr0)
(entry |(incradr -1 -1)| subr0)
(mov '-1 a2)
(mov '-1 a1)
(jmp incradr)
))
(loader'((fentry |(incradr '(0 . #$8000) -1)| subr0)
(entry |(incradr '(0 . #$8000) -1)| subr0)
(mov '-1 a2)
(mov '(0 . #$8000) a1)
(jmp incradr)
))
(loader'((fentry |(incradr '(0 . #$8000) 1)| subr0)
(entry |(incradr '(0 . #$8000) 1)| subr0)
(mov '1 a2)
(mov '(0 . #$8000) a1)
(jmp incradr)
))
(loader'((fentry |(incradr '(0 . 32767) 1)| subr0)
(entry |(incradr '(0 . 32767) 1)| subr0)
(mov '1 a2)
(mov '(0 . 32767) a1)
(jmp incradr)
))
(putprop '|(gtadr adr '(4 . -10))| '(adr) '#:complice:fvar)
(loader'((fentry |(gtadr adr '(4 . -10))| subr0)
(entry |(gtadr adr '(4 . -10))| subr0)
(mov '(4 . -10) a2)
(mov (cvalq adr) a1)
(jmp gtadr)
))
(putprop '|(gtadr adr '(4 . 100))| '(adr) '#:complice:fvar)
(loader'((fentry |(gtadr adr '(4 . 100))| subr0)
(entry |(gtadr adr '(4 . 100))| subr0)
(mov '(4 . 100) a2)
(mov (cvalq adr) a1)
(jmp gtadr)
))
(putprop '|(gtadr adr '(4 . 101))| '(adr) '#:complice:fvar)
(loader'((fentry |(gtadr adr '(4 . 101))| subr0)
(entry |(gtadr adr '(4 . 101))| subr0)
(mov '(4 . 101) a2)
(mov (cvalq adr) a1)
(jmp gtadr)
))
(loader'((fentry |(addadr 100 t)| subr0)
(entry |(addadr 100 t)| subr0)
(mov 't a2)
(mov '100 a1)
(jmp addadr)
))
(loader'((fentry |(subadr t 100)| subr0)
(entry |(subadr t 100)| subr0)
(mov '100 a2)
(mov 't a1)
(jmp subadr)
))
(loader'((fentry |(addadr 100 '(1))| subr0)
(entry |(addadr 100 '(1))| subr0)
(mov '(1) a2)
(mov '100 a1)
(jmp addadr)
))
(loader'((fentry |(subadr 100 '(t . 1))| subr0)
(entry |(subadr 100 '(t . 1))| subr0)
(mov '(t . 1) a2)
(mov '100 a1)
(jmp subadr)
))
(loader'((fentry |(incradr '(t . 0) 0)| subr0)
(entry |(incradr '(t . 0) 0)| subr0)
(mov '0 a2)
(mov '(t . 0) a1)
(jmp incradr)
))
(loader'((fentry |(incradr '(0 . t) 0)| subr0)
(entry |(incradr '(0 . t) 0)| subr0)
(mov '0 a2)
(mov '(0 . t) a1)
(jmp incradr)
))
(loader'((fentry |(vag (loc 's))| subr0)
(entry |(vag (loc 's))| subr0)
(mov 's a1)
(jcall loc)
(jmp vag)
))
(loader'((fentry |(explode '#(() foo))| subr0)
(entry |(explode '#(() foo))| subr0)
(mov '#(() foo) a1)
(jmp explode)
))
(loader'((fentry |(explode '#((()) foo))| subr0)
(entry |(explode '#((()) foo))| subr0)
(mov '#((()) foo) a1)
(jmp explode)
))
(putprop '|(explode foo)| '(foo) '#:complice:fvar)
(loader'((fentry |(explode foo)| subr0)
(entry |(explode foo)| subr0)
(mov (cvalq foo) a1)
(jmp explode)
))
(putprop '|(explode bar)| '(bar) '#:complice:fvar)
(loader'((fentry |(explode bar)| subr0)
(entry |(explode bar)| subr0)
(mov (cvalq bar) a1)
(jmp explode)
))
(putprop '|(packagecell bar (cons foo foo))| '(foo bar) '#:complice:fvar)
(loader'((fentry |(packagecell bar (cons foo foo))| subr0)
(entry |(packagecell bar (cons foo foo))| subr0)
(push (cvalq bar))
(mov (cvalq foo) a2)
(mov (cvalq foo) a1)
(jcall cons)
(pop a4)
(mov a1 (pkgc a4))
(return)
))
(loader'((fentry |(frise 25 3.5 5.5)| subr0)
(entry |(frise 25 3.5 5.5)| subr0)
(push (@ 101))
(push '(frise 25 3.5 5.5))
(mov '1 a4)
(jmp eval)
101
(eval ())
(return)
))
(loader '((end)))
