(loader '((title |modtoc.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'modtoc)))
(defvar #:sys-package:colon 'modtoc)
(if (not (featurep 'date)) (progn (libload date) (libload libdate)))
(current-language 'english)
(defvar #:modtoc:c-verbose-mode ())
(defvar #:modtoc:peephole-optimize-p t)
(defvar #:modtoc:optimize-local-labels-p t)
(defvar #:modtoc:llm3-module-p ())
(defvar #:modtoc:stats-on-c-size-p t)
(defvar #:modtoc:open-cons-p ())
(defvar #:modtoc:prefix-module-function "GL")
(defvar #:modtoc:prefix-trace-function "GD")
(defvar #:modtoc:prefix-module-table "GZ")
(defvar #:modtoc:prefix-module-name "GN")
(defvar #:modtoc:prefix-module-date "GT")
(defvar #:modtoc:prefix-module-entry "GW")
(defvar #:modtoc:prefix-litteral-base "GY")
(defvar #:modtoc:prefix-local-label "l_")
(defvar #:modtoc:prefix-impure-llm3 "GI")
(defvar #:modtoc:prefix-dot-llm3 "GM")
(defvar #:modtoc:prefix-ftype-llm3 "GF")
(defvar #:modtoc:prefix-external-llm3 "GX")
(defvar #:modtoc:suffix-le ".le")
(defvar #:modtoc:suffix-h ".h")
(defvar #:modtoc:suffix-c ".c")
(defvar #:modtoc:c-module-name ())
(defvar #:modtoc:date ())
(defvar #:modtoc:c-module-table-name ())
(defvar #:modtoc:include-channel ())
(defvar #:modtoc:ccode-channel ())
(defvar #:modtoc:elaborate-channel ())
(defvar #:modtoc:list-litterals ())
(defvar #:modtoc:list-fentry ())
(defvar #:modtoc:list-brx ())
(defvar #:modtoc:list-of-fvalqued-symbols ())
(defvar #:modtoc:llm3-ll-name ())
(defvar #:modtoc:c-lit-table-name ())
(defvar #:modtoc:extern-llm3-predefined (list (cons 'popj0 (catenate #:modtoc:prefix-external-llm3 "popj0")) (cons 'popj1 (catenate #:modtoc:prefix-external-llm3 "popj1")) (cons 'popj2 (catenate #:modtoc:prefix-external-llm3 "popj2")) (cons 'popj3 (catenate #:modtoc:prefix-external-llm3 "popj3")) (cons 'popj4 (catenate #:modtoc:prefix-external-llm3 "popj4")) (cons 'popj5 (catenate #:modtoc:prefix-external-llm3 "popj5")) (cons 'popj6 (catenate #:modtoc:prefix-external-llm3 "popj6")) (cons 'popj7 (catenate #:modtoc:prefix-external-llm3 "popj7")) (cons 'popj8 (catenate #:modtoc:prefix-external-llm3 "popj8")) (cons 'popj9 (catenate #:modtoc:prefix-external-llm3 "popj9")) (cons 'popja4 (catenate #:modtoc:prefix-external-llm3 "popja4")) (cons 'cbindn (catenate #:modtoc:prefix-external-llm3 "unbind1")) (cons 'tag (catenate #:modtoc:prefix-external-llm3 "unbind3")) (cons 'lock (catenate #:modtoc:prefix-external-llm3 "unbind5")) (cons 'prot (catenate #:modtoc:prefix-external-llm3 "unbind7"))))
(defvar #:modtoc:llm3-functions ())
(defvar #:modtoc:module-functions ())
(defvar #:modtoc:trace-functions ())
(defvar #:modtoc:local-labels-module '())
(defvar #:modtoc:gen-new-label-counter 0)
(defvar #:modtoc:internal-variables-list ())
(loader'((fentry module-to-c subr1)
(entry module-to-c subr1)
(push a1)
(push (@ 101))
(push '"GELL 15.26: module-to-C: translating module: ")
(push a1)
(mov '2 a4)
(bra #:modtoc:print-msg)
101
(eval ())
(mov (& 0) a1)
(jcall probepathm)
(btnil a1 102)
(mov (& 0) a1)
(jcall readdefmodule)
(push nil)
(mov (& 1) a1)
(call #:modtoc:gen-module-name)
(mov a1 (cvalq #:modtoc:c-module-name))
(jcall date)
(mov a1 (cvalq #:modtoc:date))
(push (@ 104))
(push (& 2))
(push (cvalq #:modtoc:suffix-h))
(mov '2 a4)
(jmp catenate)
104
(eval ())
(jcall openo)
(mov a1 (cvalq #:modtoc:include-channel))
(push (@ 105))
(push (& 2))
(push (cvalq #:modtoc:suffix-c))
(mov '2 a4)
(jmp catenate)
105
(eval ())
(jcall openo)
(mov a1 (cvalq #:modtoc:ccode-channel))
(push (@ 106))
(push (& 2))
(push (cvalq #:modtoc:suffix-le))
(mov '2 a4)
(jmp catenate)
106
(eval ())
(jcall openo)
(mov a1 (cvalq #:modtoc:elaborate-channel))
(push (@ 107))
(push (cvalq #:modtoc:prefix-module-table))
(push (cvalq #:modtoc:c-module-name))
(mov '2 a4)
(jmp catenate)
107
(eval ())
(mov a1 (cvalq #:modtoc:c-module-table-name))
(push (@ 108))
(push (cvalq #:modtoc:prefix-litteral-base))
(push (cvalq #:modtoc:c-module-name))
(mov '2 a4)
(jmp catenate)
108
(eval ())
(mov a1 (cvalq #:modtoc:c-lit-table-name))
(mov nil (cvalq #:modtoc:list-litterals))
(mov nil (cvalq #:modtoc:list-fentry))
(mov nil (cvalq #:modtoc:list-brx))
(mov nil (cvalq #:modtoc:llm3-ll-name))
(mov (cvalq #:modtoc:extern-llm3-predefined) (cvalq #:modtoc:llm3-functions))
(mov nil (cvalq #:modtoc:trace-functions))
(mov nil (cvalq #:modtoc:module-functions))
(mov nil (cvalq #:modtoc:list-of-fvalqued-symbols))
(mov '0 (cvalq #:modtoc:gen-new-label-counter))
(mov nil (cvalq #:modtoc:internal-variables-list))
(mov nil (cvalq #:modtoc:in-procedure-c-p))
(call #:modtoc:initialize-elaborate-channel)
(push (@ 109))
(mov '0 a4)
(jmp outchan)
109
(eval ())
(push a1)
(push (@ 110))
(push dlink)
(push prot)
(stack dlink)
(push (@ 112))
(push (cvalq #:modtoc:elaborate-channel))
(mov '1 a4)
(jmp outchan)
112
(eval ())
(mov (& 5) a2)
(mov '";;; GELL 15.26: elaboration file for the module: " a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(mov '"""" a3)
(mov (cvalq #:modtoc:date) a2)
(mov '";;;             translation done: """ a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(call #:modtoc:terpri)
(mov '"(with ((outchan ()))" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(push (@ 113))
(push '"(print "";Loading elaboration file: ")
(push (& 7))
(push (cvalq #:modtoc:suffix-le))
(push '"""))")
(mov '4 a4)
(jmp prin)
113
(eval ())
(call #:modtoc:terpri)
(mov '"(unless (boundp '#:module:compiled-list)" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(setq #:module:compiled-list ()))" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '")" a3)
(mov (& 5) a2)
(mov '"(newl #:module:compiled-list '" a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov '"(setq #:system:read-case-flag t)" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(call #:modtoc:terpri)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 111) a3)
110
(push a3)
(push a2)
(push (@ 114))
(push (& 4))
(mov '1 a4)
(jmp outchan)
114
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
111
(eval ())
(adjstk '1)
(push (@ 115))
(mov '0 a4)
(jmp outchan)
115
(eval ())
(push a1)
(push (@ 116))
(push dlink)
(push prot)
(stack dlink)
(push (@ 118))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
118
(eval ())
(mov '""" */" a3)
(mov (& 5) a2)
(mov '"/* GELL 15.26: include file for the module: """ a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov '""" */" a3)
(mov (cvalq #:modtoc:date) a2)
(mov '"/*             translation done:            """ a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(push (@ 119))
(push '"impure LLM3 predefined")
(push '"extern Ptr")
(push '"")
(push '(dlink llink fcons evalst))
(push nil)
120
(bfcons (& 1) 121)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 122))
(push (cvalq #:modtoc:prefix-impure-llm3))
(push (& 2))
(mov '2 a4)
(jmp catenate)
122
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 120)
121
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '4 a4)
(bra #:modtoc:princlude-list-of-decl)
119
(eval ())
(call #:modtoc:terpri)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 117) a3)
116
(push a3)
(push a2)
(push (@ 123))
(push (& 4))
(mov '1 a4)
(jmp outchan)
123
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
117
(eval ())
(adjstk '1)
(push (@ 124))
(mov '0 a4)
(jmp outchan)
124
(eval ())
(push a1)
(push (@ 125))
(mov '0 a4)
(jmp lmargin)
125
(eval ())
(push a1)
(push (@ 126))
(mov '0 a4)
(jmp rmargin)
126
(eval ())
(push a1)
(push (@ 127))
(mov '0 a4)
(jmp inchan)
127
(eval ())
(push a1)
(push (@ 128))
(push dlink)
(push prot)
(stack dlink)
(push (@ 130))
(push (cvalq #:modtoc:ccode-channel))
(mov '1 a4)
(jmp outchan)
130
(eval ())
(push (@ 131))
(push '0)
(mov '1 a4)
(jmp lmargin)
131
(eval ())
(push (@ 132))
(push (@ 133))
(mov '0 a4)
(jmp outbuf)
133
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
132
(eval ())
(push (@ 134))
(mov (& 9) a1)
(jcall probepatho)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
134
(eval ())
(mov '""" */" a3)
(mov (& 8) a2)
(mov '"/* GELL 15.26: source file for the module: """ a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov '""" */" a3)
(mov (cvalq #:modtoc:date) a2)
(mov '"/*             translation done:           """ a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov '" */" a3)
(mov (cvalq #:modtoc:peephole-optimize-p) a2)
(mov '"/*             peephole-optimize-p:        " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov '" */" a3)
(mov (cvalq #:modtoc:optimize-local-labels-p) a2)
(mov '"/*             optimize-local-labels-p:    " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(call #:modtoc:terpri)
(mov '"#include ""lelispc.h"" " a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '".h"" " a3)
(mov (& 8) a2)
(mov '"#include """ a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(call #:modtoc:terpri)
(btnil (cvalq #:modtoc:stats-on-c-size-p) 136)
(call #:modtoc:stats-start)
136
(push 't)
(push (cvalq #:system:read-case-flag))
(mov (& 1) (cvalq #:system:read-case-flag))
(push '1)
(push '(#:system:read-case-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 137))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
138
(jcall read)
(mov a1 (& 19))
(bfcons a1 140)
(cabne (car a1) 'loader 140)
(mov (cdr a1) a4)
(bfcons (car a4) 140)
(mov (cdr a1) a3)
(mov (car a3) a3)
(cabne (car a3) 'quote 140)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:modtoc:loader)
(bra 138)
140
(btnil (cvalq #:modtoc:llm3-module-p) 142)
(push (@ 144))
(push '"modtoc: not a loader call in a LLM3 module")
(push a1)
(mov '2 a4)
(bra #:modtoc:print-error)
144
(eval ())
(bra 138)
142
(call #:modtoc:to-elaborate-channel)
(bra 138)
139
(mov (& 1) dlink)
(adjstk '4)
137
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:read-case-flag))
(adjstk '8)
(mov (cvalq #:modtoc:list-fentry) a1)
(call #:modtoc:generate-trace-functions)
(call #:modtoc:function-ending-point)
(push (@ 145))
(mov '0 a4)
(jmp outchan)
145
(eval ())
(push a1)
(push (@ 146))
(push dlink)
(push prot)
(stack dlink)
(push (@ 148))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
148
(eval ())
(push (@ 149))
(push '"LLM3 functions")
(push '"extern Ptr")
(push '"()")
(mov (cvalq #:modtoc:llm3-functions) a1)
(jcall reverse)
(push a1)
(push nil)
150
(bfcons (& 1) 151)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 150)
151
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '4 a4)
(bra #:modtoc:princlude-list-of-decl)
149
(eval ())
(push (@ 152))
(push '"intern functions")
(push '"static Ptr")
(push '"()")
(mov (cvalq #:modtoc:module-functions) a1)
(jcall reverse)
(push a1)
(push nil)
153
(bfcons (& 1) 154)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 153)
154
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '4 a4)
(bra #:modtoc:princlude-list-of-decl)
152
(eval ())
(push (@ 155))
(push '"trace functions")
(push '"static Ptr")
(push '"()")
(mov (cvalq #:modtoc:trace-functions) a1)
(jcall reverse)
(push a1)
(push nil)
156
(bfcons (& 1) 157)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 156)
157
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '4 a4)
(bra #:modtoc:princlude-list-of-decl)
155
(eval ())
(btnil (cvalq #:modtoc:list-brx) 159)
(call #:modtoc:terpri)
(mov (cvalq #:modtoc:list-brx) a1)
(jcall reverse)
(push a1)
160
(bfcons (& 0) 161)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov '" []) () = {" a3)
(mov (car a2) a2)
(mov '"Ptr (* " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
162
(mov (& 0) a4)
(btnil (cdr a4) 163)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov '"," a2)
(mov (car a1) a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(bra 162)
163
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(mov '"};" a2)
(mov (car a1) a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(adjstk '1)
(bra 160)
161
(adjstk '1)
159
(call #:modtoc:terpri)
(push (@ 164))
(push '"static Ptr ")
(push (cvalq #:modtoc:c-lit-table-name))
(push '"[")
(mov (cvalq #:modtoc:list-litterals) a1)
(jcall length)
(cabne a1 '0 165)
(mov '1 a4)
(bra 166)
165
(mov a1 a4)
166
(push a4)
(push '"];")
(mov '5 a4)
(jmp prin)
164
(eval ())
(call #:modtoc:terpri)
(call #:modtoc:terpri)
(push (@ 167))
(push (cvalq #:modtoc:prefix-module-name))
(push (cvalq #:modtoc:c-module-name))
(mov '2 a4)
(jmp catenate)
167
(eval ())
(push a1)
(push (@ 168))
(push (cvalq #:modtoc:prefix-module-date))
(push (cvalq #:modtoc:c-module-name))
(mov '2 a4)
(jmp catenate)
168
(eval ())
(push a1)
(push (@ 169))
(push (cvalq #:modtoc:prefix-module-table))
(push (cvalq #:modtoc:c-module-name))
(mov '2 a4)
(jmp catenate)
169
(eval ())
(push a1)
(push (@ 170))
(push (cvalq #:modtoc:prefix-module-entry))
(push (cvalq #:modtoc:c-module-name))
(mov '2 a4)
(jmp catenate)
170
(eval ())
(push a1)
(mov (cvalq #:modtoc:list-fentry) a1)
(jcall length)
(push a1)
(push (@ 171))
(push '"static const char ")
(push (& 6))
(push '"[] = """)
(push (cvalq #:modtoc:c-module-name))
(push '""";")
(mov '5 a4)
(jmp prin)
171
(eval ())
(call #:modtoc:terpri)
(push (@ 172))
(push '"static const char ")
(push (& 5))
(push '"[] = """)
(push (cvalq #:modtoc:date))
(push '""";")
(mov '5 a4)
(jmp prin)
172
(eval ())
(call #:modtoc:terpri)
(cabeq (& 0) '0 174)
(call #:modtoc:terpri)
(mov '"[] = {" a3)
(mov (& 1) a2)
(mov '"static struct GellEntry " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(push (cvalq #:modtoc:list-fentry))
175
(bfcons (& 0) 176)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(mov (car a1) a1)
(call #:modtoc:get-module-function)
(push a1)
(bfnil a1 177)
(push (@ 179))
(push '"printable: no function for: ")
(push (& 3))
(mov '2 a4)
(bra #:modtoc:print-error)
179
(eval ())
(bra 178)
177
(mov '9 a1)
(call #:modtoc:princ1)
(mov '",	" a3)
(mov (& 0) a2)
(mov '"{" a1)
(call #:modtoc:prin3)
(mov (& 0) a1)
(jcall slength)
(cnbge a1 '6 181)
(mov '9 a1)
(call #:modtoc:princ1)
181
(push (@ 182))
(mov (& 2) a1)
(mov (car a1) a1)
(call #:modtoc:get-trace-function)
(push a1)
(push '",	")
(mov (& 4) a2)
(mov (cdr a2) a2)
(mov 'gellmodule a1)
(call #:modtoc:typefn-to-ftype)
(push a1)
(push '"},	/* ")
(mov (& 6) a1)
(mov (car a1) a1)
(call #:modtoc:get-real-ll-name)
(push a1)
(push '" */")
(mov '6 a4)
(jmp prin)
182
(eval ())
(call #:modtoc:terpri)
178
(adjstk '2)
(bra 175)
176
(adjstk '1)
(mov '"};" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
174
(call #:modtoc:terpri)
(mov '" = {" a3)
(mov (& 2) a2)
(mov '"struct GellModule " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"GELLMODULESTAMP," a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"," a2)
(mov (& 4) a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"," a2)
(mov (& 3) a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"," a2)
(mov (cvalq #:modtoc:c-lit-table-name) a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"," a2)
(mov (& 0) a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(cabne (& 0) '0 183)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"0};" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 184)
183
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"};" a2)
(mov (& 1) a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
184
(adjstk '5)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 147) a3)
146
(push a3)
(push a2)
(push (@ 185))
(push (& 4))
(mov '1 a4)
(jmp outchan)
185
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
147
(eval ())
(adjstk '1)
(push (@ 186))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp close)
186
(eval ())
(call #:modtoc:close-elaborate-channel)
(btnil (cvalq #:modtoc:stats-on-c-size-p) 188)
(call #:modtoc:stats-stop)
188
(push (@ 189))
(push (cvalq #:modtoc:ccode-channel))
(mov '1 a4)
(jmp close)
189
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 129) a3)
128
(push a3)
(push a2)
(push (@ 190))
(push (& 4))
(mov '1 a4)
(jmp inchan)
190
(eval ())
(push (@ 191))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
191
(eval ())
(push (@ 192))
(push (& 6))
(mov '1 a4)
(jmp lmargin)
192
(eval ())
(push (@ 193))
(push (& 7))
(mov '1 a4)
(jmp outchan)
193
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
129
(eval ())
(adjstk '6)
(return)
102
(mov (& 0) a3)
(mov '"no module description for" a2)
(mov 'module-to-c a1)
(adjstk '1)
(jmp error)
))
(loader'((entry #:modtoc:princlude-list-of-decl nsubr)
(bfcons (& 0) 101)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
106
(eval ())
(call #:modtoc:terpri)
(mov '"	*/" a3)
(mov (& 7) a2)
(mov '"/*	" a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(push (@ 107))
(mov '0 a4)
(jmp lmargin)
107
(eval ())
(push a1)
(push (@ 108))
(mov '0 a4)
(jmp rmargin)
108
(eval ())
(push a1)
(push (@ 109))
(push dlink)
(push prot)
(stack dlink)
(push (@ 111))
(push '0)
(mov '1 a4)
(jmp lmargin)
111
(eval ())
(push (@ 112))
(push (@ 113))
(mov '0 a4)
(jmp outbuf)
113
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
112
(eval ())
(push '0)
(push nil)
(push (& 11))
114
(bfcons (& 0) 115)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(mov (car a4) (& 1))
(mov (cdr a4) a2)
(mov (& 1) a1)
(jcall memq)
(bfnil a1 114)
(cabne (& 2) '0 118)
(push (@ 120))
(push (& 15))
(push '" ")
(push (& 4))
(push (& 17))
(mov '4 a4)
(jmp prin)
120
(eval ())
(mov '1 (& 2))
(bra 114)
118
(cabne (& 2) '4 121)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(push (@ 123))
(push (& 15))
(push '" ")
(push (& 4))
(push (& 17))
(mov '4 a4)
(jmp prin)
123
(eval ())
(mov '1 (& 2))
(bra 114)
121
(mov (& 13) a3)
(mov (& 1) a2)
(mov '", " a1)
(call #:modtoc:prin3)
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 114)
115
(adjstk '1)
(cabeq (& 1) '0 124)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 125)
124
(mov nil a1)
125
(adjstk '2)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 110) a3)
109
(push a3)
(push a2)
(push (@ 126))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
126
(eval ())
(push (@ 127))
(push (& 5))
(mov '1 a4)
(jmp lmargin)
127
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
110
(eval ())
(adjstk '2)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 128))
(push (& 4))
(mov '1 a4)
(jmp outchan)
128
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '5)
(return)
101
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:modtoc:generate-trace-functions subr1)
(push a1)
(jcall length)
(push a1)
(push (@ 101))
(push (cvalq #:modtoc:prefix-module-table))
(push (cvalq #:modtoc:c-module-name))
(mov '2 a4)
(jmp catenate)
101
(eval ())
(push '-1)
(push a1)
(push (& 3))
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 104))
(push 'dentry)
(mov (& 2) a4)
(push (car a4))
(push (cdr a4))
(push (& 7))
(mov (& 9) a1)
(jcall |1+|)
(mov a1 (& 9))
(push a1)
(mov '5 a4)
(jmp list)
104
(eval ())
(jcall ncons)
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '6)
(bra #:modtoc:loader)
))
(defvar #:modtoc:in-procedure-c-p ())
(defvar #:modtoc:c-body-list ())
(defvar #:modtoc:c-ini-seq "")
(defvar #:modtoc:c-ret-seq "")
(defvar #:modtoc:local-procedure-label-list ())
(defvar #:modtoc:backward-references-p ())
(defvar #:modtoc:tailrec-p ())
(defvar #:modtoc:tailrec-label ())
(defvar #:modtoc:current-name ())
(defvar #:modtoc:use-threshold-read-only 2)
(defvar #:modtoc:use-threshold-read-write 3)
(defvar #:modtoc:use-lit-count ())
(defvar #:modtoc:use-nil-count ())
(defvar #:modtoc:use-bnumb-count ())
(defvar #:modtoc:use-bfloat-count ())
(defvar #:modtoc:use-bvect-count ())
(defvar #:modtoc:use-bstrg-count ())
(defvar #:modtoc:use-bsymb-count ())
(defvar #:modtoc:use-bcons-count ())
(defvar #:modtoc:use-sp-count ())
(defvar #:modtoc:use-a1-count ())
(defvar #:modtoc:use-a2-count ())
(defvar #:modtoc:use-a3-count ())
(defvar #:modtoc:use-a4-count ())
(defvar #:modtoc:modify-sp-p ())
(defvar #:modtoc:modify-a1-p ())
(defvar #:modtoc:modify-a2-p ())
(defvar #:modtoc:modify-a3-p ())
(defvar #:modtoc:modify-a4-p ())
(loader'((entry #:modtoc:init-register-use subr0)
(mov '0 (cvalq #:modtoc:use-lit-count))
(mov '0 (cvalq #:modtoc:use-nil-count))
(mov '0 (cvalq #:modtoc:use-bnumb-count))
(mov '0 (cvalq #:modtoc:use-bfloat-count))
(mov '0 (cvalq #:modtoc:use-bvect-count))
(mov '0 (cvalq #:modtoc:use-bstrg-count))
(mov '0 (cvalq #:modtoc:use-bsymb-count))
(mov '0 (cvalq #:modtoc:use-bcons-count))
(mov '0 (cvalq #:modtoc:use-sp-count))
(mov '0 (cvalq #:modtoc:use-a1-count))
(mov '0 (cvalq #:modtoc:use-a2-count))
(mov '0 (cvalq #:modtoc:use-a3-count))
(mov '0 (cvalq #:modtoc:use-a4-count))
(mov nil (cvalq #:modtoc:modify-sp-p))
(mov nil (cvalq #:modtoc:modify-a1-p))
(mov nil (cvalq #:modtoc:modify-a2-p))
(mov nil (cvalq #:modtoc:modify-a3-p))
(mov nil (cvalq #:modtoc:modify-a4-p))
(mov nil a1)
(return)
))
(loader'((entry #:modtoc:no-register-use subr0)
(mov '-10000 (cvalq #:modtoc:use-lit-count))
(mov '-10000 (cvalq #:modtoc:use-nil-count))
(mov '-10000 (cvalq #:modtoc:use-bnumb-count))
(mov '-10000 (cvalq #:modtoc:use-bfloat-count))
(mov '-10000 (cvalq #:modtoc:use-bvect-count))
(mov '-10000 (cvalq #:modtoc:use-bstrg-count))
(mov '-10000 (cvalq #:modtoc:use-bsymb-count))
(mov '-10000 (cvalq #:modtoc:use-bcons-count))
(mov '-10000 (cvalq #:modtoc:use-sp-count))
(mov '-10000 (cvalq #:modtoc:use-a1-count))
(mov '-10000 (cvalq #:modtoc:use-a2-count))
(mov '-10000 (cvalq #:modtoc:use-a3-count))
(mov '-10000 (cvalq #:modtoc:use-a4-count))
(mov '-10000 a1)
(return)
))
(defvar #:modtoc:register-attribute-list '((nil "<<nil>>" "rNil") (bnumb "<<bnumb>>" "rBnumb") (bfloat "<<bfloat>>" "rBfloat") (bvect "<<bvect>>" "rBvect") (bstrg "<<bstrg>>" "rBstrg") (bsymb "<<bsymb>>" "rBsymb") (bcons "<<bcons>>" "rBcons") (a1 "<<a1>>" "rA1") (a2 "<<a2>>" "rA2") (a3 "<<a3>>" "rA3") (a4 "<<a4>>" "rA4") (sp "<<sp>>" "rSp")))
(loader'((entry #:modtoc:use-register subr1)
(cabne a1 'lit 102)
(mov (cvalq #:modtoc:use-lit-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-lit-count))
(mov a4 a1)
(return)
102
(cabne a1 'nil 103)
(mov (cvalq #:modtoc:use-nil-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-nil-count))
(mov a4 a1)
(return)
103
(cabne a1 'bnumb 104)
(mov (cvalq #:modtoc:use-bnumb-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-bnumb-count))
(mov a4 a1)
(return)
104
(cabne a1 'bfloat 105)
(mov (cvalq #:modtoc:use-bfloat-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-bfloat-count))
(mov a4 a1)
(return)
105
(cabne a1 'bvect 106)
(mov (cvalq #:modtoc:use-bvect-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-bvect-count))
(mov a4 a1)
(return)
106
(cabne a1 'bstrg 107)
(mov (cvalq #:modtoc:use-bstrg-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-bstrg-count))
(mov a4 a1)
(return)
107
(cabne a1 'bsymb 108)
(mov (cvalq #:modtoc:use-bsymb-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-bsymb-count))
(mov a4 a1)
(return)
108
(cabne a1 'bcons 109)
(mov (cvalq #:modtoc:use-bcons-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-bcons-count))
(mov a4 a1)
(return)
109
(cabne a1 'sp 110)
(mov (cvalq #:modtoc:use-sp-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-sp-count))
(mov a4 a1)
(return)
110
(cabne a1 'a1 111)
(mov (cvalq #:modtoc:use-a1-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-a1-count))
(mov a4 a1)
(return)
111
(cabne a1 'a2 112)
(mov (cvalq #:modtoc:use-a2-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-a2-count))
(mov a4 a1)
(return)
112
(cabne a1 'a3 113)
(mov (cvalq #:modtoc:use-a3-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-a3-count))
(mov a4 a1)
(return)
113
(cabne a1 'a4 114)
(mov (cvalq #:modtoc:use-a4-count) a4)
(plus '1 a4)
(mov a4 (cvalq #:modtoc:use-a4-count))
(mov a4 a1)
(return)
114
(mov nil a1)
(return)
))
(loader'((entry #:modtoc:modify-register subr1)
(cabne a1 'sp 102)
(mov 't (cvalq #:modtoc:modify-sp-p))
(mov 't a1)
(return)
102
(cabne a1 'a1 103)
(mov 't (cvalq #:modtoc:modify-a1-p))
(mov 't a1)
(return)
103
(cabne a1 'a2 104)
(mov 't (cvalq #:modtoc:modify-a2-p))
(mov 't a1)
(return)
104
(cabne a1 'a3 105)
(mov 't (cvalq #:modtoc:modify-a3-p))
(mov 't a1)
(return)
105
(cabne a1 'a4 106)
(mov 't (cvalq #:modtoc:modify-a4-p))
(mov 't a1)
(return)
106
(mov nil a1)
(return)
))
(loader'((entry #:modtoc:function-entry-point subr1)
(push a1)
(call #:modtoc:function-ending-point)
(mov (& 0) a1)
(call #:modtoc:lab)
(push a1)
(mov (cvalq #:modtoc:llm3-functions) a2)
(mov (& 1) a1)
(jcall assq)
(btnil a1 101)
(push (@ 103))
(push '"extern Ptr ")
(push (& 2))
(push '"() {	/* ")
(mov (& 5) a1)
(call #:modtoc:get-real-ll-name)
(push a1)
(push '" */")
(mov '5 a4)
(jmp prin)
103
(eval ())
(call #:modtoc:terpri)
(bra 102)
101
(push (@ 104))
(push '"static Ptr ")
(push (& 2))
(push '"() {	/* ")
(push (& 5))
(push '" */")
(mov '5 a4)
(jmp prin)
104
(eval ())
(call #:modtoc:terpri)
102
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:modtoc:function-entry-point-init)
))
(loader'((entry #:modtoc:trace-entry-point subr1)
(push a1)
(call #:modtoc:function-ending-point)
(mov (& 0) a1)
(call #:modtoc:get-trace-function)
(push a1)
(push (@ 101))
(push '"static Ptr ")
(push a1)
(push '"() {	/* trace ")
(mov (& 5) a1)
(call #:modtoc:get-real-ll-name)
(push a1)
(push '" */")
(mov '5 a4)
(jmp prin)
101
(eval ())
(call #:modtoc:terpri)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:modtoc:function-entry-point-init)
))
(loader'((entry #:modtoc:function-entry-point-init subr2)
(push a1)
(mov 't (cvalq #:modtoc:in-procedure-c-p))
(mov nil (cvalq #:modtoc:c-body-list))
(mov '"" (cvalq #:modtoc:c-ini-seq))
(mov '"" (cvalq #:modtoc:c-ret-seq))
(mov nil (cvalq #:modtoc:local-procedure-label-list))
(mov nil (cvalq #:modtoc:backward-references-p))
(mov nil (cvalq #:modtoc:tailrec-p))
(mov a2 a1)
(call #:modtoc:gen-tailrec-label)
(mov a1 (cvalq #:modtoc:tailrec-label))
(mov (& 0) (cvalq #:modtoc:current-name))
(adjstk '1)
(bra #:modtoc:init-register-use)
))
(loader'((entry #:modtoc:function-ending-point subr0)
(btnil (cvalq #:modtoc:in-procedure-c-p) 101)
(mov '"   {	register Ptr aRet" a1)
(call #:modtoc:prin1)
(push (@ 103))
(push (cvalq #:modtoc:use-lit-count))
(push nil)
(push '"<<lit>>")
(push (cvalq #:modtoc:c-lit-table-name))
(push '"*")
(push '"rLit")
(mov '6 a4)
(bra #:modtoc:force-register)
103
(eval ())
(mov 'sp a3)
(mov (cvalq #:modtoc:modify-sp-p) a2)
(mov (cvalq #:modtoc:use-sp-count) a1)
(call #:modtoc:force-simple-register)
(mov 'a1 a3)
(mov (cvalq #:modtoc:modify-a1-p) a2)
(mov (cvalq #:modtoc:use-a1-count) a1)
(call #:modtoc:force-simple-register)
(mov 'a2 a3)
(mov (cvalq #:modtoc:modify-a2-p) a2)
(mov (cvalq #:modtoc:use-a2-count) a1)
(call #:modtoc:force-simple-register)
(mov 'a3 a3)
(mov (cvalq #:modtoc:modify-a3-p) a2)
(mov (cvalq #:modtoc:use-a3-count) a1)
(call #:modtoc:force-simple-register)
(mov 'a4 a3)
(mov (cvalq #:modtoc:modify-a4-p) a2)
(mov (cvalq #:modtoc:use-a4-count) a1)
(call #:modtoc:force-simple-register)
(mov 'nil a3)
(mov nil a2)
(mov (cvalq #:modtoc:use-nil-count) a1)
(call #:modtoc:force-simple-register)
(mov 'bnumb a3)
(mov nil a2)
(mov (cvalq #:modtoc:use-bnumb-count) a1)
(call #:modtoc:force-simple-register)
(mov 'bfloat a3)
(mov nil a2)
(mov (cvalq #:modtoc:use-bfloat-count) a1)
(call #:modtoc:force-simple-register)
(mov 'bvect a3)
(mov nil a2)
(mov (cvalq #:modtoc:use-bvect-count) a1)
(call #:modtoc:force-simple-register)
(mov 'bstrg a3)
(mov nil a2)
(mov (cvalq #:modtoc:use-bstrg-count) a1)
(call #:modtoc:force-simple-register)
(mov 'bsymb a3)
(mov nil a2)
(mov (cvalq #:modtoc:use-bsymb-count) a1)
(call #:modtoc:force-simple-register)
(mov 'bcons a3)
(mov nil a2)
(mov (cvalq #:modtoc:use-bcons-count) a1)
(call #:modtoc:force-simple-register)
(push (@ 104))
(push '";")
(mov '1 a4)
(jmp print)
104
(eval ())
(mov '"" a2)
(mov (cvalq #:modtoc:c-ini-seq) a1)
(jcall equal)
(bfnil a1 106)
(push (@ 107))
(push '"	")
(push (cvalq #:modtoc:c-ini-seq))
(mov '2 a4)
(jmp print)
107
(eval ())
106
(mov '"  lRet: <<ret>> return (aRet);}}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov (cvalq #:modtoc:c-ret-seq) a3)
(mov '"<<ret>>" a2)
(mov (cvalq #:modtoc:c-body-list) a1)
(call #:modtoc:code-replace)
(btnil (cvalq #:modtoc:tailrec-p) 109)
(push (@ 110))
(push (cvalq #:modtoc:tailrec-label))
(push '":")
(mov '2 a4)
(jmp print)
110
(eval ())
109
(mov (cvalq #:modtoc:c-body-list) a1)
(jcall nreverse)
(mov a1 (cvalq #:modtoc:c-body-list))
(push a1)
111
(bfcons (& 0) 112)
(push (@ 113))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
113
(eval ())
(bra 111)
112
(adjstk '1)
(mov nil (cvalq #:modtoc:in-procedure-c-p))
(call #:modtoc:terpri)
(btnil (cvalq #:modtoc:stats-on-c-size-p) 114)
(mov (cvalq #:modtoc:stats-nb-of-procs) a1)
(jcall |1+|)
(mov a1 (cvalq #:modtoc:stats-nb-of-procs))
(mov (cvalq #:modtoc:c-body-list) a1)
(jcall length)
(push a1)
(push (@ 116))
(push a1)
(hgsize (cvalq #:modtoc:stats-vector) a1)
(jcall |1-|)
(push a1)
(mov '2 a4)
(jmp min)
116
(eval ())
(mov a1 (& 0))
(push (cvalq #:modtoc:stats-vector))
(push a1)
(hpxmov (cvalq #:modtoc:stats-vector) a1 a1)
(jcall |1+|)
(pop a4)
(pop a3)
(hpmovx a1 a3 a4)
(adjstk '1)
(return)
114
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:modtoc:force-simple-register subr3)
(push a3)
(push a2)
(push a1)
(mov (cvalq #:modtoc:register-attribute-list) a2)
(mov a3 a1)
(jcall assq)
(push (@ 101))
(push (& 1))
(push (& 3))
(mov (cdr a1) a4)
(push (car a4))
(push (& 6))
(push '"")
(mov (cdr a1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '6 a4)
(bra #:modtoc:force-register)
101
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:modtoc:force-register nsubr)
(btnil (& 4) 103)
(bfnil (cvalq #:modtoc:tailrec-p) 103)
(btnil (cvalq #:modtoc:backward-references-p) 101)
103
(mov (cvalq #:modtoc:use-threshold-read-only) a2)
(bra 102)
101
(mov (cvalq #:modtoc:use-threshold-read-write) a2)
102
(mov (& 5) a1)
(jcall ge)
(push a1)
(bfsymb (& 3) 105)
(push (@ 106))
(push (cvalq #:modtoc:prefix-impure-llm3))
(push (& 5))
(mov '2 a4)
(jmp catenate)
106
(eval ())
(mov a1 (& 3))
105
(btnil (& 0) 107)
(mov (cvalq #:modtoc:stats-preloaded-registers) a1)
(jcall |1+|)
(mov a1 (cvalq #:modtoc:stats-preloaded-registers))
(push (@ 109))
(push '", ")
(push (& 4))
(push (& 4))
(mov '3 a4)
(jmp prin)
109
(eval ())
(mov '"" a2)
(mov (cvalq #:modtoc:c-ini-seq) a1)
(jcall eqstring)
(btnil a1 110)
(push (@ 112))
(push (& 2))
(push '" = ")
(push (& 6))
(push '";")
(mov '4 a4)
(jmp catenate)
112
(eval ())
(mov a1 a4)
(bra 111)
110
(push (@ 113))
(push (cvalq #:modtoc:c-ini-seq))
(push '" ")
(push (& 4))
(push '" = ")
(push (& 8))
(push '";")
(mov '6 a4)
(jmp catenate)
113
(eval ())
(mov a1 a4)
111
(mov a4 (cvalq #:modtoc:c-ini-seq))
(mov (& 1) a3)
(mov (& 4) a2)
(mov (cvalq #:modtoc:c-body-list) a1)
(call #:modtoc:code-replace)
(btnil (& 5) 114)
(mov (cvalq #:modtoc:stats-unloaded-registers) a1)
(jcall |1+|)
(mov a1 (cvalq #:modtoc:stats-unloaded-registers))
(mov '"" a2)
(mov (cvalq #:modtoc:c-ret-seq) a1)
(jcall eqstring)
(btnil a1 116)
(push (@ 118))
(push (& 4))
(push '" = ")
(push (& 4))
(push '";")
(mov '4 a4)
(jmp catenate)
118
(eval ())
(mov a1 a4)
(bra 117)
116
(push (@ 119))
(push (cvalq #:modtoc:c-ret-seq))
(push '" ")
(push (& 6))
(push '" = ")
(push (& 6))
(push '";")
(mov '6 a4)
(jmp catenate)
119
(eval ())
(mov a1 a4)
117
(mov a4 (cvalq #:modtoc:c-ret-seq))
(mov a4 a1)
(adjstk '7)
(return)
114
(mov nil a1)
(adjstk '7)
(return)
107
(mov (& 3) a3)
(mov (& 4) a2)
(mov (cvalq #:modtoc:c-body-list) a1)
(adjstk '7)
(bra #:modtoc:code-replace)
))
(loader'((entry #:modtoc:code-replace subr3)
(push a3)
(push a2)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push '0)
(push (@ 105))
(push (& 4))
(push (& 3))
(push '0)
(mov '3 a4)
(jmp index)
105
(eval ())
(mov a1 (& 0))
(btnil a1 104)
(push (@ 106))
(push (& 2))
(push (& 5))
(push (& 7))
(push a1)
(hgsize (& 8) a4)
(push a4)
(mov '5 a4)
(bra #:modtoc:code-replace-aux)
106
(eval ())
(mov a1 a2)
(mov (& 1) a1)
(jcall exchstring)
104
(adjstk '2)
(bra 101)
102
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:modtoc:code-replace-aux nsubr)
(bfnil (& 1) 101)
(mov (& 4) a1)
(adjstk '5)
(return)
101
(push (@ 103))
(push (@ 104))
(push (& 6))
(push '0)
(push (& 5))
(mov '3 a4)
(jmp substring)
104
(eval ())
(push a1)
(push (& 4))
(push (@ 105))
(push (& 8))
(mov (& 6) a4)
(plus (& 5) a4)
(push a4)
(mov '2 a4)
(jmp substring)
105
(eval ())
(push (@ 106))
(push a1)
(push (& 8))
(push (& 8))
(push (@ 107))
(push (& 11))
(push a1)
(push '0)
(mov '3 a4)
(jmp index)
107
(eval ())
(push a1)
(push (& 8))
(mov '5 a4)
(bra #:modtoc:code-replace-aux)
106
(eval ())
(push a1)
(mov '3 a4)
(jmp catenate)
103
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:modtoc:terpri subr0)
(btnil (cvalq #:modtoc:in-procedure-c-p) 101)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(cabne a1 (cvalq #:modtoc:ccode-channel) 101)
(push (@ 104))
(push (@ 105))
(mov '0 a4)
(jmp outbuf)
105
(eval ())
(push a1)
(push '0)
(push (@ 106))
(mov '0 a4)
(jmp outpos)
106
(eval ())
(push a1)
(mov '3 a4)
(jmp substring)
104
(eval ())
(mov (cvalq #:modtoc:c-body-list) a2)
(jcall cons)
(mov a1 (cvalq #:modtoc:c-body-list))
(push (@ 107))
(push '0)
(mov '1 a4)
(jmp outpos)
107
(eval ())
(return)
101
(push (@ 108))
(mov '0 a4)
(jmp terpri)
108
(eval ())
(return)
))
(defvar #:modtoc:exprs-to-elaborate-channel ())
(loader'((entry #:modtoc:initialize-elaborate-channel subr0)
(mov nil (cvalq #:modtoc:exprs-to-elaborate-channel))
(mov nil a1)
(return)
))
(loader'((entry #:modtoc:to-elaborate-channel subr1)
(mov (cvalq #:modtoc:exprs-to-elaborate-channel) a2)
(jcall cons)
(mov a1 (cvalq #:modtoc:exprs-to-elaborate-channel))
(return)
))
(loader'((entry #:modtoc:close-elaborate-channel subr0)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp obase)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp printlevel)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp printlength)
104
(eval ())
(push a1)
(push (@ 105))
(mov '0 a4)
(jmp rmargin)
105
(eval ())
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp lmargin)
106
(eval ())
(push a1)
(push (@ 107))
(push dlink)
(push prot)
(stack dlink)
(push (@ 109))
(push (cvalq #:modtoc:elaborate-channel))
(mov '1 a4)
(jmp outchan)
109
(eval ())
(push (@ 110))
(push '10)
(mov '1 a4)
(jmp obase)
110
(eval ())
(push (@ 111))
(push '1000)
(mov '1 a4)
(jmp printlevel)
111
(eval ())
(push (@ 112))
(push '30000)
(mov '1 a4)
(jmp printlength)
112
(eval ())
(push (@ 113))
(push (@ 114))
(mov '0 a4)
(jmp outbuf)
114
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
113
(eval ())
(push (@ 115))
(push '0)
(mov '1 a4)
(jmp lmargin)
115
(eval ())
(push 't)
(push nil)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 1) (cvalq #:system:print-with-abbrev-flag))
(push (cvalq #:system:print-for-read))
(mov (& 3) (cvalq #:system:print-for-read))
(push '2)
(push '(#:system:print-with-abbrev-flag #:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '40 a1)
(call #:modtoc:princ1)
(push (@ 116))
(push 'defcelaborate)
(push (cvalq #:modtoc:c-module-table-name))
(mov '2 a4)
(jmp prin)
116
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 117))
(push '" """)
(push (cvalq #:modtoc:date))
(push '"""")
(mov '3 a4)
(jmp print)
117
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(push (@ 118))
(mov '0 a4)
(jmp print)
118
(eval ())
(push (@ 119))
(push (cvalq #:modtoc:list-fentry))
(push nil)
120
(bfcons (& 1) 121)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(mov (car a1) a1)
(call #:modtoc:get-real-ll-name)
(mov (& 0) a2)
(mov (cdr a2) a2)
(jcall cons)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 120)
121
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(jcall kwote)
(push a1)
(mov '1 a4)
(jmp print)
119
(eval ())
(push (@ 122))
(mov '0 a4)
(jmp print)
122
(eval ())
(push (@ 123))
(push (@ 124))
(push 'vector)
(mov (cvalq #:modtoc:list-litterals) a1)
(jcall nreverse)
(push a1)
(mov '2 a4)
(jmp apply)
124
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
123
(eval ())
(mov '41 a1)
(call #:modtoc:princ1)
(push (@ 125))
(mov '0 a4)
(jmp print)
125
(eval ())
(push (@ 126))
(mov '0 a4)
(jmp print)
126
(eval ())
(mov (cvalq #:modtoc:exprs-to-elaborate-channel) a1)
(jcall nreverse)
(push a1)
127
(bfcons (& 0) 128)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:modtoc:print-elaborate-channel)
(bra 127)
128
(adjstk '1)
(push (@ 129))
(mov '0 a4)
(jmp print)
129
(eval ())
(push (@ 130))
(push (@ 131))
(push 'defccheck)
(mov (cvalq #:modtoc:list-of-fvalqued-symbols) a1)
(jcall kwote)
(push a1)
(mov '2 a4)
(jmp list)
131
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
130
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(mov (& 7) (cvalq #:system:print-with-abbrev-flag))
(adjstk '10)
(push (@ 132))
(push (cvalq #:modtoc:elaborate-channel))
(mov '1 a4)
(jmp close)
132
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 108) a3)
107
(push a3)
(push a2)
(push (@ 133))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
133
(eval ())
(push (@ 134))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
134
(eval ())
(push (@ 135))
(push (& 6))
(mov '1 a4)
(jmp printlength)
135
(eval ())
(push (@ 136))
(push (& 7))
(mov '1 a4)
(jmp printlevel)
136
(eval ())
(push (@ 137))
(push (& 8))
(mov '1 a4)
(jmp obase)
137
(eval ())
(push (@ 138))
(push (& 9))
(mov '1 a4)
(jmp outchan)
138
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
108
(eval ())
(adjstk '6)
(return)
))
(loader'((entry #:modtoc:print-elaborate-channel subr1)
(push (@ 101))
(push a1)
(mov '1 a4)
(jmp print)
101
(eval ())
(return)
))
(loader'((entry #:modtoc:opr subr1)
(bra #:modtoc:operand)
))
(loader'((entry #:modtoc:opw subr1)
(push a1)
(call #:modtoc:operand)
(bfsymb (& 0) 101)
(mov (& 0) a1)
(adjstk '1)
(bra #:modtoc:modify-register)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:opm subr1)
(push a1)
(bfsymb a1 102)
(call #:modtoc:use-register)
102
(mov (& 0) a1)
(call #:modtoc:operand)
(bfsymb (& 0) 103)
(mov (& 0) a1)
(adjstk '1)
(bra #:modtoc:modify-register)
103
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:operand subr1)
(push a1)
(bfnil a1 102)
(mov nil a3)
(mov 'modtoc a2)
(mov '#:modtoc:operand a1)
(jcall error)
102
(btcons (& 0) 103)
(mov (cvalq #:modtoc:extern-llm3-predefined) a2)
(mov (& 0) a1)
(jcall cassq)
(btnil a1 105)
(push (@ 107))
(push '"((Ptr) ")
(push a1)
(push '")")
(mov '3 a4)
(jmp prin)
107
(eval ())
(adjstk '1)
(return)
105
(bfsymb (& 0) 108)
(mov (& 0) a1)
(jcall string)
(hbxmov a1 '0 a4)
(cabne a4 '46 110)
(push (@ 112))
(push (cvalq #:modtoc:prefix-dot-llm3))
(push (@ 113))
(mov (& 3) a1)
(jcall string)
(push a1)
(push '1)
(mov '2 a4)
(jmp substring)
113
(eval ())
(push a1)
(mov '2 a4)
(jmp prin)
112
(eval ())
(adjstk '1)
(return)
110
(mov (& 0) a1)
(call #:modtoc:optr-convert)
(bfstrg a1 114)
(push (@ 116))
(push a1)
(mov '1 a4)
(jmp prin)
116
(eval ())
(adjstk '1)
(return)
114
(push (@ 117))
(push (cvalq #:modtoc:prefix-impure-llm3))
(push (& 2))
(mov '2 a4)
(jmp prin)
117
(eval ())
(adjstk '1)
(return)
108
(push (@ 118))
(push (& 1))
(mov '1 a4)
(jmp prin)
118
(eval ())
(adjstk '1)
(return)
103
(mov (& 0) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov (& 1) a1)
(mov (car a1) a1)
(cabne a1 'quote 120)
(bffix (& 0) 121)
(cabne (& 0) '#$8000 123)
(push (@ 125))
(push '"(Ptr) ((UFix) 0x8000)")
(mov '1 a4)
(jmp prin)
125
(eval ())
(adjstk '2)
(return)
123
(cnblt (& 0) '0 126)
(push (@ 128))
(push '"(Ptr) ")
(push (& 2))
(mov '2 a4)
(jmp prin)
128
(eval ())
(adjstk '2)
(return)
126
(push (@ 129))
(push '"(Ptr) ((UFix) ")
(mov '1 a4)
(jmp prin)
129
(eval ())
(mov (& 0) a1)
(call #:modtoc:prinhex)
(mov '41 a1)
(adjstk '2)
(bra #:modtoc:princ1)
121
(mov (& 0) a1)
(adjstk '2)
(bra #:modtoc:lit)
120
(cabne a1 'car 130)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '"->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
130
(cabne a1 'cdr 131)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 1)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
131
(cabne a1 'cval 132)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '"->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
132
(cabne a1 'plist 133)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 1)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
133
(cabne a1 'fval 134)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 2)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
134
(cabne a1 'pkgc 135)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 3)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
135
(cabne a1 'oval 136)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 4)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
136
(cabne a1 'alink 137)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 5)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
137
(cabne a1 'pftype 138)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 6)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
138
(cabne a1 'pname 139)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 7)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
139
(cabne a1 'val 140)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '"->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
140
(cabne a1 'typ 141)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" + 1)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
141
(cabne a1 'cvalq 142)
(mov (& 0) a1)
(call #:modtoc:lit)
(mov '"->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
142
(cabne a1 'fvalq 143)
(mov (cvalq #:modtoc:list-of-fvalqued-symbols) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 145)
(mov (cvalq #:modtoc:list-of-fvalqued-symbols) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:modtoc:list-of-fvalqued-symbols))
145
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:lit)
(mov '" + 2)->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
143
(cabne a1 '& 146)
(cabne (& 0) '0 147)
(mov 'sp a1)
(call #:modtoc:opr)
(mov '"->Val" a1)
(adjstk '2)
(bra #:modtoc:prin1)
147
(mov '"(" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opr)
(mov '")->Val" a3)
(mov (& 0) a2)
(mov '" + " a1)
(adjstk '2)
(bra #:modtoc:prin3)
146
(cabne a1 '@ 149)
(mov (& 0) a1)
(call #:modtoc:lab)
(mov '")" a3)
(mov a1 a2)
(mov '"((Ptr) " a1)
(adjstk '2)
(bra #:modtoc:prin3)
149
(cabne a1 '% 150)
(mov '"((Ptr) &" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '")" a1)
(adjstk '2)
(bra #:modtoc:prin1)
150
(cabne a1 'eval 151)
(bfcons (& 0) 152)
(mov (& 0) a3)
(cabne (car a3) 'kwote 152)
(mov (cdr a3) a2)
(bfcons (car a2) 152)
(mov (cdr a3) a4)
(mov (car a4) a4)
(mov (car a4) a4)
(cabeq a4 'getglobal 154)
(cabne a4 '#:system:cached-getglobal 152)
154
(mov (cdr a3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 152)
(mov (cdr a3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 152)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (cdr a3) a3)
(push (car a3))
(mov (& 0) a2)
(mov '0 a1)
(jcall chrnth)
(cabne a1 '95 156)
(push (@ 157))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp substring)
157
(eval ())
(mov a1 (& 0))
156
(mov (& 0) a2)
(mov '"(Ptr) " a1)
(call #:modtoc:prin2)
(push (@ 158))
(mov '0 a4)
(jmp outchan)
158
(eval ())
(push a1)
(push (@ 159))
(push dlink)
(push prot)
(stack dlink)
(push (@ 161))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
161
(eval ())
(mov '"();" a3)
(mov (& 4) a2)
(mov '"extern Ptr " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 160) a3)
159
(push a3)
(push a2)
(push (@ 162))
(push (& 4))
(mov '1 a4)
(jmp outchan)
162
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
160
(eval ())
(adjstk '4)
(return)
152
(push (@ 163))
(push (& 1))
(mov '1 a4)
(jmp eval)
163
(eval ())
(adjstk '2)
(bra #:modtoc:opr)
151
(mov (& 1) a3)
(mov 'modtoc a2)
(mov '#:modtoc:operand a1)
(adjstk '2)
(jmp error)
))
(loader'((entry #:modtoc:optr-convert subr1)
(push a1)
(bfsymb a1 101)
(mov (cvalq #:modtoc:register-attribute-list) a2)
(jcall assq)
(push a1)
(bfnil a1 103)
(mov (& 1) a1)
(adjstk '2)
(return)
103
(mov (& 1) a1)
(call #:modtoc:use-register)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '2)
(return)
101
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:int subr1)
(push a1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov (cdr a1) a4)
(bffix (car a4) 101)
(push (@ 103))
(push '"(int) ")
(mov (cdr a1) a4)
(push (car a4))
(mov '2 a4)
(jmp prin)
103
(eval ())
(adjstk '1)
(return)
101
(mov '"(int) (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '")" a1)
(adjstk '1)
(bra #:modtoc:prin1)
))
(loader'((entry #:modtoc:fix subr1)
(push a1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov (cdr a1) a4)
(bffix (car a4) 101)
(push (@ 103))
(push '"(Fix) ")
(mov (cdr a1) a4)
(push (car a4))
(mov '2 a4)
(jmp prin)
103
(eval ())
(adjstk '1)
(return)
101
(mov '"(Fix) (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '")" a1)
(adjstk '1)
(bra #:modtoc:prin1)
))
(loader'((entry #:modtoc:fixpos subr1)
(push a1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov (cdr a1) a4)
(bffix (car a4) 101)
(mov (cdr a1) a4)
(cnblt (car a4) '0 103)
(push (@ 105))
(push '"(Fix) ")
(mov (cdr a1) a3)
(push (car a3))
(mov '2 a4)
(jmp prin)
105
(eval ())
(adjstk '1)
(return)
103
(mov a1 a3)
(mov 'erroob a2)
(mov '#:modtoc:fixpos a1)
(adjstk '1)
(jmp error)
101
(mov '"(Fix) (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '")" a1)
(adjstk '1)
(bra #:modtoc:prin1)
))
(loader'((entry #:modtoc:fixincr subr1)
(push a1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov (cdr a1) a4)
(bffix (car a4) 101)
(mov (cdr a1) a4)
(cnblt (car a4) '0 103)
(push (@ 105))
(push '" += (Fix) ")
(mov (cdr a1) a3)
(push (car a3))
(mov '2 a4)
(jmp prin)
105
(eval ())
(adjstk '1)
(return)
103
(push (@ 106))
(push '" -= (Fix) ")
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall abs)
(push a1)
(mov '2 a4)
(jmp prin)
106
(eval ())
(adjstk '1)
(return)
101
(mov '" += (Fix) (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '")" a1)
(adjstk '1)
(bra #:modtoc:prin1)
))
(loader'((entry #:modtoc:ufix subr1)
(push a1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov (cdr a1) a4)
(bffix (car a4) 101)
(push (@ 103))
(push '"(UFix) ")
(mov (cdr a1) a4)
(push (car a4))
(mov '2 a4)
(jmp prin)
103
(eval ())
(adjstk '1)
(return)
101
(mov '"(UFix) (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '")" a1)
(adjstk '1)
(bra #:modtoc:prin1)
))
(loader'((entry #:modtoc:lab subr1)
(push a1)
(bfnil a1 102)
(mov nil a3)
(mov 'modtoc a2)
(mov '#:modtoc:lab a1)
(jcall error)
102
(mov (& 0) a1)
(call #:modtoc:get-module-function)
(bfnil a1 103)
(mov (& 0) a1)
(adjstk '1)
(bra #:modtoc:make-module-function)
103
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:literal-index subr1)
(push a1)
(btstrg a1 103)
(bffloat a1 101)
103
(mov (cvalq #:modtoc:list-litterals) a2)
(jcall member)
(mov a1 a4)
(bra 102)
101
(mov (cvalq #:modtoc:list-litterals) a2)
(jcall memq)
(mov a1 a4)
102
(btnil a4 104)
(mov a4 a1)
(jcall length)
(diff '1 a1)
(adjstk '1)
(return)
104
(mov (cvalq #:modtoc:list-litterals) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:modtoc:list-litterals))
(mov (& 0) a1)
(adjstk '1)
(bra #:modtoc:literal-index)
))
(loader'((entry #:modtoc:lit subr1)
(push a1)
(mov 'lit a1)
(call #:modtoc:use-register)
(push (@ 101))
(push '"<<lit>>[")
(mov (& 2) a1)
(call #:modtoc:literal-index)
(push a1)
(push '"]")
(mov '3 a4)
(jmp prin)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:strg subr1)
(push a1)
(bfcons a1 101)
(cabne (car a1) 'strg 101)
(mov '34 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall explode)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(cabeq a4 '92 107)
(cabne a4 '34 106)
107
(mov '92 a1)
(call #:modtoc:princ1)
106
(mov (& 0) a1)
(call #:modtoc:princ1)
(adjstk '1)
(bra 103)
104
(adjstk '1)
(mov '34 a1)
(adjstk '1)
(bra #:modtoc:princ1)
101
(mov a1 a3)
(mov '"bad value" a2)
(mov '#:modtoc:strg a1)
(adjstk '1)
(jmp error)
))
(defvar #:modtoc:prinhex-table "0123456789abcdef")
(loader'((entry #:modtoc:prinhex subr1)
(push a1)
(push (cvalq #:modtoc:prinhex-table))
(mov '"0x" a1)
(call #:modtoc:prin1)
(mov (& 1) a4)
(lshift '-12 a4)
(land '15 a4)
(hbxmov (& 0) a4 a1)
(call #:modtoc:princ1)
(mov (& 1) a4)
(lshift '-8 a4)
(land '15 a4)
(hbxmov (& 0) a4 a1)
(call #:modtoc:princ1)
(mov (& 1) a4)
(lshift '-4 a4)
(land '15 a4)
(hbxmov (& 0) a4 a1)
(call #:modtoc:princ1)
(mov (& 1) a4)
(land '15 a4)
(hbxmov (& 0) a4 a1)
(adjstk '2)
(bra #:modtoc:princ1)
))
(loader'((entry #:modtoc:instruction subr1)
(push a1)
(btnil (cvalq #:modtoc:c-verbose-mode) 102)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" */" a3)
(mov (& 0) a2)
(mov '"	/* " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
102
(bfnil (& 0) 103)
(mov nil a1)
(adjstk '1)
(return)
103
(btcons (& 0) 105)
(mov (cvalq #:modtoc:local-labels-module) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 107)
(mov (cvalq #:modtoc:local-procedure-label-list) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:modtoc:local-procedure-label-list))
(mov '":" a3)
(mov (& 0) a2)
(mov (cvalq #:modtoc:prefix-local-label) a1)
(call #:modtoc:prin3)
(adjstk '1)
(bra #:modtoc:terpri)
107
(bfcons (cvalq #:modtoc:previous-instruction) 111)
(mov (cvalq #:modtoc:previous-instruction) a1)
(mov '(bra bri brx jmp call jcall return) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 113)
(mov nil a4)
(bra 112)
113
(mov 't a4)
(bra 112)
111
(mov (cvalq #:modtoc:previous-instruction) a4)
112
(btnil a4 110)
(mov '"" a2)
(mov (& 0) a1)
(call #:modtoc:goto-label-at)
110
(mov (& 0) a1)
(adjstk '1)
(bra #:modtoc:function-entry-point)
105
(mov (& 0) a4)
(push (car a4))
(mov (cdr a4) a3)
(mov (cdr a4) a2)
(mov (cdr a2) a2)
(mov (cdr a4) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a3))
(push (car a2))
(push (car a1))
(push (car a4))
(push (cvalq arg2))
(mov (& 3) (cvalq arg2))
(push (cvalq arg1))
(mov (& 5) (cvalq arg1))
(push '2)
(push '(arg2 arg1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(cabne a1 'entry 116)
(mov (cvalq arg1) a1)
(call #:modtoc:make-module-function)
(mov (cvalq arg1) a1)
(call #:modtoc:function-entry-point)
(bra 115)
116
(cabne a1 'fentry 117)
(push (@ 118))
(push 'defcsetfn)
(push (@ 119))
(push 'quote)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
119
(eval ())
(push a1)
(push (cvalq #:modtoc:c-module-table-name))
(mov (cvalq #:modtoc:list-fentry) a1)
(jcall length)
(push a1)
(mov '4 a4)
(jmp list)
118
(eval ())
(call #:modtoc:to-elaborate-channel)
(push (cvalq #:modtoc:list-fentry))
(mov (cvalq arg2) a2)
(mov (cvalq arg1) a1)
(jcall cons)
(mov a1 a2)
(pop a1)
(jcall nconc1)
(mov a1 (cvalq #:modtoc:list-fentry))
(bra 115)
117
(cabne a1 'lentry 120)
(mov (cvalq arg1) a1)
(call #:modtoc:get-llm3-function)
(bfnil a1 122)
(push (@ 123))
(push '"'LENTRY: no LLM3 entry point")
(push (cvalq arg1))
(mov '2 a4)
(bra #:modtoc:print-error)
123
(eval ())
122
(mov (cvalq arg1) a1)
(call #:modtoc:function-entry-point)
(push (cvalq #:modtoc:list-fentry))
(push (cvalq arg1))
(mov (cvalq arg2) a2)
(mov 'lentry a1)
(call #:modtoc:ftype-to-typefn)
(mov a1 a2)
(pop a1)
(jcall cons)
(mov a1 a2)
(pop a1)
(jcall nconc1)
(mov a1 (cvalq #:modtoc:list-fentry))
(push (@ 124))
(mov '0 a4)
(jmp outchan)
124
(eval ())
(push a1)
(push (@ 125))
(push dlink)
(push prot)
(stack dlink)
(push (@ 127))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
127
(eval ())
(push (@ 128))
(push '"#define ")
(push (cvalq #:modtoc:prefix-ftype-llm3))
(push (cvalq arg1))
(push '" ")
(push (cvalq arg2))
(mov '5 a4)
(jmp prin)
128
(eval ())
(call #:modtoc:terpri)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 126) a3)
125
(push a3)
(push a2)
(push (@ 129))
(push (& 4))
(mov '1 a4)
(jmp outchan)
129
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
126
(eval ())
(adjstk '1)
(bra 115)
120
(cabne a1 'dentry 130)
(mov (cvalq arg1) a1)
(call #:modtoc:make-trace-function)
(mov (cvalq arg1) a1)
(call #:modtoc:trace-entry-point)
(mov '9 a1)
(call #:modtoc:princ1)
(push (@ 131))
(push '"aRet = llrt_jmpd (<<lit>>,")
(mov (cvalq arg1) a1)
(call #:modtoc:get-real-ll-name)
(call #:modtoc:literal-index)
(push a1)
(push '",")
(mov '#:gell-resetfn:function-name a1)
(call #:modtoc:literal-index)
(push a1)
(push '",")
(mov (cvalq arg2) a1)
(cabne a1 'subr0 133)
(mov '#:gell-resetfn:function-0 a1)
(bra 132)
133
(cabne a1 'subr1 134)
(mov '#:gell-resetfn:function-1 a1)
(bra 132)
134
(cabne a1 'subr2 135)
(mov '#:gell-resetfn:function-2 a1)
(bra 132)
135
(cabne a1 'subr3 136)
(mov '#:gell-resetfn:function-3 a1)
(bra 132)
136
(cabne a1 'nsubr 137)
(mov '#:gell-resetfn:function-n a1)
(bra 132)
137
(cabne a1 'fsubr 138)
(mov '#:gell-resetfn:function-f a1)
(bra 132)
138
(cabne a1 'msubr 139)
(mov '#:gell-resetfn:function-1 a1)
(bra 132)
139
(cabne a1 'dmsubr 140)
(mov '#:gell-resetfn:function-1 a1)
(bra 132)
140
(mov a1 a3)
(mov '"bad typefn" a2)
(mov 'dentry a1)
(jcall error)
132
(call #:modtoc:literal-index)
(push a1)
(push '");")
(mov '7 a4)
(jmp prin)
131
(eval ())
(call #:modtoc:terpri)
(bra 115)
130
(cabne a1 'eval 142)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 143))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 144))
(push (cvalq arg1))
(mov '1 a4)
(jmp eval)
144
(eval ())
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
143
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bra 115)
142
(cabne a1 'local 145)
(mov nil a1)
(bra 115)
145
(cabne a1 'title 146)
(mov nil a1)
(bra 115)
146
(cabne a1 'endl 147)
(mov nil a1)
(bra 115)
147
(cabne a1 'end 148)
(mov nil a1)
(bra 115)
148
(cabne a1 'nop 149)
(mov nil a1)
(bra 115)
149
(cabne a1 'mov 150)
(mov (cvalq arg2) a2)
(mov (cvalq arg1) a1)
(call #:modtoc:mov-instruction)
(bra 115)
150
(cabne a1 'movnil 151)
(mov (cvalq arg1) a2)
(mov 'nil a1)
(call #:modtoc:mov-instruction)
(bra 115)
151
(cabne a1 'cabeq 152)
(push (@ 153))
(push (cvalq arg1))
(push '"==")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-ptr-and-branch)
153
(eval ())
(bra 115)
152
(cabne a1 'cabne 154)
(push (@ 155))
(push (cvalq arg1))
(push '"!=")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-ptr-and-branch)
155
(eval ())
(bra 115)
154
(cabne a1 'btlisp 156)
(push (@ 157))
(push (cvalq arg1))
(push 'bnumb)
(push 'econs)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-inside)
157
(eval ())
(bra 115)
156
(cabne a1 'bflisp 158)
(push (@ 159))
(push (cvalq arg1))
(push 'bnumb)
(push 'econs)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-outside)
159
(eval ())
(bra 115)
158
(cabne a1 'bra 160)
(push (@ 161))
(push '@)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
161
(eval ())
(mov '"" a2)
(call #:modtoc:goto-label)
(bra 115)
160
(cabne a1 'jmp 162)
(push (@ 163))
(push 'fvalq)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
163
(eval ())
(mov '"" a2)
(call #:modtoc:goto-label)
(bra 115)
162
(cabne a1 'bri 164)
(mov '"" a2)
(mov (cvalq arg1) a1)
(call #:modtoc:goto-label)
(bra 115)
164
(cabne a1 'brx 165)
(mov 'brx_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(push a1)
(push (cvalq arg1))
(push nil)
166
(bfcons (& 1) 167)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:modtoc:lab)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 166)
167
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(pop a1)
(jcall cons)
(mov (cvalq #:modtoc:list-brx) a2)
(jcall cons)
(mov a1 (cvalq #:modtoc:list-brx))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"[" a3)
(mov (& 0) a2)
(mov '"{aRet = (Ptr) (" a1)
(call #:modtoc:prin3)
(mov (cvalq arg2) a1)
(call #:modtoc:int)
(mov '"goto lRet;}" a2)
(mov '"]); " a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(adjstk '1)
(bra 115)
165
(cabne a1 'sobgez 168)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Fix aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fix)
(mov '" - 1;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((UFix) aux);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux >= 0) " a1)
(call #:modtoc:prin1)
(mov '"}" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(bra 115)
168
(cabne a1 'sobgtz 169)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Fix aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fix)
(mov '" - 1;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((UFix) aux);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux > 0) " a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"else " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) 0;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
169
(cabne a1 'stack 170)
(mov (cvalq arg1) a2)
(mov 'sp a1)
(call #:modtoc:mov-instruction)
(bra 115)
170
(cabne a1 'sstack 171)
(mov 'sp a2)
(mov (cvalq arg1) a1)
(call #:modtoc:mov-instruction)
(bra 115)
171
(cabne a1 'call 172)
(push (@ 173))
(push '@)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
173
(eval ())
(call #:modtoc:call-internal)
(bra 115)
172
(cabne a1 'calli 174)
(mov (cvalq arg1) a1)
(call #:modtoc:call-internal)
(bra 115)
174
(cabne a1 'jcall 175)
(cabne (cvalq arg1) (cvalq #:modtoc:current-name) 176)
(push (@ 178))
(push '@)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
178
(eval ())
(call #:modtoc:call-internal)
(bra 177)
176
(push (@ 179))
(push 'fvalq)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
179
(eval ())
(call #:modtoc:call-internal)
177
(call #:modtoc:instruction)
(bra 115)
175
(cabne a1 'return 180)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{aRet = (" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '"++)->Val; goto lRet;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
180
(cabne a1 'push 181)
(bfcons (cvalq arg1) 182)
(mov (cvalq arg1) a4)
(cabne (car a4) '& 182)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Ptr aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"(--" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '")->Val = aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
182
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(--" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '")->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
181
(cabne a1 'pop 184)
(bfcons (cvalq arg1) 185)
(mov (cvalq arg1) a4)
(cabne (car a4) '& 185)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Ptr aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '"++)->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
185
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '"++)->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
184
(cabne a1 'popr 187)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" =  (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opm)
(mov '"++)->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
187
(cabne a1 'adjstk 188)
(bfcons (cvalq arg1) 189)
(mov (cvalq arg1) a4)
(cabne (car a4) '& 189)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Fix aux; aux = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fix)
(mov '"; " a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
189
(mov '9 a1)
(call #:modtoc:princ1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov (cvalq arg1) a1)
(call #:modtoc:fixincr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
188
(cabne a1 'adjstkr 191)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg1) a1)
(call #:modtoc:opm)
(mov '" += " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:fix)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
191
(cabne a1 'movxsp 192)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opw)
(mov '" + " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:fix)
(mov '")->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
192
(cabne a1 'xspmov 193)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opr)
(mov '" + " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fixpos)
(mov '")->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
193
(cabne a1 'xtopst 194)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Ptr aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opr)
(mov '"->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov 'sp a1)
(call #:modtoc:opr)
(mov '"->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
194
(cabne a1 'topst 195)
(mov (cvalq arg1) a2)
(mov '(& 0) a1)
(call #:modtoc:mov-instruction)
(bra 115)
195
(cabne a1 'topstr 196)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
196
(cabne a1 'chkstk 197)
(push (@ 198))
(push 'sp)
(push '"<")
(push (cvalq arg1))
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-ptr-and-branch)
198
(eval ())
(bra 115)
197
(cabne a1 'btcons 199)
(push (@ 200))
(push (cvalq arg1))
(push '">=")
(push 'bcons)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-int-and-branch)
200
(eval ())
(bra 115)
199
(cabne a1 'bfcons 201)
(push (@ 202))
(push (cvalq arg1))
(push '"<")
(push 'bcons)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-int-and-branch)
202
(eval ())
(bra 115)
201
(cabne a1 'car 203)
(push (@ 204))
(push 'car)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
204
(eval ())
(mov (cvalq arg1) a2)
(call #:modtoc:mov-instruction)
(bra 115)
203
(cabne a1 'cdr 205)
(push (@ 206))
(push 'cdr)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
206
(eval ())
(mov (cvalq arg1) a2)
(call #:modtoc:mov-instruction)
(bra 115)
205
(cabne a1 'btnil 207)
(push (@ 208))
(push 'cabeq)
(push (cvalq arg1))
(push 'nil)
(push (cvalq arg2))
(mov '4 a4)
(jmp list)
208
(eval ())
(call #:modtoc:instruction)
(bra 115)
207
(cabne a1 'bfnil 209)
(push (@ 210))
(push 'cabne)
(push (cvalq arg1))
(push 'nil)
(push (cvalq arg2))
(mov '4 a4)
(jmp list)
210
(eval ())
(call #:modtoc:instruction)
(bra 115)
209
(cabne a1 'btsymb 211)
(push (@ 212))
(push (cvalq arg1))
(push 'bsymb)
(push 'bcons)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-inside)
212
(eval ())
(bra 115)
211
(cabne a1 'bfsymb 213)
(push (@ 214))
(push (cvalq arg1))
(push 'bsymb)
(push 'bcons)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-outside)
214
(eval ())
(bra 115)
213
(cabne a1 'btvar 215)
(push (@ 216))
(push (cvalq arg1))
(push 'bvar)
(push 'bcons)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-inside)
216
(eval ())
(bra 115)
215
(cabne a1 'bfvar 217)
(push (@ 218))
(push (cvalq arg1))
(push 'bvar)
(push 'bcons)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-outside)
218
(eval ())
(bra 115)
217
(cabne a1 'setbvar 219)
(mov 'bvar a2)
(mov (cvalq arg1) a1)
(call #:modtoc:mov-instruction)
(bra 115)
219
(cabne a1 'btfix 220)
(push (@ 221))
(push (cvalq arg1))
(push '"<")
(push 'bfloat)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-ptr-and-branch)
221
(eval ())
(bra 115)
220
(cabne a1 'bffix 222)
(push (@ 223))
(push (cvalq arg1))
(push '">=")
(push 'bfloat)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-ptr-and-branch)
223
(eval ())
(bra 115)
222
(cabne a1 'incr 224)
(push (@ 225))
(push (cvalq arg1))
(push '|+|)
(push '1)
(push (cvalq arg1))
(push (cvalq arg2))
(mov '5 a4)
(bra #:modtoc:fix-arith)
225
(eval ())
(bra 115)
224
(cabne a1 'decr 226)
(push (@ 227))
(push (cvalq arg1))
(push '|-|)
(push '1)
(push (cvalq arg1))
(push (cvalq arg2))
(mov '5 a4)
(bra #:modtoc:fix-arith)
227
(eval ())
(bra 115)
226
(cabne a1 'plus 228)
(mov ''0 a2)
(mov (cvalq arg1) a1)
(jcall equal)
(bfnil a1 229)
(push (@ 231))
(push (cvalq arg2))
(push '|+|)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 14))
(mov '5 a4)
(bra #:modtoc:fix-arith)
231
(eval ())
(bra 115)
229
(mov nil a1)
(bra 115)
228
(cabne a1 'diff 232)
(mov ''0 a2)
(mov (cvalq arg1) a1)
(jcall equal)
(bfnil a1 233)
(push (@ 235))
(push (cvalq arg2))
(push '|-|)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 14))
(mov '5 a4)
(bra #:modtoc:fix-arith)
235
(eval ())
(bra 115)
233
(mov nil a1)
(bra 115)
232
(cabne a1 'negate 236)
(push (@ 237))
(push '0)
(push '|-|)
(push (cvalq arg1))
(push (cvalq arg1))
(push (cvalq arg2))
(mov '5 a4)
(bra #:modtoc:fix-arith)
237
(eval ())
(bra 115)
236
(cabne a1 'times 238)
(push (@ 239))
(push (cvalq arg2))
(push '*)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 14))
(mov '5 a4)
(bra #:modtoc:fix-arith)
239
(eval ())
(bra 115)
238
(cabne a1 'quo 240)
(push (@ 241))
(push (cvalq arg2))
(push '/)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 14))
(mov '5 a4)
(bra #:modtoc:fix-arith)
241
(eval ())
(bra 115)
240
(cabne a1 'rem 242)
(push (@ 243))
(push (cvalq arg2))
(push '%)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 14))
(mov '5 a4)
(bra #:modtoc:fix-arith)
243
(eval ())
(bra 115)
242
(cabne a1 'cnbeq 244)
(push (@ 245))
(push 'cabeq)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(jmp list)
245
(eval ())
(call #:modtoc:instruction)
(bra 115)
244
(cabne a1 'cnbne 246)
(push (@ 247))
(push 'cabne)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(jmp list)
247
(eval ())
(call #:modtoc:instruction)
(bra 115)
246
(cabne a1 'cnble 248)
(push (@ 249))
(push (cvalq arg1))
(push '"<=")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-fix-and-branch)
249
(eval ())
(bra 115)
248
(cabne a1 'cnblt 250)
(push (@ 251))
(push (cvalq arg1))
(push '"<")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-fix-and-branch)
251
(eval ())
(bra 115)
250
(cabne a1 'cnbge 252)
(push (@ 253))
(push (cvalq arg1))
(push '">=")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-fix-and-branch)
253
(eval ())
(bra 115)
252
(cabne a1 'cnbgt 254)
(push (@ 255))
(push (cvalq arg1))
(push '">")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-fix-and-branch)
255
(eval ())
(bra 115)
254
(cabne a1 'land 256)
(push (@ 257))
(push (cvalq arg2))
(push '"&")
(push (cvalq arg1))
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:fix-logic)
257
(eval ())
(bra 115)
256
(cabne a1 'lor 258)
(push (@ 259))
(push (cvalq arg2))
(push '"|")
(push (cvalq arg1))
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:fix-logic)
259
(eval ())
(bra 115)
258
(cabne a1 'lxor 260)
(push (@ 261))
(push (cvalq arg2))
(push '"^")
(push (cvalq arg1))
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:fix-logic)
261
(eval ())
(bra 115)
260
(cabne a1 'lshift 262)
(bfcons (cvalq arg1) 263)
(mov (cvalq arg1) a4)
(cabne (car a4) 'quote 263)
(mov (cdr a4) a4)
(bffix (car a4) 263)
(mov (cvalq arg1) a4)
(mov (cdr a4) a4)
(cnblt (car a4) '0 265)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (UFix) (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:ufix)
(mov (cvalq arg1) a2)
(mov (cdr a2) a2)
(mov '");" a3)
(mov (car a2) a2)
(mov '" << " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(bra 115)
265
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (UFix) (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:ufix)
(mov (cvalq arg1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall abs)
(mov '");" a3)
(mov a1 a2)
(mov '" >> " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(bra 115)
263
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Fix aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fix)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux >= 0)" a1)
(call #:modtoc:prin1)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:ufix)
(mov '" << aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"else        aux = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:ufix)
(mov '" >> -aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((UFix) aux);}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
262
(cabne a1 'btnumb 267)
(push (@ 268))
(push (cvalq arg1))
(push 'bnumb)
(push 'bfloat)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-inside)
268
(eval ())
(bra 115)
267
(cabne a1 'bfnumb 269)
(push (@ 270))
(push (cvalq arg1))
(push 'bnumb)
(push 'bfloat)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-outside)
270
(eval ())
(bra 115)
269
(cabne a1 'btfloat 271)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if (llrt_floatp (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '") != 0) " a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '"" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(bra 115)
271
(cabne a1 'bffloat 272)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if (llrt_floatp (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '") == 0) " a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '"" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(bra 115)
272
(cabne a1 'fplus 273)
(mov (cvalq arg2) a3)
(mov '"fadd" a2)
(mov (cvalq arg1) a1)
(call #:modtoc:float-arith)
(bra 115)
273
(cabne a1 'fdiff 274)
(mov (cvalq arg2) a3)
(mov '"fsub" a2)
(mov (cvalq arg1) a1)
(call #:modtoc:float-arith)
(bra 115)
274
(cabne a1 'ftimes 275)
(mov (cvalq arg2) a3)
(mov '"fmul" a2)
(mov (cvalq arg1) a1)
(call #:modtoc:float-arith)
(bra 115)
275
(cabne a1 'fquo 276)
(mov (cvalq arg2) a3)
(mov '"fdiv" a2)
(mov (cvalq arg1) a1)
(call #:modtoc:float-arith)
(bra 115)
276
(cabne a1 'cfbeq 277)
(push (@ 278))
(push (cvalq arg1))
(push '"feq")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-float-and-branch)
278
(eval ())
(bra 115)
277
(cabne a1 'cfbne 279)
(push (@ 280))
(push (cvalq arg1))
(push '"fne")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-float-and-branch)
280
(eval ())
(bra 115)
279
(cabne a1 'cfblt 281)
(push (@ 282))
(push (cvalq arg1))
(push '"flt")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-float-and-branch)
282
(eval ())
(bra 115)
281
(cabne a1 'cfble 283)
(push (@ 284))
(push (cvalq arg1))
(push '"fle")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-float-and-branch)
284
(eval ())
(bra 115)
283
(cabne a1 'cfbgt 285)
(push (@ 286))
(push (cvalq arg1))
(push '"fgt")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-float-and-branch)
286
(eval ())
(bra 115)
285
(cabne a1 'cfbge 287)
(push (@ 288))
(push (cvalq arg1))
(push '"fge")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-float-and-branch)
288
(eval ())
(bra 115)
287
(cabne a1 'cvftoa 289)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 9) a1)
(call #:modtoc:opw)
(mov '" = llrt_cvftoa (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
289
(cabne a1 'cvatof 290)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 11))
(push (& 11))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '" =  llrt_cvatof (" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '4)
(bra 115)
290
(cabne a1 'float 291)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = llrt_float (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
291
(cabne a1 'fix 292)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = llrt_fix (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
292
(cabne a1 'sin 293)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"sin" a1)
(call #:modtoc:float-funct-2)
(bra 115)
293
(cabne a1 'cos 294)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"cos" a1)
(call #:modtoc:float-funct-2)
(bra 115)
294
(cabne a1 'asin 295)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"asin" a1)
(call #:modtoc:float-funct-2)
(bra 115)
295
(cabne a1 'acos 296)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"acos" a1)
(call #:modtoc:float-funct-2)
(bra 115)
296
(cabne a1 'atan 297)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"atan" a1)
(call #:modtoc:float-funct-2)
(bra 115)
297
(cabne a1 'exp 298)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"exp" a1)
(call #:modtoc:float-funct-2)
(bra 115)
298
(cabne a1 'log 299)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"log" a1)
(call #:modtoc:float-funct-2)
(bra 115)
299
(cabne a1 'log10 300)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"log10" a1)
(call #:modtoc:float-funct-2)
(bra 115)
300
(cabne a1 'sqrt 301)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov '"sqrt" a1)
(call #:modtoc:float-funct-2)
(bra 115)
301
(cabne a1 'power 302)
(push (@ 303))
(push '"pow")
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:float-funct-3)
303
(eval ())
(bra 115)
302
(cabne a1 'ecomp 304)
(push (cvalq arg1))
(push (cvalq arg2))
(mov (& 15) a2)
(mov '5 a1)
(jcall nth)
(push (& 11))
(push (& 11))
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if (((UFix) " a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:opr)
(mov '") < ((UFix) " a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '"))" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 2) a1)
(call #:modtoc:goto-label-at)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"else if (((UFix) " a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:opr)
(mov '") > ((UFix) " a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '"))" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 0) a1)
(call #:modtoc:goto-label-at)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"else" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 1) a1)
(call #:modtoc:goto-label-at)
(adjstk '5)
(bra 115)
304
(cabne a1 'eplus 305)
(push (cvalq arg1))
(push (cvalq arg2))
(mov (& 15) a2)
(mov '5 a1)
(jcall nth)
(push (& 11))
(push (& 11))
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Adr aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:opr)
(mov '" + (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '" + (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (aux >> HIGHTSHIFT);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (aux & LOWMASK);}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '5)
(bra 115)
305
(cabne a1 'etimes 306)
(push (cvalq arg1))
(push (cvalq arg2))
(mov (& 15) a2)
(mov '5 a1)
(jcall nth)
(push a1)
(mov (& 16) a2)
(mov '6 a1)
(jcall nth)
(push (& 12))
(push (& 12))
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Adr aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 5) a1)
(call #:modtoc:opr)
(mov '" * (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:opr)
(mov '" + (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '" + (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 3) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (aux >> HIGHTSHIFT);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (aux & LOWMASK);}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '6)
(bra 115)
306
(cabne a1 'edivide 307)
(push (cvalq arg1))
(push (cvalq arg2))
(mov (& 15) a2)
(mov '5 a1)
(jcall nth)
(push (& 11))
(push (& 11))
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Adr aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (aux << HIGHTSHIFT) | ((Adr)" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (aux % ((Adr) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '"));" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = aux / ((Adr) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((UFix) aux);}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '5)
(bra 115)
307
(cabne a1 'btvect 308)
(push (@ 309))
(push (cvalq arg1))
(push 'bvect)
(push 'bstrg)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-inside)
309
(eval ())
(bra 115)
308
(cabne a1 'bfvect 310)
(push (@ 311))
(push (cvalq arg1))
(push 'bvect)
(push 'bstrg)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-outside)
311
(eval ())
(bra 115)
310
(cabne a1 'hpxmov 312)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 9) a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2 + " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:fixpos)
(mov '")->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
312
(cabne a1 'hpmovx 313)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"->Val + 2 + " a1)
(call #:modtoc:prin1)
(mov (& 9) a1)
(call #:modtoc:fixpos)
(mov '")->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
313
(cabne a1 'hpmovm 314)
(push (cvalq arg1))
(push (cvalq arg2))
(mov (& 15) a2)
(mov '5 a1)
(jcall nth)
(push (& 11))
(push (& 11))
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Ptr r1, r2; register int r3;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 = (" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 = (" a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r3 = " a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov ''0 a2)
(mov (& 2) a1)
(jcall equal)
(btnil a1 315)
(mov ''0 a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 315)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"while (r3--) (r2++)->Val = (r1++)->Val;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 316)
315
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if ((r1 == r2) && (" a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '" < " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:fixpos)
(mov '")) {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 += r3 + " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 += r3 + " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"while (r3--) (--r2)->Val = (--r1)->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '" } else {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 += " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 += " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"while (r3--) (r2++)->Val = (r1++)->Val;}}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
316
(adjstk '5)
(bra 115)
314
(cabne a1 'btstrg 317)
(push (@ 318))
(push (cvalq arg1))
(push 'bstrg)
(push 'bsymb)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-inside)
318
(eval ())
(bra 115)
317
(cabne a1 'bfstrg 319)
(push (@ 320))
(push (cvalq arg1))
(push 'bstrg)
(push 'bsymb)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:cmp-type-outside)
320
(eval ())
(bra 115)
319
(cabne a1 'hbxmov 321)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 9) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((unsigned char) *(((char *) (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2)) + " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:fixpos)
(mov '"));" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
321
(cabne a1 'hbmovx 322)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"*((char *) (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"->Val + 2) + " a1)
(call #:modtoc:prin1)
(mov (& 9) a1)
(call #:modtoc:fixpos)
(mov '") = (char) " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
322
(cabne a1 'hbmovm 323)
(push (cvalq arg1))
(push (cvalq arg2))
(mov (& 15) a2)
(mov '5 a1)
(jcall nth)
(push (& 11))
(push (& 11))
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register char *r1, *r2; register int r3;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 = (char *) (" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 = (char *) (" a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r3 = " a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov ''0 a2)
(mov (& 2) a1)
(jcall equal)
(btnil a1 324)
(mov ''0 a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 324)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" while (r3--) *r2++ = *r1++;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 325)
324
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if ((r1 == r2) && (" a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '" < " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:fixpos)
(mov '")) {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 += r3 + " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 += r3 + " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"while (r3--) *--r2 = *--r1;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '" } else {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 += " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 += " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"while (r3--) *r2++ = *r1++;}}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
325
(adjstk '5)
(bra 115)
323
(cabne a1 'hbteq 326)
(push (cvalq arg1))
(push (cvalq arg2))
(mov (& 15) a2)
(mov '5 a1)
(jcall nth)
(push a1)
(mov (& 16) a2)
(mov '6 a1)
(jcall nth)
(push a1)
(mov 'hbteq_ a1)
(call #:modtoc:gen-new-symbol)
(push (& 13))
(push (& 13))
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register char *r1, *r2; register int r3;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 = (char *) (" a1)
(call #:modtoc:prin1)
(mov (& 5) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov ''0 a2)
(mov (& 2) a1)
(jcall equal)
(bfnil a1 328)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 += " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
328
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 = (char *) (" a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov ''0 a2)
(mov (& 4) a1)
(jcall equal)
(bfnil a1 330)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 += " a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
330
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r3 = " a1)
(call #:modtoc:prin1)
(mov (& 6) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(push (@ 331))
(push '"if (r3 > 0) while (r3--) if (*r2++ != *r1++) ")
(push '"goto ")
(push (& 3))
(push '";")
(mov '4 a4)
(jmp prin)
331
(eval ())
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"}" a2)
(mov (& 3) a1)
(call #:modtoc:goto-label-at)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '":" a2)
(mov (& 0) a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(adjstk '7)
(bra 115)
326
(cabne a1 'movbm 332)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 11))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register char *r1, *r2; register int r3;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r1 = (char *) " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r2 = (char *) (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"r3 = " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '" + 1;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (r3 > 0) while (r3--) *r2++ = *r1++;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '3)
(bra 115)
332
(cabne a1 'hgsize 333)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"->Val + 1)->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
333
(cabne a1 'hssize 334)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"->Val + 1)->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
334
(cabne a1 'hgobj 335)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"->Val)->Val;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
335
(cabne a1 'hsobj 336)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"->Val)->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
336
(cabne a1 'upperc 337)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fixpos)
(mov '" - 32);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
337
(cabne a1 'lowerc 338)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fixpos)
(mov '" + 32);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
338
(cabne a1 'calleq 339)
(mov '"==" a1)
(call #:modtoc:call-ptr-test-direct)
(bra 115)
339
(cabne a1 'callneq 340)
(mov '"!=" a1)
(call #:modtoc:call-ptr-test-direct)
(bra 115)
340
(cabne a1 'calleqn 341)
(mov '"==" a1)
(call #:modtoc:call-fix-test-direct)
(bra 115)
341
(cabne a1 'callneqn 342)
(mov '"!=" a1)
(call #:modtoc:call-fix-test-direct)
(bra 115)
342
(cabne a1 'calllt 343)
(mov '"<" a1)
(call #:modtoc:call-fix-test-direct)
(bra 115)
343
(cabne a1 'callle 344)
(mov '"<=" a1)
(call #:modtoc:call-fix-test-direct)
(bra 115)
344
(cabne a1 'callgt 345)
(mov '">" a1)
(call #:modtoc:call-fix-test-direct)
(bra 115)
345
(cabne a1 'callge 346)
(mov '">=" a1)
(call #:modtoc:call-fix-test-direct)
(bra 115)
346
(cabne a1 'callfixp 347)
(mov 'bnumb a2)
(mov ''0 a1)
(call #:modtoc:call-type-test-direct)
(bra 115)
347
(cabne a1 'callvectorp 348)
(mov 'bstrg a2)
(mov 'bvect a1)
(call #:modtoc:call-type-test-direct)
(bra 115)
348
(cabne a1 'callstringp 349)
(mov 'bsymb a2)
(mov 'bstrg a1)
(call #:modtoc:call-type-test-direct)
(bra 115)
349
(cabne a1 'callconsp 350)
(mov 'econs a2)
(mov 'bcons a1)
(call #:modtoc:call-type-test-direct)
(bra 115)
350
(cabne a1 'callerror 351)
(mov '"llrt_call_error" a1)
(call #:modtoc:call-rt-direct-0)
(bra 115)
351
(cabne a1 'calllength 352)
(mov '"llrt_call_length" a1)
(call #:modtoc:call-rt-direct-1)
(bra 115)
352
(cabne a1 'callnreverse 353)
(mov '"llrt_call_nreverse" a1)
(call #:modtoc:call-rt-direct-1)
(bra 115)
353
(cabne a1 'callmemq 354)
(mov '"llrt_call_memq" a1)
(call #:modtoc:call-rt-direct-2)
(bra 115)
354
(cabne a1 'callassq 355)
(mov '"llrt_call_assq" a1)
(call #:modtoc:call-rt-direct-2)
(bra 115)
355
(cabne a1 'callcassq 356)
(mov '"llrt_call_cassq" a1)
(call #:modtoc:call-rt-direct-2)
(bra 115)
356
(cabne a1 'callrassq 357)
(mov '"llrt_call_rassq" a1)
(call #:modtoc:call-rt-direct-2)
(bra 115)
357
(cabne a1 'nlist 358)
(mov 'nlist_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov 'nlist_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(push (@ 359))
(push (& 2))
(push a1)
(push (cvalq #:modtoc:local-labels-module))
(mov '3 a4)
(jmp mcons)
359
(eval ())
(push (cvalq #:modtoc:local-labels-module))
(mov a1 (cvalq #:modtoc:local-labels-module))
(push '1)
(push '(#:modtoc:local-labels-module))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '(mov nil a1) a1)
(call #:modtoc:instruction)
(push (@ 360))
(push 'bra)
(push (& 9))
(mov '2 a4)
(jmp list)
360
(eval ())
(call #:modtoc:instruction)
(mov (& 8) a1)
(call #:modtoc:instruction)
(mov '(pop a2) a1)
(call #:modtoc:instruction)
(mov '(cons a2 a1) a1)
(call #:modtoc:instruction)
(mov (& 7) a1)
(call #:modtoc:instruction)
(push (@ 361))
(push 'sobgez)
(push 'a4)
(push (& 11))
(mov '3 a4)
(jmp list)
361
(eval ())
(call #:modtoc:instruction)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:modtoc:local-labels-module))
(adjstk '9)
(bra 115)
358
(cabne a1 'icallg 362)
(mov (& 9) a3)
(mov (cvalq arg2) a2)
(mov (cvalq arg1) a1)
(call #:modtoc:callg-generate)
(bra 115)
362
(cabne a1 'listext 363)
(push (cvalq arg1))
(push nil)
364
(bfcons (& 1) 365)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 366))
(push (cvalq #:modtoc:prefix-external-llm3))
(push (& 2))
(mov '2 a4)
(jmp catenate)
366
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 364)
365
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push (cvalq arg1))
(push a1)
367
(bfcons (& 1) 368)
(bfcons (& 0) 368)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(mov (& 0) a3)
(mov (cdr a3) (& 0))
(push (car a4))
(push (car a3))
(mov (& 0) a2)
(mov (& 1) a1)
(jcall cons)
(mov (cvalq #:modtoc:llm3-functions) a2)
(jcall cons)
(mov a1 (cvalq #:modtoc:llm3-functions))
(adjstk '2)
(bra 367)
368
(mov nil a1)
(adjstk '2)
(bra 115)
363
(cabne a1 'xrefi 369)
(push (@ 370))
(mov '0 a4)
(jmp outchan)
370
(eval ())
(push a1)
(push (@ 371))
(push dlink)
(push prot)
(stack dlink)
(push (@ 373))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
373
(eval ())
(mov (cvalq #:modtoc:register-attribute-list) a2)
(mov (cvalq arg2) a1)
(jcall assq)
(btnil a1 374)
(push (@ 376))
(push '"extern Ptr ")
(push (cvalq #:modtoc:prefix-impure-llm3))
(push (cvalq arg2))
(push '";")
(mov '4 a4)
(jmp print)
376
(eval ())
(bra 375)
374
(mov '"extern Ptr " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
375
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 372) a3)
371
(push a3)
(push a2)
(push (@ 377))
(push (& 4))
(mov '1 a4)
(jmp outchan)
377
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
372
(eval ())
(adjstk '1)
(bra 115)
369
(cabne a1 'xrefp 378)
(mov nil a1)
(bra 115)
378
(cabne a1 'xdefi 379)
(mov nil a1)
(bra 115)
379
(cabne a1 'xdefp 380)
(mov nil a1)
(bra 115)
380
(cabne a1 'label 381)
(mov nil a1)
(bra 115)
381
(cabne a1 'makfnt 382)
(mov (cvalq arg1) a1)
(call #:modtoc:internal-variable)
(push nil)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{<<ret>> llrt_inisymb (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '", (Ptr) " a1)
(call #:modtoc:prin1)
(mov (& 11) a1)
(call #:modtoc:strg)
(mov '", " a1)
(call #:modtoc:prin1)
(push (@ 383))
(push '@)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
383
(eval ())
(call #:modtoc:opr)
(push (@ 384))
(push '", (Ptr) &")
(push (& 2))
(push '", (Ptr) ")
(push (cvalq #:modtoc:prefix-ftype-llm3))
(push (cvalq arg1))
(push '");}")
(mov '6 a4)
(jmp prin)
384
(eval ())
(call #:modtoc:terpri)
(mov (& 11) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov nil a1)
(jcall symbol)
(mov a1 (& 1))
(mov (cvalq #:modtoc:llm3-ll-name) a2)
(mov (cvalq arg1) a1)
(jcall assq)
(btnil a1 385)
(push (@ 387))
(push '"MAKFNT: this name already exists: ")
(push (cvalq arg1))
(mov '2 a4)
(bra #:modtoc:print-error)
387
(eval ())
(bra 386)
385
(mov (cvalq #:modtoc:llm3-ll-name) a2)
(mov (& 1) a1)
(jcall rassq)
(btnil a1 389)
(mov (& 1) a2)
(mov 'gell a1)
(jcall symbol)
(mov a1 (& 1))
(push (@ 390))
(push '"MAKFNT: another name for: ")
(push a1)
(mov '2 a4)
(bra #:modtoc:print-error)
390
(eval ())
389
(mov (& 1) a2)
(mov (cvalq arg1) a1)
(jcall cons)
(mov (cvalq #:modtoc:llm3-ll-name) a2)
(jcall cons)
(mov a1 (cvalq #:modtoc:llm3-ll-name))
386
(call #:modtoc:no-register-use)
(adjstk '2)
(bra 115)
382
(cabne a1 'makcst 391)
(mov (cvalq arg1) a1)
(call #:modtoc:internal-variable)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{<<ret>> llrt_inicst (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '", (Ptr) " a1)
(call #:modtoc:prin1)
(mov (& 10) a1)
(call #:modtoc:strg)
(mov '");}" a3)
(mov (& 0) a2)
(mov '", (Ptr) &" a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(adjstk '1)
(call #:modtoc:no-register-use)
(bra 115)
391
(cabne a1 'intest 392)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if (" a1)
(call #:modtoc:prin1)
(mov 'itcount a1)
(call #:modtoc:opr)
(mov '"{<<ret>> llrt_ithard ();}" a2)
(mov '" != 0) " a1)
(call #:modtoc:prin2)
(call #:modtoc:terpri)
(bra 115)
392
(cabne a1 'ifeq 393)
(mov nil a1)
(bra 115)
393
(cabne a1 'endc 394)
(mov nil a1)
(bra 115)
394
(cabne a1 'pure 395)
(mov nil a1)
(bra 115)
395
(cabne a1 'impure 396)
(mov nil a1)
(bra 115)
396
(cabne a1 'ladr 397)
(push (@ 398))
(mov '0 a4)
(jmp outchan)
398
(eval ())
(push a1)
(push (@ 399))
(push dlink)
(push prot)
(stack dlink)
(push (@ 401))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
401
(eval ())
(push (@ 402))
(push '"extern Ptr ")
(push (cvalq #:modtoc:prefix-impure-llm3))
(push (cvalq arg1))
(push '" = ")
(push (cvalq arg2))
(push '";")
(mov '6 a4)
(jmp print)
402
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 400) a3)
399
(push a3)
(push a2)
(push (@ 403))
(push (& 4))
(mov '1 a4)
(jmp outchan)
403
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
400
(eval ())
(adjstk '1)
(bra 115)
397
(cabne a1 'gftype 404)
(push (@ 405))
(push 'pftype)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
405
(eval ())
(mov a1 (cvalq arg1))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register UFix aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (UFix) (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
404
(cabne a1 'sftype 406)
(push (@ 407))
(push 'pftype)
(push (cvalq arg2))
(mov '2 a4)
(jmp list)
407
(eval ())
(mov a1 (cvalq arg2))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register int aux1, aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux1 = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:int)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux1 = aux1 & HIGHTMASK;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux2 = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:int)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux1 = aux1 | aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '" = (Ptr) aux1;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
406
(cabne a1 'gptype 408)
(push (@ 409))
(push 'pftype)
(push (cvalq arg1))
(mov '2 a4)
(jmp list)
409
(eval ())
(mov a1 (cvalq arg1))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register int aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:int)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = aux >> HIGHTSHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
408
(cabne a1 'sptype 410)
(push (@ 411))
(push 'pftype)
(push (cvalq arg2))
(mov '2 a4)
(jmp list)
411
(eval ())
(mov a1 (cvalq arg2))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register int aux1, aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux1 = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:int)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux2 = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:int)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux2 = aux2 << HIGHTSHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux1 = aux1 | aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '" = (Ptr) aux1;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
410
(cabne a1 'cons 412)
(btnil (cvalq #:modtoc:open-cons-p) 413)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Ptr aux; aux = " a1)
(call #:modtoc:prin1)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux == " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '"{<<ret>> llrt_gccons(); aux = " a2)
(mov '") " a1)
(call #:modtoc:prin2)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '";}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '" = (aux + 1)->Val; aux->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"(aux + 1)->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"; " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
413
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = llrt_cons (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
412
(cabne a1 'xcons 415)
(btnil (cvalq #:modtoc:open-cons-p) 416)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Ptr aux; aux = " a1)
(call #:modtoc:prin1)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux == " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '"{<<ret>> llrt_gccons(); aux = " a2)
(mov '") " a1)
(call #:modtoc:prin2)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '";}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '" = (aux + 1)->Val; aux->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"(aux + 1)->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"; " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
416
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = llrt_cons (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
415
(cabne a1 'ncons 418)
(btnil (cvalq #:modtoc:open-cons-p) 419)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Ptr aux; aux = " a1)
(call #:modtoc:prin1)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux == " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '"{<<ret>> llrt_gccons(); aux = " a2)
(mov '") " a1)
(call #:modtoc:prin2)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '";}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov 'fcons a1)
(call #:modtoc:opr)
(mov '" = (aux + 1)->Val; aux->Val = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"(aux + 1)->Val = " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '"; " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
419
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = llrt_cons (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
418
(cabne a1 'stinvsbl 421)
(mov (cvalq arg1) a1)
(call #:modtoc:mactabin)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov 'btbin a1)
(call #:modtoc:opr)
(mov '"[aux] |= mask;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
421
(cabne a1 'clinvsbl 422)
(mov (cvalq arg1) a1)
(call #:modtoc:mactabin)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov 'btbin a1)
(call #:modtoc:opr)
(mov '"[aux] &= ~mask;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
422
(cabne a1 'btinvsbl 423)
(mov (cvalq arg1) a1)
(call #:modtoc:mactabin)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov 'btbin a1)
(call #:modtoc:opr)
(mov '"[aux] & mask;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux != 0)" a1)
(call #:modtoc:prin1)
(mov '"}" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(bra 115)
423
(cabne a1 'bfinvsbl 424)
(mov (cvalq arg1) a1)
(call #:modtoc:mactabin)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov 'btbin a1)
(call #:modtoc:opr)
(mov '"[aux] & mask;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux == 0)" a1)
(call #:modtoc:prin1)
(mov '"}" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(bra 115)
424
(cabne a1 'stmark 425)
(mov (cvalq arg1) a1)
(call #:modtoc:mactabgc)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov 'btbgc a1)
(call #:modtoc:opr)
(mov '"[aux] |= mask;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
425
(cabne a1 'btmark 426)
(mov (cvalq arg1) a1)
(call #:modtoc:mactabgc)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov 'btbgc a1)
(call #:modtoc:opr)
(mov '"[aux] & mask;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux != 0)" a1)
(call #:modtoc:prin1)
(mov '"}" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(bra 115)
426
(cabne a1 'bfmark 427)
(mov (cvalq arg1) a1)
(call #:modtoc:mactabgc)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = " a1)
(call #:modtoc:prin1)
(mov 'btbgc a1)
(call #:modtoc:opr)
(mov '"[aux] & mask;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux == 0)" a1)
(call #:modtoc:prin1)
(mov '"}" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(bra 115)
427
(cabne a1 'tcmark 428)
(mov (cvalq arg1) a1)
(call #:modtoc:mactabgc)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (" a1)
(call #:modtoc:prin1)
(mov 'btbgc a1)
(call #:modtoc:opr)
(mov '"[aux] & mask) {" a1)
(call #:modtoc:prin1)
(mov 'btbgc a1)
(call #:modtoc:opr)
(mov '"[aux] &= ~mask;" a1)
(call #:modtoc:prin1)
(mov '"}}" a2)
(mov (cvalq arg2) a1)
(call #:modtoc:goto-label-at)
(bra 115)
428
(cabne a1 'convtok 429)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 9) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (((Adr) " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '" - (Adr) " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '") >> 10);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
429
(cabne a1 'incrink 430)
(mov (cvalq arg2) a2)
(mov (cvalq arg1) a1)
(call #:modtoc:incrink)
(bra 115)
430
(cabne a1 'swpcons 431)
(push (@ 432))
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 12))
(push (& 12))
(mov '4 a4)
(bra #:modtoc:swpcons)
432
(eval ())
(bra 115)
431
(cabne a1 'gcmark 433)
(call #:modtoc:gcmark)
(bra 115)
433
(cabne a1 'gcstart 434)
(mov nil a1)
(bra 115)
434
(cabne a1 'gcstop 435)
(mov nil a1)
(bra 115)
435
(cabne a1 'sfcons 436)
(mov 'fcons a2)
(mov (cvalq arg1) a1)
(call #:modtoc:mov-instruction)
(bra 115)
436
(cabne a1 'gfcons 437)
(mov (cvalq arg1) a2)
(mov 'fcons a1)
(call #:modtoc:mov-instruction)
(bra 115)
437
(cabne a1 'nxsymb 438)
(push (@ 439))
(push (cvalq arg1))
(push '8)
(push 'bcons)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:next-chunk)
439
(eval ())
(bra 115)
438
(cabne a1 'nxnumb 440)
(push (@ 441))
(push (cvalq arg1))
(push '1)
(push 'bfloat)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:next-chunk)
441
(eval ())
(bra 115)
440
(cabne a1 'nxfloat 442)
(push (@ 443))
(push (cvalq arg1))
(push '2)
(push 'bvect)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:next-chunk)
443
(eval ())
(bra 115)
442
(cabne a1 'nxvect 444)
(push (@ 445))
(push (cvalq arg1))
(push '2)
(push 'bstrg)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:next-chunk)
445
(eval ())
(bra 115)
444
(cabne a1 'nxstrg 446)
(push (@ 447))
(push (cvalq arg1))
(push '2)
(push 'bsymb)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:next-chunk)
447
(eval ())
(bra 115)
446
(cabne a1 'nxcons 448)
(push (@ 449))
(push (cvalq arg1))
(push '2)
(push 'econs)
(push (cvalq arg2))
(mov '4 a4)
(bra #:modtoc:next-chunk)
449
(eval ())
(bra 115)
448
(cabne a1 'chblt 450)
(push (@ 451))
(push (cvalq arg1))
(push '"<")
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:cmp-ptr-and-branch)
451
(eval ())
(bra 115)
450
(cabne a1 'nxhb 452)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opm)
(mov '" += 3 + ((" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fixpos)
(mov '") / sizeof(Ptr));" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
452
(cabne a1 'nxhp 453)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '" + 2 + " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fixpos)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
453
(cabne a1 'nxhf 454)
(mov nil a1)
(bra 115)
454
(cabne a1 'nxhs 455)
(mov nil a1)
(bra 115)
455
(cabne a1 'hblt 456)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 11))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Table src, dst, fin;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"src = (Table) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"dst = (Table) " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"fin = (Table) " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"while (src != fin) *dst++ = *src++;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '3)
(bra 115)
456
(cabne a1 'ttyin 457)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) llrt_ttyin();" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
457
(cabne a1 'ttyis 458)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register int aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = llrt_ttys(llrt_charttys);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = *llrt_charttys;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
458
(cabne a1 'ttyinstr 459)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) llrt_ttyinstr(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2,(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"->Val + 1)->Val);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
459
(cabne a1 'ttymsg 460)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"llrt_ttyout(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fixpos)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:strg)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
460
(cabne a1 'ttycrlf 461)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"llrt_ttyout(2, ""\n\r"");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
461
(cabne a1 'ttystrg 462)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"llrt_ttyout(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fixpos)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
462
(cabne a1 'infile 463)
(push (@ 464))
(push 'llrt_infile)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:file-funct)
464
(eval ())
(bra 115)
463
(cabne a1 'oufile 465)
(push (@ 466))
(push 'llrt_oufile)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:file-funct)
466
(eval ())
(bra 115)
465
(cabne a1 'apfile 467)
(push (@ 468))
(push 'llrt_apfile)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:file-funct)
468
(eval ())
(bra 115)
467
(cabne a1 'infileb 469)
(push (@ 470))
(push 'llrt_infile)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:file-funct)
470
(eval ())
(bra 115)
469
(cabne a1 'oufileb 471)
(push (@ 472))
(push 'llrt_oufile)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:file-funct)
472
(eval ())
(bra 115)
471
(cabne a1 'apfileb 473)
(push (@ 474))
(push 'llrt_apfile)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:file-funct)
474
(eval ())
(bra 115)
473
(cabne a1 'inbf 475)
(push (@ 476))
(push 'llrt_inbf)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(push (& 13))
(mov '5 a4)
(bra #:modtoc:io-funct)
476
(eval ())
(bra 115)
475
(cabne a1 'inbfb 477)
(push (@ 478))
(push 'llrt_inbfb)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(push (& 13))
(mov '5 a4)
(bra #:modtoc:io-funct)
478
(eval ())
(bra 115)
477
(cabne a1 'outf 479)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 8) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) llrt_outf(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (& 9) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
479
(cabne a1 'outfl 480)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 8) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) llrt_outfl(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (& 9) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
480
(cabne a1 'outflb 481)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 8) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) llrt_outfl(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (& 9) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
481
(cabne a1 'fclos 482)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) llrt_fclos(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
482
(cabne a1 'fdele 483)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov 'llrt_fdele a1)
(call #:modtoc:system-call-1-cc)
(bra 115)
483
(cabne a1 'frena 484)
(push (@ 485))
(push 'llrt_frena)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:system-call-2-cc)
485
(eval ())
(bra 115)
484
(cabne a1 'fcopy 486)
(push (@ 487))
(push 'llrt_fcopy)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:system-call-2-cc)
487
(eval ())
(bra 115)
486
(cabne a1 'fprobe 488)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov 'llrt_fprobe a1)
(call #:modtoc:system-call-1-cc)
(bra 115)
488
(cabne a1 'mkdir 489)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov 'llrt_mkdir a1)
(call #:modtoc:system-call-1-cc)
(bra 115)
489
(cabne a1 'rmdir 490)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov 'llrt_rmdir a1)
(call #:modtoc:system-call-1-cc)
(bra 115)
490
(cabne a1 'corsav 491)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov 'llrt_corsav a1)
(call #:modtoc:system-call-1-cc)
(call #:modtoc:no-register-use)
(bra 115)
491
(cabne a1 'corest 492)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov 'llrt_corest a1)
(call #:modtoc:system-call-1-cc)
(call #:modtoc:no-register-use)
(bra 115)
492
(cabne a1 'cline 493)
(mov (cvalq arg1) a2)
(mov 'llrt_cline a1)
(call #:modtoc:system-call-1)
(bra 115)
493
(cabne a1 'date 494)
(mov (cvalq arg1) a2)
(mov 'llrt_c_date a1)
(call #:modtoc:system-call-1)
(bra 115)
494
(cabne a1 'getenvrn 495)
(push (@ 496))
(push 'llrt_c_getenv)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 13))
(mov '4 a4)
(bra #:modtoc:system-call-2-cc)
496
(eval ())
(bra 115)
495
(cabne a1 'getglobal 497)
(mov (cvalq arg2) a3)
(mov (cvalq arg1) a2)
(mov 'llrt_getgloba a1)
(call #:modtoc:system-call-1-cc)
(bra 115)
497
(cabne a1 'callg 498)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (cvalq arg2) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) llrt_callg(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(call #:modtoc:no-register-use)
(bra 115)
498
(cabne a1 'runtime 499)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = llrt_runtime();" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
499
(cabne a1 'sleep 500)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"llrt_sleep (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
500
(cabne a1 'setalarm 501)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opw)
(mov '" = llrt_setalarm (" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
501
(cabne a1 'adrhl 502)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 11))
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((Adr) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '" >> HIGHTSHIFT);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((Adr) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '" & LOWMASK);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '3)
(bra 115)
502
(cabne a1 'hladr 503)
(push (cvalq arg1))
(push (cvalq arg2))
(push (& 11))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Ptr aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '" aux = (Ptr) (((Adr) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '" << HIGHTSHIFT) + (Adr) " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '" aux = (Ptr) ((long) aux | LLADRBIAS);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '" = aux;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '3)
(bra 115)
503
(cabne a1 'addadr 504)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register int aux0, aux1, aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (int) ((UFix) " a1)
(call #:modtoc:prin1)
(mov 'a3 a1)
(call #:modtoc:opr)
(mov '"); aux1 = aux0 << HIGHTSHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (int) ((UFix) " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '"); aux1 = aux0 + aux1;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (int) ((UFix) " a1)
(call #:modtoc:prin1)
(mov 'a4 a1)
(call #:modtoc:opr)
(mov '"); aux2 = aux0 << HIGHTSHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (int) ((UFix) " a1)
(call #:modtoc:prin1)
(mov 'a2 a1)
(call #:modtoc:opr)
(mov '"); aux2 = aux0 + aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux1 = aux1 + aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (aux1 >> HIGHTSHIFT) & LOWMASK; " a1)
(call #:modtoc:prin1)
(mov 'a3 a1)
(call #:modtoc:opw)
(mov '" = (Ptr) aux0;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = aux1 & LOWMASK; " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opw)
(mov '" = (Ptr) aux0;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
504
(cabne a1 'subadr 505)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register int aux0, aux1, aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (int) ((UFix) " a1)
(call #:modtoc:prin1)
(mov 'a3 a1)
(call #:modtoc:opr)
(mov '"); aux1 = aux0 << HIGHTSHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (int) ((UFix) " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '"); aux1 = aux0 + aux1;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (int) ((UFix) " a1)
(call #:modtoc:prin1)
(mov 'a4 a1)
(call #:modtoc:opr)
(mov '"); aux2 = aux0 << HIGHTSHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (int) ((UFix) " a1)
(call #:modtoc:prin1)
(mov 'a2 a1)
(call #:modtoc:opr)
(mov '"); aux2 = aux0 + aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux1 = aux1 - aux2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = (aux1 >> HIGHTSHIFT) & LOWMASK; " a1)
(call #:modtoc:prin1)
(mov 'a3 a1)
(call #:modtoc:opw)
(mov '" = (Ptr) aux0;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux0 = aux1 & LOWMASK; " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opw)
(mov '" = (Ptr) aux0;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
505
(cabne a1 'memset 506)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Fix *adr;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"adr = (Fix *) " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"*adr = " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:fix)
(mov '";}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
506
(cabne a1 'memget 507)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Fix *adr;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"adr = (Fix *) " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (cvalq arg2) a1)
(call #:modtoc:opm)
(mov '" = (Ptr) ((Fix) *adr);}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
507
(cabne a1 'memmovm 508)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register Fix *src, *end, *dst;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"src = (Fix *) " a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"end = (Fix *) " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"dst = (Fix *) " a1)
(call #:modtoc:prin1)
(mov (& 9) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"while (src < end) *dst++ = *src++;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
508
(cabne a1 'hovni 509)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"llrt_llovni(" a1)
(call #:modtoc:prin1)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (& 9) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (& 8) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(bra 115)
509
(mov (& 13) a3)
(mov 'modtoc a2)
(mov '#:modtoc:instruction a1)
(jcall error)
115
(mov (& 1) dlink)
(mov (& 6) (cvalq arg1))
(mov (& 7) (cvalq arg2))
(adjstk '14)
(return)
))
(loader'((entry #:modtoc:mov-instruction subr2)
(push a2)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 1) a1)
(call #:modtoc:opw)
(mov '" = " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(adjstk '2)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:system-call-1 subr2)
(push a2)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(" a2)
(mov (& 0) a1)
(call #:modtoc:prin2)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(adjstk '2)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:system-call-1-cc subr3)
(push a3)
(push a2)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 2) a1)
(call #:modtoc:opw)
(mov '"(" a3)
(mov (& 0) a2)
(mov '" = (Ptr) " a1)
(call #:modtoc:prin3)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(adjstk '3)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:system-call-2-cc nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '"(" a3)
(mov (& 3) a2)
(mov '" = (Ptr) " a1)
(call #:modtoc:prin3)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '"->Val + 2, " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(adjstk '4)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:file-funct nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '"(" a3)
(mov (& 3) a2)
(mov '" = (Ptr) " a1)
(call #:modtoc:prin3)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '"," a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"->Val + 2);" a1)
(call #:modtoc:prin1)
(adjstk '4)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:io-funct nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '"(" a3)
(mov (& 4) a2)
(mov '" = (Ptr) " a1)
(call #:modtoc:prin3)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '"->Val + 2, &" a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '5)
(bra #:modtoc:no-register-use)
))
(loader'((entry #:modtoc:internal-variable subr1)
(push (@ 101))
(push (cvalq #:modtoc:prefix-dot-llm3))
(push a1)
(mov '2 a4)
(jmp catenate)
101
(eval ())
(push a1)
(mov (cvalq #:modtoc:internal-variables-list) a2)
(jcall member)
(bfnil a1 103)
(mov (cvalq #:modtoc:internal-variables-list) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:modtoc:internal-variables-list))
(push (@ 104))
(mov '0 a4)
(jmp outchan)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
107
(eval ())
(mov '" = 0;" a3)
(mov (& 4) a2)
(mov '"Ptr " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '1)
103
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:mactabgc subr1)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register TableElem aux, mask;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (TableElem) ((TableElem) " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" - (TableElem) " a1)
(call #:modtoc:prin1)
(mov 'bnumb a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux >>= PTR2_SHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"mask = 1; mask <<= (aux & ELEM_MASK);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux >>= ELEM_SHIFT;" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:mactabin subr1)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register TableElem aux, mask;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (TableElem) ((TableElem) " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '" - (TableElem) " a1)
(call #:modtoc:prin1)
(mov 'bcons a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux >>= PTR2_SHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"mask = 1; mask <<= (aux & ELEM_MASK);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux >>= ELEM_SHIFT;" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:next-chunk nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 3) a1)
(call #:modtoc:opm)
(mov '" += " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:fixpos)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(push (@ 101))
(push (& 4))
(push '"<")
(push (& 4))
(push (& 4))
(mov '4 a4)
(bra #:modtoc:cmp-ptr-and-branch)
101
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:modtoc:incrink subr2)
(push a2)
(push a1)
(mov 'incrink_ a1)
(call #:modtoc:gen-new-symbol)
(mov (cvalq #:modtoc:local-labels-module) a2)
(jcall cons)
(push (cvalq #:modtoc:local-labels-module))
(mov a1 (cvalq #:modtoc:local-labels-module))
(push '1)
(push '(#:modtoc:local-labels-module))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register int aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (int) (" a1)
(call #:modtoc:prin1)
(mov (& 7) a1)
(call #:modtoc:fix)
(mov '" + 1);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (aux < 1024) {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 7) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((UFix) aux);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '" } else {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 7) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) 0;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 8) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((UFix) (" a1)
(call #:modtoc:prin1)
(mov (& 8) a1)
(call #:modtoc:fix)
(mov '" + 1));}}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:modtoc:local-labels-module))
(adjstk '9)
(return)
))
(loader'((entry #:modtoc:swpcons nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{ register int reg_count, i;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  register TableElem  aux, reg_mask, reg_bask;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  register Table regbtbgc, regbtbin;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  register Ptr regecons;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  reg_count = 0;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  regbtbin = GIbtbin;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" regecons = GIecons;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  aux = (TableElem) ((TableElem) " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '" - (TableElem) " a1)
(call #:modtoc:prin1)
(mov 'bnumb a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  aux >>= PTR2_SHIFT + ELEM_SHIFT;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  regbtbgc = &GIbtbgc[aux];" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"  do {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"reg_mask = 1;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"reg_bask = *regbtbgc;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"for (i=0; i<TABLE_ELEM_NB_OF_BIT; i++) {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if (reg_bask & reg_mask) {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"} else {" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '4 a2)
(mov '9 a1)
(call #:modtoc:princn)
(push (@ 101))
(push 'cdr)
(push (& 4))
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:modtoc:opr)
(mov '" = " a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '4 a2)
(mov '9 a1)
(call #:modtoc:princn)
(push (@ 102))
(push 'car)
(push (& 4))
(mov '2 a4)
(jmp list)
102
(eval ())
(call #:modtoc:opr)
(mov '" = " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '4 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '" = " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '4 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"reg_count++;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '" += 2;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '3 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"reg_mask <<= 1;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"*regbtbin++ &= reg_bask;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"*regbtbgc++ = 0;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"} while (" a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '" < regecons);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (reg_count >> 10);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (reg_count & 0x3FF);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"}" a1)
(call #:modtoc:prin1)
(adjstk '4)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:gcmark subr0)
(mov 'gcmark_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov 'gcmark_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov 'gcmark_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov 'gcmark_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov 'gcmark_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov 'gcmark_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov 'gcmark_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov 'gcmark_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(push (@ 101))
(push (& 8))
(push (& 7))
(push (& 7))
(push (& 7))
(push (cvalq #:modtoc:local-labels-module))
(mov '5 a4)
(jmp mcons)
101
(eval ())
(push (cvalq #:modtoc:local-labels-module))
(mov a1 (cvalq #:modtoc:local-labels-module))
(push '1)
(push '(#:modtoc:local-labels-module))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 14) a1)
(call #:modtoc:instruction)
(push (@ 102))
(push 'bflisp)
(push 'a1)
(push (& 15))
(mov '3 a4)
(jmp list)
102
(eval ())
(call #:modtoc:instruction)
(mov 'a1 a1)
(call #:modtoc:mactabgc)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"if ((" a1)
(call #:modtoc:prin1)
(mov 'btbgc a1)
(call #:modtoc:opr)
(mov '"[aux] & mask) != 0)" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 12) a1)
(call #:modtoc:goto-label-at)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov 'btbgc a1)
(call #:modtoc:opr)
(mov '"[aux] |= mask;}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(push (@ 103))
(push 'btcons)
(push 'a1)
(push (& 13))
(mov '3 a4)
(jmp list)
103
(eval ())
(call #:modtoc:instruction)
(push (@ 104))
(push 'btvect)
(push 'a1)
(push (& 12))
(mov '3 a4)
(jmp list)
104
(eval ())
(call #:modtoc:instruction)
(push (@ 105))
(push 'btstrg)
(push 'a1)
(push (& 14))
(mov '3 a4)
(jmp list)
105
(eval ())
(call #:modtoc:instruction)
(mov (& 12) a1)
(call #:modtoc:instruction)
(push (@ 106))
(push 'return)
(mov '1 a4)
(jmp list)
106
(eval ())
(call #:modtoc:instruction)
(mov (& 11) a1)
(call #:modtoc:instruction)
(push (@ 107))
(push 'mov)
(push '(typ a1))
(push 'a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(call #:modtoc:instruction)
(push (@ 108))
(push 'bra)
(push (& 16))
(mov '2 a4)
(jmp list)
108
(eval ())
(call #:modtoc:instruction)
(mov (& 10) a1)
(call #:modtoc:instruction)
(push (@ 109))
(push 'chkstk)
(push 'estack)
(push 'errfsgc)
(mov '3 a4)
(jmp list)
109
(eval ())
(call #:modtoc:instruction)
(push (@ 110))
(push 'push)
(push '(cdr a1))
(mov '2 a4)
(jmp list)
110
(eval ())
(call #:modtoc:instruction)
(push (@ 111))
(push 'mov)
(push '(car a1))
(push 'a1)
(mov '3 a4)
(jmp list)
111
(eval ())
(call #:modtoc:instruction)
(push (@ 112))
(push 'push)
(push (@ 113))
(push '@)
(push (& 17))
(mov '2 a4)
(jmp list)
113
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
112
(eval ())
(call #:modtoc:instruction)
(push (@ 114))
(push 'bra)
(push (& 16))
(mov '2 a4)
(jmp list)
114
(eval ())
(call #:modtoc:instruction)
(mov (& 13) a1)
(call #:modtoc:instruction)
(push (@ 115))
(push 'pop)
(push 'a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(call #:modtoc:instruction)
(push (@ 116))
(push 'bra)
(push 'mark)
(mov '2 a4)
(jmp list)
116
(eval ())
(call #:modtoc:instruction)
(mov (& 9) a1)
(call #:modtoc:instruction)
(push (@ 117))
(push 'push)
(push 'a3)
(mov '2 a4)
(jmp list)
117
(eval ())
(call #:modtoc:instruction)
(push (@ 118))
(push 'hgsize)
(push 'a1)
(push 'a3)
(mov '3 a4)
(jmp list)
118
(eval ())
(call #:modtoc:instruction)
(push (@ 119))
(push 'push)
(push 'a1)
(mov '2 a4)
(jmp list)
119
(eval ())
(call #:modtoc:instruction)
(push (@ 120))
(push 'chkstk)
(push 'estack)
(push 'errfsgc)
(mov '3 a4)
(jmp list)
120
(eval ())
(call #:modtoc:instruction)
(push (@ 121))
(push 'bra)
(push (& 9))
(mov '2 a4)
(jmp list)
121
(eval ())
(call #:modtoc:instruction)
(mov (& 8) a1)
(call #:modtoc:instruction)
(push (@ 122))
(push 'hpxmov)
(push '(& 0))
(push 'a3)
(push 'a1)
(mov '4 a4)
(jmp list)
122
(eval ())
(call #:modtoc:instruction)
(push (@ 123))
(push 'push)
(push 'a3)
(mov '2 a4)
(jmp list)
123
(eval ())
(call #:modtoc:instruction)
(push (@ 124))
(push 'call)
(push 'mark)
(mov '2 a4)
(jmp list)
124
(eval ())
(call #:modtoc:instruction)
(push (@ 125))
(push 'pop)
(push 'a3)
(mov '2 a4)
(jmp list)
125
(eval ())
(call #:modtoc:instruction)
(mov (& 7) a1)
(call #:modtoc:instruction)
(push (@ 126))
(push 'sobgez)
(push 'a3)
(push (& 11))
(mov '3 a4)
(jmp list)
126
(eval ())
(call #:modtoc:instruction)
(push (@ 127))
(push 'pop)
(push 'a1)
(mov '2 a4)
(jmp list)
127
(eval ())
(call #:modtoc:instruction)
(push (@ 128))
(push 'pop)
(push 'a3)
(mov '2 a4)
(jmp list)
128
(eval ())
(call #:modtoc:instruction)
(push (@ 129))
(push 'mov)
(push '(typ a1))
(push 'a1)
(mov '3 a4)
(jmp list)
129
(eval ())
(call #:modtoc:instruction)
(push (@ 130))
(push 'bra)
(push 'mark)
(mov '2 a4)
(jmp list)
130
(eval ())
(call #:modtoc:instruction)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:modtoc:local-labels-module))
(adjstk '15)
(return)
))
(loader'((entry #:modtoc:callg-generate subr3)
(push a3)
(push a2)
(diff '2 a1)
(quo '2 a1)
(push a1)
(mov '0 a1)
(jcall chrnth)
(cabne a1 '95 101)
(push (@ 103))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp substring)
103
(eval ())
(mov a1 a4)
(bra 102)
101
(mov (& 1) a4)
102
(mov (& 2) a3)
(mov (cdr a3) (& 2))
(push (car a3))
(push nil)
(push nil)
(push a4)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 3) a1)
(call #:modtoc:callg-c-type)
(mov '" callg_retv;" a3)
(mov a1 a2)
(mov '"{" a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(push (@ 104))
(mov '0 a4)
(jmp outchan)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(push (cvalq #:modtoc:include-channel))
(mov '1 a4)
(jmp outchan)
107
(eval ())
(push (@ 108))
(push '"extern ")
(mov (& 9) a1)
(call #:modtoc:callg-c-type)
(push a1)
(push '" ")
(push (& 8))
(push '"();")
(mov '5 a4)
(jmp prin)
108
(eval ())
(call #:modtoc:terpri)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 109))
(push (& 4))
(mov '1 a4)
(jmp outchan)
109
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '1)
(push '1)
(push (& 7))
(mov (& 6) a4)
(bra 111)
110
(push a4)
(mov '9 a1)
(call #:modtoc:princ1)
(push (@ 112))
(push '" ")
(mov (& 3) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:modtoc:callg-c-type)
(push a1)
(push '" callg_arg")
(push (& 6))
(push '";")
(mov '5 a4)
(jmp prin)
112
(eval ())
(call #:modtoc:terpri)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (cdr a4) (& 1))
(mov (& 2) a3)
(plus '1 a3)
(mov a3 (& 2))
(pop a4)
111
(sobgez a4 110)
(adjstk '2)
(push '1)
(push (& 7))
(mov (& 6) a4)
(bra 114)
113
(push a4)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" = " a3)
(mov (& 2) a2)
(mov '" callg_arg" a1)
(call #:modtoc:prin3)
(mov (& 1) a1)
(mov (cdr a1) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:modtoc:callg-ll2c-convert)
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(cabne a1 '7 116)
(mov (& 1) a1)
(mov (& 5) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 5))
(bra 115)
116
(cabne a1 '8 115)
(mov (& 1) a1)
(mov (& 4) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 4))
115
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (cdr a4) (& 1))
(mov (& 2) a3)
(plus '1 a3)
(mov a3 (& 2))
(pop a4)
114
(sobgez a4 113)
(adjstk '2)
(push (& 2))
118
(bfcons (& 0) 119)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" Lfixvector_to_Cfixvector (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '1)
(bra 118)
119
(adjstk '1)
(push (& 1))
120
(bfcons (& 0) 121)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" Lfloatvector_to_Cfloatvector (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '1)
(bra 120)
121
(adjstk '1)
(mov '9 a1)
(call #:modtoc:princ1)
(push (@ 122))
(push '" callg_retv = ((")
(mov (& 5) a1)
(call #:modtoc:callg-c-type)
(push a1)
(push '") ")
(push (& 4))
(push '"(")
(mov '5 a4)
(jmp prin)
122
(eval ())
(cnble (& 4) '0 124)
(push '1)
(push (& 7))
(mov (& 6) a4)
(diff '1 a4)
(bra 126)
125
(push a4)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabeq a4 '5 129)
(cabne a4 '6 127)
129
(mov '"," a3)
(mov (& 2) a2)
(mov '"&callg_arg" a1)
(call #:modtoc:prin3)
(bra 128)
127
(mov '"," a3)
(mov (& 2) a2)
(mov '"callg_arg" a1)
(call #:modtoc:prin3)
128
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (cdr a4) (& 1))
(mov (& 2) a3)
(plus '1 a3)
(mov a3 (& 2))
(pop a4)
126
(sobgez a4 125)
(mov (& 0) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabeq a4 '5 132)
(cabne a4 '6 130)
132
(mov (& 1) a2)
(mov '"&callg_arg" a1)
(call #:modtoc:prin2)
(bra 131)
130
(mov (& 1) a2)
(mov '"callg_arg" a1)
(call #:modtoc:prin2)
131
(adjstk '2)
124
(mov '"));" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(push (& 2))
133
(bfcons (& 0) 134)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" Cfixvector_to_Lfixvector (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '1)
(bra 133)
134
(adjstk '1)
(push (& 1))
135
(bfcons (& 0) 136)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" Cfloatvector_to_Lfloatvector (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '1)
(bra 135)
136
(adjstk '1)
(mov (& 3) a1)
(call #:modtoc:callg-c2ll-convert)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"}" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(adjstk '7)
(bra #:modtoc:no-register-use)
))
(loader'((entry #:modtoc:callg-c-type subr1)
(cabne a1 '0 102)
(mov '"Ptr" a1)
(return)
102
(cabeq a1 '1 104)
(cabne a1 '5 103)
104
(mov '"long" a1)
(return)
103
(cabeq a1 '2 106)
(cabne a1 '6 105)
106
(mov '"double" a1)
(return)
105
(cabeq a1 '3 108)
(cabne a1 '4 107)
108
(mov '"Ptr" a1)
(return)
107
(cabeq a1 '7 110)
(cabne a1 '8 109)
110
(mov '"Ptr" a1)
(return)
109
(push (@ 112))
(push '"modtoc: CALLG C-type, type unknow: ")
(push a1)
(mov '2 a4)
(bra #:modtoc:print-error)
112
(eval ())
(return)
))
(loader'((entry #:modtoc:callg-c2ll-convert subr1)
(cabne a1 '0 102)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '" = ((Ptr) callg_retv);" a1)
(call #:modtoc:prin1)
(bra #:modtoc:terpri)
102
(cabne a1 '1 103)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '" = ((Ptr) ((UFix) callg_retv));" a1)
(call #:modtoc:prin1)
(bra #:modtoc:terpri)
103
(cabne a1 '2 104)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '" = Cfloat_to_Lfloat(callg_retv);" a1)
(call #:modtoc:prin1)
(bra #:modtoc:terpri)
104
(cabne a1 '3 105)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '" = Cstring_to_Lstring((char *) callg_retv);" a1)
(call #:modtoc:prin1)
(bra #:modtoc:terpri)
105
(push (@ 107))
(push '"modtoc: CALLG C->LL, type unknow: ")
(push a1)
(mov '2 a4)
(bra #:modtoc:print-error)
107
(eval ())
(return)
))
(loader'((entry #:modtoc:callg-ll2c-convert subr2)
(push a1)
(mov a2 a1)
(cabne a1 '0 102)
(bfcons (& 0) 103)
(mov (& 0) a4)
(cabne (car a4) 'vag 103)
(mov '"llrt_vag(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
103
(mov '"((Ptr) " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '");" a1)
(adjstk '1)
(bra #:modtoc:prin1)
102
(cabeq a1 '1 106)
(cabne a1 '5 105)
106
(mov '"((Fix) " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
105
(cabeq a1 '2 108)
(cabne a1 '6 107)
108
(mov '"Lfloat_to_Cfloat(" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
107
(cabeq a1 '3 110)
(cabne a1 '4 109)
110
(mov '"((Ptr) (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '"->Val)+2);" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
109
(cabeq a1 '7 112)
(cabne a1 '8 111)
112
(mov '"((Ptr) (" a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '"->Val)+2);" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
111
(push (@ 114))
(push '"modtoc: CALLG LL->C, type unknow: ")
(push a1)
(mov '2 a4)
(bra #:modtoc:print-error)
114
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:get-real-ll-name subr1)
(push a1)
(mov (cvalq #:modtoc:llm3-ll-name) a2)
(jcall cassq)
(bfnil a1 101)
(mov (& 0) a1)
101
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:get-llm3-function subr1)
(mov (cvalq #:modtoc:llm3-functions) a2)
(jmp cassq)
))
(loader'((entry #:modtoc:get-module-function subr1)
(push a1)
(call #:modtoc:get-llm3-function)
(bfnil a1 101)
(mov (cvalq #:modtoc:module-functions) a2)
(mov (& 0) a1)
(adjstk '1)
(jmp cassq)
101
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:get-trace-function subr1)
(mov (cvalq #:modtoc:trace-functions) a2)
(jmp cassq)
))
(loader'((entry #:modtoc:make-module-function subr1)
(push a1)
(call #:modtoc:get-module-function)
(bfnil a1 101)
(mov (cvalq #:modtoc:prefix-module-function) a1)
(call #:modtoc:gen-new-label)
(push a1)
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(mov (cvalq #:modtoc:module-functions) a2)
(jcall cons)
(mov a1 (cvalq #:modtoc:module-functions))
(mov (& 0) a1)
(adjstk '1)
101
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:make-trace-function subr1)
(push a1)
(call #:modtoc:get-trace-function)
(push a1)
(btnil a1 101)
(push (@ 103))
(push '"modtoc: multiple defined traced symbol: ")
(push (& 3))
(mov '2 a4)
(bra #:modtoc:print-error)
103
(eval ())
(bra 102)
101
(mov (cvalq #:modtoc:prefix-trace-function) a1)
(call #:modtoc:gen-new-label)
(mov a1 (& 0))
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(mov (cvalq #:modtoc:trace-functions) a2)
(jcall cons)
(mov a1 (cvalq #:modtoc:trace-functions))
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:modtoc:goto-label-at subr2)
(push a2)
(push (@ 101))
(push '@)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (& 0) a2)
(adjstk '1)
(bra #:modtoc:goto-label)
))
(loader'((entry #:modtoc:goto-label subr2)
(push a2)
(push a1)
(jcall consp)
(mov a1 a4)
(btnil a4 101)
(mov (& 0) a1)
(mov '@ a2)
(mov (car a1) a1)
(jcall eq)
(mov a1 a4)
101
(push a4)
(btnil a4 102)
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:modtoc:local-labels-module) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 102)
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:modtoc:local-procedure-label-list) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 105)
(mov 't (cvalq #:modtoc:backward-references-p))
105
(mov '9 a1)
(call #:modtoc:princ1)
(push (@ 106))
(push '"goto ")
(push (cvalq #:modtoc:prefix-local-label))
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (car a4))
(push '";")
(push (& 7))
(mov '5 a4)
(jmp prin)
106
(eval ())
(adjstk '3)
(bra #:modtoc:terpri)
102
(btnil (& 0) 107)
(mov (& 1) a4)
(mov (cdr a4) a4)
(cabne (car a4) (cvalq #:modtoc:current-name) 107)
(mov 't (cvalq #:modtoc:tailrec-p))
(mov '9 a1)
(call #:modtoc:princ1)
(push (@ 109))
(push '"goto ")
(push (cvalq #:modtoc:tailrec-label))
(push '";")
(push (& 6))
(mov '4 a4)
(jmp prin)
109
(eval ())
(adjstk '3)
(bra #:modtoc:terpri)
107
(btnil (& 0) 110)
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:modtoc:extern-llm3-predefined) a2)
(mov (car a1) a1)
(jcall assq)
(btnil a1 110)
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(cabne a1 'popj0 113)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(bra 112)
113
(cabne a1 'popj1 114)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 1;" a1)
(call #:modtoc:prin1)
(bra 112)
114
(cabne a1 'popj2 115)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 2;" a1)
(call #:modtoc:prin1)
(bra 112)
115
(cabne a1 'popj3 116)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 3;" a1)
(call #:modtoc:prin1)
(bra 112)
116
(cabne a1 'popj4 117)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 4;" a1)
(call #:modtoc:prin1)
(bra 112)
117
(cabne a1 'popj5 118)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 5;" a1)
(call #:modtoc:prin1)
(bra 112)
118
(cabne a1 'popj6 119)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 6;" a1)
(call #:modtoc:prin1)
(bra 112)
119
(cabne a1 'popj7 120)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 7;" a1)
(call #:modtoc:prin1)
(bra 112)
120
(cabne a1 'popj8 121)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 8;" a1)
(call #:modtoc:prin1)
(bra 112)
121
(cabne a1 'popj9 122)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) 9;" a1)
(call #:modtoc:prin1)
(bra 112)
122
(cabne a1 'popja4 123)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{" a1)
(call #:modtoc:prin1)
(mov 'a4 a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '"++)->Val; " a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov '" += (Fix) " a1)
(call #:modtoc:prin1)
(mov 'a4 a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(bra 112)
123
(mov (& 1) a3)
(mov 'modtoc a2)
(mov '#:modtoc:goto-label a1)
(jcall error)
112
(mov '" aRet = (" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov (& 2) a2)
(mov '"++)->Val; goto lRet;}" a1)
(call #:modtoc:prin2)
(adjstk '3)
(bra #:modtoc:terpri)
110
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{aRet = " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov (& 2) a2)
(mov '"; goto lRet;}" a1)
(call #:modtoc:prin2)
(adjstk '3)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:call-internal subr1)
(push a1)
(mov (cvalq #:modtoc:next-instruction) a1)
(jcall listp)
(btnil a1 101)
(mov 'call_ a1)
(call #:modtoc:gen-new-symbol)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(--" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov (& 0) a1)
(call #:modtoc:lab)
(mov '");" a3)
(mov a1 a2)
(mov '")->Val = ((Ptr) " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov '"" a2)
(mov (& 1) a1)
(call #:modtoc:goto-label)
(mov (& 0) a1)
(adjstk '2)
(bra #:modtoc:function-entry-point)
101
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"(--" a1)
(call #:modtoc:prin1)
(mov 'sp a1)
(call #:modtoc:opm)
(mov (cvalq #:modtoc:next-instruction) a1)
(call #:modtoc:lab)
(mov '");" a3)
(mov a1 a2)
(mov '")->Val = ((Ptr) " a1)
(call #:modtoc:prin3)
(call #:modtoc:terpri)
(mov '"" a2)
(mov (& 0) a1)
(adjstk '1)
(bra #:modtoc:goto-label)
))
(loader'((entry #:modtoc:gen-module-name subr1)
(jcall explode)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall digitp)
(bfnil a1 105)
(mov (& 0) a1)
(jcall letterp)
(btnil a1 103)
105
(mov (& 0) a1)
(jcall ncons)
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(mov nil a1)
(jmp symbol)
))
(loader'((entry #:modtoc:gen-new-symbol subr1)
(call #:modtoc:gen-new-label)
(mov a1 a2)
(mov nil a1)
(jmp symbol)
))
(loader'((entry #:modtoc:gen-new-label subr1)
(push (@ 101))
(push a1)
(push (cvalq #:modtoc:c-module-name))
(push '"_")
(mov (cvalq #:modtoc:gen-new-label-counter) a1)
(jcall |1+|)
(mov a1 (cvalq #:modtoc:gen-new-label-counter))
(push a1)
(mov '4 a4)
(jmp catenate)
101
(eval ())
(return)
))
(loader'((entry #:modtoc:gen-tailrec-label subr1)
(push (@ 101))
(push (cvalq #:modtoc:prefix-local-label))
(push a1)
(mov '2 a4)
(jmp catenate)
101
(eval ())
(return)
))
(loader'((entry #:modtoc:cmp-int-and-branch nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if ((long) " a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '" (long) " a3)
(mov (& 2) a2)
(mov '" " a1)
(call #:modtoc:prin3)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '")" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 0) a1)
(adjstk '4)
(bra #:modtoc:goto-label-at)
))
(loader'((entry #:modtoc:cmp-ptr-and-branch nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if (" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '" " a3)
(mov (& 2) a2)
(mov '" " a1)
(call #:modtoc:prin3)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '")" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 0) a1)
(adjstk '4)
(bra #:modtoc:goto-label-at)
))
(loader'((entry #:modtoc:cmp-type-inside nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if ((" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '" >= " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '") && (" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '" < " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"))" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 0) a1)
(adjstk '4)
(bra #:modtoc:goto-label-at)
))
(loader'((entry #:modtoc:cmp-type-outside nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if ((" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '" < " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '") || (" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:opr)
(mov '" >= " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '"))" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 0) a1)
(adjstk '4)
(bra #:modtoc:goto-label-at)
))
(loader'((entry #:modtoc:fix-arith nsubr)
(bfnil (& 0) 101)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((UFix) (" a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:fix)
(mov '" " a3)
(mov (& 3) a2)
(mov '" " a1)
(call #:modtoc:prin3)
(mov (& 2) a1)
(call #:modtoc:fix)
(mov '"));" a1)
(call #:modtoc:prin1)
(adjstk '5)
(bra #:modtoc:terpri)
101
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"{register int aux;" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov '"aux = (int) (" a1)
(call #:modtoc:prin1)
(mov (& 4) a1)
(call #:modtoc:fix)
(mov '" " a3)
(mov (& 3) a2)
(mov '" " a1)
(call #:modtoc:prin3)
(mov (& 2) a1)
(call #:modtoc:fix)
(mov '");" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '2 a2)
(mov '9 a1)
(call #:modtoc:princn)
(mov (& 1) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) ((UFix) aux);" a1)
(call #:modtoc:prin1)
(call #:modtoc:terpri)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if ((aux > FIX_MAX) || (aux < FIX_MIN))" a1)
(call #:modtoc:prin1)
(mov '"}" a2)
(mov (& 0) a1)
(adjstk '5)
(bra #:modtoc:goto-label-at)
))
(loader'((entry #:modtoc:fix-logic nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '" = (Ptr) (" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:ufix)
(mov '" " a3)
(mov (& 2) a2)
(mov '" " a1)
(call #:modtoc:prin3)
(mov (& 1) a1)
(call #:modtoc:ufix)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '4)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:cmp-fix-and-branch nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if (" a1)
(call #:modtoc:prin1)
(mov (& 3) a1)
(call #:modtoc:fix)
(mov '" " a3)
(mov (& 2) a2)
(mov '" " a1)
(call #:modtoc:prin3)
(mov (& 1) a1)
(call #:modtoc:fix)
(mov '")" a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 0) a1)
(adjstk '4)
(bra #:modtoc:goto-label-at)
))
(loader'((entry #:modtoc:float-arith subr3)
(push a3)
(push a2)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opw)
(mov '" (" a3)
(mov (& 1) a2)
(mov '" = llrt_" a1)
(call #:modtoc:prin3)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '3)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:float-funct-2 subr3)
(push a3)
(push a2)
(push a1)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (& 2) a1)
(call #:modtoc:opw)
(mov '"(" a3)
(mov (& 0) a2)
(mov '" = llrt_" a1)
(call #:modtoc:prin3)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '3)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:float-funct-3 nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opw)
(mov '"(" a3)
(mov (& 3) a2)
(mov '" = llrt_" a1)
(call #:modtoc:prin3)
(mov (& 2) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '4)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:cmp-float-and-branch nsubr)
(mov '9 a1)
(call #:modtoc:princ1)
(mov '" (" a3)
(mov (& 2) a2)
(mov '"if (llrt_" a1)
(call #:modtoc:prin3)
(mov (cvalq arg1) a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov (cvalq arg2) a1)
(call #:modtoc:opr)
(mov '") != 0) " a1)
(call #:modtoc:prin1)
(mov '"" a2)
(mov (& 0) a1)
(adjstk '4)
(bra #:modtoc:goto-label-at)
))
(loader'((entry #:modtoc:call-ptr-test-direct subr1)
(push a1)
(btnil (cvalq #:modtoc:llm3-module-p) 102)
(mov a1 a3)
(mov '"in a LLM3 module" a2)
(mov '#:modtoc:call-ptr-test-direct a1)
(jcall error)
102
(mov '9 a1)
(call #:modtoc:princ1)
(mov 'a1 a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '" " a3)
(mov (& 0) a2)
(mov '" " a1)
(call #:modtoc:prin3)
(mov 'a2 a1)
(call #:modtoc:opr)
(mov '") ? " a1)
(call #:modtoc:prin1)
(mov ''t a1)
(call #:modtoc:opr)
(mov '" : " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:call-fix-test-direct subr1)
(push a1)
(btnil (cvalq #:modtoc:llm3-module-p) 102)
(mov a1 a3)
(mov '"in a LLM3 module" a2)
(mov '#:modtoc:call-fix-test-direct a1)
(jcall error)
102
(mov '9 a1)
(call #:modtoc:princ1)
(mov 'a1 a1)
(call #:modtoc:opw)
(mov '" = (" a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:fix)
(mov '" " a3)
(mov (& 0) a2)
(mov '" " a1)
(call #:modtoc:prin3)
(mov 'a2 a1)
(call #:modtoc:fix)
(mov '") ? " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '" : " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:call-type-test-direct subr2)
(push a2)
(push a1)
(btnil (cvalq #:modtoc:llm3-module-p) 102)
(jcall cons)
(mov a1 a3)
(mov '"in a LLM3 module" a2)
(mov '#:modtoc:call-type-test-direct a1)
(jcall error)
102
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"if ((" a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '" < " a1)
(call #:modtoc:prin1)
(mov (& 0) a1)
(call #:modtoc:opr)
(mov '") || (" a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '" >= " a1)
(call #:modtoc:prin1)
(mov (& 1) a1)
(call #:modtoc:opr)
(mov '")) " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opw)
(mov '" = " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '";" a1)
(call #:modtoc:prin1)
(adjstk '2)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:call-rt-direct-0 subr1)
(push a1)
(btnil (cvalq #:modtoc:llm3-module-p) 102)
(mov a1 a3)
(mov '"in a LLM3 module" a2)
(mov '#:modtoc:call-rt-direct-0 a1)
(jcall error)
102
(mov '9 a1)
(call #:modtoc:princ1)
(mov '"<<ret>> " a1)
(call #:modtoc:prin1)
(mov 'a1 a1)
(call #:modtoc:opw)
(mov '" ();" a3)
(mov (& 0) a2)
(mov '" = " a1)
(call #:modtoc:prin3)
(adjstk '1)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:call-rt-direct-1 subr1)
(push a1)
(btnil (cvalq #:modtoc:llm3-module-p) 102)
(mov a1 a3)
(mov '"in a LLM3 module" a2)
(mov '#:modtoc:call-rt-direct-1 a1)
(jcall error)
102
(mov '9 a1)
(call #:modtoc:princ1)
(mov 'a1 a1)
(call #:modtoc:opw)
(mov '" (" a3)
(mov (& 0) a2)
(mov '" = " a1)
(call #:modtoc:prin3)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov 'bcons a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:call-rt-direct-2 subr1)
(push a1)
(btnil (cvalq #:modtoc:llm3-module-p) 102)
(mov a1 a3)
(mov '"in a LLM3 module" a2)
(mov '#:modtoc:call-rt-direct-2 a1)
(jcall error)
102
(mov '9 a1)
(call #:modtoc:princ1)
(mov 'a1 a1)
(call #:modtoc:opw)
(mov '" (" a3)
(mov (& 0) a2)
(mov '" = " a1)
(call #:modtoc:prin3)
(mov 'a1 a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov 'a2 a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov 'bcons a1)
(call #:modtoc:opr)
(mov '", " a1)
(call #:modtoc:prin1)
(mov 'nil a1)
(call #:modtoc:opr)
(mov '");" a1)
(call #:modtoc:prin1)
(adjstk '1)
(bra #:modtoc:terpri)
))
(loader'((entry #:modtoc:print-msg nsubr)
(jcall #:llcp:nlist)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push nil)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push (@ 105))
(mov '0 a4)
(jmp rmargin)
105
(eval ())
(push a1)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push 'print)
(push (& 10))
(mov '2 a4)
(jmp apply)
110
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 111))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
111
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 112))
(push (& 4))
(mov '1 a4)
(jmp outchan)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:modtoc:print-error nsubr)
(jcall #:llcp:nlist)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push nil)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push (@ 105))
(mov '0 a4)
(jmp rmargin)
105
(eval ())
(push a1)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push 'print)
(push '"** ")
(push (& 11))
(mov '3 a4)
(jmp apply)
110
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 111))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
111
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 112))
(push (& 4))
(mov '1 a4)
(jmp outchan)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:modtoc:princ1 subr1)
(push (@ 101))
(push a1)
(push '1)
(mov '2 a4)
(jmp princn)
101
(eval ())
(return)
))
(loader'((entry #:modtoc:princn subr2)
(push (@ 101))
(push a1)
(push a2)
(mov '2 a4)
(jmp princn)
101
(eval ())
(return)
))
(loader'((entry #:modtoc:prin1 subr1)
(push (@ 101))
(push a1)
(mov '1 a4)
(jmp prin)
101
(eval ())
(return)
))
(loader'((entry #:modtoc:prin2 subr2)
(push (@ 101))
(push a1)
(push a2)
(mov '2 a4)
(jmp prin)
101
(eval ())
(return)
))
(loader'((entry #:modtoc:prin3 subr3)
(push (@ 101))
(push a1)
(push a2)
(push a3)
(mov '3 a4)
(jmp prin)
101
(eval ())
(return)
))
(defvar #:modtoc:previous-instruction ())
(defvar #:modtoc:next-instruction ())
(loader'((entry #:modtoc:loader subr1)
(push a1)
(push nil)
(push nil)
(push nil)
(push (cvalq #:modtoc:next-instruction))
(mov (& 1) (cvalq #:modtoc:next-instruction))
(push (cvalq #:modtoc:previous-instruction))
(mov (& 3) (cvalq #:modtoc:previous-instruction))
(push '2)
(push '(#:modtoc:next-instruction #:modtoc:previous-instruction))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:modtoc:module-functions))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 103)
(mov (& 0) a1)
(mov (car a1) a1)
(jcall symbolp)
(bfnil a1 104)
(mov (& 0) a4)
(bffix (car a4) 106)
(mov '#:modtoc:local (car a4))
(bra 104)
106
(push (@ 108))
(push '"modtoc: bad module function")
(push a4)
(mov '2 a4)
(bra #:modtoc:print-error)
108
(eval ())
(bra 104)
103
(push (@ 109))
(push '"modtoc: bad module function")
(push (& 2))
(mov '2 a4)
(bra #:modtoc:print-error)
109
(eval ())
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(btnil (cvalq #:modtoc:peephole-optimize-p) 111)
(push (@ 112))
(push '#:modtoc:peephole-optimize)
(push (& 13))
(mov '2 a4)
(jmp funcall)
112
(eval ())
(mov a1 (& 11))
111
(btnil (cvalq #:modtoc:optimize-local-labels-p) 113)
(push (@ 115))
(push '#:modtoc:find-local-labels)
(push (& 13))
(mov '2 a4)
(jmp funcall)
115
(eval ())
(mov a1 a4)
(bra 114)
113
(mov nil a4)
114
(mov a4 (cvalq #:modtoc:local-labels-module))
(mov (& 11) a3)
(mov (cdr a3) (& 11))
(mov (car a3) (cvalq #:modtoc:next-instruction))
116
(bfcons (& 11) 117)
(mov (& 10) (cvalq #:modtoc:previous-instruction))
(mov (cvalq #:modtoc:next-instruction) (& 10))
(mov (& 11) a4)
(mov (cdr a4) (& 11))
(mov (car a4) (cvalq #:modtoc:next-instruction))
(mov (& 10) a1)
(call #:modtoc:instruction)
(bra 116)
117
(mov (& 10) (cvalq #:modtoc:previous-instruction))
(mov (cvalq #:modtoc:next-instruction) (& 10))
(mov nil (cvalq #:modtoc:next-instruction))
(mov (& 10) a1)
(call #:modtoc:instruction)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:modtoc:previous-instruction))
(mov (& 7) (cvalq #:modtoc:next-instruction))
(adjstk '12)
(return)
))
(defvar #:modtoc:stats-global-nb-of-procs 0.)
(defvar #:modtoc:stats-nb-of-procs 0.)
(defvar #:modtoc:stats-global-sum 0.)
(defvar #:modtoc:stats-vector-size 32)
(defvar #:modtoc:stats-vector ())
(defvar #:modtoc:stats-preloaded-registers 0.)
(defvar #:modtoc:stats-unloaded-registers 0.)
(loader'((entry #:modtoc:stats-start subr0)
(mov '0. (cvalq #:modtoc:stats-nb-of-procs))
(mov '0. (cvalq #:modtoc:stats-preloaded-registers))
(mov '0. (cvalq #:modtoc:stats-unloaded-registers))
(mov '0. a2)
(mov (cvalq #:modtoc:stats-vector-size) a1)
(jcall makevector)
(mov a1 (cvalq #:modtoc:stats-vector))
(return)
))
(loader'((entry #:modtoc:stats-stop subr0)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push nil)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(mov (cvalq #:modtoc:stats-vector-size) a4)
(quo '2 a4)
(push '0.)
(push nil)
(push a4)
(push (@ 105))
(push '"Nb of C procedures: ")
(push (cvalq #:modtoc:stats-nb-of-procs))
(mov '2 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push (cvalq #:modtoc:stats-global-nb-of-procs))
(push (cvalq #:modtoc:stats-nb-of-procs))
(mov '2 a4)
(jmp |+|)
106
(eval ())
(mov a1 (cvalq #:modtoc:stats-global-nb-of-procs))
(mov (& 0) a4)
(diff '1 a4)
(push '0)
(push a4)
107
(push (@ 109))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp <=)
109
(eval ())
(btnil a1 108)
(hpxmov (cvalq #:modtoc:stats-vector) (& 1) a4)
(mov a4 (& 3))
(push (@ 110))
(push (& 5))
(push (@ 111))
(push a4)
(push (& 5))
(mov '2 a4)
(jmp *)
111
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
110
(eval ())
(mov a1 (& 4))
(push (@ 112))
(push (cvalq #:modtoc:stats-global-sum))
(push (@ 113))
(push (& 6))
(push (& 5))
(mov '2 a4)
(jmp *)
113
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
112
(eval ())
(mov a1 (cvalq #:modtoc:stats-global-sum))
(push (@ 114))
(push '2)
(mov '1 a4)
(jmp outpos)
114
(eval ())
(push (@ 115))
(push (& 2))
(mov '1 a4)
(jmp prin)
115
(eval ())
(push (@ 116))
(push '7)
(mov '1 a4)
(jmp outpos)
116
(eval ())
(push (@ 117))
(push (& 4))
(mov '1 a4)
(jmp prin)
117
(eval ())
(hpxmov (cvalq #:modtoc:stats-vector) (& 2) a4)
(mov a4 (& 3))
(push (@ 118))
(push (& 5))
(push (@ 119))
(push a4)
(push (& 6))
(mov '2 a4)
(jmp *)
119
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
118
(eval ())
(mov a1 (& 4))
(push (@ 120))
(push (cvalq #:modtoc:stats-global-sum))
(push (@ 121))
(push (& 6))
(push (& 6))
(mov '2 a4)
(jmp *)
121
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
120
(eval ())
(mov a1 (cvalq #:modtoc:stats-global-sum))
(push (@ 122))
(push '12)
(mov '1 a4)
(jmp outpos)
122
(eval ())
(push (@ 123))
(push (& 3))
(mov '1 a4)
(jmp prin)
123
(eval ())
(push (@ 124))
(push '17)
(mov '1 a4)
(jmp outpos)
124
(eval ())
(push (@ 125))
(push (& 4))
(mov '1 a4)
(jmp print)
125
(eval ())
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(push (@ 126))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
126
(eval ())
(mov a1 (& 1))
(bra 107)
108
(adjstk '2)
(push (@ 127))
(push '"Average per C procedures: ")
(push (@ 128))
(push (& 5))
(push (cvalq #:modtoc:stats-nb-of-procs))
(mov '2 a4)
(jmp /)
128
(eval ())
(push a1)
(mov '2 a4)
(jmp print)
127
(eval ())
(push (@ 129))
(push '"Preloaded registers:      ")
(push (cvalq #:modtoc:stats-preloaded-registers))
(mov '2 a4)
(jmp print)
129
(eval ())
(push (@ 130))
(push '"Unloaded  registers:      ")
(push (cvalq #:modtoc:stats-unloaded-registers))
(mov '2 a4)
(jmp print)
130
(eval ())
(push (@ 131))
(mov '0 a4)
(jmp print)
131
(eval ())
(adjstk '3)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 132))
(push (& 4))
(mov '1 a4)
(jmp outchan)
132
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:modtoc:stats-global subr0)
(entry #:modtoc:stats-global subr0)
(btnil (cvalq #:modtoc:stats-on-c-size-p) 101)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp print)
107
(eval ())
(push (@ 108))
(push '"Global nb of C procedures: ")
(push (cvalq #:modtoc:stats-global-nb-of-procs))
(mov '2 a4)
(jmp print)
108
(eval ())
(push (@ 109))
(push '" average per C procedures: ")
(push (@ 110))
(push (cvalq #:modtoc:stats-global-sum))
(push (cvalq #:modtoc:stats-global-nb-of-procs))
(mov '2 a4)
(jmp /)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp print)
109
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 111))
(push (& 4))
(mov '1 a4)
(jmp outchan)
111
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:modtoc:typefn-to-ftype subr2)
(push a1)
(mov a2 a1)
(cabne a1 'subr0 102)
(mov '1 a1)
(adjstk '1)
(return)
102
(cabne a1 'subr1 103)
(mov '2 a1)
(adjstk '1)
(return)
103
(cabne a1 'subr2 104)
(mov '3 a1)
(adjstk '1)
(return)
104
(cabne a1 'subr3 105)
(mov '4 a1)
(adjstk '1)
(return)
105
(cabne a1 'nsubr 106)
(mov '5 a1)
(adjstk '1)
(return)
106
(cabne a1 'fsubr 107)
(mov '6 a1)
(adjstk '1)
(return)
107
(cabne a1 'msubr 108)
(mov '11 a1)
(adjstk '1)
(return)
108
(cabne a1 'dmsubr 109)
(mov '12 a1)
(adjstk '1)
(return)
109
(mov a1 a3)
(mov (& 0) a2)
(mov '#:modtoc:typefn-to-ftype a1)
(adjstk '1)
(jmp error)
))
(loader'((entry #:modtoc:ftype-to-typefn subr2)
(push a1)
(mov a2 a1)
(cabne a1 '1 102)
(mov 'subr0 a1)
(adjstk '1)
(return)
102
(cabne a1 '2 103)
(mov 'subr1 a1)
(adjstk '1)
(return)
103
(cabne a1 '3 104)
(mov 'subr2 a1)
(adjstk '1)
(return)
104
(cabne a1 '4 105)
(mov 'subr3 a1)
(adjstk '1)
(return)
105
(cabne a1 '5 106)
(mov 'nsubr a1)
(adjstk '1)
(return)
106
(cabne a1 '6 107)
(mov 'fsubr a1)
(adjstk '1)
(return)
107
(cabne a1 '11 108)
(mov 'msubr a1)
(adjstk '1)
(return)
108
(cabne a1 '12 109)
(mov 'dmsubr a1)
(adjstk '1)
(return)
109
(mov a1 a3)
(mov (& 0) a2)
(mov '#:modtoc:ftype-to-typefn a1)
(adjstk '1)
(jmp error)
))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'modpeep)))
(defvar #:sys-package:colon 'modtoc)
(defvar #:modtoc:peephole-debug ())
(defvar #:modtoc:loop 11999)
(defvar #:modtoc:list-of-rt-functions '((eq . calleq) (neq . callneq) (eqn . calleqn) (neqn . callneqn) (fixp . callfixp) (vectorp . callvectorp) (stringp . callstringp) (consp . callconsp) (lt . calllt) (le . callle) (gt . callgt) (ge . callge) (memq . callmemq) (assq . callassq) (cassq . callcassq) (rassq . callrassq) (length . calllength) (nreverse . callnreverse) (error . callerror)))
(loader'((fentry #:modtoc:peephole-optimize subr1)
(entry #:modtoc:peephole-optimize subr1)
(push a1)
(btnil (cvalq #:modtoc:peephole-debug) 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(mov '"peepbefore" a1)
(jcall opena)
(push a1)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (& 4))
107
(bfcons (& 0) 108)
(push (@ 109))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
109
(eval ())
(bra 107)
108
(adjstk '1)
(push (@ 110))
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
110
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 112))
(push (& 4))
(mov '1 a4)
(jmp outchan)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(mov (& 0) a1)
(call #:modtoc:remove-eval)
(mov (& 0) a2)
(mov '(jmp callextern) a1)
(jcall member)
(btnil a1 114)
(mov (& 0) a1)
(call #:modtoc:inline-callextern)
114
(mov (& 0) a1)
(call #:modtoc:optimize-call)
(push nil)
(mov (& 1) a1)
(call #:modtoc:find-alist)
(mov a1 (& 0))
(btnil a1 116)
(mov a1 a2)
(mov (& 1) a1)
(call #:modtoc:change-lab)
116
(adjstk '1)
(btnil (cvalq #:modtoc:peephole-debug) 118)
(push (@ 119))
(mov '0 a4)
(jmp outchan)
119
(eval ())
(push a1)
(push (@ 120))
(push dlink)
(push prot)
(stack dlink)
(push (@ 122))
(mov '"peepafter" a1)
(jcall opena)
(push a1)
(mov '1 a4)
(jmp outchan)
122
(eval ())
(push (& 4))
123
(bfcons (& 0) 124)
(push (@ 125))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
125
(eval ())
(bra 123)
124
(adjstk '1)
(push (@ 126))
(push (@ 127))
(mov '0 a4)
(jmp outchan)
127
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
126
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 121) a3)
120
(push a3)
(push a2)
(push (@ 128))
(push (& 4))
(mov '1 a4)
(jmp outchan)
128
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
121
(eval ())
(adjstk '1)
118
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:remove-eval subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(bfcons (car a4) 103)
(mov (car a4) a3)
(cabne (car a3) 'eval 103)
(mov (car a4) a2)
(mov (cdr a2) a2)
(bfnil (car a2) 103)
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a2) a2)
(mov (& 0) a1)
(jcall rplac)
(bra 101)
103
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:optimize-call subr1)
(push a1)
(push nil)
(push nil)
(push nil)
101
(bfcons (& 3) 102)
(mov (& 3) a4)
(mov (car a4) (& 2))
(mov (cdr a4) a3)
(mov (car a3) (& 1))
(bfcons (& 2) 104)
(mov (& 2) a2)
(cabne (car a2) 'jcall 105)
(mov (cdr a2) a1)
(mov (car a1) (& 0))
(cabne (& 0) 'cons 107)
(push a2)
(mov '(a2 a1) a3)
(mov 'xcons a2)
(pop a1)
(jcall rplac)
(bra 104)
107
(cabne (& 0) 'xcons 109)
(push a2)
(mov '(a2 a1) a3)
(mov 'cons a2)
(pop a1)
(jcall rplac)
(bra 104)
109
(cabne (& 0) 'ncons 111)
(push a2)
(mov '(a1) a3)
(mov 'ncons a2)
(pop a1)
(jcall rplac)
(bra 104)
111
(cabne (& 0) '#:llcp:nlist 113)
(push a2)
(mov nil a3)
(mov 'nlist a2)
(pop a1)
(jcall rplac)
(bra 104)
113
(mov (cvalq #:modtoc:list-of-rt-functions) a2)
(mov (& 0) a1)
(jcall assq)
(btnil a1 115)
(mov (cvalq #:modtoc:list-of-rt-functions) a2)
(mov (& 0) a1)
(jcall cassq)
(mov nil a3)
(mov a1 a2)
(mov (& 2) a1)
(jcall rplac)
(bra 104)
115
(btnil (& 1) 117)
(btcons (& 1) 117)
(push (@ 119))
(push (@ 120))
(push '@)
(push (& 4))
(mov '2 a4)
(jmp list)
120
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
119
(eval ())
(mov a1 a3)
(mov 'push a2)
(mov (& 2) a1)
(jcall rplac)
(push (@ 121))
(push 'jmp)
(push (& 2))
(mov '2 a4)
(jmp list)
121
(eval ())
(mov (& 3) a2)
(mov (cdr a2) a2)
(jcall cons)
(mov (& 3) a4)
(mov a1 (cdr a4))
(bra 104)
117
(btnil (& 1) 122)
(bfcons (& 1) 122)
(mov (& 1) a4)
(cabne (car a4) 'bra 122)
(push (@ 124))
(push (@ 125))
(push '@)
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
125
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
124
(eval ())
(mov a1 a3)
(mov 'push a2)
(mov (& 2) a1)
(jcall rplac)
(push (@ 126))
(push (& 1))
(mov '1 a4)
(jmp list)
126
(eval ())
(mov a1 a3)
(mov 'jmp a2)
(mov (& 1) a1)
(jcall rplac)
(bra 104)
122
(btnil (& 1) 104)
(bfcons (& 1) 104)
(mov (& 1) a4)
(cabne (car a4) 'jmp 104)
(push (@ 129))
(push (@ 130))
(push 'fvalq)
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
130
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
129
(eval ())
(mov a1 a3)
(mov 'push a2)
(mov (& 2) a1)
(jcall rplac)
(push (@ 131))
(push (& 1))
(mov '1 a4)
(jmp list)
131
(eval ())
(mov a1 a3)
(mov 'jmp a2)
(mov (& 1) a1)
(jcall rplac)
(bra 104)
105
(cabne (car a2) 'jmp 132)
(mov (cdr a2) a1)
(mov (car a1) (& 0))
(cabne (& 0) 'cons 134)
(push a2)
(mov '(a2 a1) a3)
(mov 'xcons a2)
(pop a1)
(jcall rplac)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov '(return) a1)
(jcall cons)
(mov (& 3) a4)
(mov a1 (cdr a4))
(bra 104)
134
(cabne (& 0) 'ncons 136)
(push a2)
(mov '(a1) a3)
(mov (& 1) a2)
(pop a1)
(jcall rplac)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov '(return) a1)
(jcall cons)
(mov (& 3) a4)
(mov a1 (cdr a4))
(bra 104)
136
(mov (cvalq #:modtoc:list-of-rt-functions) a2)
(mov (& 0) a1)
(jcall assq)
(btnil a1 104)
(mov (cvalq #:modtoc:list-of-rt-functions) a2)
(mov (& 0) a1)
(jcall cassq)
(mov nil a3)
(mov a1 a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov '(return) a1)
(jcall cons)
(mov (& 3) a4)
(mov a1 (cdr a4))
(bra 104)
132
(cabne (car a2) 'call 140)
(mov (cdr a2) a1)
(mov (car a1) (& 0))
(btnil (& 1) 142)
(btcons (& 1) 142)
(push a2)
(push (@ 144))
(push (@ 145))
(push '@)
(push (& 5))
(mov '2 a4)
(jmp list)
145
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
144
(eval ())
(mov a1 a3)
(mov 'push a2)
(pop a1)
(jcall rplac)
(push (@ 146))
(push 'bra)
(push (& 2))
(mov '2 a4)
(jmp list)
146
(eval ())
(mov (& 3) a2)
(mov (cdr a2) a2)
(jcall cons)
(mov (& 3) a4)
(mov a1 (cdr a4))
(bra 104)
142
(btnil (& 1) 147)
(bfcons (& 1) 147)
(mov (& 1) a4)
(cabne (car a4) 'bra 147)
(push a2)
(push (@ 149))
(push (@ 150))
(push '@)
(mov (& 5) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
150
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
149
(eval ())
(mov a1 a3)
(mov 'push a2)
(pop a1)
(jcall rplac)
(push (@ 151))
(push (& 1))
(mov '1 a4)
(jmp list)
151
(eval ())
(mov a1 a3)
(mov 'bra a2)
(mov (& 1) a1)
(jcall rplac)
(bra 104)
147
(btnil (& 1) 104)
(bfcons (& 1) 104)
(mov (& 1) a4)
(cabne (car a4) 'jmp 104)
(push a2)
(push (@ 154))
(push (@ 155))
(push 'fvalq)
(mov (& 5) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
155
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
154
(eval ())
(mov a1 a3)
(mov 'push a2)
(pop a1)
(jcall rplac)
(push (@ 156))
(push (& 1))
(mov '1 a4)
(jmp list)
156
(eval ())
(mov a1 a3)
(mov 'bra a2)
(mov (& 1) a1)
(jcall rplac)
(bra 104)
140
(cabne (car a2) 'fentry 104)
(bfcons (& 1) 159)
(mov (& 1) a1)
(cabne (car a1) 'entry 159)
(bra 104)
159
(push a4)
(mov (cdr a2) a2)
(mov 'entry a1)
(jcall cons)
(mov (& 4) a2)
(mov (cdr a2) a2)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
104
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(bra 101)
102
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:modtoc:sequence-break-p subr1)
(bfcons a1 101)
(mov (car a1) a4)
(cabeq a4 'return 29999)
(cabeq a4 'bra 29999)
(cabeq a4 'jmp 29999)
(cabeq a4 'bri 29999)
(cabne a4 'brx 101)
(return)
101
(mov nil a1)
(return)
29999
(return)
))
(loader'((entry #:modtoc:find-alist subr1)
(push a1)
(push nil)
(push nil)
(push nil)
101
(bfcons (& 3) 102)
(mov (& 3) a4)
(bfcons (car a4) 103)
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(bra 101)
103
(mov (cdr a4) a3)
(mov (car a3) (& 0))
(bfcons (& 0) 105)
(mov (& 0) a1)
(mov (car a1) a1)
(cabne a1 'bra 108)
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (car a4) a1)
(jcall cons)
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(mov (& 1) a1)
(call #:modtoc:sequence-break-p)
(btnil a1 109)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (& 3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a2) a2)
(mov (& 3) a1)
(jcall rplac)
(bra 101)
109
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (& 3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a2) a2)
(mov (& 3) a1)
(jcall rplac)
(bra 101)
108
(cabne a1 'pop 111)
(mov (& 0) a2)
(mov (cdr a2) a2)
(cabne (car a2) 'a4 112)
(mov (cdr a4) a1)
(mov (cdr a1) a1)
(mov '(adjstk a4) a2)
(mov (car a1) a1)
(jcall equal)
(btnil a1 112)
(mov (& 3) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov '(return) a2)
(mov (car a1) a1)
(jcall equal)
(btnil a1 112)
(mov (& 3) a1)
(mov 'popja4 a2)
(mov (car a1) a1)
(jcall cons)
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(mov (& 1) a1)
(call #:modtoc:sequence-break-p)
(btnil a1 114)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (& 3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a2) a2)
(mov (& 3) a1)
(jcall rplac)
(bra 101)
114
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(bra 101)
112
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(bra 101)
111
(cabne a1 'return 116)
(mov 'popj0 a2)
(mov (car a4) a1)
(jcall cons)
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(mov (& 1) a1)
(call #:modtoc:sequence-break-p)
(btnil a1 117)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (& 3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a2) a2)
(mov (& 3) a1)
(jcall rplac)
(bra 101)
117
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(bra 101)
116
(cabne a1 'adjstk 119)
(mov (cdr a4) a2)
(mov (cdr a2) a2)
(bfcons (car a2) 120)
(mov (cdr a4) a1)
(mov (cdr a1) a1)
(mov '(return) a2)
(mov (car a1) a1)
(jcall equal)
(btnil a1 120)
(mov (& 0) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 120)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(cabne (car a3) 'quote 120)
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(bffix (car a2) 120)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(cnble (car a1) '0 120)
(mov (& 0) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(cnbgt (car a4) '9 120)
(mov (& 3) a1)
(push (car a1))
(push (@ 122))
(push 'popj)
(mov (& 3) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp concat)
122
(eval ())
(mov a1 a2)
(pop a1)
(jcall cons)
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(mov (& 1) a1)
(call #:modtoc:sequence-break-p)
(btnil a1 123)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (& 3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a2) a2)
(mov (& 3) a1)
(jcall rplac)
(bra 101)
123
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(bra 101)
120
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(bra 101)
119
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(bra 101)
105
(btnil (car a4) 128)
(bfnil (& 0) 126)
128
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(bra 101)
126
(mov (& 0) a2)
(mov (car a4) a1)
(jcall cons)
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (& 3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a2) a2)
(mov (& 3) a1)
(jcall rplac)
(bra 101)
102
(push (& 2))
(push nil)
129
(bfcons (& 1) 130)
(mov (& 1) a1)
(mov (car a1) a1)
(mov (& 4) a2)
(mov (cdr a1) a1)
(jcall cassq)
(mov a1 (& 0))
(btnil a1 131)
(mov (& 1) a4)
(mov (car a4) a3)
(cabeq a1 (car a3) 133)
(mov a1 a3)
(bra 134)
133
(mov (cvalq #:modtoc:loop) a3)
134
(mov (car a4) a2)
(mov a3 (cdr a2))
(bra 129)
131
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 129)
130
(adjstk '2)
(mov (& 2) a1)
(adjstk '4)
(return)
))
(loader'((entry #:modtoc:change-lab subr2)
(push a2)
(push a1)
101
(btnil (& 0) 102)
(mov (& 0) a4)
(bfcons (car a4) 104)
(mov (car a4) a3)
(push (cdr a3))
105
(bfcons (& 0) 106)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(btcons (car a4) 107)
(mov (& 3) a2)
(mov (car a4) a1)
(jcall assq)
(btnil a1 108)
(mov (& 0) a1)
(mov (& 3) a2)
(mov (car a1) a1)
(jcall cassq)
(mov (& 0) a4)
(mov a1 (car a4))
(bra 108)
107
(mov (car a4) a3)
(cabne (car a3) '@ 111)
(mov (& 3) a2)
(mov (car a4) a1)
(call #:modtoc:change-address)
(bra 108)
111
(mov (car a4) a2)
(bfcons (car a2) 108)
(mov (car a4) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 108)
(push (car a4))
(push (@ 115))
(push (& 5))
(mov '1 a4)
(jmp cirlist)
115
(eval ())
(push a1)
116
(bfcons (& 1) 117)
(bfcons (& 0) 117)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (& 0) a2)
(mov (cdr a2) (& 0))
(mov (car a2) a2)
(mov (car a1) a1)
(call #:modtoc:change-address)
(bra 116)
117
(adjstk '2)
108
(adjstk '1)
(bra 105)
106
(adjstk '1)
104
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:modtoc:change-address subr2)
(push a2)
(push a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall assq)
(btnil a1 101)
(mov (& 0) a4)
(push (cdr a4))
(mov (cdr a4) a1)
(mov (& 2) a2)
(mov (car a1) a1)
(jcall cassq)
(pop a4)
(mov a1 (car a4))
(mov a4 a1)
(adjstk '2)
(return)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:modtoc:inline-callextern subr1)
(push a1)
(jcall nreverse)
(mov a1 (& 0))
(push a1)
101
(mov (& 0) a2)
(mov '(jmp callextern) a1)
(jcall member)
(mov a1 (& 0))
(btnil a1 102)
(push (@ 103))
(push 'bad-formed)
(push dlink)
(push tag)
(stack dlink)
(call #:modtoc:inline-callextern-work)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(jcall nreverse)
(mov a1 (& 0))
(adjstk '1)
(return)
))
(loader'((entry #:modtoc:bad-formed subr2)
(push (@ 101))
(push '"modpeep: INLINE CALLEXTERN: ")
(push a1)
(push '" : ")
(push a2)
(mov '4 a4)
(bra #:modtoc:print-error)
101
(eval ())
(mov nil a1)
(mov 'bad-formed a2)
(jmp #:llcp:exit)
))
(loader'((entry #:modtoc:get-push-fix subr1)
(bfcons a1 101)
(cabne (car a1) 'push 101)
(mov (cdr a1) a4)
(bfcons (car a4) 101)
(mov (cdr a1) a3)
(mov (car a3) a3)
(cabne (car a3) 'quote 101)
(mov (cdr a1) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(bffix (car a2) 101)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
101
(mov a1 a2)
(mov '"bad push fix" a1)
(bra #:modtoc:bad-formed)
))
(loader'((entry #:modtoc:get-push-amper-or-reg subr2)
(bfcons a1 101)
(cabne (car a1) 'push 101)
(mov (cdr a1) a4)
(bfcons (car a4) 103)
(mov (cdr a1) a3)
(mov (car a3) a3)
(cabne (car a3) '& 103)
(mov (cdr a1) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 103)
(push (@ 105))
(push '&)
(mov (cdr a1) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(diff a2 a4)
(push a4)
(mov '2 a4)
(jmp list)
105
(eval ())
(return)
103
(mov (cdr a1) a4)
(mov (car a4) a4)
(cabeq a4 'a1 108)
(cabeq a4 'a2 108)
(cabne a4 'a3 106)
108
(mov (cdr a1) a1)
(mov (car a1) a1)
(return)
106
(mov a1 a2)
(mov '"bad push ampersand or reg" a1)
(bra #:modtoc:bad-formed)
101
(mov a1 a2)
(mov '"bad push ampersand or reg" a1)
(bra #:modtoc:bad-formed)
))
(loader'((entry #:modtoc:get-move-amper-a1 subr2)
(bfcons a1 101)
(cabne (car a1) 'mov 101)
(mov (cdr a1) a4)
(bfcons (car a4) 101)
(mov (cdr a1) a3)
(mov (car a3) a3)
(cabne (car a3) '& 101)
(mov (cdr a1) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 101)
(mov (cdr a1) a4)
(mov (cdr a4) a4)
(cabne (car a4) 'a1 101)
(push (@ 103))
(push '&)
(mov (cdr a1) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(diff a2 a4)
(push a4)
(mov '2 a4)
(jmp list)
103
(eval ())
(return)
101
(mov a1 a2)
(mov '"bad move ampersand a1" a1)
(bra #:modtoc:bad-formed)
))
(loader'((entry #:modtoc:inline-callextern-work subr1)
(push a1)
(push '0)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push a1)
(mov (& 7) a4)
(mov (cdr a4) (& 7))
(mov (& 7) a4)
(mov (cdr a4) (& 7))
(mov (car a4) (& 1))
(bfcons (& 1) 101)
(mov (& 1) a4)
(cabne (car a4) 'mov 101)
(mov (cdr a4) a3)
(mov (cdr a3) a3)
(cabne (car a3) 'a4 101)
(mov (cdr a4) a2)
(bfcons (car a2) 101)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 101)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 101)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) (& 6))
(mov (& 6) (& 5))
(bra 102)
101
(mov (& 1) a2)
(mov '"count" a1)
(call #:modtoc:bad-formed)
102
(mov (& 6) a4)
(diff '2 a4)
(quo '2 a4)
(bra 104)
103
(push a4)
(mov (& 8) a1)
(mov (cdr a1) (& 8))
(mov (car a1) a1)
(call #:modtoc:get-push-fix)
(mov (& 5) a2)
(jcall cons)
(mov a1 (& 5))
(mov (car a1) a4)
(cabeq a4 '0 106)
(cabeq a4 '1 106)
(cabeq a4 '2 106)
(cabeq a4 '3 106)
(cabeq a4 '4 106)
(cabeq a4 '5 106)
(cabeq a4 '6 106)
(cabeq a4 '7 106)
(cabne a4 '8 105)
(bra 106)
105
(mov (& 2) a2)
(mov '" type arg not yet implemented" a1)
(call #:modtoc:bad-formed)
106
(mov (& 6) a4)
(diff '1 a4)
(mov a4 (& 6))
(mov (& 8) a1)
(mov '(push a1) a2)
(mov (car a1) a1)
(jcall equal)
(btnil a1 108)
(mov (& 8) a1)
(mov (cdr a1) a1)
(mov '(jcall vag) a2)
(mov (car a1) a1)
(jcall equal)
(btnil a1 108)
(mov (& 8) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 110)
(mov (& 8) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(cabne (car a3) 'mov 110)
(mov (& 8) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(cabne (car a2) 'a1 110)
(mov (& 8) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabeq a4 'a2 114)
(cabne a4 'a3 112)
114
(push (@ 115))
(push 'vag)
(mov (& 10) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (cdr a3) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
115
(eval ())
(mov (& 5) a2)
(jcall cons)
(mov a1 (& 5))
(bra 113)
112
(push (@ 116))
(push 'vag)
(mov (& 10) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (& 8) a2)
(mov (car a1) a1)
(call #:modtoc:get-move-amper-a1)
(push a1)
(mov '2 a4)
(jmp list)
116
(eval ())
(mov (& 5) a2)
(jcall cons)
(mov a1 (& 5))
113
(mov (& 8) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) (& 8))
(bra 109)
110
(push (@ 117))
(push 'vag)
(push 'a1)
(mov '2 a4)
(jmp list)
117
(eval ())
(mov (& 5) a2)
(jcall cons)
(mov a1 (& 5))
(mov (& 8) a4)
(mov (cdr a4) a4)
(mov (cdr a4) (& 8))
(bra 109)
108
(mov (& 8) a1)
(mov (cdr a1) (& 8))
(mov (& 6) a2)
(mov (car a1) a1)
(call #:modtoc:get-push-amper-or-reg)
(mov (& 5) a2)
(jcall cons)
(mov a1 (& 5))
109
(mov (& 6) a4)
(diff '1 a4)
(mov a4 (& 6))
(pop a4)
104
(sobgez a4 103)
(mov (& 7) a1)
(mov (cdr a1) (& 7))
(mov (car a1) a1)
(call #:modtoc:get-push-fix)
(mov a1 (& 3))
(mov a1 a4)
(cabeq a4 '0 119)
(cabeq a4 '1 119)
(cabeq a4 '2 119)
(cabne a4 '3 118)
(bra 119)
118
(mov (& 1) a2)
(mov '" retype arg not yet implemented" a1)
(call #:modtoc:bad-formed)
119
(mov (& 7) a4)
(mov (cdr a4) (& 7))
(mov (car a4) (& 1))
(bfcons (& 1) 121)
(mov (& 1) a4)
(cabne (car a4) 'push 121)
(mov (cdr a4) a3)
(bfcons (car a3) 121)
(mov (cdr a4) a2)
(mov (car a2) a2)
(cabne (car a2) 'eval 121)
(mov (cdr a4) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(bfcons (car a1) 121)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabne (car a4) 'kwote 121)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 121)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabne (car a4) '#:system:cached-getglobal 121)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) (& 2))
(bra 122)
121
(mov (& 1) a2)
(mov '"name" a1)
(call #:modtoc:bad-formed)
122
(mov (& 7) a4)
(mov (cdr a4) (& 7))
(mov (car a4) (& 1))
(bfcons (& 1) 123)
(mov (& 1) a4)
(cabne (car a4) 'push 123)
(mov (cdr a4) a3)
(bfcons (car a3) 123)
(mov (cdr a4) a2)
(mov (car a2) a2)
(cabne (car a2) '@ 123)
(bra 124)
123
(mov (& 1) a2)
(mov '"last push @" a1)
(call #:modtoc:bad-formed)
124
(push (@ 125))
(push 'icallg)
(push (& 8))
(push (& 5))
(mov (& 8) a2)
(mov (& 7) a1)
(jcall cons)
(push a1)
(mov '4 a4)
(jmp list)
125
(eval ())
(mov a1 (& 1))
(push (@ 126))
(push '"modpeep: ICALLG: name= ")
(push (& 4))
(push '" typeret= ")
(push (& 7))
(push '" args= ")
(push (& 10))
(mov '6 a4)
(bra #:modtoc:print-msg)
126
(eval ())
(mov (& 7) a3)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '8)
(jmp rplac)
))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'modopt)))
(defvar #:sys-package:colon 'modopt)
(defvar #:modopt:labels ())
(defvar #:modopt:c-functions ())
(loader'((entry is-a-c-function subr1)
(push a1)
(mov (cvalq #:modopt:c-functions) a2)
(jcall memq)
(bfnil a1 101)
(mov (cvalq #:modopt:c-functions) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:modopt:c-functions))
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry break-function subr0)
(mov (cvalq #:modopt:labels) a4)
(cabeq (car a4) '* 101)
(mov a4 a2)
(mov '* a1)
(jcall cons)
(mov a1 (cvalq #:modopt:labels))
(return)
101
(mov nil a1)
(return)
))
(loader'((entry goto-label subr1)
(btnil a1 101)
(jcall ncons)
(mov (cvalq #:modopt:labels) a2)
(jcall cons)
(mov a1 (cvalq #:modopt:labels))
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:modtoc:find-local-labels subr1)
(entry #:modtoc:find-local-labels subr1)
(push a1)
(mov nil a1)
(jcall ncons)
(mov a1 (cvalq #:modopt:labels))
(mov nil (cvalq #:modopt:c-functions))
(push (& 0))
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:modopt:find-local)
(bra 101)
102
(adjstk '1)
(mov (cvalq #:modopt:labels) a1)
(call #:modopt:rev-and-rem)
(mov a1 (cvalq #:modopt:labels))
(push (car a1))
(mov (cdr a1) a2)
(mov nil a1)
(jcall cons)
(mov (cvalq #:modopt:c-functions) a3)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra doit)
))
(loader'((entry #:modopt:find-local subr1)
(push a1)
(bfcons a1 101)
(mov (car a1) a1)
(cabne a1 'listext 104)
(mov (& 0) a4)
(mov (cdr a4) a4)
(push (car a4))
105
(bfcons (& 0) 106)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call is-a-c-function)
(bra 105)
106
(mov nil a1)
(adjstk '2)
(return)
104
(cabeq a1 'fentry 108)
(cabeq a1 'lentry 108)
(cabeq a1 'entry 108)
(cabeq a1 'call 108)
(cabne a1 'jcall 107)
108
(call break-function)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '1)
(bra is-a-c-function)
107
(cabne a1 'jmp 109)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '1)
(bra is-a-c-function)
109
(cabne a1 'bra 110)
111
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '1)
(bra goto-label)
110
(cabeq a1 'sobgez 113)
(cabeq a1 'sobgtz 113)
(cabeq a1 'btlisp 113)
(cabeq a1 'bflisp 113)
(cabeq a1 'btinvsbl 113)
(cabeq a1 'bfinvsbl 113)
(cabeq a1 'btmark 113)
(cabeq a1 'bfmark 113)
(cabeq a1 'tcmark 113)
(cabeq a1 'incr 113)
(cabeq a1 'decr 113)
(cabeq a1 'negate 113)
(cabeq a1 'nxcons 113)
(cabeq a1 'nxnumb 113)
(cabeq a1 'nxfloat 113)
(cabeq a1 'nxvect 113)
(cabeq a1 'nxsymb 113)
(cabeq a1 'nxstrg 113)
(cabeq a1 'btcons 113)
(cabeq a1 'bfcons 113)
(cabeq a1 'btnil 113)
(cabeq a1 'bfnil 113)
(cabeq a1 'btsymb 113)
(cabeq a1 'bfsymb 113)
(cabeq a1 'btvar 113)
(cabeq a1 'bfvar 113)
(cabeq a1 'btfix 113)
(cabeq a1 'bffix 113)
(cabeq a1 'btfloat 113)
(cabeq a1 'bffloat 113)
(cabeq a1 'btvect 113)
(cabeq a1 'bfvect 113)
(cabeq a1 'btstrg 113)
(cabne a1 'bfstrg 112)
113
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '1)
(bra goto-label)
112
(cabeq a1 'cabeq 115)
(cabeq a1 'cabne 115)
(cabeq a1 'cnbeq 115)
(cabeq a1 'cnbne 115)
(cabeq a1 'cnble 115)
(cabeq a1 'cnblt 115)
(cabeq a1 'cnbge 115)
(cabeq a1 'cnbgt 115)
(cabeq a1 'cfbeq 115)
(cabeq a1 'cfbne 115)
(cabeq a1 'cfble 115)
(cabeq a1 'cfblt 115)
(cabeq a1 'cfbge 115)
(cabeq a1 'cfbgt 115)
(cabeq a1 'plus 115)
(cabeq a1 'diff 115)
(cabeq a1 'times 115)
(cabeq a1 'quo 115)
(cabeq a1 'rem 115)
(cabeq a1 'chblt 115)
(cabne a1 'cvatof 114)
115
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '1)
(bra goto-label)
114
(cabne a1 'hbteq 116)
117
(mov (& 0) a2)
(mov '6 a1)
(jcall nth)
(adjstk '1)
(bra goto-label)
116
(cabne a1 'brx 118)
(mov (& 0) a4)
(mov (cdr a4) a4)
(push (car a4))
119
(bfcons (& 0) 120)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:modopt:find-ats)
(bra 119)
120
(mov nil a1)
(adjstk '2)
(return)
118
(mov (& 0) a4)
(push (cdr a4))
122
(bfcons (& 0) 123)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:modopt:find-ats)
(bra 122)
123
(mov nil a1)
(adjstk '2)
(return)
101
(mov (cvalq #:modopt:labels) a2)
(jcall cons)
(mov a1 (cvalq #:modopt:labels))
(adjstk '1)
(return)
))
(loader'((entry #:modopt:rev-and-rem subr1)
(bfcons a1 29999)
(mov nil a2)
(bra #:modopt:rev-and-rem-aux)
29999
(return)
))
(loader'((entry #:modopt:rev-and-rem-aux subr2)
(push a2)
(push a1)
(mov (cvalq #:modopt:c-functions) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 102)
(mov (& 1) a2)
(mov '* a1)
(jcall cons)
(mov a1 (& 1))
102
(mov (& 0) a4)
(bfnil (cdr a4) 103)
(mov (& 1) (cdr a4))
(mov a4 a1)
(adjstk '2)
(return)
103
(push (cdr a4))
(mov (& 2) (cdr a4))
(mov a4 a2)
(pop a1)
(adjstk '2)
(bra #:modopt:rev-and-rem-aux)
))
(loader'((entry #:modopt:find-ats subr1)
(bfcons a1 101)
(cabne (car a1) '@ 101)
(mov (cdr a1) a1)
(mov (car a1) a1)
(bra is-a-c-function)
101
(mov nil a1)
(return)
))
(defvar #:modopt:doit-debug ())
(loader'((entry doit subr3)
(push a3)
(push a2)
(btnil (cvalq #:modopt:doit-debug) 102)
(push (@ 103))
(push '"********** ")
(push a1)
(mov '2 a4)
(jmp print)
103
(eval ())
(push (@ 104))
(push '6)
(mov '1 a4)
(jmp lmargin)
104
(eval ())
(push (@ 105))
(push '"  << labelist >> ")
(mov '1 a4)
(jmp print)
105
(eval ())
(push (& 0))
106
(bfcons (& 0) 107)
(push (@ 108))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
108
(eval ())
(bra 106)
107
(adjstk '1)
(push (@ 109))
(push '0)
(mov '1 a4)
(jmp lmargin)
109
(eval ())
(push (@ 110))
(mov '0 a4)
(jmp terpri)
110
(eval ())
(push (@ 111))
(push '6)
(mov '1 a4)
(jmp lmargin)
111
(eval ())
(push (@ 112))
(push '"  << cfunctlist >> ")
(mov '1 a4)
(jmp print)
112
(eval ())
(push (& 1))
113
(bfcons (& 0) 114)
(push (@ 115))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
115
(eval ())
(bra 113)
114
(adjstk '1)
(push (@ 116))
(push '0)
(mov '1 a4)
(jmp lmargin)
116
(eval ())
(push (@ 117))
(mov '0 a4)
(jmp terpri)
117
(eval ())
102
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra hack)
))
(loader'((entry hack subr2)
(push a2)
(push a1)
(mov (car a1) a1)
(jcall ncons)
(mov (& 0) a4)
(push nil)
(push (cdr a4))
(push a1)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(btcons (car a4) 104)
(cabeq (car a4) '* 104)
(mov (& 4) a2)
(mov (car a4) a1)
(jcall memq)
(bfnil a1 104)
(mov (& 1) a1)
(mov (car a1) a1)
(jcall ncons)
(push a1)
(push a1)
(mov (& 2) a2)
(mov '* a1)
(jcall memq)
(mov a1 a2)
(pop a1)
(jcall member)
(bfnil a1 106)
(mov (& 2) a2)
(mov '* a1)
(jcall memq)
(mov a1 a2)
(mov (& 0) a1)
(jcall member)
(bfnil a1 106)
(mov (& 2) a1)
(mov a1 a3)
(mov (& 1) a2)
(mov (car a1) a1)
(call rechloc)
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
106
(adjstk '1)
104
(mov (& 1) a4)
(push (cdr a4))
(mov (& 1) (cdr a4))
(mov a4 (& 1))
(pop a4)
(mov a4 (& 1))
(bra 101)
102
(btnil (cvalq #:modopt:doit-debug) 108)
(push (@ 109))
(push '6)
(mov '1 a4)
(jmp lmargin)
109
(eval ())
(push (@ 110))
(push '"== localabel apre`s rechloc")
(mov '1 a4)
(jmp print)
110
(eval ())
(push (& 2))
111
(bfcons (& 0) 112)
(push (@ 113))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
113
(eval ())
(bra 111)
112
(adjstk '1)
(push (@ 114))
(push '0)
(mov '1 a4)
(jmp lmargin)
114
(eval ())
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
108
(mov (& 2) a1)
(call rechdep)
(mov a1 (& 2))
(btnil (cvalq #:modopt:doit-debug) 117)
(push (@ 118))
(push '6)
(mov '1 a4)
(jmp lmargin)
118
(eval ())
(push (@ 119))
(push '"== localabel apre`s recdep")
(mov '1 a4)
(jmp print)
119
(eval ())
(push (& 2))
120
(bfcons (& 0) 121)
(push (@ 122))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
122
(eval ())
(bra 120)
121
(adjstk '1)
(push (@ 123))
(push '0)
(mov '1 a4)
(jmp lmargin)
123
(eval ())
(push (@ 124))
(mov '0 a4)
(jmp terpri)
124
(eval ())
117
(mov (& 2) a1)
(adjstk '5)
(return)
))
(loader'((entry rechloc subr3)
(push a3)
(push a2)
(push a1)
(jcall ncons)
(push nil)
(push nil)
(push a1)
101
(btnil (& 4) 102)
(mov (& 4) a4)
(cabeq (car a4) '* 102)
(mov (& 4) a1)
(mov (car a1) a1)
(jcall nlistp)
(btnil a1 103)
(mov (& 4) a1)
(mov (& 1) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 1))
(bra 104)
103
(mov (& 4) a2)
(mov (car a2) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 104)
(push (@ 107))
(push (& 3))
(push (& 3))
(mov '2 a4)
(jmp append)
107
(eval ())
(mov a1 (& 2))
(mov nil (& 1))
104
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(bra 101)
102
(btnil (cvalq #:modopt:doit-debug) 109)
(push (@ 110))
(push '"ldep lbefore for ")
(push (& 5))
(push '": ")
(push (& 6))
(mov '4 a4)
(jmp print)
110
(eval ())
109
(mov nil (& 1))
111
(btnil (& 5) 112)
(mov (& 5) a4)
(cabeq (car a4) '* 112)
(mov (& 5) a1)
(mov (car a1) a1)
(jcall nlistp)
(btnil a1 113)
(mov (& 5) a1)
(mov (& 1) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 1))
(bra 114)
113
(mov (& 5) a2)
(mov (car a2) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 114)
(push (@ 117))
(push (& 3))
(push (& 3))
(mov '2 a4)
(jmp append)
117
(eval ())
(mov a1 (& 2))
(mov nil (& 1))
114
(mov (& 5) a4)
(mov (cdr a4) (& 5))
(bra 111)
112
(btnil (cvalq #:modopt:doit-debug) 119)
(push (@ 120))
(push '"ldep lafter for ")
(push (& 5))
(push '": ")
(push (& 6))
(mov '4 a4)
(jmp print)
120
(eval ())
119
(mov (& 2) a2)
(mov (& 3) a1)
(adjstk '6)
(jmp cons)
))
(loader'((entry rechdep subr1)
(push a1)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a4)
(push (cdr a4))
(push 't)
105
(bfcons (& 1) 106)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 6) a2)
(mov (& 0) a1)
(jcall assq)
(adjstk '1)
(mov a1 (& 0))
(btnil a1 106)
(bra 105)
106
(mov (& 0) a4)
(adjstk '2)
(btnil a4 103)
(mov (& 0) a1)
(jcall ncons)
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (@ 109))
(mov (& 2) a1)
(jcall length)
(push a1)
(mov (& 2) a1)
(jcall length)
(push a1)
(mov '2 a4)
(jmp =)
109
(eval ())
(btnil a1 107)
(push (& 0))
(push nil)
110
(bfcons (& 1) 111)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 110)
111
(mov (& 0) a1)
(adjstk '4)
(jmp nreverse)
107
(mov (& 0) a1)
(adjstk '2)
(bra rechdep)
))
(loader '((end)))
