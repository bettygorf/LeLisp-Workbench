(loader '(
(listext (sublis rassoc rassq cassoc cassq assoc assq pairlis acons nconc nconc1 newr newl nextl delete delq nsubst cirlist desetq psetq setqq fset setq placdl rplac rplacd rplaca boblist oblist subst lastn firstn copylist remove remq append appnd1 reverse makelist mcons fncons fxcons llcons nthcdr nth last tailp nequal neq lleq boundp consp nlistp listp stringp vectorp constantp variablep symbolp atomp atom llnot llnull false true copy kwote nreconc evlis displace lllength deset nreverse equal list memq member ini_std vag loc eqvectri eqstrgi makevect strgallc stringa2 gaeqn apply evala1 evalcar istdsym inicst inisymb gcnumb gcfloat gccons errbpa errilb erroob errudv errudf errwna errnva errnla errnia errsym errfs evalan evalt))
(entry startmodule subr0)
	(title fntstd)
	(xrefi llinit mstack)
	(xrefi llinit fcons)
	(xrefi llinit bvar)
	(xrefi llinit hashtab)
	(xrefi llinit |.undef|)
	(xrefi llinit |.t|)
	(xrefi llinit |.void|)
	(xrefp toperr errfs)
	(xrefp toperr errsym)
	(xrefp toperr errnia)
	(xrefp toperr errnla)
	(xrefp toperr errnva)
	(xrefp toperr errwna)
	(xrefp toperr errudf)
	(xrefp toperr errudv)
	(xrefp toperr erroob)
	(xrefp toperr errilb)
	(xrefp toperr errbpa)
	(xrefp gc gccons)
	(xrefp gc gcfloat)
	(xrefp gc gcnumb)
	(xrefp read inisymb)
	(xrefp read inicst)
	(xrefp read istdsym)
	(xrefp eval evalcar)
	(xrefp eval evala1)
	(xrefi eval savea1)
	(xrefi eval savea2)
	(xrefi eval savea3)
	(xrefi eval savea4)
	(xrefp eval apply)
	(xrefi cntrl tabtypfn)
	(xrefi cntrl tabcodfn)
	(xrefi cntrl |.quote|)
	(xrefi cntrl |.progn|)
	(xrefi cntrl |.lambda|)
	(xrefi cntrl |.flambda|)
	(xrefi cntrl |.mlambda|)
	(xrefp number gaeqn)
	(xrefp string stringa2)
	(xrefp string strgallc)
	(xrefp string makevect)
	(xrefp string eqstrgi)
	(xrefp string eqvectri)
	(xrefp bllsht loc)
	(xrefp bllsht vag)
	(xdefp ini_std)
	(xdefp member)
	(xdefp memq)
	(xdefp list)
	(xdefp equal)
	(xdefp nreverse)
	(xdefp deset)
	(xdefp lllength)
	(xdefp displace)
	(xdefp evlis)
	(xdefp nreconc)
	(xdefp kwote)
	(xdefp copy)
	(xdefi |.llcons|)
	(xdefi |.mcons|)
	(xdefi |.llnull|)
	(xdefi |.list|)
	(xdefi |.nconc|)
	(xdefi |.append|)
	(pure)
ini_std
	(eval ())
	(makfnt true '4 (strg "true"))
	(makfnt false '5 (strg "false"))
	(makfnt llnot '3 (strg "not"))
	(makfnt llnull '4 (strg "null"))
	(makfnt atom '4 (strg "atom"))
	(makfnt atomp '5 (strg "atomp"))
	(makfnt symbolp '7 (strg "symbolp"))
	(makfnt variablep '9 (strg "variablep"))
	(makfnt constantp '9 (strg "constantp"))
	(makfnt vectorp '7 (strg "vectorp"))
	(makfnt stringp '7 (strg "stringp"))
	(makfnt listp '5 (strg "listp"))
	(makfnt nlistp '6 (strg "nlistp"))
	(makfnt consp '5 (strg "consp"))
	(makfnt boundp '6 (strg "boundp"))
	(makfnt lleq '2 (strg "eq"))
	(makfnt neq '3 (strg "neq"))
	(makfnt equal '5 (strg "equal"))
	(makfnt nequal '6 (strg "nequal"))
	(makfnt memq '4 (strg "memq"))
	(makfnt member '6 (strg "member"))
	(makfnt tailp '5 (strg "tailp"))
	(makfnt last '4 (strg "last"))
	(makfnt nthcdr '6 (strg "nthcdr"))
	(makfnt nth '3 (strg "nth"))
	(makfnt lllength '6 (strg "length"))
	(makfnt llcons '4 (strg "cons"))
	(makfnt fxcons '5 (strg "xcons"))
	(makfnt fncons '5 (strg "ncons"))
	(makfnt mcons '5 (strg "mcons"))
	(makfnt list '4 (strg "list"))
	(makfnt evlis '5 (strg "evlis"))
	(makfnt kwote '5 (strg "kwote"))
	(makfnt makelist '8 (strg "makelist"))
	(makfnt reverse '7 (strg "reverse"))
	(makfnt append '6 (strg "append"))
	(makfnt appnd1 '7 (strg "append1"))
	(makfnt remq '4 (strg "remq"))
	(makfnt remove '6 (strg "remove"))
	(makfnt copy '4 (strg "copy"))
	(makfnt copylist '8 (strg "copylist"))
	(makfnt firstn '6 (strg "firstn"))
	(makfnt lastn '5 (strg "lastn"))
	(makfnt subst '5 (strg "subst"))
	(makfnt oblist '6 (strg "oblist"))
	(makfnt boblist '7 (strg "boblist"))
	(makfnt rplaca '6 (strg "rplaca"))
	(makfnt rplacd '6 (strg "rplacd"))
	(makfnt rplac '5 (strg "rplac"))
	(makfnt placdl '6 (strg "placdl"))
	(makfnt displace '8 (strg "displace"))
	(makfnt setq '4 (strg "setq"))
	(makfnt fset '3 (strg "set"))
	(makfnt setqq '5 (strg "setqq"))
	(makfnt psetq '5 (strg "psetq"))
	(makfnt deset '5 (strg "deset"))
	(makfnt desetq '6 (strg "desetq"))
	(makfnt cirlist '7 (strg "cirlist"))
	(makfnt nreverse '8 (strg "nreverse"))
	(makfnt nsubst '6 (strg "nsubst"))
	(makfnt delq '4 (strg "delq"))
	(makfnt delete '6 (strg "delete"))
	(makfnt nreconc '7 (strg "nreconc"))
	(makfnt nextl '5 (strg "nextl"))
	(makfnt newl '4 (strg "newl"))
	(makfnt newr '4 (strg "newr"))
	(makfnt nconc '5 (strg "nconc"))
	(makfnt nconc1 '6 (strg "nconc1"))
	(makfnt acons '5 (strg "acons"))
	(makfnt pairlis '7 (strg "pairlis"))
	(makfnt assq '4 (strg "assq"))
	(makfnt assoc '5 (strg "assoc"))
	(makfnt cassq '5 (strg "cassq"))
	(makfnt cassoc '6 (strg "cassoc"))
	(makfnt rassq '5 (strg "rassq"))
	(makfnt rassoc '6 (strg "rassoc"))
	(makfnt sublis '6 (strg "sublis"))
	(return)
fntret
	(return)
	(lentry true 5)
	(adjstk a4)
	(mov |.t| a1)
	(return)
	(lentry false 5)
	(adjstk a4)
	(movnil a1)
	(return)
	(lentry llnull 2)
	(btnil a1 llnullt)
	(movnil a1)
	(return)
llnullt
	(mov |.t| a1)
	(return)
	(lentry llnot 2)
	(btnil a1 llnott)
	(movnil a1)
	(return)
llnott
	(mov |.t| a1)
	(return)
	(lentry atom 2)
	(bfcons a1 atomt)
	(movnil a1)
	(return)
atomt
	(mov |.t| a1)
	(return)
	(lentry atomp 2)
	(bfcons a1 atompt)
	(movnil a1)
	(return)
atompt
	(mov |.t| a1)
	(return)
	(lentry symbolp 2)
	(btsymb a1 symbolpt)
	(movnil a1)
	(return)
symbolpt
	(mov |.t| a1)
	(return)
	(lentry variablep 2)
	(btvar a1 varpret)
	(movnil a1)
varpret
	(return)
	(lentry constantp 2)
	(btfix a1 conpt)
	(btfloat a1 conpt)
	(btstrg a1 conpt)
	(btvect a1 conpt)
	(btcons a1 conpret)
	(bfvar a1 conpt)
conpret
	(movnil a1)
	(return)
conpt
	(mov |.t| a1)
	(return)
	(lentry vectorp 2)
	(btvect a1 vectret)
	(movnil a1)
vectret
	(return)
	(lentry stringp 2)
	(btstrg a1 strgret)
	(movnil a1)
strgret
	(return)
	(lentry listp 2)
	(btnil a1 listpt)
	(btcons a1 listpt)
	(movnil a1)
	(return)
listpt
	(mov |.t| a1)
	(return)
	(lentry nlistp 2)
	(bfcons a1 nlistpr)
	(movnil a1)
nlistpr
	(return)
	(lentry consp 2)
	(btcons a1 conspr)
	(movnil a1)
conspr
	(return)
	(lentry boundp 2)
	(bfsymb a1 boundp1)
	(mov (cval a1) a2)
	(cabne a2 |.undef| boundpt)
boundp1
	(movnil a1)
	(return)
boundpt
	(mov |.t| a1)
	(return)
	(lentry lleq 3)
	(cabeq a1 a2 lleqt)
	(movnil a1)
	(return)
lleqt
	(mov |.t| a1)
	(return)
	(lentry neq 3)
	(cabne a1 a2 neqt)
	(movnil a1)
	(return)
neqt
	(mov |.t| a1)
	(return)
	(lentry nequal 3)
	(push (@ llnot))
	(bra equal)
	(nop)
	(lentry equal 3)
	(stack a3)
	(push (@ ret_call_equal2_1))
	(bra equal2)
ret_call_equal2_1
	(eval ())
	(mov |.t| a1)
	(return)
equaln
	(eval ())
	(sstack a3)
	(movnil a1)
	(return)
equalnt
	(eval ())
	(pop a3)
	(bfnil a1 equalntr)
	(sstack a3)
equalntr
	(return)
equal1
	(eval ())
	(bfcons a2 equaln)
	(push (cdr a1))
	(mov (car a1) a1)
	(push (cdr a2))
	(mov (car a2) a2)
	(intest)
	(cabne a1 a2 equal11)
	(pop a2)
	(pop a1)
	(btcons a1 equal1)
	(bra equal2)
equal11
	(chkstk mstack errfs)
	(push (@ ret_call_equal2_2))
	(bra equal2)
ret_call_equal2_2
	(eval ())
	(pop a2)
	(pop a1)
equal2
	(eval ())
	(cabne a1 a2 equal3)
	(return)
equal3
	(btcons a1 equal1)
	(btsymb a1 equaln)
	(btvect a1 equal7)
	(btstrg a1 equal8)
	(bffix a2 equal4)
	(btfix a1 equaln)
	(bra equal5)
equal4
	(bffloat a2 equaln)
equal5
	(push a3)
	(push (@ equalnt))
	(bra gaeqn)
equal7
	(bfvect a2 equaln)
	(push a3)
	(push (@ equalnt))
	(bra eqvectri)
equal8
	(bfstrg a2 equaln)
	(push a3)
	(push (@ equalnt))
	(bra eqstrgi)
savequal
	(push a2)
	(push a3)
	(push (@ ret_call_equal_3))
	(bra equal)
ret_call_equal_3
	(eval ())
	(pop a3)
	(pop a2)
	(return)
	(lentry memq 3)
	(bra memq2)
memq1
	(mov (car a2) a3)
	(cabeq a3 a1 memq3)
	(mov (cdr a2) a2)
	(intest)
memq2
	(btcons a2 memq1)
	(movnil a2)
memq3
	(mov a2 a1)
	(return)
	(lentry member 3)
	(btcons a2 memb1)
	(movnil a1)
	(return)
memb1
	(push a2)
	(push a1)
	(mov (car a2) a2)
	(push (@ ret_call_equal_4))
	(bra equal)
ret_call_equal_4
	(eval ())
	(bfnil a1 memb3)
	(pop a1)
	(pop a2)
	(mov (cdr a2) a2)
	(btcons a2 memb1)
	(movnil a1)
	(return)
memb3
	(adjstk '1)
	(pop a1)
	(return)
	(lentry tailp 3)
	(bra tailp3)
tailp2
	(cabeq a1 a2 tailp9)
	(mov (cdr a2) a2)
	(intest)
tailp3
	(btcons a2 tailp2)
	(movnil a1)
tailp9
	(return)
	(lentry last 2)
	(bfcons a1 lastret)
last1
	(mov (cdr a1) a2)
	(bfcons a2 lastret)
	(mov (cdr a2) a1)
	(intest)
	(btcons a1 last1)
	(mov a2 a1)
lastret
	(return)
	(lentry nth 3)
	(bffix a1 ntherr)
	(bra nth2)
nth1
	(mov (cdr a2) a2)
nth2
	(bfcons a2 nthf)
	(sobgez a1 nth1)
	(mov (car a2) a1)
	(return)
nthf
	(movnil a1)
	(return)
ntherr
	(mov |.nth| a2)
	(bra errnia)
	(lentry nthcdr 3)
	(bffix a1 nthcerr)
	(bra nthc2)
nthc1
	(mov (cdr a2) a2)
nthc2
	(bfcons a2 nthcf)
	(sobgez a1 nthc1)
	(mov a2 a1)
	(return)
nthcf
	(movnil a1)
	(return)
nthcerr
	(mov |.nthcdr| a2)
	(bra errnia)
	(lentry lllength 2)
	(mov '0 a2)
	(bra lengt2)
lengt1
	(mov (cdr a1) a1)
	(incr a2)
	(intest)
lengt2
	(btcons a1 lengt1)
	(mov a2 a1)
	(return)
	(lentry llcons 3)
	(xcons a2 a1)
	(return)
	(lentry fxcons 3)
	(cons a2 a1)
	(return)
	(lentry fncons 2)
	(ncons a1)
	(return)
	(lentry mcons 5)
	(cnbeq a4 '0 mconsf)
	(pop a1)
	(bra mcons2)
mcons1
	(pop a2)
	(cons a2 a1)
mcons2
	(sobgtz a4 mcons1)
	(return)
mconsf
	(movnil a1)
	(return)
	(lentry list 5)
	(movnil a1)
	(bra lists2)
lists1
	(pop a2)
	(cons a2 a1)
lists2
	(sobgez a4 lists1)
	(return)
	(lentry evlis 2)
	(bfcons a1 fntret)
	(push (cdr a1))
	(push (@ ret_call_evalcar_5))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_5
	(eval ())
	(pop a3)
	(ncons a1)
	(push a1)
list1
	(eval ())
	(bfcons a3 list2)
	(push a1)
	(push (cdr a3))
	(mov (car a3) a1)
	(push (@ ret_call_evala1_6))
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evala1_6
	(eval ())
	(pop a3)
	(ncons a1)
	(pop a2)
	(mov a1 (cdr a2))
	(bra list1)
list2
	(pop a1)
	(return)
	(lentry kwote 2)
	(ncons a1)
	(cons |.quote| a1)
	(return)
	(lentry makelist 3)
	(bffix a1 makeler)
	(movnil a3)
	(bra makel3)
makel2
	(cons a2 a3)
makel3
	(sobgez a1 makel2)
	(mov a3 a1)
	(return)
makeler
	(mov |.makelist| a2)
	(bra errnia)
	(lentry reverse 2)
	(movnil a2)
	(bra rev2)
rev1
	(mov (car a1) a3)
	(mov (cdr a1) a1)
	(cons a3 a2)
rev2
	(btcons a1 rev1)
	(mov a2 a1)
	(return)
	(lentry appnd1 3)
	(ncons a2)
	(push a1)
	(push a2)
	(mov '2 a4)
	(bra append)
	(lentry append 5)
	(cnbeq a4 '0 appendf)
	(pop a1)
	(bra append4)
append1
	(eval ())
	(pop a2)
	(bfcons a2 append4)
	(cons (car a2) a1)
	(push a1)
	(bra append3)
append2
	(eval ())
	(cons (car a2) (cdr a1))
	(mov (cdr a1) a1)
append3
	(mov (cdr a2) a2)
	(intest)
	(btcons a2 append2)
	(pop a1)
append4
	(sobgtz a4 append1)
	(return)
appendf
	(movnil a1)
	(return)
	(lentry remq 3)
	(btcons a2 remq6)
	(mov a2 a1)
	(return)
remq6
	(mov (car a2) a3)
	(mov (cdr a2) a2)
	(cabeq a3 a1 remq)
	(intest)
	(chkstk mstack errfs)
	(push a3)
	(push (@ ret_call_remq_7))
	(bra remq)
ret_call_remq_7
	(eval ())
	(pop a3)
	(cons a3 a1)
	(return)
	(lentry remove 3)
	(mov a2 a3)
remv1
	(eval ())
	(btcons a3 remv4)
	(mov a3 a1)
	(return)
remv4
	(chkstk mstack errfs)
	(push a1)
	(mov (car a3) a2)
	(push (@ ret_call_savequal_8))
	(bra savequal)
ret_call_savequal_8
	(eval ())
	(mov a1 a4)
	(pop a1)
	(mov (cdr a3) a3)
	(bfnil a4 remv1)
	(push a2)
	(push (@ ret_call_remv1_9))
	(bra remv1)
ret_call_remv1_9
	(eval ())
	(pop a2)
	(cons a2 a1)
	(return)
	(lentry copylist 2)
	(bfcons a1 fntret)
	(intest)
	(chkstk mstack errfs)
	(push (cdr a1))
	(mov (car a1) a1)
	(push (@ ret_call_copylist_10))
	(bra copylist)
ret_call_copylist_10
	(eval ())
	(xtopst a1)
	(push (@ ret_call_copylist_11))
	(bra copylist)
ret_call_copylist_11
	(eval ())
	(pop a2)
	(cons a2 a1)
	(return)
	(lentry copy 2)
	(intest)
	(chkstk mstack errfs)
	(bfcons a1 copy3)
	(push (cdr a1))
	(btinvsbl a1 copy2)
	(mov (car a1) a1)
	(push (@ ret_call_copy_12))
	(bra copy)
ret_call_copy_12
	(eval ())
	(xtopst a1)
	(push (@ ret_call_copy_13))
	(bra copy)
ret_call_copy_13
	(eval ())
	(pop a2)
	(cons a2 a1)
	(return)
copy2
	(mov (car a1) a1)
	(push (@ ret_call_copy_14))
	(bra copy)
ret_call_copy_14
	(eval ())
	(xtopst a1)
	(push (@ ret_call_copy_15))
	(bra copy)
ret_call_copy_15
	(eval ())
	(pop a2)
	(cons a2 a1)
	(stinvsbl a1)
	(return)
copy3
	(bfstrg a1 copy4)
	(push a1)
	(hgsize a1 a2)
	(push (@ ret_call_strgallc_16))
	(bra strgallc)
ret_call_strgallc_16
	(eval ())
	(pop a3)
	(mov (typ a3) (typ a1))
	(hbmovm a2 a3 '0 a1 '0)
	(return)
copy4
	(bfvect a1 fntret)
	(push a1)
	(hgsize a1 a1)
	(push a1)
	(movnil a2)
	(push (@ ret_call_makevect_17))
	(bra makevect)
ret_call_makevect_17
	(eval ())
	(mov a1 a2)
	(pop a4)
	(pop a3)
	(mov (typ a3) (typ a1))
	(bra copy6)
copy5
	(push a4)
	(push a3)
	(push a2)
	(hpxmov a3 a4 a1)
	(push (@ ret_call_copy_18))
	(bra copy)
ret_call_copy_18
	(eval ())
	(pop a2)
	(pop a3)
	(pop a4)
	(hpmovx a1 a2 a4)
copy6
	(sobgez a4 copy5)
	(mov a2 a1)
	(return)
	(lentry firstn 3)
	(mov |.firstn| a4)
	(bffix a1 firserr1)
	(bfcons a2 firserr2)
	(cnble a1 '0 firsf)
	(mov (car a2) a3)
	(ncons a3)
	(push a3)
	(bra firs1)
firs0
	(mov (cdr a2) a2)
	(bfcons a2 firs3)
	(mov (car a2) a3)
	(ncons a3)
	(mov a3 (cdr a4))
firs1
	(mov a3 a4)
	(sobgtz a1 firs0)
firs3
	(pop a1)
	(return)
firsf
	(movnil a1)
	(return)
firserr1
	(mov a4 a2)
	(bra errnia)
firserr2
	(mov a2 a1)
	(return)
	(lentry lastn 3)
	(mov |.lastn| a4)
	(bffix a1 firserr1)
	(bfcons a2 firserr2)
	(cnble a1 '0 lastnf)
	(mov a2 a3)
lastn0
	(intest)
	(mov (cdr a2) a2)
	(cnbeq '0 a1 lastn1)
	(decr a1 lastn2)
lastnd
	(bra lastn2)
lastn1
	(mov (cdr a3) a3)
lastn2
	(btcons a2 lastn0)
	(push a3)
	(movnil a1)
	(push a1)
	(mov '2 a4)
	(bra append)
lastnf
	(movnil a1)
	(return)
	(lentry subst 4)
	(chkstk mstack errfs)
	(push a1)
	(mov a3 a1)
	(pop a3)
substt2
	(push a1)
	(push (@ ret_call_savequal_19))
	(bra savequal)
ret_call_savequal_19
	(eval ())
	(btnil a1 substt4)
	(pop a1)
	(mov a3 a1)
substt3
	(return)
substt4
	(pop a1)
	(bfcons a1 substt3)
	(push a1)
	(push (cdr a1))
	(mov (car a1) a1)
	(push (@ ret_call_substt2_20))
	(bra substt2)
ret_call_substt2_20
	(eval ())
	(xtopst a1)
	(push (@ ret_call_substt2_21))
	(bra substt2)
ret_call_substt2_21
	(eval ())
	(pop a4)
	(xtopst a2)
	(cabne (car a2) a4 substt8)
	(cabne (cdr a2) a1 substt8)
	(mov a2 a1)
	(pop a2)
	(return)
substt8
	(cons a4 a1)
	(pop a2)
	(return)
	(lentry oblist 5)
	(movnil a1)
	(movnil a2)
	(cnbeq a4 '0 oblist0)
	(pop a2)
	(cnbeq a4 '1 oblist0)
	(pop a3)
	(cnbeq a4 '2 oblisp0)
	(mov '2 a1)
	(mov |.oblist| a2)
	(bra errwna)
oblist0
	(eval ())
	(bfsymb a2 obliser1)
	(hgsize hashtab a4)
	(decr a4)
oblist1
	(hpxmov hashtab a4 a4)
	(bra oblist8)
oblist2
	(mov a4 a3)
	(btstrg (pname a4) oblist4)
oblist3
	(mov (pname a4) a4)
oblist4
	(eval ())
oblist5
	(btnil a2 oblist6)
	(cabne (pkgc a4) a2 oblist7)
oblist6
	(cons a4 a1)
oblist7
	(eval ())
	(cabne a4 a3 oblist3)
	(mov (alink a4) a4)
oblist8
	(btsymb a4 oblist2)
	(sobgez a4 oblist1)
	(return)
oblisp0
	(eval ())
	(bfsymb a2 obliser1)
	(bfsymb a3 obliser2)
	(mov a2 a4)
	(btstrg (pname a4) oblisp3)
oblisp2
	(mov (pname a4) a4)
oblisp3
	(btnil a3 oblisp4)
	(cabne (pkgc a4) a3 oblisp5)
oblisp4
	(cons a4 a1)
oblisp5
	(cabne a4 a2 oblisp2)
	(return)
obliser1
	(mov a2 a1)
	(bra obliser3)
obliser2
	(mov a3 a1)
obliser3
	(mov |.oblist| a2)
	(bra errsym)
	(lentry boblist 5)
	(cnbeq a4 '1 boblon)
	(cnbeq a4 '0 boblis1)
	(mov '1 a1)
	(mov |.boblist| a2)
	(bra errwna)
boblis1
	(movnil a4)
	(hgsize hashtab a1)
	(bra boblis9)
boblis2
	(push a1)
	(push (@ ret_call_boblon2_22))
	(bra boblon2)
ret_call_boblon2_22
	(eval ())
	(cons a1 a4)
	(pop a1)
boblis9
	(sobgez a1 boblis2)
	(mov a4 a1)
	(return)
boblon
	(eval ())
	(pop a1)
	(btfix a1 boblon1)
bobloer
	(mov |.boblist| a2)
	(bra errnia)
bobloer2
	(mov |.boblist| a2)
	(bra erroob)
boblon1
	(cnblt a1 '0 bobloer2)
	(hgsize hashtab a2)
	(cnbge a1 a2 bobloer2)
boblon2
	(hpxmov hashtab a1 a2)
	(movnil a1)
	(bra boblon8)
boblon3
	(cabeq a2 |.undef| boblon7)
	(btstrg (pname a2) boblon6)
	(push a4)
	(movnil a4)
	(mov a2 a3)
boblon4
	(mov (pname a3) a3)
	(cons a3 a4)
	(cabne a3 a2 boblon4)
	(cons a4 a1)
	(pop a4)
	(bra boblon7)
boblon6
	(cons a2 a1)
boblon7
	(mov (alink a2) a2)
boblon8
	(btsymb a2 boblon3)
	(return)
	(lentry rplaca 3)
	(bfcons a1 rplaca1)
	(mov a2 (car a1))
	(return)
rplaca1
	(mov |.rplaca| a2)
	(bra errnla)
	(lentry rplacd 3)
	(bfcons a1 rplacd1)
	(mov a2 (cdr a1))
	(return)
rplacd1
	(mov |.rplacd| a2)
	(bra errnla)
	(lentry rplac 4)
	(bfcons a1 rplac1)
	(mov a2 (car a1))
	(mov a3 (cdr a1))
	(return)
rplac1
	(mov |.rplac| a2)
	(bra errnla)
	(lentry displace 3)
	(bfcons a1 displ2)
	(btcons a2 displ1)
	(mov |.progn| (car a1))
	(ncons a2)
	(mov a2 (cdr a1))
	(return)
displ1
	(mov (car a2) (car a1))
	(mov (cdr a2) (cdr a1))
	(bfinvsbl a2 displret)
	(stinvsbl a1)
displret
	(return)
displ2
	(mov |.displace| a2)
	(bra errnla)
	(lentry placdl 3)
	(bfcons a1 placd1)
	(ncons a2)
	(mov a2 (cdr a1))
	(mov a2 a1)
	(return)
placd1
	(mov |.placdl| a2)
	(bra errnla)
	(lentry setq 6)
	(mov a1 a2)
	(btcons a2 setq1)
	(return)
setq1
	(mov a2 a1)
	(push (car a1))
	(mov (cdr a1) a1)
	(bfcons a1 setqer2)
	(push (cdr a1))
	(push (@ ret_call_evalcar_23))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_23
	(eval ())
	(pop a2)
	(pop a3)
	(bfvar a3 setqer1)
	(mov a1 (cval a3))
	(btcons a2 setq1)
	(return)
setqer1
	(mov a3 a1)
	(mov |.setq| a2)
	(bra errnva)
setqer2
	(mov '2 a1)
	(mov |.setq| a2)
	(bra errwna)
	(lentry fset 3)
	(bfvar a1 seterr)
	(mov a2 (cval a1))
	(mov a2 a1)
	(return)
seterr
	(mov |.fset| a2)
	(bra errnva)
	(lentry setqq 6)
	(movnil a3)
	(bra setqq3)
setqq1
	(mov (car a1) a2)
	(bfvar a2 setqqer1)
	(mov (cdr a1) a1)
	(bfcons a1 setqqer2)
	(mov (car a1) a3)
	(mov a3 (cval a2))
	(mov (cdr a1) a1)
setqq3
	(btcons a1 setqq1)
	(mov a3 a1)
	(return)
setqqer1
	(mov a2 a1)
	(mov |.setqq| a2)
	(bra errnva)
setqqer2
	(mov '2 a1)
	(mov |.setqq| a2)
	(bra errwna)
	(lentry psetq 6)
	(mov '0 a4)
	(bra psetq5)
psetq2
	(mov (car a1) a2)
	(bfvar a2 psetqerr)
	(push a2)
	(mov (cdr a1) a1)
	(push a1)
	(push a4)
	(push (@ ret_call_evalcar_24))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_24
	(eval ())
	(pop a4)
	(xtopst a1)
	(mov (cdr a1) a1)
	(incr a4)
psetq5
	(btcons a1 psetq2)
	(bra psetq4)
psetq3
	(pop a1)
	(pop a2)
	(mov a1 (cval a2))
psetq4
	(sobgez a4 psetq3)
	(return)
psetqerr
	(mov a2 a1)
	(mov |.psetq| a2)
	(bra errnva)
	(lentry deset 3)
	(mov |.deset| a4)
deset0
	(eval ())
	(mov a4 savea4)
	(push (@ ret_call_deset4_25))
	(bra deset4)
ret_call_deset4_25
	(eval ())
	(mov |.t| a1)
	(return)
deset2
	(bfcons a2 deset6)
	(push (cdr a1))
	(push (cdr a2))
	(mov (car a1) a1)
	(mov (car a2) a2)
	(push (@ ret_call_deset5_26))
	(bra deset5)
ret_call_deset5_26
	(eval ())
	(pop a2)
	(pop a1)
deset4
	(btnil a1 fntret)
deset5
	(btcons a1 deset2)
	(btvar a1 deset8)
	(mov savea4 a2)
	(bra errbpa)
deset6
	(ncons a2)
	(xcons a2 a1)
	(mov savea4 a2)
	(bra errilb)
deset8
	(mov a2 (cval a1))
	(return)
	(lentry desetq 6)
	(push (car a1))
	(mov (cdr a1) a1)
	(push (@ ret_call_evalcar_27))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_27
	(eval ())
	(mov a1 a2)
	(pop a1)
	(mov |.desetq| a4)
	(bra deset0)
	(lentry cirlist 5)
	(cnbeq a4 '0 cirlistf)
	(pop a1)
	(ncons a1)
	(mov a1 a3)
	(bra cirlist3)
cirlist2
	(pop a2)
	(cons a2 a1)
cirlist3
	(sobgtz a4 cirlist2)
	(mov a1 (cdr a3))
	(return)
cirlistf
	(movnil a1)
	(return)
	(lentry nreconc 3)
	(bra frev2)
frev1
	(mov (cdr a1) a3)
	(mov a2 (cdr a1))
	(bfcons a3 frevret)
	(mov (cdr a3) a2)
	(mov a1 (cdr a3))
	(bfcons a2 frev9)
	(mov (cdr a2) a1)
	(mov a3 (cdr a2))
frev2
	(btcons a1 frev1)
	(mov a2 a1)
	(return)
frev9
	(mov a3 a1)
frevret
	(return)
	(lentry nsubst 4)
	(mov a1 a4)
nsloop
	(chkstk mstack errfs)
	(push a3)
	(mov a3 a1)
	(push a4)
	(push (@ ret_call_savequal_28))
	(bra savequal)
ret_call_savequal_28
	(eval ())
	(pop a4)
	(btnil a1 nsub0)
	(mov a4 a1)
	(pop a3)
	(return)
nsub2
	(mov (cdr a3) a3)
	(intest)
nsub0
	(bfcons a3 nsubret)
	(push a3)
	(mov (car a3) a3)
	(push (@ ret_call_nsloop_29))
	(bra nsloop)
ret_call_nsloop_29
	(eval ())
	(pop a3)
	(mov a1 (car a3))
nsub1
	(mov (cdr a3) a1)
	(push a4)
	(push (@ ret_call_savequal_30))
	(bra savequal)
ret_call_savequal_30
	(eval ())
	(pop a4)
	(btnil a1 nsub2)
nsub3
	(mov a4 (cdr a3))
nsubret
	(pop a1)
	(return)
	(lentry delq 3)
delq0
	(bfcons a2 delqret)
	(cabne (car a2) a1 delq1)
	(mov (cdr a2) a2)
	(bra delq0)
delq1
	(mov a2 a4)
delq2
	(mov a4 a3)
delq3
	(mov (cdr a4) a4)
	(bfcons a4 delqret)
	(cabne (car a4) a1 delq2)
	(mov (cdr a4) (cdr a3))
	(intest)
	(bra delq3)
delqret
	(mov a2 a1)
	(return)
	(lentry delete 3)
	(bra dele4)
dele0
	(push a1)
	(mov (car a2) a2)
	(push (@ ret_call_equal_31))
	(bra equal)
ret_call_equal_31
	(eval ())
	(btnil a1 dele1)
	(pop a1)
	(pop a2)
	(mov (cdr a2) a2)
dele4
	(push a2)
	(btcons a2 dele0)
deleret
	(pop a1)
	(return)
dele1
	(pop a2)
	(topst a4)
dele2
	(mov a4 a3)
dele3
	(mov (cdr a4) a4)
	(bfcons a4 deleret)
	(mov (car a4) a1)
	(push a4)
	(push (@ ret_call_savequal_32))
	(bra savequal)
ret_call_savequal_32
	(eval ())
	(pop a4)
	(btnil a1 dele2)
	(mov (cdr a4) (cdr a3))
	(intest)
	(bra dele3)
	(lentry nreverse 2)
	(movnil a2)
	(bra nreconc)
	(lentry nextl 6)
	(mov (car a1) a2)
	(bfvar a2 nextlerr)
	(push (cdr a1))
	(mov (cval a2) a3)
	(btcons a3 nextl4)
	(btnil a3 nextl4)
	(mov a2 a1)
	(mov |.nextl| a2)
	(bra errnla)
nextl4
	(mov (car a3) a1)
	(mov (cdr a3) a3)
	(mov a3 (cval a2))
	(pop a2)
	(bfcons a2 nextl9)
	(mov (car a2) a2)
	(bfvar a2 nextlerr)
	(mov a1 (cval a2))
nextl9
	(return)
nextlerr
	(mov a2 a1)
	(mov |.nextl| a2)
	(bra errnva)
	(lentry newl 6)
	(push (car a1))
	(mov (cdr a1) a1)
	(push (@ ret_call_evalcar_33))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_33
	(eval ())
	(pop a2)
	(bfvar a2 newlerr)
	(mov (cval a2) a3)
	(cabeq a3 |.undef| newlerr1)
	(xcons a3 a1)
	(mov a1 (cval a2))
	(return)
newlerr
	(mov a2 a1)
	(mov |.newl| a2)
	(bra errnva)
newlerr1
	(mov a2 a1)
	(mov |.newl| a2)
	(bra errudv)
	(lentry newr 6)
	(mov (car a1) a2)
	(bfvar a2 newrerr)
	(push a2)
	(mov (cdr a1) a1)
	(push (@ ret_call_evalcar_34))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_34
	(eval ())
	(pop a2)
	(mov (cval a2) a3)
	(ncons a1)
	(btcons a3 newr3)
	(mov a1 (cval a2))
	(bra newr9)
newr3
	(push a3)
	(bra newr6)
newr4
	(mov a4 a3)
newr6
	(mov (cdr a3) a4)
	(btcons a4 newr4)
	(mov a1 (cdr a3))
	(pop a1)
newr9
	(return)
newrerr
	(mov a2 a1)
	(mov |.newr| a2)
	(bra errnva)
	(lentry nconc1 3)
	(ncons a2)
	(push a1)
	(push a2)
	(mov '2 a4)
	(bra nconc)
	(nop)
	(lentry nconc 5)
	(cnbeq a4 '0 fnconcf)
	(pop a1)
	(bra fnconc4)
fnconc1
	(topst a2)
	(btcons a2 fnconc3)
	(pop a2)
	(bra fnconc4)
fnconc2
	(mov (cdr a2) a2)
	(intest)
fnconc3
	(btcons (cdr a2) fnconc2)
	(mov a1 (cdr a2))
	(pop a1)
fnconc4
	(sobgtz a4 fnconc1)
	(return)
fnconcf
	(movnil a1)
	(return)
	(lentry acons 4)
	(push a3)
	(xcons a2 a1)
	(pop a2)
	(xcons a2 a1)
	(return)
	(lentry pairlis 4)
	(movnil a4)
	(ncons a4)
	(push a4)
	(push a3)
	(bra pairlis5)
pairlis2
	(mov (car a2) a3)
	(cons (car a1) a3)
	(ncons a3)
	(mov a3 (cdr a4))
	(mov a3 a4)
	(mov (cdr a1) a1)
	(mov (cdr a2) a2)
pairlis5
	(bfcons a1 pairlis8)
	(btcons a2 pairlis2)
	(btnil a2 pairlis2)
	(mov a2 a1)
	(mov |.pairlis| a2)
	(bra errnla)
pairlis8
	(pop a1)
	(mov a1 (cdr a4))
	(pop a1)
	(mov (cdr a1) a1)
	(return)
	(lentry assq 3)
	(bfcons a2 assq3)
	(mov a1 a3)
assq1
	(mov (car a2) a1)
	(bfcons a1 assq2)
	(mov (car a1) a4)
	(cabeq a4 a3 assqret)
assq2
	(mov (cdr a2) a2)
	(btcons a2 assq1)
assq3
	(movnil a1)
assqret
	(return)
	(lentry assoc 3)
	(btcons a2 asso1)
	(movnil a1)
	(return)
asso1
	(mov (car a2) a3)
	(bfcons a3 asso5)
	(push a1)
	(push a2)
	(mov (car a3) a2)
	(push a3)
	(push (@ ret_call_equal_35))
	(bra equal)
ret_call_equal_35
	(eval ())
	(bfnil a1 asso9)
	(adjstk '1)
	(pop a2)
	(pop a1)
asso5
	(mov (cdr a2) a2)
	(btcons a2 asso1)
	(movnil a1)
	(return)
asso9
	(eval ())
	(pop a1)
	(adjstk '2)
	(return)
	(lentry cassq 3)
	(bra cassq3)
cassq1
	(mov (car a2) a3)
	(bfcons a3 cassq2)
	(mov (car a3) a4)
	(cabeq a4 a1 cassq4)
cassq2
	(mov (cdr a2) a2)
cassq3
	(btcons a2 cassq1)
	(movnil a1)
	(return)
cassq4
	(mov (cdr a3) a1)
	(return)
	(lentry cassoc 3)
	(bra casso8)
casso1
	(mov (car a2) a3)
	(bfcons a3 casso5)
	(push a1)
	(push a2)
	(mov (car a3) a2)
	(push a3)
	(push (@ ret_call_equal_36))
	(bra equal)
ret_call_equal_36
	(eval ())
	(bfnil a1 casso9)
	(adjstk '1)
	(pop a2)
	(pop a1)
casso5
	(mov (cdr a2) a2)
casso8
	(btcons a2 casso1)
	(movnil a1)
	(return)
casso9
	(eval ())
	(pop a1)
	(mov (cdr a1) a1)
	(adjstk '2)
	(return)
	(lentry rassq 3)
	(bfcons a2 rassq3)
	(mov a1 a3)
rassq1
	(mov (car a2) a1)
	(bfcons a1 rassq2)
	(mov (cdr a1) a4)
	(cabeq a4 a3 rassqret)
rassq2
	(mov (cdr a2) a2)
	(btcons a2 rassq1)
rassq3
	(movnil a1)
rassqret
	(return)
	(lentry rassoc 3)
	(bra rasso8)
rasso1
	(mov (car a2) a3)
	(bfcons a3 rasso5)
	(push a1)
	(push a2)
	(mov (cdr a3) a2)
	(push a3)
	(push (@ ret_call_equal_37))
	(bra equal)
ret_call_equal_37
	(eval ())
	(bfnil a1 rasso9)
	(adjstk '1)
	(pop a2)
	(pop a1)
rasso5
	(mov (cdr a2) a2)
rasso8
	(btcons a2 rasso1)
	(movnil a1)
	(return)
rasso9
	(eval ())
	(pop a1)
	(adjstk '2)
	(return)
	(lentry sublis 3)
	(btcons a2 sublis5)
	(push a2)
	(mov a1 a2)
	(topst a1)
	(push (@ ret_call_assq_38))
	(bra assq)
ret_call_assq_38
	(eval ())
	(btnil a1 sublis2)
	(pop a2)
	(mov (cdr a1) a1)
	(return)
sublis2
	(pop a1)
	(return)
sublis5
	(intest)
	(chkstk mstack errfs)
	(push a1)
	(push a2)
	(mov (car a2) a2)
	(push (@ ret_call_sublis_39))
	(bra sublis)
ret_call_sublis_39
	(eval ())
	(pop a2)
	(xtopst a1)
	(push a2)
	(mov (cdr a2) a2)
	(push (@ ret_call_sublis_40))
	(bra sublis)
ret_call_sublis_40
	(eval ())
	(pop a3)
	(pop a2)
	(cabne a1 (cdr a3) sublis8)
	(cabne a2 (car a3) sublis8)
	(mov a3 a1)
	(return)
sublis8
	(cons a2 a1)
	(return)
	(end)
))
