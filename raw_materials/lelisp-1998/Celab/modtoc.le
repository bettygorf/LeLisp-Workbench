;;; GELL 15.26: elaboration file for the module: modtoc
;;;             translation done: "Wed June 16 93 18:05:30 "

(with ((outchan ()))
	(print ";Loading elaboration file: modtoc.le"))
(unless (boundp '#:module:compiled-list)
	(setq #:module:compiled-list ()))
(newl #:module:compiled-list 'modtoc)
(setq #:system:read-case-flag t)

(defcelaborate "GZmodtoc" "Wed June 16 93 18:05:30 "

'((module-to-c . subr1) (#:modtoc:stats-global . subr0) (#:modtoc:peephole-optimize . subr1) (#:modtoc:find-local-labels . subr1))

#["GELL 15.26: module-to-C: translating module: " probepathm readdefmodule #:modtoc:c-module-name date #:modtoc:date #:modtoc:suffix-h catenate openo #:modtoc:include-channel #:modtoc:suffix-c #:modtoc:ccode-channel #:modtoc:suffix-le #:modtoc:elaborate-channel #:modtoc:prefix-module-table #:modtoc:c-module-table-name #:modtoc:prefix-litteral-base #:modtoc:c-lit-table-name #:modtoc:list-litterals #:modtoc:list-fentry #:modtoc:list-brx #:modtoc:llm3-ll-name #:modtoc:llm3-functions #:modtoc:extern-llm3-predefined #:modtoc:trace-functions #:modtoc:module-functions #:modtoc:list-of-fvalqued-symbols #:modtoc:gen-new-label-counter #:modtoc:internal-variables-list #:modtoc:in-procedure-c-p outchan ";;; GELL 15.26: elaboration file for the module: " """" ";;;             translation done: """ "(with ((outchan ()))" "(print "";Loading elaboration file: " """))" prin "(unless (boundp '#:module:compiled-list)" "(setq #:module:compiled-list ()))" ")" "(newl #:module:compiled-list '" "(setq #:system:read-case-flag t)" """ */" "/* GELL 15.26: include file for the module: """ "/*             translation done:            """ "impure LLM3 predefined" "extern Ptr" "" (dlink llink fcons evalst) #:modtoc:prefix-impure-llm3 lmargin rmargin inchan outbuf probepatho openi "/* GELL 15.26: source file for the module: """ "/*             translation done:           """ " */" #:modtoc:peephole-optimize-p "/*             peephole-optimize-p:        " #:modtoc:optimize-local-labels-p "/*             optimize-local-labels-p:    " "#include ""lelispc.h"" " ".h"" " "#include """ #:modtoc:stats-on-c-size-p t #:system:read-case-flag (#:system:read-case-flag) lambda eof read loader quote #:modtoc:llm3-module-p "modtoc: not a loader call in a LLM3 module" "LLM3 functions" "()" reverse "intern functions" "static Ptr" "trace functions" " []) () = {" "Ptr (* " "," "};" "static Ptr " "[" "];" #:modtoc:prefix-module-name #:modtoc:prefix-module-date #:modtoc:prefix-module-entry "static const char " "[] = """ """;" "[] = {" "static struct GellEntry " "printable: no function for: " ",	" "{" slength gellmodule "},	/* " " = {" "struct GellModule " "GELLMODULESTAMP," "0};" close "no module description for" module-to-c "	*/" "/*	" " " ";" ", " dentry |1+| list nreconc #:modtoc:use-lit-count #:modtoc:use-nil-count #:modtoc:use-bnumb-count #:modtoc:use-bfloat-count #:modtoc:use-bvect-count #:modtoc:use-bstrg-count #:modtoc:use-bsymb-count #:modtoc:use-bcons-count #:modtoc:use-sp-count #:modtoc:use-a1-count #:modtoc:use-a2-count #:modtoc:use-a3-count #:modtoc:use-a4-count #:modtoc:modify-sp-p #:modtoc:modify-a1-p #:modtoc:modify-a2-p #:modtoc:modify-a3-p #:modtoc:modify-a4-p lit nil bnumb bfloat bvect bstrg bsymb bcons sp a1 a2 a3 a4 "extern Ptr " "() {	/* " "() {	/* trace " #:modtoc:c-body-list #:modtoc:c-ini-seq #:modtoc:c-ret-seq #:modtoc:local-procedure-label-list #:modtoc:backward-references-p #:modtoc:tailrec-p #:modtoc:tailrec-label #:modtoc:current-name "   {	register Ptr aRet" "<<lit>>" "*" "rLit" print equal "	" "  lRet: <<ret>> return (aRet);}}" "<<ret>>" ":" #:modtoc:stats-nb-of-procs #:modtoc:stats-vector |1-| min #:modtoc:register-attribute-list #:modtoc:use-threshold-read-only #:modtoc:use-threshold-read-write #:modtoc:stats-preloaded-registers eqstring " = " #:modtoc:stats-unloaded-registers index exchstring substring outpos terpri #:modtoc:exprs-to-elaborate-channel obase printlevel printlength #:system:print-with-abbrev-flag #:system:print-for-read (#:system:print-with-abbrev-flag #:system:print-for-read) defcelaborate (#:system:print-for-read) " """ kwote vector apply defccheck modtoc #:modtoc:operand "((Ptr) " string #:modtoc:prefix-dot-llm3 "(Ptr) ((UFix) 0x8000)" "(Ptr) " "(Ptr) ((UFix) " car "->Val" cdr "(" " + 1)->Val" cval plist fval " + 2)->Val" pkgc " + 3)->Val" oval " + 4)->Val" alink " + 5)->Val" pftype " + 6)->Val" pname " + 7)->Val" val typ cvalq fvalq & ")->Val" " + " @ % "((Ptr) &" eval getglobal #:system:cached-getglobal chrnth "();" "(int) " "(int) (" "(Fix) " "(Fix) (" erroob #:modtoc:fixpos " += (Fix) " " -= (Fix) " abs " += (Fix) (" "(UFix) " "(UFix) (" #:modtoc:lab member "<<lit>>[" "]" strg explode "bad value" #:modtoc:strg #:modtoc:prinhex-table "0x" #:modtoc:c-verbose-mode "	/* " #:modtoc:local-labels-module #:modtoc:prefix-local-label #:modtoc:previous-instruction (bra bri brx jmp call jcall return) arg2 arg1 (arg2 arg1) entry fentry defcsetfn nconc1 lentry "'LENTRY: no LLM3 entry point" "#define " #:modtoc:prefix-ftype-llm3 "aRet = llrt_jmpd (<<lit>>," #:gell-resetfn:function-name subr0 #:gell-resetfn:function-0 subr1 #:gell-resetfn:function-1 subr2 #:gell-resetfn:function-2 subr3 #:gell-resetfn:function-3 nsubr #:gell-resetfn:function-n fsubr #:gell-resetfn:function-f msubr dmsubr "bad typefn" ");" #:system:error-flag (#:system:error-flag) #:system:error-tag local title endl end nop mov movnil cabeq "==" cabne "!=" btlisp econs bflisp bra jmp bri brx brx_ "{aRet = (Ptr) (" "goto lRet;}" "]); " sobgez "{register Fix aux;" "aux = " " - 1;" " = (Ptr) ((UFix) aux);" "if (aux >= 0) " "}" sobgtz "if (aux > 0) " "else " " = (Ptr) 0;}" stack sstack call calli jcall return "{aRet = (" "++)->Val; goto lRet;}" push "{register Ptr aux;" "(--" ")->Val = aux;}" ")->Val = " pop "aux = (" "++)->Val;" " = aux;}" " = (" popr " =  (" adjstk "{register Fix aux; aux = " "; " " += aux;}" adjstkr " += " movxsp xspmov ")->Val;" xtopst "->Val;" "->Val = " topst (& 0) topstr chkstk "<" btcons ">=" bfcons btnil bfnil btsymb bfsymb btvar bvar bfvar setbvar btfix bffix incr |+| decr |-| plus '0 diff '0 negate times * quo / rem cnbeq cnbne cnble "<=" cnblt cnbge cnbgt ">" land "&" lor "|" lxor "^" lshift " = (Ptr) (UFix) (" " << " " >> " "if (aux >= 0)" " << aux;" "else        aux = " " >> -aux;" " = (Ptr) ((UFix) aux);}" btnumb bfnumb btfloat "if (llrt_floatp (" ") != 0) " bffloat ") == 0) " fplus "fadd" fdiff "fsub" ftimes "fmul" fquo "fdiv" cfbeq "feq" cfbne "fne" cfblt "flt" cfble "fle" cfbgt "fgt" cfbge "fge" cvftoa " = llrt_cvftoa (" cvatof "<<ret>> " " =  llrt_cvatof (" float " = llrt_float (" fix " = llrt_fix (" sin "sin" cos "cos" asin "asin" acos "acos" atan "atan" exp "exp" log "log" log10 "log10" sqrt "sqrt" power "pow" ecomp nth "if (((UFix) " ") < ((UFix) " "))" "else if (((UFix) " ") > ((UFix) " "else" eplus "{register Adr aux;" "aux = (Adr) " " + (Adr) " " = (Ptr) (aux >> HIGHTSHIFT);" " = (Ptr) (aux & LOWMASK);}" etimes " * (Adr) " edivide "aux = (aux << HIGHTSHIFT) | ((Adr)" " = (Ptr) (aux % ((Adr) " "));" "aux = aux / ((Adr) " btvect bfvect hpxmov "->Val + 2 + " hpmovx hpmovm "{register Ptr r1, r2; register int r3;" "r1 = (" "->Val + 2);" "r2 = (" "r3 = " '0 '0 "while (r3--) (r2++)->Val = (r1++)->Val;}" "if ((r1 == r2) && (" " < " ")) {" "r1 += r3 + " "r2 += r3 + " "while (r3--) (--r2)->Val = (--r1)->Val;" " } else {" "r1 += " "r2 += " "while (r3--) (r2++)->Val = (r1++)->Val;}}" btstrg bfstrg hbxmov " = (Ptr) ((unsigned char) *(((char *) (" "->Val + 2)) + " hbmovx "*((char *) (" "->Val + 2) + " ") = (char) " hbmovm "{register char *r1, *r2; register int r3;" "r1 = (char *) (" "r2 = (char *) (" '0 '0 " while (r3--) *r2++ = *r1++;}" "while (r3--) *--r2 = *--r1;" "while (r3--) *r2++ = *r1++;}}" hbteq hbteq_ '0 '0 "if (r3 > 0) while (r3--) if (*r2++ != *r1++) " "goto " movbm "r1 = (char *) " " + 1;" "if (r3 > 0) while (r3--) *r2++ = *r1++;}" hgsize "->Val + 1)->Val;" hssize "->Val + 1)->Val = " hgobj "->Val)->Val;" hsobj "->Val)->Val = " upperc " = (Ptr) (" " - 32);" lowerc " + 32);" calleq callneq calleqn callneqn calllt callle callgt callge callfixp '0 callvectorp callstringp callconsp callerror "llrt_call_error" calllength "llrt_call_length" callnreverse "llrt_call_nreverse" callmemq "llrt_call_memq" callassq "llrt_call_assq" callcassq "llrt_call_cassq" callrassq "llrt_call_rassq" nlist nlist_ mcons (#:modtoc:local-labels-module) (mov nil a1) (pop a2) (cons a2 a1) icallg listext #:modtoc:prefix-external-llm3 xrefi xrefp xdefi xdefp label makfnt "{<<ret>> llrt_inisymb (" ", (Ptr) " ", (Ptr) &" ");}" symbol "MAKFNT: this name already exists: " gell "MAKFNT: another name for: " makcst "{<<ret>> llrt_inicst (" intest "if (" itcount "{<<ret>> llrt_ithard ();}" " != 0) " ifeq endc pure impure ladr gftype "{register UFix aux;" "aux = (UFix) (" " = (Ptr) aux;}" sftype "{register int aux1, aux2;" "aux1 = " "aux1 = aux1 & HIGHTMASK;" "aux2 = " "aux1 = aux1 | aux2;" " = (Ptr) aux1;}" gptype "{register int aux;" "aux = aux >> HIGHTSHIFT;" sptype "aux2 = aux2 << HIGHTSHIFT;" cons #:modtoc:open-cons-p "{register Ptr aux; aux = " fcons "if (aux == " "{<<ret>> llrt_gccons(); aux = " ") " ";}" " = (aux + 1)->Val; aux->Val = " "(aux + 1)->Val = " " = llrt_cons (" xcons ncons stinvsbl btbin "[aux] |= mask;}" clinvsbl "[aux] &= ~mask;}" btinvsbl "[aux] & mask;" "if (aux != 0)" bfinvsbl "if (aux == 0)" stmark btbgc btmark bfmark tcmark "[aux] & mask) {" "[aux] &= ~mask;" "}}" convtok " = (Ptr) (((Adr) " " - (Adr) " ") >> 10);" incrink swpcons gcmark gcstart gcstop sfcons gfcons nxsymb nxnumb nxfloat nxvect nxstrg nxcons chblt nxhb " += 3 + ((" ") / sizeof(Ptr));" nxhp " + 2 + " nxhf nxhs hblt "{register Table src, dst, fin;" "src = (Table) " "dst = (Table) " "fin = (Table) " "while (src != fin) *dst++ = *src++;}" ttyin " = (Ptr) llrt_ttyin();" ttyis "aux = llrt_ttys(llrt_charttys);" " = (Ptr) aux;" "aux = *llrt_charttys;" ttyinstr " = (Ptr) llrt_ttyinstr(" "->Val + 2,(" "->Val + 1)->Val);" ttymsg "llrt_ttyout(" ttycrlf "llrt_ttyout(2, ""\n\r"");" ttystrg infile llrt_infile oufile llrt_oufile apfile llrt_apfile infileb oufileb apfileb inbf llrt_inbf inbfb llrt_inbfb outf " = (Ptr) llrt_outf(" outfl " = (Ptr) llrt_outfl(" outflb fclos " = (Ptr) llrt_fclos(" fdele llrt_fdele frena llrt_frena fcopy llrt_fcopy fprobe llrt_fprobe mkdir llrt_mkdir rmdir llrt_rmdir corsav llrt_corsav corest llrt_corest cline llrt_cline llrt_c_date getenvrn llrt_c_getenv llrt_getgloba callg " = (Ptr) llrt_callg(" runtime " = llrt_runtime();" sleep "llrt_sleep (" setalarm " = llrt_setalarm (" adrhl " = (Ptr) ((Adr) " " >> HIGHTSHIFT);" " & LOWMASK);" hladr " aux = (Ptr) (((Adr) " " << HIGHTSHIFT) + (Adr) " " aux = (Ptr) ((long) aux | LLADRBIAS);" addadr "{register int aux0, aux1, aux2;" "aux0 = (int) ((UFix) " "); aux1 = aux0 << HIGHTSHIFT;" "); aux1 = aux0 + aux1;" "); aux2 = aux0 << HIGHTSHIFT;" "); aux2 = aux0 + aux2;" "aux1 = aux1 + aux2;" "aux0 = (aux1 >> HIGHTSHIFT) & LOWMASK; " " = (Ptr) aux0;" "aux0 = aux1 & LOWMASK; " " = (Ptr) aux0;}" subadr "aux1 = aux1 - aux2;" memset "{register Fix *adr;" "adr = (Fix *) " "*adr = " memget " = (Ptr) ((Fix) *adr);}" memmovm "{register Fix *src, *end, *dst;" "src = (Fix *) " "end = (Fix *) " "dst = (Fix *) " "while (src < end) *dst++ = *src++;}" hovni "llrt_llovni(" #:modtoc:instruction " = (Ptr) " "->Val + 2, " "->Val + 2, &" " = 0;" "Ptr " "{register TableElem aux, mask;" "aux = (TableElem) ((TableElem) " " - (TableElem) " "aux >>= PTR2_SHIFT;" "mask = 1; mask <<= (aux & ELEM_MASK);" "aux >>= ELEM_SHIFT;" incrink_ (#:modtoc:local-labels-module) "aux = (int) (" " + 1);" "if (aux < 1024) {" " = (Ptr) 0;" " = (Ptr) ((UFix) (" " + 1));}}" "{ register int reg_count, i;" "  register TableElem  aux, reg_mask, reg_bask;" "  register Table regbtbgc, regbtbin;" "  register Ptr regecons;" "  reg_count = 0;" "  regbtbin = GIbtbin;" " regecons = GIecons;" "  aux = (TableElem) ((TableElem) " "  aux >>= PTR2_SHIFT + ELEM_SHIFT;" "  regbtbgc = &GIbtbgc[aux];" "  do {" "reg_mask = 1;" "reg_bask = *regbtbgc;" "for (i=0; i<TABLE_ELEM_NB_OF_BIT; i++) {" "if (reg_bask & reg_mask) {" "} else {" "reg_count++;" " += 2;" "reg_mask <<= 1;" "*regbtbin++ &= reg_bask;" "*regbtbgc++ = 0;" "} while (" " < regecons);" " = (Ptr) (reg_count >> 10);" " = (Ptr) (reg_count & 0x3FF);" gcmark_ (#:modtoc:local-labels-module) "if ((" "[aux] & mask) != 0)" (typ a1) estack errfsgc (cdr a1) (car a1) mark (& 0) (typ a1) " callg_retv;" "extern " " callg_arg" " Lfixvector_to_Cfixvector (" " Lfloatvector_to_Cfloatvector (" " callg_retv = ((" "&callg_arg" "callg_arg" " Cfixvector_to_Lfixvector (" " Cfloatvector_to_Lfloatvector (" "Ptr" "long" "double" "modtoc: CALLG C-type, type unknow: " " = ((Ptr) callg_retv);" " = ((Ptr) ((UFix) callg_retv));" " = Cfloat_to_Lfloat(callg_retv);" " = Cstring_to_Lstring((char *) callg_retv);" "modtoc: CALLG C->LL, type unknow: " vag "llrt_vag(" "((Fix) " "Lfloat_to_Cfloat(" "((Ptr) (" "->Val)+2);" "modtoc: CALLG LL->C, type unknow: " #:modtoc:prefix-module-function "modtoc: multiple defined traced symbol: " #:modtoc:prefix-trace-function popj0 popj1 " += (Fix) 1;" popj2 " += (Fix) 2;" popj3 " += (Fix) 3;" popj4 " += (Fix) 4;" popj5 " += (Fix) 5;" popj6 " += (Fix) 6;" popj7 " += (Fix) 7;" popj8 " += (Fix) 8;" popj9 " += (Fix) 9;" popja4 "++)->Val; " #:modtoc:goto-label " aRet = (" "{aRet = " "; goto lRet;}" #:modtoc:next-instruction listp call_ ")->Val = ((Ptr) " digitp letterp "_" "if ((long) " " (long) " " >= " ") && (" ") || (" "if ((aux > FIX_MAX) || (aux < FIX_MIN))" " (" " = llrt_" "if (llrt_" "in a LLM3 module" #:modtoc:call-ptr-test-direct ") ? " 't " : " #:modtoc:call-fix-test-direct #:modtoc:call-type-test-direct ")) " #:modtoc:call-rt-direct-0 " ();" #:modtoc:call-rt-direct-1 #:modtoc:call-rt-direct-2 "** " princn (#:modtoc:next-instruction #:modtoc:previous-instruction) symbolp #:modtoc:local "modtoc: bad module function" #:modtoc:peephole-optimize funcall #:modtoc:find-local-labels 0. #:modtoc:stats-vector-size makevector "Nb of C procedures: " #:modtoc:stats-global-nb-of-procs <= #:modtoc:stats-global-sum "Average per C procedures: " "Preloaded registers:      " "Unloaded  registers:      " "Global nb of C procedures: " " average per C procedures: " #:modtoc:typefn-to-ftype #:modtoc:ftype-to-typefn #:modtoc:peephole-debug "peepbefore" opena (jmp callextern) "peepafter" rplac (a2 a1) (a2 a1) (a1) #:llcp:nlist #:modtoc:list-of-rt-functions (a2 a1) (return) (a1) (return) (return) (adjstk a4) (return) (return) popj concat #:modtoc:loop cirlist (jmp callextern) bad-formed "modpeep: INLINE CALLEXTERN: " #:llcp:exit "bad push fix" "bad push ampersand or reg" "bad move ampersand a1" "count" " type arg not yet implemented" (push a1) (jcall vag) " retype arg not yet implemented" "name" "last push @" "modpeep: ICALLG: name= " " typeret= " " args= " #:modopt:c-functions #:modopt:labels #:modopt:doit-debug "********** " "  << labelist >> " "  << cfunctlist >> " "== localabel apre`s rechloc" "== localabel apre`s recdep" nlistp append "ldep lbefore for " ": " "ldep lafter for " = #:modtoc:stats-global]
)

(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'modtoc)))
(defvar #:sys-package:colon 'modtoc)
(if (not (featurep 'date)) (progn (libload date) (libload libdate)))
(current-language 'english)
(defvar #:modtoc:c-verbose-mode ())
(defvar #:modtoc:peephole-optimize-p t)
(defvar #:modtoc:optimize-local-labels-p t)
(defvar #:modtoc:llm3-module-p ())
(defvar #:modtoc:stats-on-c-size-p t)
(defvar #:modtoc:open-cons-p ())
(defvar #:modtoc:prefix-module-function "GL")
(defvar #:modtoc:prefix-trace-function "GD")
(defvar #:modtoc:prefix-module-table "GZ")
(defvar #:modtoc:prefix-module-name "GN")
(defvar #:modtoc:prefix-module-date "GT")
(defvar #:modtoc:prefix-module-entry "GW")
(defvar #:modtoc:prefix-litteral-base "GY")
(defvar #:modtoc:prefix-local-label "l_")
(defvar #:modtoc:prefix-impure-llm3 "GI")
(defvar #:modtoc:prefix-dot-llm3 "GM")
(defvar #:modtoc:prefix-ftype-llm3 "GF")
(defvar #:modtoc:prefix-external-llm3 "GX")
(defvar #:modtoc:suffix-le ".le")
(defvar #:modtoc:suffix-h ".h")
(defvar #:modtoc:suffix-c ".c")
(defvar #:modtoc:c-module-name ())
(defvar #:modtoc:date ())
(defvar #:modtoc:c-module-table-name ())
(defvar #:modtoc:include-channel ())
(defvar #:modtoc:ccode-channel ())
(defvar #:modtoc:elaborate-channel ())
(defvar #:modtoc:list-litterals ())
(defvar #:modtoc:list-fentry ())
(defvar #:modtoc:list-brx ())
(defvar #:modtoc:list-of-fvalqued-symbols ())
(defvar #:modtoc:llm3-ll-name ())
(defvar #:modtoc:c-lit-table-name ())
(defvar #:modtoc:extern-llm3-predefined (list (cons 'popj0 (catenate #:modtoc:prefix-external-llm3 "popj0")) (cons 'popj1 (catenate #:modtoc:prefix-external-llm3 "popj1")) (cons 'popj2 (catenate #:modtoc:prefix-external-llm3 "popj2")) (cons 'popj3 (catenate #:modtoc:prefix-external-llm3 "popj3")) (cons 'popj4 (catenate #:modtoc:prefix-external-llm3 "popj4")) (cons 'popj5 (catenate #:modtoc:prefix-external-llm3 "popj5")) (cons 'popj6 (catenate #:modtoc:prefix-external-llm3 "popj6")) (cons 'popj7 (catenate #:modtoc:prefix-external-llm3 "popj7")) (cons 'popj8 (catenate #:modtoc:prefix-external-llm3 "popj8")) (cons 'popj9 (catenate #:modtoc:prefix-external-llm3 "popj9")) (cons 'popja4 (catenate #:modtoc:prefix-external-llm3 "popja4")) (cons 'cbindn (catenate #:modtoc:prefix-external-llm3 "unbind1")) (cons 'tag (catenate #:modtoc:prefix-external-llm3 "unbind3")) (cons 'lock (catenate #:modtoc:prefix-external-llm3 "unbind5")) (cons 'prot (catenate #:modtoc:prefix-external-llm3 "unbind7"))))
(defvar #:modtoc:llm3-functions ())
(defvar #:modtoc:module-functions ())
(defvar #:modtoc:trace-functions ())
(defvar #:modtoc:local-labels-module '())
(defvar #:modtoc:gen-new-label-counter 0)
(defvar #:modtoc:internal-variables-list ())
(defcsetfn 'module-to-c "GZmodtoc" 0)
(defvar #:modtoc:in-procedure-c-p ())
(defvar #:modtoc:c-body-list ())
(defvar #:modtoc:c-ini-seq "")
(defvar #:modtoc:c-ret-seq "")
(defvar #:modtoc:local-procedure-label-list ())
(defvar #:modtoc:backward-references-p ())
(defvar #:modtoc:tailrec-p ())
(defvar #:modtoc:tailrec-label ())
(defvar #:modtoc:current-name ())
(defvar #:modtoc:use-threshold-read-only 2)
(defvar #:modtoc:use-threshold-read-write 3)
(defvar #:modtoc:use-lit-count ())
(defvar #:modtoc:use-nil-count ())
(defvar #:modtoc:use-bnumb-count ())
(defvar #:modtoc:use-bfloat-count ())
(defvar #:modtoc:use-bvect-count ())
(defvar #:modtoc:use-bstrg-count ())
(defvar #:modtoc:use-bsymb-count ())
(defvar #:modtoc:use-bcons-count ())
(defvar #:modtoc:use-sp-count ())
(defvar #:modtoc:use-a1-count ())
(defvar #:modtoc:use-a2-count ())
(defvar #:modtoc:use-a3-count ())
(defvar #:modtoc:use-a4-count ())
(defvar #:modtoc:modify-sp-p ())
(defvar #:modtoc:modify-a1-p ())
(defvar #:modtoc:modify-a2-p ())
(defvar #:modtoc:modify-a3-p ())
(defvar #:modtoc:modify-a4-p ())
(defvar #:modtoc:register-attribute-list '((nil "<<nil>>" "rNil") (bnumb "<<bnumb>>" "rBnumb") (bfloat "<<bfloat>>" "rBfloat") (bvect "<<bvect>>" "rBvect") (bstrg "<<bstrg>>" "rBstrg") (bsymb "<<bsymb>>" "rBsymb") (bcons "<<bcons>>" "rBcons") (a1 "<<a1>>" "rA1") (a2 "<<a2>>" "rA2") (a3 "<<a3>>" "rA3") (a4 "<<a4>>" "rA4") (sp "<<sp>>" "rSp")))
(defvar #:modtoc:exprs-to-elaborate-channel ())
(defvar #:modtoc:prinhex-table "0123456789abcdef")
(defvar #:modtoc:previous-instruction ())
(defvar #:modtoc:next-instruction ())
(defvar #:modtoc:stats-global-nb-of-procs 0.)
(defvar #:modtoc:stats-nb-of-procs 0.)
(defvar #:modtoc:stats-global-sum 0.)
(defvar #:modtoc:stats-vector-size 32)
(defvar #:modtoc:stats-vector ())
(defvar #:modtoc:stats-preloaded-registers 0.)
(defvar #:modtoc:stats-unloaded-registers 0.)
(defcsetfn '#:modtoc:stats-global "GZmodtoc" 1)
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'modpeep)))
(defvar #:sys-package:colon 'modtoc)
(defvar #:modtoc:peephole-debug ())
(defvar #:modtoc:loop 11999)
(defvar #:modtoc:list-of-rt-functions '((eq . calleq) (neq . callneq) (eqn . calleqn) (neqn . callneqn) (fixp . callfixp) (vectorp . callvectorp) (stringp . callstringp) (consp . callconsp) (lt . calllt) (le . callle) (gt . callgt) (ge . callge) (memq . callmemq) (assq . callassq) (cassq . callcassq) (rassq . callrassq) (length . calllength) (nreverse . callnreverse) (error . callerror)))
(defcsetfn '#:modtoc:peephole-optimize "GZmodtoc" 2)
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'modopt)))
(defvar #:sys-package:colon 'modopt)
(defvar #:modopt:labels ())
(defvar #:modopt:c-functions ())
(defcsetfn '#:modtoc:find-local-labels "GZmodtoc" 3)
(defvar #:modopt:doit-debug ())

(defccheck '(= append nlistp #:llcp:exit cirlist concat rplac opena / * <= |+| makevector funcall symbolp princn letterp digitp listp symbol mcons nth nconc1 explode member abs eval chrnth string apply kwote printlength printlevel obase terpri outpos substring exchstring index eqstring min |1-| equal print nreconc list |1+| close slength reverse read openi probepatho outbuf inchan rmargin lmargin prin outchan openo catenate date readdefmodule probepathm))
