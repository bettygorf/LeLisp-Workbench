(loader '((title |create.lo|)))
(setq #:sys-package:colon 'rtproject)
(defvar #:rtproject:analyze-command (if (boundp '#:rtproject:analyze-command) #:rtproject:analyze-command "ll2lm"))
(defvar #:rtproject:make-command (if (boundp '#:rtproject:make-command) #:rtproject:make-command "make"))
(defvar #:rtproject:extension ())
(defvar #:rtproject:permute-lc ())
(defvar #:rtproject:config-ext ".lcf")
(loader'((fentry #:rtproject:build-init subr2)
(entry #:rtproject:build-init subr2)
(push a2)
(mov a1 a4)
(bfnil a4 101)
(hpxmov a2 '15 a4)
101
(push a4)
(mov '0 a2)
(mov (cvalq #:crunch:verbose) a1)
(jcall gt)
(push (cvalq #:rtproject:verbose-makefile))
(mov a1 (cvalq #:rtproject:verbose-makefile))
(push '1)
(push '(#:rtproject:verbose-makefile))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 7) a1)
(jcall #:crunch:save-file)
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp rmargin)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(mov (& 13) a1)
(jcall openo)
(push a1)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(push (@ 108))
(mov '0 a4)
(jmp outbuf)
108
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
107
(eval ())
(push (@ 109))
(push dlink)
(push prot)
(stack dlink)
(mov (& 16) a2)
(mov (& 15) a1)
(call #:rtproject:print-init-makefile)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 110) a3)
109
(push a3)
(push a2)
(push (@ 111))
(push (@ 112))
(mov '0 a4)
(jmp outchan)
112
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
111
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
110
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 113))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
113
(eval ())
(push (@ 114))
(push (& 5))
(mov '1 a4)
(jmp outchan)
114
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '2)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:rtproject:verbose-makefile))
(adjstk '9)
(return)
))
(loader'((entry #:rtproject:print-init-makefile subr2)
(push a2)
(push a1)
(push (@ 101))
(push a2)
(mov '1 a4)
(jmp #:rtproject:all-files)
101
(eval ())
(push a1)
(mov (& 2) a1)
(jcall get-system-directory)
(push a1)
(mov (& 3) a1)
(jcall get-main-ll-object-directory)
(push a1)
(mov (& 4) a1)
(jcall get-main-ll-module-directory)
(push nil)
(push a1)
(hpxmov (& 6) '11 a4)
(mov a4 (cvalq #:rtproject:extension))
(push (@ 102))
(push '"# This makefile was generated by the ILOG Analyzer.")
(mov '1 a4)
(jmp print)
102
(eval ())
(push (@ 103))
(push '"# Version     : ")
(push (cvalq #:crunch:version))
(push '"         Date : ")
(jcall date)
(push a1)
(mov '4 a4)
(jmp print)
103
(eval ())
(push (@ 104))
(push '"# SubVersion  : ")
(push (cvalq #:crunch:subversion))
(mov '2 a4)
(jmp print)
104
(eval ())
(push (@ 105))
(push '"# It enables to build modules from Lisp source files for ")
(mov '1 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push '"# - project : ")
(hpxmov (& 8) '0 a4)
(push a4)
(mov '2 a4)
(jmp print)
106
(eval ())
(push (@ 107))
(push '"#")
(mov '1 a4)
(jmp print)
107
(eval ())
(cnble (cvalq #:crunch:verbose) '1 109)
(mov (cvalq #:sys-package:itsoft) a2)
(mov '#:rtproject:makefile:comment a1)
(jcall cons)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 110))
(push '"# ")
(mov '1 a4)
(jmp prin)
110
(eval ())
(push (@ 111))
(mov '0 a4)
(jmp terpri)
111
(eval ())
(push (@ 112))
(mov '0 a4)
(jmp terpri)
112
(eval ())
(mov (& 13) a1)
(jcall pprint)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '7)
(push (@ 113))
(mov '0 a4)
(jmp terpri)
113
(eval ())
109
(push (@ 114))
(push '"######")
(mov '1 a4)
(jmp print)
114
(eval ())
(push (@ 115))
(push '"# Directories")
(mov '1 a4)
(jmp print)
115
(eval ())
(push (@ 116))
(push '"######")
(mov '1 a4)
(jmp print)
116
(eval ())
(push (@ 117))
(mov '0 a4)
(jmp terpri)
117
(eval ())
(hpxmov (& 6) '2 a1)
(jcall namestring)
(mov a1 a2)
(bfnil a2 118)
(mov '#:pathname:#[ () () (#:pathname:current) () () () ] a1)
(jcall namestring)
(mov a1 a2)
118
(mov '"ROOTDIR" a1)
(jcall #:rtproject:print-env)
(hpxmov (& 6) '5 a1)
(jcall namestring)
(mov a1 a2)
(bfnil a2 119)
(mov '#:pathname:#[ () () (#:pathname:current) () () () ] a1)
(jcall namestring)
(mov a1 a2)
119
(mov '"CRUNCHDIR" a1)
(jcall #:rtproject:print-env)
(mov (cvalq rt-lelisp-directory) a1)
(jcall namestring)
(mov a1 a2)
(mov '"LLDIR" a1)
(jcall #:rtproject:print-env)
(push (@ 120))
(mov '0 a4)
(jmp terpri)
120
(eval ())
(push (@ 121))
(push '"######")
(mov '1 a4)
(jmp print)
121
(eval ())
(push (@ 122))
(push '"# Makefile's environment")
(mov '1 a4)
(jmp print)
122
(eval ())
(push (@ 123))
(push '"######")
(mov '1 a4)
(jmp print)
123
(eval ())
(push (@ 124))
(mov '0 a4)
(jmp terpri)
124
(eval ())
(jcall system)
(jcall string)
(mov a1 a2)
(mov '"SYSTEM" a1)
(jcall #:rtproject:print-env)
(push (@ 125))
(push (cvalq #:rtproject:make-command))
(push '" -f ")
(mov (& 8) a1)
(jcall namestring)
(push a1)
(mov '3 a4)
(jmp catenate)
125
(eval ())
(mov a1 a2)
(mov '"MAKE" a1)
(jcall #:rtproject:print-env)
(hpxmov (& 6) '0 a2)
(mov '"PROJECTNAME" a1)
(jcall #:rtproject:print-env)
(hpxmov (& 6) '13 a1)
(jcall namestring)
(mov a1 a2)
(bfnil a2 126)
(push (@ 127))
(push '"$(CRUNCHDIR)")
(hpxmov (& 8) '0 a4)
(push a4)
(push '".prj")
(mov '3 a4)
(jmp catenate)
127
(eval ())
(mov a1 a2)
126
(mov '"PROJECTFILE" a1)
(jcall #:rtproject:print-env)
(btnil (cvalq #:system:dosp) 128)
(mov '"del" a2)
(bra 129)
128
(btnil (cvalq #:system:vmsp) 130)
(mov '"delete" a2)
(bra 129)
130
(mov '"rm -f" a2)
129
(mov '"RM" a1)
(jcall #:rtproject:print-env)
(btnil (cvalq #:system:dosp) 132)
(mov '"copy" a2)
(bra 133)
132
(btnil (cvalq #:system:vmsp) 134)
(mov '"copy" a2)
(bra 133)
134
(mov '"cp" a2)
133
(mov '"CP" a1)
(jcall #:rtproject:print-env)
(btnil (cvalq #:system:dosp) 136)
(mov '"ren" a2)
(bra 137)
136
(btnil (cvalq #:system:vmsp) 138)
(mov '"rename" a2)
(bra 137)
138
(mov '"mv" a2)
137
(mov '"MV" a1)
(jcall #:rtproject:print-env)
(btnil (cvalq #:system:dosp) 140)
(mov '"echo" a2)
(bra 141)
140
(btnil (cvalq #:system:vmsp) 142)
(mov '"write sys$output" a2)
(bra 141)
142
(mov '"touch" a2)
141
(mov '"TOUCH" a1)
(jcall #:rtproject:print-env)
(btnil (cvalq #:system:dosp) 144)
(mov '"echo" a2)
(bra 145)
144
(btnil (cvalq #:system:vmsp) 146)
(mov '"write sys$output" a2)
(bra 145)
146
(mov '"echo" a2)
145
(mov '"ECHO" a1)
(jcall #:rtproject:print-env)
(push (@ 148))
(mov '0 a4)
(jmp terpri)
148
(eval ())
(push (@ 149))
(push '"######")
(mov '1 a4)
(jmp print)
149
(eval ())
(push (@ 150))
(push '"# Analyzer's options")
(mov '1 a4)
(jmp print)
150
(eval ())
(push (@ 151))
(push '"######")
(mov '1 a4)
(jmp print)
151
(eval ())
(push (@ 152))
(mov '0 a4)
(jmp terpri)
152
(eval ())
(mov (cvalq #:rtproject:analyze-command) a2)
(mov '"ANALYZER" a1)
(jcall #:rtproject:print-env)
(mov '"" a2)
(mov '"OUTPUT" a1)
(jcall #:rtproject:print-env)
(btnil (cvalq #:system:dosp) 153)
(mov '"-update ""$@""" a2)
(bra 154)
153
(btnil (cvalq #:system:vmsp) 155)
(mov '"-update ""$@""" a2)
(bra 154)
155
(mov '"-update \|$@\|" a2)
154
(mov '"FILEOPTION" a1)
(jcall #:rtproject:print-env)
(mov '"" a2)
(mov '"USEROPTIONS" a1)
(jcall #:rtproject:print-env)
(mov '"-load $(PROJECTFILE) -p $(PROJECTNAME) $(OUTPUT)" a2)
(mov '"ANALYZEOPTIONS" a1)
(jcall #:rtproject:print-env)
(push (@ 157))
(push '"######")
(mov '1 a4)
(jmp print)
157
(eval ())
(push (@ 158))
(push '"# LL Objects involved")
(mov '1 a4)
(jmp print)
158
(eval ())
(push (@ 159))
(push '"######")
(mov '1 a4)
(jmp print)
159
(eval ())
(push (@ 160))
(mov '0 a4)
(jmp terpri)
160
(eval ())
(push (@ 161))
(push '"LLOBJS=")
(mov '1 a4)
(jmp prin)
161
(eval ())
(push (& 4))
(push nil)
162
(bfcons (& 1) 163)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 3) a2)
(mov (& 0) a1)
(jcall #:rtproject:make-module-filename)
(jcall namestring)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 162)
163
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(jcall #:rtproject:prinf)
(push (@ 164))
(push '2)
(mov '1 a4)
(jmp terpri)
164
(eval ())
(push (@ 165))
(push '"######")
(mov '1 a4)
(jmp print)
165
(eval ())
(push (@ 166))
(push '"# Generic entries")
(mov '1 a4)
(jmp print)
166
(eval ())
(push (@ 167))
(push '"######")
(mov '1 a4)
(jmp print)
167
(eval ())
(push (@ 168))
(mov '0 a4)
(jmp terpri)
168
(eval ())
(push (@ 169))
(push '"all : $(LLOBJS)")
(mov '1 a4)
(jmp print)
169
(eval ())
(push (@ 170))
(mov '0 a4)
(jmp terpri)
170
(eval ())
(btnil (cvalq #:system:unixp) 172)
(push (@ 173))
(push '"scratch : init1 init2 update make")
(mov '1 a4)
(jmp print)
173
(eval ())
(push (@ 174))
(mov '0 a4)
(jmp terpri)
174
(eval ())
(push (@ 175))
(push '"init1 : clean")
(mov '1 a4)
(jmp print)
175
(eval ())
(push (@ 176))
(push '9)
(mov '1 a4)
(jmp princn)
176
(eval ())
(push (@ 177))
(push '"$(MAKE) all FILEOPTION=""-r -defmodule \|\$$\$$MODNAME\| -o \|\$$@\|""")
(mov '1 a4)
(jmp print)
177
(eval ())
(push (@ 178))
(push '9)
(mov '1 a4)
(jmp princn)
178
(eval ())
(push (@ 179))
(push '"@$(TOUCH) init1")
(mov '1 a4)
(jmp print)
179
(eval ())
(push (@ 180))
(mov '0 a4)
(jmp terpri)
180
(eval ())
(push (@ 181))
(push '"init2 : ")
(mov '1 a4)
(jmp print)
181
(eval ())
(push (@ 182))
(push '9)
(mov '1 a4)
(jmp princn)
182
(eval ())
(push (@ 183))
(push '"$(MAKE) all FILEOPTION=""-r -defmodule \|\$$\$$MODNAME\| -o \|\$$@\|""")
(mov '1 a4)
(jmp print)
183
(eval ())
(push (@ 184))
(push '9)
(mov '1 a4)
(jmp princn)
184
(eval ())
(push (@ 185))
(push '"@$(TOUCH) init2")
(mov '1 a4)
(jmp print)
185
(eval ())
(push (@ 186))
(mov '0 a4)
(jmp terpri)
186
(eval ())
(push (@ 187))
(push '"update : ")
(mov '1 a4)
(jmp print)
187
(eval ())
(push (@ 188))
(push '9)
(mov '1 a4)
(jmp princn)
188
(eval ())
(push (@ 189))
(push '"$(MAKE) all FILEOPTION=""-r -update \|\$$@\|""")
(mov '1 a4)
(jmp print)
189
(eval ())
(push (@ 190))
(push '9)
(mov '1 a4)
(jmp princn)
190
(eval ())
(push (@ 191))
(push '"@$(TOUCH) update")
(mov '1 a4)
(jmp print)
191
(eval ())
(push (@ 192))
(mov '0 a4)
(jmp terpri)
192
(eval ())
(push (@ 193))
(push '"make : ")
(hpxmov (& 8) '14 a1)
(jcall namestring)
(push a1)
(mov '2 a4)
(jmp print)
193
(eval ())
(push (@ 194))
(mov '0 a4)
(jmp terpri)
194
(eval ())
(push (@ 195))
(hpxmov (& 7) '14 a1)
(jcall namestring)
(push a1)
(push '" : $(LLOBJS)")
(mov '2 a4)
(jmp print)
195
(eval ())
(push (@ 196))
(push '9)
(mov '1 a4)
(jmp princn)
196
(eval ())
(push (@ 197))
(push '"$(ANALYZER) $(ANALYZEOPTIONS) -makefile $(USEROPTIONS)")
(mov '1 a4)
(jmp print)
197
(eval ())
(push (@ 198))
(mov '0 a4)
(jmp terpri)
198
(eval ())
(push (@ 199))
(push '"cleanobj :")
(mov '1 a4)
(jmp print)
199
(eval ())
(push (@ 200))
(push '9)
(mov '1 a4)
(jmp princn)
200
(eval ())
(push (@ 201))
(push '"$(RM) $(LLOBJS)")
(mov '1 a4)
(jmp print)
201
(eval ())
(push (@ 202))
(mov '0 a4)
(jmp terpri)
202
(eval ())
(push (@ 203))
(push '"cleanfiles :")
(mov '1 a4)
(jmp print)
203
(eval ())
(push (@ 204))
(push '9)
(mov '1 a4)
(jmp princn)
204
(eval ())
(push (@ 205))
(push '"$(RM) ")
(hpxmov (& 8) '12 a1)
(jcall namestring)
(push a1)
(mov '2 a4)
(jmp print)
205
(eval ())
(push (@ 206))
(push '9)
(mov '1 a4)
(jmp princn)
206
(eval ())
(push (@ 207))
(push '"$(RM) ")
(hpxmov (& 8) '14 a1)
(jcall namestring)
(push a1)
(mov '2 a4)
(jmp print)
207
(eval ())
(push (@ 208))
(mov '0 a4)
(jmp terpri)
208
(eval ())
(push (@ 209))
(push '"clean : cleanobj cleanfiles")
(mov '1 a4)
(jmp print)
209
(eval ())
(push (@ 210))
(push '9)
(mov '1 a4)
(jmp princn)
210
(eval ())
(push (@ 211))
(push '"@$(RM) init1 init2 update")
(mov '1 a4)
(jmp print)
211
(eval ())
(push (@ 212))
(push '2)
(mov '1 a4)
(jmp terpri)
212
(eval ())
172
(push (@ 213))
(push '"info :")
(mov '1 a4)
(jmp print)
213
(eval ())
(push (@ 214))
(mov '0 a4)
(jmp terpri)
214
(eval ())
(push (@ 215))
(push '"work :")
(mov '1 a4)
(jmp print)
215
(eval ())
(push (@ 216))
(mov '0 a4)
(jmp terpri)
216
(eval ())
(push (@ 217))
(push '".PRECIOUS : $(LLOBJS)")
(mov '1 a4)
(jmp print)
217
(eval ())
(push (@ 218))
(mov '0 a4)
(jmp terpri)
218
(eval ())
(push (@ 219))
(push '"######")
(mov '1 a4)
(jmp print)
219
(eval ())
(push (@ 220))
(push '"# ANALYZER dependencies")
(mov '1 a4)
(jmp print)
220
(eval ())
(push (@ 221))
(push '"######")
(mov '1 a4)
(jmp print)
221
(eval ())
(push (@ 222))
(mov '0 a4)
(jmp terpri)
222
(eval ())
(push (& 4))
223
(bfcons (& 0) 224)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 2) a2)
(mov (& 0) a1)
(call #:rtproject:print-lm-dependencies)
(mov a1 a2)
(mov (& 0) a1)
(call #:rtproject:print-analyzer-command)
(adjstk '1)
(bra 223)
224
(adjstk '1)
(push (@ 225))
(mov '0 a4)
(jmp terpri)
225
(eval ())
(adjstk '7)
(return)
))
(loader'((entry #:rtproject:print-analyzer-command subr2)
(mov (cdr a2) a4)
(mov (car a2) a2)
(push a2)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(push a1)
(mov a2 a1)
(jcall file-namestring)
(push a1)
(mov (& 3) a1)
(jcall namestring)
(push a1)
(push (@ 101))
(push (& 3))
(push (cvalq #:rtproject:config-ext))
(mov '2 a4)
(jmp catenate)
101
(eval ())
(push nil)
(push nil)
(push a1)
(push (@ 102))
(push '9)
(mov '1 a4)
(jmp princn)
102
(eval ())
(push (@ 103))
(push '"@$(ECHO) ""+++++ ANALYZE : """)
(push (& 5))
(mov '2 a4)
(jmp list)
103
(eval ())
(jcall #:rtproject:prinf)
(push (@ 104))
(mov '0 a4)
(jmp terpri)
104
(eval ())
(btnil (cvalq #:rtproject:extension) 106)
(btnil (& 6) 106)
(mov (& 6) a1)
(jcall namestring)
(mov a1 (& 1))
(btnil (cvalq #:rtproject:permute-lc) 107)
(push (@ 109))
(push nil)
(push nil)
(push nil)
(push nil)
(push '"sav")
(push nil)
(mov '6 a4)
(jmp make-pathname)
109
(eval ())
(mov (& 7) a2)
(jcall merge-pathnames)
(jcall namestring)
(mov a1 (& 2))
(push (@ 110))
(push '9)
(mov '1 a4)
(jmp princn)
110
(eval ())
(push (@ 111))
(push '"@")
(push '"$(RM) -f")
(push (& 5))
(mov '3 a4)
(jmp list)
111
(eval ())
(jcall #:rtproject:prinf)
(push (@ 112))
(mov '0 a4)
(jmp terpri)
112
(eval ())
(push (@ 113))
(push '9)
(mov '1 a4)
(jmp princn)
113
(eval ())
(push (@ 114))
(push '"@")
(push '"if [ -f ")
(push (& 6))
(push '"]; then")
(push '"$(MV)")
(push (& 9))
(push (& 9))
(push '(";fi"))
(mov '8 a4)
(jmp mcons)
114
(eval ())
(jcall #:rtproject:prinf)
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
(push (@ 116))
(push '9)
(mov '1 a4)
(jmp princn)
116
(eval ())
(push (@ 117))
(push '"@")
(push '"$(MV)")
(push (& 4))
(push (& 7))
(mov '4 a4)
(jmp list)
117
(eval ())
(jcall #:rtproject:prinf)
(push (@ 118))
(mov '0 a4)
(jmp terpri)
118
(eval ())
(push (@ 119))
(push '9)
(mov '1 a4)
(jmp princn)
119
(eval ())
(push (@ 120))
(push '"@")
(push '"$(CP)")
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp list)
120
(eval ())
(jcall #:rtproject:prinf)
(push (@ 121))
(mov '0 a4)
(jmp terpri)
121
(eval ())
(bra 106)
107
(push (@ 122))
(push '9)
(mov '1 a4)
(jmp princn)
122
(eval ())
(push (@ 123))
(push '"@")
(push '"$(CP)")
(push (& 4))
(push (& 7))
(mov '4 a4)
(jmp list)
123
(eval ())
(jcall #:rtproject:prinf)
(push (@ 124))
(mov '0 a4)
(jmp terpri)
124
(eval ())
106
(btnil (cvalq #:system:dosp) 126)
(btnil (cvalq #:rtproject:config-ext) 126)
(push (@ 127))
(push '9)
(mov '1 a4)
(jmp princn)
127
(eval ())
(push (@ 128))
(push '"$(ECHO) -load ")
(hpxmov (cvalq #:crunch:current-project) '13 a1)
(jcall namestring)
(mov a1 a4)
(bfnil a4 129)
(push (@ 130))
(push '"""")
(hpxmov (cvalq #:crunch:current-project) '5 a1)
(jcall namestring)
(mov a1 a4)
(bfnil a4 131)
(mov '#:pathname:#[ () () (#:pathname:current) () () () ] a1)
(jcall namestring)
(mov a1 a4)
131
(push a4)
(hpxmov (cvalq #:crunch:current-project) '0 a4)
(push a4)
(push '".prj")
(push '"""")
(mov '5 a4)
(jmp catenate)
130
(eval ())
(mov a1 a4)
129
(push a4)
(push '" > ")
(push (& 4))
(mov '4 a4)
(jmp list)
128
(eval ())
(jcall #:rtproject:prinf)
(push (@ 132))
(mov '0 a4)
(jmp terpri)
132
(eval ())
(push (@ 133))
(push '9)
(mov '1 a4)
(jmp princn)
133
(eval ())
(push (@ 134))
(push '"$(ECHO) -p ")
(hpxmov (cvalq #:crunch:current-project) '0 a4)
(push a4)
(push '" >> ")
(push (& 4))
(mov '4 a4)
(jmp list)
134
(eval ())
(jcall #:rtproject:prinf)
(push (@ 135))
(mov '0 a4)
(jmp terpri)
135
(eval ())
(push (@ 136))
(push '9)
(mov '1 a4)
(jmp princn)
136
(eval ())
(push (@ 137))
(push '"$(ECHO) $(FILEOPTION) >> ")
(push (& 2))
(mov '2 a4)
(jmp list)
137
(eval ())
(jcall #:rtproject:prinf)
(push (@ 139))
(push (& 6))
(mov '1 a4)
(jmp concat)
139
(eval ())
(hpxmov (cvalq #:crunch:current-project) '30 a2)
(jcall cassq)
(mov a1 a4)
(bfnil a4 138)
(hpxmov (cvalq #:crunch:current-project) '30 a2)
(mov '"all" a1)
(jcall cassoc)
(mov a1 a4)
138
(push a4)
(push nil)
140
(bfcons (& 1) 141)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 142))
(mov '0 a4)
(jmp terpri)
142
(eval ())
(push (@ 143))
(push '9)
(mov '1 a4)
(jmp princn)
143
(eval ())
(push (@ 144))
(push '"$(ECHO) ")
(push (& 2))
(push '" >> ")
(push (& 7))
(mov '4 a4)
(jmp list)
144
(eval ())
(jcall #:rtproject:prinf)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 140)
141
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push (@ 145))
(mov '0 a4)
(jmp terpri)
145
(eval ())
126
(push (@ 146))
(push '9)
(mov '1 a4)
(jmp princn)
146
(eval ())
(btnil (cvalq #:system:dosp) 147)
(push (@ 149))
(push '"$(ANALYZER) -config ")
(push (& 2))
(push '("$(USEROPTIONS)"))
(mov '3 a4)
(jmp mcons)
149
(eval ())
(jcall #:rtproject:prinf)
(push (@ 150))
(mov '0 a4)
(jmp terpri)
150
(eval ())
(push (@ 151))
(push '9)
(mov '1 a4)
(jmp princn)
151
(eval ())
(push (@ 152))
(push '"$(RM) ")
(push (& 2))
(mov '2 a4)
(jmp list)
152
(eval ())
(jcall #:rtproject:prinf)
(bra 148)
147
(push (@ 153))
(btnil (cvalq #:rtproject:verbose-makefile) 154)
(mov '"(" a4)
(bra 155)
154
(mov '"@(" a4)
155
(push a4)
(push (@ 156))
(push '"MODNAME=")
(push (& 9))
(push '"; ")
(mov '3 a4)
(jmp catenate)
156
(eval ())
(push a1)
(push '"$(ANALYZER) $(FILEOPTION) $(ANALYZEOPTIONS)")
(push (@ 157))
(push (@ 159))
(push (& 11))
(mov '1 a4)
(jmp concat)
159
(eval ())
(hpxmov (cvalq #:crunch:current-project) '30 a2)
(jcall cassq)
(mov a1 a4)
(bfnil a4 158)
(hpxmov (cvalq #:crunch:current-project) '30 a2)
(mov '"all" a1)
(jcall cassoc)
(mov a1 a4)
158
(push a4)
(push '("$(USEROPTIONS)" ")"))
(mov '2 a4)
(jmp append)
157
(eval ())
(push a1)
(mov '4 a4)
(jmp mcons)
153
(eval ())
(jcall #:rtproject:prinf)
148
(push (@ 160))
(mov '0 a4)
(jmp terpri)
160
(eval ())
(btnil (cvalq #:rtproject:extension) 161)
(btnil (& 6) 161)
(btnil (cvalq #:rtproject:permute-lc) 163)
(push (@ 165))
(push '9)
(mov '1 a4)
(jmp princn)
165
(eval ())
(push (@ 166))
(push '"@")
(push '"$(MV)")
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp list)
166
(eval ())
(jcall #:rtproject:prinf)
(push (@ 167))
(mov '0 a4)
(jmp terpri)
167
(eval ())
(push (@ 168))
(push '9)
(mov '1 a4)
(jmp princn)
168
(eval ())
(push (@ 169))
(push '"@")
(push '"if [ -f ")
(push (& 5))
(push '"]; then")
(push '"$(MV)")
(push (& 8))
(push (& 10))
(push '(";fi"))
(mov '8 a4)
(jmp mcons)
169
(eval ())
(jcall #:rtproject:prinf)
(push (@ 170))
(mov '0 a4)
(jmp terpri)
170
(eval ())
(push (@ 171))
(push (& 4))
(push '"::")
(push (& 4))
(mov '3 a4)
(jmp list)
171
(eval ())
(jcall #:rtproject:prinf)
(push (@ 172))
(mov '0 a4)
(jmp terpri)
172
(eval ())
(push (@ 173))
(push '9)
(mov '1 a4)
(jmp princn)
173
(eval ())
(push (@ 174))
(push '"@")
(push '"$(CP)")
(push (& 4))
(push (& 7))
(mov '4 a4)
(jmp list)
174
(eval ())
(jcall #:rtproject:prinf)
(push (@ 175))
(mov '0 a4)
(jmp terpri)
175
(eval ())
(bra 162)
163
(push (@ 176))
(push '9)
(mov '1 a4)
(jmp princn)
176
(eval ())
(push (@ 177))
(push '"@")
(push '"$(CP)")
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp list)
177
(eval ())
(jcall #:rtproject:prinf)
(push (@ 178))
(mov '0 a4)
(jmp terpri)
178
(eval ())
(push (@ 179))
(push '9)
(mov '1 a4)
(jmp princn)
179
(eval ())
(push (@ 180))
(push '"@")
(push '"$(TOUCH)")
(push (& 6))
(mov '3 a4)
(jmp list)
180
(eval ())
(jcall #:rtproject:prinf)
(push (@ 181))
(mov '0 a4)
(jmp terpri)
181
(eval ())
(bra 162)
161
(push (@ 182))
(push '9)
(mov '1 a4)
(jmp princn)
182
(eval ())
(push (@ 183))
(push '"@")
(push '"$(TOUCH)")
(push (& 6))
(mov '3 a4)
(jmp list)
183
(eval ())
(jcall #:rtproject:prinf)
(push (@ 184))
(mov '0 a4)
(jmp terpri)
184
(eval ())
162
(push (@ 185))
(mov '0 a4)
(jmp terpri)
185
(eval ())
(adjstk '8)
(return)
))
(loader'((entry #:rtproject:print-lm-dependencies subr2)
(push a1)
(push 't)
(push (cvalq #:crunch:keep-old))
(mov (& 1) (cvalq #:crunch:keep-old))
(push '1)
(push '(#:crunch:keep-old))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a1)
(btnil a2 101)
(push a2)
(jcall pathname)
(mov a1 a2)
(pop a1)
(jcall combine-pathnames)
(mov a1 a2)
(bra 102)
101
(mov nil a2)
102
(mov nil a3)
(pop a1)
(jcall #:rtproject:build-module)
(push a1)
(mov nil a3)
(mov nil a2)
(mov (& 9) a1)
(call #:rtproject:build-files)
(push a1)
(btnil (cvalq #:rtproject:extension) 103)
(push (@ 105))
(push '".")
(push (cvalq #:rtproject:extension))
(mov '2 a4)
(jmp catenate)
105
(eval ())
(push (cvalq #:system:mod-extension))
(mov a1 (cvalq #:system:mod-extension))
(push '1)
(push '(#:system:mod-extension))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 17) a1)
(jcall probepathm)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:mod-extension))
(adjstk '7)
(mov a1 a4)
(bra 104)
103
(mov nil a4)
104
(push a4)
(push (& 1))
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall probepathf)
(btnil a1 108)
(mov (& 0) a1)
(jcall ncons)
(bra 109)
108
(mov nil a1)
109
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 106)
107
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 (& 1))
(mov (& 2) a1)
(jcall namestring)
(push a1)
(push (@ 110))
(push (& 13))
(push (cvalq #:system:mod-extension))
(mov '2 a4)
(jmp catenate)
110
(eval ())
(push a1)
(mov a1 a2)
(mov (& 1) a1)
(jcall equal)
(bfnil a1 112)
(push (@ 113))
(push (& 1))
(push '":")
(push (& 4))
(mov '3 a4)
(jmp list)
113
(eval ())
(jcall #:rtproject:prinf)
(push (@ 114))
(mov '0 a4)
(jmp terpri)
114
(eval ())
112
(push (@ 115))
(push (& 2))
(btnil (cvalq #:rtproject:extension) 116)
(btnil (& 4) 116)
(btnil (cvalq #:rtproject:permute-lc) 116)
(mov '"::" a4)
(bra 117)
116
(mov '":" a4)
117
(push a4)
(mov '2 a4)
(jmp list)
115
(eval ())
(jcall #:rtproject:prinf)
(adjstk '2)
(cnble (cvalq #:crunch:dependancy) '1 118)
(btnil (cvalq #:rtproject:extension) 121)
(btnil (& 0) 121)
(push (@ 122))
(mov (& 1) a1)
(jcall namestring)
(push a1)
(mov '1 a4)
(jmp list)
122
(eval ())
(jcall #:rtproject:prinf)
121
(push (& 1))
(push nil)
123
(bfcons (& 1) 124)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall probepathf)
(jcall namestring)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 123)
124
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(jcall #:rtproject:prinf)
(mov (& 2) a1)
(jcall probepathm)
(btnil a1 119)
(mov (cvalq #:system:mod-extension) a2)
(mov (& 2) a1)
(call #:rtproject:list-import)
(jcall #:rtproject:prinf)
(bra 119)
118
(cnble (cvalq #:crunch:dependancy) '0 128)
(push (@ 129))
(push '"work")
(mov '1 a4)
(jmp list)
129
(eval ())
(jcall #:rtproject:prinf)
128
(mov (cvalq #:sys-package:itsoft) a2)
(mov '#:rtproject:makefile:comment a1)
(jcall cons)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 130))
(mov '0 a4)
(jmp terpri)
130
(eval ())
(push (& 8))
(push nil)
131
(bfcons (& 1) 132)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall probepathf)
(jcall namestring)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 131)
132
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(jcall #:rtproject:prinf)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '7)
119
(push (@ 133))
(mov '0 a4)
(jmp terpri)
133
(eval ())
(push (@ 134))
(push (& 3))
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp mcons)
134
(eval ())
(adjstk '3)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:keep-old))
(adjstk '9)
(return)
))
(loader'((entry #:rtproject:list-import subr2)
(push (cvalq #:system:mod-extension))
(mov a2 (cvalq #:system:mod-extension))
(push '1)
(push '(#:system:mod-extension))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall readdefmodule)
(mov 'import a2)
(jcall getdefmodule)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall probepathm)
(mov a1 (& 0))
(btnil a1 103)
(jcall namestring)
(jcall ncons)
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:mod-extension))
(adjstk '7)
(return)
))
(loader'((fentry #:rtproject:build-module subr3)
(entry #:rtproject:build-module subr3)
(push a3)
(push a2)
(push a1)
(btnil a2 101)
(mov a2 a1)
(jcall pathname)
(mov a1 a4)
(bra 102)
101
(jcall pathname)
(mov a1 a4)
102
(push a4)
(push a4)
(push (@ 103))
(push (cvalq #:system:mod-extension))
(push '1)
(mov '2 a4)
(jmp substring)
103
(eval ())
(mov a1 a2)
(pop a1)
(jcall set-pathname-type)
(mov (& 3) a3)
(mov (& 0) a2)
(mov (& 1) a1)
(call #:rtproject:build-files)
(push nil)
(push a1)
(bfnil (cvalq #:crunch:keep-wrong) 105)
(bfnil (& 4) 105)
(mov a1 (& 1))
106
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall probepathf)
(mov a1 (& 4))
(bfnil a1 107)
(bra 106)
107
(jcall pathname)
(mov (& 2) a2)
(jcall combine-pathnames)
(mov a1 (& 4))
105
(bfnil (cvalq #:crunch:keep-old) 109)
(push (@ 110))
(mov '0 a4)
(jmp outchan)
110
(eval ())
(push a1)
(push (@ 111))
(push dlink)
(push prot)
(stack dlink)
(push (@ 113))
(mov (& 9) a1)
(jcall openo)
(push a1)
(mov '1 a4)
(jmp outchan)
113
(eval ())
(push (@ 114))
(push dlink)
(push prot)
(stack dlink)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 116))
(push '"defmodule ")
(push (& 20))
(mov '2 a4)
(jmp print)
116
(eval ())
(push (@ 117))
(push '"files ")
(push (& 17))
(mov '2 a4)
(jmp print)
117
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 115) a3)
114
(push a3)
(push a2)
(push (@ 118))
(push (@ 119))
(mov '0 a4)
(jmp outchan)
119
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
118
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
115
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 112) a3)
111
(push a3)
(push a2)
(push (@ 120))
(push (& 4))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
112
(eval ())
(adjstk '1)
109
(adjstk '3)
(mov (& 1) a1)
(adjstk '3)
(return)
))
(loader'((entry #:rtproject:build-files subr3)
(push a3)
(push a1)
(push nil)
(call #:rtproject:b-m)
(mov a1 (& 0))
(btnil (& 2) 102)
(push (@ 103))
(push a1)
(push (& 4))
(mov '2 a4)
(jmp union)
103
(eval ())
(mov a1 (& 0))
102
(bfnil a1 104)
(mov (& 1) a3)
(mov '"no file in module" a2)
(mov 'build-module a1)
(adjstk '3)
(jmp error)
104
(adjstk '3)
(return)
))
(loader'((entry #:rtproject:b-m subr1)
(push a1)
(push nil)
(mov a1 a2)
(mov nil a1)
(jcall symbol)
(hpxmov (cvalq #:crunch:current-project) '23 a2)
(jcall cassq)
(bfnil a1 101)
(btnil (cvalq #:rtproject:extension) 103)
(push (@ 105))
(push '".")
(push (cvalq #:rtproject:extension))
(mov '2 a4)
(jmp catenate)
105
(eval ())
(mov a1 a4)
(bra 104)
103
(mov (cvalq #:system:mod-extension) a4)
104
(push (cvalq #:system:mod-extension))
(mov a4 (cvalq #:system:mod-extension))
(push '1)
(push '(#:system:mod-extension))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 8) a1)
(jcall probepathm)
(mov a1 (& 7))
(btnil a1 106)
(jcall readdefmodule)
(mov 'files a2)
(jcall getdefmodule)
106
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:mod-extension))
(adjstk '7)
(bfnil a1 101)
(hpxmov (cvalq #:crunch:current-project) '22 a4)
(btnil a4 107)
(mov (& 1) a1)
(jcall pathname)
(mov a1 (& 0))
(hpxmov (cvalq #:crunch:current-project) '22 a4)
(push a4)
(push nil)
109
(bfcons (& 1) 110)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a2)
(mov (& 3) a1)
(jcall set-pathname-type)
(mov (& 3) a1)
(jcall file-namestring)
(mov a1 (& 0))
(jcall probepathf)
(btnil a1 111)
(mov (& 0) a1)
(jcall ncons)
(bra 112)
111
(mov nil a1)
112
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 109)
110
(mov (& 0) a1)
(adjstk '4)
(jmp nreverse)
107
(mov (& 1) a1)
(jcall pathname)
(mov a1 (& 0))
(mov '"ll" a2)
(jcall set-pathname-type)
(mov (& 0) a1)
(jcall file-namestring)
(adjstk '2)
(jmp ncons)
101
(adjstk '2)
(return)
))
(loader'((fentry #:rtproject:all-files nsubr)
(entry #:rtproject:all-files nsubr)
(cnbge a4 '1 101)
(mov '#:rtproject:all-files a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov a1 a4)
(bfnil a4 102)
(hpxmov (& 1) '22 a4)
(bfnil a4 102)
(push (@ 103))
(push '"ll")
(mov '1 a4)
(jmp list)
103
(eval ())
(mov a1 a4)
102
(mov a4 (& 0))
(hpxmov (& 1) '19 a3)
(bfcons a3 107)
(hpxmov (& 1) '19 a2)
(mov '"all" a1)
(jcall member)
(bfnil a1 106)
107
(hpxmov (& 1) '18 a4)
(bfcons a4 104)
(hpxmov (& 1) '18 a2)
(mov '"all" a1)
(jcall member)
(btnil a1 104)
106
(push nil)
(hpxmov (& 2) '3 a4)
(push a4)
108
(bfcons (& 0) 109)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 3) a2)
(mov (& 0) a1)
(call #:rtproject:filenames)
(hpxmov (& 4) '0 a3)
(mov (& 2) a2)
(call #:rtproject:merge)
(mov a1 (& 2))
(adjstk '1)
(bra 108)
109
(adjstk '1)
(push (& 0))
(push nil)
110
(bfcons (& 1) 111)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall pathname-name)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 110)
111
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(call #:rtproject:simplify-list-of-strings)
(mov a1 (& 0))
(mov (& 2) a2)
(call #:rtproject:excl-mod)
(mov a1 (& 0))
(adjstk '3)
(return)
104
(hpxmov (& 1) '19 a4)
(btnil a4 112)
(hpxmov (& 1) '19 a1)
(adjstk '2)
(bra #:rtproject:short-list-name)
112
(hpxmov (& 1) '18 a4)
(btnil a4 114)
(hpxmov (& 1) '18 a4)
(push nil)
(push a4)
(hpxmov (& 3) '3 a3)
(push a3)
116
(bfcons (& 0) 117)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 118))
(push 'empty)
(push dlink)
(push tag)
(stack dlink)
(mov (& 6) a2)
(mov (& 4) a1)
(call #:rtproject:read-modules-lists)
(mov (& 1) dlink)
(adjstk '4)
118
(eval ())
(hpxmov (& 5) '0 a3)
(mov (& 3) a2)
(call #:rtproject:merge)
(mov a1 (& 3))
(adjstk '1)
(bra 116)
117
(adjstk '1)
(push (& 1))
(push nil)
119
(bfcons (& 1) 120)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall pathname-name)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 119)
120
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(call #:rtproject:simplify-list-of-strings)
(mov a1 (& 1))
(mov (& 3) a2)
(call #:rtproject:excl-mod)
(mov a1 (& 1))
(adjstk '4)
(return)
114
(hpxmov (& 1) '0 a3)
(mov '"no file specified for project" a2)
(mov '-init a1)
(adjstk '2)
(jmp error)
))
(loader'((entry #:rtproject:merge subr3)
(push a3)
(push a2)
(push a1)
(push nil)
(push a1)
101
(btnil (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (car a4) (& 1))
(mov (& 3) a2)
(mov (car a4) a1)
(jcall member)
(btnil a1 101)
(mov (cvalq #:crunch:w-flag) a2)
(mov '109 a1)
(jcall memq)
(bfnil a1 106)
(mov (cvalq #:crunch:w-flag) a2)
(mov '109 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
106
(cnbgt (cvalq #:crunch:verbose) '0 109)
(mov (cvalq #:crunch:no-warning) a2)
(mov '109 a1)
(jcall memq)
(bfnil a1 108)
109
(push (@ 110))
(push nil)
(mov '|9| a1)
(jcall get-message)
(push a1)
(push (& 4))
(mov '3 a4)
(jmp format)
110
(eval ())
(mov (& 4) a3)
(mov a1 a2)
(mov '"W.109" a1)
(jcall printerror)
108
(mov (& 2) a2)
(mov (& 1) a1)
(jcall delete)
(mov a1 (& 2))
(bra 101)
102
(push (@ 111))
(push (& 3))
(push (& 5))
(mov '2 a4)
(jmp nconc)
111
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:rtproject:excl-mod subr2)
(push (@ 101))
(push a1)
(hpxmov a2 '20 a1)
(call #:rtproject:short-list-name)
(push a1)
(push 'equal)
(mov '3 a4)
(jmp nset-difference)
101
(eval ())
(return)
))
(loader'((entry #:rtproject:filenames subr2)
(push a1)
(push a2)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 103))
(mov '0 a4)
(jmp current-directory)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push (& 8))
(mov '1 a4)
(jmp current-directory)
106
(eval ())
(push (@ 107))
(push nil)
(push nil)
(push nil)
(push '"*")
(push (& 9))
(push nil)
(mov '6 a4)
(jmp make-pathname)
107
(eval ())
(jcall expand-pathname)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp current-directory)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '2)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((entry #:rtproject:short-list-name subr1)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall pathname)
(jcall pathname-name)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(bra #:rtproject:simplify-list-of-strings)
))
(loader'((entry #:rtproject:simplify-list-of-strings subr1)
(push a1)
(btnil a1 101)
(push a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(jcall delete)
(call #:rtproject:simplify-list-of-strings)
(pop a4)
(mov a1 (cdr a4))
(mov (& 0) a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:rtproject:read-modules-lists subr2)
(push a1)
(push a2)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a2)
(mov (& 3) a1)
(call #:rtproject:read-one-modules-list)
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((entry #:rtproject:read-one-modules-list subr2)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-directory)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push (& 5))
(mov '1 a4)
(jmp current-directory)
104
(eval ())
(push '(""))
(push nil)
(push (cvalq #:system:path))
(mov (& 2) (cvalq #:system:path))
(push '1)
(push '(#:system:path))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 14) a1)
(jcall probefile)
(bfnil a1 105)
(cnblt (cvalq #:crunch:verbose) '1 108)
(push (@ 109))
(push (@ 110))
(push '".. ")
(push (@ 111))
(push nil)
(mov 'nolst a1)
(jcall get-message)
(push a1)
(push (& 20))
(mov '3 a4)
(jmp format)
111
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
110
(eval ())
(push a1)
(push (& 15))
(mov '2 a4)
(jmp print)
109
(eval ())
108
(mov nil a1)
(bra 106)
105
(push (@ 112))
(mov '0 a4)
(jmp inchan)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(mov (& 19) a1)
(jcall #:crunch:openi)
(push a1)
(mov '1 a4)
(jmp inchan)
115
(eval ())
(push (@ 116))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
117
(jcall read)
(jcall pathname)
(mov (& 15) a2)
(jcall cons)
(mov a1 (& 15))
(bra 117)
118
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
116
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp inchan)
119
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '1)
(btnil (& 7) 120)
(mov (& 7) a1)
(jcall nreverse)
(bra 106)
120
(mov nil a1)
(mov 'empty a2)
(jmp #:llcp:exit)
106
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:path))
(adjstk '9)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 122))
(push (& 4))
(mov '1 a4)
(jmp current-directory)
122
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '3)
(return)
))
(loader '((end)))
