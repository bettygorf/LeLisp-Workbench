(loader '((title |syserror.lo|)))
(setq #:sys-package:colon 'crunch)
(loader'((fentry #:crunch:syserror subr3)
(entry #:crunch:syserror subr3)
(push a2)
(mov a2 (cvalq #:crunch:lasterror))
(mov (& 0) a4)
(cabeq a4 '#:abbrev:errnotanabbrev 103)
(cabne a4 '#:user:errnotanabbrev 101)
103
(mov '#:abbrev:errnotanabbrev a2)
(adjstk '1)
(bra #:crunch:errnotanabbrev:syserror)
101
(cabne a4 'errudf 104)
(mov a4 a2)
(adjstk '1)
(bra #:crunch:errudf:syserror)
104
(cabne a4 '#:microceyx:errnotarecordoratclass 106)
(mov a4 a2)
(adjstk '1)
(bra #:crunch:errnotarecordoratclass:syserror)
106
(cabne a4 'errsxt 108)
(cabne a3 '11 108)
(mov a4 a2)
(adjstk '1)
(bra #:crunch:errsxt:syserror)
108
(cabne a4 'errunk 110)
(mov a4 a2)
(adjstk '1)
(bra #:crunch:errunk:syserror)
110
(btnil (cvalq #:crunch:noerror) 112)
(push (@ 114))
(push a1)
(push a4)
(push a3)
(mov '3 a4)
(jmp list)
114
(eval ())
(mov a1 a3)
(mov 'syserror a2)
(mov 'crunch a1)
(adjstk '1)
(jmp super-itsoft)
112
(push nil)
(push (cvalq #:sys-package:itsoft))
(mov (& 1) (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov a4 a2)
(jcall error)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '9)
(return)
))
(loader'((entry #:crunch:errnotanabbrev:syserror subr3)
(push a3)
(push a2)
(push nil)
(push a2)
(mov a3 a2)
(pop a1)
(call #:crunch:unknow-thing-p)
(btnil a1 101)
(mov 'unknow-abbrev a1)
(adjstk '3)
(return)
101
(mov (& 2) a1)
(jcall other-from)
(mov a1 (& 0))
(btnil a1 103)
(mov 'abbrevp a3)
(mov a1 a2)
(mov (& 2) a1)
(call #:crunch:user-included-p)
(bfnil a1 105)
(cnblt (cvalq #:crunch:verbose) '1 108)
(push (@ 109))
(push (@ 110))
(push '".. ")
(push (@ 111))
(push nil)
(mov 'foundabbrev a1)
(jcall get-message)
(push a1)
(push (& 8))
(mov '3 a4)
(jmp format)
111
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
110
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
109
(eval ())
108
(push '32)
(push (cvalq #:crunch:default-multiple-defined-message))
(mov (& 1) (cvalq #:crunch:default-multiple-defined-message))
(push '1)
(push '(#:crunch:default-multiple-defined-message))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 8) a2)
(mov (& 10) a1)
(jcall #:crunch:load-cpenvs)
(mov a1 (& 8))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:default-multiple-defined-message))
(adjstk '8)
(mov a1 a2)
(mov (& 2) a1)
(jcall #:crunch:add-import)
(mov (& 2) a1)
(jcall abbrevp)
(btnil a1 112)
(mov (& 2) a1)
(adjstk '3)
(return)
112
(btnil (cvalq #:crunch:include) 114)
(cnblt (cvalq #:crunch:verbose) '1 117)
(push (@ 118))
(push (@ 119))
(push '".. ")
(push (@ 120))
(push nil)
(mov '|17| a1)
(jcall get-message)
(push a1)
(push (& 8))
(mov '3 a4)
(jmp format)
120
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
119
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
118
(eval ())
117
(mov (& 0) a2)
(mov (& 2) a1)
(call #:crunch:add-include)
(mov (& 0) a1)
(jcall #:crunch:load-files)
(mov (& 2) a1)
(jcall abbrevp)
(btnil a1 121)
(mov (& 2) a1)
(adjstk '3)
(return)
121
(mov (cvalq #:crunch:w-flag) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 124)
(mov (cvalq #:crunch:w-flag) a2)
(mov '115 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
124
(cnbgt (cvalq #:crunch:verbose) '0 127)
(mov (cvalq #:crunch:no-warning) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 126)
127
(mov (& 0) a3)
(mov '|15| a2)
(mov '"W.115" a1)
(jcall printerror)
126
(mov 'unknow-abbrev a1)
(adjstk '3)
(return)
114
(mov (& 2) a2)
(mov (& 1) a1)
(call #:crunch:add-unknow-thing)
(mov (cvalq #:crunch:w-flag) a2)
(mov '112 a1)
(jcall memq)
(bfnil a1 129)
(mov (cvalq #:crunch:w-flag) a2)
(mov '112 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
129
(cnbgt (cvalq #:crunch:verbose) '0 132)
(mov (cvalq #:crunch:no-warning) a2)
(mov '112 a1)
(jcall memq)
(bfnil a1 131)
132
(push (@ 133))
(push nil)
(mov '|12| a1)
(jcall get-message)
(push a1)
(push (& 5))
(mov '3 a4)
(jmp format)
133
(eval ())
(mov (& 0) a3)
(mov a1 a2)
(mov '"W.112" a1)
(jcall printerror)
131
(mov 'unknow-abbrev a1)
(adjstk '3)
(return)
105
(mov nil a1)
(adjstk '3)
(return)
103
(mov (& 2) a2)
(mov (& 1) a1)
(call #:crunch:add-unknow-thing)
(mov (cvalq #:crunch:w-flag) a2)
(mov '102 a1)
(jcall memq)
(bfnil a1 135)
(mov (cvalq #:crunch:w-flag) a2)
(mov '102 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
135
(cnbgt (cvalq #:crunch:verbose) '0 138)
(mov (cvalq #:crunch:no-warning) a2)
(mov '102 a1)
(jcall memq)
(bfnil a1 137)
138
(mov (& 2) a3)
(mov '|2| a2)
(mov '"W.102" a1)
(jcall printerror)
137
(mov 'unknow-abbrev a1)
(adjstk '3)
(return)
))
(loader'((entry #:crunch:errudf:syserror subr3)
(push a3)
(push a2)
(push a1)
(push nil)
(push a2)
(mov a3 a2)
(pop a1)
(call #:crunch:unknow-thing-p)
(btnil a1 101)
(btnil (cvalq #:crunch:toplevel-error) 103)
(mov (cvalq #:crunch:e-flag) a2)
(mov '101 a1)
(jcall memq)
(bfnil a1 106)
(mov (cvalq #:crunch:e-flag) a2)
(mov '101 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
106
(mov (& 3) a3)
(mov '|1| a2)
(mov '"E.101" a1)
(adjstk '4)
(jmp syserror)
103
(mov (cvalq #:crunch:w-flag) a2)
(mov '101 a1)
(jcall memq)
(bfnil a1 108)
(mov (cvalq #:crunch:w-flag) a2)
(mov '101 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
108
(cnbgt (cvalq #:crunch:verbose) '0 111)
(mov (cvalq #:crunch:no-warning) a2)
(mov '101 a1)
(jcall memq)
(bfnil a1 109)
111
(mov (& 3) a3)
(mov '|1| a2)
(mov '"W.101" a1)
(adjstk '4)
(jmp printerror)
109
(mov nil a1)
(adjstk '4)
(return)
101
(mov (& 3) a1)
(jcall func-from)
(mov a1 (& 0))
(btnil a1 112)
(mov 'typefn a3)
(mov a1 a2)
(mov (& 3) a1)
(call #:crunch:user-included-p)
(bfnil a1 115)
(cnblt (cvalq #:crunch:verbose) '1 117)
(push (@ 118))
(push (@ 119))
(push '".. ")
(push (@ 120))
(push nil)
(mov 'foundfunction a1)
(jcall get-message)
(push a1)
(push (& 9))
(mov '3 a4)
(jmp format)
120
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
119
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
118
(eval ())
117
(push '31)
(push (cvalq #:crunch:default-multiple-defined-message))
(mov (& 1) (cvalq #:crunch:default-multiple-defined-message))
(push '1)
(push '(#:crunch:default-multiple-defined-message))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 8) a2)
(mov (& 11) a1)
(jcall #:crunch:load-cpenvs)
(mov a1 (& 8))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:default-multiple-defined-message))
(adjstk '8)
(mov a1 a2)
(mov (& 3) a1)
(jcall #:crunch:add-import)
(mov (& 3) a1)
(jcall typefn)
(bfnil a1 115)
(btnil (cvalq #:crunch:include) 123)
(cnblt (cvalq #:crunch:verbose) '1 126)
(push (@ 127))
(push (@ 128))
(push '".. ")
(push (@ 129))
(push nil)
(mov '|16| a1)
(jcall get-message)
(push a1)
(push (& 9))
(mov '3 a4)
(jmp format)
129
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
128
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
127
(eval ())
126
(mov (& 0) a2)
(mov (& 3) a1)
(call #:crunch:add-include)
(mov (& 0) a1)
(jcall #:crunch:load-files)
(mov (& 3) a1)
(jcall typefn)
(bfnil a1 115)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 133)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
133
(mov (& 0) a3)
(mov '|15| a2)
(mov '"E.115" a1)
(jcall syserror)
(bra 115)
123
(mov (& 3) a2)
(mov (& 2) a1)
(call #:crunch:add-unknow-thing)
(mov (cvalq #:crunch:e-flag) a2)
(mov '111 a1)
(jcall memq)
(bfnil a1 135)
(mov (cvalq #:crunch:e-flag) a2)
(mov '111 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
135
(push (@ 136))
(push nil)
(mov '|11| a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
136
(eval ())
(mov (& 0) a3)
(mov a1 a2)
(mov '"E.111" a1)
(jcall syserror)
115
(btnil (cvalq #:crunch:toplevel-error) 137)
(bfcons (cvalq #:crunch:lastread) 137)
(mov (cvalq #:crunch:lastread) a1)
(mov (car a1) a1)
(jcall valfn)
(btnil a1 137)
(mov (cvalq #:crunch:lastread) a1)
(mov 'retrytoplevel a2)
(jmp #:llcp:exit)
(adjstk '4)
(return)
137
(mov (& 3) a1)
(adjstk '4)
(return)
112
(mov (& 3) a1)
(jcall intern-from)
(mov a1 (& 0))
(btnil a1 139)
(btnil (cdr a1) 142)
(cnblt (cvalq #:crunch:verbose) '1 142)
(push (@ 145))
(push (@ 146))
(push '".. ")
(push (@ 147))
(push nil)
(mov '|31| a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
147
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
146
(eval ())
(push a1)
(push (& 5))
(mov '2 a4)
(jmp print)
145
(eval ())
142
(mov 'typefn a3)
(mov (& 0) a2)
(mov (& 3) a1)
(call #:crunch:user-included-p)
(bfnil a1 149)
(cnblt (cvalq #:crunch:verbose) '1 151)
(push (@ 152))
(push (@ 153))
(push '".. ")
(push (@ 154))
(push nil)
(mov 'foundinternalfunction a1)
(jcall get-message)
(push a1)
(push (& 9))
(mov '3 a4)
(jmp format)
154
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
153
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
152
(eval ())
151
(push '0)
(push '31)
(push (cvalq #:crunch:default-multiple-defined-message))
(mov (& 1) (cvalq #:crunch:default-multiple-defined-message))
(push (cvalq #:crunch:verbose))
(mov (& 3) (cvalq #:crunch:verbose))
(push '2)
(push '(#:crunch:default-multiple-defined-message #:crunch:verbose))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 10) a2)
(mov (& 13) a1)
(jcall #:crunch:load-cpenvs)
(mov a1 (& 10))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:verbose))
(mov (& 7) (cvalq #:crunch:default-multiple-defined-message))
(adjstk '10)
(mov a1 a2)
(mov (& 3) a1)
(jcall #:crunch:add-import)
(push (& 0))
155
(bfcons (& 0) 156)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:llmodule:allupmod) a2)
(mov (& 0) a1)
(jcall assq)
(btnil a1 157)
(push a1)
(mov (cdr a1) a2)
(mov (& 6) a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(bra 158)
157
(push (@ 159))
(push (& 1))
(push (& 7))
(mov '2 a4)
(jmp list)
159
(eval ())
(mov (cvalq #:llmodule:allupmod) a2)
(jcall cons)
(mov a1 (cvalq #:llmodule:allupmod))
158
(adjstk '1)
(bra 155)
156
(adjstk '1)
(mov (& 3) a1)
(jcall typefn)
(bfnil a1 149)
(btnil (cvalq #:crunch:include) 162)
(cnblt (cvalq #:crunch:verbose) '1 165)
(push (@ 166))
(push (@ 167))
(push '".. ")
(push (@ 168))
(push nil)
(mov '|16| a1)
(jcall get-message)
(push a1)
(push (& 9))
(mov '3 a4)
(jmp format)
168
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
167
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
166
(eval ())
165
(mov (& 0) a2)
(mov (& 3) a1)
(call #:crunch:add-include)
(mov (& 0) a1)
(jcall #:crunch:load-files)
(mov (& 3) a1)
(jcall typefn)
(bfnil a1 149)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 172)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
172
(mov (& 0) a3)
(mov '|15| a2)
(mov '"E.115" a1)
(jcall syserror)
(bra 149)
162
(mov (& 3) a2)
(mov (& 2) a1)
(call #:crunch:add-unknow-thing)
(mov (cvalq #:crunch:e-flag) a2)
(mov '111 a1)
(jcall memq)
(bfnil a1 174)
(mov (cvalq #:crunch:e-flag) a2)
(mov '111 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
174
(push (@ 175))
(push nil)
(mov '|11| a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
175
(eval ())
(mov (& 0) a3)
(mov a1 a2)
(mov '"E.111" a1)
(jcall syserror)
149
(btnil (cvalq #:crunch:toplevel-error) 176)
(bfcons (cvalq #:crunch:lastread) 176)
(mov (cvalq #:crunch:lastread) a1)
(mov (car a1) a1)
(jcall valfn)
(btnil a1 176)
(mov (cvalq #:crunch:lastread) a1)
(mov 'retrytoplevel a2)
(jmp #:llcp:exit)
(adjstk '4)
(return)
176
(mov (& 3) a1)
(adjstk '4)
(return)
139
(cabne (& 1) '|#| 178)
(mov (& 3) a1)
(jcall other-from)
(mov a1 (& 0))
(btnil a1 180)
(mov 'typefn a3)
(mov a1 a2)
(mov (& 3) a1)
(call #:crunch:user-included-p)
(bfnil a1 182)
(cnblt (cvalq #:crunch:verbose) '1 185)
(push (@ 186))
(push (@ 187))
(push '".. ")
(push (@ 188))
(push nil)
(mov 'foundsharp a1)
(jcall get-message)
(push a1)
(push (& 9))
(mov '3 a4)
(jmp format)
188
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
187
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
186
(eval ())
185
(push (cvalq #:crunch:sys-package:sharp))
(push '33)
(push (cvalq #:crunch:default-multiple-defined-message))
(mov (& 1) (cvalq #:crunch:default-multiple-defined-message))
(push (cvalq #:sys-package:sharp))
(mov (& 3) (cvalq #:sys-package:sharp))
(push '2)
(push '(#:crunch:default-multiple-defined-message #:sys-package:sharp))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 10) a2)
(mov (& 13) a1)
(jcall #:crunch:load-cpenvs)
(mov a1 (& 10))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:sharp))
(mov (& 7) (cvalq #:crunch:default-multiple-defined-message))
(adjstk '10)
(mov a1 a2)
(mov (& 3) a1)
(jcall #:crunch:add-import)
(mov (& 3) a1)
(jcall typefn)
(btnil a1 189)
(mov (& 3) a1)
(adjstk '4)
(return)
189
(btnil (cvalq #:crunch:include) 191)
(cnblt (cvalq #:crunch:verbose) '1 194)
(push (@ 195))
(push (@ 196))
(push '".. ")
(push (@ 197))
(push nil)
(mov '|18| a1)
(jcall get-message)
(push a1)
(push (& 9))
(mov '3 a4)
(jmp format)
197
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
196
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
195
(eval ())
194
(mov (& 0) a2)
(mov (& 3) a1)
(call #:crunch:add-include)
(push (cvalq #:crunch:sys-package:sharp))
(push (cvalq #:sys-package:sharp))
(mov (& 1) (cvalq #:sys-package:sharp))
(push '1)
(push '(#:sys-package:sharp))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 8) a1)
(jcall #:crunch:load-files)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:sharp))
(adjstk '8)
(mov (& 3) a1)
(jcall typefn)
(btnil a1 198)
(mov (& 3) a1)
(adjstk '4)
(return)
198
(mov (cvalq #:crunch:w-flag) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 201)
(mov (cvalq #:crunch:w-flag) a2)
(mov '115 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
201
(cnbgt (cvalq #:crunch:verbose) '0 204)
(mov (cvalq #:crunch:no-warning) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 203)
204
(mov (& 0) a3)
(mov '|15| a2)
(mov '"W.115" a1)
(jcall printerror)
203
(mov nil a1)
(adjstk '4)
(return)
191
(mov (& 3) a2)
(mov 'errusm a1)
(call #:crunch:add-unknow-thing)
(mov (cvalq #:crunch:w-flag) a2)
(mov '113 a1)
(jcall memq)
(bfnil a1 206)
(mov (cvalq #:crunch:w-flag) a2)
(mov '113 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
206
(cnbgt (cvalq #:crunch:verbose) '0 209)
(mov (cvalq #:crunch:no-warning) a2)
(mov '113 a1)
(jcall memq)
(bfnil a1 208)
209
(push (@ 210))
(push nil)
(mov '|13| a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
210
(eval ())
(mov (& 0) a3)
(mov a1 a2)
(mov '"W.113" a1)
(jcall printerror)
208
(mov nil a1)
(adjstk '4)
(return)
182
(mov nil a1)
(adjstk '4)
(return)
180
(mov (& 3) a4)
(cabeq (pkgc a4) (cvalq #:crunch:sys-package:sharp) 211)
(push nil)
(push (cvalq #:crunch:toplevel-error))
(mov (& 1) (cvalq #:crunch:toplevel-error))
(push '1)
(push '(#:crunch:toplevel-error))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov a4 a2)
(mov (cvalq #:crunch:sys-package:sharp) a1)
(jcall symbol)
(mov a1 a3)
(mov (& 10) a2)
(mov (& 9) a1)
(call #:crunch:errudf:syserror)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:toplevel-error))
(adjstk '12)
(return)
211
(mov a4 a2)
(mov 'errusm a1)
(call #:crunch:add-unknow-thing)
(mov (cvalq #:crunch:w-flag) a2)
(mov '103 a1)
(jcall memq)
(bfnil a1 214)
(mov (cvalq #:crunch:w-flag) a2)
(mov '103 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
214
(cnbgt (cvalq #:crunch:verbose) '0 217)
(mov (cvalq #:crunch:no-warning) a2)
(mov '103 a1)
(jcall memq)
(bfnil a1 216)
217
(mov (& 3) a3)
(mov '|3| a2)
(mov '"W.103" a1)
(jcall printerror)
216
(mov nil a1)
(adjstk '4)
(return)
178
(mov (& 3) a2)
(mov (& 2) a1)
(call #:crunch:add-unknow-thing)
(mov (cvalq #:crunch:e-flag) a2)
(mov '101 a1)
(jcall memq)
(bfnil a1 219)
(mov (cvalq #:crunch:e-flag) a2)
(mov '101 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
219
(mov (& 3) a3)
(mov '|1| a2)
(mov '"E.101" a1)
(adjstk '4)
(jmp syserror)
))
(loader'((entry #:crunch:errsxt:syserror subr3)
(btnil (cvalq #:crunch:read-error) 101)
(mov (cvalq #:crunch:w-flag) a2)
(mov '122 a1)
(jcall memq)
(bfnil a1 104)
(mov (cvalq #:crunch:w-flag) a2)
(mov '122 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
104
(cnbgt (cvalq #:crunch:verbose) '0 107)
(mov (cvalq #:crunch:no-warning) a2)
(mov '122 a1)
(jcall memq)
(bfnil a1 106)
107
(push (@ 108))
(push nil)
(mov '|22| a1)
(jcall get-message)
(push a1)
(push (cvalq #:crunch:read-error))
(mov '3 a4)
(jmp format)
108
(eval ())
(push a1)
(mov 'defmodule a2)
(mov (cvalq #:crunch:current-defmod) a1)
(jcall getdefmodule)
(mov a1 a3)
(pop a2)
(mov '"W.122" a1)
(jcall printerror)
106
(mov nil a1)
(mov 'eof a2)
(jmp #:llcp:exit)
101
(jcall printerror)
(mov nil a1)
(mov 'eof a2)
(jmp #:llcp:exit)
))
(loader'((fentry #:crunch:errstc subr3)
(entry #:crunch:errstc subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(push 'structure)
(push a2)
(mov '2 a4)
(jmp list)
101
(eval ())
(push nil)
(push a1)
(mov a1 a2)
(mov (& 4) a1)
(call #:crunch:cunknow-thing-p)
(btnil a1 102)
(mov (cvalq #:crunch:w-flag) a2)
(mov '104 a1)
(jcall memq)
(bfnil a1 105)
(mov (cvalq #:crunch:w-flag) a2)
(mov '104 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
105
(cnbgt (cvalq #:crunch:verbose) '0 108)
(mov (cvalq #:crunch:no-warning) a2)
(mov '104 a1)
(jcall memq)
(bfnil a1 106)
108
(push (@ 109))
(push nil)
(mov '|4| a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
109
(eval ())
(mov (& 2) a3)
(mov a1 a2)
(mov '"W.104" a1)
(adjstk '5)
(jmp printerror)
106
(mov nil a1)
(adjstk '5)
(return)
102
(mov (& 0) a1)
(jcall struct-from)
(mov a1 (& 1))
(btnil a1 110)
(cnblt (cvalq #:crunch:verbose) '1 113)
(push (@ 114))
(push (@ 115))
(push '".. ")
(push (@ 116))
(push nil)
(mov 'foundparentstruct a1)
(jcall get-message)
(push a1)
(push (& 9))
(push (& 9))
(mov '4 a4)
(jmp format)
116
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
115
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp print)
114
(eval ())
113
(push '34)
(push (cvalq #:crunch:default-multiple-defined-message))
(mov (& 1) (cvalq #:crunch:default-multiple-defined-message))
(push '1)
(push '(#:crunch:default-multiple-defined-message))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 9) a2)
(mov (& 11) a1)
(jcall #:crunch:load-cpenvs)
(mov a1 (& 9))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:default-multiple-defined-message))
(adjstk '8)
(mov a1 a2)
(mov (& 0) a1)
(jcall #:crunch:add-import)
(mov 'defstruct a2)
(mov (& 3) a1)
(jcall getprop)
(bfnil a1 117)
(btnil (cvalq #:crunch:include) 119)
(cnblt (cvalq #:crunch:verbose) '1 122)
(push (@ 123))
(push (@ 124))
(push '".. ")
(push (@ 125))
(push nil)
(mov '|19| a1)
(jcall get-message)
(push a1)
(push (& 9))
(mov '3 a4)
(jmp format)
125
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
124
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp print)
123
(eval ())
122
(mov (& 1) a2)
(mov (& 3) a1)
(call #:crunch:add-include)
(mov (& 1) a1)
(jcall #:crunch:load-files)
(mov 'defstruct a2)
(mov (& 3) a1)
(jcall getprop)
(bfnil a1 126)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 129)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
129
(mov (& 1) a3)
(mov '|15| a2)
(mov '"E.115" a1)
(adjstk '5)
(jmp syserror)
126
(mov nil a1)
(adjstk '5)
(return)
119
(mov (& 3) a2)
(mov (& 4) a1)
(call #:crunch:add-cunknow-thing)
(mov (cvalq #:crunch:w-flag) a2)
(mov '114 a1)
(jcall memq)
(bfnil a1 131)
(mov (cvalq #:crunch:w-flag) a2)
(mov '114 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
131
(cnbgt (cvalq #:crunch:verbose) '0 134)
(mov (cvalq #:crunch:no-warning) a2)
(mov '114 a1)
(jcall memq)
(bfnil a1 132)
134
(push (@ 135))
(push nil)
(mov '|14| a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
135
(eval ())
(mov (& 1) a3)
(mov a1 a2)
(mov '"W.114" a1)
(adjstk '5)
(jmp printerror)
132
(mov nil a1)
(adjstk '5)
(return)
117
(mov nil a1)
(adjstk '5)
(return)
110
(mov (& 0) a2)
(mov (& 4) a1)
(call #:crunch:add-cunknow-thing)
(mov (cvalq #:crunch:w-flag) a2)
(mov '104 a1)
(jcall memq)
(bfnil a1 137)
(mov (cvalq #:crunch:w-flag) a2)
(mov '104 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
137
(cnbgt (cvalq #:crunch:verbose) '0 140)
(mov (cvalq #:crunch:no-warning) a2)
(mov '104 a1)
(jcall memq)
(bfnil a1 138)
140
(push (@ 141))
(push nil)
(mov '|4| a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
141
(eval ())
(mov (& 2) a3)
(mov a1 a2)
(mov '"W.104" a1)
(adjstk '5)
(jmp printerror)
138
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:crunch:errnotarecordoratclass:syserror subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(push 'structure)
(push a3)
(mov '2 a4)
(jmp list)
101
(eval ())
(push nil)
(push a1)
(mov a1 a2)
(mov (& 3) a1)
(call #:crunch:cunknow-thing-p)
(btnil a1 102)
(mov (cvalq #:crunch:w-flag) a2)
(mov '106 a1)
(jcall memq)
(bfnil a1 105)
(mov (cvalq #:crunch:w-flag) a2)
(mov '106 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
105
(cnbgt (cvalq #:crunch:verbose) '0 108)
(mov (cvalq #:crunch:no-warning) a2)
(mov '106 a1)
(jcall memq)
(bfnil a1 107)
108
(push (@ 109))
(push nil)
(mov '|6| a1)
(jcall get-message)
(push a1)
(push (& 7))
(mov '3 a4)
(jmp format)
109
(eval ())
(mov (& 2) a3)
(mov a1 a2)
(mov '"W.106" a1)
(jcall printerror)
107
(mov '#:crunch:unknow-structure a1)
(adjstk '5)
(return)
102
(mov (& 0) a1)
(jcall struct-from)
(mov a1 (& 1))
(btnil a1 110)
(cnblt (cvalq #:crunch:verbose) '1 113)
(push (@ 114))
(push (@ 115))
(push '".. ")
(push (@ 116))
(push nil)
(mov 'foundstruct a1)
(jcall get-message)
(push a1)
(push (& 10))
(push (& 9))
(mov '4 a4)
(jmp format)
116
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
115
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp print)
114
(eval ())
113
(push '34)
(push (cvalq #:crunch:default-multiple-defined-message))
(mov (& 1) (cvalq #:crunch:default-multiple-defined-message))
(push '1)
(push '(#:crunch:default-multiple-defined-message))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 9) a2)
(mov (& 12) a1)
(jcall #:crunch:load-cpenvs)
(mov a1 (& 9))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:default-multiple-defined-message))
(adjstk '8)
(mov a1 a2)
(mov (& 0) a1)
(jcall #:crunch:add-import)
(mov 'defstruct a2)
(mov (& 4) a1)
(jcall getprop)
(bfnil a1 117)
(btnil (cvalq #:crunch:include) 119)
(cnblt (cvalq #:crunch:verbose) '1 122)
(push (@ 123))
(push (@ 124))
(push '".. ")
(push (@ 125))
(push nil)
(mov '|19| a1)
(jcall get-message)
(push a1)
(push (& 10))
(mov '3 a4)
(jmp format)
125
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
124
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp print)
123
(eval ())
122
(mov (& 1) a2)
(mov (& 4) a1)
(call #:crunch:add-include)
(mov (& 1) a1)
(jcall #:crunch:load-files)
(mov 'defstruct a2)
(mov (& 4) a1)
(jcall getprop)
(btnil a1 126)
(mov (& 4) a1)
(adjstk '5)
(return)
126
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 129)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
129
(mov (& 1) a3)
(mov '|15| a2)
(mov '"E.115" a1)
(adjstk '5)
(jmp syserror)
119
(mov (& 4) a2)
(mov (& 3) a1)
(call #:crunch:add-cunknow-thing)
(mov (cvalq #:crunch:w-flag) a2)
(mov '114 a1)
(jcall memq)
(bfnil a1 131)
(mov (cvalq #:crunch:w-flag) a2)
(mov '114 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
131
(cnbgt (cvalq #:crunch:verbose) '0 134)
(mov (cvalq #:crunch:no-warning) a2)
(mov '114 a1)
(jcall memq)
(bfnil a1 133)
134
(push (@ 135))
(push nil)
(mov '|14| a1)
(jcall get-message)
(push a1)
(push (& 7))
(mov '3 a4)
(jmp format)
135
(eval ())
(mov (& 1) a3)
(mov a1 a2)
(mov '"W.114" a1)
(jcall printerror)
133
(mov '#:crunch:unknow-structure a1)
(adjstk '5)
(return)
117
(mov (& 4) a1)
(adjstk '5)
(return)
110
(mov (& 0) a2)
(mov (& 3) a1)
(call #:crunch:add-cunknow-thing)
(mov (cvalq #:crunch:w-flag) a2)
(mov '106 a1)
(jcall memq)
(bfnil a1 137)
(mov (cvalq #:crunch:w-flag) a2)
(mov '106 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
137
(cnbgt (cvalq #:crunch:verbose) '0 140)
(mov (cvalq #:crunch:no-warning) a2)
(mov '106 a1)
(jcall memq)
(bfnil a1 139)
140
(push (@ 141))
(push nil)
(mov '|6| a1)
(jcall get-message)
(push a1)
(push (& 7))
(mov '3 a4)
(jmp format)
141
(eval ())
(mov (& 2) a3)
(mov a1 a2)
(mov '"W.106" a1)
(jcall printerror)
139
(mov '#:crunch:unknow-structure a1)
(adjstk '5)
(return)
))
(loader'((entry #:crunch:errunk:syserror subr3)
(push a3)
(push a2)
(push nil)
(push a2)
(mov a3 a2)
(pop a1)
(call #:crunch:unknow-thing-p)
(btnil a1 101)
(mov (cvalq #:crunch:w-flag) a2)
(mov '129 a1)
(jcall memq)
(bfnil a1 104)
(mov (cvalq #:crunch:w-flag) a2)
(mov '129 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
104
(cnbgt (cvalq #:crunch:verbose) '0 107)
(mov (cvalq #:crunch:no-warning) a2)
(mov '129 a1)
(jcall memq)
(bfnil a1 105)
107
(mov (& 2) a3)
(mov '|29| a2)
(mov '"W.129" a1)
(adjstk '3)
(jmp printerror)
105
(mov nil a1)
(adjstk '3)
(return)
101
(mov (& 2) a1)
(jcall other-from)
(mov a1 (& 0))
(btnil a1 108)
(push '32)
(push (cvalq #:crunch:default-multiple-defined-message))
(mov (& 1) (cvalq #:crunch:default-multiple-defined-message))
(push '1)
(push '(#:crunch:default-multiple-defined-message))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov a1 a2)
(mov (& 10) a1)
(jcall #:crunch:load-cpenvs)
(mov a1 (& 8))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:default-multiple-defined-message))
(adjstk '8)
(mov a1 a2)
(mov (& 2) a1)
(adjstk '3)
(jmp #:crunch:add-import)
108
(mov (& 2) a2)
(mov (& 1) a1)
(call #:crunch:add-unknow-thing)
(mov (cvalq #:crunch:e-flag) a2)
(mov '129 a1)
(jcall memq)
(bfnil a1 111)
(mov (cvalq #:crunch:e-flag) a2)
(mov '129 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
111
(mov (& 2) a3)
(mov '|29| a2)
(mov '"E.129" a1)
(adjstk '3)
(jmp syserror)
))
(put-abbrev 'unknow-abbrev 'unknow-abbrev)
(putprop '#:crunch:unknow-structure '(()) 'defstruct)
(loader'((fentry #:crunch:unknow-structure:make subr0)
(entry #:crunch:unknow-structure:make subr0)
(push (@ 101))
(mov '0 a4)
(jmp vector)
101
(eval ())
(mov '#:crunch:unknow-structure (cdr a1))
(return)
))
(#:messages:put-message 'errusm 'french '"sharp macro inconnue" 'defmessage)
(#:messages:put-message 'errusm 'english '"undefined sharp macro" 'defmessage)
'errusm
(loader'((fentry #:crunch:add-import subr2)
(entry #:crunch:add-import subr2)
(jcall cons)
(mov (cvalq #:crunch:modules-to-import) a2)
(jcall cons)
(mov a1 (cvalq #:crunch:modules-to-import))
(return)
))
(loader'((entry #:crunch:add-include subr2)
(jcall cons)
(mov (cvalq #:crunch:modules-to-include) a2)
(jcall cons)
(mov a1 (cvalq #:crunch:modules-to-include))
(return)
))
(loader'((entry #:crunch:add-unknow-thing subr2)
(push a2)
(push a1)
(mov (cvalq #:crunch:unknow-things) a2)
(jcall assq)
(btnil a1 101)
(push a1)
(mov (cdr a1) a2)
(mov (& 2) a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '2)
(return)
101
(push (@ 103))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:crunch:unknow-things) a2)
(jcall cons)
(mov a1 (cvalq #:crunch:unknow-things))
(adjstk '2)
(return)
))
(loader'((entry #:crunch:add-cunknow-thing subr2)
(push a2)
(push a1)
(mov (cvalq #:crunch:unknow-things) a2)
(jcall assoc)
(btnil a1 101)
(push a1)
(mov (cdr a1) a2)
(mov (& 2) a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '2)
(return)
101
(push (@ 103))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:crunch:unknow-things) a2)
(jcall cons)
(mov a1 (cvalq #:crunch:unknow-things))
(adjstk '2)
(return)
))
(loader'((entry #:crunch:unknow-thing-p subr2)
(push a2)
(mov (cvalq #:crunch:unknow-things) a2)
(jcall cassq)
(mov a1 a2)
(pop a1)
(jmp memq)
))
(loader'((entry #:crunch:cunknow-thing-p subr2)
(push a2)
(mov (cvalq #:crunch:unknow-things) a2)
(jcall cassoc)
(mov a1 a2)
(pop a1)
(jmp memq)
))
'(defun #:crunch:add-unknow-sharp (c) (unless (memq c #:crunch:unknow-sharp) (newl #:crunch:unknow-sharp c)))
(loader'((fentry #:crunch:files-of-module-p subr1)
(entry #:crunch:files-of-module-p subr1)
(push a1)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall probepathf)
(btnil a1 103)
(jcall pathname)
(jcall file-namestring)
(jcall ncons)
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 (& 0))
(btnil a1 105)
(push (cvalq #:crunch:all-modules))
(push nil)
107
(bfcons (& 1) 108)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 109))
(push (& 4))
(mov (& 2) a1)
(jcall readdefmodule)
(mov 'files a2)
(jcall getdefmodule)
(push a1)
(push nil)
110
(bfcons (& 1) 111)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall pathname)
(jcall file-namestring)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 110)
111
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push 'equal)
(mov '3 a4)
(jmp intersection)
109
(eval ())
(btnil a1 112)
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(jcall ncons)
(bra 113)
112
(mov nil a1)
113
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 107)
108
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
105
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:crunch:user-included-p subr3)
(push a3)
(push a1)
(push (@ 101))
(push a2)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall probepathm)
(btnil a1 104)
(mov (& 0) a1)
(call #:crunch:readdefmodule)
(mov 'files a2)
(jcall getdefmodule)
(push a1)
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall probepathf)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 106)
107
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(bra 105)
104
(mov (& 0) a1)
(jcall probepathf)
(jcall ncons)
105
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (cvalq #:crunch:includes))
(push 'equal)
(mov '3 a4)
(jmp intersection)
101
(eval ())
(push a1)
(btnil a1 108)
(cnblt (cvalq #:crunch:verbose) '1 111)
(push (@ 112))
(push (@ 113))
(push '".. ")
(push (@ 114))
(push nil)
(mov 'includedfile a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
114
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
113
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp print)
112
(eval ())
111
(push (& 0))
115
(bfcons (& 0) 116)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:crunch:load-file-1bis)
(bra 115)
116
(adjstk '1)
(push (@ 119))
(push (& 3))
(push (& 3))
(mov '2 a4)
(jmp funcall)
119
(eval ())
(bfnil a1 118)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 121)
(mov (cvalq #:crunch:e-flag) a2)
(mov '115 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
121
(mov (& 0) a3)
(mov '|15| a2)
(mov '"E.115" a1)
(jcall syserror)
118
(mov (& 0) a4)
(btnil (cdr a4) 123)
(cabne (& 2) 'typefn 124)
(mov (cvalq #:crunch:w-flag) a2)
(mov '131 a1)
(jcall memq)
(bfnil a1 127)
(mov (cvalq #:crunch:w-flag) a2)
(mov '131 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
127
(cnbgt (cvalq #:crunch:verbose) '0 130)
(mov (cvalq #:crunch:no-warning) a2)
(mov '131 a1)
(jcall memq)
(bfnil a1 123)
130
(push (@ 131))
(push nil)
(mov '|31| a1)
(jcall get-message)
(push a1)
(push (& 3))
(mov '3 a4)
(jmp format)
131
(eval ())
(mov (& 1) a3)
(mov a1 a2)
(mov '"W.131" a1)
(jcall printerror)
(bra 123)
124
(cabne (& 2) 'abbrevp 132)
(mov (cvalq #:crunch:w-flag) a2)
(mov '132 a1)
(jcall memq)
(bfnil a1 135)
(mov (cvalq #:crunch:w-flag) a2)
(mov '132 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
135
(cnbgt (cvalq #:crunch:verbose) '0 138)
(mov (cvalq #:crunch:no-warning) a2)
(mov '132 a1)
(jcall memq)
(bfnil a1 123)
138
(push (@ 139))
(push nil)
(mov '|32| a1)
(jcall get-message)
(push a1)
(push (& 3))
(mov '3 a4)
(jmp format)
139
(eval ())
(mov (& 1) a3)
(mov a1 a2)
(mov '"W.132" a1)
(jcall printerror)
(bra 123)
132
(mov (cvalq #:crunch:w-flag) a2)
(mov '125 a1)
(jcall memq)
(bfnil a1 141)
(mov (cvalq #:crunch:w-flag) a2)
(mov '125 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
141
(cnbgt (cvalq #:crunch:verbose) '0 144)
(mov (cvalq #:crunch:no-warning) a2)
(mov '125 a1)
(jcall memq)
(bfnil a1 123)
144
(push (@ 145))
(push nil)
(mov '|25| a1)
(jcall get-message)
(push a1)
(push (& 3))
(mov '3 a4)
(jmp format)
145
(eval ())
(mov (& 1) a3)
(mov a1 a2)
(mov '"W.125" a1)
(jcall printerror)
123
(mov 't a1)
(adjstk '3)
(return)
108
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:crunch:readdefmodule subr1)
(push a1)
(push nil)
(push nil)
(push (cvalq #:system:in-read-flag))
(mov (& 2) (cvalq #:system:in-read-flag))
(push '1)
(push '(#:system:in-read-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(jcall readdefmodule)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov a1 (& 7))
(btnil a1 102)
(mov (car a1) a1)
(bra 103)
102
(mov (cvalq #:crunch:e-flag) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 105)
(mov (cvalq #:crunch:e-flag) a2)
(mov '126 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
105
(mov (& 9) a3)
(mov '|26| a2)
(mov '"E.126" a1)
(jcall syserror)
103
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:in-read-flag))
(adjstk '10)
(return)
))
(loader'((fentry #:crunch:load-include nsubr)
(entry #:crunch:load-include nsubr)
(cnbge a4 '1 101)
(mov '#:crunch:load-include a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(mov (car a1) a4)
(bfnil a4 102)
(mov (& 0) a1)
(call #:crunch:readdefmodule)
(mov 'include a2)
(jcall getdefmodule)
(mov a1 a4)
102
(push a4)
103
(bfcons (& 0) 104)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:crunch:load-file-1bis)
(bra 103)
104
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:crunch:load-files subr1)
(entry #:crunch:load-files subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:crunch:load-file)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:crunch:load-file subr1)
(push a1)
(jcall probepathm)
(btnil a1 101)
(mov (& 0) a1)
(call #:crunch:readdefmodule)
(mov 'files a2)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:crunch:load-file-1)
(bra 103)
104
(mov nil a1)
(adjstk '2)
(return)
101
(mov (& 0) a1)
(jcall probepathf)
(btnil a1 105)
(mov (& 0) a1)
(adjstk '1)
(bra #:crunch:load-file-1)
105
(mov (& 0) a3)
(mov '#:module:errnmd a2)
(mov 'loadfile a1)
(adjstk '1)
(jmp printerror)
))
(loader'((entry #:crunch:load-file-1 subr1)
(push a1)
(jcall pathname)
(jcall pathname-name)
(mov a1 a2)
(mov nil a1)
(jcall symbol)
(mov a1 (& 0))
(adjstk '1)
(bra #:crunch:load-file-1bis)
))
(loader'((entry #:crunch:load-file-1bis subr1)
(push a1)
(mov (cvalq #:crunch:loaded-files) a2)
(jcall memq)
(bfnil a1 101)
(mov (cvalq #:crunch:loaded-files) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:crunch:loaded-files))
(cnblt (cvalq #:crunch:verbose) '1 104)
(push (@ 105))
(push (@ 106))
(push '".. ")
(mov 'loadfile a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
106
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
105
(eval ())
104
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 109))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push nil)
(push nil)
(push (cvalq #:system:in-read-flag))
(mov (& 1) (cvalq #:system:in-read-flag))
(push (cvalq #:sys-package:itsoft))
(mov (& 3) (cvalq #:sys-package:itsoft))
(push '2)
(push '(#:system:in-read-flag #:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 't a2)
(mov (& 22) a1)
(jcall libloadfile)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(mov (& 7) (cvalq #:system:in-read-flag))
(adjstk '10)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
109
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 108)
(mov (cvalq #:crunch:loaded-files) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (cvalq #:crunch:loaded-files))
(mov (& 0) a3)
(mov 'loadfilefailed a2)
(mov 'loadfile a1)
(jcall printerror)
(mov 'loadfile (cvalq #:crunch:read-error))
108
(cnblt (cvalq #:crunch:verbose) '1 110)
(push (@ 112))
(push (@ 113))
(push '".. ")
(mov 'done a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
113
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
112
(eval ())
(adjstk '1)
(return)
110
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:crunch:load-cpenvs subr2)
(entry #:crunch:load-cpenvs subr2)
(push a2)
(push a1)
(bfnil (cdr a2) 101)
(push (@ 103))
(push (car a2))
(mov '1 a4)
(jmp #:crunch:load-cpenv)
103
(eval ())
(bra 102)
101
(cnblt (cvalq #:crunch:verbose) '1 105)
(push (@ 106))
(push (@ 107))
(push '".. ")
(push (@ 108))
(push nil)
(mov '|25| a1)
(jcall get-message)
(push a1)
(push (& 7))
(mov '3 a4)
(jmp format)
108
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
107
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
106
(eval ())
105
(push (@ 110))
(push (& 2))
(mov 'import a2)
(mov (cvalq #:crunch:current-defmod) a1)
(jcall getdefmodule)
(push a1)
(mov '2 a4)
(jmp intersection)
110
(eval ())
(mov a1 a4)
(bfnil a4 109)
(mov (& 1) a4)
109
(push a4)
(cabeq a4 (& 2) 112)
(cnblt (cvalq #:crunch:verbose) '1 114)
(push (@ 115))
(push (@ 116))
(push '".. ")
(push (@ 117))
(push nil)
(mov 'requiredmodules a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp format)
117
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
116
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp print)
115
(eval ())
114
(mov (& 0) (& 2))
112
(mov (& 0) a4)
(btnil (cdr a4) 119)
(push (@ 120))
(push '#:crunch:warning)
(push (cvalq #:crunch:default-multiple-defined-message))
(mov (& 4) a1)
(jcall kwote)
(push a1)
(mov (& 4) a1)
(jcall kwote)
(push a1)
(mov '4 a4)
(jmp funcall)
120
(eval ())
119
(push (& 0))
121
(bfcons (& 0) 122)
(push (@ 123))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp #:crunch:load-cpenv)
123
(eval ())
(bra 121)
122
(adjstk '2)
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:crunch:load-cpenv nsubr)
(entry #:crunch:load-cpenv nsubr)
(cnbge a4 '1 101)
(mov '#:crunch:load-cpenv a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov (& 1) a1)
(jcall pathname)
(jcall pathname-name)
(mov a1 a2)
(mov nil a1)
(jcall symbol)
(mov a1 (& 1))
(mov (cvalq #:crunch:loaded-cpenv) a2)
(jcall memq)
(bfnil a1 102)
(mov (cvalq #:crunch:loaded-cpenv) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:crunch:loaded-cpenv))
(mov (& 0) a4)
(mov (car a4) a4)
(bfnil a4 104)
(mov (& 1) a1)
(call #:crunch:readdefmodule)
(mov a1 a4)
104
(push a4)
(mov 'import a2)
(mov a4 a1)
(jcall getdefmodule)
(push a1)
105
(bfcons (& 0) 106)
(push (@ 107))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp #:crunch:load-cpenv)
107
(eval ())
(bra 105)
106
(adjstk '1)
(cnblt (cvalq #:crunch:verbose) '1 109)
(push (@ 110))
(push (@ 111))
(push '".. ")
(mov 'cpenv a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
111
(eval ())
(push a1)
(push (& 4))
(mov '2 a4)
(jmp print)
110
(eval ())
109
(mov 'cpenv a2)
(mov (& 0) a1)
(jcall getdefmodule)
(push a1)
112
(bfcons (& 0) 113)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 115)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push nil)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push (cvalq #:system:in-read-flag))
(mov (& 2) (cvalq #:system:in-read-flag))
(push '2)
(push '(#:sys-package:itsoft #:system:in-read-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 118))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 21) a1)
(jcall eprogn)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
118
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 117)
(mov (cvalq #:crunch:loaded-cpenv) a2)
(mov (& 13) a1)
(jcall delq)
(mov a1 (cvalq #:crunch:loaded-cpenv))
(mov (& 9) a3)
(mov 'cpenvfailed a2)
(mov 'eval a1)
(jcall printerror)
(mov 'cpenv a1)
(jcall get-message)
(mov a1 (cvalq #:crunch:read-error))
117
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:in-read-flag))
(mov (& 7) (cvalq #:sys-package:itsoft))
(adjstk '9)
115
(adjstk '1)
(bra 112)
113
(adjstk '1)
(cnblt (cvalq #:crunch:verbose) '1 119)
(push (@ 121))
(push (@ 122))
(push '".. ")
(mov 'done a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
122
(eval ())
(push a1)
(push (& 4))
(mov '2 a4)
(jmp print)
121
(eval ())
(adjstk '3)
(return)
119
(mov nil a1)
(adjstk '3)
(return)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:crunch:sharp:| | nsubr)
(entry #:crunch:sharp:| | nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:| | a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:| |)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:| | a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:| |)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|!| nsubr)
(entry #:crunch:sharp:|!| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|!| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|!|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|!| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|!|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|"| nsubr)
(entry #:crunch:sharp:|"| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|"| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|"|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|"| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|"|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|#| nsubr)
(entry #:crunch:sharp:|#| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|#| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|#|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|#| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|#|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:$ nsubr)
(entry #:crunch:sharp:$ nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:$ a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:$)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:$ a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:$)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:% nsubr)
(entry #:crunch:sharp:% nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:% a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:%)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:% a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:%)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:& nsubr)
(entry #:crunch:sharp:& nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:& a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:&)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:& a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:&)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|'| nsubr)
(entry #:crunch:sharp:|'| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|'| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|'|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|'| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|'|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|(| nsubr)
(entry #:crunch:sharp:|(| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|(| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|(|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|(| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|(|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|)| nsubr)
(entry #:crunch:sharp:|)| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|)| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|)|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|)| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|)|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:* nsubr)
(entry #:crunch:sharp:* nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:* a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:*)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:* a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:*)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|+| nsubr)
(entry #:crunch:sharp:|+| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|+| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|+|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|+| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|+|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|,| nsubr)
(entry #:crunch:sharp:|,| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|,| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|,|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|,| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|,|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|-| nsubr)
(entry #:crunch:sharp:|-| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|-| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|-|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|-| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|-|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|.| nsubr)
(entry #:crunch:sharp:|.| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|.| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|.|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|.| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|.|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:/ nsubr)
(entry #:crunch:sharp:/ nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:/ a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:/)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:/ a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:/)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|0| nsubr)
(entry #:crunch:sharp:|0| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|0| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|0|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|0| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|0|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|1| nsubr)
(entry #:crunch:sharp:|1| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|1| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|1|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|1| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|1|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|2| nsubr)
(entry #:crunch:sharp:|2| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|2| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|2|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|2| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|2|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|3| nsubr)
(entry #:crunch:sharp:|3| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|3| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|3|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|3| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|3|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|4| nsubr)
(entry #:crunch:sharp:|4| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|4| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|4|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|4| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|4|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|5| nsubr)
(entry #:crunch:sharp:|5| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|5| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|5|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|5| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|5|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|6| nsubr)
(entry #:crunch:sharp:|6| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|6| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|6|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|6| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|6|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|7| nsubr)
(entry #:crunch:sharp:|7| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|7| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|7|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|7| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|7|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|8| nsubr)
(entry #:crunch:sharp:|8| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|8| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|8|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|8| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|8|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|9| nsubr)
(entry #:crunch:sharp:|9| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|9| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|9|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|9| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|9|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|:| nsubr)
(entry #:crunch:sharp:|:| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|:| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|:|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|:| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|:|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|;| nsubr)
(entry #:crunch:sharp:|;| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|;| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|;|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|;| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|;|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:< nsubr)
(entry #:crunch:sharp:< nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:< a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:<)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:< a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:<)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:= nsubr)
(entry #:crunch:sharp:= nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:= a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:=)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:= a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:=)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:> nsubr)
(entry #:crunch:sharp:> nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:> a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:>)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:> a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:>)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:? nsubr)
(entry #:crunch:sharp:? nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:? a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:?)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:? a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:?)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:@ nsubr)
(entry #:crunch:sharp:@ nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:@ a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:@)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:@ a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:@)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:A nsubr)
(entry #:crunch:sharp:A nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:A a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:A)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:A a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:A)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:B nsubr)
(entry #:crunch:sharp:B nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:B a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:B)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:B a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:B)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:C nsubr)
(entry #:crunch:sharp:C nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:C a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:C)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:C a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:C)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:D nsubr)
(entry #:crunch:sharp:D nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:D a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:D)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:D a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:D)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|E| nsubr)
(entry #:crunch:sharp:|E| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|E| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|E|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|E| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|E|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:F nsubr)
(entry #:crunch:sharp:F nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:F a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:F)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:F a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:F)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:G nsubr)
(entry #:crunch:sharp:G nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:G a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:G)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:G a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:G)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:H nsubr)
(entry #:crunch:sharp:H nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:H a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:H)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:H a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:H)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:I nsubr)
(entry #:crunch:sharp:I nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:I a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:I)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:I a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:I)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:J nsubr)
(entry #:crunch:sharp:J nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:J a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:J)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:J a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:J)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:K nsubr)
(entry #:crunch:sharp:K nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:K a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:K)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:K a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:K)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:L nsubr)
(entry #:crunch:sharp:L nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:L a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:L)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:L a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:L)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:M nsubr)
(entry #:crunch:sharp:M nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:M a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:M)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:M a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:M)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:N nsubr)
(entry #:crunch:sharp:N nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:N a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:N)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:N a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:N)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:O nsubr)
(entry #:crunch:sharp:O nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:O a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:O)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:O a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:O)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:P nsubr)
(entry #:crunch:sharp:P nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:P a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:P)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:P a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:P)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:Q nsubr)
(entry #:crunch:sharp:Q nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:Q a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:Q)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:Q a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:Q)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:R nsubr)
(entry #:crunch:sharp:R nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:R a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:R)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:R a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:R)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:S nsubr)
(entry #:crunch:sharp:S nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:S a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:S)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:S a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:S)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:T nsubr)
(entry #:crunch:sharp:T nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:T a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:T)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:T a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:T)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:U nsubr)
(entry #:crunch:sharp:U nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:U a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:U)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:U a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:U)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:V nsubr)
(entry #:crunch:sharp:V nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:V a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:V)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:V a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:V)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:W nsubr)
(entry #:crunch:sharp:W nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:W a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:W)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:W a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:W)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:X nsubr)
(entry #:crunch:sharp:X nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:X a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:X)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:X a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:X)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:Y nsubr)
(entry #:crunch:sharp:Y nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:Y a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:Y)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:Y a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:Y)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:Z nsubr)
(entry #:crunch:sharp:Z nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:Z a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:Z)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:Z a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:Z)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|[| nsubr)
(entry #:crunch:sharp:|[| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|[| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|[|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|[| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|[|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:\ nsubr)
(entry #:crunch:sharp:\ nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:\ a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:\)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:\ a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:\)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|]| nsubr)
(entry #:crunch:sharp:|]| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|]| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|]|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|]| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|]|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|^| nsubr)
(entry #:crunch:sharp:|^| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|^| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|^|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|^| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|^|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:_ nsubr)
(entry #:crunch:sharp:_ nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:_ a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:_)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:_ a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:_)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|`| nsubr)
(entry #:crunch:sharp:|`| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|`| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|`|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|`| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|`|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:a nsubr)
(entry #:crunch:sharp:a nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:a a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:a)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:a a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:a)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:b nsubr)
(entry #:crunch:sharp:b nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:b a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:b)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:b a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:b)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:c nsubr)
(entry #:crunch:sharp:c nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:c a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:c)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:c a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:c)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:d nsubr)
(entry #:crunch:sharp:d nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:d a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:d)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:d a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:d)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|e| nsubr)
(entry #:crunch:sharp:|e| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|e| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|e|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|e| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|e|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:f nsubr)
(entry #:crunch:sharp:f nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:f a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:f)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:f a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:f)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:g nsubr)
(entry #:crunch:sharp:g nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:g a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:g)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:g a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:g)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:h nsubr)
(entry #:crunch:sharp:h nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:h a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:h)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:h a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:h)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:i nsubr)
(entry #:crunch:sharp:i nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:i a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:i)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:i a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:i)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:j nsubr)
(entry #:crunch:sharp:j nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:j a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:j)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:j a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:j)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:k nsubr)
(entry #:crunch:sharp:k nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:k a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:k)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:k a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:k)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:l nsubr)
(entry #:crunch:sharp:l nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:l a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:l)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:l a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:l)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:m nsubr)
(entry #:crunch:sharp:m nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:m a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:m)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:m a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:m)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:n nsubr)
(entry #:crunch:sharp:n nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:n a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:n)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:n a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:n)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:o nsubr)
(entry #:crunch:sharp:o nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:o a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:o)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:o a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:o)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:p nsubr)
(entry #:crunch:sharp:p nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:p a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:p)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:p a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:p)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:q nsubr)
(entry #:crunch:sharp:q nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:q a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:q)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:q a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:q)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:r nsubr)
(entry #:crunch:sharp:r nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:r a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:r)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:r a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:r)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:s nsubr)
(entry #:crunch:sharp:s nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:s a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:s)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:s a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:s)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:t nsubr)
(entry #:crunch:sharp:t nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:t a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:t)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:t a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:t)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:u nsubr)
(entry #:crunch:sharp:u nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:u a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:u)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:u a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:u)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:v nsubr)
(entry #:crunch:sharp:v nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:v a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:v)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:v a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:v)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:w nsubr)
(entry #:crunch:sharp:w nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:w a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:w)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:w a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:w)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:x nsubr)
(entry #:crunch:sharp:x nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:x a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:x)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:x a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:x)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:y nsubr)
(entry #:crunch:sharp:y nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:y a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:y)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:y a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:y)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:z nsubr)
(entry #:crunch:sharp:z nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:z a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:z)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:z a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:z)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|{| nsubr)
(entry #:crunch:sharp:|{| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|{| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|{|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|{| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|{|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|||| nsubr)
(entry #:crunch:sharp:|||| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|||| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:||||)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|||| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:||||)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:|}| nsubr)
(entry #:crunch:sharp:|}| nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:|}| a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:|}|)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:|}| a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:|}|)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader'((fentry #:crunch:sharp:~ nsubr)
(entry #:crunch:sharp:~ nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov '#:sharp:~ a1)
(jcall typefn)
(btnil a1 101)
(push (@ 103))
(push '#:sharp:~)
(push (& 2))
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall remq)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:sharp:~ a3)
(mov 'errudf a2)
(mov '|#| a1)
(call #:crunch:errudf:syserror)
(btnil a1 104)
(push (@ 106))
(push '#:sharp:~)
(push (& 9))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(return)
))
(loader '((end)))
