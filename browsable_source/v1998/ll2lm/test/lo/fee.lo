(loader '((title |fee.lo|)))
(putprop 's-fee '((() ()) a b) 'defstruct)
(loader'((fentry #:s-fee:make subr0)
(entry #:s-fee:make subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp vector)
101
(eval ())
(mov 's-fee (cdr a1))
(return)
))
(loader'((fentry #:s-fee:a nsubr)
(entry #:s-fee:a nsubr)
(push a4)
(push (@ 101))
(push '#:s-fee:a)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:s-fee:a #:s-fee:a)))
(if (featurep 'compiler) (progn (defmacro-open #:s-fee:a (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:s-fee:b nsubr)
(entry #:s-fee:b nsubr)
(push a4)
(push (@ 101))
(push '#:s-fee:b)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:s-fee:b #:s-fee:b)))
(if (featurep 'compiler) (progn (defmacro-open #:s-fee:b (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader '((end)))
