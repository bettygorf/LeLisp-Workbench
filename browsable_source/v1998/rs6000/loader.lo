(loader '((title |loader.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'laprs6000)))
(defvar #:sys-package:colon 'ldrs6000)
(defvar #:ldrs6000:31bitfloats (eq 0. 0.))
(add-feature 'loader)
(if (not (eq (typefn '#:ldrs6000:icacheflush) 'subr2)) (progn (let ((pc (#:system:ccode))) (mapc (lambda (n) (memory pc n) (setq pc (addadr pc 2))) '(31848 678 -27551 -4 31854 1062 32195 28688 31758 6380 31758 30720 16768 -8 14784 0 31758 30956 -32767 0 12321 4 31752 934 20096 32)) (setfn '#:ldrs6000:icacheflush 'subr2 (addadr 8 (#:system:ccode))) (#:system:ccode pc))))
(#:messages:put-message '#:loader:errrlnr 'french '"Il reste des re'fe'rences locales non re'solues" 'defmessage)
(#:messages:put-message '#:loader:errrlnr 'english '"There are unresolved local references" 'defmessage)
'#:loader:errrlnr
(#:messages:put-message '#:loader:errenr 'french '"Il reste des ENTRY non re'solues" 'defmessage)
(#:messages:put-message '#:loader:errenr 'english '"There are unresolved ENTRY points" 'defmessage)
'#:loader:errenr
(#:messages:put-message '#:loader:errmtg 'french '"Module trop gros" 'defmessage)
(#:messages:put-message '#:loader:errmtg 'english '"Module too long" 'defmessage)
'#:loader:errmtg
(#:messages:put-message '#:loader:errloader 'french '"Erreur de chargement dans: " 'defmessage)
(#:messages:put-message '#:loader:errloader 'english '"Loader error in: " 'defmessage)
'#:loader:errloader
(#:messages:put-message '#:loader:errmdu 'french '"Module de'ja` charge', rechargement du module" 'defmessage)
(#:messages:put-message '#:loader:errmdu 'english '"Module already in use, loading again" 'defmessage)
'#:loader:errmdu
(loader'((entry #:ldrs6000:r_a subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '20 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_ai subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '12288 a3)
(lor a4 a3)
(mov (& 1) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_and subr3)
(push a3)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '56 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_andil subr3)
(push a3)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '28672 a3)
(lor a4 a3)
(mov (& 1) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_b subr1)
(push a1)
(call #:ldrs6000:hight-br)
(mov '18432 a4)
(lor a1 a4)
(push a4)
(mov (& 1) a1)
(call #:ldrs6000:low)
(lor '0 a1)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_beq subr1)
(mov a1 a2)
(mov '16770 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_bge subr1)
(mov a1 a2)
(mov '16512 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_bgt subr1)
(mov a1 a2)
(mov '16769 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_bl subr1)
(push a1)
(call #:ldrs6000:hight-br)
(mov '18432 a4)
(lor a1 a4)
(push a4)
(mov (& 1) a1)
(call #:ldrs6000:low)
(lor '1 a1)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_ble subr1)
(mov a1 a2)
(mov '16513 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_blt subr1)
(mov a1 a2)
(mov '16768 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_bne subr1)
(mov a1 a2)
(mov '16514 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_br subr0)
(mov '32 a2)
(mov '20096 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_brl subr0)
(mov '33 a2)
(mov '20096 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_cmp subr2)
(push a2)
(call #:ldrs6000:regval)
(mov '31744 a4)
(lor a1 a4)
(push a4)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '0 a1)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_cmpi subr2)
(push a2)
(call #:ldrs6000:regval)
(mov '11264 a4)
(lor a1 a4)
(mov (& 0) a2)
(mov a4 a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_cmpl subr2)
(push a2)
(call #:ldrs6000:regval)
(mov '31744 a4)
(lor a1 a4)
(push a4)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '64 a1)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_cmpli subr2)
(push a2)
(call #:ldrs6000:regval)
(mov '10240 a4)
(lor a1 a4)
(mov (& 0) a2)
(mov a4 a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_cror subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '19456 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '898 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_divs subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '726 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_exts subr2)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(mov '1844 a2)
(mov a3 a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_fa subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-1024 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '42 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_fcmpu subr2)
(push a2)
(call #:ldrs6000:regval)
(mov '-1024 a4)
(lor a1 a4)
(push a4)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '0 a1)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_fd subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-1024 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '36 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_fm subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-1024 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '6 a1)
(lor '50 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_frsp subr2)
(push a2)
(call #:ldrs6000:regval)
(mov '-1024 a4)
(lor a1 a4)
(push a4)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '24 a1)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_fs subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-1024 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '40 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_l subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '#$8000 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_lbz subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-30720 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_lbzx subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '174 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_lfs subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-16384 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_lfd subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-14336 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_lil subr2)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov '0 a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '14336 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_liu subr2)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov '0 a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '15360 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_lx subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '46 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_mflr subr1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov '8 a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(mov '678 a2)
(mov a3 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_mfmq subr1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov '0 a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(mov '678 a2)
(mov a3 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_mtlr subr1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov '8 a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(mov '934 a2)
(mov a3 a1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_muli subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '7168 a3)
(lor a4 a3)
(mov (& 1) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_muls subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '470 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_neg subr2)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(mov '208 a2)
(mov a3 a1)
(adjstk '1)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_or subr3)
(push a3)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '888 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_oril subr3)
(push a3)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '24576 a3)
(lor a4 a3)
(mov (& 1) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_oriu subr3)
(push a3)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '25600 a3)
(lor a4 a3)
(mov (& 1) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_rlnm nsubr)
(mov (& 3) a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 5) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '23552 a3)
(lor a4 a3)
(push a3)
(mov (& 3) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(mov (& 2) a4)
(lshift '6 a4)
(mov (& 1) a3)
(lshift '1 a3)
(lor a3 a4)
(lor a4 a1)
(mov a1 a2)
(pop a1)
(adjstk '5)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_rlinm nsubr)
(mov (& 3) a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 5) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '21504 a3)
(lor a4 a3)
(mov (& 2) a4)
(lshift '11 a4)
(mov (& 1) a2)
(lshift '6 a2)
(mov (& 0) a1)
(lshift '1 a1)
(lor a1 a2)
(lor a2 a4)
(mov a4 a2)
(mov a3 a1)
(adjstk '5)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_sf subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '16 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_si subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '12288 a3)
(lor a4 a3)
(push a3)
(push (@ 101))
(push '0)
(push (& 4))
(mov '2 a4)
(jmp |-|)
101
(eval ())
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_sli subr3)
(push a3)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '368 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_st subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-28672 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_stb subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-26624 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_stbx subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '430 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_stfs subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-12288 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_stu subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '-27648 a3)
(lor a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_stx subr3)
(push a3)
(push a2)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '302 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_xor subr3)
(push a3)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '31744 a3)
(lor a4 a3)
(push a3)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(lshift '11 a1)
(lor '632 a1)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:r_xoril subr3)
(push a3)
(push a1)
(mov a2 a1)
(call #:ldrs6000:regval)
(lshift '5 a1)
(push a1)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(pop a4)
(lor a1 a4)
(mov '26624 a3)
(lor a4 a3)
(mov (& 1) a2)
(mov a3 a1)
(adjstk '2)
(bra #:ldrs6000:1long)
))
(loader'((entry #:ldrs6000:regval subr1)
(bfsymb a1 29999)
(mov '#:ldrs6000:regval a2)
(jmp getprop)
29999
(return)
))
(putprop 'x0 '0 '#:ldrs6000:regval)
(putprop 'sp '1 '#:ldrs6000:regval)
(putprop 'x1 '3 '#:ldrs6000:regval)
(putprop 'x2 '4 '#:ldrs6000:regval)
(putprop 'x3 '5 '#:ldrs6000:regval)
(putprop 'x4 '6 '#:ldrs6000:regval)
(putprop 'cp '13 '#:ldrs6000:regval)
(putprop 'a1 '14 '#:ldrs6000:regval)
(putprop 'a2 '15 '#:ldrs6000:regval)
(putprop 'a3 '16 '#:ldrs6000:regval)
(putprop 'a4 '17 '#:ldrs6000:regval)
(putprop 'rbfloat '18 '#:ldrs6000:regval)
(putprop 'rbvect '19 '#:ldrs6000:regval)
(putprop 'rbstrg '20 '#:ldrs6000:regval)
(putprop 'rnil '21 '#:ldrs6000:regval)
(putprop 'nil '21 '#:ldrs6000:regval)
(putprop 'rbsymb '21 '#:ldrs6000:regval)
(putprop 'rbcons '22 '#:ldrs6000:regval)
(putprop 'rbvar '23 '#:ldrs6000:regval)
(putprop 'radlink '24 '#:ldrs6000:regval)
(putprop 'rallink '25 '#:ldrs6000:regval)
(putprop 'raitcount '26 '#:ldrs6000:regval)
(putprop 'f1 '1 '#:ldrs6000:regval)
(putprop 'f2 '2 '#:ldrs6000:regval)
(putprop 'car '0 '#:ldrs6000:val)
(putprop 'cdr '4 '#:ldrs6000:val)
(putprop 'cval '0 '#:ldrs6000:val)
(putprop 'plist '4 '#:ldrs6000:val)
(putprop 'fval '8 '#:ldrs6000:val)
(putprop 'pkgc '12 '#:ldrs6000:val)
(putprop 'oval '16 '#:ldrs6000:val)
(putprop 'alink '20 '#:ldrs6000:val)
(putprop 'pname '28 '#:ldrs6000:val)
(putprop 'val '0 '#:ldrs6000:val)
(putprop 'typ '4 '#:ldrs6000:val)
(loader'((entry #:ldrs6000:mov subr2)
(push a2)
(push a1)
(bfsymb a2 101)
(mov a2 a1)
(call #:ldrs6000:regval)
(btnil a1 101)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:load-reg)
101
(mov 'x1 a2)
(mov (& 0) a1)
(call #:ldrs6000:prepsrc)
(mov (& 1) a2)
(adjstk '2)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:load-reg subr2)
(push a2)
(push a1)
(call #:ldrs6000:prepsrc)
(cabeq a1 (& 1) 101)
(mov '0 a3)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:ldrs6000:r_oril)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:ldrs6000:car subr1)
(push a1)
(push (@ 101))
(push 'car)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (& 0) a2)
(adjstk '1)
(bra #:ldrs6000:mov)
))
(loader'((entry #:ldrs6000:cdr subr1)
(push a1)
(push (@ 101))
(push 'cdr)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (& 0) a2)
(adjstk '1)
(bra #:ldrs6000:mov)
))
(loader'((entry #:ldrs6000:hpxmov subr3)
(push a3)
(push a2)
(push a1)
(mov a2 a1)
(call #:ldrs6000:fix?)
(push a1)
(mov 'x1 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a3)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(btnil (& 0) 101)
(cnbge (& 0) '8190 101)
(bfsymb (& 3) 103)
(mov (& 3) a1)
(call #:ldrs6000:regval)
(btnil a1 103)
(mov (& 0) a4)
(lshift '2 a4)
(mov '8 a3)
(plus a4 a3)
(push a3)
(mov 'x1 a3)
(pop a2)
(mov (& 3) a1)
(adjstk '4)
(bra #:ldrs6000:r_l)
103
(mov (& 0) a4)
(lshift '2 a4)
(mov '8 a3)
(plus a4 a3)
(push a3)
(mov 'x1 a3)
(pop a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(mov (& 3) a2)
(mov 'x1 a1)
(adjstk '4)
(bra #:ldrs6000:movdest)
101
(mov 'x2 a2)
(mov (& 2) a1)
(call #:ldrs6000:prepsrc)
(mov '2 a3)
(mov a1 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_ai)
(mov '2 a3)
(mov 'x2 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_sli)
(bfsymb (& 3) 105)
(mov (& 3) a1)
(call #:ldrs6000:regval)
(btnil a1 105)
(mov 'x2 a3)
(mov 'x1 a2)
(mov (& 3) a1)
(adjstk '4)
(bra #:ldrs6000:r_lx)
105
(mov 'x2 a3)
(mov 'x1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_lx)
(mov (& 3) a2)
(mov 'x1 a1)
(adjstk '4)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:hpmovx subr3)
(push a3)
(push a2)
(push a1)
(mov a3 a1)
(call #:ldrs6000:fix?)
(push a1)
(mov 'x1 a2)
(mov (& 2) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a3)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(btnil (& 0) 101)
(cnbge (& 0) '8190 101)
(mov 'x3 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov (& 0) a4)
(lshift '2 a4)
(mov '8 a3)
(plus a4 a3)
(push a3)
(mov 'x1 a3)
(pop a2)
(adjstk '4)
(bra #:ldrs6000:r_st)
101
(mov 'x2 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(mov '2 a3)
(mov a1 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_ai)
(mov '2 a3)
(mov 'x2 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_sli)
(mov 'x3 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov 'x2 a3)
(mov 'x1 a2)
(adjstk '4)
(bra #:ldrs6000:r_stx)
))
(loader'((entry #:ldrs6000:hbxmov subr3)
(push a3)
(push a2)
(push a1)
(mov a2 a1)
(call #:ldrs6000:fix?)
(push a1)
(mov 'x1 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a3)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(btnil (& 0) 101)
(cnbge (& 0) '32760 101)
(bfsymb (& 3) 103)
(mov (& 3) a1)
(call #:ldrs6000:regval)
(btnil a1 103)
(mov (& 0) a4)
(plus '8 a4)
(mov 'x1 a3)
(mov a4 a2)
(mov (& 3) a1)
(adjstk '4)
(bra #:ldrs6000:r_lbz)
103
(mov (& 0) a4)
(plus '8 a4)
(mov 'x1 a3)
(mov a4 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_lbz)
(mov (& 3) a2)
(mov 'x1 a1)
(adjstk '4)
(bra #:ldrs6000:movdest)
101
(mov 'x2 a2)
(mov (& 2) a1)
(call #:ldrs6000:prepsrc)
(mov '8 a3)
(mov a1 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_ai)
(bfsymb (& 3) 105)
(mov (& 3) a1)
(call #:ldrs6000:regval)
(btnil a1 105)
(mov 'x2 a3)
(mov 'x1 a2)
(mov (& 3) a1)
(adjstk '4)
(bra #:ldrs6000:r_lbzx)
105
(mov 'x2 a3)
(mov 'x1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_lbzx)
(mov (& 3) a2)
(mov 'x1 a1)
(adjstk '4)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:hbmovx subr3)
(push a3)
(push a2)
(push a1)
(mov a3 a1)
(call #:ldrs6000:fix?)
(push a1)
(mov 'x1 a2)
(mov (& 2) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a3)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(btnil (& 0) 101)
(cnbge (& 0) '32760 101)
(mov 'x2 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov (& 0) a4)
(plus '8 a4)
(mov 'x1 a3)
(mov a4 a2)
(adjstk '4)
(bra #:ldrs6000:r_stb)
101
(mov 'x2 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(mov '8 a3)
(mov a1 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_ai)
(mov 'x3 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov 'x2 a3)
(mov 'x1 a2)
(adjstk '4)
(bra #:ldrs6000:r_stbx)
))
(loader'((entry #:ldrs6000:hgsize subr2)
(push a2)
(mov 'x1 a2)
(call #:ldrs6000:prepsrc)
(mov a1 a3)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(bfsymb (& 0) 101)
(mov (& 0) a1)
(call #:ldrs6000:regval)
(btnil a1 101)
(mov 'x1 a3)
(mov '4 a2)
(mov (& 0) a1)
(adjstk '1)
(bra #:ldrs6000:r_l)
101
(mov 'x1 a3)
(mov '4 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(mov (& 0) a2)
(mov 'x1 a1)
(adjstk '1)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:cmprel subr2)
(push a1)
(mov 'bb a1)
(call #:ldrs6000:get-relative-label-value)
(push a1)
(mov (& 1) a1)
(cabne a1 'eq 102)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_beq)
102
(cabne a1 'ne 103)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_bne)
103
(cabne a1 'ge 104)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_bge)
104
(cabne a1 'gt 105)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_bgt)
105
(cabne a1 'le 106)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_ble)
106
(cabne a1 'lt 107)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_blt)
107
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:ldrs6000:rev-op-cmp subr1)
(cabne a1 'ge 102)
(mov 'le a1)
(return)
102
(cabne a1 'gt 103)
(mov 'lt a1)
(return)
103
(cabne a1 'le 104)
(mov 'ge a1)
(return)
104
(cabne a1 'lt 29999)
(mov 'gt a1)
(return)
29999
(return)
))
(loader'((entry #:ldrs6000:compare-and-branch nsubr)
(mov (& 3) a1)
(call #:ldrs6000:fix?)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:fix?)
(push a1)
(btnil (& 1) 101)
(mov 'x1 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(mov (& 1) a2)
(call #:ldrs6000:r_cmpli)
(mov (& 4) a1)
(call #:ldrs6000:rev-op-cmp)
(mov (& 2) a2)
(adjstk '6)
(bra #:ldrs6000:cmprel)
101
(btnil a1 103)
(mov 'x1 a2)
(mov (& 5) a1)
(call #:ldrs6000:prepsrc)
(mov (& 0) a2)
(call #:ldrs6000:r_cmpli)
(mov (& 2) a2)
(mov (& 4) a1)
(adjstk '6)
(bra #:ldrs6000:cmprel)
103
(mov 'x1 a2)
(mov (& 5) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(mov 'x2 a2)
(mov (& 4) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(pop a1)
(call #:ldrs6000:r_cmpl)
(mov (& 2) a2)
(mov (& 4) a1)
(adjstk '6)
(bra #:ldrs6000:cmprel)
))
(loader'((entry #:ldrs6000:compare-signed-and-branch nsubr)
(mov (& 1) a1)
(call #:ldrs6000:fix?)
(push a1)
(btnil a1 101)
(mov 'x1 a2)
(mov (& 4) a1)
(call #:ldrs6000:prepsrc)
(mov (& 0) a2)
(call #:ldrs6000:r_cmpi)
(mov (& 1) a2)
(mov (& 3) a1)
(adjstk '5)
(bra #:ldrs6000:cmprel)
101
(mov 'x1 a2)
(mov (& 4) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(mov 'x2 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(pop a1)
(call #:ldrs6000:r_cmp)
(mov (& 1) a2)
(mov (& 3) a1)
(adjstk '5)
(bra #:ldrs6000:cmprel)
))
(loader'((entry #:ldrs6000:bt2xx nsubr)
(call #:ldrs6000:genlab)
(push a1)
(mov 'x3 a2)
(mov (& 4) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(push (@ 101))
(push a1)
(push 'lt)
(push (& 7))
(push (& 5))
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(push (@ 102))
(push (& 1))
(push 'lt)
(push (& 6))
(push (& 6))
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
102
(eval ())
(mov (& 1) a1)
(adjstk '6)
(bra #:ldrs6000:new-label)
))
(loader'((entry #:ldrs6000:bf2xx nsubr)
(mov 'x3 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(push (@ 101))
(push a1)
(push 'lt)
(push (& 6))
(push (& 5))
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(push (@ 102))
(push (& 1))
(push 'ge)
(push (& 5))
(push (& 5))
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
102
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:ldrs6000:cabeq subr3)
(push (@ 101))
(push a1)
(push 'eq)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cabne subr3)
(push (@ 101))
(push a1)
(push 'ne)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:btnil subr2)
(push (@ 101))
(push a1)
(push 'eq)
(push 'rnil)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bfnil subr2)
(push (@ 101))
(push a1)
(push 'ne)
(push 'rnil)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:btcons subr2)
(push (@ 101))
(push a1)
(push 'ge)
(push 'rbcons)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:compare-signed-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bfcons subr2)
(push (@ 101))
(push a1)
(push 'lt)
(push 'rbcons)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:compare-signed-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:btfix subr2)
(push (@ 101))
(push a1)
(push 'lt)
(push 'rbfloat)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bffix subr2)
(push (@ 101))
(push a1)
(push 'ge)
(push 'rbfloat)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:btfloat subr2)
(btnil (cvalq #:ldrs6000:31bitfloats) 101)
(push (@ 103))
(push a1)
(push 'lt)
(push ''0)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:compare-signed-and-branch)
103
(eval ())
(return)
101
(push (@ 104))
(push a1)
(push 'rbfloat)
(push 'rbvect)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bt2xx)
104
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bffloat subr2)
(btnil (cvalq #:ldrs6000:31bitfloats) 101)
(push (@ 103))
(push a1)
(push 'ge)
(push ''0)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:compare-signed-and-branch)
103
(eval ())
(return)
101
(push (@ 104))
(push a1)
(push 'rbfloat)
(push 'rbvect)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bf2xx)
104
(eval ())
(return)
))
(loader'((entry #:ldrs6000:btvect subr2)
(push (@ 101))
(push a1)
(push 'rbvect)
(push 'rbstrg)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bt2xx)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bfvect subr2)
(push (@ 101))
(push a1)
(push 'rbvect)
(push 'rbstrg)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bf2xx)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:btstrg subr2)
(push (@ 101))
(push a1)
(push 'rbstrg)
(push 'rbsymb)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bt2xx)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bfstrg subr2)
(push (@ 101))
(push a1)
(push 'rbstrg)
(push 'rbsymb)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bf2xx)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:btsymb subr2)
(push (@ 101))
(push a1)
(push 'rbsymb)
(push 'rbcons)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bt2xx)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bfsymb subr2)
(push (@ 101))
(push a1)
(push 'rbsymb)
(push 'rbcons)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bf2xx)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:btvar subr2)
(push (@ 101))
(push a1)
(push 'rbvar)
(push 'rbcons)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bt2xx)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bfvar subr2)
(push (@ 101))
(push a1)
(push 'rbvar)
(push 'rbcons)
(push a2)
(mov '4 a4)
(bra #:ldrs6000:bf2xx)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:compare-num-and-branch nsubr)
(mov (& 3) a1)
(call #:ldrs6000:fix?)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:fix?)
(push a1)
(btnil (& 1) 101)
(mov 'x1 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
(mov (& 1) a2)
(mov 'x1 a1)
(call #:ldrs6000:r_cmpi)
(mov (& 4) a1)
(call #:ldrs6000:rev-op-cmp)
(mov (& 2) a2)
(adjstk '6)
(bra #:ldrs6000:cmprel)
101
(btnil a1 103)
(mov 'x1 a2)
(mov (& 5) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
(mov (& 0) a2)
(mov 'x1 a1)
(call #:ldrs6000:r_cmpi)
(mov (& 2) a2)
(mov (& 4) a1)
(adjstk '6)
(bra #:ldrs6000:cmprel)
103
(mov 'x1 a2)
(mov (& 5) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
(mov 'x2 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_exts)
(mov 'x2 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_cmp)
(mov (& 2) a2)
(mov (& 4) a1)
(adjstk '6)
(bra #:ldrs6000:cmprel)
))
(loader'((entry #:ldrs6000:cnbeq subr3)
(push (@ 101))
(push a1)
(push 'eq)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cnbne subr3)
(push (@ 101))
(push a1)
(push 'ne)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cnblt subr3)
(push (@ 101))
(push a1)
(push 'lt)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-num-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cnble subr3)
(push (@ 101))
(push a1)
(push 'le)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-num-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cnbgt subr3)
(push (@ 101))
(push a1)
(push 'gt)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-num-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cnbge subr3)
(push (@ 101))
(push a1)
(push 'ge)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-num-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:rol-float subr2)
(push a2)
(push a1)
(btnil (cvalq #:ldrs6000:31bitfloats) 101)
(mov a1 a2)
(call #:ldrs6000:r_frsp)
(mov 'cp a3)
(mov '0 a2)
(mov (& 0) a1)
(call #:ldrs6000:r_stfs)
(mov 'cp a3)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(push (@ 103))
(push 'x1)
(push 'x1)
(push '31)
(push '1)
(push '31)
(mov '5 a4)
(bra #:ldrs6000:r_rlinm)
103
(eval ())
(bfsymb (& 1) 104)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(btnil a1 104)
(mov '#$8000 a3)
(mov 'x1 a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:ldrs6000:r_oriu)
104
(mov '#$8000 a3)
(mov 'x1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_oriu)
(mov (& 1) a2)
(mov 'x1 a1)
(adjstk '2)
(bra #:ldrs6000:movdest)
101
(push (@ 106))
(push '"error")
(mov '1 a4)
(jmp print)
106
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:ldrs6000:unrol-float subr2)
(push a2)
(push a1)
(btnil (cvalq #:ldrs6000:31bitfloats) 101)
(bfsymb a1 103)
(call #:ldrs6000:regval)
(btnil a1 103)
(mov (& 0) a3)
(mov (& 0) a2)
(mov 'x1 a1)
(call #:ldrs6000:r_a)
(bra 104)
103
(mov 'x1 a2)
(mov (& 0) a1)
(call #:ldrs6000:prepsrc)
(mov 'x1 a3)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_a)
104
(mov 'cp a3)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_stu)
(mov 'cp a3)
(mov '0 a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:ldrs6000:r_lfs)
101
(push a2)
(mov 'x1 a2)
(call #:ldrs6000:prepsrc)
(mov a1 a3)
(mov '0 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:r_lfd)
))
(loader'((entry #:ldrs6000:compare-float-and-branch nsubr)
(mov 'f1 a2)
(mov (& 3) a1)
(call #:ldrs6000:unrol-float)
(mov 'f2 a2)
(mov (& 1) a1)
(call #:ldrs6000:unrol-float)
(mov 'f2 a2)
(mov 'f1 a1)
(call #:ldrs6000:r_fcmpu)
(mov (& 0) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:cmprel)
))
(loader'((entry #:ldrs6000:cfbeq subr3)
(push (@ 101))
(push a1)
(push 'eq)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-float-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cfbne subr3)
(push (@ 101))
(push a1)
(push 'ne)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-float-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cfbgt subr3)
(push (@ 101))
(push a1)
(push 'gt)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-float-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cfbge subr3)
(push (@ 101))
(push a1)
(push 'ge)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-float-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cfblt subr3)
(push (@ 101))
(push a1)
(push 'lt)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-float-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:cfble subr3)
(push (@ 101))
(push a1)
(push 'le)
(push a2)
(push a3)
(mov '4 a4)
(bra #:ldrs6000:compare-float-and-branch)
101
(eval ())
(return)
))
(loader'((entry #:ldrs6000:bra subr1)
(mov a1 a2)
(mov 'b a1)
(call #:ldrs6000:get-relative-label-value)
(bra #:ldrs6000:r_b)
))
(loader'((entry #:ldrs6000:jmp subr1)
(push (@ 101))
(push 'fvalq)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(bra #:ldrs6000:bri)
))
(loader'((entry #:ldrs6000:bri subr1)
(mov 'x3 a2)
(call #:ldrs6000:prepsrc)
(call #:ldrs6000:r_mtlr)
(bra #:ldrs6000:r_br)
))
(loader'((entry #:ldrs6000:brx subr2)
(push a2)
(push a1)
(call #:ldrs6000:genlab)
(push nil)
(push a1)
(mov a1 a2)
(mov 'lab a1)
(call #:ldrs6000:get-label-value)
(push a1)
(bffix a1 101)
(mov '0 a2)
(bra 102)
101
(mov (car a1) a2)
102
(mov 'x2 a1)
(call #:ldrs6000:r_liu)
(bffix (& 0) 103)
(mov (& 0) a3)
(bra 104)
103
(mov (& 0) a3)
(mov (cdr a3) a3)
104
(mov 'x2 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_oril)
(adjstk '1)
(mov 'x1 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(mov '2 a3)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_sli)
(mov 'x2 a3)
(mov 'x1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_a)
(mov 'x1 a3)
(mov '0 a2)
(mov 'x0 a1)
(call #:ldrs6000:r_l)
(mov 'x0 a1)
(call #:ldrs6000:r_mtlr)
(call #:ldrs6000:r_br)
(mov (& 0) a1)
(call #:ldrs6000:new-label)
105
(btnil (& 2) 106)
(mov (& 2) a2)
(mov (cdr a2) (& 2))
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov 'brx a1)
(call #:ldrs6000:get-label-value)
(mov a1 (& 1))
(bffix a1 107)
(mov a1 a2)
(mov '0 a1)
(call #:ldrs6000:1long)
(bra 105)
107
(mov (cdr a1) a2)
(mov (car a1) a1)
(call #:ldrs6000:1long)
(bra 105)
106
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:ldrs6000:sobgez subr2)
(push a2)
(push a1)
(mov 'x1 a2)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
(mov '1 a3)
(mov 'x1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_si)
(mov (& 0) a2)
(mov 'x1 a1)
(call #:ldrs6000:movdest)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_cmpi)
(mov (& 1) a2)
(mov 'bb a1)
(call #:ldrs6000:get-relative-label-value)
(call #:ldrs6000:r_bge)
(bfsymb (& 0) 101)
(mov (& 0) a1)
(call #:ldrs6000:regval)
(btnil a1 101)
(mov '-1 a3)
(mov 'x1 a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_andil)
101
(mov '-1 a3)
(mov 'x1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_andil)
(mov (& 0) a2)
(mov 'x1 a1)
(adjstk '2)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:nop subr0)
(mov '15 a3)
(mov '15 a2)
(mov '15 a1)
(bra #:ldrs6000:r_cror)
))
(loader'((entry #:ldrs6000:call subr1)
(call #:ldrs6000:get-relative-call-value)
(bra #:ldrs6000:r_bl)
))
(loader'((entry #:ldrs6000:jcall subr1)
(push (@ 101))
(push 'fvalq)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov 'x3 a2)
(call #:ldrs6000:mov)
(mov '8 a3)
(mov 'x3 a2)
(mov 'x3 a1)
(call #:ldrs6000:r_si)
(mov 'x3 a1)
(call #:ldrs6000:r_mtlr)
(bra #:ldrs6000:r_brl)
))
(loader'((entry #:ldrs6000:return subr0)
(mov 'x0 a1)
(call #:ldrs6000:pop)
(mov 'x0 a1)
(bra #:ldrs6000:bri)
))
(loader'((entry #:ldrs6000:push subr1)
(mov 'x1 a2)
(call #:ldrs6000:prepsrc)
(mov 'sp a3)
(mov '-4 a2)
(bra #:ldrs6000:r_stu)
))
(loader'((entry #:ldrs6000:pop subr1)
(push a1)
(bfsymb a1 101)
(call #:ldrs6000:regval)
(btnil a1 101)
(mov 'sp a3)
(mov '0 a2)
(mov (& 0) a1)
(call #:ldrs6000:r_l)
(mov '4 a3)
(mov 'sp a2)
(mov 'sp a1)
(adjstk '1)
(bra #:ldrs6000:r_ai)
101
(mov 'sp a3)
(mov '0 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_l)
(mov '4 a3)
(mov 'sp a2)
(mov 'sp a1)
(call #:ldrs6000:r_ai)
(mov (& 0) a2)
(mov 'x1 a1)
(adjstk '1)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:adjstk subr1)
(push a1)
(call #:ldrs6000:fix?)
(btnil a1 101)
(cnbge a1 '8192 101)
(cnble a1 '-8192 101)
(mov '4 a4)
(times a1 a4)
(mov a4 a3)
(mov 'sp a2)
(mov 'sp a1)
(adjstk '1)
(bra #:ldrs6000:r_ai)
101
(mov 'x1 a2)
(mov (& 0) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
(mov '2 a3)
(mov 'x1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_sli)
(mov 'x1 a3)
(mov 'sp a2)
(mov 'sp a1)
(adjstk '1)
(bra #:ldrs6000:r_a)
))
(loader'((entry #:ldrs6000:stack subr1)
(mov a1 a2)
(mov 'sp a1)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:sstack subr1)
(mov 'sp a2)
(bra #:ldrs6000:load-reg)
))
(loader'((entry #:ldrs6000:movxsp subr2)
(push a2)
(push a1)
(mov a2 a1)
(call #:ldrs6000:fix?)
(push a1)
(btnil a1 101)
(cnbge a1 '8192 101)
(cnble a1 '-8192 101)
(mov 'x1 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov '4 a4)
(times (& 0) a4)
(mov 'sp a3)
(mov a4 a2)
(adjstk '3)
(bra #:ldrs6000:r_st)
101
(mov 'x1 a2)
(mov (& 2) a1)
(call #:ldrs6000:prepsrc)
(mov '2 a3)
(mov a1 a2)
(mov 'x3 a1)
(call #:ldrs6000:r_sli)
(mov 'x2 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov 'x3 a3)
(mov 'sp a2)
(adjstk '3)
(bra #:ldrs6000:r_stx)
))
(loader'((entry #:ldrs6000:xspmov subr2)
(push a2)
(push a1)
(call #:ldrs6000:fix?)
(btnil a1 101)
(cnbge a1 '8192 101)
(cnble a1 '-8192 101)
(push (@ 103))
(push '&)
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (& 1) a2)
(adjstk '2)
(bra #:ldrs6000:mov)
101
(mov 'x1 a2)
(mov (& 0) a1)
(call #:ldrs6000:prepsrc)
(mov '2 a3)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_sli)
(bfsymb (& 1) 104)
(mov (& 1) a1)
(call #:ldrs6000:regval)
(btnil a1 104)
(mov 'x1 a3)
(mov 'sp a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:ldrs6000:r_lx)
104
(mov 'x1 a3)
(mov 'sp a2)
(mov 'x1 a1)
(call #:ldrs6000:r_lx)
(mov (& 1) a2)
(mov 'x1 a1)
(adjstk '2)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:arithm-imm nsubr)
(mov (& 3) a1)
(cabne a1 'add 102)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_ai)
102
(cabne a1 'sub 103)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_si)
103
(cabne a1 'mul 104)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_muli)
104
(cabne a1 'and 105)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_andil)
105
(cabne a1 'or 106)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_oril)
106
(cabne a1 'xor 107)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_xoril)
107
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:ldrs6000:arithm nsubr)
(mov (& 3) a1)
(cabne a1 'add 102)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_a)
102
(cabne a1 'sub 103)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_sf)
103
(cabne a1 'mul 104)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_muls)
104
(cabne a1 'and 105)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_and)
105
(cabne a1 'or 106)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_or)
106
(cabne a1 'xor 107)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:ldrs6000:r_xor)
107
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:ldrs6000:direct-arithm2 subr3)
(push a3)
(push a2)
(push a1)
(call #:ldrs6000:fix?)
(push a1)
(btnil a1 101)
(push (@ 103))
(push (& 3))
(push 'x2)
(mov 'x2 a2)
(mov (& 6) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(push (& 4))
(mov '4 a4)
(bra #:ldrs6000:arithm-imm)
103
(eval ())
(bra 102)
101
(push (@ 104))
(push (& 3))
(push 'x2)
(mov 'x1 a2)
(mov (& 4) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(mov 'x2 a2)
(mov (& 7) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(mov '4 a4)
(bra #:ldrs6000:arithm)
104
(eval ())
102
(mov (& 3) a2)
(mov 'x2 a1)
(adjstk '4)
(bra #:ldrs6000:mov-arithm-dest)
))
(loader'((entry #:ldrs6000:mov-arithm-dest subr2)
(push a2)
(push a1)
(bfsymb a2 101)
(mov a2 a1)
(call #:ldrs6000:regval)
(btnil a1 101)
(mov '-1 a3)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:ldrs6000:r_andil)
101
(mov '-1 a3)
(mov (& 0) a2)
(mov 'x1 a1)
(call #:ldrs6000:r_andil)
(mov (& 1) a2)
(mov 'x1 a1)
(adjstk '2)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:incr subr1)
(mov a1 a3)
(mov 'add a2)
(mov ''1 a1)
(bra #:ldrs6000:direct-arithm2)
))
(loader'((entry #:ldrs6000:decr subr1)
(mov a1 a3)
(mov 'sub a2)
(mov ''1 a1)
(bra #:ldrs6000:direct-arithm2)
))
(loader'((entry #:ldrs6000:plus subr2)
(mov a2 a3)
(mov 'add a2)
(bra #:ldrs6000:direct-arithm2)
))
(loader'((entry #:ldrs6000:diff subr2)
(mov a2 a3)
(mov 'sub a2)
(bra #:ldrs6000:direct-arithm2)
))
(loader'((entry #:ldrs6000:times subr2)
(push a2)
(push a1)
(call #:ldrs6000:fix?)
(push a1)
(bfnil a1 102)
(mov 'x1 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
102
(mov 'x2 a2)
(mov (& 2) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_exts)
(btnil (& 0) 103)
(push (@ 105))
(push 'mul)
(push 'x2)
(push 'x2)
(push (& 4))
(mov '4 a4)
(bra #:ldrs6000:arithm-imm)
105
(eval ())
(bra 104)
103
(push (@ 106))
(push 'mul)
(push 'x2)
(push 'x1)
(push 'x2)
(mov '4 a4)
(bra #:ldrs6000:arithm)
106
(eval ())
104
(mov (& 2) a2)
(mov 'x2 a1)
(adjstk '3)
(bra #:ldrs6000:mov-arithm-dest)
))
(loader'((entry #:ldrs6000:quo subr2)
(push a2)
(mov 'x1 a2)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
(mov 'x2 a2)
(mov (& 0) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_exts)
(mov 'x1 a3)
(mov 'x2 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_divs)
(mov (& 0) a2)
(mov 'x1 a1)
(adjstk '1)
(bra #:ldrs6000:mov-arithm-dest)
))
(loader'((entry #:ldrs6000:rem subr2)
(push a2)
(mov 'x1 a2)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
(mov 'x2 a2)
(mov (& 0) a1)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x2 a1)
(call #:ldrs6000:r_exts)
(mov 'x1 a3)
(mov 'x2 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_divs)
(mov 'x1 a1)
(call #:ldrs6000:r_mfmq)
(mov (& 0) a2)
(mov 'x1 a1)
(adjstk '1)
(bra #:ldrs6000:mov-arithm-dest)
))
(loader'((entry #:ldrs6000:negate subr1)
(push a1)
(mov 'x1 a2)
(call #:ldrs6000:prepsrc)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_exts)
(mov 'x1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_neg)
(mov (& 0) a2)
(mov 'x1 a1)
(adjstk '1)
(bra #:ldrs6000:mov-arithm-dest)
))
(loader'((entry #:ldrs6000:logop subr3)
(push a3)
(push a2)
(push a1)
(call #:ldrs6000:fix?)
(push a1)
(mov 'x2 a2)
(mov (& 3) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(btnil (& 1) 101)
(push (@ 103))
(push (& 4))
(push a1)
(push a1)
(push (& 5))
(mov '4 a4)
(bra #:ldrs6000:arithm-imm)
103
(eval ())
(bra 102)
101
(push (@ 104))
(push (& 4))
(push a1)
(mov 'x1 a2)
(mov (& 5) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(push (& 4))
(mov '4 a4)
(bra #:ldrs6000:arithm)
104
(eval ())
102
(cabeq (& 0) (& 4) 105)
(mov (& 4) a2)
(mov (& 0) a1)
(adjstk '5)
(bra #:ldrs6000:movdest)
105
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:ldrs6000:land subr2)
(mov a2 a3)
(mov 'and a2)
(bra #:ldrs6000:logop)
))
(loader'((entry #:ldrs6000:lor subr2)
(mov a2 a3)
(mov 'or a2)
(bra #:ldrs6000:logop)
))
(loader'((entry #:ldrs6000:lxor subr2)
(mov a2 a3)
(mov 'xor a2)
(bra #:ldrs6000:logop)
))
(loader'((entry #:ldrs6000:lshift subr2)
(push a2)
(push a1)
(call #:ldrs6000:fix?)
(push a1)
(btnil a1 101)
(bfsymb (& 2) 103)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(btnil a1 103)
(push (@ 105))
(push (& 3))
(push (& 4))
(mov (& 3) a4)
(land '31 a4)
(push a4)
(push '16)
(push '31)
(mov '5 a4)
(bra #:ldrs6000:r_rlinm)
105
(eval ())
(adjstk '3)
(return)
103
(push (@ 106))
(push 'x2)
(mov 'x2 a2)
(mov (& 4) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(mov (& 3) a4)
(land '31 a4)
(push a4)
(push '16)
(push '31)
(mov '5 a4)
(bra #:ldrs6000:r_rlinm)
106
(eval ())
(mov (& 2) a2)
(mov 'x2 a1)
(adjstk '3)
(bra #:ldrs6000:movdest)
101
(mov 'x1 a2)
(mov (& 1) a1)
(call #:ldrs6000:prepsrc)
(mov '31 a3)
(mov a1 a2)
(mov 'x1 a1)
(call #:ldrs6000:r_andil)
(bfsymb (& 2) 107)
(mov (& 2) a1)
(call #:ldrs6000:regval)
(btnil a1 107)
(push (@ 109))
(push (& 3))
(push (& 4))
(push 'x1)
(push '16)
(push '31)
(mov '5 a4)
(bra #:ldrs6000:r_rlnm)
109
(eval ())
(adjstk '3)
(return)
107
(push (@ 110))
(push 'x2)
(mov 'x2 a2)
(mov (& 4) a1)
(call #:ldrs6000:prepsrc)
(push a1)
(push 'x1)
(push '16)
(push '31)
(mov '5 a4)
(bra #:ldrs6000:r_rlnm)
110
(eval ())
(mov (& 2) a2)
(mov 'x2 a1)
(adjstk '3)
(bra #:ldrs6000:movdest)
))
(loader'((entry #:ldrs6000:generatecall2subr subr3)
(push a3)
(push a2)
(push a1)
(call #:ldrs6000:genlab)
(push a1)
(mov (& 3) a1)
(call #:ldrs6000:push)
(push (@ 101))
(push '@)
(push (& 2))
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:ldrs6000:push)
(bfcons (& 1) 103)
(mov (& 1) a4)
(cabne (car a4) '& 103)
(push (@ 104))
(push '&)
(mov (& 3) a4)
(mov (cdr a4) a4)
(mov '2 a3)
(plus (car a4) a3)
(push a3)
(mov '2 a4)
(jmp list)
104
(eval ())
(mov a1 (& 1))
103
(mov (& 1) a1)
(call #:ldrs6000:push)
(mov (& 2) a1)
(call #:ldrs6000:jmp)
(mov (& 0) a1)
(call #:ldrs6000:new-label)
(mov (& 3) a1)
(adjstk '4)
(bra #:ldrs6000:pop)
))
(loader'((entry #:ldrs6000:arith-float subr3)
(push a3)
(push a2)
(push a1)
(btnil (cvalq #:ldrs6000:31bitfloats) 101)
(mov 'f1 a2)
(call #:ldrs6000:unrol-float)
(mov 'f2 a2)
(mov (& 2) a1)
(call #:ldrs6000:unrol-float)
(mov (& 1) a1)
(cabne a1 'fadd 104)
(mov 'f1 a3)
(mov 'f2 a2)
(mov 'f1 a1)
(call #:ldrs6000:r_fa)
(bra 103)
104
(cabne a1 'fsub 105)
(mov 'f1 a3)
(mov 'f2 a2)
(mov 'f1 a1)
(call #:ldrs6000:r_fs)
(bra 103)
105
(cabne a1 'fdiv 106)
(mov 'f1 a3)
(mov 'f2 a2)
(mov 'f1 a1)
(call #:ldrs6000:r_fd)
(bra 103)
106
(cabne a1 'fmul 103)
(mov 'f1 a3)
(mov 'f2 a2)
(mov 'f1 a1)
(call #:ldrs6000:r_fm)
103
(mov (& 2) a2)
(mov 'f1 a1)
(adjstk '3)
(bra #:ldrs6000:rol-float)
101
(mov 'llcp a1)
(jcall symbol)
(mov (& 2) a3)
(mov a1 a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:ldrs6000:generatecall2subr)
))
(loader'((entry #:ldrs6000:fplus subr2)
(mov a2 a3)
(mov 'fadd a2)
(bra #:ldrs6000:arith-float)
))
(loader'((entry #:ldrs6000:fdiff subr2)
(mov a2 a3)
(mov 'fsub a2)
(bra #:ldrs6000:arith-float)
))
(loader'((entry #:ldrs6000:fquo subr2)
(mov a2 a3)
(mov 'fdiv a2)
(bra #:ldrs6000:arith-float)
))
(loader'((entry #:ldrs6000:ftimes subr2)
(mov a2 a3)
(mov 'fmul a2)
(bra #:ldrs6000:arith-float)
))
(loader'((entry #:ldrs6000:title subr1)
(mov a1 (cvalq #:ldrs6000:module))
(return)
))
(loader'((entry #:ldrs6000:fentry subr2)
(push a2)
(push a1)
(mov 'x3 a1)
(call #:ldrs6000:r_mflr)
(mov 'sp a3)
(mov '-4 a2)
(mov 'x3 a1)
(call #:ldrs6000:r_stu)
(mov '#:system:loaded-from-file a2)
(mov (& 0) a1)
(jcall remprop)
(btnil (cvalq #:ld:special-case-loader) 101)
(push (@ 103))
(push (& 1))
(push (& 3))
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall copylist)
(push a1)
(mov '3 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:ld:special-case-loader) a2)
(jcall cons)
(mov a1 (cvalq #:ld:special-case-loader))
(bra 102)
101
(mov '#:llcp:ftype a2)
(mov (& 0) a1)
(jcall remprop)
(mov '#:llcp:fval a2)
(mov (& 0) a1)
(jcall remprop)
(mov (cvalq #:ldrs6000:pccurrent) a3)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall setfn)
102
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:new-label)
))
(loader'((entry #:ldrs6000:entry subr1)
(push a1)
(mov (cvalq #:ldrs6000:labels) a4)
(mov (car a4) a4)
(cabeq (car a4) a1 101)
(mov 'x0 a1)
(call #:ldrs6000:r_mflr)
(mov 'sp a3)
(mov '-4 a2)
(mov 'x0 a1)
(call #:ldrs6000:r_stu)
(mov (& 0) a1)
(adjstk '1)
(bra #:ldrs6000:new-label)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:ldrs6000:local subr1)
(bra #:ldrs6000:declare-label)
))
(loader'((entry #:ldrs6000:endl subr0)
(bra #:ldrs6000:end-local-label)
))
(loader'((entry #:ldrs6000:end subr0)
(btnil (cvalq #:ld:special-case-loader) 102)
103
(bfcons (cvalq #:ld:special-case-loader) 102)
(mov (cvalq #:ld:special-case-loader) a4)
(bfcons (car a4) 102)
(push (@ 105))
(push 'setfn)
(mov (cvalq #:ld:special-case-loader) a4)
(mov (cdr a4) (cvalq #:ld:special-case-loader))
(push (car a4))
(mov '2 a4)
(jmp apply)
105
(eval ())
(bra 103)
102
(call #:ldrs6000:clean-llitt)
(bra #:ldrs6000:end-global-label)
))
(loader'((entry #:ldrs6000:abort subr0)
(mov nil a1)
(return)
))
(loader'((entry #:ldrs6000:eval subr1)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(push a1)
(mov '1 a4)
(jmp eval)
102
(eval ())
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(return)
))
(loader'((entry #:ldrs6000:fix? subr1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov (cdr a1) a4)
(push (car a4))
(bffix (& 0) 103)
(mov (& 0) a1)
(adjstk '1)
(return)
103
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:ldrs6000:prepsrc subr2)
(push a2)
(push a1)
(cabne a1 'nil 101)
(mov 'rnil a1)
(adjstk '2)
(return)
101
(bfsymb a1 103)
(call #:ldrs6000:regval)
(btnil a1 103)
(mov (& 0) a1)
(adjstk '2)
(return)
103
(bfsymb (& 0) 105)
(cabne (& 0) 'dlink 107)
(mov 'radlink a3)
(mov '0 a2)
(mov (& 1) a1)
(call #:ldrs6000:r_l)
(bra 108)
107
(cabne (& 0) 'llink 109)
(mov 'rallink a3)
(mov '0 a2)
(mov (& 1) a1)
(call #:ldrs6000:r_l)
(bra 108)
109
(cabne (& 0) 'itcount 111)
(mov 'raitcount a3)
(mov '0 a2)
(mov (& 1) a1)
(call #:ldrs6000:r_l)
(bra 108)
111
(mov (& 0) a4)
(cabeq a4 'cbindn 115)
(cabeq a4 'tag 115)
(cabeq a4 'lock 115)
(cabne a4 'prot 113)
115
(mov a4 a2)
(mov 'llcp a1)
(jcall symbol)
(push (cval a1))
(mov (& 0) a2)
(mov (car a2) a2)
(mov (& 2) a1)
(call #:ldrs6000:r_liu)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (& 2) a2)
(mov (& 2) a1)
(call #:ldrs6000:r_oril)
(adjstk '1)
(bra 108)
113
(mov a4 a2)
(mov 'ld-dir a1)
(jcall getfn1)
(btnil a1 116)
(push (@ 118))
(push a1)
(push (& 2))
(mov '2 a4)
(jmp funcall)
118
(eval ())
(bra 108)
116
(mov (& 0) a3)
(mov '"Bad operand1" a2)
(mov '":PREPSRC" a1)
(call #:ldrs6000:error)
108
(mov (& 1) a1)
(adjstk '2)
(return)
105
(btcons (& 0) 119)
(mov (& 0) a3)
(mov '"Bad operand2" a2)
(mov '":PREPSRC" a1)
(adjstk '2)
(bra #:ldrs6000:error)
119
(mov (& 0) a4)
(push (car a4))
(mov (cdr a4) a3)
(push (car a3))
(push nil)
(mov (& 2) a1)
(jcall symbolp)
(mov a1 a4)
(btnil a4 123)
(mov '#:ldrs6000:val a2)
(mov (& 2) a1)
(jcall getprop)
(mov a1 a4)
123
(mov a4 (& 0))
(btnil a4 121)
(mov (& 1) a3)
(mov a4 a2)
(mov (& 4) a1)
(call #:ldrs6000:r_l)
(bra 122)
121
(cabne (& 2) 'quote 124)
(mov (& 4) a2)
(mov (& 1) a1)
(call #:ldrs6000:load-litt)
(bra 122)
124
(cabne (& 2) 'cvalq 126)
(mov (& 4) a2)
(mov (& 1) a1)
(call #:ldrs6000:load-litt)
(mov (& 4) a3)
(mov '0 a2)
(mov (& 4) a1)
(call #:ldrs6000:r_l)
(bra 122)
126
(cabne (& 2) 'fvalq 128)
(mov (& 4) a2)
(mov (& 1) a1)
(call #:ldrs6000:load-litt)
(mov 'fval a1)
(jcall symbolp)
(mov a1 a2)
(btnil a2 130)
(mov '#:ldrs6000:val a2)
(mov 'fval a1)
(jcall getprop)
(mov a1 a2)
130
(mov (& 4) a3)
(mov (& 4) a1)
(call #:ldrs6000:r_l)
(bra 122)
128
(cabne (& 2) '& 131)
(mov '4 a3)
(times (& 1) a3)
(push a3)
(mov 'sp a3)
(pop a2)
(mov (& 4) a1)
(call #:ldrs6000:r_l)
(bra 122)
131
(cabne (& 2) '@ 133)
(mov (& 1) a2)
(mov 'lab a1)
(call #:ldrs6000:get-label-value)
(push a1)
(bffix a1 135)
(mov '0 a2)
(bra 136)
135
(mov (car a1) a2)
136
(mov (& 5) a1)
(call #:ldrs6000:r_liu)
(bffix (& 0) 137)
(mov (& 0) a3)
(bra 138)
137
(mov (& 0) a3)
(mov (cdr a3) a3)
138
(mov (& 5) a2)
(mov (& 5) a1)
(call #:ldrs6000:r_oril)
(adjstk '1)
(bra 122)
133
(cabne (& 2) 'eval 139)
(push (@ 141))
(push (& 2))
(mov '1 a4)
(jmp eval)
141
(eval ())
(mov (& 4) a2)
(call #:ldrs6000:prepsrc)
(bra 122)
139
(mov (& 1) a3)
(mov '"Bad operand3" a2)
(mov '":PREPSRC" a1)
(call #:ldrs6000:error)
122
(mov (& 4) a1)
(adjstk '5)
(return)
))
(loader'((entry #:ldrs6000:movdest subr2)
(push a2)
(push a1)
(bfsymb a2 101)
(mov a2 a1)
(call #:ldrs6000:regval)
(btnil a1 101)
(mov '0 a3)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:ldrs6000:r_oril)
101
(bfsymb (& 1) 103)
(cabne (& 1) 'dlink 105)
(mov 'radlink a3)
(mov '0 a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_st)
105
(cabne (& 1) 'llink 107)
(mov 'rallink a3)
(mov '0 a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_st)
107
(cabne (& 1) 'itcount 109)
(mov 'raitcount a3)
(mov '0 a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:r_st)
109
(mov (& 1) a3)
(mov '"Bad operand4" a2)
(mov '":MOVDEST" a1)
(adjstk '2)
(bra #:ldrs6000:error)
103
(btcons (& 1) 111)
(mov (& 1) a3)
(mov '"Bad operand5" a2)
(mov '#:ldrs6000:movdest a1)
(adjstk '2)
(bra #:ldrs6000:error)
111
(mov (& 1) a4)
(push (car a4))
(mov (cdr a4) a3)
(push (car a3))
(push nil)
(mov (& 2) a1)
(jcall symbolp)
(mov a1 a2)
(btnil a2 115)
(mov '#:ldrs6000:val a2)
(mov (& 2) a1)
(jcall getprop)
(mov a1 a2)
115
(mov a2 (& 0))
(btnil a2 113)
(mov (& 1) a3)
(mov (& 3) a1)
(adjstk '5)
(bra #:ldrs6000:r_st)
113
(cabne (& 2) 'cvalq 116)
(mov 'x3 a2)
(mov (& 1) a1)
(call #:ldrs6000:load-litt)
(mov 'x3 a3)
(mov '0 a2)
(mov (& 3) a1)
(adjstk '5)
(bra #:ldrs6000:r_st)
116
(cabne (& 2) '& 118)
(mov '4 a4)
(times (& 1) a4)
(mov 'sp a3)
(mov a4 a2)
(mov (& 3) a1)
(adjstk '5)
(bra #:ldrs6000:r_st)
118
(cabne (& 2) 'eval 120)
(push (@ 122))
(push (& 2))
(mov '1 a4)
(jmp eval)
122
(eval ())
(mov a1 a2)
(mov (& 3) a1)
(adjstk '5)
(bra #:ldrs6000:movdest)
120
(mov (& 1) a3)
(mov '"Bad operand6" a2)
(mov '":MOVDEST" a1)
(adjstk '5)
(bra #:ldrs6000:error)
))
(loader'((entry #:ldrs6000:load-litt subr2)
(push a2)
(push a1)
(bfnil a1 101)
(push a2)
(mov '0 a3)
(mov 'rnil a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:r_oril)
101
(bffix a1 103)
(cnblt a1 '0 105)
(push a2)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:ldrs6000:r_lil)
105
(push a2)
(mov '1 a2)
(pop a1)
(call #:ldrs6000:r_liu)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:ldrs6000:r_ai)
103
(bffloat a1 107)
(btnil (cvalq #:ldrs6000:31bitfloats) 109)
(push (@ 111))
(push a1)
(push a2)
(push '0)
(push '0)
(mov '4 a4)
(bra #:ldrs6000:load-litt32)
111
(eval ())
(adjstk '2)
(return)
109
(push (@ 112))
(push a1)
(push a2)
(push 'rbfloat)
(push 'rbvect)
(mov '4 a4)
(bra #:ldrs6000:load-litt32)
112
(eval ())
(mov (& 0) a1)
(adjstk '2)
(bra #:ldrs6000:add-litt)
107
(bfvect a1 113)
(call #:ldrs6000:add-litt)
(push (@ 115))
(push (& 1))
(push (& 3))
(push 'rbvect)
(push 'rbstrg)
(mov '4 a4)
(bra #:ldrs6000:load-litt32)
115
(eval ())
(adjstk '2)
(return)
113
(bfstrg a1 116)
(call #:ldrs6000:add-litt)
(push (@ 118))
(push (& 1))
(push (& 3))
(push 'rbstrg)
(push 'rbsymb)
(mov '4 a4)
(bra #:ldrs6000:load-litt32)
118
(eval ())
(adjstk '2)
(return)
116
(bfsymb a1 119)
(call #:ldrs6000:add-litt)
(push (@ 121))
(push (& 1))
(push (& 3))
(push 'rbsymb)
(push 'rbcons)
(mov '4 a4)
(bra #:ldrs6000:load-litt32)
121
(eval ())
(adjstk '2)
(return)
119
(bfcons a1 122)
(call #:ldrs6000:add-litt)
(push (@ 124))
(push (& 1))
(push (& 3))
(push 'rbcons)
(push nil)
(mov '4 a4)
(bra #:ldrs6000:load-litt32)
124
(eval ())
(adjstk '2)
(return)
122
(mov a1 a3)
(mov '"Bad litteral" a2)
(mov '":LOAD-LITT" a1)
(adjstk '2)
(bra #:ldrs6000:error)
))
(loader'((entry #:ldrs6000:add-litt subr1)
(push a1)
(mov (cvalq #:ldrs6000:saved-by-loader) a2)
(jcall memq)
(bfnil a1 101)
(mov (cvalq #:ldrs6000:saved-by-loader) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:ldrs6000:saved-by-loader))
101
(adjstk '1)
(return)
))
(loader'((entry #:ldrs6000:load-litt32 nsubr)
(mov (& 3) a1)
(jcall loc)
(push a1)
(mov (car a1) a2)
(mov (& 3) a1)
(call #:ldrs6000:r_liu)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (& 3) a2)
(mov (& 3) a1)
(adjstk '5)
(bra #:ldrs6000:r_oril)
))
(loader'((entry #:ldrs6000:clean-llitt subr0)
(push (cvalq #:ldrs6000:saved-by-loader))
(push '-1)
(push nil)
101
(btnil (& 2) 102)
(mov (& 2) a4)
(bfsymb (car a4) 103)
(mov (car a4) a1)
(jcall boundp)
(bfnil a1 105)
(mov (& 2) a1)
(mov (car a1) a1)
(jcall typefn)
(btnil a1 103)
105
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (cvalq #:ldrs6000:saved-by-loader) a2)
(mov (car a1) a1)
(jcall delq)
(mov a1 (cvalq #:ldrs6000:saved-by-loader))
(bra 101)
103
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(bra 101)
102
(mov (cvalq #:ldrs6000:saved-by-loader) a1)
(jcall length)
(cnble a1 '0 107)
(mov (cvalq #:ldrs6000:saved-by-loader) a1)
(jcall length)
(mov nil a2)
(jcall makevector)
(mov a1 (& 0))
108
(btnil (cvalq #:ldrs6000:saved-by-loader) 109)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(mov (cvalq #:ldrs6000:saved-by-loader) a3)
(mov (cdr a3) (cvalq #:ldrs6000:saved-by-loader))
(hpmovx (car a3) (& 0) a4)
(bra 108)
109
(btnil (cvalq #:ldrs6000:module) 110)
(mov '#:ldrs6000:saved-by-loader a2)
(mov (cvalq #:ldrs6000:module) a1)
(jcall get)
(btnil a1 113)
(mov (cvalq #:ldrs6000:module) a3)
(mov '#:loader:errmdu a2)
(mov 'loader a1)
(jcall printerror)
113
(mov '#:ldrs6000:saved-by-loader a3)
(mov (& 0) a2)
(mov (cvalq #:ldrs6000:module) a1)
(jcall putprop)
(bra 107)
110
(mov (cvalq #:ldrs6000:global-saved-by-loader) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:ldrs6000:global-saved-by-loader))
107
(mov nil (cvalq #:ldrs6000:module))
(mov nil a1)
(adjstk '3)
(return)
))
(defvar #:ldrs6000:labels (if (boundp '#:ldrs6000:labels) #:ldrs6000:labels ()))
(defvar #:ldrs6000:labels-not-resolved (if (boundp '#:ldrs6000:labels-not-resolved) #:ldrs6000:labels-not-resolved ()))
(defvar #:ldrs6000:local-symb-labels (if (boundp '#:ldrs6000:local-symb-labels) #:ldrs6000:local-symb-labels ()))
(defvar #:ldrs6000:gen 0)
(loader'((entry #:ldrs6000:genlab subr0)
(mov (cvalq #:ldrs6000:gen) a4)
(diff '1 a4)
(mov a4 (cvalq #:ldrs6000:gen))
(mov a4 a1)
(return)
))
(loader'((entry #:ldrs6000:declare-label subr1)
(mov (cvalq #:ldrs6000:local-symb-labels) a2)
(jcall cons)
(mov a1 (cvalq #:ldrs6000:local-symb-labels))
(return)
))
(loader'((entry #:ldrs6000:new-label subr1)
(push a1)
(mov (cvalq #:ldrs6000:labels-not-resolved) a2)
(jcall assq)
(push nil)
(push a1)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall copylist)
(mov a1 a2)
(mov (& 2) a1)
(jcall cons)
(mov (cvalq #:ldrs6000:labels) a2)
(jcall cons)
(mov a1 (cvalq #:ldrs6000:labels))
(mov (cvalq #:ldrs6000:labels-not-resolved) a2)
(mov (& 0) a1)
(jcall delete)
(mov a1 (cvalq #:ldrs6000:labels-not-resolved))
(mov (& 0) a4)
(mov (cdr a4) (& 0))
101
(btnil (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (car a4) (& 1))
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(cabne a1 'bb 104)
(mov (& 1) a1)
(call #:ldrs6000:solve-bb)
(bra 101)
104
(cabne a1 'b 105)
(mov (& 1) a1)
(call #:ldrs6000:solve-b)
(bra 101)
105
(cabne a1 'call 106)
(mov (& 1) a1)
(call #:ldrs6000:solve-call)
(bra 101)
106
(cabne a1 'lab 107)
(mov (& 1) a1)
(call #:ldrs6000:solve-lab)
(bra 101)
107
(cabne a1 'brx 101)
(mov (& 1) a1)
(call #:ldrs6000:solve-brx)
(bra 101)
102
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:ldrs6000:solve-bb subr1)
(push a1)
(mov a1 a2)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall subadr)
(push a1)
(bfcons a1 102)
(mov a1 a3)
(mov '#:loader:errmtg a2)
(mov '":SOLVE-BB" a1)
(call #:ldrs6000:error)
102
(push (@ 103))
(mov '2 a2)
(mov (& 2) a1)
(jcall addadr)
(push a1)
(push (& 2))
(mov '2 a4)
(jmp memory)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:ldrs6000:hight subr1)
(bfcons a1 101)
(mov (car a1) a1)
(return)
101
(mov '0 a1)
(return)
))
(loader'((entry #:ldrs6000:hight-br subr1)
(bfcons a1 101)
(mov (car a1) a4)
(land '1023 a4)
(mov a4 a1)
(return)
101
(cnbge a1 '0 103)
(mov '1023 a1)
(return)
103
(mov '0 a1)
(return)
))
(loader'((entry #:ldrs6000:low subr1)
(bfcons a1 29999)
(mov (cdr a1) a1)
(return)
29999
(return)
))
(loader'((entry #:ldrs6000:solve-b subr1)
(push a1)
(push (@ 101))
(push a1)
(mov '1 a4)
(jmp memory)
101
(eval ())
(push a1)
(push (@ 102))
(mov '2 a2)
(mov (& 2) a1)
(jcall addadr)
(push a1)
(mov '1 a4)
(jmp memory)
102
(eval ())
(push a1)
(mov (& 2) a2)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall subadr)
(push a1)
(push (@ 103))
(push (& 4))
(call #:ldrs6000:hight-br)
(mov (& 4) a4)
(lor a1 a4)
(push a4)
(mov '2 a4)
(jmp memory)
103
(eval ())
(push (@ 104))
(mov '2 a2)
(mov (& 4) a1)
(jcall addadr)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:low)
(mov (& 3) a4)
(lor a1 a4)
(push a4)
(mov '2 a4)
(jmp memory)
104
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:ldrs6000:solve-call subr1)
(push a1)
(push (@ 101))
(push a1)
(mov '1 a4)
(jmp memory)
101
(eval ())
(push a1)
(push (@ 102))
(mov '2 a2)
(mov (& 2) a1)
(jcall addadr)
(push a1)
(mov '1 a4)
(jmp memory)
102
(eval ())
(push a1)
(mov (& 2) a2)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall subadr)
(mov '8 a2)
(jcall subadr)
(push a1)
(push (@ 103))
(push (& 4))
(call #:ldrs6000:hight-br)
(mov (& 4) a4)
(lor a1 a4)
(push a4)
(mov '2 a4)
(jmp memory)
103
(eval ())
(push (@ 104))
(mov '2 a2)
(mov (& 4) a1)
(jcall addadr)
(push a1)
(mov (& 2) a1)
(call #:ldrs6000:low)
(mov (& 3) a4)
(lor a1 a4)
(push a4)
(mov '2 a4)
(jmp memory)
104
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:ldrs6000:solve-lab subr1)
(push a1)
(push (@ 101))
(mov '2 a2)
(jcall addadr)
(push a1)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(call #:ldrs6000:hight)
(push a1)
(mov '2 a4)
(jmp memory)
101
(eval ())
(push (@ 102))
(mov '6 a2)
(mov (& 1) a1)
(jcall addadr)
(push a1)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(call #:ldrs6000:low)
(push a1)
(mov '2 a4)
(jmp memory)
102
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:ldrs6000:solve-brx subr1)
(push a1)
(push (@ 101))
(push a1)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(call #:ldrs6000:hight)
(push a1)
(mov '2 a4)
(jmp memory)
101
(eval ())
(push (@ 102))
(mov '2 a2)
(mov (& 1) a1)
(jcall addadr)
(push a1)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(call #:ldrs6000:low)
(push a1)
(mov '2 a4)
(jmp memory)
102
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:ldrs6000:label-not-resolved subr2)
(push a2)
(push a1)
(mov (cvalq #:ldrs6000:labels-not-resolved) a2)
(jcall assq)
(push a1)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall copylist)
(mov a1 a2)
(mov (& 2) a1)
(jcall cons)
(btnil (& 0) 101)
(mov (& 0) a2)
(mov (cdr a2) a2)
(jcall cons)
(mov (& 0) a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '3)
(return)
101
(push (@ 103))
(push (& 2))
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:ldrs6000:labels-not-resolved) a2)
(jcall cons)
(mov a1 (cvalq #:ldrs6000:labels-not-resolved))
(adjstk '3)
(return)
))
(loader'((entry #:ldrs6000:get-label-value subr2)
(push a2)
(push a1)
(push a2)
(mov (cvalq #:ldrs6000:labels) a2)
(pop a1)
(jcall cassq)
(btnil a1 101)
(adjstk '2)
(return)
101
(mov (& 0) a2)
(mov (& 1) a1)
(call #:ldrs6000:label-not-resolved)
(mov '0 a1)
(adjstk '2)
(return)
))
(loader'((entry #:ldrs6000:get-relative-label-value subr2)
(push a2)
(push a1)
(push a2)
(mov (cvalq #:ldrs6000:labels) a2)
(pop a1)
(jcall cassq)
(btnil a1 101)
(mov (cvalq #:ldrs6000:pccurrent) a2)
(adjstk '2)
(jmp subadr)
101
(mov (& 0) a2)
(mov (& 1) a1)
(call #:ldrs6000:label-not-resolved)
(mov '0 a1)
(adjstk '2)
(return)
))
(loader'((entry #:ldrs6000:get-relative-call-value subr1)
(push a1)
(mov (cvalq #:ldrs6000:labels) a2)
(jcall cassq)
(btnil a1 101)
(mov (cvalq #:ldrs6000:pccurrent) a2)
(jcall subadr)
(mov '8 a2)
(adjstk '1)
(jmp subadr)
101
(mov 'call a2)
(mov (& 0) a1)
(call #:ldrs6000:label-not-resolved)
(mov '0 a1)
(adjstk '1)
(return)
))
(loader'((entry #:ldrs6000:end-local-label subr0)
(push (cvalq #:ldrs6000:labels))
(push nil)
(push nil)
(push nil)
101
(mov (& 3) a4)
(mov (car a4) a4)
(mov (car a4) (& 2))
(btfix (car a4) 103)
(mov (cvalq #:ldrs6000:local-symb-labels) a2)
(mov (& 2) a1)
(jcall memq)
(btnil a1 102)
103
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(bra 101)
102
(mov (& 3) (cvalq #:ldrs6000:labels))
(mov (& 3) (& 1))
(mov (& 3) a4)
(mov (cdr a4) (& 0))
104
(btnil (& 0) 105)
(mov (& 0) a4)
(mov (car a4) a4)
(mov (car a4) (& 2))
(btfix (car a4) 106)
(mov (cvalq #:ldrs6000:local-symb-labels) a2)
(mov (& 2) a1)
(jcall memq)
(bfnil a1 106)
(mov (& 0) (& 1))
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 104)
106
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (& 1) a3)
(mov (cdr a4) (cdr a3))
(bra 104)
105
(mov (cvalq #:ldrs6000:labels-not-resolved) (& 3))
108
(mov (& 3) a4)
(mov (car a4) a4)
(mov (car a4) (& 2))
(btfix (car a4) 110)
(mov (cvalq #:ldrs6000:local-symb-labels) a2)
(mov (& 2) a1)
(jcall memq)
(btnil a1 109)
110
(mov (& 3) a3)
(mov (car a3) a3)
(mov '#:loader:errrlnr a2)
(mov '"ENDL" a1)
(call #:ldrs6000:error)
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(bra 108)
109
(mov (& 3) (cvalq #:ldrs6000:labels-not-resolved))
(mov (& 3) (& 1))
(mov (& 3) a4)
(mov (cdr a4) (& 0))
111
(btnil (& 0) 112)
(mov (& 0) a4)
(mov (car a4) a4)
(mov (car a4) (& 2))
(btfix (car a4) 113)
(mov (cvalq #:ldrs6000:local-symb-labels) a2)
(mov (& 2) a1)
(jcall memq)
(bfnil a1 113)
(mov (& 0) (& 1))
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 111)
113
(mov (& 3) a3)
(mov (car a3) a3)
(mov '#:loader:errrlnr a2)
(mov '"ENDL" a1)
(call #:ldrs6000:error)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (& 1) a3)
(mov (cdr a4) (cdr a3))
(bra 111)
112
(mov nil (cvalq #:ldrs6000:local-symb-labels))
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:ldrs6000:end-global-label subr0)
(mov nil (cvalq #:ldrs6000:labels))
(btnil (cvalq #:ldrs6000:labels-not-resolved) 101)
(mov (cvalq #:ldrs6000:labels-not-resolved) a3)
(mov '#:loader:errenr a2)
(mov '"END" a1)
(call #:ldrs6000:error)
(mov nil (cvalq #:ldrs6000:labels-not-resolved))
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:ldrs6000:1long subr2)
(push a2)
(call #:ldrs6000:1word)
(mov (& 0) a1)
(adjstk '1)
(bra #:ldrs6000:1word)
))
(loader'((entry #:ldrs6000:1word subr1)
(push a1)
(btnil (cvalq #:ldrs6000:talkp) 102)
(push (@ 105))
(push (cvalq #:ldrs6000:nwl))
(push '5)
(mov '2 a4)
(jmp >)
105
(eval ())
(btnil a1 104)
(mov '0 (cvalq #:ldrs6000:nwl))
(push (@ 106))
(mov '0 a4)
(jmp terpri)
106
(eval ())
(push (@ 107))
(push '30)
(mov '1 a4)
(jmp outpos)
107
(eval ())
(mov (cvalq #:ldrs6000:pccurrent) a1)
(call #:ldrs6000:prinhexl)
(push (@ 108))
(push '"  ")
(mov '1 a4)
(jmp prin)
108
(eval ())
104
(mov (cvalq #:ldrs6000:nwl) a1)
(jcall |1+|)
(mov a1 (cvalq #:ldrs6000:nwl))
(push (@ 109))
(push '" ")
(mov '1 a4)
(jmp prin)
109
(eval ())
(mov (& 0) a1)
(call #:ldrs6000:prinhex)
102
(mov (cvalq #:ldrs6000:ecode) a2)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall gtadr)
(btnil a1 110)
(mov nil a3)
(mov 'errfcod a2)
(mov 'loader a1)
(adjstk '1)
(jmp error)
110
(push (@ 112))
(push (cvalq #:ldrs6000:pccurrent))
(push (& 2))
(mov '2 a4)
(jmp memory)
112
(eval ())
(mov '2 a2)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall incradr)
(mov a1 (cvalq #:ldrs6000:pccurrent))
(adjstk '1)
(return)
))
(loader'((entry #:ldrs6000:prinhexl subr1)
(push a1)
(bfcons a1 101)
(mov (car a1) a1)
(call #:ldrs6000:prinhex)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:ldrs6000:prinhex)
101
(bffix a1 103)
(mov '0 a1)
(call #:ldrs6000:prinhex)
(mov (& 0) a1)
(adjstk '1)
(bra #:ldrs6000:prinhex)
103
(mov a1 a3)
(mov 'errnda a2)
(mov '#:ldrs6000:prinhexl a1)
(adjstk '1)
(bra #:ldrs6000:error)
))
(loader'((entry #:ldrs6000:prinhex subr1)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov '#:ldrs6000:prinhex a1)
(jcall error)
102
(mov (& 0) a4)
(lshift '-8 a4)
(land '255 a4)
(mov a4 a1)
(call #:ldrs6000:prinhexb)
(mov (& 0) a4)
(land '255 a4)
(mov a4 a1)
(adjstk '1)
(bra #:ldrs6000:prinhexb)
))
(loader'((entry #:ldrs6000:prinhexb subr1)
(push a1)
(btfix a1 101)
(mov a1 a3)
(mov 'errnia a2)
(mov '#:ldrs6000:prinhexb a1)
(jcall error)
(bra 102)
101
(push (@ 105))
(push a1)
(push '0)
(mov '2 a4)
(jmp <)
105
(eval ())
(btnil a1 103)
(mov '255 (& 0))
(bra 102)
103
(push (@ 108))
(push (& 1))
(push '16)
(mov '2 a4)
(jmp <)
108
(eval ())
(btnil a1 102)
(push (@ 109))
(push '48)
(mov '1 a4)
(jmp princn)
109
(eval ())
102
(push (@ 110))
(mov '0 a4)
(jmp obase)
110
(eval ())
(push a1)
(push (@ 111))
(push dlink)
(push prot)
(stack dlink)
(push (@ 113))
(push '16)
(mov '1 a4)
(jmp obase)
113
(eval ())
(push (@ 114))
(push (& 5))
(mov '1 a4)
(jmp prin)
114
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 112) a3)
111
(push a3)
(push a2)
(push (@ 115))
(push (& 4))
(mov '1 a4)
(jmp obase)
115
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
112
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:ldrs6000:error subr3)
(push a3)
(push a2)
(push a1)
(mov nil (cvalq #:ldrs6000:labels))
(mov nil (cvalq #:ldrs6000:labels-not-resolved))
(mov nil (cvalq #:ldrs6000:local-symb-labels))
(mov a1 a3)
(mov '#:loader:errloader a2)
(mov 'loader a1)
(jcall printerror)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '3)
(jmp error)
))
(loader'((entry #:ldrs6000:ins subr1)
(push a1)
(btnil (cvalq #:ldrs6000:talkp) 102)
(push (@ 103))
(mov '0 a4)
(jmp terpri)
103
(eval ())
(bfcons (& 0) 105)
(push (@ 106))
(push '4)
(mov '1 a4)
(jmp outpos)
106
(eval ())
105
(push (@ 107))
(push (& 1))
(mov '1 a4)
(jmp prin)
107
(eval ())
(push (@ 110))
(push (@ 111))
(mov '0 a4)
(jmp outpos)
111
(eval ())
(push a1)
(push '30)
(mov '2 a4)
(jmp >=)
110
(eval ())
(btnil a1 109)
(push (@ 112))
(mov '0 a4)
(jmp terpri)
112
(eval ())
109
(push (@ 113))
(push '30)
(mov '1 a4)
(jmp outpos)
113
(eval ())
(mov (cvalq #:ldrs6000:pccurrent) a1)
(call #:ldrs6000:prinhexl)
(push (@ 114))
(push '"  ")
(mov '1 a4)
(jmp prin)
114
(eval ())
102
(bfnil (& 0) 115)
(mov (& 0) a1)
(adjstk '1)
(return)
115
(bfcons (& 0) 117)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (& 0) a3)
(mov (car a3) a3)
(mov (cdr a2) a2)
(mov (car a1) a1)
(adjstk '1)
(bra #:ldrs6000:machins)
117
(mov (& 0) a1)
(adjstk '1)
(bra #:ldrs6000:new-label)
))
(loader'((entry #:ldrs6000:machins subr3)
(cabne a3 'mov 101)
(mov (car a2) a2)
(bra #:ldrs6000:mov)
101
(cabne a3 'push 103)
(bra #:ldrs6000:push)
103
(cabne a3 'jmp 105)
(bra #:ldrs6000:jmp)
105
(cabne a3 'eval 107)
(bra #:ldrs6000:eval)
107
(cabne a3 'jcall 109)
(bra #:ldrs6000:jcall)
109
(cabne a3 'adjstk 111)
(bra #:ldrs6000:adjstk)
111
(cabne a3 'bra 113)
(bra #:ldrs6000:bra)
113
(cabne a3 'call 115)
(bra #:ldrs6000:call)
115
(cabne a3 'return 117)
(bra #:ldrs6000:return)
117
(cabne a3 'cabne 119)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cabne)
119
(cabne a3 'entry 121)
(bra #:ldrs6000:entry)
121
(cabne a3 'btnil 123)
(mov (car a2) a2)
(bra #:ldrs6000:btnil)
123
(cabne a3 'hpxmov 125)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:hpxmov)
125
(cabne a3 'fentry 127)
(mov (car a2) a2)
(bra #:ldrs6000:fentry)
127
(cabne a3 'pop 129)
(bra #:ldrs6000:pop)
129
(cabne a3 'plus 131)
(mov (car a2) a2)
(bra #:ldrs6000:plus)
131
(cabne a3 'bfnil 133)
(mov (car a2) a2)
(bra #:ldrs6000:bfnil)
133
(cabne a3 'cabeq 135)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cabeq)
135
(cabne a3 'bfcons 137)
(mov (car a2) a2)
(bra #:ldrs6000:bfcons)
137
(cabne a3 'stack 139)
(bra #:ldrs6000:stack)
139
(cabne a3 'hpmovx 141)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:hpmovx)
141
(cabne a3 'xspmov 143)
(mov (car a2) a2)
(bra #:ldrs6000:xspmov)
143
(cabne a3 'diff 145)
(mov (car a2) a2)
(bra #:ldrs6000:diff)
145
(cabne a3 'lor 147)
(mov (car a2) a2)
(bra #:ldrs6000:lor)
147
(cabne a3 'lshift 149)
(mov (car a2) a2)
(bra #:ldrs6000:lshift)
149
(cabne a3 'bffix 151)
(mov (car a2) a2)
(bra #:ldrs6000:bffix)
151
(cabne a3 'cnbeq 153)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cnbeq)
153
(cabne a3 'cnble 155)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cnble)
155
(cabne a3 'hbxmov 157)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:hbxmov)
157
(cabne a3 'cnblt 159)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cnblt)
159
(cabne a3 'bfsymb 161)
(mov (car a2) a2)
(bra #:ldrs6000:bfsymb)
161
(cabne a3 'cnbge 163)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cnbge)
163
(cabne a3 'bri 165)
(bra #:ldrs6000:bri)
165
(cabne a3 'hgsize 167)
(mov (car a2) a2)
(bra #:ldrs6000:hgsize)
167
(cabne a3 'btcons 169)
(mov (car a2) a2)
(bra #:ldrs6000:btcons)
169
(cabne a3 'end 171)
(bra #:ldrs6000:end)
171
(cabne a3 'title 173)
(bra #:ldrs6000:title)
173
(cabne a3 'land 175)
(mov (car a2) a2)
(bra #:ldrs6000:land)
175
(cabne a3 'times 177)
(mov (car a2) a2)
(bra #:ldrs6000:times)
177
(cabne a3 'quo 179)
(mov (car a2) a2)
(bra #:ldrs6000:quo)
179
(cabne a3 'cnbgt 181)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cnbgt)
181
(cabne a3 'sobgez 183)
(mov (car a2) a2)
(bra #:ldrs6000:sobgez)
183
(cabne a3 'hbmovx 185)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:hbmovx)
185
(cabne a3 'btsymb 187)
(mov (car a2) a2)
(bra #:ldrs6000:btsymb)
187
(cabne a3 'bfstrg 189)
(mov (car a2) a2)
(bra #:ldrs6000:bfstrg)
189
(cabne a3 'btfix 191)
(mov (car a2) a2)
(bra #:ldrs6000:btfix)
191
(cabne a3 'cnbne 193)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cnbne)
193
(cabne a3 'bfvar 195)
(mov (car a2) a2)
(bra #:ldrs6000:bfvar)
195
(cabne a3 'rem 197)
(mov (car a2) a2)
(bra #:ldrs6000:rem)
197
(cabne a3 'bfvect 199)
(mov (car a2) a2)
(bra #:ldrs6000:bfvect)
199
(cabne a3 'fquo 201)
(mov (car a2) a2)
(bra #:ldrs6000:fquo)
201
(cabne a3 'btvar 203)
(mov (car a2) a2)
(bra #:ldrs6000:btvar)
203
(cabne a3 'btstrg 205)
(mov (car a2) a2)
(bra #:ldrs6000:btstrg)
205
(cabne a3 'ftimes 207)
(mov (car a2) a2)
(bra #:ldrs6000:ftimes)
207
(cabne a3 'bffloat 209)
(mov (car a2) a2)
(bra #:ldrs6000:bffloat)
209
(cabne a3 'btfloat 211)
(mov (car a2) a2)
(bra #:ldrs6000:btfloat)
211
(cabne a3 'fplus 213)
(mov (car a2) a2)
(bra #:ldrs6000:fplus)
213
(cabne a3 'fdiff 215)
(mov (car a2) a2)
(bra #:ldrs6000:fdiff)
215
(cabne a3 'cfbgt 217)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cfbgt)
217
(cabne a3 'abort 219)
(bra #:ldrs6000:abort)
219
(cabne a3 'endl 221)
(bra #:ldrs6000:endl)
221
(cabne a3 'local 223)
(bra #:ldrs6000:local)
223
(cabne a3 'car 225)
(bra #:ldrs6000:car)
225
(cabne a3 'cdr 227)
(bra #:ldrs6000:cdr)
227
(cabne a3 'btvect 229)
(mov (car a2) a2)
(bra #:ldrs6000:btvect)
229
(cabne a3 'cfbeq 231)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cfbeq)
231
(cabne a3 'cfbne 233)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cfbne)
233
(cabne a3 'cfblt 235)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cfblt)
235
(cabne a3 'cfble 237)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cfble)
237
(cabne a3 'cfbge 239)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(bra #:ldrs6000:cfbge)
239
(cabne a3 'decr 241)
(bra #:ldrs6000:decr)
241
(cabne a3 'incr 243)
(bra #:ldrs6000:incr)
243
(cabne a3 'lxor 245)
(mov (car a2) a2)
(bra #:ldrs6000:lxor)
245
(cabne a3 'negate 247)
(bra #:ldrs6000:negate)
247
(cabne a3 'brx 249)
(mov (car a2) a2)
(bra #:ldrs6000:brx)
249
(cabne a3 'movxsp 251)
(mov (car a2) a2)
(bra #:ldrs6000:movxsp)
251
(cabne a3 'nop 253)
(bra #:ldrs6000:nop)
253
(cabne a3 'sstack 255)
(bra #:ldrs6000:sstack)
255
(mov '"Bad instruction" a2)
(mov '":MACHINS" a1)
(bra #:ldrs6000:error)
))
(defvar #:ldrs6000:pccurrent (if (boundp '#:ldrs6000:pccurrent) #:ldrs6000:pccurrent 0))
(defvar #:ldrs6000:nwl (if (boundp '#:ldrs6000:nwl) #:ldrs6000:nwl 0))
(defvar #:ldrs6000:ecode (if (boundp '#:ldrs6000:ecode) #:ldrs6000:ecode (#:system:ecode)))
(defvar #:ldrs6000:talkp (if (boundp '#:ldrs6000:talkp) #:ldrs6000:talkp ()))
(defvar #:ldrs6000:module (if (boundp '#:ldrs6000:module) #:ldrs6000:module ()))
(defvar #:ldrs6000:saved-by-loader (if (boundp '#:ldrs6000:saved-by-loader) #:ldrs6000:saved-by-loader ()))
(defvar #:ldrs6000:global-saved-by-loader (if (boundp '#:ldrs6000:global-saved-by-loader) #:ldrs6000:global-saved-by-loader ()))
(defvar #:ld:special-case-loader (if (boundp '#:ld:special-case-loader) #:ld:special-case-loader ()))
(loader'((fentry loader nsubr)
(entry loader nsubr)
(cnbge a4 '1 101)
(mov 'loader a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp #:system:ccode)
102
(eval ())
(mov a1 (cvalq #:ldrs6000:pccurrent))
(mov '0 (cvalq #:ldrs6000:nwl))
(mov (& 0) a4)
(mov (car a4) (cvalq #:ldrs6000:talkp))
(mov '0 (cvalq #:ldrs6000:gen))
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
105
(btnil (& 4) 106)
(mov (& 4) a1)
(mov (cdr a1) (& 4))
(mov (car a1) a1)
(call #:ldrs6000:ins)
(bra 105)
106
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 104) a3)
103
(pop a1)
(bri a3)
104
(eval ())
(mov '(endl) a1)
(call #:ldrs6000:ins)
(btnil (cvalq #:ldrs6000:talkp) 108)
(push (@ 109))
(mov '0 a4)
(jmp terpri)
109
(eval ())
108
(push (@ 110))
(mov '0 a4)
(jmp #:system:ccode)
110
(eval ())
(jcall vag)
(push a1)
(mov (cvalq #:ldrs6000:pccurrent) a1)
(jcall vag)
(mov a1 a2)
(pop a1)
(jcall #:ldrs6000:icacheflush)
(push (@ 111))
(push (cvalq #:ldrs6000:pccurrent))
(mov '1 a4)
(jmp #:system:ccode)
111
(eval ())
(adjstk '2)
(return)
))
(loader '((end)))
