;;; GELL 15.26: elaboration file for the module: path
;;;             translation done: "Wed June 16 93 18:00:53 "

(with ((outchan ()))
	(print ";Loading elaboration file: path.le"))
(unless (boundp '#:module:compiled-list)
	(setq #:module:compiled-list ()))
(newl #:module:compiled-list 'path)
(setq #:system:read-case-flag t)

(defcelaborate "GZpath" "Wed June 16 93 18:00:53 "

'((#:pathname:make . subr0) (pathnamep . subr1) (namestring . subr1) (pathname-host . subr1) (pathname-device . subr1) (pathname-directory . subr1) (pathname-name . subr1) (pathname-type . subr1) (pathname-version . subr1) (set-pathname-host . subr2) (set-pathname-device . subr2) (set-pathname-directory . subr2) (set-pathname-name . subr2) (set-pathname-type . subr2) (set-pathname-version . subr2) (copy-pathname . subr1) (pathname . subr1) (#:unix:pathname . subr1) (equal-pathname . subr2) (user-homedir-pathname . subr0) (control-file-pathname . nsubr) (temporary-file-pathname . subr1) (portable-pathname-p . subr1) (#:pathname:prin . subr1) (make-pathname . nsubr) (file-namestring . subr1) (directory-namestring . subr1) (host-namestring . subr1) (device-namestring . subr1) (merge-pathnames . subr2) (combine-pathnames . subr2) (enough-namestring . nsubr) (true-pathname . subr1) (current-directory . nsubr) (directoryp . subr1) (expand-pathname . subr1) (map-expand-pathname . subr2) (wildcard . subr1) (coerce-namestring . subr1))

#[vector pathname type-of t string pathnamep errbpa namestring catenate errpathnotpath set-pathname-host errnsa set-pathname-device set-pathname-directory listp errnla #:pathname:current #:pathname:up #:pathname:wild set-pathname-name errpathbadname set-pathname-type set-pathname-version numberp errpathversion new copylist "" equal #:unix:pathname #:system:unixp system apollo chrpos substring #:pathname:up-string eqstring #:pathname:dot #:pathname:wild-string #:pathname:root "../" index "./" #:pathname:root-string stratom copy-pathname reverse pathname-directory equal-pathname errwna control-file-pathname user-homedir-pathname merge-pathnames symbol putprop getprop "HOME" getenv #:pathname:slash "/tmp/" mcons "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_-$" spanstring |-| "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_-$.\" outchan portable-pathname-p #:system:error-flag errpathfields printerror errpathnotvms errpathnotbsd errpathnotsys5 errpathnotaegis errpathnotdos #:system:print-for-read (#:system:print-for-read) lambda "#:" ":#[ " prin princn "#p""" """" *default-pathname-defaults* make-pathname file-namestring directory-namestring host-namestring device-namestring "//" combine-pathnames nreconc enough-namestring #:llcp:errwna true-pathname current-directory makestring directoryp (#:pathname:current) list append last |1-| firstn expand-pathname map-expand-pathname loc pathname-host pathname-device append1 errpathreaddir "." ".." probefile funcall #:pathname:wild-length substring-equal #:pathname:one-char-length #:pathname:one-char-string #:pathname:one-char |1+| errpathmatch *portable-pathname* #:pathname:make #:gell-resetfn:function-name #:gell-resetfn:function-0 #:gell-resetfn:function-1 pathname-name pathname-type pathname-version #:gell-resetfn:function-2 #:gell-resetfn:function-n temporary-file-pathname #:pathname:prin wildcard coerce-namestring]
)

(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'pathname)))
(#:messages:put-message 'errpathversion 'french '"Version n'est pas un nume'rique" 'defmessage)
(#:messages:put-message 'errpathversion 'english '"Version is not numerical" 'defmessage)
'errpathversion
(#:messages:put-message 'errpathnotpath 'french '"l'argument n'est pas un pathname" 'defmessage)
(#:messages:put-message 'errpathnotpath 'english '"not a pathname" 'defmessage)
'errpathnotpath
(#:messages:put-message 'errpathfields 'french '"Attention: un des champs Host, Device ou Version n'est pas vide" 'defmessage)
(#:messages:put-message 'errpathfields 'english '"Warning : Host, Device or Version fields are not empty" 'defmessage)
'errpathfields
(#:messages:put-message 'errpathnotvms 'french '"Pas une spe'cification VMS" 'defmessage)
(#:messages:put-message 'errpathnotvms 'english '"not a VMS specification" 'defmessage)
'errpathnotvms
(#:messages:put-message 'errpathnotbsd 'french '"Pas une spe'cification BSD" 'defmessage)
(#:messages:put-message 'errpathnotbsd 'english '"not a BSD specification" 'defmessage)
'errpathnotbsd
(#:messages:put-message 'errpathnotsys5 'french '"Pas une spe'cification SYS5" 'defmessage)
(#:messages:put-message 'errpathnotsys5 'english '"not a SYS5 specification" 'defmessage)
'errpathnotsys5
(#:messages:put-message 'errpathnotaegis 'french '"Pas une spe'cification AEGIS" 'defmessage)
(#:messages:put-message 'errpathnotaegis 'english '"not an AEGIS specification" 'defmessage)
'errpathnotaegis
(#:messages:put-message 'errpathnotdos 'french '"Pas une spe'cification DOS" 'defmessage)
(#:messages:put-message 'errpathnotdos 'english '"not a DOS specification" 'defmessage)
'errpathnotdos
(#:messages:put-message 'errpathbadname 'french '"Champ NAME incorrect" 'defmessage)
(#:messages:put-message 'errpathbadname 'english '"Bad NAME field" 'defmessage)
'errpathbadname
(#:messages:put-message 'errpathreaddir 'french '"Ne peut acce'der au re'pertoire" 'defmessage)
(#:messages:put-message 'errpathreaddir 'english '"Can not access directory" 'defmessage)
'errpathreaddir
(#:messages:put-message 'errpathmatch 'french '"Mauvais joker dans le filtre" 'defmessage)
(#:messages:put-message 'errpathmatch 'english '"Bad wild-card in pattern" 'defmessage)
'errpathmatch
(setq #:sys-package:colon 'pathname)
(add-feature 'pathname)
(if (boundp '#:pathname:wild) (progn (makunbound '#:pathname:wild)))
(defvar #:pathname:wild-string "*")
(defvar #:pathname:wild-length (slen #:pathname:wild-string))
(defvar #:pathname:one-char-string "?")
(defvar #:pathname:one-char-length (slen #:pathname:one-char-string))
(defvar #:pathname:root-string "")
(defvar #:pathname:dot ".")
(defvar #:pathname:slash "/")
(defvar #:pathname:up-string "..")
(defvar #:pathname:colon ":")
(defvar #:pathname:backslash "\")
(#:messages:put-message 'errpathsystem 'french '"mauvais syste`me. Vous devez recompiler le module <path> sur" 'defmessage)
(#:messages:put-message 'errpathsystem 'english '"bad system. You have to recompile <path> module on" 'defmessage)
'errpathsystem
(if (neq (or #:system:unixp #:system:dosp (eq (system) 'vaxvms) (system)) 't) (error 'path 'errpathsystem (system)))
(putprop 'pathname '((() () () () () ()) host device directory name type version) 'defstruct)
(defcsetfn '#:pathname:make "GZpath" 0)
(if (featurep 'setf) (progn (progn (putprop '#:pathname:host '#:pathname:host 'setf-inverse) '#:pathname:host)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:host (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:device '#:pathname:device 'setf-inverse) '#:pathname:device)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:device (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:directory '#:pathname:directory 'setf-inverse) '#:pathname:directory)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:directory (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:name '#:pathname:name 'setf-inverse) '#:pathname:name)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:name (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:type '#:pathname:type 'setf-inverse) '#:pathname:type)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:type (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:pathname:version '#:pathname:version 'setf-inverse) '#:pathname:version)))
(if (featurep 'compiler) (progn (defmacro-open #:pathname:version (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn 'pathnamep "GZpath" 1)
(defcsetfn 'namestring "GZpath" 2)
(defcsetfn 'pathname-host "GZpath" 3)
(defcsetfn 'pathname-device "GZpath" 4)
(defcsetfn 'pathname-directory "GZpath" 5)
(defcsetfn 'pathname-name "GZpath" 6)
(defcsetfn 'pathname-type "GZpath" 7)
(defcsetfn 'pathname-version "GZpath" 8)
(defcsetfn 'set-pathname-host "GZpath" 9)
(defcsetfn 'set-pathname-device "GZpath" 10)
(defcsetfn 'set-pathname-directory "GZpath" 11)
(defcsetfn 'set-pathname-name "GZpath" 12)
(defcsetfn 'set-pathname-type "GZpath" 13)
(defcsetfn 'set-pathname-version "GZpath" 14)
(defcsetfn 'copy-pathname "GZpath" 15)
(defcsetfn 'pathname "GZpath" 16)
(defcsetfn '#:unix:pathname "GZpath" 17)
(defcsetfn 'equal-pathname "GZpath" 18)
(defcsetfn 'user-homedir-pathname "GZpath" 19)
(defcsetfn 'control-file-pathname "GZpath" 20)
(defcsetfn 'temporary-file-pathname "GZpath" 21)
(defcsetfn 'portable-pathname-p "GZpath" 22)
(defcsetfn '#:pathname:prin "GZpath" 23)
(defsharp p () (ncons (pathname (read))))
(defsharp u () (ncons (#:unix:pathname (read))))
(defvar *default-pathname-defaults* #:pathname:#[ () () () () () () ])
(defvar *portable-pathname* ())
(defcsetfn 'make-pathname "GZpath" 24)
(defcsetfn 'file-namestring "GZpath" 25)
(defcsetfn 'directory-namestring "GZpath" 26)
(defcsetfn 'host-namestring "GZpath" 27)
(defcsetfn 'device-namestring "GZpath" 28)
(defcsetfn 'merge-pathnames "GZpath" 29)
(defcsetfn 'combine-pathnames "GZpath" 30)
(defcsetfn 'enough-namestring "GZpath" 31)
(defcsetfn 'true-pathname "GZpath" 32)
(defcsetfn 'current-directory "GZpath" 33)
(defcsetfn 'directoryp "GZpath" 34)
(defcsetfn 'expand-pathname "GZpath" 35)
(defcsetfn 'map-expand-pathname "GZpath" 36)
(defcsetfn 'wildcard "GZpath" 37)
(defcsetfn 'coerce-namestring "GZpath" 38)

(defccheck '(portable-pathname-p expand-pathname |1+| substring-equal funcall probefile current-directory append1 pathname-device pathname-host loc directoryp firstn |1-| last make-pathname append list file-namestring directory-namestring device-namestring makestring #:llcp:errwna nreconc namestring princn prin printerror outchan |-| spanstring mcons getenv getprop putprop symbol merge-pathnames user-homedir-pathname set-pathname-directory pathname-directory reverse copy-pathname stratom index set-pathname-device eqstring substring chrpos system #:unix:pathname equal copylist new numberp listp pathname catenate pathnamep string type-of vector))
