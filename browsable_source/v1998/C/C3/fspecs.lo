(loader '(
(listext (fibml fibl fibd llcperwna llcpnlist cwithnoit cwithit cffuncall ctagbody cgo cretfr cexit cblock csched cmplock cprot ctag cbinds cbindl cbindn cbind3 cbind2 cbind1 cbind0 llretf llret block go tagbody resume suspend schedule ini_spec loc deset evbale ffuncall sysprot bndtrbex evbndext evprogn unbinp evexpg unbind10 unbind9 unbind8 unbind7 unbind6 unbind5 unbind4 unbind3 unbind2 unbinp1 unbind1 unbind0 apply evala1 findtag inicst inisymb gccons errwna errxia errsym errnab erres errfs evalan evalt))
(entry startmodule subr0)
	(title fspecs)
	(xrefi llinit mstack)
	(xrefi llinit fcons)
	(xrefi llinit bvar)
	(xrefi llinit |.undef|)
	(xrefi llinit |.llsystem|)
	(xrefi llinit itstate)
	(xrefi llinit itcount)
	(xrefp toperr errfs)
	(xrefp toperr erres)
	(xrefp toperr errnab)
	(xrefp toperr errsym)
	(xrefp toperr errxia)
	(xrefp toperr errwna)
	(xrefp gc gccons)
	(xrefi read cpkgc)
	(xrefp read inisymb)
	(xrefp read inicst)
	(xrefi eval dlink)
	(xrefp eval findtag)
	(xrefp eval evala1)
	(xrefp eval apply)
	(xrefi eval llink)
	(xrefi eval savea1)
	(xrefi eval savea2)
	(xrefi eval savea3)
	(xrefi eval savea4)
	(xrefi eval intret)
	(xrefi eval errname)
	(xrefi eval intllink)
	(xrefp eval unbind0)
	(xrefp eval unbind1)
	(xrefp eval unbinp1)
	(xrefp eval unbind2)
	(xrefp eval unbind3)
	(xrefp eval unbind4)
	(xrefp eval unbind5)
	(xrefp eval unbind6)
	(xrefp eval unbind7)
	(xrefp eval unbind8)
	(xrefp eval unbind9)
	(xrefp eval unbind10)
	(xrefp eval evexpg)
	(xrefi eval errname)
	(xrefp eval unbinp)
	(xrefp eval evprogn)
	(xrefp eval evbndext)
	(xrefp eval bndtrbex)
	(xrefp eval sysprot)
	(xrefp eval ffuncall)
	(xrefp eval evbale)
	(xrefp fntstd deset)
	(xrefp bllsht loc)
	(xdefp ini_spec)
	(endc)
	(xdefi |.kllcp|)
	(endc)
	(impure)
	(ladr savits 0)
	(pure)
ini_spec
	(eval ())
	(makfnt schedule '8 (strg "schedule"))
	(makfnt suspend '7 (strg "suspend"))
	(makfnt resume '6 (strg "resume"))
	(makfnt tagbody '7 (strg "tagbody"))
	(makfnt go '2 (strg "go"))
	(makfnt block '5 (strg "block"))
	(makfnt llret '6 (strg "return"))
	(makfnt llretf '11 (strg "return-from"))
	(endc)
	(makcst kllcp '4 (strg "llcp"))
	(mov |.kllcp| cpkgc)
	(makfnt cbind0 '6 (strg "cbind0"))
	(makfnt cbind1 '6 (strg "cbind1"))
	(makfnt cbind2 '6 (strg "cbind2"))
	(makfnt cbind3 '6 (strg "cbind3"))
	(makfnt cbindn '6 (strg "cbindn"))
	(mov (@ unbind1) a1)
	(push (@ ret_call_loc_1))
	(bra loc)
ret_call_loc_1
	(eval ())
	(mov |.cbindn| a2)
	(mov a1 (cval a2))
	(makfnt cbindl '6 (strg "cbindl"))
	(makfnt cbinds '6 (strg "cbinds"))
	(makfnt cexit '4 (strg "exit"))
	(makfnt ctag '3 (strg "tag"))
	(mov (@ unbind3) a1)
	(push (@ ret_call_loc_2))
	(bra loc)
ret_call_loc_2
	(eval ())
	(mov |.ctag| a2)
	(mov a1 (cval a2))
	(makfnt cprot '4 (strg "prot"))
	(mov (@ unbind7) a1)
	(push (@ ret_call_loc_3))
	(bra loc)
ret_call_loc_3
	(eval ())
	(mov |.cprot| a2)
	(mov a1 (cval a2))
	(makfnt cmplock '4 (strg "lock"))
	(mov (@ unbind5) a1)
	(push (@ ret_call_loc_4))
	(bra loc)
ret_call_loc_4
	(eval ())
	(mov |.cmplock| a2)
	(mov a1 (cval a2))
	(makfnt csched '8 (strg "schedule"))
	(makfnt cblock '5 (strg "block"))
	(makfnt cretfr '7 (strg "retfrom"))
	(makfnt cgo '2 (strg "go"))
	(makfnt ctagbody '7 (strg "tagbody"))
	(makfnt cffuncall '8 (strg "ffuncall"))
	(makfnt cwithit '15 (strg "with-interrupts"))
	(makfnt cwithnoit '18 (strg "without-interrupts"))
	(makfnt llcpnlist '5 (strg "nlist"))
	(makfnt llcperwna '6 (strg "errwna"))
	(makcst ddlink '5 (strg "dlink"))
	(mov (% dlink) a1)
	(push (@ ret_call_loc_5))
	(bra loc)
ret_call_loc_5
	(eval ())
	(mov |.ddlink| a2)
	(mov a1 (cval a2))
	(makcst dllink '5 (strg "llink"))
	(mov (% llink) a1)
	(push (@ ret_call_loc_6))
	(bra loc)
ret_call_loc_6
	(eval ())
	(mov |.dllink| a2)
	(mov a1 (cval a2))
	(makcst ditcnt '7 (strg "itcount"))
	(mov (% itcount) a1)
	(push (@ ret_call_loc_7))
	(bra loc)
ret_call_loc_7
	(eval ())
	(mov |.ditcnt| a2)
	(mov a1 (cval a2))
	(mov |.llsystem| cpkgc)
	(makcst nvar '1 (strg "n"))
	(mov a1 a2)
	(ncons a2)
	(mov |.undef| (cval a1))
	(mov a2 (oval a1))
	(movnil cpkgc)
	(makfnt fibd '4 (strg "fibd"))
	(makfnt fibl '4 (strg "fibl"))
	(makfnt fibml '5 (strg "fibml"))
	(endc)
	(return)
	(lentry schedule 6)
	(chkstk mstack errfs)
	(push (car a1))
	(push dlink)
	(push (@ unbind8))
	(stack dlink)
	(mov |.schedule| errname)
	(bra evexpg)
	(lentry suspend 1)
	(mov itstate savits)
	(mov '0 itstate)
	(movnil a1)
	(bra sus00)
sus000
	(cons a4 a2)
	(cons a2 a1)
sus00
	(mov dlink a3)
	(movnil a2)
	(bra sus02)
sus01
	(eval ())
	(pop a4)
	(cons a4 a2)
sus02
	(stack a4)
	(cabne a4 a3 sus01)
	(cons a2 a1)
	(movnil a2)
	(pop a4)
	(pop dlink)
	(cabeq a4 (@ unbind0) susb0)
	(cabeq a4 (@ unbind1) susb1)
	(cabeq a4 (@ unbind2) susb2)
	(cabeq a4 (@ unbind3) susb3)
	(cabeq a4 (@ unbind4) susb4)
	(cabeq a4 (@ unbind5) susb5)
	(cabeq a4 (@ unbind6) susb6)
	(cabeq a4 (@ unbind7) susb7)
	(cabeq a4 (@ unbind8) susb8)
	(cabeq a4 (@ unbind9) susb9)
	(cabeq a4 (@ unbind10) susb10)
	(ttymsg '13 (strg " error SUSPN "))
susb0
	(eval ())
	(bra erres)
susb1
	(eval ())
	(mov (& 2) a2)
	(push (@ ret_call_sus100_8))
	(bra sus100)
ret_call_sus100_8
	(eval ())
	(cons a2 a1)
	(mov a1 savea1)
	(mov (& 3) a4)
	(plus '4 a4)
	(mov '0 a3)
	(movnil a2)
susb11
	(xspmov a3 a1)
	(cons a1 a2)
	(incr a3)
susb12
	(sobgtz a4 susb11)
	(mov savea1 a1)
	(mov (@ susb13) a3)
	(push dlink)
	(bra unbinp1)
susb13
	(mov (@ unbind1) a4)
	(bra sus000)
sus100
	(bfcons a2 sus101)
	(push (car a2))
	(mov (cdr a2) a2)
	(push (@ ret_call_sus100_9))
	(bra sus100)
ret_call_sus100_9
	(eval ())
	(xtopst a2)
	(push (@ ret_call_sus100_10))
	(bra sus100)
ret_call_sus100_10
	(eval ())
	(pop a3)
	(xcons a3 a2)
	(return)
sus101
	(btnil a2 sus102)
	(mov (cval a2) a2)
sus102
	(return)
susb2
	(eval ())
	(pop a3)
	(cabeq a3 '0 sus23)
	(gftype a3 a4)
	(cons a4 a2)
	(pop a4)
	(sftype a4 a3)
	(cons (fval a3) a2)
	(pop (fval a3))
	(cons a3 a2)
	(bra susb2)
sus23
	(mov (@ unbind2) a4)
	(bra sus000)
susb3
	(eval ())
susb5
	(eval ())
susb6
	(eval ())
susb7
	(eval ())
susb9
	(eval ())
susb10
	(eval ())
	(pop a2)
	(bra sus000)
susb4
	(eval ())
	(pop a3)
	(pop a2)
	(cons a3 a2)
	(bra sus000)
susb8
	(eval ())
	(topst a3)
	(push dlink)
	(push (@ unbind8))
	(stack dlink)
	(ncons a1)
	(mov a1 a2)
	(mov a3 a1)
	(mov savits itstate)
	(bra apply)
	(lentry resume 2)
	(mov itstate savits)
	(mov '0 itstate)
	(btnil a1 resso)
restes
	(sstack dlink)
	(topst a3)
	(cabeq a3 (@ unbind8) resfin)
	(mov (@ restes) a3)
	(bra unbinp)
res00
	(eval ())
	(mov (car a1) a2)
	(mov (cdr a1) a1)
	(mov (car a2) a3)
	(mov (cdr a2) a2)
	(cabeq (@ unbind2) a3 res20)
	(cabeq (@ unbind4) a3 res40)
	(cabne (@ unbind1) a3 resn1)
res11
	(eval ())
	(btnil a2 res12)
	(push (car a2))
	(mov (cdr a2) a2)
	(bra res11)
res12
	(topst llink)
	(mov (car a1) a2)
	(push (cdr a1))
	(mov (& 3) a1)
	(push (@ ret_call_deset_11))
	(bra deset)
ret_call_deset_11
	(eval ())
	(pop a1)
	(push dlink)
	(push (@ unbind1))
	(stack dlink)
	(bra resfin)
res20
	(eval ())
	(push '0)
res21
	(btnil a2 res22)
	(mov (car a2) a3)
	(mov (cdr a2) a2)
	(push (fval a3))
	(mov (car a2) (fval a3))
	(mov (cdr a2) a2)
	(gftype a3 a4)
	(push a4)
	(mov (car a2) a4)
	(sftype a4 a3)
	(mov (cdr a2) a2)
	(push a3)
	(bra res21)
res22
	(eval ())
	(push dlink)
	(push (@ unbind2))
	(stack dlink)
	(bra resfin)
res40
	(eval ())
	(push (cdr a2))
	(mov (car a2) a2)
resn1
	(eval ())
	(push a2)
	(push dlink)
	(push a3)
	(stack dlink)
resfin
	(eval ())
	(mov (car a1) a2)
	(mov (cdr a1) a1)
res14
	(btnil a2 res15)
	(push (car a2))
	(mov (cdr a2) a2)
	(bra res14)
res15
	(eval ())
	(bfnil (cdr a1) res00)
resso
	(eval ())
	(movnil a2)
	(movnil a3)
	(movnil a4)
	(mov savits itstate)
	(return)
	(lentry tagbody 6)
	(bfcons a1 tagbdr)
	(mov a1 a3)
	(mov '0 a4)
tagbdr2
	(mov (car a3) a2)
	(mov (cdr a3) a3)
	(btcons a2 tagbdr3)
	(push a3)
	(push a2)
	(incr a4)
tagbdr3
	(btcons a3 tagbdr2)
	(push a4)
	(mov '0 a2)
	(ncons a2)
	(push a2)
	(push dlink)
	(push (@ unbind9))
	(stack dlink)
	(mov dlink (cdr a2))
	(cons a2 llink)
	(mov a1 a2)
	(bra tagbd4)
tagbd2
	(mov (car a2) a1)
	(bfcons a1 tagbd3)
	(push a2)
	(push (@ ret_call_evala1_12))
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evala1_12
	(eval ())
	(pop a2)
tagbd3
	(mov (cdr a2) a2)
tagbd4
	(btcons a2 tagbd2)
tagbdr
	(movnil a1)
	(return)
	(lentry go 6)
	(mov (car a1) a1)
llgof1
	(mov llink a4)
	(bra llgof6)
llgof2
	(mov (car a4) a3)
	(cabne (car a3) '0 llgof5)
	(mov (cdr a3) a2)
	(btnil a2 llgof5)
	(push a4)
	(push a2)
	(adjstkr a2 '3)
	(popr a2 a4)
	(bra llgof4)
llgof3
	(topstr a2 a3)
	(cabeq a3 a1 llgof7)
	(adjstkr a2 '2)
llgof4
	(sobgez a4 llgof3)
	(adjstk '1)
	(pop a4)
llgof5
	(mov (cdr a4) a4)
llgof6
	(btcons a4 llgof2)
	(mov |.go| a2)
	(bra errnab)
llgof7
	(eval ())
	(adjstkr a2 '1)
	(topstr a2 a2)
	(topst a1)
llgof8
	(mov dlink a4)
	(sstack a4)
	(cabeq a4 a1 llgof9)
	(mov (@ llgof8) a3)
	(bra unbinp)
llgof9
	(btlisp a2 tagbd4)
	(bri a2)
	(lentry block 6)
	(mov (car a1) a2)
	(bfsymb a2 blckerr)
	(ncons a2)
	(mov a2 a3)
	(cons '1 a2)
	(push a3)
	(push dlink)
	(push (@ unbind10))
	(stack dlink)
	(mov dlink (cdr a3))
	(cons a2 llink)
	(mov |.block| errname)
	(bra evexpg)
blckerr
	(mov a2 a1)
	(mov |.block| a2)
	(bra errsym)
	(lentry llret 6)
	(movnil a2)
	(push a2)
	(mov |.llret| errname)
	(bra llretf1)
	(lentry llretf 6)
	(push (car a1))
	(mov (cdr a1) a1)
	(mov |.llretf| errname)
llretf1
	(push (@ ret_call_evprogn_13))
	(bra evprogn)
ret_call_evprogn_13
	(eval ())
	(pop a2)
llretg
	(eval ())
	(mov llink a4)
	(bra llretf4)
llretf2
	(mov (car a4) a3)
	(cabne (car a3) '1 llretf3)
	(mov (cdr a3) a3)
	(cabeq (car a3) a2 llretf6)
llretf3
	(mov (cdr a4) a4)
llretf4
	(btcons a4 llretf2)
	(mov a2 a1)
	(mov |.llretf| a2)
	(bra errnab)
llretf6
	(bfnil (cdr a3) llretr2)
	(mov a2 a1)
	(mov |.llretf| a2)
	(bra errxia)
llretr2
	(eval ())
	(mov (cdr a3) a2)
llretr3
	(mov dlink a4)
	(sstack a4)
	(topst a3)
	(cabne a3 (@ unbind10) llretr4)
	(cabeq a2 a4 llretr9)
llretr4
	(mov (@ llretr3) a3)
	(bra unbinp)
llretr9
	(return)
	(endc)
	(lentry cbind0 1)
	(intest)
	(cabne (& 1) (@ unbind1) cbind0g)
	(cabne (& 4) a4 cbind0g)
	(movnil llink)
	(return)
cbind0g
	(chkstk mstack errfs)
	(pop a2)
	(push '0)
	(push nil)
	(push a4)
	(push llink)
	(movnil llink)
	(push dlink)
	(push (@ unbind1))
	(stack dlink)
	(bri a2)
	(lentry cbind1 1)
	(intest)
	(cabne (& 1) (@ unbind1) cbind1g)
	(cabne (& 4) a4 cbind1g)
	(mov (car a3) a2)
	(mov a1 (cval a2))
	(movnil llink)
	(return)
cbind1g
	(chkstk mstack errfs)
	(topst a2)
	(push '1)
	(push a3)
	(push a4)
	(mov (car a3) a4)
	(mov (cval a4) (& 3))
	(mov a1 (cval a4))
	(push llink)
	(movnil llink)
	(push dlink)
	(push (@ unbind1))
	(stack dlink)
	(bri a2)
	(lentry cbind2 1)
	(intest)
	(cabne (& 1) (@ unbind1) cbind2g)
	(cabne (& 4) a4 cbind2g)
	(mov (car a3) a4)
	(mov a1 (cval a4))
	(mov (cdr a3) a4)
	(mov (car a4) a3)
	(mov a2 (cval a3))
	(movnil llink)
	(return)
cbind2g
	(chkstk mstack errfs)
	(topst savea2)
	(adjstk '-1)
	(push '2)
	(push a3)
	(push a4)
	(mov (car a3) a4)
	(mov (cval a4) (& 4))
	(mov a1 (cval a4))
	(mov (cdr a3) a4)
	(mov (car a4) a4)
	(mov (cval a4) (& 3))
	(mov a2 (cval a4))
	(push llink)
	(movnil llink)
	(push dlink)
	(push (@ unbind1))
	(stack dlink)
	(bri savea2)
	(lentry cbind3 1)
	(intest)
	(mov a3 savea3)
	(pop savea2)
	(pop savea4)
	(cabne (& 0) (@ unbind1) cbind3g)
	(cabne (& 3) savea4 cbind3g)
	(mov (car a4) a3)
	(mov a1 (cval a3))
	(mov (cdr a4) a4)
	(mov (car a4) a3)
	(mov a2 (cval a3))
	(mov (cdr a4) a4)
	(mov (car a4) a4)
	(mov savea3 a3)
	(mov a3 (cval a4))
	(movnil llink)
	(bri savea2)
cbind3g
	(chkstk mstack errfs)
	(adjstk '-3)
	(mov a4 savea1)
	(mov (car a4) a3)
	(mov (cval a3) (& 2))
	(mov a1 (cval a3))
	(mov (cdr a4) a4)
	(mov (car a4) a3)
	(mov (cval a3) (& 1))
	(mov a2 (cval a3))
	(mov (cdr a4) a4)
	(mov (car a4) a4)
	(mov (cval a4) (& 0))
	(mov savea3 a3)
	(mov a3 (cval a4))
	(push '3)
	(push savea1)
	(push savea4)
	(push llink)
	(movnil llink)
	(push dlink)
	(push (@ unbind1))
	(stack dlink)
	(bri savea2)
	(lentry cbindn 1)
	(intest)
	(chkstk mstack errfs)
	(movnil intllink)
cbindnc
	(pop intret)
cbindnn
	(mov a3 savea2)
	(mov a4 savea4)
	(mov a2 savea1)
	(mov a2 errname)
	(bra evbndext)
	(lentry cbindl 1)
	(intest)
	(chkstk mstack errfs)
	(mov llink intllink)
	(bra cbindnc)
	(lentry cbinds 1)
	(intest)
	(pop intret)
	(movnil intllink)
	(mov a3 savea2)
	(mov a2 savea1)
	(mov a2 errname)
	(bra bndtrbex)
	(lentry ctag 1)
	(pop a2)
	(push a1)
	(push dlink)
	(push (@ unbind3))
	(stack dlink)
	(bri a2)
	(lentry cprot 1)
	(bra sysprot)
	(lentry cmplock 1)
	(pop a2)
	(push a1)
	(push dlink)
	(push (@ unbind5))
	(stack dlink)
	(bri a2)
	(lentry csched 1)
	(chkstk mstack errfs)
	(pop a2)
	(push a1)
	(push dlink)
	(push (@ unbind8))
	(stack dlink)
	(bri a2)
	(lentry cblock 1)
	(mov a1 a2)
	(pop a1)
	(bfsymb a2 blckerr)
	(ncons a2)
	(mov a2 a3)
	(cons '1 a2)
	(push a3)
	(push dlink)
	(push (@ unbind10))
	(stack dlink)
	(mov dlink (cdr a3))
	(cons a2 llink)
	(bri a1)
	(lentry cexit 1)
	(bra findtag)
	(lentry cretfr 1)
	(bra llretg)
	(lentry cgo 1)
	(bra llgof1)
	(lentry ctagbody 1)
	(pop a1)
	(mov '0 a2)
	(ncons a2)
	(push a2)
	(push dlink)
	(push (@ unbind9))
	(stack dlink)
	(mov dlink (cdr a2))
	(cons a2 llink)
	(bri a1)
	(lentry cffuncall 1)
	(bra ffuncall)
	(lentry cwithit 1)
	(pop a1)
	(push itstate)
	(mov (@ cwithit1) a3)
	(push (@ ret_call_sysprot_14))
	(bra sysprot)
ret_call_sysprot_14
	(eval ())
	(pop a1)
	(pop itstate)
	(bri a3)
cwithit1
	(mov '1 itstate)
	(bri a1)
	(lentry cwithnoit 1)
	(pop a1)
	(push itstate)
	(mov (@ cwithno1) a3)
	(push (@ ret_call_sysprot_15))
	(bra sysprot)
ret_call_sysprot_15
	(eval ())
	(pop a1)
	(pop itstate)
	(bri a3)
cwithno1
	(mov '0 itstate)
	(bri a1)
	(lentry llcpnlist 1)
	(movnil a1)
	(cabne a4 '0 llcpnl1)
	(return)
llcpnl1
	(pop a3)
	(bra llcpnl3)
llcpnl2
	(pop a2)
	(cons a2 a1)
llcpnl3
	(sobgez a4 llcpnl2)
	(bri a3)
	(lentry llcperwna 3)
	(mov a1 a3)
	(mov a2 a1)
	(mov a3 a2)
	(bra errwna)
	(endc)
	(endc)
	(lentry fibd 2)
	(mov |.nvar| a3)
	(mov (oval a3) a3)
	(mov |.fibd| a4)
	(push (@ ret_call_cbind1_16))
	(bra cbind1)
ret_call_cbind1_16
	(eval ())
	(cnbne a1 '1 fibd2)
	(mov '1 a1)
	(return)
fibd2
	(cnbne a1 '2 fibd3)
	(mov '1 a1)
	(return)
fibd3
	(decr a1)
	(push (@ ret_call_fibd_17))
	(bra fibd)
ret_call_fibd_17
	(eval ())
	(push a1)
	(mov |.nvar| a1)
	(mov (cval a1) a1)
	(diff '2 a1)
	(push (@ ret_call_fibd_18))
	(bra fibd)
ret_call_fibd_18
	(eval ())
	(pop a2)
	(plus a2 a1)
	(return)
	(lentry fibl 2)
	(push a1)
	(cnbne a1 '1 fibl2)
	(mov '1 a1)
	(bra fibl9)
fibl2
	(cnbne a1 '2 fibl3)
	(mov '1 a1)
	(bra fibl9)
fibl3
	(decr a1)
	(push (@ ret_call_fibl_19))
	(bra fibl)
ret_call_fibl_19
	(eval ())
	(push a1)
	(xspmov '1 a1)
	(diff '2 a1)
	(push (@ ret_call_fibl_20))
	(bra fibl)
ret_call_fibl_20
	(eval ())
	(pop a2)
	(plus a2 a1)
fibl9
	(adjstk '1)
	(return)
	(lentry fibml 2)
	(cnble a1 '2 fibmlr)
	(push a1)
	(decr a1)
	(push (@ ret_call_fibml_21))
	(bra fibml)
ret_call_fibml_21
	(eval ())
	(xtopst a1)
	(diff '2 a1)
	(push (@ ret_call_fibml_22))
	(bra fibml)
ret_call_fibml_22
	(eval ())
	(pop a2)
	(plus a2 a1)
	(return)
fibmlr
	(eval ())
	(mov '1 a1)
	(return)
	(endc)
	(end)
))
