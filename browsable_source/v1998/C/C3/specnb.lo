(loader '(
(listext (excomp exdiv exmul exinv exincr exadd flquo fltimes flplus fixp floatp cllfle cllflt cllfge cllfgt cllfneqn cllfeqn cllfdiv cllfmul cllfsub cllfadd cllrem clldiv cllmul clllsht llfdiv llfmul llfsub llfadd llfmax llfmin llfle llflt llfge llfgt llfneqn llfeqn dpfield dpbyte ldbt ldbyte mskfield dpn logshift logxor logor logand lognot llrandom llsrandom scale llrem ll_div llmul llsub lladd llsub1 lladd1 llimax llimin llle lllt llge llgt llneqn lleqn evenp oddp fldiff ini_snb ffsymbol nreverse getfns ffuncall apply evala1 evalcar inicst inisymb gcnumb gcfloat gccons gettype err0dv errstl errwna errnva errnla errnsa errnfa errnia errnna errgen errfs theend reenter evalan evalt))
(entry startmodule subr0)
	(title specnb)
	(xrefi llinit |.undef|)
	(xrefi llinit fcons)
	(xrefi llinit bvar)
	(xrefi llinit |.t|)
	(xrefi llinit |.void|)
	(xrefi llinit |.syspkgc|)
	(xrefi llinit mstack)
	(xrefp llinit reenter)
	(xrefp llinit theend)
	(xrefp toperr errfs)
	(xrefp toperr errgen)
	(xrefp toperr errnna)
	(xrefp toperr errnia)
	(xrefp toperr errnfa)
	(xrefp toperr errnsa)
	(xrefp toperr errnla)
	(xrefp toperr errnva)
	(xrefp toperr errwna)
	(xrefp toperr errstl)
	(xrefp toperr err0dv)
	(xrefp gc gettype)
	(xrefp gc gccons)
	(xrefp gc gcfloat)
	(xrefp gc gcnumb)
	(xrefp read inisymb)
	(xrefp read inicst)
	(xrefi read cpkgc)
	(xrefp eval evalcar)
	(xrefp eval evala1)
	(xrefp eval apply)
	(xrefp eval ffuncall)
	(endc)
	(xrefi fspecs |.kllcp|)
	(endc)
	(xrefi cntrl |.quote|)
	(xrefp symbs getfns)
	(xrefp fntstd nreverse)
	(xrefi number fzero)
	(xrefi number |.ex|)
	(xrefp string ffsymbol)
	(xdefp ini_snb)
	(xdefp fldiff)
	(pure)
ini_snb
	(eval ())
	(makfnt scale '5 (strg "scale"))
	(makfnt lognot '6 (strg "lognot"))
	(makfnt logand '6 (strg "logand"))
	(makfnt logor '5 (strg "logor"))
	(makfnt logxor '6 (strg "logxor"))
	(makfnt logshift '8 (strg "logshift"))
	(makfnt dpn '3 (strg "2**"))
	(makfnt mskfield '10 (strg "mask-field"))
	(makfnt ldbyte '9 (strg "load-byte"))
	(makfnt dpbyte '12 (strg "deposit-byte"))
	(makfnt dpfield '13 (strg "deposit-field"))
	(makfnt ldbt '14 (strg "load-byte-test"))
	(makfnt oddp '4 (strg "oddp"))
	(makfnt evenp '5 (strg "evenp"))
	(makfnt llrandom '6 (strg "random"))
	(makfnt llsrandom '7 (strg "srandom"))
	(makfnt floatp '6 (strg "floatp"))
	(makfnt fixp '4 (strg "fixp"))
	(makfnt flplus '4 (strg "plus"))
	(makfnt fldiff '10 (strg "difference"))
	(makfnt fldiff '6 (strg "differ"))
	(makfnt fltimes '5 (strg "times"))
	(makfnt flquo '6 (strg "divide"))
	(makfnt lladd1 '4 (strg "add1"))
	(makfnt llsub1 '4 (strg "sub1"))
	(makfnt lladd '3 (strg "add"))
	(makfnt llsub '3 (strg "sub"))
	(makfnt llmul '3 (strg "mul"))
	(makfnt ll_div '3 (strg "div"))
	(makfnt llrem '3 (strg "rem"))
	(makfnt lleqn '3 (strg "eqn"))
	(makfnt llneqn '4 (strg "neqn"))
	(makfnt llge '2 (strg "ge"))
	(makfnt llgt '2 (strg "gt"))
	(makfnt llle '2 (strg "le"))
	(makfnt lllt '2 (strg "lt"))
	(makfnt llimin '4 (strg "imin"))
	(makfnt llimax '4 (strg "imax"))
	(makfnt llfadd '4 (strg "fadd"))
	(makfnt llfsub '4 (strg "fsub"))
	(makfnt llfmul '4 (strg "fmul"))
	(makfnt llfdiv '4 (strg "fdiv"))
	(makfnt llfeqn '4 (strg "feqn"))
	(makfnt llfneqn '5 (strg "fneqn"))
	(makfnt llfge '3 (strg "fge"))
	(makfnt llfgt '3 (strg "fgt"))
	(makfnt llfle '3 (strg "fle"))
	(makfnt llflt '3 (strg "flt"))
	(makfnt llfmin '4 (strg "fmin"))
	(makfnt llfmax '4 (strg "fmax"))
	(endc)
	(mov |.kllcp| cpkgc)
	(makfnt clllsht '8 (strg "logshift"))
	(makfnt cllmul '3 (strg "mul"))
	(makfnt clldiv '3 (strg "div"))
	(makfnt cllrem '3 (strg "rem"))
	(makfnt cllfadd '4 (strg "fadd"))
	(makfnt cllfsub '4 (strg "fsub"))
	(makfnt cllfmul '4 (strg "fmul"))
	(makfnt cllfdiv '4 (strg "fdiv"))
	(makfnt cllfeqn '4 (strg "feqn"))
	(makfnt cllfneqn '5 (strg "fneqn"))
	(makfnt cllfge '3 (strg "fge"))
	(makfnt cllfgt '3 (strg "fgt"))
	(makfnt cllfle '3 (strg "fle"))
	(makfnt cllflt '3 (strg "flt"))
	(movnil cpkgc)
	(endc)
	(makcst excarry '6 (strg "regret"))
	(mov '0 (cval a1))
	(mov |.ex| (pkgc a1))
	(makfnt exadd '3 (strg "ex+"))
	(makfnt exincr '4 (strg "ex1+"))
	(makfnt exinv '3 (strg "ex-"))
	(makfnt exmul '3 (strg "ex*"))
	(makfnt exdiv '3 (strg "ex/"))
	(makfnt excomp '3 (strg "ex?"))
	(return)
nfalse
	(movnil a1)
	(return)
rzero
	(mov '0 a1)
	(return)
rone
	(mov '1 a1)
	(return)
banfix3
	(mov a3 a2)
banfix2
	(mov a2 a1)
banfix1
	(mov a4 a2)
	(bra errnia)
banflt2
	(mov a2 a1)
banflt1
	(mov a4 a2)
	(bra errnfa)
banmix2
	(mov a2 a1)
banmix1
	(mov a4 a2)
	(bra errnna)
ban0dv
	(mov a4 a2)
	(mov '0 a1)
	(bra err0dv)
banwna
	(mov a3 a1)
	(mov a4 a2)
	(bra errwna)
	(lentry oddp 2)
	(mov |.oddp| a4)
	(bffix a1 banfix1)
	(mov a1 a2)
	(land '1 a2)
	(cnbeq a2 '0 nfalse)
	(return)
	(lentry evenp 2)
	(mov |.evenp| a4)
	(bffix a1 banfix1)
	(mov a1 a2)
	(land '1 a2)
	(cnbne a2 '0 nfalse)
	(return)
	(lentry lleqn 3)
	(mov |.lleqn| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnbne a1 a2 nfalse)
	(return)
	(lentry llneqn 3)
	(mov |.llneqn| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnbeq a1 a2 nfalse)
	(return)
	(lentry llgt 3)
	(mov |.llgt| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnble a1 a2 nfalse)
	(return)
	(lentry llge 3)
	(mov |.llge| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnblt a1 a2 nfalse)
	(return)
	(lentry lllt 3)
	(mov |.lllt| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnbge a1 a2 nfalse)
	(return)
	(lentry llle 3)
	(mov |.llle| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnbgt a1 a2 nfalse)
	(return)
	(lentry llimin 3)
	(mov |.llimin| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnble a1 a2 lliminr)
	(mov a2 a1)
lliminr
	(return)
	(lentry llimax 3)
	(mov |.llimax| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnbgt a1 a2 llimaxr)
	(mov a2 a1)
llimaxr
	(return)
	(lentry lladd1 2)
	(mov |.lladd1| a4)
	(bffix a1 banfix1)
	(incr a1)
lla1ret
	(return)
	(lentry llsub1 2)
	(mov |.llsub1| a4)
	(bffix a1 banfix1)
	(decr a1)
lls1ret
	(return)
	(lentry lladd 3)
	(mov |.lladd| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(plus a2 a1)
lladdret
	(return)
	(lentry llsub 3)
	(mov |.llsub| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(diff a2 a1)
llsubret
	(return)
	(lentry llmul 3)
	(mov |.llmul| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(times a2 a1)
llmulret
	(return)
	(lentry ll_div 3)
	(mov |.ll_div| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnbeq a2 '0 ban0dv)
	(quo a2 a1)
lldivret
	(return)
	(lentry llrem 3)
	(mov |.llrem| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnbeq a2 '0 ban0dv)
	(rem a2 a1)
	(return)
	(lentry scale 4)
	(mov |.scale| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(bffix a3 banfix3)
	(cnbeq a3 '0 ban0dv)
	(mov '0 a4)
	(cnbge a1 '0 scale1)
	(negate a1)
	(incr a4)
scale1
	(cnbge a2 '0 scale2)
	(negate a2)
	(incr a4)
scale2
	(cnbge a3 '0 scale3)
	(negate a3)
	(incr a4)
scale3
	(etimes a1 a2 '0 '0 a1 a2)
	(edivide a1 a2 a3 a1 a2)
	(cnbeq a4 '0 scale4)
	(cnbeq a4 '2 scale4)
	(negate a1)
scale4
	(return)
	(impure)
	(ladr randseed 0)
	(pure)
	(lentry llsrandom 5)
	(mov a4 a3)
	(mov |.llsrandom| a4)
	(cnbeq a3 '0 srand1)
	(cnbeq a3 '1 srand0)
	(bra banwna)
srand0
	(pop a1)
	(bffix a1 banfix1)
	(rem '31213 a1)
	(mov a1 randseed)
srand1
	(mov randseed a1)
	(return)
	(lentry llrandom 3)
	(mov |.llrandom| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(cnbeq a1 a2 random1)
	(cnblt a1 a2 random2)
	(mov a1 a3)
	(mov a2 a1)
	(mov a3 a2)
random2
	(diff a1 a2)
random3
	(eval ())
	(mov randseed a3)
	(etimes a3 '92 '2731 '0 a3 a4)
	(edivide a3 a4 '31213 a3 a4)
	(mov a4 randseed)
	(etimes a4 a2 '0 '0 a3 a4)
	(edivide a3 a4 '31213 a3 a4)
	(cnbgt a3 a2 random3)
	(plus a3 a1)
random1
	(return)
	(lentry lognot 2)
	(mov |.lognot| a4)
	(bffix a1 banfix1)
	(lxor '-1 a1)
	(return)
	(lentry logand 3)
	(mov |.logand| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(land a2 a1)
	(return)
	(lentry logor 3)
	(mov |.logor| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(lor a2 a1)
	(return)
	(lentry logxor 3)
	(mov |.logxor| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(lxor a2 a1)
	(return)
	(lentry logshift 3)
	(mov |.logshift| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(lshift a2 a1)
	(return)
	(lentry dpn 2)
	(mov |.dpn| a4)
	(bffix a1 banfix1)
	(mov a1 a2)
	(mov '1 a1)
	(lshift a2 a1)
	(return)
	(lentry mskfield 4)
	(mov |.mskfield| a4)
mskf0
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(bffix a3 banfix3)
	(mov '1 a4)
	(lshift a3 a4)
	(decr a4)
mskf1
	(lshift a2 a4)
	(land a4 a1)
	(return)
	(lentry ldbyte 4)
	(mov |.ldbyte| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(bffix a3 banfix3)
	(mov '1 a4)
	(lshift a3 a4)
	(decr a4)
ldby1
	(negate a2)
	(lshift a2 a1)
	(land a4 a1)
	(return)
	(lentry ldbt 4)
	(mov |.ldbt| a4)
	(bffix a1 banfix1)
	(bffix a2 banfix2)
	(bffix a3 banfix3)
	(mov '1 a4)
	(lshift a3 a4)
	(decr a4)
ldbt1
	(negate a2)
	(lshift a2 a1)
	(land a4 a1)
	(cnbeq a1 '0 nfalse)
	(return)
	(lentry dpbyte 5)
	(mov a4 a3)
	(mov |.dpbyte| a4)
	(bra dpfi0)
	(lentry dpfield 5)
	(mov a4 a3)
	(mov |.dpfield| a4)
dpfi0
	(cnbne a3 '4 banwna)
	(xspmov '3 a1)
	(bffix a1 banfix1)
	(pop a1)
	(pop a3)
	(pop a2)
	(cabeq a4 |.dpfield| dpfi1)
	(lshift a2 a1)
dpfi1
	(push (@ ret_call_mskf0_1))
	(bra mskf0)
ret_call_mskf0_1
	(eval ())
	(pop a2)
	(lxor '-1 a4)
	(land a4 a2)
	(lor a2 a1)
	(return)
	(lentry llfeqn 3)
	(mov |.llfeqn| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfbne a1 a2 nfalse)
	(return)
	(lentry llfneqn 3)
	(mov |.llfneqn| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfbeq a1 a2 nfalse)
	(return)
	(lentry llfgt 3)
	(mov |.llfgt| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfble a1 a2 nfalse)
	(return)
	(lentry llfge 3)
	(mov |.llfge| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfblt a1 a2 nfalse)
	(return)
	(lentry llflt 3)
	(mov |.llflt| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfbge a1 a2 nfalse)
	(return)
	(lentry llfle 3)
	(mov |.llfle| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfbgt a1 a2 nfalse)
	(return)
	(lentry llfmin 3)
	(mov |.llfmin| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfble a1 a2 llfminr)
	(mov a2 a1)
llfminr
	(return)
	(lentry llfmax 3)
	(mov |.llfmax| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfbgt a1 a2 llfmaxr)
	(mov a2 a1)
llfmaxr
	(return)
	(lentry llfadd 3)
	(mov |.llfadd| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(fplus a2 a1)
	(return)
	(lentry llfsub 3)
	(mov |.llfsub| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(fdiff a2 a1)
	(return)
	(lentry llfmul 3)
	(mov |.llfmul| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(ftimes a2 a1)
	(return)
	(lentry llfdiv 3)
	(mov |.llfdiv| a4)
	(bffloat a1 banflt1)
	(bffloat a2 banflt2)
	(cfbeq a2 fzero ban0dv)
	(fquo a2 a1)
	(return)
	(lentry clllsht 1)
	(lshift (& 0) (& 2))
	(adjstk '1)
	(return)
	(lentry cllmul 1)
	(times (& 0) (& 2))
	(adjstk '1)
	(return)
	(lentry clldiv 1)
	(quo (& 0) (& 2))
	(adjstk '1)
	(return)
	(lentry cllrem 1)
	(rem (& 0) (& 2))
	(adjstk '1)
	(return)
	(lentry cllfadd 1)
	(fplus (& 0) (& 2))
	(adjstk '1)
	(return)
	(lentry cllfsub 1)
	(fdiff (& 0) (& 2))
	(adjstk '1)
	(return)
	(lentry cllfmul 1)
	(ftimes (& 0) (& 2))
	(adjstk '1)
	(return)
	(lentry cllfdiv 1)
	(fquo (& 0) (& 2))
	(adjstk '1)
	(return)
cllret1
	(mov '1 (& 2))
	(adjstk '1)
	(return)
	(lentry cllfeqn 1)
	(cfbeq (& 0) (& 2) cllret1)
	(mov '0 (& 2))
	(adjstk '1)
	(return)
	(lentry cllfneqn 1)
	(cfbne (& 0) (& 2) cllret1)
	(mov '0 (& 2))
	(adjstk '1)
	(return)
	(lentry cllfgt 1)
	(cfbgt (& 0) (& 2) cllret1)
	(mov '0 (& 2))
	(adjstk '1)
	(return)
	(lentry cllfge 1)
	(cfbge (& 0) (& 2) cllret1)
	(mov '0 (& 2))
	(adjstk '1)
	(return)
	(lentry cllflt 1)
	(cfblt (& 0) (& 2) cllret1)
	(mov '0 (& 2))
	(adjstk '1)
	(return)
	(lentry cllfle 1)
	(cfble (& 0) (& 2) cllret1)
	(mov '0 (& 2))
	(adjstk '1)
	(return)
	(lentry floatp 2)
	(btfloat a1 floatp2)
	(movnil a1)
floatp2
	(return)
	(lentry fixp 2)
	(btfix a1 fixp2)
	(movnil a1)
fixp2
	(return)
	(lentry flplus 5)
	(mov '0 a1)
	(bra fplus2)
fplus1
	(pop a2)
	(btfloat a2 fplus5)
	(bffix a2 fpluser1)
	(mov a1 a3)
	(plus a2 a1 fplus4)
fplus2
	(sobgez a4 fplus1)
	(return)
fplus4
	(mov a3 a1)
	(float a1)
	(bra fplus7)
fplus5
	(float a1)
	(bra fplus8)
fplus6
	(pop a2)
fplus7
	(btfloat a2 fplus8)
	(bffix a2 fpluser1)
	(float a2)
fplus8
	(fplus a2 a1)
	(sobgez a4 fplus6)
fplus9
	(return)
fpluser1
	(mov a2 a1)
fpluser2
	(mov |.flplus| a2)
	(bra errnna)
	(lentry fldiff 5)
	(cnbeq a4 '0 rzero)
	(cnbne a4 '1 fdif1)
	(mov '0 a1)
	(xtopst a1)
	(push a1)
	(incr a4)
fdif1
	(eval ())
	(mov '0 a2)
	(bra fdif3)
fdif2
	(pop a1)
	(btfloat a1 fdif5)
	(bffix a1 fdiferr2)
	(mov a2 a3)
	(plus a1 a2 fdif4)
fdif3
	(sobgtz a4 fdif2)
	(pop a1)
	(btfloat a1 fdif10)
	(bffix a1 fdiferr2)
	(mov a1 a3)
	(diff a2 a1 fdif91)
	(return)
fdif4
	(mov a3 a2)
	(float a1)
fdif5
	(float a2)
	(bra fdif7)
fdif6
	(pop a1)
	(btfloat a1 fdif7)
	(bffix a1 fdiferr2)
	(float a1)
fdif7
	(fplus a1 a2)
fdif8
	(sobgtz a4 fdif6)
	(pop a1)
	(btfloat a1 fdif9)
	(bffix a1 fdiferr2)
	(float a1)
fdif9
	(fdiff a2 a1)
	(return)
fdif91
	(mov a3 a1)
	(float a1)
fdif10
	(float a2)
	(bra fdif9)
fdiferr1
	(mov a2 a1)
fdiferr2
	(mov |.fldiff| a2)
	(bra errnna)
	(lentry fltimes 5)
	(mov '1 a1)
	(bra ftime2)
ftime1
	(pop a2)
	(btfloat a2 ftime5)
	(bffix a2 ftimerr1)
	(mov a1 a3)
	(times a2 a1 ftime4)
ftime2
	(sobgez a4 ftime1)
	(return)
ftime4
	(mov a3 a1)
ftime5
	(float a1)
	(bra ftime7)
ftime6
	(pop a2)
ftime7
	(btfloat a2 ftime8)
	(bffix a2 ftimerr1)
	(float a2)
ftime8
	(ftimes a2 a1)
	(sobgez a4 ftime6)
	(return)
ftimerr1
	(mov a2 a1)
ftimerr2
	(mov |.fltimes| a2)
	(bra errnna)
	(lentry flquo 3)
	(mov |.flquo| a4)
	(btfloat a1 fquo2)
	(btfloat a2 fquo3)
	(bffix a1 banmix1)
	(bffix a2 banmix2)
	(cnbeq a2 '0 fquoovf)
	(mov a1 a3)
	(rem a2 a1)
	(cnbne a1 '0 fquo1)
	(mov a3 a1)
	(quo a2 a1 fquoovf)
	(return)
fquo1
	(mov a3 a1)
	(float a2)
	(bra fquo3)
fquo2
	(btfloat a2 fquo4)
	(bffix a2 banmix2)
	(float a2)
	(bra fquo4)
fquo3
	(bffix a1 banmix1)
	(float a1)
fquo4
	(fquo a2 a1)
	(return)
fquoovf
	(mov '0 a1)
	(mov |.flquo| a2)
	(bra err0dv)
	(lentry exadd 3)
	(mov |.excarry| a3)
	(eplus a1 a2 (cval a3) (cval a3) a1)
	(return)
	(lentry exincr 2)
	(mov |.excarry| a2)
	(eplus a1 '1 (cval a2) (cval a2) a1)
	(return)
	(lentry exinv 2)
	(negate a1)
	(decr a1)
exinvret
	(return)
	(lentry exmul 4)
	(mov |.excarry| a4)
	(etimes a1 a2 a3 (cval a4) (cval a4) a1)
	(return)
	(lentry exdiv 3)
	(mov |.excarry| a3)
	(edivide (cval a3) a1 a2 a1 (cval a3))
	(return)
	(lentry excomp 3)
	(ecomp a1 a2 excomp1 excomp2 excomp3)
excomp1
	(mov '-1 a1)
	(return)
excomp2
	(mov '0 a1)
	(return)
excomp3
	(mov '1 a1)
	(return)
	(end)
))
