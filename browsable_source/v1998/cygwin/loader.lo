(loader '((title |loader.lo|)))
(defvar #:sys-package:colon 'lap386)
(#:messages:put-message '#:loader:errmdu 'french '"Module de'ja` charge', rechargement du module" 'defmessage)
(#:messages:put-message '#:loader:errmdu 'english '"Module already in use, loading again" 'defmessage)
'#:loader:errmdu
(defvar #:lap386:31bitfloats (eq 0. 0.))
(putprop (symbol 'lap386 'cval) 0 '#:lap386:value)
(putprop (symbol 'lap386 'plist) 4 '#:lap386:value)
(putprop (symbol 'lap386 'fval) 8 '#:lap386:value)
(putprop (symbol 'lap386 'pkgc) 12 '#:lap386:value)
(putprop (symbol 'lap386 'oval) 16 '#:lap386:value)
(putprop (symbol 'lap386 'alink) 20 '#:lap386:value)
(putprop (symbol 'lap386 'ftype) 24 '#:lap386:value)
(putprop (symbol 'lap386 'ptype) 26 '#:lap386:value)
(putprop (symbol 'lap386 'pname) 28 '#:lap386:value)
(putprop (symbol 'lap386 'finsymb) 32 '#:lap386:value)
(putprop (symbol 'lap386 'cvalq) 0 '#:lap386:value)
(putprop (symbol 'lap386 'fvalq) 8 '#:lap386:value)
(putprop (symbol 'lap386 'val) 0 '#:lap386:value)
(putprop (symbol 'lap386 'typ) 4 '#:lap386:value)
(putprop (symbol 'lap386 'obj) 0 '#:lap386:value)
(putprop (symbol 'lap386 'size) 4 '#:lap386:value)
(putprop (symbol 'lap386 'hval) 8 '#:lap386:value)
(putprop (symbol 'lap386 'car) 0 '#:lap386:value)
(putprop (symbol 'lap386 'cdr) 4 '#:lap386:value)
(putprop (symbol 'lap386 'quote) 0 '#:lap386:value)
(putprop (symbol 'lap386 'null) 0 '#:lap386:value)
(defvar #:lap386:mem-access (if (boundp '#:lap386:mem-access) #:lap386:mem-access '(val typ car cdr cval pname plist fval alink pkgc oval obj size null)))
(defvar #:lap386:memq-access (if (boundp '#:lap386:memq-access) #:lap386:memq-access '(cvalq fvalq quote)))
(if (not (getdef '#:lap386:make-cirlist-vectors)) (progn (defun #:lap386:make-cirlist-vectors (list-size vector-size) (let ((l ())) (repeat list-size (newl l (makevector vector-size ()))) (apply (function cirlist) l)))))
(defvar #:lap386:vectors (if (boundp '#:lap386:vectors) #:lap386:vectors (#:lap386:make-cirlist-vectors 6 7)))
(#:lap386:defregister 'a1 0)
(#:lap386:defregister 'a2 3)
(#:lap386:defregister 'a3 1)
(#:lap386:defregister 'a4 2)
(#:lap386:defregister 'nil 6)
(#:lap386:defregister () 6)
(#:lap386:defregister 'bsymb 6)
(#:lap386:defregister 'bcons 7)
(#:lap386:defregister 'eax 0)
(#:lap386:defregister 'ebx 3)
(#:lap386:defregister 'ecx 1)
(#:lap386:defregister 'edx 2)
(#:lap386:defregister 'esp 4)
(#:lap386:defregister 'ebp 5)
(#:lap386:defregister 'esi 6)
(#:lap386:defregister 'edi 7)
(#:lap386:defregister 'rwork 5)
(loader'((entry #:lap386:register? subr1)
(push a1)
(jcall symbolp)
(btnil a1 101)
(mov (& 0) a2)
(mov 'lap386 a1)
(jcall symbol)
(mov '#:lap386:reg a2)
(adjstk '1)
(jmp getprop)
101
(adjstk '1)
(return)
))
(loader'((fentry dont-load subr1)
(entry dont-load subr1)
(mov '#:lap386:dont-load? a3)
(mov 't a2)
(jmp putprop)
))
((lambda (#:system:map:arg0) (while (and (consp #:system:map:arg0)) (dont-load (prog1 (car #:system:map:arg0) (setq #:system:map:arg0 (cdr #:system:map:arg0)))))) '(#:lap386:compiled? #:lap386:compiled-type? #:lap386:decr #:lap386:incr #:lap386:getvalue #:lap386:defvalue #:lap386:addlocallabel #:lap386:eti #:lap386:inc@eti #:lap386:@eti #:lap386:inceti #:lap386:dont-load?))
(defvar #:lap386:compiled-function-type '(subr0 subr1 subr2 subr3 nsubr fsubr msubr dmsubr))
(loader'((entry #:lap386:error subr2)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp terpri)
101
(eval ())
(push (@ 102))
(push '"** LOADER : ")
(push (& 2))
(push '" : ")
(push (& 5))
(mov '4 a4)
(jmp print)
102
(eval ())
(mov (& 1) a3)
(mov (& 0) a2)
(mov 'loader a1)
(adjstk '2)
(jmp error)
))
(loader'((entry #:lap386:prinhex subr1)
(push a1)
(btfix a1 102)
(mov a1 a2)
(mov '#:lap386:prinhex a1)
(call #:lap386:error)
102
(cnbge (& 0) '0 104)
(mov (& 0) a4)
(land '255 a4)
(mov a4 (& 0))
104
(cnbge (& 0) '16 106)
(push (@ 107))
(push '48)
(mov '1 a4)
(jmp princn)
107
(eval ())
106
(push (@ 108))
(mov '0 a4)
(jmp obase)
108
(eval ())
(push a1)
(push (@ 109))
(push dlink)
(push prot)
(stack dlink)
(push (@ 111))
(push '16)
(mov '1 a4)
(jmp obase)
111
(eval ())
(push (@ 112))
(push (& 5))
(mov '1 a4)
(jmp prin)
112
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 110) a3)
109
(push a3)
(push a2)
(push (@ 113))
(push (& 4))
(mov '1 a4)
(jmp obase)
113
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
110
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:lap386:prin4hex subr1)
(push a1)
(btfix a1 101)
(btcons a1 103)
(mov a1 a2)
(mov '#:lap386:prinhex a1)
(adjstk '1)
(bra #:lap386:error)
103
(mov (car a1) a1)
(call #:lap386:prin4hex)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:lap386:prin4hex)
101
(lshift '-8 a1)
(call #:lap386:prinhex)
(mov (& 0) a4)
(land '255 a4)
(mov a4 a1)
(adjstk '1)
(bra #:lap386:prinhex)
))
(loader'((entry #:lap386:immediat8? subr1)
(push a1)
(jcall fixp)
(btnil a1 101)
(mov '-128 a2)
(mov (& 0) a1)
(jcall ge)
(btnil a1 101)
(mov '127 a2)
(mov (& 0) a1)
(adjstk '1)
(jmp le)
101
(adjstk '1)
(return)
))
(loader'((entry #:lap386:1byte subr1)
(push a1)
(btnil a1 101)
(btnil (cvalq #:lap386:talkp) 104)
(cnble (cvalq #:lap386:nwl) (cvalq #:lap386:lmax) 106)
(mov '0 (cvalq #:lap386:nwl))
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(push (@ 108))
(push '30)
(mov '1 a4)
(jmp outpos)
108
(eval ())
(mov (cvalq #:lap386:pc-current) a1)
(call #:lap386:prin4hex)
(push (@ 109))
(push '"  ")
(mov '1 a4)
(jmp prin)
109
(eval ())
106
(mov (cvalq #:lap386:nwl) a4)
(plus '1 a4)
(mov a4 (cvalq #:lap386:nwl))
(push (@ 110))
(push '" ")
(mov '1 a4)
(jmp prin)
110
(eval ())
(mov (& 0) a1)
(call #:lap386:prinhex)
104
(push (cvalq #:lap386:pc-current))
(jcall #:system:ecode)
(mov a1 a2)
(pop a1)
(jcall gtadr)
(bfnil a1 111)
(push (@ 113))
(push (cvalq #:lap386:pc-current))
(push (& 2))
(mov '2 a4)
(jmp memory)
113
(eval ())
(mov '1 a2)
(mov (cvalq #:lap386:pc-current) a1)
(adjstk '1)
(jmp incradr)
111
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:lap386:16bits subr1)
(push a1)
(land '255 a1)
(call #:lap386:1byte)
(mov (& 0) a4)
(lshift '-8 a4)
(mov a4 a1)
(adjstk '1)
(bra #:lap386:1byte)
))
(loader'((entry #:lap386:32bits subr1)
(push a1)
(bfcons a1 101)
(mov (cdr a1) a1)
(call #:lap386:16bits)
(mov (& 0) a1)
(mov (car a1) a1)
(adjstk '1)
(bra #:lap386:16bits)
101
(call #:lap386:16bits)
(cnblt (& 0) '0 103)
(mov '0 a1)
(adjstk '1)
(bra #:lap386:16bits)
103
(mov '-1 a1)
(adjstk '1)
(bra #:lap386:16bits)
))
(loader'((entry #:lap386:dword subr2)
(bfnil a2 101)
(bra #:lap386:32bits)
101
(bffix a1 103)
(bra #:lap386:16bits)
103
(mov a1 a3)
(mov 'errbpa a2)
(mov 'size a1)
(jmp error)
))
(loader'((entry #:lap386:16bits1 subr2)
(push a2)
(push a1)
(push (@ 101))
(push a1)
(land '255 a2)
(push a2)
(mov '2 a4)
(jmp memory)
101
(eval ())
(push (@ 102))
(mov '1 a2)
(mov (& 1) a1)
(jcall incradr)
(push a1)
(mov (& 3) a4)
(lshift '-8 a4)
(push a4)
(mov '2 a4)
(jmp memory)
102
(eval ())
(mov '1 a2)
(mov (& 0) a1)
(adjstk '2)
(jmp incradr)
))
(loader'((entry #:lap386:32bits1 subr2)
(push a2)
(push a1)
(bfcons a2 101)
(mov (cdr a2) a2)
(call #:lap386:16bits1)
(mov (& 1) a2)
(mov (car a2) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:lap386:16bits1)
101
(call #:lap386:16bits1)
(cnblt (& 1) '0 103)
(mov '0 a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:lap386:16bits1)
103
(mov '-1 a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:lap386:16bits1)
))
(loader'((entry #:lap386:setref subr2)
(btnil a1 101)
(bfcons a1 103)
(cabne (car a1) '@ 103)
(mov (cdr a1) a1)
(mov 't a3)
(mov nil a2)
(mov (car a1) a1)
(bra #:lap386:offset)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:lap386:addlabel subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall copylist)
(mov a1 (& 1))
(mov (cvalq #:lap386:llabels-nr) a2)
(mov (& 0) a1)
(jcall assq)
(push a1)
(btnil a1 101)
(push a1)
(mov (& 3) a1)
(jcall copylist)
(mov (& 1) a2)
(mov (cdr a2) a2)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '3)
(return)
101
(push (@ 103))
(push (& 2))
(push (& 4))
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:lap386:llabels-nr) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:llabels-nr))
(adjstk '3)
(return)
))
(loader'((entry #:lap386:addentry subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall copylist)
(mov a1 (& 1))
(mov (cvalq #:lap386:entries-nr) a2)
(mov (& 0) a1)
(jcall assq)
(btnil a1 101)
(push a1)
(mov (cdr a1) a2)
(mov (& 2) a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '2)
(return)
101
(push (@ 103))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp list)
103
(eval ())
(mov (cvalq #:lap386:entries-nr) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:entries-nr))
(adjstk '2)
(return)
))
(loader'((entry #:lap386:clean-llitt subr0)
(push (cvalq #:lap386:saved-by-loader))
(push '-1)
(push nil)
101
(btnil (& 2) 102)
(mov (& 2) a4)
(bfsymb (car a4) 103)
(mov (car a4) a1)
(jcall boundp)
(bfnil a1 105)
(mov (& 2) a1)
(mov (car a1) a1)
(jcall typefn)
(btnil a1 103)
105
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (cvalq #:lap386:saved-by-loader) a2)
(mov (car a1) a1)
(jcall delq)
(mov a1 (cvalq #:lap386:saved-by-loader))
(bra 101)
103
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(bra 101)
102
(mov (cvalq #:lap386:saved-by-loader) a1)
(jcall length)
(mov a1 (& 2))
(cnble a1 '0 107)
(mov nil a2)
(jcall makevector)
(mov a1 (& 0))
108
(btnil (cvalq #:lap386:saved-by-loader) 109)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(mov (cvalq #:lap386:saved-by-loader) a3)
(mov (cdr a3) (cvalq #:lap386:saved-by-loader))
(hpmovx (car a3) (& 0) a4)
(bra 108)
109
(btnil (cvalq #:lap386:module) 110)
(mov '#:lap386:saved-by-loader a2)
(mov (cvalq #:lap386:module) a1)
(jcall get)
(btnil a1 113)
(mov (cvalq #:lap386:module) a3)
(mov '#:loader:errmdu a2)
(mov 'loader a1)
(jcall printerror)
113
(mov '#:lap386:saved-by-loader a3)
(mov (& 0) a2)
(mov (cvalq #:lap386:module) a1)
(jcall putprop)
(bra 107)
110
(mov (cvalq #:lap386:global-saved-by-loader) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:lap386:global-saved-by-loader))
107
(mov nil (cvalq #:lap386:module))
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:lap386:add-llitt subr1)
(push a1)
(jcall fixp)
(bfnil a1 101)
(mov (cvalq #:lap386:saved-by-loader) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 101)
(mov (cvalq #:lap386:saved-by-loader) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:lap386:saved-by-loader))
101
(adjstk '1)
(return)
))
(loader'((entry #:lap386:solve-aux subr1)
(push (cdr a1))
(btnil (car a1) 101)
(mov (cdr a1) a2)
(mov (cvalq #:lap386:pc-current) a1)
(jcall subadr)
(mov '4 a2)
(jcall subadr)
(mov a1 a2)
(bra 102)
101
(mov (cvalq #:lap386:pc-current) a2)
102
(pop a1)
(bra #:lap386:32bits1)
))
(loader'((entry #:lap386:foundlabel subr1)
(push a1)
(push a1)
(mov (cvalq #:lap386:pc-current) a1)
(jcall copylist)
(jcall ncons)
(mov a1 a2)
(pop a1)
(jcall cons)
(mov (cvalq #:lap386:llabels) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:llabels))
(mov (cvalq #:lap386:llabels-nr) a2)
(mov (& 0) a1)
(jcall cassq)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:lap386:solve-aux)
(bra 101)
102
(adjstk '1)
(mov (cvalq #:lap386:llabels-nr) a2)
(mov (& 0) a1)
(jcall assq)
(mov (cvalq #:lap386:llabels-nr) a2)
(jcall delete)
(mov a1 (cvalq #:lap386:llabels-nr))
(adjstk '1)
(return)
))
(loader'((entry #:lap386:immvalue? subr1)
(push a1)
(jcall consp)
(btnil a1 101)
(mov (& 0) a1)
(mov 'quote a2)
(mov (car a1) a1)
(jcall eq)
(btnil a1 101)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '1)
(jmp loc)
101
(adjstk '1)
(return)
))
(defvar *swap-arg* ())
(defvar *rwork-in-use* ())
(defvar *edi-pushed* ())
(loader'((entry #:lap386:get-range subr2)
(push a2)
(bffix a1 101)
(call #:lap386:immediat8?)
(btnil a1 101)
(mov '1 a1)
(adjstk '1)
(return)
101
(btnil (& 0) 103)
(mov '4 a1)
(adjstk '1)
(return)
103
(mov '2 a1)
(adjstk '1)
(return)
))
(loader'((entry #:lap386:set-modrm-for-reg-2 subr1)
(hpxmov a1 '0 a4)
(cabne a4 '0 101)
(hpxmov a1 '2 a4)
(lshift '-3 a4)
(plus '192 a4)
(hpmovx a4 a1 '2)
(mov a4 a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:lap386:setrwork subr1)
(mov 't (cvalq *rwork-in-use*))
(mov a1 a3)
(mov '40 a2)
(mov '139 a1)
(bra #:lap386:poke-op)
))
(loader'((entry #:lap386:resetrwork subr1)
(push a1)
(call #:lap386:set-modrm-for-reg-2)
(mov (& 0) a3)
(mov '40 a2)
(mov '137 a1)
(adjstk '1)
(bra #:lap386:poke-op)
))
(loader'((entry #:lap386:fill-vector nsubr)
(hpmovx (& 6) (& 7) '0)
(hpmovx (& 5) (& 7) '1)
(hpmovx (& 4) (& 7) '2)
(hpmovx (& 3) (& 7) '3)
(hpmovx (& 2) (& 7) '4)
(hpmovx (& 1) (& 7) '5)
(hpmovx (& 0) (& 7) '6)
(mov (& 7) a1)
(adjstk '8)
(return)
))
(loader'((entry #:lap386:fill-vector-imm-imm subr3)
(push a3)
(push a1)
(hpxmov a1 '1 a4)
(cabeq a4 '2 101)
(mov a2 a3)
(mov '"immediat hors limite" a2)
(mov '#:lap386:getparm a1)
(jcall error)
(bra 102)
101
(bffix a3 104)
(cabeq a3 '0 104)
(push a1)
(hpxmov a1 '5 a1)
(push a1)
(mov a3 a2)
(mov '0 a1)
(jcall cons)
(mov a1 a2)
(pop a1)
(jcall addadr)
(pop a4)
(hpmovx a1 a4 '5)
(hpxmov (& 0) '6 a4)
(btnil a4 104)
(hpxmov (& 0) '6 a1)
(mov (& 1) a2)
(jcall cons)
(hpmovx a1 (& 0) '6)
104
(hpmovx '1 (& 0) '0)
(hpmovx '7 (& 0) '1)
(hpmovx '5 (& 0) '2)
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:lap386:fill-vector-reg-reg nsubr)
(mov (& 4) a1)
(call #:lap386:register?)
(cabeq a1 '5 102)
(cabne (& 1) '0 102)
(mov nil (& 1))
102
(push (@ 103))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '1)
(btnil (& 3) 104)
(mov '5 a4)
(bra 105)
104
(mov '7 a4)
105
(push a4)
(btnil (& 5) 106)
(mov '68 a4)
(bra 107)
106
(mov '4 a4)
107
(push a4)
(mov (& 8) a1)
(call #:lap386:register?)
(lshift '3 a1)
(push a1)
(mov (& 10) a1)
(call #:lap386:register?)
(push a1)
(mov (& 9) a1)
(cabne a1 '1 109)
(mov '0 a4)
(bra 108)
109
(cabne a1 '2 110)
(mov '64 a4)
(bra 108)
110
(cabne a1 '4 111)
(mov '128 a4)
(bra 108)
111
(cabne a1 '8 112)
(mov '192 a4)
(bra 108)
112
(mov nil a4)
108
(pop a3)
(plus a4 a3)
(pop a4)
(plus a3 a4)
(push a4)
(btnil (& 7) 113)
(mov '1 a4)
(bra 114)
113
(mov '0 a4)
114
(push a4)
(push (& 8))
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
103
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:lap386:fill-vector-reg-dpt nsubr)
(mov (& 2) a1)
(call #:lap386:register?)
(cabeq a1 '5 102)
(cabne (& 1) '0 102)
(mov nil (& 1))
102
(hpmovx '1 (& 3) '0)
(btnil (& 0) 103)
(mov '5 a4)
(bra 104)
103
(mov '7 a4)
104
(hpmovx a4 (& 3) '1)
(mov (& 2) a1)
(call #:lap386:register?)
(hpmovx a1 (& 3) '2)
(mov (& 2) a1)
(call #:lap386:register?)
(cabne a1 '4 105)
(mov '36 a4)
(bra 106)
105
(mov nil a4)
106
(hpmovx a4 (& 3) '3)
(hpmovx (& 1) (& 3) '5)
(bfnil (& 1) 107)
(hpmovx '0 (& 3) '4)
(bra 108)
107
(hpxmov (& 3) '2 a3)
(push a3)
(mov nil a2)
(mov (& 2) a1)
(call #:lap386:get-range)
(cabne a1 '1 109)
(mov '64 a2)
(bra 110)
109
(mov '128 a2)
110
(pop a4)
(plus a2 a4)
(hpmovx a4 (& 3) '2)
(mov 't a2)
(mov (& 1) a1)
(call #:lap386:get-range)
(hpmovx a1 (& 3) '4)
108
(mov (& 3) a1)
(adjstk '4)
(return)
))
(loader'((entry #:lap386:fill-vector-mem-dpt nsubr)
(btcons (& 2) 101)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall cons)
(mov (& 1) a3)
(mov a1 a2)
(mov (& 3) a1)
(adjstk '4)
(bra #:lap386:fill-vector-imm-imm)
101
(mov (& 3) a1)
(call #:lap386:setrwork)
(hpmovx nil (& 3) '6)
(push (@ 103))
(push (& 4))
(push 'rwork)
(push (& 4))
(push (& 4))
(mov '4 a4)
(bra #:lap386:fill-vector-reg-dpt)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:lap386:fill-vector-imm-reg nsubr)
(push (@ 101))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '1)
(btnil (& 3) 102)
(mov '5 a4)
(bra 103)
102
(mov '7 a4)
103
(push a4)
(push '4)
(mov (& 8) a1)
(call #:lap386:register?)
(lshift '3 a1)
(push a1)
(mov (& 8) a1)
(cabne a1 '1 105)
(mov '5 a4)
(bra 104)
105
(cabne a1 '2 106)
(mov '69 a4)
(bra 104)
106
(cabne a1 '4 107)
(mov '133 a4)
(bra 104)
107
(cabne a1 '8 108)
(mov '197 a4)
(bra 104)
108
(mov nil a4)
104
(pop a3)
(plus a4 a3)
(push a3)
(push '4)
(hpxmov (& 11) '5 a1)
(mov (& 8) a2)
(bfnil a2 109)
(mov '0 a2)
109
(jcall addadr)
(push a1)
(hpxmov (& 12) '6 a4)
(push a4)
(mov '8 a4)
(bra #:lap386:fill-vector)
101
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:lap386:mul32 subr2)
(hpxmov a1 '5 a4)
(push a4)
(mov a2 a1)
(cabne a1 '1 102)
(mov a4 a1)
(adjstk '1)
(return)
102
(cabne a1 '4 103)
(mov a4 a2)
(mov a4 a1)
(jcall addadr)
(mov a1 (& 0))
(mov a1 a2)
(adjstk '1)
(jmp addadr)
103
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:lap386:poke-op subr3)
(push a3)
(push a2)
(push a1)
(bffix a1 101)
(call #:lap386:1byte)
(bra 102)
101
(mov (car a1) a1)
(call #:lap386:1byte)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:lap386:1byte)
102
(btnil (& 1) 104)
(hpxmov (& 2) '2 a4)
(mov (& 1) a3)
(plus a4 a3)
(mov a3 a1)
(call #:lap386:1byte)
104
(hpxmov (& 2) '3 a4)
(btnil a4 106)
(hpxmov (& 2) '3 a1)
(call #:lap386:1byte)
106
(hpxmov (& 2) '4 a1)
(cabeq a1 '() 109)
(cabne a1 '0 108)
109
(mov 't a1)
(adjstk '3)
(return)
108
(cabne a1 '1 110)
(hpxmov (& 2) '5 a1)
(adjstk '3)
(bra #:lap386:1byte)
110
(cabne a1 '4 111)
(hpxmov (& 2) '6 a1)
(mov (cvalq #:lap386:pc-current) a2)
(call #:lap386:setref)
(hpxmov (& 2) '5 a1)
(adjstk '3)
(bra #:lap386:32bits)
111
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:lap386:change-stack-offset subr2)
(push a1)
(hpxmov a1 '5 a4)
(plus '4 a4)
(push a4)
(hpmovx a4 a1 '5)
(push a1)
(mov 't a2)
(mov a4 a1)
(call #:lap386:get-range)
(pop a4)
(hpmovx a1 a4 '4)
(mov nil a2)
(mov (& 0) a1)
(call #:lap386:get-range)
(lshift '6 a1)
(plus '4 a1)
(hpmovx a1 (& 1) '2)
(adjstk '2)
(return)
))
(defvar *flaga2b* ())
(loader'((entry #:lap386:getparm subr1)
(push a1)
(mov (cvalq #:lap386:special-list) a2)
(jcall memq)
(bfnil a1 101)
(mov nil (cvalq *flaga2b*))
(bra 102)
101
(mov 't (cvalq *flaga2b*))
(mov (& 0) a2)
(mov 'llcp a1)
(jcall symbol)
(mov (cval a1) a1)
(jcall kwote)
(mov a1 (& 0))
102
(btcons (& 0) 103)
(bfvect (& 0) 105)
(hpxmov (& 0) '0 a1)
(call #:lap386:getparm)
(push a1)
(hpxmov (& 1) '1 a1)
(call #:lap386:getparm)
(hpxmov (& 1) '2 a4)
(hpxmov (& 1) '3 a3)
(hpxmov (& 1) '4 a2)
(push a2)
(push a3)
(push a4)
(push a1)
(push (@ 108))
(hpxmov (& 5) '0 a4)
(push a4)
(push '3)
(mov '2 a4)
(jmp times)
108
(eval ())
(hpxmov (& 0) '0 a4)
(plus a4 a1)
(cabne a1 '0 109)
(push (@ 110))
(hpxmov (& 6) '0 a4)
(push a4)
(hpxmov (& 7) '1 a4)
(push a4)
(push (& 4))
(push (& 6))
(push (& 8))
(mov '5 a4)
(bra #:lap386:fill-vector-reg-reg)
110
(eval ())
(adjstk '6)
(return)
109
(cabne a1 '1 111)
(mov (& 0) a1)
(call #:lap386:setrwork)
(push (@ 112))
(hpxmov (& 6) '0 a4)
(push a4)
(push 'rwork)
(push (& 4))
(push (& 6))
(push (& 8))
(mov '5 a4)
(bra #:lap386:fill-vector-reg-reg)
112
(eval ())
(adjstk '6)
(return)
111
(cabne a1 '2 113)
(hpxmov (& 0) '5 a4)
(btfix a4 115)
(mov (& 5) a3)
(mov '"index hors limite" a2)
(mov '#:lap386:getparm a1)
(jcall error)
115
(push (@ 116))
(push (& 1))
(hpxmov (& 7) '0 a4)
(push a4)
(mov (& 4) a2)
(mov (& 3) a1)
(call #:lap386:mul32)
(mov (& 5) a2)
(bfnil a2 117)
(mov '0 a2)
117
(jcall addadr)
(push a1)
(push (& 7))
(mov '4 a4)
(bra #:lap386:fill-vector-reg-dpt)
116
(eval ())
(adjstk '6)
(return)
113
(cabne a1 '3 118)
(mov (& 4) a1)
(call #:lap386:setrwork)
(push (@ 119))
(push 'rwork)
(hpxmov (& 7) '1 a4)
(push a4)
(push (& 4))
(push (& 6))
(push (& 8))
(mov '5 a4)
(bra #:lap386:fill-vector-reg-reg)
119
(eval ())
(adjstk '6)
(return)
118
(cabne a1 '4 120)
(mov (& 4) a1)
(call #:lap386:setrwork)
(mov 't (cvalq *edi-pushed*))
(mov '87 a1)
(call #:lap386:1byte)
(hpxmov (& 5) '1 a4)
(cabne (car a4) '& 122)
(mov '4 a2)
(mov (& 0) a1)
(call #:lap386:change-stack-offset)
122
(mov (& 0) a3)
(mov '56 a2)
(mov '139 a1)
(call #:lap386:poke-op)
(push (@ 123))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '1)
(btnil (& 6) 124)
(mov '5 a4)
(bra 125)
124
(mov '7 a4)
125
(push a4)
(push '68)
(mov (& 6) a1)
(cabne a1 '1 127)
(mov '0 a3)
(bra 126)
127
(cabne a1 '2 128)
(mov '64 a3)
(bra 126)
128
(cabne a1 '4 129)
(mov '128 a3)
(bra 126)
129
(cabne a1 '8 130)
(mov '192 a3)
(bra 126)
130
(mov nil a3)
126
(mov '61 a4)
(plus a3 a4)
(push a4)
(push '1)
(mov (& 9) a4)
(bfnil a4 131)
(mov '0 a4)
131
(push a4)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
123
(eval ())
(adjstk '6)
(return)
120
(cabne a1 '5 132)
(hpxmov (& 0) '5 a4)
(btfix a4 134)
(mov (& 5) a3)
(mov '"index hors limite" a2)
(mov '#:lap386:getparm a1)
(jcall error)
134
(push (@ 135))
(push (& 5))
(hpxmov (& 7) '0 a4)
(push a4)
(mov (& 4) a2)
(mov (& 3) a1)
(call #:lap386:mul32)
(mov (& 5) a2)
(bfnil a2 136)
(mov '0 a2)
136
(jcall addadr)
(push a1)
(push (& 7))
(mov '4 a4)
(bra #:lap386:fill-vector-mem-dpt)
135
(eval ())
(adjstk '6)
(return)
132
(cabne a1 '6 137)
(push (@ 138))
(push (& 5))
(hpxmov (& 7) '1 a4)
(push a4)
(push (& 4))
(push (& 6))
(push (& 8))
(mov '5 a4)
(bra #:lap386:fill-vector-imm-reg)
138
(eval ())
(adjstk '6)
(return)
137
(cabne a1 '7 139)
(mov (& 0) a1)
(call #:lap386:setrwork)
(push (@ 140))
(push (& 5))
(push 'rwork)
(push (& 4))
(push (& 6))
(push (& 8))
(mov '5 a4)
(bra #:lap386:fill-vector-imm-reg)
140
(eval ())
(adjstk '6)
(return)
139
(mov nil a1)
(adjstk '6)
(return)
105
(mov (& 0) a1)
(call #:lap386:register?)
(btnil a1 141)
(push (@ 143))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '0)
(push '0)
(mov (& 4) a1)
(call #:lap386:register?)
(lshift '3 a1)
(push a1)
(push nil)
(push '0)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
143
(eval ())
(adjstk '1)
(return)
141
(mov (& 0) a2)
(mov 'lap386 a1)
(jcall symbol)
(jcall boundp)
(btnil a1 144)
(push (@ 146))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '1)
(push '7)
(push '5)
(push nil)
(push '4)
(mov (& 7) a2)
(mov 'lap386 a1)
(jcall symbol)
(push (cval a1))
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
146
(eval ())
(adjstk '1)
(return)
144
(mov 't a1)
(adjstk '1)
(return)
103
(mov (& 0) a4)
(cabne (car a4) 'quote 147)
(mov (cdr a4) a3)
(bffix (car a3) 149)
(mov (cdr a4) a3)
(mov (car a3) a3)
(bra 150)
149
(mov 't a3)
150
(push a3)
(mov (cdr a4) a2)
(bfsymb (car a2) 153)
(mov (cdr a4) a1)
(bfvar (car a1) 152)
153
(mov (cdr a4) a1)
(mov (car a1) a1)
(call #:lap386:add-llitt)
152
(push (@ 154))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '2)
(mov nil a2)
(mov (& 3) a1)
(call #:lap386:get-range)
(push a1)
(push nil)
(push nil)
(mov 't a2)
(mov (& 6) a1)
(call #:lap386:get-range)
(push a1)
(btnil (cvalq *flaga2b*) 155)
(push (@ 157))
(push (& 9))
(mov '1 a4)
(jmp eval)
157
(eval ())
(mov a1 a4)
(bra 156)
155
(mov (& 8) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall loc)
(mov a1 a4)
156
(push a4)
(btnil (& 8) 158)
(mov (& 9) a4)
(mov (cdr a4) a4)
(bfvar (car a4) 158)
(mov (& 9) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(bra 159)
158
(mov nil a4)
159
(push a4)
(mov '8 a4)
(bra #:lap386:fill-vector)
154
(eval ())
(adjstk '2)
(return)
147
(cabne (car a4) '& 160)
(mov (cdr a4) a3)
(mov (car a3) a3)
(lshift '2 a3)
(push a3)
(push (@ 162))
(mov (cvalq #:lap386:vectors) a2)
(mov (cdr a2) (cvalq #:lap386:vectors))
(push (car a2))
(push '1)
(push '7)
(cabne a3 '0 163)
(mov '0 a2)
(bra 164)
163
(mov nil a2)
(mov a3 a1)
(call #:lap386:get-range)
(lshift '6 a1)
(mov a1 a2)
164
(plus '4 a2)
(push a2)
(push '36)
(cabne (& 6) '0 165)
(mov '0 a2)
(bra 166)
165
(mov 't a2)
(mov (& 6) a1)
(call #:lap386:get-range)
(mov a1 a2)
166
(push a2)
(push (& 7))
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
162
(eval ())
(adjstk '2)
(return)
160
(mov (cvalq #:lap386:mem-access) a2)
(mov (car a4) a1)
(jcall memq)
(btnil a1 167)
(mov (& 0) a2)
(mov (car a2) a2)
(mov 'lap386 a1)
(jcall symbol)
(mov '#:lap386:value a2)
(jcall getprop)
(push a1)
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:lap386:getparm)
(push a1)
(hpxmov a1 '0 a1)
(cabne a1 '0 170)
(push (@ 171))
(push (& 1))
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (car a4))
(push (& 4))
(push nil)
(mov '4 a4)
(bra #:lap386:fill-vector-reg-dpt)
171
(eval ())
(adjstk '3)
(return)
170
(cabne a1 '1 172)
(push (@ 173))
(push (& 1))
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (car a4))
(push (& 4))
(push nil)
(mov '4 a4)
(bra #:lap386:fill-vector-mem-dpt)
173
(eval ())
(adjstk '3)
(return)
172
(cabne a1 '2 174)
(mov (& 2) a2)
(mov (cdr a2) a2)
(mov (& 1) a3)
(mov (car a2) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:lap386:fill-vector-imm-imm)
174
(mov nil a1)
(adjstk '3)
(return)
167
(mov (& 0) a1)
(mov (cvalq #:lap386:memq-access) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 175)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:lap386:add-llitt)
(push (@ 177))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '1)
(push '7)
(push '5)
(push nil)
(push '4)
(mov (& 7) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall loc)
(push a1)
(mov (& 8) a2)
(mov (car a2) a2)
(mov 'lap386 a1)
(jcall symbol)
(mov '#:lap386:value a2)
(jcall getprop)
(mov a1 a2)
(pop a1)
(jcall addadr)
(push a1)
(mov (& 8) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '8 a4)
(bra #:lap386:fill-vector)
177
(eval ())
(adjstk '1)
(return)
175
(mov (& 0) a4)
(cabne (car a4) '@ 178)
(mov (cdr a4) a1)
(mov nil a3)
(mov nil a2)
(mov (car a1) a1)
(call #:lap386:offset)
(push (@ 180))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '2)
(push '3)
(push nil)
(push nil)
(push '4)
(push a1)
(mov '(-1 . 0) a2)
(jcall equal)
(btnil a1 181)
(mov (& 8) a4)
(bra 182)
181
(mov nil a4)
182
(push a4)
(mov '8 a4)
(bra #:lap386:fill-vector)
180
(eval ())
(adjstk '1)
(return)
178
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:lap386:op1arg nsubr)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:getparm)
(push a1)
(btnil (& 1) 102)
(mov '102 a1)
(call #:lap386:1byte)
102
(hpxmov (& 0) '0 a1)
(cabne a1 '0 104)
(btnil (& 3) 105)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(mov (& 3) a4)
(plus a1 a4)
(mov a4 a1)
(adjstk '6)
(bra #:lap386:1byte)
105
(mov (& 5) a1)
(call #:lap386:1byte)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(plus '192 a1)
(mov (& 4) a4)
(plus a1 a4)
(mov a4 a1)
(adjstk '6)
(bra #:lap386:1byte)
104
(cabne a1 '1 107)
(mov (& 0) a3)
(mov (& 4) a2)
(mov (& 5) a1)
(adjstk '6)
(bra #:lap386:poke-op)
107
(cabne a1 '2 108)
(bfnil (& 1) 110)
(bfcons (cvalq #:lap386:arg1) 110)
(mov (cvalq #:lap386:arg1) a4)
(cabne (car a4) 'quote 110)
(mov (cdr a4) a3)
(bffix (car a3) 110)
(mov (cdr a4) a2)
(cnbge (car a2) '0 110)
(hpmovx '4 (& 0) '4)
(mov (cvalq #:lap386:arg1) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov '0 a1)
(jcall cons)
(hpmovx a1 (& 0) '5)
110
(hpxmov (& 0) '4 a1)
(cabne a1 '1 112)
(mov '106 a1)
(call #:lap386:1byte)
(hpxmov (& 0) '5 a1)
(adjstk '6)
(bra #:lap386:1byte)
112
(cabne a1 '4 113)
(mov '104 a1)
(call #:lap386:1byte)
(hpxmov (& 0) '6 a1)
(mov (cvalq #:lap386:pc-current) a2)
(call #:lap386:setref)
(hpxmov (& 0) '5 a1)
(mov (& 1) a2)
(adjstk '6)
(bra #:lap386:dword)
113
(mov nil a1)
(adjstk '6)
(return)
108
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((entry #:lap386:op2arg subr3)
(push a3)
(push a2)
(push a1)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:getparm)
(push a1)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:getparm)
(push '0)
(push a1)
(hpxmov (& 2) '0 a4)
(push a4)
(push (@ 101))
(hpxmov a1 '0 a3)
(push a3)
(push '3)
(mov '2 a4)
(jmp times)
101
(eval ())
(pop a4)
(plus a1 a4)
(mov a4 (& 1))
(cnbgt a4 '5 102)
(mov nil (cvalq *swap-arg*))
(bra 103)
102
(mov 't (cvalq *swap-arg*))
(push (cvalq #:lap386:arg2))
(mov (cvalq #:lap386:arg1) (cvalq #:lap386:arg2))
(pop a3)
(mov a3 (cvalq #:lap386:arg1))
(push (& 0))
(mov (& 3) (& 1))
(pop a2)
(mov a2 (& 2))
(hpxmov a2 '0 a1)
(push a1)
(push (@ 104))
(hpxmov (& 2) '0 a4)
(push a4)
(push '3)
(mov '2 a4)
(jmp times)
104
(eval ())
(pop a4)
(plus a1 a4)
(mov a4 (& 1))
103
(cabne (& 4) '56 106)
(btnil (cvalq *swap-arg*) 107)
(mov nil a3)
(bra 108)
107
(mov 't a3)
108
(mov a3 (cvalq *swap-arg*))
106
(cabne (& 3) '141 109)
(hpxmov (& 2) '0 a3)
(cabne a3 '1 113)
(hpxmov (& 0) '0 a3)
(cabeq a3 '0 111)
113
(push (@ 114))
(push (cvalq #:lap386:arg1))
(push (cvalq #:lap386:arg2))
(mov '2 a4)
(jmp list)
114
(eval ())
(mov a1 a3)
(mov 'errbpa a2)
(mov 'lea a1)
(adjstk '6)
(jmp error)
111
(hpxmov (& 0) '2 a2)
(mov (& 2) a3)
(mov (& 3) a1)
(adjstk '6)
(bra #:lap386:poke-op)
109
(cabne (& 4) '56 116)
(bfnil (& 5) 116)
(hpxmov (& 2) '5 a3)
(bffix a3 116)
(hpxmov (& 2) '5 a3)
(cnbge a3 '0 116)
(hpmovx '4 (& 2) '4)
(hpxmov (& 2) '5 a2)
(mov '0 a1)
(jcall cons)
(hpmovx a1 (& 2) '5)
116
(btnil (& 5) 118)
(hpxmov (& 2) '0 a4)
(cabne a4 '1 119)
(hpxmov (& 0) '0 a4)
(cabeq a4 '1 118)
119
(mov '102 a1)
(call #:lap386:1byte)
118
(mov (& 1) a1)
(cabne a1 '0 121)
(mov (& 3) a1)
(call #:lap386:1byte)
(hpxmov (& 2) '2 a1)
(push a1)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(plus '192 a1)
(pop a4)
(plus a1 a4)
(mov a4 a1)
(adjstk '6)
(bra #:lap386:1byte)
121
(cabne a1 '1 122)
(mov (& 3) a4)
(plus '2 a4)
(hpxmov (& 0) '2 a2)
(mov (& 2) a3)
(mov a4 a1)
(adjstk '6)
(bra #:lap386:poke-op)
122
(cabne a1 '2 123)
(hpxmov (& 2) '4 a1)
(cabne a1 '1 125)
(mov '131 a1)
(call #:lap386:1byte)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(plus '192 a1)
(mov (& 4) a4)
(plus a1 a4)
(mov a4 a1)
(call #:lap386:1byte)
(hpxmov (& 2) '5 a1)
(adjstk '6)
(bra #:lap386:1byte)
125
(cabne a1 '4 126)
(mov '129 a1)
(call #:lap386:1byte)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(plus '192 a1)
(mov (& 4) a4)
(plus a1 a4)
(mov a4 a1)
(call #:lap386:1byte)
(hpxmov (& 2) '6 a1)
(mov (cvalq #:lap386:pc-current) a2)
(call #:lap386:setref)
(hpxmov (& 2) '5 a1)
(mov (& 5) a2)
(adjstk '6)
(bra #:lap386:dword)
126
(mov nil a1)
(adjstk '6)
(return)
123
(cabne a1 '3 127)
(hpxmov (& 2) '2 a2)
(mov (& 0) a3)
(mov (& 3) a1)
(adjstk '6)
(bra #:lap386:poke-op)
127
(cabne a1 '4 128)
(mov (& 2) a1)
(call #:lap386:setrwork)
(btnil (& 5) 130)
(mov '102 a1)
(call #:lap386:1byte)
130
(mov (& 0) a3)
(mov '40 a2)
(mov (& 3) a1)
(adjstk '6)
(bra #:lap386:poke-op)
128
(cabne a1 '5 131)
(hpxmov (& 2) '4 a1)
(cabne a1 '1 133)
(mov (& 0) a3)
(mov (& 4) a2)
(mov '131 a1)
(call #:lap386:poke-op)
(hpxmov (& 2) '5 a1)
(adjstk '6)
(bra #:lap386:1byte)
133
(cabne a1 '4 134)
(mov (& 0) a3)
(mov (& 4) a2)
(mov '129 a1)
(call #:lap386:poke-op)
(hpxmov (& 2) '6 a1)
(mov (cvalq #:lap386:pc-current) a2)
(call #:lap386:setref)
(hpxmov (& 2) '5 a1)
(mov (& 5) a2)
(adjstk '6)
(bra #:lap386:dword)
134
(mov nil a1)
(adjstk '6)
(return)
131
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((entry #:lap386:mov subr3)
(push a3)
(push a2)
(push a1)
(mov nil (cvalq *rwork-in-use*))
(mov nil (cvalq *edi-pushed*))
(mov a2 a1)
(call #:lap386:getparm)
(mov nil (cvalq *rwork-in-use*))
(push a1)
(mov (& 1) a1)
(call #:lap386:getparm)
(push a1)
(hpxmov (& 1) '0 a4)
(cabne a4 '2 102)
(bfnil (& 4) 102)
(hpxmov (& 1) '5 a4)
(bffix a4 102)
(hpxmov (& 1) '5 a2)
(mov '0 a1)
(jcall cons)
(hpmovx a1 (& 1) '5)
102
(hpxmov (& 1) '0 a1)
(push a1)
(push (@ 104))
(hpxmov (& 2) '0 a4)
(push a4)
(push '3)
(mov '2 a4)
(jmp times)
104
(eval ())
(pop a4)
(plus a1 a4)
(mov a4 a1)
(cabne a1 '0 105)
(mov '137 a1)
(call #:lap386:1byte)
(hpxmov (& 1) '2 a1)
(push a1)
(mov (& 3) a1)
(call #:lap386:register?)
(plus '192 a1)
(pop a4)
(plus a1 a4)
(mov a4 a1)
(call #:lap386:1byte)
(bra 103)
105
(cabne a1 '1 106)
(btnil (& 4) 107)
(mov '(15 182) a1)
(bra 108)
107
(mov '139 a1)
108
(hpxmov (& 0) '2 a2)
(mov (& 1) a3)
(call #:lap386:poke-op)
(bra 103)
106
(cabne a1 '2 109)
(mov (& 2) a1)
(call #:lap386:register?)
(mov '184 a4)
(plus a1 a4)
(mov a4 a1)
(call #:lap386:1byte)
(hpxmov (& 1) '6 a1)
(mov (cvalq #:lap386:pc-current) a2)
(call #:lap386:setref)
(hpxmov (& 1) '5 a1)
(call #:lap386:32bits)
(bra 103)
109
(cabne a1 '3 110)
(btnil (& 4) 111)
(mov '136 a1)
(bra 112)
111
(mov '137 a1)
112
(hpxmov (& 1) '2 a2)
(mov (& 0) a3)
(call #:lap386:poke-op)
(bra 103)
110
(cabne a1 '4 113)
(btnil (cvalq *edi-pushed*) 115)
(bfcons (& 2) 117)
(mov (& 2) a4)
(cabne (car a4) '& 117)
(mov '4 a2)
(mov (& 0) a1)
(call #:lap386:change-stack-offset)
117
(bfcons (& 3) 115)
(mov (& 3) a4)
(cabne (car a4) '& 115)
(mov '4 a2)
(mov (& 1) a1)
(call #:lap386:change-stack-offset)
115
(bfnil (cvalq *rwork-in-use*) 120)
(btnil (& 4) 122)
(mov '(15 182) a1)
(bra 123)
122
(mov '139 a1)
123
(mov (& 1) a3)
(mov '40 a2)
(call #:lap386:poke-op)
(mov (& 0) a3)
(mov '40 a2)
(mov '137 a1)
(call #:lap386:poke-op)
(bra 103)
120
(mov (& 1) a3)
(mov '48 a2)
(mov '255 a1)
(call #:lap386:poke-op)
(bfnil (& 4) 124)
(mov (& 0) a3)
(mov '0 a2)
(mov '143 a1)
(call #:lap386:poke-op)
(bra 103)
124
(mov (cvalq #:lap386:arg3) a1)
(call #:lap386:register?)
(cabeq a1 '0 126)
(mov '0 a4)
(bra 127)
126
(mov '8 a4)
127
(push a4)
(mov '135 a1)
(call #:lap386:1byte)
(mov '4 a4)
(plus (& 0) a4)
(mov a4 a1)
(call #:lap386:1byte)
(mov '36 a1)
(call #:lap386:1byte)
(mov (& 1) a3)
(mov (& 0) a2)
(mov '136 a1)
(call #:lap386:poke-op)
(mov (& 0) a4)
(lshift '-3 a4)
(mov '88 a3)
(plus a4 a3)
(mov a3 a1)
(call #:lap386:1byte)
(adjstk '1)
(bra 103)
113
(cabne a1 '5 103)
(btnil (& 4) 129)
(mov (& 0) a3)
(mov '0 a2)
(mov '198 a1)
(call #:lap386:poke-op)
(hpxmov (& 1) '5 a1)
(call #:lap386:1byte)
(bra 103)
129
(mov (& 0) a3)
(mov '0 a2)
(mov '199 a1)
(call #:lap386:poke-op)
(hpxmov (& 1) '6 a1)
(mov (cvalq #:lap386:pc-current) a2)
(call #:lap386:setref)
(hpxmov (& 1) '5 a1)
(call #:lap386:32bits)
103
(btnil (cvalq *edi-pushed*) 131)
(mov '95 a1)
(adjstk '5)
(bra #:lap386:1byte)
131
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:lap386:divm subr1)
(push a1)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(mov a1 a4)
(cabeq a4 '0 103)
(cabne a4 '2 101)
103
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(mov '2 a4)
(diff a1 a4)
(push a4)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:getparm)
(push a1)
(hpxmov a1 '0 a4)
(cabeq a4 '2 104)
(mov '139 a1)
(call #:lap386:1byte)
(mov '232 a4)
(plus (& 1) a4)
(mov a4 a1)
(call #:lap386:1byte)
(bra 105)
104
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(mov '2 a4)
(diff a1 a4)
(mov '80 a3)
(plus a4 a3)
(mov a3 a1)
(call #:lap386:1byte)
(mov '189 a1)
(call #:lap386:1byte)
(hpxmov (& 0) '5 a1)
(call #:lap386:32bits)
(mov 'rwork (cvalq #:lap386:arg1))
105
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(cabeq a1 '0 107)
(mov '139 a1)
(call #:lap386:1byte)
(mov '194 a1)
(call #:lap386:1byte)
107
(mov '102 a1)
(call #:lap386:1byte)
(mov '153 a1)
(call #:lap386:1byte)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(cabne a1 '2 109)
(mov 'rwork (cvalq #:lap386:arg1))
109
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(cabne a1 '0 111)
(mov 'rwork (cvalq #:lap386:arg1))
111
(mov '102 a1)
(call #:lap386:1byte)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(btnil a1 112)
(cabne (cvalq #:lap386:arg1) 'rwork 114)
(push (@ 116))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '0)
(push '0)
(push '197)
(push nil)
(push '0)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
116
(eval ())
(mov a1 a3)
(bra 113)
114
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(mov '192 a4)
(plus a1 a4)
(hpmovx a4 (& 0) '2)
(mov (& 0) a3)
(bra 113)
112
(mov (& 0) a3)
113
(mov '56 a2)
(mov '247 a1)
(call #:lap386:poke-op)
(push (@ 119))
(push (& 3))
(push '2)
(mov '2 a4)
(jmp =)
119
(eval ())
(btnil a1 118)
(push '(129 226 255 255 0 0))
120
(bfcons (& 0) 121)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:lap386:1byte)
(bra 120)
121
(adjstk '1)
118
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(cabeq a1 (& 2) 123)
(mov '139 a1)
(call #:lap386:1byte)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(lshift '3 a1)
(mov '192 a4)
(plus (& 2) a4)
(plus a4 a1)
(call #:lap386:1byte)
123
(hpxmov (& 0) '0 a4)
(cabne a4 '2 124)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(mov '2 a4)
(diff a1 a4)
(mov '88 a3)
(plus a4 a3)
(mov a3 a1)
(adjstk '3)
(bra #:lap386:1byte)
124
(mov '137 a1)
(call #:lap386:1byte)
(mov '232 a4)
(plus (& 1) a4)
(mov a4 a1)
(adjstk '3)
(bra #:lap386:1byte)
101
(mov nil a3)
(mov (cvalq #:lap386:arg1) a2)
(mov 'rwork a1)
(call #:lap386:mov)
(bfcons (cvalq #:lap386:arg2) 127)
(mov (cvalq #:lap386:arg2) a4)
(cabne (car a4) '& 127)
(push (@ 128))
(push '&)
(mov (cvalq #:lap386:arg2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(plus '2 a4)
(push a4)
(mov '2 a4)
(jmp list)
128
(eval ())
(mov a1 (cvalq #:lap386:arg2))
127
(mov '80 a1)
(call #:lap386:1byte)
(mov '82 a1)
(call #:lap386:1byte)
(push '(184 0 0 0 0))
129
(bfcons (& 0) 130)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:lap386:1byte)
(bra 129)
130
(adjstk '1)
(push '(186 0 0 0 0))
131
(bfcons (& 0) 132)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:lap386:1byte)
(bra 131)
132
(adjstk '1)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:getparm)
(push a1)
(call #:lap386:set-modrm-for-reg-2)
(mov (& 0) a3)
(mov '0 a2)
(mov '139 a1)
(call #:lap386:poke-op)
(mov '102 a1)
(call #:lap386:1byte)
(mov '153 a1)
(call #:lap386:1byte)
(mov '102 a1)
(call #:lap386:1byte)
(mov '247 a1)
(call #:lap386:1byte)
(mov '253 a1)
(call #:lap386:1byte)
(mov (& 1) a4)
(lshift '3 a4)
(mov (& 0) a3)
(mov a4 a2)
(mov '137 a1)
(call #:lap386:poke-op)
(mov '90 a1)
(call #:lap386:1byte)
(mov '88 a1)
(adjstk '2)
(bra #:lap386:1byte)
))
(if (not (boundp '#:lap386:stat?)) (progn (defvar #:lap386:stat? ())))
(if (not (featurep 'loader)) (progn (add-feature 'loader)))
(defvar #:lap386:verbose? (if (boundp '#:lap386:verbose?) #:lap386:verbose? ()))
(if (not (boundp '#:lap386:macro?)) (progn (defvar #:lap386:macro? ())))
(dont-load '#:lap386:ins0)
(loader'((fentry loaderend subr0)
(entry loaderend subr0)
(push (@ 101))
(push 'lap386)
(mov '1 a4)
(jmp oblist)
101
(eval ())
(push a1)
102
(bfcons (& 0) 103)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(jcall remob)
(bra 102)
103
(mov nil a1)
(adjstk '1)
(return)
))
(defvar #:lap386:lmax (if (boundp '#:lap386:lmax) #:lap386:lmax 11))
(defvar #:lap386:mac-lab (if (boundp '#:lap386:mac-lab) #:lap386:mac-lab 0))
(defvar #:lap386:@-lab (if (boundp '#:lap386:@-lab) #:lap386:@-lab 0))
(defvar #:lap386:warning-ifct-list (if (boundp '#:lap386:warning-ifct-list) #:lap386:warning-ifct-list ()))
(defvar #:lap386:entry-list (if (boundp '#:lap386:entry-list) #:lap386:entry-list ()))
(defvar #:lap386:entries-nr (if (boundp '#:lap386:entries-nr) #:lap386:entries-nr ()))
(defvar #:lap386:dont-load-i (if (boundp '#:lap386:dont-load-i) #:lap386:dont-load-i ()))
(defvar #:lap386:no-error-flag (if (boundp '#:lap386:no-error-flag) #:lap386:no-error-flag t))
(defvar #:lap386:special-list (if (boundp '#:lap386:special-list) #:lap386:special-list '(cbindn tag lock prot)))
(if (not (boundp '#:lap386:alloc-float)) (progn (setq #:lap386:alloc-float (getglobal '_alloc_float)) (when (eq #:lap386:alloc-float 0) (setq #:lap386:alloc-float ()))))
((lambda (#:system:map:arg0) (while (and (consp #:system:map:arg0)) ((lambda (x) ((lambda (sym val) (if (boundp sym) (eval (list 'defvar sym (list 'quote (symeval sym)))) (if (eq (setq val (getglobal x)) 0) (error 'getglobal 'errbpa x) (if (numberp val) (setq val (cons 0 val))) (eval (list 'defvar sym (list 'quote val)))))) (symbol #:sys-package:colon x) ())) (prog1 (car #:system:map:arg0) (setq #:system:map:arg0 (cdr #:system:map:arg0)))))) '(bcode bfloat bvect bstrg bvar econs dlink llink))
(if (not #:lap386:alloc-float) (progn (mapc (function (lambda (x) ((lambda (sym val) (if (boundp sym) (eval (list 'defvar sym (list 'quote (symeval sym)))) (if (eq (setq val (getglobal x)) 0) (error 'getglobal 'errbpa x) (if (numberp val) (setq val (cons 0 val))) (eval (list 'defvar sym (list 'quote val)))))) (symbol #:sys-package:colon x) ()))) '(farg1 farg2 cfadd cfsub cfmul cfdiv cfeqn cfneqn cfgt cfge cflt cfle))))
(defvar #:lap386:module (if (boundp '#:lap386:module) #:lap386:module ()))
(defvar #:lap386:saved-by-loader (if (boundp '#:lap386:saved-by-loader) #:lap386:saved-by-loader ()))
(defvar #:lap386:global-saved-by-loader (if (boundp '#:lap386:global-saved-by-loader) #:lap386:global-saved-by-loader '(())))
(defvar #:ld:special-case-loader (if (boundp '#:ld:special-case-loader) #:ld:special-case-loader ()))
(if (not (boundp '#:ld:shared-strings)) (progn (defvar #:ld:shared-strings ())))
(defvar #:lap386:talkp ())
(defvar #:lap386:f ())
(defvar #:lap386:arg ())
(loader'((entry #:lap386:ins subr1)
(push a1)
(btnil (cvalq #:lap386:talkp) 102)
(bfcons a1 104)
(push (@ 105))
(push '4)
(mov '1 a4)
(jmp outpos)
105
(eval ())
104
(push (@ 106))
(push (& 1))
(mov '1 a4)
(jmp prin)
106
(eval ())
(push (@ 109))
(mov '0 a4)
(jmp outpos)
109
(eval ())
(cnblt a1 '30 108)
(push (@ 110))
(mov '0 a4)
(jmp terpri)
110
(eval ())
108
(push (@ 111))
(push '30)
(mov '1 a4)
(jmp outpos)
111
(eval ())
(mov (cvalq #:lap386:pc-current) a1)
(call #:lap386:prin4hex)
(push (@ 112))
(push '"  ")
(mov '1 a4)
(jmp prin)
112
(eval ())
102
(mov (cvalq #:lap386:dont-load-i) a1)
(btnil a1 114)
(mov '(endl) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 115)
(mov nil a1)
(bra 114)
115
(mov 't a1)
114
(bfnil a1 113)
(btnil (& 0) 118)
(mov nil a1)
(bra 119)
118
(mov 't a1)
119
(bfnil a1 113)
(btcons (& 0) 120)
(mov (& 0) a1)
(adjstk '1)
(bra #:lap386:foundlabel)
120
(mov (& 0) a4)
(mov (cdr a4) (cvalq #:lap386:arg))
(mov (car a4) (cvalq #:lap386:codop))
(mov (cdr a4) a3)
(mov (car a3) (cvalq #:lap386:arg1))
(mov (cdr a4) a3)
(mov (cdr a3) a3)
(mov (car a3) (cvalq #:lap386:arg2))
(mov (cdr a4) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a3) (cvalq #:lap386:arg3))
(mov (cvalq #:lap386:codop) a1)
(cabne a1 'abort 123)
(mov nil a1)
(adjstk '1)
(return)
123
(cabne a1 'entry 124)
(mov '#:lap386:dont-load? a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall getprop)
(mov a1 (cvalq #:lap386:dont-load-i))
(bfnil a1 125)
(push (@ 127))
(push (cvalq #:lap386:arg1))
(mov (cvalq #:lap386:compiled-function-type) a2)
(mov (cvalq #:lap386:arg2) a1)
(jcall memq)
(btnil a1 128)
(mov (cvalq #:lap386:arg2) a4)
(bra 129)
128
(mov (& 2) a2)
(mov '"ENTRY" a1)
(call #:lap386:error)
(mov a1 a4)
129
(push a4)
(push (cvalq #:lap386:arg3))
(mov '3 a4)
(jmp list)
127
(eval ())
(mov (cvalq #:lap386:entry-list) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:entry-list))
(push (cvalq #:lap386:arg1))
(mov (cvalq #:lap386:pc-current) a1)
(jcall copylist)
(mov '#:lap386:fval a3)
(mov a1 a2)
(pop a1)
(jcall putprop)
(mov (cvalq #:lap386:entries-nr) a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall cassq)
(push a1)
130
(bfcons (& 0) 131)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:lap386:solve-aux)
(bra 130)
131
(adjstk '1)
(mov (cvalq #:lap386:entries-nr) a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall assq)
(mov (cvalq #:lap386:entries-nr) a2)
(jcall delete)
(mov a1 (cvalq #:lap386:entries-nr))
(mov (cvalq #:lap386:arg1) (cvalq #:lap386:fntname))
(mov (cvalq #:lap386:arg1) a1)
(adjstk '1)
(return)
125
(mov nil a1)
(adjstk '1)
(return)
124
(cabne a1 'endl 132)
(btnil (cvalq #:lap386:talkp) 134)
(push (@ 135))
(mov '0 a4)
(jmp terpri)
135
(eval ())
134
(mov nil (cvalq #:lap386:dont-load-i))
(btnil (cvalq #:lap386:llabels-nr) 136)
(mov (cvalq #:lap386:llabels-nr) a2)
(mov '"references locales non resolues" a1)
(adjstk '1)
(bra #:lap386:error)
136
(mov nil a1)
(adjstk '1)
(return)
132
(cabne a1 'end 138)
(push nil)
(push (cvalq #:lap386:talkp))
(mov (& 1) (cvalq #:lap386:talkp))
(push '1)
(push '(#:lap386:talkp))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '(endl) a1)
(call #:lap386:ins)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:lap386:talkp))
(adjstk '8)
139
(btnil (cvalq #:lap386:entry-list) 140)
(mov (cvalq #:lap386:entry-list) a1)
(mov (car a1) a1)
(mov '#:lap386:fval a2)
(mov (car a1) a1)
(jcall remprop)
(mov (cvalq #:lap386:entry-list) a1)
(mov (car a1) a1)
(mov '#:llcp:ftype a2)
(mov (car a1) a1)
(jcall remprop)
(mov (cvalq #:lap386:entry-list) a1)
(mov (car a1) a1)
(mov '#:llcp:fval a2)
(mov (car a1) a1)
(jcall remprop)
(mov (cvalq #:lap386:entry-list) a1)
(mov (car a1) a1)
(mov '#:system:loaded-from-file a2)
(mov (car a1) a1)
(jcall remprop)
(mov (cvalq #:lap386:entry-list) a4)
(mov (cdr a4) (cvalq #:lap386:entry-list))
(bra 139)
140
(call #:lap386:clean-llitt)
(btnil (cvalq #:lap386:entries-nr) 142)
(push (cvalq #:lap386:entries-nr))
(mov nil (cvalq #:lap386:entries-nr))
(pop a2)
(mov '"Il reste des ENTRY non resolus " a1)
(call #:lap386:error)
142
(btnil (cvalq #:ld:special-case-loader) 143)
145
(bfcons (cvalq #:ld:special-case-loader) 146)
(mov (cvalq #:ld:special-case-loader) a4)
(bfcons (car a4) 146)
(push (@ 147))
(push 'setfn)
(mov (cvalq #:ld:special-case-loader) a4)
(mov (cdr a4) (cvalq #:ld:special-case-loader))
(push (car a4))
(mov '2 a4)
(jmp apply)
147
(eval ())
(bra 145)
146
(mov nil a1)
(adjstk '1)
(return)
143
(mov nil a1)
(adjstk '1)
(return)
138
(cabne a1 'eval 148)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 149))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 150))
(push (cvalq #:lap386:arg1))
(mov '1 a4)
(jmp eval)
150
(eval ())
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
149
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '9)
(return)
148
(cabne a1 'fentry 151)
(mov '#:lap386:dont-load? a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall getprop)
(mov a1 (cvalq #:lap386:dont-load-i))
(bfnil a1 152)
(mov '#:system:loaded-from-file a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall remprop)
(mov (cvalq #:lap386:pc-current) a1)
(jcall copylist)
(push a1)
(btnil (cvalq #:ld:special-case-loader) 154)
(push (@ 156))
(push (cvalq #:lap386:arg1))
(push (cvalq #:lap386:arg2))
(push a1)
(mov '3 a4)
(jmp list)
156
(eval ())
(mov (cvalq #:ld:special-case-loader) a2)
(jcall cons)
(mov a1 (cvalq #:ld:special-case-loader))
(bra 155)
154
(mov '#:llcp:ftype a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall remprop)
(mov '#:llcp:fval a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall remprop)
(mov (& 0) a3)
(mov (cvalq #:lap386:arg2) a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall setfn)
155
(push (@ 157))
(push (cvalq #:lap386:arg1))
(push (& 2))
(mov '2 a4)
(jmp list)
157
(eval ())
(mov (cvalq #:lap386:llabels) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:llabels))
(mov '#:lap386:entry a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall remprop)
(mov (cvalq #:lap386:arg1) (cvalq #:lap386:fntname))
(mov (cvalq #:lap386:arg1) a1)
(adjstk '2)
(return)
152
(mov nil a1)
(adjstk '1)
(return)
151
(cabne a1 'local 158)
(mov (cvalq #:lap386:arg1) a1)
(jcall ncons)
(mov (cvalq #:lap386:llabels) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:llabels))
(adjstk '1)
(return)
158
(cabne a1 'title 159)
(mov (cvalq #:lap386:arg1) (cvalq #:lap386:module))
(mov (cvalq #:lap386:arg1) a1)
(adjstk '1)
(return)
159
(mov a4 a1)
(adjstk '1)
(bra #:lap386:machins)
113
(adjstk '1)
(return)
))
(loader'((entry #:lap386:offset subr3)
(push a3)
(push a2)
(push a1)
(mov (cvalq #:lap386:llabels) a2)
(jcall cassq)
(mov (car a1) a4)
(bfnil a4 101)
(mov (& 0) a1)
(jcall symbolp)
(mov a1 a4)
(btnil a4 101)
(mov '#:lap386:fval a2)
(mov (& 0) a1)
(jcall getprop)
(mov a1 a4)
101
(btnil a4 103)
(btnil (& 1) 105)
(mov (cvalq #:lap386:pc-current) a2)
(mov a4 a1)
(jcall subadr)
(mov '4 a2)
(adjstk '3)
(jmp subadr)
105
(mov a4 a1)
(adjstk '3)
(return)
103
(btnil (& 2) 108)
(bfsymb (& 0) 109)
(mov (cvalq #:lap386:llabels) a2)
(mov (& 0) a1)
(jcall assq)
(bfnil a1 109)
(mov (cvalq #:lap386:pc-current) a1)
(jcall copylist)
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 a2)
(mov (& 0) a1)
(call #:lap386:addentry)
(bra 108)
109
(mov (cvalq #:lap386:pc-current) a1)
(jcall copylist)
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 a2)
(mov (& 0) a1)
(call #:lap386:addlabel)
108
(mov '(-1 . 0) a1)
(adjstk '3)
(return)
))
(loader'((entry #:lap386:val32 subr2)
(push a1)
(bfcons a1 101)
(mov (cvalq #:lap386:pc-current) a2)
(call #:lap386:setref)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall loc)
(push a1)
(mov (& 1) a2)
(mov (car a2) a2)
(mov 'lap386 a1)
(jcall symbol)
(mov '#:lap386:value a2)
(jcall getprop)
(mov a1 a2)
(pop a1)
(jcall addadr)
(adjstk '1)
(bra #:lap386:32bits)
101
(mov 't a3)
(call #:lap386:offset)
(adjstk '1)
(bra #:lap386:32bits)
))
(loader'((entry #:lap386:inverse-test subr1)
(push a1)
(mov '128 a2)
(jcall lt)
(push a1)
(btnil a1 102)
(mov '16 a4)
(bra 103)
102
(mov '0 a4)
103
(mov (& 1) a3)
(plus a4 a3)
(mov a3 a1)
(cabne a1 '135 104)
(mov '130 a1)
(bra 101)
104
(cabne a1 '130 105)
(mov '135 a1)
(bra 101)
105
(cabne a1 '131 106)
(mov '134 a1)
(bra 101)
106
(cabne a1 '134 107)
(mov '131 a1)
(bra 101)
107
(cabne a1 '143 108)
(mov '140 a1)
(bra 101)
108
(cabne a1 '140 109)
(mov '143 a1)
(bra 101)
109
(cabne a1 '141 110)
(mov '142 a1)
(bra 101)
110
(cabne a1 '142 111)
(mov '141 a1)
(bra 101)
111
(btnil (& 0) 113)
(mov '16 a3)
(bra 114)
113
(mov '0 a3)
114
(mov (& 1) a2)
(plus a3 a2)
(mov a2 a1)
101
(btnil (& 0) 115)
(mov '16 a3)
(bra 116)
115
(mov '0 a3)
116
(diff a3 a1)
(adjstk '2)
(return)
))
(loader'((entry #:lap386:go-etiq subr3)
(push a3)
(push a2)
(push a1)
(btnil (cvalq *swap-arg*) 102)
(bfcons a1 103)
(push (@ 105))
(push (car a1))
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:lap386:inverse-test)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(mov a1 a4)
(bra 104)
103
(call #:lap386:inverse-test)
(mov a1 a4)
104
(mov a4 (& 0))
(mov nil (cvalq *swap-arg*))
102
(bfnil (& 1) 106)
(btcons (& 0) 108)
(mov (& 0) a1)
(call #:lap386:1byte)
(bra 109)
108
(mov (& 0) a1)
(mov (car a1) a1)
(call #:lap386:1byte)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:lap386:1byte)
109
(mov 't a2)
(mov (& 2) a1)
(adjstk '3)
(bra #:lap386:val32)
106
(btcons (& 2) 110)
(mov '255 a1)
(call #:lap386:1byte)
(mov (& 1) a4)
(plus '5 a4)
(mov a4 a1)
(call #:lap386:1byte)
(mov (& 2) a1)
(call #:lap386:add-llitt)
(push (@ 112))
(push 'fvalq)
(push (& 4))
(mov '2 a4)
(jmp list)
112
(eval ())
(mov 't a2)
(adjstk '3)
(bra #:lap386:val32)
110
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:lap386:bx2 nsubr)
(bfcons (cvalq #:lap386:arg1) 101)
(mov (cvalq #:lap386:arg1) a4)
(cabne (car a4) 'quote 101)
(push (@ 107))
(push (& 1))
(mov (cvalq #:lap386:arg1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp funcall)
107
(eval ())
(btnil a1 105)
(mov 't a4)
(bra 106)
105
(mov nil a4)
106
(cabne a4 (& 1) 103)
(mov (cvalq #:lap386:arg2) a3)
(mov nil a2)
(mov '233 a1)
(adjstk '4)
(bra #:lap386:go-etiq)
103
(mov nil a1)
(adjstk '4)
(return)
101
(push (cvalq #:lap386:arg2))
(push (@ 108))
(push '"perdu")
(push (@ 109))
(push '"@")
(push (cvalq #:lap386:@-lab))
(mov '2 a4)
(jmp catenate)
109
(eval ())
(push a1)
(mov '2 a4)
(jmp catenate)
108
(eval ())
(push a1)
(jcall ncons)
(mov (cvalq #:lap386:llabels) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:llabels))
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(bfnil a1 111)
(mov (& 5) a1)
(call #:lap386:register?)
(btnil a1 112)
(mov (& 4) a1)
(call #:lap386:register?)
(bfnil a1 111)
112
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:getparm)
(call #:lap386:setrwork)
(mov 'rwork (cvalq #:lap386:arg1))
111
(btnil (& 5) 114)
(mov (& 5) (cvalq #:lap386:arg2))
(mov nil a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(btnil (& 4) 115)
(btnil (& 3) 117)
(mov (& 0) a3)
(bra 118)
117
(mov (& 1) a3)
118
(mov nil a2)
(mov '(15 130) a1)
(call #:lap386:go-etiq)
(bra 114)
115
(btnil (cvalq #:lap386:31bitfloats) 119)
(cabne (& 5) 'bcons 119)
(push (@ 121))
(push '15)
(btnil (& 5) 122)
(mov '141 a4)
(bra 123)
122
(mov '140 a4)
123
(push a4)
(mov '2 a4)
(jmp list)
121
(eval ())
(mov (& 1) a3)
(mov nil a2)
(call #:lap386:go-etiq)
(bra 114)
119
(push (@ 124))
(push '15)
(btnil (& 5) 125)
(mov '131 a4)
(bra 126)
125
(mov '130 a4)
126
(push a4)
(mov '2 a4)
(jmp list)
124
(eval ())
(mov (& 1) a3)
(mov nil a2)
(call #:lap386:go-etiq)
114
(btnil (& 4) 128)
(mov (& 4) (cvalq #:lap386:arg2))
(mov nil a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(push (@ 129))
(push '15)
(btnil (& 5) 130)
(mov '130 a4)
(bra 131)
130
(mov '131 a4)
131
(push a4)
(mov '2 a4)
(jmp list)
129
(eval ())
(mov (& 1) a3)
(mov nil a2)
(call #:lap386:go-etiq)
128
(mov (& 0) a1)
(adjstk '6)
(bra #:lap386:foundlabel)
))
(loader'((entry #:lap386:test-imm subr1)
(bfcons (cvalq #:lap386:arg1) 101)
(bfcons (cvalq #:lap386:arg2) 101)
(mov (cvalq #:lap386:arg1) a4)
(cabne (car a4) 'quote 101)
(mov (cvalq #:lap386:arg2) a3)
(cabne (car a3) 'quote 101)
(push (@ 105))
(push a1)
(mov (cvalq #:lap386:arg1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov (cvalq #:lap386:arg2) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '3 a4)
(jmp funcall)
105
(eval ())
(btnil a1 104)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '233 a1)
(call #:lap386:go-etiq)
104
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:lap386:fcall subr2)
(push a2)
(push a1)
(mov nil a3)
(mov (cvalq #:lap386:arg1) a2)
(mov 'farg1 a1)
(call #:lap386:mov)
(mov nil a3)
(mov (cvalq #:lap386:arg2) a2)
(mov 'farg2 a1)
(call #:lap386:mov)
(mov '232 a1)
(call #:lap386:1byte)
(mov (cvalq #:lap386:pc-current) a2)
(mov (& 0) a1)
(jcall subadr)
(mov '4 a2)
(jcall subadr)
(call #:lap386:32bits)
(bfnil (& 1) 101)
(mov nil a3)
(mov 'farg2 a2)
(mov (cvalq #:lap386:arg2) a1)
(adjstk '2)
(bra #:lap386:mov)
101
(mov 'nil (cvalq #:lap386:arg1))
(mov 'farg2 (cvalq #:lap386:arg2))
(mov nil a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 133) a1)
(adjstk '2)
(bra #:lap386:go-etiq)
))
(loader'((entry #:lap386:gen-test-float subr3)
(push a3)
(push a2)
(push a1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov (cdr a1) a4)
(bffloat (car a4) 105)
(mov 't a4)
(bra 106)
105
(mov nil a4)
106
(cabne a3 a4 103)
(mov a2 a3)
(mov nil a2)
(mov '233 a1)
(adjstk '3)
(bra #:lap386:go-etiq)
103
(mov nil a1)
(adjstk '3)
(return)
101
(call #:lap386:getparm)
(push a1)
(hpxmov a1 '0 a1)
(cabne a1 '0 108)
(mov (& 1) a1)
(call #:lap386:register?)
(push a1)
(mov '9 a1)
(call #:lap386:1byte)
(mov '192 a4)
(plus (& 0) a4)
(mov '8 a3)
(times (& 0) a3)
(plus a3 a4)
(mov a4 a1)
(call #:lap386:1byte)
(adjstk '1)
(bra 107)
108
(cabne a1 '1 109)
(mov (& 0) a3)
(mov '0 a2)
(mov '247 a1)
(call #:lap386:poke-op)
(mov nil a2)
(mov '(#$8000 . 0) a1)
(call #:lap386:dword)
(bra 107)
109
(mov (cvalq obj) a3)
(mov '"index hors limite" a2)
(mov '#:lap386:getparm a1)
(jcall error)
107
(adjstk '1)
(btnil (& 2) 111)
(mov (& 1) a3)
(mov nil a2)
(mov '(15 136) a1)
(adjstk '3)
(bra #:lap386:go-etiq)
111
(mov (& 1) a3)
(mov nil a2)
(mov '(15 137) a1)
(adjstk '3)
(bra #:lap386:go-etiq)
))
(loader'((entry #:lap386:machins subr1)
(push (cvalq obj))
(mov a1 (cvalq obj))
(push '1)
(push '(obj))
(push (@ #:lap386:machins))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push '(#:lap386:arg1 #:lap386:arg2 #:lap386:arg3))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (& 0))
(mov (& 1) a4)
(mov (cval a4) (& 1))
(mov ''_undef_ a2)
(mov (& 1) a1)
(jcall equal)
(bfnil a1 103)
(bfcons (& 1) 103)
(mov (& 1) a1)
(mov (car a1) a1)
(cabne a1 'quote 107)
(mov (& 1) a4)
(mov (cdr a4) a4)
(bfnil (car a4) 103)
(mov (& 0) a3)
(mov 'nil (cval a3))
(bra 103)
107
(cabne a1 'eval 110)
(push (@ 111))
(mov (& 2) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp eval)
111
(eval ())
(mov (& 0) a4)
(mov a1 (cval a4))
(bra 103)
110
(cabeq a1 '& 103)
(cabeq a1 '@ 103)
(cabeq a1 'car 103)
(cabeq a1 'cdr 103)
(cabeq a1 'cval 103)
(cabeq a1 'plist 103)
(cabeq a1 'fval 103)
(cabeq a1 'pkgc 103)
(cabeq a1 'null 103)
(cabeq a1 'oval 103)
(cabeq a1 'alink 103)
(cabeq a1 'pname 103)
(cabeq a1 'val 103)
(cabeq a1 'typ 103)
(cabeq a1 'cvalq 103)
(cabne a1 'fvalq 112)
(bra 103)
112
(push a1)
(mov '(symbolp (car x)) a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 103)
(mov (& 1) a2)
(mov (car a2) a2)
(mov 'ld-ind a1)
(jcall getfn1)
(push (cvalq #:lap386:f))
(mov a1 (cvalq #:lap386:f))
(push '1)
(push '(#:lap386:f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil a1 115)
(push (@ 117))
(push a1)
(push (& 10))
(mov '2 a4)
(jmp funcall)
117
(eval ())
(bra 116)
115
(mov (& 8) a3)
(mov 'errudf a2)
(mov 'loader a1)
(jcall error)
116
(mov (& 1) dlink)
(mov (& 6) (cvalq #:lap386:f))
(adjstk '7)
103
(adjstk '2)
(bra 101)
102
(adjstk '1)
(mov (cvalq #:lap386:@-lab) a4)
(plus '1 a4)
(mov a4 (cvalq #:lap386:@-lab))
(mov (cvalq #:lap386:codop) a1)
(cabne a1 'car 119)
(push (@ 120))
(push 'mov)
(push (@ 121))
(push 'car)
(push (cvalq #:lap386:arg1))
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(push (cvalq #:lap386:arg1))
(mov '3 a4)
(jmp list)
120
(eval ())
(call #:lap386:ins)
(bra 118)
119
(cabne a1 'cdr 122)
(push (@ 123))
(push 'mov)
(push (@ 124))
(push 'cdr)
(push (cvalq #:lap386:arg1))
(mov '2 a4)
(jmp list)
124
(eval ())
(push a1)
(push (cvalq #:lap386:arg1))
(mov '3 a4)
(jmp list)
123
(eval ())
(call #:lap386:ins)
(bra 118)
122
(cabne a1 'mov 125)
(mov nil a3)
(mov (cvalq #:lap386:arg1) a2)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:mov)
(bra 118)
125
(cabne a1 'push 126)
(push (@ 127))
(push '255)
(push '48)
(push '80)
(push '104)
(push nil)
(mov '5 a4)
(bra #:lap386:op1arg)
127
(eval ())
(bra 118)
126
(cabne a1 'pop 128)
(push (@ 129))
(push '143)
(push '0)
(push '88)
(push nil)
(push nil)
(mov '5 a4)
(bra #:lap386:op1arg)
129
(eval ())
(bra 118)
128
(cabne a1 'jcall 130)
(mov (cvalq #:lap386:arg1) a3)
(mov '16 a2)
(mov '232 a1)
(call #:lap386:go-etiq)
(bra 118)
130
(cabne a1 'jmp 131)
(mov (cvalq #:lap386:arg1) a3)
(mov '32 a2)
(mov '233 a1)
(call #:lap386:go-etiq)
(bra 118)
131
(cabne a1 'call 132)
(mov (cvalq #:lap386:arg1) a3)
(mov nil a2)
(mov '232 a1)
(call #:lap386:go-etiq)
(bra 118)
132
(cabne a1 'bra 133)
(mov (cvalq #:lap386:arg1) a3)
(mov nil a2)
(mov '233 a1)
(call #:lap386:go-etiq)
(bra 118)
133
(cabne a1 'return 134)
(mov '195 a1)
(call #:lap386:1byte)
(bra 118)
134
(cabne a1 'cabeq 135)
(mov 'eq a1)
(call #:lap386:test-imm)
(bfnil a1 118)
(mov (cvalq #:lap386:arg2) a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall equal)
(btnil a1 137)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '233 a1)
(call #:lap386:go-etiq)
(bra 118)
137
(mov nil a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(btnil a1 139)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 132) a1)
(call #:lap386:go-etiq)
(bra 118)
139
(mov nil a1)
(bra 118)
135
(cabne a1 'cabne 141)
(mov 'neq a1)
(call #:lap386:test-imm)
(bfnil a1 118)
(mov (cvalq #:lap386:arg2) a2)
(mov (cvalq #:lap386:arg1) a1)
(jcall equal)
(bfnil a1 118)
(mov nil a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(btnil a1 144)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 133) a1)
(call #:lap386:go-etiq)
(bra 118)
144
(mov nil a1)
(bra 118)
141
(cabne a1 'btnil 146)
(mov (cvalq #:lap386:arg2) (cvalq #:lap386:arg3))
(mov 'nil (cvalq #:lap386:arg2))
(mov nil a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 132) a1)
(call #:lap386:go-etiq)
(bra 118)
146
(cabne a1 'bfnil 147)
(mov (cvalq #:lap386:arg2) (cvalq #:lap386:arg3))
(mov 'nil (cvalq #:lap386:arg2))
(mov nil a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 133) a1)
(call #:lap386:go-etiq)
(bra 118)
147
(cabne a1 'btvar 148)
(push (@ 149))
(push 'bvar)
(push 'bcons)
(push 't)
(push 'variablep)
(mov '4 a4)
(bra #:lap386:bx2)
149
(eval ())
(bra 118)
148
(cabne a1 'bfvar 150)
(push (@ 151))
(push 'bvar)
(push 'bcons)
(push nil)
(push 'variablep)
(mov '4 a4)
(bra #:lap386:bx2)
151
(eval ())
(bra 118)
150
(cabne a1 'btcons 152)
(push (@ 153))
(push 'bcons)
(push nil)
(push 't)
(push 'consp)
(mov '4 a4)
(bra #:lap386:bx2)
153
(eval ())
(bra 118)
152
(cabne a1 'bfcons 154)
(push (@ 155))
(push 'bcons)
(push nil)
(push nil)
(push 'consp)
(mov '4 a4)
(bra #:lap386:bx2)
155
(eval ())
(bra 118)
154
(cabne a1 'btfix 156)
(push (@ 157))
(push nil)
(push 'bfloat)
(push 't)
(push 'fixp)
(mov '4 a4)
(bra #:lap386:bx2)
157
(eval ())
(bra 118)
156
(cabne a1 'bffix 158)
(push (@ 159))
(push nil)
(push 'bfloat)
(push nil)
(push 'fixp)
(mov '4 a4)
(bra #:lap386:bx2)
159
(eval ())
(bra 118)
158
(cabne a1 'btfloat 160)
(bfnil (cvalq #:lap386:31bitfloats) 161)
(push (@ 163))
(push 'bfloat)
(push 'bvect)
(push 't)
(push 'floatp)
(mov '4 a4)
(bra #:lap386:bx2)
163
(eval ())
(bra 118)
161
(mov 't a3)
(mov (cvalq #:lap386:arg2) a2)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:gen-test-float)
(bra 118)
160
(cabne a1 'bffloat 164)
(bfnil (cvalq #:lap386:31bitfloats) 165)
(push (@ 167))
(push 'bfloat)
(push 'bvect)
(push nil)
(push 'floatp)
(mov '4 a4)
(bra #:lap386:bx2)
167
(eval ())
(bra 118)
165
(mov nil a3)
(mov (cvalq #:lap386:arg2) a2)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:gen-test-float)
(bra 118)
164
(cabne a1 'btstrg 168)
(push (@ 169))
(push 'bstrg)
(push 'nil)
(push 't)
(push 'stringp)
(mov '4 a4)
(bra #:lap386:bx2)
169
(eval ())
(bra 118)
168
(cabne a1 'bfstrg 170)
(push (@ 171))
(push 'bstrg)
(push 'nil)
(push nil)
(push 'stringp)
(mov '4 a4)
(bra #:lap386:bx2)
171
(eval ())
(bra 118)
170
(cabne a1 'btvect 172)
(push (@ 173))
(push 'bvect)
(push 'bstrg)
(push 't)
(push 'vectorp)
(mov '4 a4)
(bra #:lap386:bx2)
173
(eval ())
(bra 118)
172
(cabne a1 'bfvect 174)
(push (@ 175))
(push 'bvect)
(push 'bstrg)
(push nil)
(push 'vectorp)
(mov '4 a4)
(bra #:lap386:bx2)
175
(eval ())
(bra 118)
174
(cabne a1 'btsymb 176)
(push (@ 177))
(push 'nil)
(push 'bcons)
(push 't)
(push 'symbolp)
(mov '4 a4)
(bra #:lap386:bx2)
177
(eval ())
(bra 118)
176
(cabne a1 'bfsymb 178)
(push (@ 179))
(push 'nil)
(push 'bcons)
(push nil)
(push 'symbolp)
(mov '4 a4)
(bra #:lap386:bx2)
179
(eval ())
(bra 118)
178
(cabne a1 'cnbeq 180)
(mov 'eqn a1)
(call #:lap386:test-imm)
(bfnil a1 181)
(mov 't a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 132) a1)
(call #:lap386:go-etiq)
(bra 118)
181
(mov nil a1)
(bra 118)
180
(cabne a1 'cnbne 183)
(mov 'neqn a1)
(call #:lap386:test-imm)
(bfnil a1 184)
(mov 't a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 133) a1)
(call #:lap386:go-etiq)
(bra 118)
184
(mov nil a1)
(bra 118)
183
(cabne a1 'cnblt 186)
(mov 'lt a1)
(call #:lap386:test-imm)
(bfnil a1 187)
(mov 't a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 140) a1)
(call #:lap386:go-etiq)
(bra 118)
187
(mov nil a1)
(bra 118)
186
(cabne a1 'cnble 189)
(mov 'le a1)
(call #:lap386:test-imm)
(bfnil a1 190)
(mov 't a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 142) a1)
(call #:lap386:go-etiq)
(bra 118)
190
(mov nil a1)
(bra 118)
189
(cabne a1 'cnbgt 192)
(mov 'gt a1)
(call #:lap386:test-imm)
(bfnil a1 193)
(mov 't a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 143) a1)
(call #:lap386:go-etiq)
(bra 118)
193
(mov nil a1)
(bra 118)
192
(cabne a1 'cnbge 195)
(mov 'ge a1)
(call #:lap386:test-imm)
(bfnil a1 196)
(mov 't a3)
(mov '56 a2)
(mov '57 a1)
(call #:lap386:op2arg)
(mov (cvalq #:lap386:arg3) a3)
(mov nil a2)
(mov '(15 141) a1)
(call #:lap386:go-etiq)
(bra 118)
196
(mov nil a1)
(bra 118)
195
(cabne a1 'cfbeq 198)
(mov 'feqn a1)
(call #:lap386:test-imm)
(bfnil a1 199)
(mov 't a2)
(mov (cvalq #:lap386:cfeqn) a1)
(call #:lap386:fcall)
(bra 118)
199
(mov nil a1)
(bra 118)
198
(cabne a1 'cfbne 201)
(mov 'fneqn a1)
(call #:lap386:test-imm)
(bfnil a1 202)
(mov 't a2)
(mov (cvalq #:lap386:cfneqn) a1)
(call #:lap386:fcall)
(bra 118)
202
(mov nil a1)
(bra 118)
201
(cabne a1 'cfblt 204)
(mov 'flt a1)
(call #:lap386:test-imm)
(bfnil a1 205)
(mov 't a2)
(mov (cvalq #:lap386:cflt) a1)
(call #:lap386:fcall)
(bra 118)
205
(mov nil a1)
(bra 118)
204
(cabne a1 'cfble 207)
(mov 'fle a1)
(call #:lap386:test-imm)
(bfnil a1 208)
(mov 't a2)
(mov (cvalq #:lap386:cfle) a1)
(call #:lap386:fcall)
(bra 118)
208
(mov nil a1)
(bra 118)
207
(cabne a1 'cfbgt 210)
(mov 'fgt a1)
(call #:lap386:test-imm)
(bfnil a1 211)
(mov 't a2)
(mov (cvalq #:lap386:cfgt) a1)
(call #:lap386:fcall)
(bra 118)
211
(mov nil a1)
(bra 118)
210
(cabne a1 'cfbge 213)
(mov 'fge a1)
(call #:lap386:test-imm)
(bfnil a1 214)
(mov 't a2)
(mov (cvalq #:lap386:cfge) a1)
(call #:lap386:fcall)
(bra 118)
214
(mov nil a1)
(bra 118)
213
(cabne a1 'decr 216)
(push (@ 217))
(push '255)
(push '8)
(push '72)
(push nil)
(push 't)
(mov '5 a4)
(bra #:lap386:op1arg)
217
(eval ())
(bra 118)
216
(cabne a1 'diff 218)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:immvalue?)
(mov '0 a2)
(jcall eq)
(bfnil a1 118)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:immvalue?)
(cabne a1 '1 220)
(mov (cvalq #:lap386:arg2) (cvalq #:lap386:arg1))
(push (@ 222))
(push '255)
(push '8)
(push '72)
(push nil)
(push 't)
(mov '5 a4)
(bra #:lap386:op1arg)
222
(eval ())
(bra 118)
220
(mov 't a3)
(mov '40 a2)
(mov '41 a1)
(call #:lap386:op2arg)
(bra 118)
218
(cabne a1 'incr 223)
(push (@ 224))
(push '255)
(push '0)
(push '64)
(push nil)
(push 't)
(mov '5 a4)
(bra #:lap386:op1arg)
224
(eval ())
(bra 118)
223
(cabne a1 'plus 225)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:immvalue?)
(mov '0 a2)
(jcall eq)
(bfnil a1 118)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:immvalue?)
(cabne a1 '1 227)
(mov (cvalq #:lap386:arg2) (cvalq #:lap386:arg1))
(push (@ 229))
(push '255)
(push '0)
(push '64)
(push nil)
(push 't)
(mov '5 a4)
(bra #:lap386:op1arg)
229
(eval ())
(bra 118)
227
(mov 't a3)
(mov '0 a2)
(mov '1 a1)
(call #:lap386:op2arg)
(bra 118)
225
(cabne a1 'land 230)
(mov 't a3)
(mov '32 a2)
(mov '33 a1)
(call #:lap386:op2arg)
(bra 118)
230
(cabne a1 'lor 231)
(mov 't a3)
(mov '8 a2)
(mov '9 a1)
(call #:lap386:op2arg)
(bra 118)
231
(cabne a1 'lxor 232)
(mov 't a3)
(mov '48 a2)
(mov '49 a1)
(call #:lap386:op2arg)
(bra 118)
232
(cabne a1 'lshift 233)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:getparm)
(push a1)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:getparm)
(push a1)
(push (@ 234))
(push '"fin")
(push (@ 235))
(push '"@")
(push (cvalq #:lap386:@-lab))
(mov '2 a4)
(jmp catenate)
235
(eval ())
(push a1)
(mov '2 a4)
(jmp catenate)
234
(eval ())
(push a1)
(push (@ 236))
(push '"shr")
(push (@ 237))
(push '"@")
(push (cvalq #:lap386:@-lab))
(mov '2 a4)
(jmp catenate)
237
(eval ())
(push a1)
(mov '2 a4)
(jmp catenate)
236
(eval ())
(push '32)
(push a1)
(mov (& 3) a1)
(call #:lap386:set-modrm-for-reg-2)
(mov (& 4) a1)
(call #:lap386:set-modrm-for-reg-2)
(hpxmov (& 4) '0 a4)
(cabne a4 '2 238)
(hpxmov (& 4) '5 a4)
(push a4)
(bfcons a4 241)
(mov (cvalq obj) a3)
(mov 'errbpa a2)
(mov 'lshift a1)
(jcall error)
241
(cnbge (& 0) '0 243)
(mov '40 (& 2))
(mov '0 a4)
(diff (& 0) a4)
(mov a4 (& 0))
243
(mov (& 0) a4)
(land '255 a4)
(mov a4 (& 0))
(cnbeq a4 '0 244)
(mov '102 a1)
(call #:lap386:1byte)
(cnbne (& 0) '1 246)
(mov '209 a1)
(bra 247)
246
(mov '193 a1)
247
(mov (& 4) a3)
(mov (& 2) a2)
(call #:lap386:poke-op)
(cnbeq (& 0) '1 248)
(mov (& 0) a1)
(call #:lap386:1byte)
(bra 245)
248
(mov nil a1)
(bra 245)
244
(mov nil a1)
245
(adjstk '1)
(bra 239)
238
(mov (& 2) a1)
(jcall ncons)
(mov (cvalq #:lap386:llabels) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:llabels))
(mov (& 0) a1)
(jcall ncons)
(mov (cvalq #:lap386:llabels) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:llabels))
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(cabne a1 '1 251)
(push (@ 252))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push '0)
(push '0)
(push '197)
(push nil)
(push '0)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
252
(eval ())
(mov a1 (& 3))
(mov 'rwork (cvalq #:lap386:arg2))
251
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(cabeq a1 '1 254)
(mov '139 a1)
(call #:lap386:1byte)
(mov '233 a1)
(call #:lap386:1byte)
(mov (& 4) a3)
(mov '8 a2)
(mov '139 a1)
(call #:lap386:poke-op)
254
(mov '102 a1)
(call #:lap386:1byte)
(mov '9 a1)
(call #:lap386:1byte)
(mov '201 a1)
(call #:lap386:1byte)
(mov (& 0) a3)
(mov nil a2)
(mov '(15 136) a1)
(call #:lap386:go-etiq)
(mov '102 a1)
(call #:lap386:1byte)
(mov (& 3) a3)
(mov '32 a2)
(mov '211 a1)
(call #:lap386:poke-op)
(mov (& 2) a3)
(mov nil a2)
(mov '233 a1)
(call #:lap386:go-etiq)
(mov (& 0) a1)
(call #:lap386:foundlabel)
(mov '247 a1)
(call #:lap386:1byte)
(mov '217 a1)
(call #:lap386:1byte)
(mov '102 a1)
(call #:lap386:1byte)
(mov (& 3) a3)
(mov '40 a2)
(mov '211 a1)
(call #:lap386:poke-op)
(mov (& 2) a1)
(call #:lap386:foundlabel)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:register?)
(cabeq a1 '1 255)
(mov '137 a1)
(call #:lap386:1byte)
(mov '233 a1)
(call #:lap386:1byte)
(bra 239)
255
(mov nil a1)
239
(adjstk '5)
(bra 118)
233
(cabne a1 'negate 257)
(push (@ 258))
(push '247)
(push '24)
(push nil)
(push nil)
(push 't)
(mov '5 a4)
(bra #:lap386:op1arg)
258
(eval ())
(bra 118)
257
(cabne a1 'rem 259)
(mov '2 a1)
(call #:lap386:divm)
(bra 118)
259
(cabne a1 'quo 260)
(mov '0 a1)
(call #:lap386:divm)
(bra 118)
260
(cabne a1 'times 261)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:getparm)
(push a1)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:getparm)
(push a1)
(hpxmov a1 '0 a4)
(cabeq a4 '0 263)
(call #:lap386:setrwork)
(mov 'rwork (cvalq #:lap386:arg2))
263
(mov '102 a1)
(call #:lap386:1byte)
(hpxmov (& 1) '0 a1)
(cabeq a1 '0 266)
(cabne a1 '1 265)
266
(mov (& 1) a1)
(call #:lap386:set-modrm-for-reg-2)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(lshift '3 a1)
(mov (& 1) a3)
(mov a1 a2)
(mov '(15 175) a1)
(call #:lap386:poke-op)
(bra 264)
265
(cabne a1 '2 264)
(hpxmov (& 1) '4 a1)
(cabne a1 '1 269)
(mov '107 a1)
(call #:lap386:1byte)
(push (@ 270))
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(push a1)
(push '9)
(mov '2 a4)
(jmp times)
270
(eval ())
(plus '192 a1)
(call #:lap386:1byte)
(hpxmov (& 1) '5 a1)
(call #:lap386:1byte)
(bra 264)
269
(cabne a1 '4 264)
(mov '105 a1)
(call #:lap386:1byte)
(push (@ 272))
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:register?)
(push a1)
(push '9)
(mov '2 a4)
(jmp times)
272
(eval ())
(plus '192 a1)
(call #:lap386:1byte)
(hpxmov (& 1) '5 a1)
(call #:lap386:16bits)
264
(cabne (cvalq #:lap386:arg2) 'rwork 273)
(mov (& 0) a1)
(call #:lap386:resetrwork)
(bra 274)
273
(mov nil a1)
274
(adjstk '2)
(bra 118)
261
(cabne a1 'fplus 275)
(mov nil a2)
(mov (cvalq #:lap386:cfadd) a1)
(call #:lap386:fcall)
(bra 118)
275
(cabne a1 'fdiff 276)
(mov nil a2)
(mov (cvalq #:lap386:cfsub) a1)
(call #:lap386:fcall)
(bra 118)
276
(cabne a1 'ftimes 277)
(mov nil a2)
(mov (cvalq #:lap386:cfmul) a1)
(call #:lap386:fcall)
(bra 118)
277
(cabne a1 'fquo 278)
(mov nil a2)
(mov (cvalq #:lap386:cfdiv) a1)
(call #:lap386:fcall)
(bra 118)
278
(cabne a1 'adjstk 279)
(mov 'esp (cvalq #:lap386:arg2))
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:immvalue?)
(btnil a1 280)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:immvalue?)
(cabeq a1 '0 282)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:immvalue?)
(lshift '2 a1)
(jcall kwote)
(mov a1 (cvalq #:lap386:arg1))
(mov nil a3)
(mov '0 a2)
(mov '1 a1)
(call #:lap386:op2arg)
(bra 118)
282
(mov nil a1)
(bra 118)
280
(push (@ 284))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push 'esp)
(push (cvalq #:lap386:arg1))
(push '4)
(push '0)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
284
(eval ())
(mov a1 (cvalq #:lap386:arg1))
(mov nil a3)
(mov nil a2)
(mov '141 a1)
(call #:lap386:op2arg)
(bra 118)
279
(cabne a1 'hgsize 285)
(push (@ 286))
(push 'val)
(push (cvalq #:lap386:arg1))
(mov '2 a4)
(jmp list)
286
(eval ())
(call #:lap386:getparm)
(call #:lap386:setrwork)
(mov nil a3)
(mov '(size rwork) a2)
(mov (cvalq #:lap386:arg2) a1)
(call #:lap386:mov)
(bra 118)
285
(cabne a1 'hbmovx 287)
(push (@ 288))
(mov (cvalq #:lap386:vectors) a3)
(mov (cdr a3) (cvalq #:lap386:vectors))
(push (car a3))
(push (@ 289))
(push 'val)
(push (cvalq #:lap386:arg2))
(mov '2 a4)
(jmp list)
289
(eval ())
(push a1)
(push (cvalq #:lap386:arg3))
(push '1)
(push '8)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
288
(eval ())
(mov 't a3)
(mov (cvalq #:lap386:arg1) a2)
(call #:lap386:mov)
(bra 118)
287
(cabne a1 'hbxmov 290)
(push (cvalq #:lap386:arg3))
(push (@ 291))
(mov (cvalq #:lap386:vectors) a3)
(mov (cdr a3) (cvalq #:lap386:vectors))
(push (car a3))
(push (@ 292))
(push 'val)
(push (cvalq #:lap386:arg1))
(mov '2 a4)
(jmp list)
292
(eval ())
(push a1)
(push (cvalq #:lap386:arg2))
(push '1)
(push '8)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
291
(eval ())
(mov 't a3)
(mov a1 a2)
(pop a1)
(call #:lap386:mov)
(bra 118)
290
(cabne a1 'hpmovx 293)
(push (@ 294))
(mov (cvalq #:lap386:vectors) a3)
(mov (cdr a3) (cvalq #:lap386:vectors))
(push (car a3))
(push (@ 295))
(push 'val)
(push (cvalq #:lap386:arg2))
(mov '2 a4)
(jmp list)
295
(eval ())
(push a1)
(push (cvalq #:lap386:arg3))
(push '4)
(push '8)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
294
(eval ())
(mov nil a3)
(mov (cvalq #:lap386:arg1) a2)
(call #:lap386:mov)
(bra 118)
293
(cabne a1 'hpxmov 296)
(push (cvalq #:lap386:arg3))
(push (@ 297))
(mov (cvalq #:lap386:vectors) a3)
(mov (cdr a3) (cvalq #:lap386:vectors))
(push (car a3))
(push (@ 298))
(push 'val)
(push (cvalq #:lap386:arg1))
(mov '2 a4)
(jmp list)
298
(eval ())
(push a1)
(push (cvalq #:lap386:arg2))
(push '4)
(push '8)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
297
(eval ())
(mov nil a3)
(mov a1 a2)
(pop a1)
(call #:lap386:mov)
(bra 118)
296
(cabne a1 'movxsp 299)
(push (@ 300))
(mov (cvalq #:lap386:vectors) a3)
(mov (cdr a3) (cvalq #:lap386:vectors))
(push (car a3))
(push 'esp)
(push (cvalq #:lap386:arg2))
(push '4)
(push '0)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
300
(eval ())
(mov nil a3)
(mov (cvalq #:lap386:arg1) a2)
(call #:lap386:mov)
(bra 118)
299
(cabne a1 'xspmov 301)
(push (cvalq #:lap386:arg2))
(push (@ 302))
(mov (cvalq #:lap386:vectors) a3)
(mov (cdr a3) (cvalq #:lap386:vectors))
(push (car a3))
(push 'esp)
(push (cvalq #:lap386:arg1))
(push '4)
(push '0)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
302
(eval ())
(mov nil a3)
(mov a1 a2)
(pop a1)
(call #:lap386:mov)
(bra 118)
301
(cabne a1 'sobgez 303)
(push (@ 304))
(push '255)
(push '8)
(push '72)
(push nil)
(push 't)
(mov '5 a4)
(bra #:lap386:op1arg)
304
(eval ())
(mov (cvalq #:lap386:arg2) a3)
(mov nil a2)
(mov '(15 141) a1)
(call #:lap386:go-etiq)
(bra 118)
303
(cabne a1 'sstack 305)
(mov nil a3)
(mov (cvalq #:lap386:arg1) a2)
(mov 'esp a1)
(call #:lap386:mov)
(bra 118)
305
(cabne a1 'stack 306)
(mov nil a3)
(mov 'esp a2)
(mov (cvalq #:lap386:arg1) a1)
(call #:lap386:mov)
(bra 118)
306
(cabne a1 'bri 307)
(push (@ 308))
(push '255)
(push '32)
(push nil)
(push nil)
(push nil)
(mov '5 a4)
(bra #:lap386:op1arg)
308
(eval ())
(bra 118)
307
(cabne a1 'calli 309)
(push (@ 310))
(push '255)
(push '16)
(push nil)
(push nil)
(push nil)
(mov '5 a4)
(bra #:lap386:op1arg)
310
(eval ())
(bra 118)
309
(cabne a1 'brx 311)
(push (@ 312))
(push '"L1")
(push (@ 313))
(push '"@")
(push a4)
(mov '2 a4)
(jmp catenate)
313
(eval ())
(push a1)
(mov '2 a4)
(jmp catenate)
312
(eval ())
(push (cvalq #:lap386:arg1))
(push a1)
(jcall ncons)
(mov (cvalq #:lap386:llabels) a2)
(jcall cons)
(mov a1 (cvalq #:lap386:llabels))
(push (@ 314))
(mov (cvalq #:lap386:vectors) a4)
(mov (cdr a4) (cvalq #:lap386:vectors))
(push (car a4))
(push (@ 315))
(push '@)
(push (& 4))
(mov '2 a4)
(jmp list)
315
(eval ())
(push a1)
(push (cvalq #:lap386:arg2))
(push '4)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:lap386:fill-vector)
314
(eval ())
(mov a1 (cvalq #:lap386:arg1))
(push (@ 316))
(push '255)
(push '32)
(push nil)
(push nil)
(push nil)
(mov '5 a4)
(bra #:lap386:op1arg)
316
(eval ())
(mov (& 0) a1)
(call #:lap386:foundlabel)
(push (& 1))
317
(bfcons (& 0) 318)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov nil a2)
(mov (car a1) a1)
(call #:lap386:val32)
(adjstk '1)
(bra 317)
318
(mov nil a1)
(adjstk '3)
(bra 118)
311
(cabne a1 'nop 319)
(mov '144 a1)
(call #:lap386:1byte)
(bra 118)
319
(push a1)
(mov '(setq #:lap386:f (getfn1 'ld-codop #:lap386:codop)) a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 320)
(push (@ 321))
(push (cvalq #:lap386:f))
(push (cvalq #:lap386:arg))
(mov '2 a4)
(jmp apply)
321
(eval ())
(bra 118)
320
(mov (cvalq #:lap386:codop) a3)
(mov '"instruction inconnue" a2)
(mov 'loader a1)
(jcall error)
118
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq obj))
(adjstk '7)
(return)
))
(loader'((fentry loaderesolve subr0)
(entry loaderesolve subr0)
(push (@ 101))
(push '((end)))
(mov '1 a4)
(jmp loader)
101
(eval ())
(return)
))
(defvar #:lap386:pc-current (if (boundp '#:lap386:pc-current) #:lap386:pc-current 0))
(defvar #:lap386:llabels (if (boundp '#:lap386:llabels) #:lap386:llabels ()))
(defvar #:lap386:llabels-nr (if (boundp '#:lap386:llabels-nr) #:lap386:llabels-nr ()))
(defvar #:lap386:fntname (if (boundp '#:lap386:fntname) #:lap386:fntname 'loader))
(defvar #:lap386:codop (if (boundp '#:lap386:codop) #:lap386:codop ()))
(defvar #:lap386:arg1 (if (boundp '#:lap386:arg1) #:lap386:arg1 ()))
(defvar #:lap386:arg2 (if (boundp '#:lap386:arg2) #:lap386:arg2 ()))
(defvar #:lap386:arg3 (if (boundp '#:lap386:arg3) #:lap386:arg3 ()))
(defvar #:lap386:nwl (if (boundp '#:lap386:nwl) #:lap386:nwl 0))
(loader'((fentry loader nsubr)
(entry loader nsubr)
(cnbge a4 '1 101)
(mov 'loader a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(mov (car a1) a4)
(bfnil a4 102)
(mov (cvalq #:lap386:verbose?) a4)
102
(mov a4 (cvalq #:lap386:talkp))
(push (@ 103))
(mov '0 a4)
(jmp #:system:ccode)
103
(eval ())
(mov a1 (cvalq #:lap386:pc-current))
(mov nil (cvalq #:lap386:llabels))
(mov nil (cvalq #:lap386:llabels-nr))
(mov 'loader (cvalq #:lap386:fntname))
104
(btnil (& 0) 105)
(mov '0 (cvalq #:lap386:nwl))
(push (cvalq #:lap386:pc-current))
(jcall #:system:ecode)
(mov a1 a2)
(pop a1)
(jcall gtadr)
(btnil a1 107)
(push (@ 108))
(mov '0 a4)
(jmp outchan)
108
(eval ())
(push a1)
(push (@ 109))
(push dlink)
(push prot)
(stack dlink)
(push (@ 111))
(push nil)
(mov '1 a4)
(jmp outchan)
111
(eval ())
(mov nil a3)
(mov 'errfcod a2)
(mov 'loader a1)
(jcall error)
(mov nil a1)
(mov '#:system:toplevel-tag a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 110) a3)
109
(push a3)
(push a2)
(push (@ 112))
(push (& 4))
(mov '1 a4)
(jmp outchan)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
110
(eval ())
(adjstk '1)
107
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 114))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 12) a1)
(mov (cdr a1) (& 12))
(mov (car a1) a1)
(call #:lap386:ins)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
114
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov a1 a4)
(btnil a4 113)
(mov (cvalq #:lap386:no-error-flag) a4)
113
(mov a4 (cvalq #:lap386:no-error-flag))
(btnil (cvalq #:lap386:talkp) 104)
(push (@ 117))
(mov '0 a4)
(jmp terpri)
117
(eval ())
(bra 104)
105
(mov '(endl) a1)
(call #:lap386:ins)
(btnil (cvalq #:lap386:no-error-flag) 118)
(push (@ 120))
(mov '0 a4)
(jmp #:system:ccode)
120
(eval ())
(push a1)
(push (@ 121))
(push (cvalq #:lap386:pc-current))
(mov '1 a4)
(jmp #:system:ccode)
121
(eval ())
(pop a1)
(adjstk '1)
(return)
118
(mov 't (cvalq #:lap386:no-error-flag))
(mov (cvalq #:lap386:fntname) a3)
(mov '"fonction non chargee" a2)
(mov 'loader a1)
(adjstk '1)
(jmp printerror)
))
(loader '((end)))
