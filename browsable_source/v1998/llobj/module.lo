(loader '((title |module.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'module)))
(defvar #:sys-package:colon 'module)
(add-feature 'module)
(defvar #:module:compiled-list (if (boundp '#:module:compiled-list) #:module:compiled-list ()))
(defvar #:module:interpreted-list (if (boundp '#:module:interpreted-list) #:module:interpreted-list ()))
(#:messages:put-message '#:module:errnmd 'french '"module inexistant" 'defmessage)
(#:messages:put-message '#:module:errnmd 'english '"module not found" 'defmessage)
'#:module:errnmd
(#:messages:put-message '#:module:errfpr 'french '"fichier prote'ge'" 'defmessage)
(#:messages:put-message '#:module:errfpr 'english '"protected file" 'defmessage)
'#:module:errfpr
(#:messages:put-message '#:module:warinm 'french '"chargement du module interpre'te'" 'defmessage)
(#:messages:put-message '#:module:warinm 'english '"load interpreted module" 'defmessage)
'#:module:warinm
(#:messages:put-message '#:module:errnodef 'french '"Je ne trouve pas la de'finition de" 'defmessage)
(#:messages:put-message '#:module:errnodef 'english '"can't find definition of" 'defmessage)
'#:module:errnodef
(defvar #:module:list-of-user-key '(defmodule files import export include))
(defvar #:module:endofheader ";;; Added automatically, don't type beyond this line.")
(defvar #:module:header ())
(defvar #:module:in-user-part ())
(loader'((fentry readdefmodule subr1)
(entry readdefmodule subr1)
(push a1)
(jcall probepathm)
(push a1)
(bfnil a1 101)
(mov (& 1) a3)
(mov '#:module:errnmd a2)
(mov 'readdefmodule a1)
(adjstk '2)
(jmp error)
101
(push (@ 103))
(mov '0 a4)
(jmp inchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(mov (& 5) a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
106
(eval ())
(push (cvalq #:sys-package:colon))
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'module a1)
(jcall cons)
(push nil)
(push nil)
(push '#:module:header)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push (cvalq #:sys-package:colon))
(mov (& 5) (cvalq #:sys-package:colon))
(push '2)
(push '(#:sys-package:itsoft #:sys-package:colon))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov nil (cvalq #:module:header))
(mov 't (cvalq #:module:in-user-part))
(push (@ 107))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
108
(push nil)
(push (cvalq #:system:read-case-flag))
(mov (& 1) (cvalq #:system:read-case-flag))
(push '1)
(push '(#:system:read-case-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall read)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:read-case-flag))
(adjstk '8)
(push a1)
(push 't)
(push (cvalq #:system:read-case-flag))
(mov (& 1) (cvalq #:system:read-case-flag))
(push '1)
(push '(#:system:read-case-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall read)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:read-case-flag))
(adjstk '8)
(mov a1 a2)
(pop a1)
(jcall cons)
(mov (& 14) a2)
(jcall cons)
(mov a1 (& 14))
(mov (car a1) a4)
(cabne (car a4) 'defmodule 111)
(mov (car a1) a3)
(mov (cdr a3) (cvalq #:sys-package:colon))
111
(mov (car a1) a1)
(mov (cvalq #:module:list-of-user-key) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 112)
(btnil (cvalq #:module:in-user-part) 114)
(push (@ 116))
(push (cvalq #:module:header))
(push (& 15))
(mov '2 a4)
(jmp append)
116
(eval ())
(mov a1 (& 13))
(mov nil (cvalq #:module:header))
(bra 108)
114
(mov '#:module:deadheader (& 12))
(bra 108)
112
(mov nil (cvalq #:module:in-user-part))
(bra 108)
109
(mov (& 1) dlink)
(adjstk '4)
107
(eval ())
(mov (& 9) a1)
(jcall nreverse)
(mov (& 10) a3)
(mov a1 a2)
(mov (& 8) a1)
(jcall acons)
(jcall nreverse)
(mov a1 (& 10))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:colon))
(mov (& 7) (cvalq #:sys-package:itsoft))
(adjstk '12)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 117))
(push (& 4))
(mov '1 a4)
(jmp inchan)
117
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry #:module:bol subr0)
(entry #:module:bol subr0)
(mov nil a3)
(mov 'bol a2)
(mov 'module a1)
(jcall super-itsoft)
(btnil (cvalq #:module:in-user-part) 101)
(push (@ 103))
(push (@ 104))
(mov '0 a4)
(jmp inbuf)
104
(eval ())
(push a1)
(push '0)
(push (@ 105))
(mov '0 a4)
(jmp inmax)
105
(eval ())
(diff '2 a1)
(push a1)
(mov '3 a4)
(jmp substring)
103
(eval ())
(mov (cvalq #:module:header) a2)
(jcall cons)
(mov a1 (cvalq #:module:header))
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry getdefmodule subr2)
(entry getdefmodule subr2)
(push a2)
(mov a1 a2)
(pop a1)
(jmp cassq)
))
(loader'((fentry setdefmodule subr3)
(entry setdefmodule subr3)
(push a3)
(push a2)
(push a1)
(push a2)
(mov a1 a2)
(pop a1)
(jcall assq)
(bfcons a1 101)
(mov (& 2) (cdr a1))
(mov (& 0) a1)
(adjstk '3)
(return)
101
(mov (& 2) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 a2)
(mov (& 0) a1)
(adjstk '3)
(jmp nconc1)
))
(loader'((fentry printdefmodule subr2)
(entry printdefmodule subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall readdefmodule)
(push a1)
(mov '#:module:header a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push a1)
(mov (& 2) a2)
(mov (& 1) a1)
(jcall equal)
(bfnil a1 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(mov (& 4) a1)
(jcall probepathm)
(push a1)
(bfnil a1 104)
(mov (& 5) a3)
(mov '#:module:errnmd a2)
(mov 'printdefmodule a1)
(jcall error)
(bra 105)
104
(push nil)
(push '0)
(push nil)
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov (& 3) (cvalq #:system:print-msgs))
(push (cvalq #:system:error-flag))
(mov (& 5) (cvalq #:system:error-flag))
(push '3)
(push '(#:system:debug #:system:print-msgs #:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 108))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(jcall openo)
(mov a1 (& 16))
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
108
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(mov (& 7) (cvalq #:system:print-msgs))
(mov (& 8) (cvalq #:system:debug))
(adjstk '12)
(bfnil a1 106)
(mov (& 0) a3)
(mov '#:module:errfpr a2)
(mov 'printdefmodule a1)
(jcall error)
(bra 105)
106
(push (@ 109))
(push (& 1))
(mov '1 a4)
(jmp outchan)
109
(eval ())
(btnil (& 2) 110)
(push (cvalq #:module:list-of-user-key))
(push 't)
112
(bfcons (& 1) 113)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a2)
(mov (& 7) a1)
(jcall getdefmodule)
(push a1)
(mov (& 1) a2)
(mov (& 7) a1)
(jcall getdefmodule)
(mov a1 a2)
(pop a1)
(jcall equal)
(adjstk '1)
(mov a1 (& 0))
(btnil a1 113)
(bra 112)
113
(mov (& 0) a4)
(adjstk '2)
(btnil a4 110)
(push (@ 114))
(mov '0 a4)
(jmp rmargin)
114
(eval ())
(push a1)
(push (@ 115))
(mov '0 a4)
(jmp printlevel)
115
(eval ())
(push a1)
(push (@ 116))
(mov '0 a4)
(jmp printlength)
116
(eval ())
(push a1)
(push (@ 117))
(push dlink)
(push prot)
(stack dlink)
(push (@ 119))
(push (@ 120))
(mov '0 a4)
(jmp outbuf)
120
(eval ())
(hgsize a1 a1)
(jcall |1+|)
(push a1)
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 121))
(push '200)
(mov '1 a4)
(jmp printlevel)
121
(eval ())
(push (@ 122))
(push '10000)
(mov '1 a4)
(jmp printlength)
122
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (& 16))
123
(bfcons (& 0) 124)
(push (@ 125))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
125
(eval ())
(bra 123)
124
(adjstk '1)
(push (@ 126))
(mov '0 a4)
(jmp print)
126
(eval ())
(push (@ 127))
(push (cvalq #:module:endofheader))
(mov '1 a4)
(jmp print)
127
(eval ())
(mov (cvalq #:module:list-of-user-key) a2)
(mov (& 18) a1)
(call #:module:print-rest-of-keys)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 118) a3)
117
(push a3)
(push a2)
(push (@ 128))
(push (& 4))
(mov '1 a4)
(jmp printlength)
128
(eval ())
(push (@ 129))
(push (& 5))
(mov '1 a4)
(jmp printlevel)
129
(eval ())
(push (@ 130))
(push (& 6))
(mov '1 a4)
(jmp rmargin)
130
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
118
(eval ())
(adjstk '3)
(bra 105)
110
(mov '#:module:deadheader a2)
(mov (& 4) a1)
(jcall getdefmodule)
(btnil a1 132)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:module:deadheader a2)
(mov (& 12) a1)
(jcall getdefmodule)
(push a1)
133
(bfcons (& 0) 134)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 135))
(push '"; ")
(push (& 2))
(mov '2 a4)
(jmp print)
135
(eval ())
(adjstk '1)
(bra 133)
134
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
132
(mov nil a2)
(mov (& 4) a1)
(call #:module:print-rest-of-keys)
105
(push (@ 136))
(push (@ 137))
(mov '0 a4)
(jmp outchan)
137
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
136
(eval ())
(push (@ 138))
(push (& 2))
(mov '1 a4)
(jmp outchan)
138
(eval ())
(adjstk '2)
102
(adjstk '2)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:module:print-rest-of-keys subr2)
(push a2)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(push (car a4))
(push (cdr a4))
(mov (& 1) a3)
(cabeq a3 '#:module:header 104)
(cabeq a3 '#:module:deadheader 104)
(mov (& 12) a2)
(mov a3 a1)
(jcall memq)
(bfnil a1 104)
(bfcons (& 0) 105)
(push (@ 107))
(push (& 2))
(mov '1 a4)
(jmp prin)
107
(eval ())
(push (@ 108))
(push '32)
(mov '1 a4)
(jmp princn)
108
(eval ())
(push (@ 109))
(push '40)
(mov '1 a4)
(jmp princn)
109
(eval ())
(push (@ 110))
(mov '0 a4)
(jmp terpri)
110
(eval ())
(mov (& 1) a4)
(cabeq a4 'cpimport 113)
(cabne a4 'cpenv 111)
113
(push (& 0))
114
(bfcons (& 0) 115)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(btcons (& 0) 116)
(push (@ 118))
(push (& 1))
(mov '1 a4)
(jmp print)
118
(eval ())
(bra 117)
116
(push (@ 119))
(push '40)
(mov '1 a4)
(jmp princn)
119
(eval ())
(push (& 0))
120
(bfcons (& 0) 121)
(push (@ 122))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
122
(eval ())
(bra 120)
121
(adjstk '1)
(push (@ 123))
(push '41)
(mov '1 a4)
(jmp princn)
123
(eval ())
117
(adjstk '1)
(bra 114)
115
(adjstk '1)
(bra 112)
111
(push (& 0))
124
(bfcons (& 0) 125)
(push (@ 126))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
126
(eval ())
(bra 124)
125
(adjstk '1)
112
(push (@ 127))
(push '41)
(mov '1 a4)
(jmp princn)
127
(eval ())
(push (@ 128))
(mov '0 a4)
(jmp terpri)
128
(eval ())
(bra 104)
105
(push (@ 129))
(push (& 2))
(mov '1 a4)
(jmp print)
129
(eval ())
(push (@ 130))
(push (& 1))
(mov '1 a4)
(jmp print)
130
(eval ())
104
(adjstk '3)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '9)
(return)
))
(loader'((fentry loadmodule nsubr)
(entry loadmodule nsubr)
(cnbge a4 '1 101)
(mov 'loadmodule a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov nil a2)
(mov nil a1)
(jcall cons)
(push a1)
(push (@ 102))
(push (@ 103))
(push (& 4))
(mov '1 a4)
(jmp concat)
103
(eval ())
(push a1)
(push (& 2))
(mov (& 4) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(mov '4 a4)
(bra #:module:loadmodule-aux)
102
(eval ())
(mov (& 0) a4)
(push (car a4))
104
(bfcons (& 0) 105)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:module:compiled-list) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (cvalq #:module:compiled-list))
(mov (cvalq #:module:interpreted-list) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (cvalq #:module:interpreted-list))
(mov (cvalq #:module:compiled-list) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:module:compiled-list))
(adjstk '1)
(bra 104)
105
(adjstk '1)
(mov (& 0) a4)
(push (cdr a4))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:module:compiled-list) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (cvalq #:module:compiled-list))
(mov (cvalq #:module:interpreted-list) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (cvalq #:module:interpreted-list))
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:module:interpreted-list))
(adjstk '1)
(bra 106)
107
(adjstk '1)
(mov (& 2) a1)
(adjstk '3)
(return)
))
(loader'((entry #:module:loadmodule-aux nsubr)
(mov (& 3) a1)
(jcall readdefmodule)
(push a1)
(btnil (& 1) 102)
(mov nil a4)
(bra 103)
102
(mov 't a4)
103
(btnil a4 101)
(mov (& 4) a1)
(call #:module:find-object-file)
(mov a1 a4)
101
(push a4)
(btnil a4 104)
(mov (& 4) a2)
(mov (car a2) a2)
(mov (& 5) a1)
(jcall cons)
(mov (& 4) a4)
(mov a1 (car a4))
(bra 105)
104
(mov (& 4) a2)
(mov (cdr a2) a2)
(mov (& 5) a1)
(jcall cons)
(mov (& 4) a4)
(mov a1 (cdr a4))
105
(push (cdr a4))
(mov 'import a2)
(mov (& 2) a1)
(jcall getdefmodule)
(push a1)
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 7) a2)
(mov (car a2) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 109)
(mov (& 7) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 109)
(bfnil (& 6) 110)
(mov (cvalq #:module:compiled-list) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 109)
110
(bfnil (& 6) 111)
(mov (cvalq #:module:interpreted-list) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 111)
(mov 't (& 2))
(bra 109)
111
(push (@ 113))
(push (& 1))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '4 a4)
(bra #:module:loadmodule-aux)
113
(eval ())
109
(adjstk '1)
(bra 106)
107
(adjstk '1)
(btnil (& 1) 115)
(mov (& 5) a4)
(cabne (cdr a4) (& 0) 116)
(mov 'loader a1)
(jcall featurep)
(bfnil a1 115)
116
(mov nil (& 1))
(mov (& 5) a2)
(mov (car a2) a2)
(mov (& 6) a1)
(jcall delq)
(mov (& 5) a4)
(mov a1 (car a4))
(push a4)
(mov (cdr a4) a2)
(mov (& 7) a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
115
(adjstk '1)
(btnil (& 0) 117)
(push (@ 119))
(mov '0 a4)
(jmp #:system:ccode)
119
(eval ())
(push a1)
(push (@ 120))
(push dlink)
(push prot)
(stack dlink)
(push (cvalq #:system:read-case-flag))
(mov 'loadmodule (cvalq #:system:read-case-flag))
(push (@ 122))
(mov (& 6) a4)
(push (car a4))
(push (cdr a4))
(push 't)
(mov '3 a4)
(jmp funcall)
122
(eval ())
(cabne (cvalq #:system:read-case-flag) 'loadmodule 123)
(mov (& 0) (cvalq #:system:read-case-flag))
(mov (& 0) a1)
(bra 124)
123
(mov nil a1)
124
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 121) a3)
120
(push a3)
(push a2)
(push (@ 125))
(mov '0 a4)
(jmp #:system:ccode)
125
(eval ())
(mov a1 a2)
(mov (& 3) a1)
(jcall cons)
(mov '#:module:limit a3)
(mov a1 a2)
(mov (& 9) a1)
(jcall putprop)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
121
(eval ())
(adjstk '7)
(return)
117
(btnil (cvalq #:system:error-flag) 127)
(mov (& 5) a3)
(mov '#:module:warinm a2)
(mov 'loadmodule a1)
(jcall printerror)
127
(mov 'files a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push a1)
128
(bfcons (& 0) 129)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov 't a2)
(mov (& 0) a1)
(jcall libloadfile)
(adjstk '1)
(bra 128)
129
(mov nil a1)
(adjstk '7)
(return)
))
(loader'((entry #:module:find-object-file subr1)
(push a1)
(push (cvalq #:system:object-file-formats))
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (car a4) a4)
(push a4)
(push (@ 103))
(push (& 2))
(push (& 6))
(mov '2 a4)
(jmp funcall)
103
(eval ())
(btnil a1 104)
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 a4)
(bra 105)
104
(mov nil a4)
105
(adjstk '2)
(mov a4 (& 0))
(bfnil a4 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(defvar #:system:object-file-formats '((probepatho loadfile)))
(loader'((entry filegetdef subr2)
(push a2)
(push a1)
(jcall probepathf)
(push a1)
(bfnil a1 101)
(mov (& 1) a3)
(mov 'errfile a2)
(mov 'filegetdef a1)
(adjstk '3)
(jmp error)
101
(push nil)
(push nil)
(push (@ 103))
(mov '0 a4)
(jmp inchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(mov (& 7) a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
106
(eval ())
(push (@ 107))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
108
(jcall read)
(mov a1 (& 9))
(bfcons a1 108)
(mov (car a1) a1)
(cabeq a1 'de 114)
(cabeq a1 'defun 114)
(cabeq a1 'df 114)
(cabeq a1 'defmacro 114)
(cabeq a1 'dm 114)
(cabne a1 'dmd 108)
114
(mov (& 9) a4)
(mov (cdr a4) a4)
(cabne (car a4) (& 12) 108)
(push (@ 117))
(push (@ 118))
(mov '0 a4)
(jmp inchan)
118
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
117
(eval ())
(mov (& 9) (& 8))
(mov (& 9) a1)
(mov 'eof a2)
(jmp #:llcp:exit)
109
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 120))
(push (& 4))
(mov '1 a4)
(jmp inchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
(mov (& 0) a1)
(adjstk '5)
(return)
))
(loader'((fentry autoloadmodule fsubr)
(entry autoloadmodule fsubr)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(push a1)
(mov 'export a2)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 106)
(mov 'files a2)
(mov (& 2) a1)
(jcall getdefmodule)
(mov a1 a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:module:makeautoload)
106
(adjstk '1)
(bra 103)
104
(adjstk '3)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:module:makeautoload subr3)
(push a3)
(push a2)
(push a1)
(push nil)
(push nil)
101
(bfnil (& 1) 102)
(btnil (& 4) 102)
(mov (& 4) a1)
(mov (cdr a1) (& 4))
(mov (& 2) a2)
(mov (car a1) a1)
(call filegetdef)
(mov a1 (& 1))
(bra 101)
102
(bfnil (& 1) 103)
(mov (& 2) a3)
(mov '#:module:errnodef a2)
(mov 'autoload a1)
(adjstk '5)
(jmp error)
103
(mov (& 1) a1)
(mov (car a1) a1)
(cabeq a1 'de 107)
(cabne a1 'defun 106)
107
(push (@ 108))
(push '#:module:args)
(push (@ 109))
(push '#:module:std-autoload)
(push (@ 110))
(push 'quote)
(push (& 8))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
109
(eval ())
(push a1)
(push (@ 111))
(push 'apply)
(push (@ 112))
(push 'quote)
(push (& 9))
(mov '2 a4)
(jmp list)
112
(eval ())
(push a1)
(push '(#:module:args))
(mov '3 a4)
(jmp mcons)
111
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
108
(eval ())
(mov a1 (& 1))
(mov 'expr (& 0))
(bra 105)
106
(cabne a1 'df 113)
(push (@ 114))
(push '#:module:args)
(push (@ 115))
(push '#:module:std-autoload)
(push (@ 116))
(push 'quote)
(push (& 8))
(mov '2 a4)
(jmp list)
116
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(push (@ 117))
(push 'apply)
(push (@ 118))
(push 'quote)
(push (& 9))
(mov '2 a4)
(jmp list)
118
(eval ())
(push a1)
(push '(#:module:args))
(mov '3 a4)
(jmp mcons)
117
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
114
(eval ())
(mov a1 (& 1))
(mov 'fexpr (& 0))
(bra 105)
113
(cabeq a1 'defmacro 120)
(cabne a1 'dmd 119)
120
(push (@ 121))
(push '#:module:args)
(push (@ 122))
(push '#:module:std-autoload)
(push (@ 123))
(push 'quote)
(push (& 8))
(mov '2 a4)
(jmp list)
123
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
122
(eval ())
(push a1)
(push (@ 124))
(push 'cons)
(push (@ 125))
(push 'quote)
(push (& 9))
(mov '2 a4)
(jmp list)
125
(eval ())
(push a1)
(push '(#:module:args))
(mov '3 a4)
(jmp mcons)
124
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
121
(eval ())
(mov a1 (& 1))
(mov 'dmacro (& 0))
(bra 105)
119
(cabne a1 'dm 126)
(push (@ 127))
(push '#:module:args)
(push (@ 128))
(push '#:module:std-autoload)
(push (@ 129))
(push 'quote)
(push (& 8))
(mov '2 a4)
(jmp list)
129
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
128
(eval ())
(push a1)
(push '(#:module:args))
(mov '3 a4)
(jmp mcons)
127
(eval ())
(mov a1 (& 1))
(mov 'macro (& 0))
(bra 105)
126
(mov (& 1) a3)
(mov 'errbdf a2)
(mov 'autoload a1)
(jcall error)
105
(mov (& 1) a3)
(mov (& 0) a2)
(mov (& 2) a1)
(jcall setfn)
(mov (& 3) a2)
(bfnil a2 131)
(mov (& 4) a2)
131
(mov 'autoload a3)
(mov (& 2) a1)
(adjstk '5)
(jmp putprop)
))
(loader'((fentry #:module:std-autoload subr1)
(entry #:module:std-autoload subr1)
(push a1)
(jcall valfn)
(push a1)
(mov 'autoload a2)
(mov (& 1) a1)
(jcall getprop)
(push nil)
(push a1)
(bfcons a1 101)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov 't a2)
(mov (& 0) a1)
(jcall libloadfile)
(adjstk '1)
(bra 103)
104
(adjstk '1)
(bra 102)
101
(push (@ 105))
(push a1)
(mov '1 a4)
(jmp loadmodule)
105
(eval ())
102
(mov (& 3) a1)
(jcall valfn)
(cabne a1 (& 2) 106)
(mov (& 0) a2)
(mov (& 3) a1)
(jcall cons)
(mov a1 a3)
(mov '#:module:errnodef a2)
(mov 'autoload a1)
(adjstk '4)
(jmp error)
106
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry autoloadp subr1)
(entry autoloadp subr1)
(mov 'autoload a2)
(jmp getprop)
))
(loader '((end)))
