(loader '((title |macedit.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'macedit)))
(putprop 'buffer '(((vector #:edit:null-strg) 3 0 () () 0) buffer modif nolgn markx marky ldo) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:buffer:buffer '#:buffer:buffer 'setf-inverse) '#:buffer:buffer)))
(if (featurep 'compiler) (progn (defmacro-open #:buffer:buffer (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:buffer:modif '#:buffer:modif 'setf-inverse) '#:buffer:modif)))
(if (featurep 'compiler) (progn (defmacro-open #:buffer:modif (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:buffer:nolgn '#:buffer:nolgn 'setf-inverse) '#:buffer:nolgn)))
(if (featurep 'compiler) (progn (defmacro-open #:buffer:nolgn (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:buffer:markx '#:buffer:markx 'setf-inverse) '#:buffer:markx)))
(if (featurep 'compiler) (progn (defmacro-open #:buffer:markx (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:buffer:marky '#:buffer:marky 'setf-inverse) '#:buffer:marky)))
(if (featurep 'compiler) (progn (defmacro-open #:buffer:marky (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:buffer:ldo '#:buffer:ldo 'setf-inverse) '#:buffer:ldo)))
(if (featurep 'compiler) (progn (defmacro-open #:buffer:ldo (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(putprop 'edit '(((#:buffer:make) 0 0) pbuffer curx cury) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:edit:pbuffer '#:edit:pbuffer 'setf-inverse) '#:edit:pbuffer)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:pbuffer (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:curx '#:edit:curx 'setf-inverse) '#:edit:curx)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:curx (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:cury '#:edit:cury 'setf-inverse) '#:edit:cury)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:cury (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry buf-new dmsubr)
(entry buf-new dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '0)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry buf-link dmsubr)
(entry buf-link dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '1)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry buf-unlink dmsubr)
(entry buf-unlink dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '2)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry buf-readonly dmsubr)
(entry buf-readonly dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '42)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry buf-readwrite dmsubr)
(entry buf-readwrite dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '43)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-top dmsubr)
(entry cur-top dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '3)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-buttom dmsubr)
(entry cur-buttom dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '4)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-begline dmsubr)
(entry cur-begline dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '5)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-endline dmsubr)
(entry cur-endline dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '6)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-left dmsubr)
(entry cur-left dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '7)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-right dmsubr)
(entry cur-right dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '8)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-up dmsubr)
(entry cur-up dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '9)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-down dmsubr)
(entry cur-down dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '10)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry cur-ygoto dmsubr)
(entry cur-ygoto dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '11)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry cur-xgoto dmsubr)
(entry cur-xgoto dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '12)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry char-insert dmsubr)
(entry char-insert dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '13)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry char-delete dmsubr)
(entry char-delete dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '14)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry char-delete-back dmsubr)
(entry char-delete-back dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '15)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry char-transpose dmsubr)
(entry char-transpose dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '41)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry word-insert dmsubr)
(entry word-insert dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '16)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry word-delete dmsubr)
(entry word-delete dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '17)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry word-delete-back dmsubr)
(entry word-delete-back dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '18)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry word-first-char dmsubr)
(entry word-first-char dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '19)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry word-last-char dmsubr)
(entry word-last-char dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '20)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry word-left dmsubr)
(entry word-left dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '21)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry word-search dmsubr)
(entry word-search dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '22)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry word-reverse-search dmsubr)
(entry word-reverse-search dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '23)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry word-get-symbol dmsubr)
(entry word-get-symbol dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '24)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry line-insert dmsubr)
(entry line-insert dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '25)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry line-new dmsubr)
(entry line-new dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '26)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry line-break dmsubr)
(entry line-break dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '27)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry line-return dmsubr)
(entry line-return dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '28)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry line-delete dmsubr)
(entry line-delete dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '29)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry line-get dmsubr)
(entry line-get dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '30)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry line-bol dmsubr)
(entry line-bol dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '31)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry line-eol dmsubr)
(entry line-eol dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '32)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry mark-set dmsubr)
(entry mark-set dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '33)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry mark-exchange dmsubr)
(entry mark-exchange dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '34)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry mark-copy dmsubr)
(entry mark-copy dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '35)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry mark-delete dmsubr)
(entry mark-delete dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '36)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry file-read dmsubr)
(entry file-read dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '37)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry file-insert dmsubr)
(entry file-insert dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '38)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry file-print dmsubr)
(entry file-print dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (@ 101))
(push 'trap-edit)
(push '39)
(push a1)
(push a4)
(mov '4 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry begin-expr dmsubr)
(entry begin-expr dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '40)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry next-expr dmsubr)
(entry next-expr dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '44)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((fentry previous-expr dmsubr)
(entry previous-expr dmsubr)
(mov (car a1) a1)
(push (@ 101))
(push 'trap-edit)
(push '45)
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader '((end)))
