(loader '((title |edlin.lo|)))
(if (not (>= (version) 15.21)) (progn (error 'load 'erricf 'edlin)))
(defvar #:sys-package:colon 'edlin)
(add-feature 'edlin)
(setq #:sys-package:colon '#:edlin:history)
(defvar #:edlin:history:last-string)
(defvar #:edlin:history:maxlen 100)
(defvar #:edlin:history:history '("" "; In principium erat Le-Lisp..."))
(defvar #:edlin:history:position #:edlin:history:history)
(loader'((entry #:edlin:history:show subr0)
(push (@ 101))
(push '2)
(mov '1 a4)
(jmp terpri)
101
(eval ())
(mov (cvalq #:edlin:history:history) a1)
(mov (cdr a1) a1)
(bra #:edlin:history:show-aux)
))
(loader'((entry #:edlin:history:show-aux subr1)
(push a1)
(bfnil a1 101)
(mov '0 a1)
(adjstk '1)
(return)
101
(mov (cdr a1) a1)
(call #:edlin:history:show-aux)
(push a1)
(push (@ 103))
(plus '1 a1)
(mov a1 (& 1))
(push a1)
(push '"        ")
(mov (& 4) a4)
(push (car a4))
(mov '3 a4)
(jmp print)
103
(eval ())
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:edlin:history:previous subr0)
(mov (cvalq #:edlin:history:position) a4)
(btnil (cdr a4) 101)
(mov (cdr a4) (cvalq #:edlin:history:position))
(bra 102)
101
(jcall tybeep)
102
(mov (cvalq #:edlin:history:position) a1)
(mov (car a1) a1)
(return)
))
(loader'((entry #:edlin:history:next subr0)
(call #:edlin:history:endp)
(btnil a1 101)
(jcall tybeep)
(bra 102)
101
(push (cvalq #:edlin:history:history))
103
(mov (& 0) a4)
(cabeq (cdr a4) (cvalq #:edlin:history:position) 104)
(mov (cdr a4) (& 0))
(bra 103)
104
(mov a4 (cvalq #:edlin:history:position))
(adjstk '1)
102
(mov (cvalq #:edlin:history:position) a1)
(mov (car a1) a1)
(return)
))
(loader'((fentry #:edlin:history:add subr1)
(entry #:edlin:history:add subr1)
(push a1)
(push (cvalq #:edlin:history:history))
(mov (cvalq #:edlin:history:maxlen) a4)
(diff '2 a4)
(bra 102)
101
(push a4)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
102
(sobgez a4 101)
(mov (& 0) a4)
(bfnil (cdr a4) 103)
(mov nil a1)
(jcall ncons)
(bra 104)
103
(push (cdr a4))
(mov nil (cdr a4))
(pop a1)
104
(mov (cvalq #:edlin:history:history) a2)
(push (car a2))
(mov (& 2) (car a2))
(mov a2 a3)
(pop a2)
(jcall rplac)
(mov a1 (cvalq #:edlin:history:history))
(adjstk '2)
(return)
))
(loader'((entry #:edlin:history:find subr1)
(push a1)
(push (cvalq #:edlin:history:position))
(push (@ 101))
(push 'found)
(push dlink)
(push tag)
(stack dlink)
102
(mov (cvalq #:edlin:history:position) a4)
(btnil (cdr a4) 103)
(call #:edlin:history:previous)
(push (@ 106))
(push (& 6))
(mov (cvalq #:edlin:history:position) a4)
(push (car a4))
(mov '2 a4)
(jmp index)
106
(eval ())
(btnil a1 102)
(mov (cvalq #:edlin:history:position) a1)
(mov (car a1) a1)
(mov 'found a2)
(jmp #:llcp:exit)
103
(jcall tybeep)
(mov (& 4) (cvalq #:edlin:history:position))
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:edlin:history:last subr0)
(mov (cvalq #:edlin:history:history) (cvalq #:edlin:history:position))
(mov (cvalq #:edlin:history:history) a1)
(mov (car a1) a1)
(return)
))
(loader'((entry #:edlin:history:first subr0)
(mov (cvalq #:edlin:history:history) a1)
(jcall last)
(mov a1 (cvalq #:edlin:history:position))
(mov (car a1) a1)
(return)
))
(loader'((entry #:edlin:history:endp subr0)
(mov (cvalq #:edlin:history:history) a2)
(mov (cvalq #:edlin:history:position) a1)
(jmp eq)
))
(setq #:sys-package:colon '#:edlin:util)
(defvar #:edlin:util:tampon (makestring 256 32))
(loader'((entry #:edlin:util:insert-in-string nsubr)
(cabne (& 2) (& 1) 101)
(hbmovx (& 0) (& 3) (& 2))
(mov (& 0) a1)
(adjstk '4)
(return)
101
(push (@ 103))
(push (cvalq #:edlin:util:tampon))
(push '0)
(push (& 6))
(push (& 6))
(mov (& 6) a4)
(diff (& 7) a4)
(push a4)
(mov '5 a4)
(jmp bltstring)
103
(eval ())
(hbmovx (& 0) (& 3) (& 2))
(push (@ 104))
(push (& 4))
(mov (& 4) a4)
(plus '1 a4)
(push a4)
(push (cvalq #:edlin:util:tampon))
(push '0)
(mov (& 6) a4)
(diff (& 7) a4)
(push a4)
(mov '5 a4)
(jmp bltstring)
104
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:edlin:util:delete-in-string subr3)
(push a3)
(push a2)
(push a1)
(cabne a2 a3 101)
(push a2)
(plus '1 a2)
(hbxmov a1 a2 a4)
(pop a2)
(hbmovx a4 a1 a2)
(mov a4 a1)
(adjstk '3)
(return)
101
(push (@ 103))
(push (cvalq #:edlin:util:tampon))
(push '0)
(push a1)
(plus '1 a2)
(push a2)
(diff (& 6) a3)
(diff '1 a3)
(push a3)
(mov '5 a4)
(jmp bltstring)
103
(eval ())
(push (@ 104))
(push (& 1))
(push (& 3))
(push (cvalq #:edlin:util:tampon))
(push '0)
(mov (& 7) a4)
(diff (& 6) a4)
(diff '1 a4)
(push a4)
(mov '5 a4)
(jmp bltstring)
104
(eval ())
(adjstk '3)
(return)
))
(setq #:sys-package:colon 'edlin)
(loader'((entry #:edlin:image:redisplay subr0)
(jcall tycr)
(jcall tycleol)
(jcall tyflush)
(push (@ 101))
(mov '0 a4)
(jmp prompt)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp prompt)
102
(eval ())
(jcall slength)
(mov a1 a2)
(pop a1)
(jcall tystring)
(mov '0 a1)
(bra #:edlin:image:redisplay-eol)
))
(loader'((entry #:edlin:image:redisplay-eol subr1)
(push a1)
(push (cvalq #:edlin:pos))
(mov a1 (cvalq #:edlin:pos))
(push '1)
(push '(#:edlin:pos))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:edlin:image:tycleol)
(mov (cvalq #:edlin:max) a1)
(call #:edlin:image:move)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:edlin:pos))
(adjstk '7)
(call #:edlin:image:tycleol)
(mov (cvalq #:edlin:pos) (& 0))
(push (cvalq #:edlin:max))
(push (cvalq #:edlin:pos))
(mov (& 1) (cvalq #:edlin:pos))
(push '1)
(push '(#:edlin:pos))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 8) a1)
(call #:edlin:image:move)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:edlin:pos))
(adjstk '9)
(return)
))
(loader'((entry #:edlin:image:move subr1)
(push a1)
(cnbge (cvalq #:edlin:pos) a1 101)
(push (cvalq #:edlin:pos))
103
(mov (& 1) a2)
(mov (& 0) a1)
(jcall eq)
(bfnil a1 104)
(hbxmov (cvalq #:edlin:inbuf) (& 0) a4)
(push a4)
(cnbge a4 '32 106)
(mov '94 a1)
(jcall tycn)
(mov (& 0) a4)
(lor '64 a4)
(mov a4 (& 0))
106
(mov a4 a1)
(jcall tycn)
(adjstk '1)
(mov (& 0) a4)
(plus '1 a4)
(mov a4 (& 0))
(bra 103)
104
(adjstk '2)
(return)
101
(cnble (cvalq #:edlin:pos) a1 107)
(push (cvalq #:edlin:pos))
109
(mov (& 1) a2)
(mov (& 0) a1)
(jcall eq)
(bfnil a1 110)
(mov (& 0) a4)
(diff '1 a4)
(mov a4 (& 0))
(hbxmov (cvalq #:edlin:inbuf) a4 a4)
(push a4)
(cnbge a4 '32 112)
(mov '94 a1)
(jcall tybs)
(mov (& 0) a4)
(lor '64 a4)
(mov a4 (& 0))
112
(mov a4 a1)
(jcall tybs)
(adjstk '1)
(bra 109)
110
(adjstk '2)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:edlin:image:insert subr1)
(cabne (cvalq #:edlin:pos) (cvalq #:edlin:max) 101)
(push a1)
(cnbge a1 '32 104)
(mov '94 a1)
(jcall tycn)
(mov (& 0) a4)
(lor '64 a4)
(mov a4 (& 0))
104
(mov (& 0) a1)
(adjstk '1)
(jmp tycn)
101
(push a1)
(cnbge a1 '32 108)
(mov '94 a1)
(jcall tyinsch)
(mov (& 0) a4)
(lor '64 a4)
(mov a4 (& 0))
108
(mov (& 0) a1)
(jcall tyinsch)
(adjstk '1)
(bfnil a1 105)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(mov a4 a1)
(bra #:edlin:image:redisplay-eol)
105
(mov nil a1)
(return)
))
(loader'((entry #:edlin:image:delete subr1)
(push a1)
(cnbge a1 '32 104)
(mov '94 a1)
(jcall tydelcn)
(mov (& 0) a4)
(lor '64 a4)
(mov a4 (& 0))
104
(mov (& 0) a1)
(jcall tydelcn)
(adjstk '1)
(bfnil a1 101)
(mov (cvalq #:edlin:pos) a1)
(bra #:edlin:image:redisplay-eol)
101
(mov nil a1)
(return)
))
(loader'((entry #:edlin:image:delete-without-redisplay subr1)
(push a1)
(cnbge a1 '32 102)
(mov '94 a1)
(jcall tydelcn)
(mov (& 0) a4)
(lor '64 a4)
(mov a4 (& 0))
102
(mov (& 0) a1)
(adjstk '1)
(jmp tydelcn)
))
(loader'((entry #:edlin:image:tycleol subr0)
(jcall tycleol)
(bfnil a1 102)
(mov '32 a1)
(jcall tycn)
(mov '32 a1)
(jcall tybs)
102
(jmp tyflush)
))
(setq #:sys-package:colon 'edlin)
(defvar #:edlin:inbuf)
(defvar #:edlin:kill-buffer (copy (inbuf)))
(defvar #:edlin:kill-length 0)
(defvar #:edlin:max)
(defvar #:edlin:pos)
(defvar #:edlin:loop 1000)
(loader'((fentry #:edlin:bol subr0)
(entry #:edlin:bol subr0)
(push (@ 104))
(mov '0 a4)
(jmp inchan)
104
(eval ())
(btfix a1 103)
(btnil (cvalq #:system:real-terminal-flag) 103)
(btnil (cvalq #:system:line-mode-flag) 101)
103
(mov nil a3)
(mov 'bol a2)
(mov 'edlin a1)
(jmp super-itsoft)
101
(push (@ 105))
(mov '0 a4)
(jmp inbuf)
105
(eval ())
(push nil)
(push '0)
(push '0)
(push (cvalq #:edlin:inbuf))
(mov a1 (cvalq #:edlin:inbuf))
(push (cvalq #:edlin:max))
(mov (& 2) (cvalq #:edlin:max))
(push (cvalq #:edlin:pos))
(mov (& 4) (cvalq #:edlin:pos))
(push (cvalq #:edlin:last-string))
(mov (& 6) (cvalq #:edlin:last-string))
(push '4)
(push '(#:edlin:inbuf #:edlin:max #:edlin:pos #:edlin:last-string))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 106))
(mov '0 a4)
(jmp prompt)
106
(eval ())
(push a1)
(push (@ 107))
(mov '0 a4)
(jmp prompt)
107
(eval ())
(jcall slength)
(mov a1 a2)
(pop a1)
(jcall tystring)
(call #:edlin:history:endp)
(bfnil a1 109)
(mov '14 a1)
(call #:edlin:do-command)
109
(push (@ 110))
(push 'eoi)
(push dlink)
(push tag)
(stack dlink)
111
(jcall tyi)
(call #:edlin:work-on)
(bra 111)
112
(mov (& 1) dlink)
(adjstk '4)
110
(eval ())
(jcall tynewline)
(push (@ 113))
(push (cvalq #:edlin:max))
(mov '1 a4)
(jmp inmax)
113
(eval ())
(push (@ 114))
(push '0)
(mov '1 a4)
(jmp inpos)
114
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:edlin:last-string))
(mov (& 7) (cvalq #:edlin:pos))
(mov (& 8) (cvalq #:edlin:max))
(mov (& 9) (cvalq #:edlin:inbuf))
(adjstk '13)
(return)
))
(loader'((entry #:edlin:work-on subr1)
(push a1)
(cabne (cvalq #:edlin:pos) '0 101)
(cabne (cvalq #:edlin:max) '0 101)
(push (@ 104))
(push a1)
(mov '1 a4)
(jmp typecn)
104
(eval ())
(cabeq a1 'cmacro 103)
(push (@ 105))
(push (& 1))
(mov '1 a4)
(jmp typecn)
105
(eval ())
(cabne a1 'smacro 101)
103
(mov (& 0) a1)
(adjstk '1)
(bra #:edlin:insert)
101
(mov (& 0) a1)
(call #:edlin:do-command)
(bfnil a1 106)
(mov (& 0) a1)
(adjstk '1)
(bra #:edlin:insert)
106
(adjstk '1)
(return)
))
(loader'((entry #:edlin:insert subr1)
(push a1)
(push (@ 101))
(push (cvalq #:edlin:inbuf))
(push (cvalq #:edlin:pos))
(push (cvalq #:edlin:max))
(push a1)
(mov '4 a4)
(bra #:edlin:util:insert-in-string)
101
(eval ())
(mov (cvalq #:edlin:pos) a4)
(plus '1 a4)
(mov a4 (cvalq #:edlin:pos))
(mov (cvalq #:edlin:max) a3)
(plus '1 a3)
(mov a3 (cvalq #:edlin:max))
(mov (& 0) a1)
(call #:edlin:image:insert)
(push (cvalq #:edlin:max))
(mov (cvalq #:edlin:inbuf) a1)
(jcall slength)
(pop a4)
(cnblt a4 a1 102)
(mov nil a1)
(mov 'eoi a2)
(jmp #:llcp:exit)
(adjstk '1)
(return)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:edlin:delete subr1)
(entry #:edlin:delete subr1)
(push a1)
(mov (cvalq #:edlin:max) a3)
(mov (cvalq #:edlin:pos) a2)
(mov (cvalq #:edlin:inbuf) a1)
(call #:edlin:util:delete-in-string)
(mov (cvalq #:edlin:max) a4)
(diff '1 a4)
(mov a4 (cvalq #:edlin:max))
(mov (& 0) a1)
(adjstk '1)
(bra #:edlin:image:delete)
))
(loader'((entry #:edlin:delete-without-redisplay subr1)
(push a1)
(mov (cvalq #:edlin:max) a3)
(mov (cvalq #:edlin:pos) a2)
(mov (cvalq #:edlin:inbuf) a1)
(call #:edlin:util:delete-in-string)
(mov (cvalq #:edlin:max) a4)
(diff '1 a4)
(mov a4 (cvalq #:edlin:max))
(mov (& 0) a1)
(adjstk '1)
(bra #:edlin:image:delete-without-redisplay)
))
(loader'((entry #:edlin:delete-backword subr0)
101
(cabeq (cvalq #:edlin:pos) '0 105)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(hbxmov (cvalq #:edlin:inbuf) a4 a1)
(call #:edlin:alphap)
(bfnil a1 105)
(cnble (cvalq #:edlin:pos) '0 101)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(mov a4 a1)
(jcall #:edlin:move)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:delete-without-redisplay)
(bra 101)
105
(cnble (cvalq #:edlin:pos) '0 106)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(hbxmov (cvalq #:edlin:inbuf) a4 a1)
(call #:edlin:alphap)
(btnil a1 106)
(cnble (cvalq #:edlin:pos) '0 105)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(mov a4 a1)
(jcall #:edlin:move)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:delete-without-redisplay)
(bra 105)
106
(mov (cvalq #:edlin:pos) a1)
(bra #:edlin:image:redisplay-eol)
))
(loader'((entry #:edlin:delete-forword subr0)
101
(cabeq (cvalq #:edlin:pos) (cvalq #:edlin:max) 105)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:alphap)
(bfnil a1 105)
(cnbge (cvalq #:edlin:pos) (cvalq #:edlin:max) 101)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:delete-without-redisplay)
(bra 101)
105
(cnbge (cvalq #:edlin:pos) (cvalq #:edlin:max) 106)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:alphap)
(btnil a1 106)
(cnbge (cvalq #:edlin:pos) (cvalq #:edlin:max) 105)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:delete-without-redisplay)
(bra 105)
106
(mov (cvalq #:edlin:pos) a1)
(bra #:edlin:image:redisplay-eol)
))
(loader'((fentry #:edlin:move subr1)
(entry #:edlin:move subr1)
(push a1)
(call #:edlin:image:move)
(mov (& 0) (cvalq #:edlin:pos))
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:edlin:do-command subr1)
(push a1)
(push (@ 101))
(mov '#:edlin:do-command a1)
(jcall #:llcp:block)
(mov (& 4) a1)
(cabne a1 '1 103)
(mov '0 a1)
(jcall #:edlin:move)
(bra 102)
103
(cabne a1 '5 104)
(mov (cvalq #:edlin:max) a1)
(jcall #:edlin:move)
(bra 102)
104
(cabne a1 '2 105)
(cnble (cvalq #:edlin:pos) '0 102)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(mov a4 a1)
(jcall #:edlin:move)
(bra 102)
105
(cabne a1 '6 108)
(cnbge (cvalq #:edlin:pos) (cvalq #:edlin:max) 102)
(mov (cvalq #:edlin:pos) a4)
(plus '1 a4)
(mov a4 a1)
(jcall #:edlin:move)
(bra 102)
108
(cabeq a1 '13 112)
(cabne a1 '10 111)
112
(call #:edlin:store-line)
(call #:edlin:history:last)
(mov 'eoi a2)
(jmp #:llcp:exit)
111
(cabne a1 '15 113)
(call #:edlin:store-line)
(mov 'eoi a2)
(jmp #:llcp:exit)
113
(cabeq a1 '8 115)
(cabne a1 '127 114)
115
(cnble (cvalq #:edlin:pos) '0 102)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(mov a4 a1)
(jcall #:edlin:move)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(jcall #:edlin:delete)
(bra 102)
114
(cabne a1 '4 118)
(cnbge (cvalq #:edlin:pos) (cvalq #:edlin:max) 102)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(jcall #:edlin:delete)
(bra 102)
118
(cabne a1 '11 121)
(mov nil (cvalq #:edlin:last-string))
(call #:edlin:delete-end-of-line)
(bra 102)
121
(cabeq a1 '24 123)
(cabne a1 '21 122)
123
(mov nil (cvalq #:edlin:last-string))
(call #:edlin:delete-begining-of-line)
(bra 102)
122
(cabne a1 '25 124)
(mov (cvalq #:edlin:kill-length) a2)
(mov (cvalq #:edlin:kill-buffer) a1)
(call #:edlin:insert-substring)
(bra 102)
124
(cabne a1 '9 125)
(call #:edlin:history:previous)
(call #:edlin:replace-string)
(bra 102)
125
(cabne a1 '14 126)
(call #:edlin:history:next)
(call #:edlin:replace-string)
(bra 102)
126
(cabne a1 '20 127)
(cnble (cvalq #:edlin:pos) '1 102)
(mov (cvalq #:edlin:pos) a4)
(diff '2 a4)
(hbxmov (cvalq #:edlin:inbuf) a4 a4)
(mov (cvalq #:edlin:pos) a3)
(diff '1 a3)
(hbxmov (cvalq #:edlin:inbuf) a3 a3)
(push a3)
(push a4)
(mov (cvalq #:edlin:pos) a2)
(diff '2 a2)
(mov a2 a1)
(jcall #:edlin:move)
(mov (& 0) a1)
(jcall #:edlin:delete)
(mov (& 1) a1)
(jcall #:edlin:delete)
(mov (& 1) a1)
(call #:edlin:insert)
(mov (& 0) a1)
(call #:edlin:insert)
(adjstk '2)
(bra 102)
127
(cabne a1 '12 130)
(call #:edlin:redisplay)
(bra 102)
130
(cabne a1 '92 131)
(jcall tyi)
(call #:edlin:insert)
(bra 102)
131
(cabne a1 '27 132)
(jcall tyi)
(call #:edlin:do-esc-command)
(bra 102)
132
(cabne a1 '41 133)
(call #:edlin:insert-rpar)
(bra 102)
133
(mov nil a1)
(mov '#:edlin:do-command a2)
(jmp #:llcp:retfrom)
102
(mov 't a1)
(return)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:edlin:do-esc-command subr1)
(push a1)
(push (@ 101))
(mov '#:edlin:do-esc-command a1)
(jcall #:llcp:block)
(mov (& 4) a1)
(cabeq a1 '48 104)
(cabeq a1 '49 104)
(cabeq a1 '50 104)
(cabeq a1 '51 104)
(cabeq a1 '52 104)
(cabeq a1 '53 104)
(cabeq a1 '54 104)
(cabeq a1 '55 104)
(cabeq a1 '56 104)
(cabne a1 '57 103)
104
(diff '48 a1)
(push a1)
105
(jcall tyi)
(mov a1 (& 5))
(mov a1 a4)
(cabeq a4 '48 107)
(cabeq a4 '49 107)
(cabeq a4 '50 107)
(cabeq a4 '51 107)
(cabeq a4 '52 107)
(cabeq a4 '53 107)
(cabeq a4 '54 107)
(cabeq a4 '55 107)
(cabeq a4 '56 107)
(cabne a4 '57 106)
107
(diff '48 a1)
(mov (& 0) a3)
(times '10 a3)
(plus a3 a1)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a3)
(bra 109)
108
(push a3)
(mov (& 6) a1)
(call #:edlin:work-on)
(pop a3)
109
(sobgez a3 108)
(adjstk '1)
(bra 102)
103
(cabne a1 '63 110)
(push (@ 111))
(mov '0 a4)
(jmp terpri)
111
(eval ())
(push (@ 112))
(mov '0 a4)
(jmp inchan)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push (@ 116))
(push (cvalq #:system:llib-directory))
(btnil (cvalq #:system:foreign-language) 117)
(mov '"edahelp" a4)
(bra 118)
117
(mov '"edhelp" a4)
118
(push a4)
(push (cvalq #:system:lelisp-extension))
(mov '3 a4)
(jmp catenate)
116
(eval ())
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
115
(eval ())
(push (@ 119))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
120
(push (@ 122))
(jcall readstring)
(push a1)
(mov '1 a4)
(jmp print)
122
(eval ())
(bra 120)
121
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
119
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 123))
(push (& 4))
(mov '1 a4)
(jmp inchan)
123
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '1)
(push (@ 124))
(mov '0 a4)
(jmp terpri)
124
(eval ())
(call #:edlin:redisplay)
(bra 102)
110
(cabne a1 '98 125)
(mov '2 a1)
(call #:edlin:backword)
(bra 102)
125
(cabne a1 '102 126)
(mov '6 a1)
(call #:edlin:forword)
(bra 102)
126
(cabeq a1 '8 128)
(cabne a1 '127 127)
128
(call #:edlin:delete-backword)
(bra 102)
127
(cabne a1 '104 129)
(call #:edlin:history:show)
(call #:edlin:redisplay)
(bra 102)
129
(cabeq a1 '100 131)
(cabne a1 '4 130)
131
(call #:edlin:delete-forword)
(bra 102)
130
(cabne a1 '7 132)
(jcall tybeep)
(bra 102)
132
(cabne a1 '60 133)
(call #:edlin:history:first)
(call #:edlin:replace-string)
(bra 102)
133
(cabne a1 '62 134)
(call #:edlin:history:last)
(call #:edlin:replace-string)
(bra 102)
134
(cabne a1 '27 135)
(mov (cvalq #:edlin:last-string) a1)
(bfnil a1 136)
(push (@ 137))
(push (cvalq #:edlin:inbuf))
(push '0)
(push (cvalq #:edlin:max))
(mov '3 a4)
(jmp substring)
137
(eval ())
(mov a1 (cvalq #:edlin:last-string))
136
(call #:edlin:history:find)
(btnil a1 102)
(call #:edlin:replace-string)
(bra 102)
135
(cabne a1 '32 140)
(mov (cvalq #:edlin:pos) a1)
(call #:edlin:find-in-oblist)
(bra 102)
140
(cabne a1 '39 141)
(push (cvalq #:edlin:pos))
(mov '2 a1)
(call #:edlin:backword)
(mov '39 a1)
(call #:edlin:insert)
(mov (& 0) a4)
(plus '1 a4)
(diff (cvalq #:edlin:pos) a4)
(bra 143)
142
(push a4)
(mov '6 a1)
(call #:edlin:do-command)
(pop a4)
143
(sobgez a4 142)
(adjstk '1)
(bra 102)
141
(cabne a1 '40 144)
(mov (cvalq #:edlin:pos) a1)
(call #:edlin:backwardparen)
(jcall #:edlin:move)
(bra 102)
144
(jcall tybeep)
(mov nil a1)
(mov '#:edlin:do-esc-command a2)
(jmp #:llcp:retfrom)
102
(mov 't a1)
(return)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:edlin:find-in-oblist subr1)
(push a1)
(mov '2 a1)
(call #:edlin:backword)
(mov (& 0) a4)
(diff (cvalq #:edlin:pos) a4)
(push a4)
(push (cvalq #:edlin:pos))
(push (@ 101))
(push (cvalq #:edlin:inbuf))
(push (cvalq #:edlin:pos))
(mov (& 5) a3)
(diff (cvalq #:edlin:pos) a3)
(push a3)
(mov '3 a4)
(jmp substring)
101
(eval ())
(mov a1 a2)
(pop a1)
(call #:edlin:search-in-oblist)
(push a1)
(mov (& 1) a4)
(bra 103)
102
(push a4)
(mov '6 a1)
(call #:edlin:do-command)
(pop a4)
103
(sobgez a4 102)
(btcons (& 0) 104)
(adjstk '3)
(jmp tybeep)
104
(mov (& 0) a4)
(bfnil (cdr a4) 106)
(mov (car a4) a1)
(jcall string)
(mov a1 (& 0))
(jcall slength)
(diff '1 a1)
(push (& 1))
(push a1)
(jcall numberp)
(bfnil a1 110)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
110
(push (@ 112))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
112
(eval ())
(bfnil a1 111)
(hbxmov (& 2) (& 1) a1)
(call #:edlin:insert)
(push (@ 113))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
113
(eval ())
(mov a1 (& 1))
(bra 110)
111
(mov nil a1)
(adjstk '5)
(return)
106
(push (@ 114))
(mov '0 a4)
(jmp terpri)
114
(eval ())
(mov (& 0) a2)
(mov 'alphalessp a1)
(jcall sort)
(mov a1 (& 0))
(push a1)
115
(bfcons (& 0) 116)
(push (@ 117))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
117
(eval ())
(bra 115)
116
(adjstk '1)
(push (@ 118))
(mov '0 a4)
(jmp terpri)
118
(eval ())
(mov (& 0) a1)
(call #:edlin:comm-string)
(mov a1 (& 0))
(call #:edlin:redisplay)
(mov (& 0) a1)
(jcall slength)
(diff '1 a1)
(push (& 1))
(push a1)
(jcall numberp)
(bfnil a1 121)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
121
(push (@ 123))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
123
(eval ())
(bfnil a1 122)
(hbxmov (& 2) (& 1) a1)
(call #:edlin:insert)
(push (@ 124))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
124
(eval ())
(mov a1 (& 1))
(bra 121)
122
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:edlin:store-line subr0)
(cnble (cvalq #:edlin:max) '0 102)
(push (@ 103))
(push (cvalq #:edlin:inbuf))
(push '0)
(push (cvalq #:edlin:max))
(mov '3 a4)
(jmp substring)
103
(eval ())
(jcall #:edlin:history:add)
102
(hbmovx '13 (cvalq #:edlin:inbuf) (cvalq #:edlin:max))
(mov (cvalq #:edlin:max) a4)
(plus '1 a4)
(mov a4 (cvalq #:edlin:max))
(hbmovx '10 (cvalq #:edlin:inbuf) a4)
(plus '1 a4)
(mov a4 (cvalq #:edlin:max))
(mov a4 a1)
(return)
))
(loader'((entry #:edlin:delete-end-of-line subr0)
(push (@ 101))
(push (cvalq #:edlin:kill-buffer))
(push '0)
(push (cvalq #:edlin:inbuf))
(push (cvalq #:edlin:pos))
(mov (cvalq #:edlin:max) a4)
(diff (cvalq #:edlin:pos) a4)
(push a4)
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(mov (cvalq #:edlin:max) a4)
(diff (cvalq #:edlin:pos) a4)
(mov a4 (cvalq #:edlin:kill-length))
(mov (cvalq #:edlin:max) a3)
(diff (cvalq #:edlin:pos) a3)
(bra 103)
102
(push a3)
(cnbge (cvalq #:edlin:pos) (cvalq #:edlin:max) 104)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:delete-without-redisplay)
(mov a1 a3)
(bra 105)
104
(mov nil a3)
105
(pop a3)
103
(sobgez a3 102)
(mov (cvalq #:edlin:pos) a1)
(bra #:edlin:image:redisplay-eol)
))
(loader'((entry #:edlin:delete-begining-of-line subr0)
(push (@ 101))
(push (cvalq #:edlin:kill-buffer))
(push '0)
(push (cvalq #:edlin:inbuf))
(push '0)
(push (cvalq #:edlin:pos))
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(mov (cvalq #:edlin:pos) (cvalq #:edlin:kill-length))
(mov (cvalq #:edlin:pos) a4)
(bra 103)
102
(push a4)
(cnble (cvalq #:edlin:pos) '0 104)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(mov a4 a1)
(jcall #:edlin:move)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:delete-without-redisplay)
(mov a1 a4)
(bra 105)
104
(mov nil a4)
105
(pop a4)
103
(sobgez a4 102)
(mov (cvalq #:edlin:pos) a1)
(bra #:edlin:image:redisplay-eol)
))
(loader'((entry #:edlin:insert-substring subr2)
(push a1)
(push a2)
(jcall slength)
(mov a1 a2)
(pop a1)
(jcall imin)
(diff '1 a1)
(push '0)
(push a1)
(jcall numberp)
(bfnil a1 103)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
103
(push (@ 105))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
105
(eval ())
(bfnil a1 104)
(hbxmov (& 2) (& 1) a1)
(call #:edlin:insert)
(push (@ 106))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(mov a1 (& 1))
(bra 103)
104
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:edlin:replace-string subr1)
(push a1)
(jcall slength)
(push a1)
(push (@ 101))
(push (cvalq #:edlin:inbuf))
(push '0)
(push (& 4))
(push '0)
(push a1)
(mov '5 a4)
(jmp bltstring)
101
(eval ())
(mov (& 0) (cvalq #:edlin:max))
(mov (cvalq #:edlin:max) (cvalq #:edlin:pos))
(adjstk '2)
(bra #:edlin:redisplay)
))
(loader'((entry #:edlin:alphap subr1)
(push (@ 101))
(push a1)
(mov '1 a4)
(jmp typecn)
101
(eval ())
(mov 'cpname a2)
(jmp eq)
))
(loader'((entry #:edlin:backword subr1)
(push a1)
101
(cabeq (cvalq #:edlin:pos) '0 103)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(hbxmov (cvalq #:edlin:inbuf) a4 a1)
(call #:edlin:alphap)
(bfnil a1 103)
(mov (& 0) a1)
(call #:edlin:do-command)
(bra 101)
103
(cnble (cvalq #:edlin:pos) '0 104)
(mov (cvalq #:edlin:pos) a4)
(diff '1 a4)
(hbxmov (cvalq #:edlin:inbuf) a4 a1)
(call #:edlin:alphap)
(btnil a1 104)
(mov (& 0) a1)
(call #:edlin:do-command)
(bra 103)
104
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:edlin:forword subr1)
(push a1)
101
(cabeq (cvalq #:edlin:pos) (cvalq #:edlin:max) 103)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:alphap)
(bfnil a1 103)
(mov (& 0) a1)
(call #:edlin:do-command)
(bra 101)
103
(cnbge (cvalq #:edlin:pos) (cvalq #:edlin:max) 104)
(hbxmov (cvalq #:edlin:inbuf) (cvalq #:edlin:pos) a1)
(call #:edlin:alphap)
(btnil a1 104)
(mov (& 0) a1)
(call #:edlin:do-command)
(bra 103)
104
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:edlin:redisplay subr0)
(bra #:edlin:image:redisplay)
))
(loader'((entry #:edlin:search-in-oblist subr2)
(push a1)
(push (cvalq string))
(mov a2 (cvalq string))
(push '1)
(push '(string))
(push (@ #:edlin:search-in-oblist))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push nil)
(push a1)
(push (cvalq pkgc))
(mov (& 2) (cvalq pkgc))
(push '1)
(push '(pkgc))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
101
(cnble (& 7) '0 102)
(mov (& 7) a4)
(diff '1 a4)
(mov (cvalq #:edlin:inbuf) a2)
(mov a4 a1)
(jcall chrnth)
(mov a1 a4)
(cabeq a4 '58 103)
(cabeq a4 '35 103)
(mov (& 7) a4)
(diff '1 a4)
(mov (cvalq #:edlin:inbuf) a2)
(mov a4 a1)
(jcall chrnth)
(call #:edlin:alphap)
(btnil a1 102)
103
(mov (& 7) a4)
(diff '1 a4)
(mov a4 (& 7))
(bra 101)
102
(push nil)
(push '0)
(push nil)
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov (& 3) (cvalq #:system:print-msgs))
(push (cvalq #:system:error-flag))
(mov (& 5) (cvalq #:system:error-flag))
(push '3)
(push '(#:system:debug #:system:print-msgs #:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 104))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 105))
(push (cvalq #:edlin:inbuf))
(push (& 25))
(mov (& 35) a4)
(diff '1 a4)
(diff (& 26) a4)
(push a4)
(mov '3 a4)
(jmp substring)
105
(eval ())
(jcall explode)
(jcall implode)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
104
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(mov (& 7) (cvalq #:system:print-msgs))
(mov (& 8) (cvalq #:system:debug))
(adjstk '12)
(mov (car a1) (cvalq pkgc))
(bra 106)
(fentry #:edlin:search-in-oblist:g102 subr1)
(entry #:edlin:search-in-oblist:g102 subr1)
(push a1)
(cabne (cvalq pkgc) (pkgc a1) 107)
(push (@ 109))
(push (cvalq string))
(jcall string)
(push a1)
(push '0)
(mov '3 a4)
(jmp index)
109
(eval ())
(cabne '0 a1 107)
(mov (& 0) a1)
(adjstk '1)
(jmp ncons)
107
(mov nil a1)
(adjstk '1)
(return)
106
(mov '#:edlin:search-in-oblist:g102 a1)
(jcall maploblist)
(mov (& 1) dlink)
(mov (& 6) (cvalq pkgc))
(adjstk '9)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq string))
(adjstk '8)
(return)
))
(loader'((entry #:edlin:comm-string subr1)
(push a1)
(mov (car a1) a1)
(jcall string)
(push a1)
(mov (& 1) a1)
(jcall last)
(mov (car a1) a1)
(jcall string)
(push a1)
(mov (& 1) a1)
(jcall slength)
(push a1)
(mov (& 1) a1)
(jcall slength)
(mov a1 a2)
(pop a1)
(jcall imin)
(push '0)
(push a1)
101
(cnbge (& 1) (& 0) 102)
(hbxmov (& 3) (& 1) a4)
(hbxmov (& 2) (& 1) a3)
(cabne a4 a3 102)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 101)
102
(push (@ 103))
(push (& 4))
(push '0)
(push (& 4))
(mov '3 a4)
(jmp substring)
103
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:edlin:insert-rpar subr0)
(mov '41 a1)
(call #:edlin:insert)
(push (cvalq #:edlin:pos))
(mov (cvalq #:edlin:pos) a1)
(call #:edlin:backwardparen)
(jcall #:edlin:move)
(jcall tyflush)
(mov (cvalq #:edlin:loop) a4)
(bra 102)
101
(push a4)
(mov (cvalq #:edlin:pos) (cvalq #:edlin:pos))
(pop a4)
102
(sobgez a4 101)
(pop a1)
(jmp #:edlin:move)
))
(loader'((entry #:edlin:backwardparen subr1)
(push a1)
(push '1)
(cnble a1 '0 102)
(diff '1 a1)
(mov a1 (& 1))
103
(cnble (& 1) '0 102)
(push (@ 106))
(hbxmov (cvalq #:edlin:inbuf) (& 2) a4)
(push a4)
(mov '1 a4)
(jmp typecn)
106
(eval ())
(cabne 'clpar a1 105)
(mov (& 0) a4)
(diff '1 a4)
(mov a4 (& 0))
(cnble a4 '0 102)
105
(mov (& 1) a4)
(diff '1 a4)
(mov a4 (& 1))
(push (@ 110))
(hbxmov (cvalq #:edlin:inbuf) a4 a3)
(push a3)
(mov '1 a4)
(jmp typecn)
110
(eval ())
(mov a1 a2)
(mov 'crpar a1)
(jcall eq)
(btnil a1 108)
(mov nil a3)
(bra 109)
108
(mov 't a3)
109
(bfnil a3 103)
(mov (& 0) a4)
(plus '1 a4)
(mov a4 (& 0))
(bra 103)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry edlin subr0)
(entry edlin subr0)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'edlin a1)
(jcall memq)
(bfnil a1 101)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'edlin a1)
(jcall cons)
(mov a1 (cvalq #:sys-package:itsoft))
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry edlinend subr0)
(entry edlinend subr0)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'edlin a1)
(jcall delq)
(mov a1 (cvalq #:sys-package:itsoft))
(return)
))
(loader '((end)))
