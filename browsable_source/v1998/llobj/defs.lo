(loader '((title |defs.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'defs)))
(defvar #:sys-package:colon 'system)
(defvar #:system:redef-flag t)
(#:messages:put-message '#:system:errtwicedef 'french '"fonction rede'finie" 'defmessage)
(#:messages:put-message '#:system:errtwicedef 'english '"redefined function" 'defmessage)
'#:system:errtwicedef
(#:messages:put-message '#:system:errnocomp 'french '"fonction incompatible" 'defmessage)
(#:messages:put-message '#:system:errnocomp 'english '"incompatible function" 'defmessage)
'#:system:errnocomp
(#:messages:put-message '#:system:errnulinc 'french '"incre'ment nul" 'defmessage)
(#:messages:put-message '#:system:errnulinc 'english '"null increment" 'defmessage)
'#:system:errnulinc
(loader'((fentry macroexpand subr1)
(entry macroexpand subr1)
(push (cvalq #:system:x))
(mov a1 (cvalq #:system:x))
(push '1)
(push '(#:system:x))
(push (@ macroexpand))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btcons a1 101)
(bra 102)
101
(bfsymb (car a1) 103)
(mov (car a1) a1)
(jcall typefn)
(cabne a1 'macro 105)
(push (@ 107))
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall valfn)
(mov a1 a2)
(mov 'lambda a1)
(jcall cons)
(push a1)
(push (cvalq #:system:x))
(mov '2 a4)
(jmp apply)
107
(eval ())
(jcall macroexpand)
(bra 102)
105
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall typefn)
(cabne a1 'dmacro 108)
(push (@ 110))
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall valfn)
(mov a1 a2)
(mov 'lambda a1)
(jcall cons)
(push a1)
(mov (cvalq #:system:x) a4)
(push (cdr a4))
(mov '2 a4)
(jmp apply)
110
(eval ())
(jcall macroexpand)
(bra 102)
108
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall typefn)
(cabne a1 'msubr 111)
(push (@ 113))
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall valfn)
(push a1)
(push (cvalq #:system:x))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
113
(eval ())
(jcall macroexpand)
(bra 102)
111
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall typefn)
(cabne a1 'dmsubr 114)
(push (@ 116))
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall valfn)
(push a1)
(mov (cvalq #:system:x) a4)
(push (cdr a4))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
116
(eval ())
(jcall macroexpand)
(bra 102)
114
(mov (cvalq #:system:x) a4)
(cabne (car a4) 'quote 117)
(mov a4 a1)
(bra 102)
117
(push nil)
119
(bfcons (cvalq #:system:x) 120)
(mov (cvalq #:system:x) a1)
(mov (cdr a1) (cvalq #:system:x))
(mov (car a1) a1)
(jcall macroexpand)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 119)
120
(mov (& 0) a1)
(jcall nreverse)
(mov (& 0) a4)
(mov (cvalq #:system:x) (cdr a4))
(adjstk '1)
(bra 102)
103
(push nil)
(push (cvalq #:system:l))
(mov (& 1) (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
121
(bfcons (cvalq #:system:x) 122)
(mov (cvalq #:system:x) a1)
(mov (cdr a1) (cvalq #:system:x))
(mov (car a1) a1)
(jcall macroexpand)
(mov (cvalq #:system:l) a2)
(jcall cons)
(mov a1 (cvalq #:system:l))
(bra 121)
122
(mov (cvalq #:system:l) a1)
(jcall nreverse)
(mov (cvalq #:system:l) a4)
(mov (cvalq #:system:x) (cdr a4))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:l))
(adjstk '8)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:x))
(adjstk '7)
(return)
))
(loader'((fentry macroexpand1 subr1)
(entry macroexpand1 subr1)
(push (cvalq #:system:x))
(mov a1 (cvalq #:system:x))
(push '1)
(push '(#:system:x))
(push (@ macroexpand1))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (car a1) a1)
(jcall typefn)
(cabne a1 'macro 101)
(push (@ 103))
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall valfn)
(mov a1 a2)
(mov 'lambda a1)
(jcall cons)
(push a1)
(push (cvalq #:system:x))
(mov '2 a4)
(jmp apply)
103
(eval ())
(bra 102)
101
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall typefn)
(cabne a1 'dmacro 104)
(push (@ 106))
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall valfn)
(mov a1 a2)
(mov 'lambda a1)
(jcall cons)
(push a1)
(mov (cvalq #:system:x) a4)
(push (cdr a4))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 102)
104
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall typefn)
(cabne a1 'msubr 107)
(push (@ 109))
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall valfn)
(push a1)
(push (cvalq #:system:x))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
109
(eval ())
(bra 102)
107
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall typefn)
(cabne a1 'dmsubr 110)
(push (@ 112))
(mov (cvalq #:system:x) a1)
(mov (car a1) a1)
(jcall valfn)
(push a1)
(mov (cvalq #:system:x) a4)
(push (cdr a4))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
112
(eval ())
(bra 102)
110
(mov (cvalq #:system:x) a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:x))
(adjstk '7)
(return)
))
(loader'((fentry with dmsubr)
(entry with dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push (cvalq #:system:body))
(mov a4 (cvalq #:system:body))
(push '2)
(push '(#:system:l #:system:body))
(push (@ with))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push '-1)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 103))
(push '"arg")
(mov (& 5) a1)
(jcall |1+|)
(mov a1 (& 5))
(push a1)
(mov '2 a4)
(jmp concat)
103
(eval ())
(mov a1 a2)
(mov 'with a1)
(jcall symbol)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '3)
(push (cvalq #:system:var))
(mov a1 (cvalq #:system:var))
(push '1)
(push '(#:system:var))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 104))
(push 'let)
(push (cvalq #:system:l))
(push a1)
(push nil)
105
(bfcons (& 1) 106)
(bfcons (& 2) 106)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(mov (& 2) a3)
(mov (cdr a3) (& 2))
(push (car a4))
(push (car a3))
(push (cvalq #:system:l))
(mov (& 1) (cvalq #:system:l))
(push (cvalq #:system:var))
(mov (& 3) (cvalq #:system:var))
(push '2)
(push '(#:system:l #:system:var))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 107))
(push (cvalq #:system:var))
(mov (cvalq #:system:l) a1)
(jcall length)
(jcall |1-|)
(mov (cvalq #:system:l) a2)
(jcall firstn)
(jcall consp)
(mov a1 a4)
(bfnil a4 108)
(mov (cvalq #:system:l) a3)
(mov 'errsxt a2)
(mov 'with a1)
(jcall error)
(mov a1 a4)
108
(push a4)
(mov '2 a4)
(jmp list)
107
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:var))
(mov (& 7) (cvalq #:system:l))
(adjstk '10)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a1)
(jcall nreverse)
(adjstk '3)
(push a1)
(push (@ 109))
(push 'protect)
(push (@ 110))
(push (cvalq #:system:l))
(push (cvalq #:system:body))
(mov '2 a4)
(jmp append)
110
(eval ())
(mov a1 a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov (cvalq #:system:var) a1)
(jcall nreverse)
(push a1)
(mov (cvalq #:system:l) a1)
(jcall reverse)
(push a1)
(push nil)
111
(bfcons (& 2) 112)
(bfcons (& 1) 112)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(push (cvalq #:system:l))
(mov (& 1) (cvalq #:system:l))
(push (cvalq #:system:var))
(mov (& 3) (cvalq #:system:var))
(push '2)
(push '(#:system:l #:system:var))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:system:l) a1)
(jcall length)
(jcall |1-|)
(mov (cvalq #:system:l) a2)
(jcall firstn)
(mov (cvalq #:system:var) a2)
(jcall append1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:var))
(mov (& 7) (cvalq #:system:l))
(adjstk '10)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 111)
112
(mov (& 0) a1)
(jcall nreverse)
(adjstk '3)
(push a1)
(mov '3 a4)
(jmp mcons)
109
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:var))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(mov (& 7) (cvalq #:system:l))
(adjstk '8)
(return)
))
(loader'((entry #:system:def-check-all subr2)
(push a2)
(push a1)
(btcons (cdr a1) 102)
(push a2)
(mov (cdr a1) a3)
(mov 'errnla a2)
(pop a1)
(jcall error)
102
(mov (& 0) a4)
(mov (cdr a4) a3)
(push (car a4))
(push (car a3))
(btvar (& 1) 104)
(mov (& 1) a3)
(mov 'errbdf a2)
(mov (& 3) a1)
(jcall error)
104
(mov nil a3)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:system:def-check-larg)
(bfnil (cvalq #:system:redef-flag) 106)
(mov (& 1) a1)
(jcall typefn)
(btnil a1 106)
(mov (& 1) a3)
(mov '#:system:errtwicedef a2)
(mov (& 3) a1)
(jcall printerror)
106
(mov (cvalq #:trace:trace) a2)
(mov (& 1) a1)
(jcall memq)
(btnil a1 108)
(push (@ 109))
(push (@ 110))
(push 'untrace)
(push (& 4))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov '1 a4)
(jmp eval)
109
(eval ())
108
(btnil (cvalq #:system:previous-def-flag) 112)
(mov (& 1) a1)
(jcall typefn)
(btnil a1 112)
(mov (& 1) a1)
(jcall getdef)
(mov '#:system:previous-def a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall putprop)
112
(btnil (cvalq #:system:loaded-from-file) 113)
(mov '#:system:loaded-from-file a3)
(mov (cvalq #:system:loaded-from-file) a2)
(mov (& 1) a1)
(adjstk '4)
(jmp putprop)
113
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:system:def-check-larg subr3)
(push (cvalq lpar))
(mov a3 (cvalq lpar))
(push '1)
(push '(lpar))
(push (@ #:system:def-check-larg))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:system:def-check-larg-aux)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq lpar))
(adjstk '7)
(return)
))
(loader'((entry #:system:def-check-larg-aux subr2)
(push a2)
(push a1)
(bfnil a1 101)
(mov 't a1)
(adjstk '2)
(return)
101
(bfvar a1 103)
(mov (cvalq lpar) a2)
(jcall memq)
(btnil a1 105)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov (& 1) a1)
(adjstk '2)
(jmp error)
105
(mov (cvalq lpar) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq lpar))
(adjstk '2)
(return)
103
(bfcons a1 107)
(btnil (car a1) 107)
(mov (car a1) a1)
(call #:system:def-check-larg-aux)
(btnil a1 109)
(mov (& 0) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(call #:system:def-check-larg-aux)
(btnil a1 109)
(mov 't a1)
(adjstk '2)
(return)
109
(mov nil a1)
(adjstk '2)
(return)
107
(push a2)
(mov a1 a3)
(mov 'errbpa a2)
(pop a1)
(adjstk '2)
(jmp error)
))
(loader'((entry #:system:resetfn subr3)
(push a3)
(push a2)
(push nil)
(push (@ 101))
(push 'fentry)
(push a1)
(push a2)
(mov '3 a4)
(jmp list)
101
(eval ())
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(cabne (& 1) 'fsubr 103)
(push (@ 104))
(push 'push)
(push (@ 105))
(push 'quote)
(push (& 6))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
103
(mov (& 1) a4)
(cabeq a4 'subr1 108)
(cabeq a4 'subr2 108)
(cabeq a4 'subr3 108)
(cabne a4 'fsubr 107)
108
(mov a1 a2)
(mov '(push a1) a1)
(jcall cons)
(mov a1 (& 0))
107
(mov (& 1) a4)
(cabeq a4 'subr2 111)
(cabne a4 'subr3 110)
111
(mov a1 a2)
(mov '(push a2) a1)
(jcall cons)
(mov a1 (& 0))
110
(cabne (& 1) 'subr3 113)
(mov a1 a2)
(mov '(push a3) a1)
(jcall cons)
(mov a1 (& 0))
113
(cabeq (& 1) 'fsubr 115)
(push (@ 116))
(push 'mov)
(push (@ 117))
(push 'quote)
(push (& 6))
(mov '2 a4)
(jmp list)
117
(eval ())
(push a1)
(push '(a1))
(mov '3 a4)
(jmp mcons)
116
(eval ())
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
115
(cabeq (& 1) 'nsubr 119)
(push (@ 120))
(push 'mov)
(push (@ 121))
(push 'quote)
(mov (& 5) a1)
(cabne a1 'subr0 123)
(mov '0 a4)
(bra 122)
123
(cabne a1 'subr1 124)
(mov '1 a4)
(bra 122)
124
(cabne a1 'subr2 125)
(mov '2 a4)
(bra 122)
125
(cabne a1 'subr3 126)
(mov '3 a4)
(bra 122)
126
(cabne a1 'fsubr 127)
(mov '2 a4)
(bra 122)
127
(mov nil a4)
122
(push a4)
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(push '(a4))
(mov '3 a4)
(jmp mcons)
120
(eval ())
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
119
(cabne (& 1) 'fsubr 128)
(mov a1 a2)
(mov '(jmp apply) a1)
(jcall cons)
(mov a1 (& 0))
(bra 129)
128
(mov a1 a2)
(mov '(jmp #:llcp:ffuncall) a1)
(jcall cons)
(mov a1 (& 0))
129
(mov a1 a2)
(mov '(end) a1)
(jcall cons)
(mov a1 (& 0))
(push (@ 130))
(jcall nreverse)
(push a1)
(push nil)
(mov '2 a4)
(jmp loader)
130
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry resetfn subr3)
(entry resetfn subr3)
(push a3)
(push a2)
(push a1)
(jcall typefn)
(push a1)
(mov a1 a4)
(cabeq a4 'subr0 103)
(cabeq a4 'subr1 103)
(cabeq a4 'subr2 103)
(cabeq a4 'subr3 103)
(cabeq a4 'nsubr 103)
(cabne a4 'fsubr 101)
103
(mov 'loader a1)
(jcall featurep)
(btnil a1 101)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall eq)
(bfnil a1 102)
(cabne 'expr (& 2) 105)
(mov (& 0) a1)
(cabne a1 'subr0 108)
(mov (& 3) a4)
(btnil (car a4) 109)
(mov nil a4)
(bra 107)
109
(mov 't a4)
(bra 107)
108
(cabne a1 'subr1 111)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a4)
(mov (car a4) a4)
(btnil (cdr a4) 113)
(mov nil a4)
(bra 107)
113
(mov 't a4)
(bra 107)
111
(cabne a1 'subr2 115)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(btnil (cdr a4) 117)
(mov nil a4)
(bra 107)
117
(mov 't a4)
(bra 107)
115
(cabne a1 'subr3 119)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(btnil (cdr a4) 121)
(mov nil a4)
(bra 107)
121
(mov 't a4)
(bra 107)
119
(cabne a1 'nsubr 123)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall variablep)
(mov a1 a4)
(bfnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall last)
(mov (cdr a1) a1)
(jcall variablep)
(mov a1 a4)
(bfnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall length)
(mov '4 a2)
(jcall ge)
(mov a1 a4)
(bra 107)
123
(mov nil a4)
107
(btnil a4 105)
(mov (& 3) a2)
(mov 'lambda a1)
(jcall cons)
(mov a1 a3)
(mov (& 0) a2)
(mov '#:system:bidon a1)
(call #:system:resetfn)
(mov '#:system:bidon a1)
(jcall typefn)
(push a1)
(mov '#:system:bidon a1)
(jcall valfn)
(mov a1 a3)
(pop a2)
(mov (& 1) a1)
(jcall setfn)
(mov (& 3) a2)
(mov (& 2) a1)
(jcall cons)
(mov 'resetfn a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall putprop)
(bra 102)
105
(cabne 'fexpr (& 2) 125)
(cabne 'fsubr (& 0) 125)
(mov (& 3) a2)
(mov 'flambda a1)
(jcall cons)
(mov a1 a3)
(mov (& 0) a2)
(mov (& 1) a1)
(call #:system:resetfn)
(mov (& 3) a2)
(mov (& 2) a1)
(jcall cons)
(mov 'resetfn a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall putprop)
(bra 102)
125
(bfnil (cvalq #:system:redef-flag) 128)
(mov 'autoload a2)
(mov (& 1) a1)
(jcall getprop)
(bfnil a1 128)
(mov (& 1) a3)
(mov '#:system:errnocomp a2)
(mov 'resetfn a1)
(jcall printerror)
128
(mov (& 3) a3)
(mov (& 2) a2)
(mov (& 1) a1)
(jcall setfn)
(bra 102)
101
(mov (& 3) a3)
(mov (& 2) a2)
(mov (& 1) a1)
(jcall setfn)
(mov 'compiler a1)
(jcall featurep)
(btnil a1 102)
(mov (& 1) a1)
(jcall macro-openp)
(btnil a1 102)
(mov (& 1) a1)
(jcall remove-macro-open)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry de fsubr)
(entry de fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ de))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'de a2)
(call #:system:def-check-all)
(mov (cvalq #:system:l) a1)
(mov (cdr a1) a3)
(mov 'expr a2)
(mov (car a1) a1)
(jcall resetfn)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry df fsubr)
(entry df fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ df))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'df a2)
(call #:system:def-check-all)
(mov (cvalq #:system:l) a1)
(mov (cdr a1) a3)
(mov 'fexpr a2)
(mov (car a1) a1)
(jcall resetfn)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry dm fsubr)
(entry dm fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ dm))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'dm a2)
(call #:system:def-check-all)
(mov (cvalq #:system:l) a1)
(mov (cdr a1) a3)
(mov 'macro a2)
(mov (car a1) a1)
(jcall setfn)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry dmd fsubr)
(entry dmd fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ dmd))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'dmd a2)
(call #:system:def-check-all)
(mov (cvalq #:system:l) a1)
(mov (cdr a1) a3)
(mov 'dmacro a2)
(mov (car a1) a1)
(jcall setfn)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry defmacro fsubr)
(entry defmacro fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ defmacro))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'defmacro a2)
(call #:system:def-check-all)
(mov (cvalq #:system:l) a1)
(mov (cdr a1) a3)
(mov 'dmacro a2)
(mov (car a1) a1)
(jcall setfn)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry defun fsubr)
(entry defun fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ defun))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'defun a2)
(call #:system:def-check-all)
(mov (cvalq #:system:l) a1)
(mov (cdr a1) a3)
(mov 'expr a2)
(mov (car a1) a1)
(jcall resetfn)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry ds fsubr)
(entry ds fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ ds))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'ds a2)
(call #:system:def-check-all)
(mov (cvalq #:system:l) a1)
(mov (cdr a1) a2)
(mov (cdr a1) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall setfn)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry letn dmsubr)
(entry letn dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push (cvalq #:system:name))
(mov a1 (cvalq #:system:name))
(push (cvalq #:system:larg))
(mov a4 (cvalq #:system:larg))
(push (cvalq #:system:body))
(mov a3 (cvalq #:system:body))
(push '3)
(push '(#:system:name #:system:larg #:system:body))
(push (@ letn))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'flet)
(push (@ 102))
(push a1)
(push a4)
(push nil)
103
(bfcons (& 1) 104)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 103)
104
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (cvalq #:system:body))
(mov '3 a4)
(jmp mcons)
102
(eval ())
(jcall ncons)
(push a1)
(push (cvalq #:system:name))
(push (cvalq #:system:larg))
(push nil)
105
(bfcons (& 1) 106)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(pop a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(mov (& 7) (cvalq #:system:larg))
(mov (& 8) (cvalq #:system:name))
(adjstk '9)
(return)
))
(loader'((fentry slet dmsubr)
(entry slet dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push (cvalq #:system:body))
(mov a4 (cvalq #:system:body))
(push '1)
(push '(#:system:body))
(push (@ slet))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil a1 101)
(push (@ 103))
(push 'let)
(push nil)
(push a4)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(bra 102)
101
(btnil (cdr a1) 104)
(push (@ 106))
(push 'let)
(mov (car a1) a1)
(jcall ncons)
(push a1)
(push (@ 107))
(push 'lets)
(mov (& 12) a4)
(push (cdr a4))
(push (cvalq #:system:body))
(mov '3 a4)
(jmp mcons)
107
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
106
(eval ())
(bra 102)
104
(push (@ 108))
(push 'let)
(mov (car a1) a1)
(jcall ncons)
(push a1)
(push (cvalq #:system:body))
(mov '3 a4)
(jmp mcons)
108
(eval ())
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(adjstk '8)
(return)
))
(synonym 'lets 'slet)
(synonym 'let* 'slet)
(synonym 'dynamic-let 'let)
(loader'((fentry dynamic fsubr)
(entry dynamic fsubr)
(mov (car a1) a1)
(mov (cval a1) a1)
(return)
))
(loader'((entry #:system:generate-for-3 subr1)
(push (@ 101))
(push 'until)
(push (@ 102))
(push a1)
(push (cvalq #:system:var))
(push (cvalq #:system:end))
(mov '3 a4)
(jmp list)
102
(eval ())
(push a1)
(push (@ 103))
(push (cvalq #:system:body))
(push (@ 104))
(push 'setq)
(push (cvalq #:system:var))
(push (@ 105))
(push (cvalq _+))
(push (cvalq #:system:var))
(push (cvalq #:system:step))
(mov '3 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp append)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp mcons)
101
(eval ())
(return)
))
(loader'((entry #:system:generate-for-2 subr3)
(push a2)
(push a1)
(push (cvalq _+))
(mov a3 (cvalq _+))
(push '1)
(push '(_+))
(push (@ #:system:generate-for-2))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push nil)
(mov (cvalq #:system:init) a1)
(jcall numberp)
(btnil a1 102)
(push (@ 105))
(push (cvalq #:system:_pred))
(push (cvalq #:system:init))
(mov '2 a4)
(jmp funcall)
105
(eval ())
(bfnil a1 102)
(mov (cvalq #:system:init) a3)
(mov (cvalq #:system:_err) a2)
(mov (cvalq #:system:_for) a1)
(jcall error)
102
(push (@ 106))
(push 'let)
(push (@ 107))
(push (cvalq #:system:var))
(push (cvalq #:system:init))
(mov '2 a4)
(jmp list)
107
(eval ())
(push a1)
(push (@ 108))
(mov (cvalq #:system:step) a1)
(jcall numberp)
(bfnil a1 109)
(btsymb (cvalq #:system:step) 109)
(push (@ 111))
(push '#:system:for:arg1)
(push (cvalq #:system:step))
(mov '2 a4)
(jmp list)
111
(eval ())
(jcall ncons)
(mov '#:system:for:arg1 (cvalq #:system:step))
(mov a1 a4)
(bra 110)
109
(mov nil a4)
110
(push a4)
(mov (cvalq #:system:end) a1)
(jcall numberp)
(bfnil a1 112)
(btsymb (cvalq #:system:end) 112)
(push (@ 114))
(push '#:system:for:arg2)
(push (cvalq #:system:end))
(mov '2 a4)
(jmp list)
114
(eval ())
(jcall ncons)
(mov '#:system:for:arg2 (cvalq #:system:end))
(mov a1 a4)
(bra 113)
112
(mov nil a4)
113
(push a4)
(mov '2 a4)
(jmp append)
108
(eval ())
(mov a1 a2)
(pop a1)
(jcall cons)
(push a1)
(push (@ 115))
(mov (cvalq #:system:step) a1)
(jcall numberp)
(btnil a1 116)
(push (@ 120))
(push (cvalq #:system:_pred))
(push (cvalq #:system:step))
(mov '2 a4)
(jmp funcall)
120
(eval ())
(bfnil a1 119)
(mov (cvalq #:system:step) a3)
(mov (cvalq #:system:_err) a2)
(mov (cvalq #:system:_for) a1)
(jcall error)
119
(mov (cvalq #:system:step) (& 4))
(mov nil a4)
(bra 117)
116
(push (@ 121))
(push 'unless)
(push (@ 122))
(push (cvalq #:system:_pred))
(push (cvalq #:system:step))
(mov '2 a4)
(jmp list)
122
(eval ())
(push a1)
(push (@ 123))
(push 'error)
(push (@ 124))
(push 'quote)
(push (cvalq #:system:_for))
(mov '2 a4)
(jmp list)
124
(eval ())
(push a1)
(push (@ 125))
(push 'quote)
(push (cvalq #:system:_err))
(mov '2 a4)
(jmp list)
125
(eval ())
(push a1)
(push (cvalq #:system:step))
(mov '4 a4)
(jmp list)
123
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
121
(eval ())
(jcall ncons)
(mov a1 a4)
117
(push a4)
(mov (cvalq #:system:end) a1)
(jcall numberp)
(btnil a1 126)
(push (@ 130))
(push (cvalq #:system:_pred))
(push (cvalq #:system:end))
(mov '2 a4)
(jmp funcall)
130
(eval ())
(bfnil a1 128)
(mov (cvalq #:system:end) a3)
(mov (cvalq #:system:_err) a2)
(mov (cvalq #:system:_for) a1)
(jcall error)
(mov a1 a4)
(bra 127)
128
(mov nil a4)
(bra 127)
126
(push (@ 131))
(push 'unless)
(push (@ 132))
(push (cvalq #:system:_pred))
(push (cvalq #:system:end))
(mov '2 a4)
(jmp list)
132
(eval ())
(push a1)
(push (@ 133))
(push 'error)
(push (@ 134))
(push 'quote)
(push (cvalq #:system:_for))
(mov '2 a4)
(jmp list)
134
(eval ())
(push a1)
(push (@ 135))
(push 'quote)
(push (cvalq #:system:_err))
(mov '2 a4)
(jmp list)
135
(eval ())
(push a1)
(push (cvalq #:system:end))
(mov '4 a4)
(jmp list)
133
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
131
(eval ())
(jcall ncons)
(mov a1 a4)
127
(push a4)
(push (@ 136))
(bfnil (& 7) 137)
(push (@ 139))
(push 'cond)
(push (@ 140))
(push (@ 141))
(push '>)
(push (cvalq #:system:step))
(push '(0))
(mov '3 a4)
(jmp mcons)
141
(eval ())
(push a1)
(mov (& 19) a1)
(call #:system:generate-for-3)
(push a1)
(mov '2 a4)
(jmp list)
140
(eval ())
(push a1)
(push (@ 142))
(push (@ 143))
(push '<)
(push (cvalq #:system:step))
(push '(0))
(mov '3 a4)
(jmp mcons)
143
(eval ())
(push a1)
(mov (& 21) a1)
(call #:system:generate-for-3)
(push a1)
(mov '2 a4)
(jmp list)
142
(eval ())
(push a1)
(push (@ 144))
(push 't)
(push (@ 145))
(push 'error)
(push (@ 146))
(push 'quote)
(push (cvalq #:system:_for))
(mov '2 a4)
(jmp list)
146
(eval ())
(push a1)
(push '('#:system:errnulinc 0))
(mov '3 a4)
(jmp mcons)
145
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
144
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
139
(eval ())
(mov a1 a4)
(bra 138)
137
(push (@ 149))
(push (& 8))
(push '0)
(mov '2 a4)
(jmp >)
149
(eval ())
(btnil a1 147)
(mov (& 15) a1)
(call #:system:generate-for-3)
(mov a1 a4)
(bra 138)
147
(push (@ 152))
(push (& 8))
(push '0)
(mov '2 a4)
(jmp <)
152
(eval ())
(btnil a1 150)
(mov (& 16) a1)
(call #:system:generate-for-3)
(mov a1 a4)
(bra 138)
150
(mov '0 a3)
(mov '#:system:errnulinc a2)
(mov (cvalq #:system:_for) a1)
(jcall error)
(mov a1 a4)
138
(push a4)
(mov (cvalq res) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
136
(eval ())
(push a1)
(mov '3 a4)
(jmp append)
115
(eval ())
(push a1)
(mov '3 a4)
(jmp mcons)
106
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq _+))
(adjstk '9)
(return)
))
(loader'((entry #:system:generate-for-1 nsubr)
(push (cvalq #:system:_err))
(mov (& 4) (cvalq #:system:_err))
(push (cvalq #:system:_pred))
(mov (& 6) (cvalq #:system:_pred))
(push (cvalq #:system:_for))
(mov (& 8) (cvalq #:system:_for))
(push (cvalq #:system:body))
(mov (& 10) (cvalq #:system:body))
(push (cvalq #:system:res))
(mov (& 12) (cvalq #:system:res))
(push (cvalq #:system:end))
(mov (& 14) (cvalq #:system:end))
(push (cvalq #:system:step))
(mov (& 16) (cvalq #:system:step))
(push (cvalq #:system:init))
(mov (& 18) (cvalq #:system:init))
(push (cvalq #:system:var))
(mov (& 20) (cvalq #:system:var))
(push '9)
(push '(#:system:_err #:system:_pred #:system:_for #:system:body #:system:res #:system:end #:system:step #:system:init #:system:var))
(push (@ #:system:generate-for-1))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btvar (cvalq #:system:var) 102)
(mov (cvalq #:system:var) a3)
(mov 'errnva a2)
(mov (cvalq #:system:_for) a1)
(jcall error)
102
(btnil (cvalq #:system:init) 105)
(btnil (cvalq #:system:step) 105)
(bfnil (cvalq #:system:end) 104)
105
(push (cvalq #:system:_for))
(push (@ 106))
(push (cvalq #:system:var))
(push (cvalq #:system:init))
(push (cvalq #:system:step))
(push (cvalq #:system:end))
(mov '4 a4)
(jmp list)
106
(eval ())
(mov a1 a3)
(mov 'errsxt a2)
(pop a1)
(jcall error)
104
(mov (& 15) a3)
(mov (& 16) a2)
(mov (& 17) a1)
(call #:system:generate-for-2)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:var))
(mov (& 7) (cvalq #:system:init))
(mov (& 8) (cvalq #:system:step))
(mov (& 9) (cvalq #:system:end))
(mov (& 10) (cvalq #:system:res))
(mov (& 11) (cvalq #:system:body))
(mov (& 12) (cvalq #:system:_for))
(mov (& 13) (cvalq #:system:_pred))
(mov (& 14) (cvalq #:system:_err))
(adjstk '27)
(return)
))
(loader'((fentry for dmsubr)
(entry for dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a1) a3)
(mov (car a1) a1)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push (cdr a2))
(mov (car a2) a2)
(push a4)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(push (cvalq res))
(mov a4 (cvalq res))
(push '1)
(push '(res))
(push (@ for))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push a1)
(push a3)
(push a2)
(push (& 12))
(push a4)
(push (& 13))
(push 'for)
(push 'numberp)
(push 'errnna)
(push '>)
(push '<)
(push '|+|)
(mov '12 a4)
(bra #:system:generate-for-1)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq res))
(adjstk '9)
(return)
))
(loader'((fentry ifor dmsubr)
(entry ifor dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a1) a3)
(mov (car a1) a1)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push (cdr a2))
(mov (car a2) a2)
(push a4)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(push (cvalq res))
(mov a4 (cvalq res))
(push '1)
(push '(res))
(push (@ ifor))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push a1)
(push a3)
(push a2)
(push (& 12))
(push a4)
(push (& 13))
(push 'ifor)
(push 'fixp)
(push 'errnia)
(push 'gt)
(push 'lt)
(push 'add)
(mov '12 a4)
(bra #:system:generate-for-1)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq res))
(adjstk '9)
(return)
))
(loader'((fentry ffor dmsubr)
(entry ffor dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a1) a3)
(mov (car a1) a1)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push (cdr a2))
(mov (car a2) a2)
(push a4)
(mov (& 1) a4)
(mov (car a4) (& 1))
(mov (cdr a4) a4)
(push (cvalq res))
(mov a4 (cvalq res))
(push '1)
(push '(res))
(push (@ ffor))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push a1)
(push a3)
(push a2)
(push (& 12))
(push a4)
(push (& 13))
(push 'ffor)
(push 'floatp)
(push 'errnfa)
(push 'fgt)
(push 'flt)
(push 'fadd)
(mov '12 a4)
(bra #:system:generate-for-1)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq res))
(adjstk '9)
(return)
))
(loader'((entry #:system:generate-tagbody subr1)
(push (cvalq #:system:body))
(mov a1 (cvalq #:system:body))
(push '1)
(push '(#:system:body))
(push (@ #:system:generate-tagbody))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil a1 101)
(push a1)
(push 't)
105
(bfcons (& 1) 106)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall consp)
(mov a1 (& 0))
(btnil a1 106)
(bra 105)
106
(mov (& 0) a4)
(adjstk '2)
(btnil a4 103)
(mov (cvalq #:system:body) a1)
(bra 102)
103
(push (@ 107))
(mov (cvalq #:system:body) a2)
(mov 'tagbody a1)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp list)
107
(eval ())
(bra 102)
101
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(adjstk '7)
(return)
))
(loader'((entry #:system:generate-block subr2)
(push (cvalq #:system:l))
(mov a2 (cvalq #:system:l))
(push (cvalq #:system:body))
(mov a1 (cvalq #:system:body))
(push '2)
(push '(#:system:l #:system:body))
(push (@ #:system:generate-block))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push 'ok)
(push dlink)
(push tag)
(stack dlink)
(call #:system:generate-block-aux)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(btnil a1 101)
(push (@ 104))
(push 'block)
(push nil)
(push (cvalq #:system:l))
(mov '3 a4)
(jmp list)
104
(eval ())
(bra 102)
101
(mov (cvalq #:system:l) a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(mov (& 7) (cvalq #:system:l))
(adjstk '8)
(return)
))
(loader'((entry #:system:generate-block-aux subr1)
(push (cvalq #:system:body))
(mov a1 (cvalq #:system:body))
(push '1)
(push '(#:system:body))
(push (@ #:system:generate-block-aux))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btcons a1 101)
(mov nil a1)
(bra 102)
101
(mov (car a1) a4)
(cabeq a4 'return 105)
(cabne a4 'return-from 103)
105
(mov 't a1)
(mov 'ok a2)
(jmp #:llcp:exit)
103
(push a1)
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(call #:system:generate-block-aux)
(mov a1 (& 0))
(bfnil a1 107)
(bra 106)
107
(mov (& 0) a1)
(adjstk '2)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(adjstk '7)
(return)
))
(loader'((fentry prog dmsubr)
(entry prog dmsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ prog))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cdr a1))
(btnil (car a1) 101)
(push (@ 103))
(push 'let)
(push (car a1))
(mov (cdr a1) a1)
(call #:system:generate-tagbody)
(push a1)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(mov a1 a2)
(bra 102)
101
(mov (cdr a1) a1)
(call #:system:generate-tagbody)
(mov a1 a2)
(mov 'progn a1)
(jcall cons)
(mov a1 a2)
102
(pop a1)
(call #:system:generate-block)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry prog* dmsubr)
(entry prog* dmsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ prog*))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cdr a1))
(btnil (car a1) 101)
(push (@ 103))
(push 'let*)
(push (car a1))
(mov (cdr a1) a1)
(call #:system:generate-tagbody)
(push a1)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(mov a1 a2)
(bra 102)
101
(mov (cdr a1) a1)
(call #:system:generate-tagbody)
(mov a1 a2)
(mov 'progn a1)
(jcall cons)
(mov a1 a2)
102
(pop a1)
(call #:system:generate-block)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry do dmsubr)
(entry do dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a4) a2)
(mov (car a4) a4)
(push (cvalq #:system:lvar))
(mov a1 (cvalq #:system:lvar))
(push (cvalq #:system:test))
(mov a4 (cvalq #:system:test))
(push (cvalq #:system:result))
(mov a2 (cvalq #:system:result))
(push (cvalq #:system:body))
(mov a3 (cvalq #:system:body))
(push '4)
(push '(#:system:lvar #:system:test #:system:result #:system:body))
(push (@ do))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a3)
(push (@ 101))
(push 'let)
(push a1)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 104))
(mov (& 1) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
104
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (@ 105))
(push 'until)
(push (cvalq #:system:test))
(push (@ 106))
(mov (cvalq #:system:body) a1)
(call #:system:generate-tagbody)
(push a1)
(push (cvalq #:system:lvar))
(push nil)
107
(bfcons (& 1) 108)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a4)
(mov (cdr a4) a4)
(bfcons (cdr a4) 109)
(push (@ 111))
(mov (& 1) a3)
(push (car a3))
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
111
(eval ())
(bra 110)
109
(mov nil a1)
110
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 107)
108
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push (cvalq #:system:x))
(mov a1 (cvalq #:system:x))
(push '1)
(push '(#:system:x))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil a1 112)
(mov a1 a2)
(mov 'psetq a1)
(jcall cons)
(jcall ncons)
(mov a1 a4)
(bra 113)
112
(mov nil a4)
113
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:x))
(adjstk '7)
(push a4)
(mov '2 a4)
(jmp append)
106
(eval ())
(push a1)
(mov '3 a4)
(jmp mcons)
105
(eval ())
(push a1)
(mov (cvalq #:system:result) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '4 a4)
(jmp list)
101
(eval ())
(mov a1 a2)
(pop a1)
(call #:system:generate-block)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(mov (& 7) (cvalq #:system:result))
(mov (& 8) (cvalq #:system:test))
(mov (& 9) (cvalq #:system:lvar))
(adjstk '10)
(return)
))
(loader'((fentry do* dmsubr)
(entry do* dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a4) a2)
(mov (car a4) a4)
(push (cvalq #:system:lvar))
(mov a1 (cvalq #:system:lvar))
(push (cvalq #:system:test))
(mov a4 (cvalq #:system:test))
(push (cvalq #:system:result))
(mov a2 (cvalq #:system:result))
(push (cvalq #:system:body))
(mov a3 (cvalq #:system:body))
(push '4)
(push '(#:system:lvar #:system:test #:system:result #:system:body))
(push (@ do*))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a3)
(push (@ 101))
(push 'let*)
(push a1)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 104))
(mov (& 1) a4)
(push (car a4))
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
104
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (@ 105))
(push 'until)
(push (cvalq #:system:test))
(push (@ 106))
(mov (cvalq #:system:body) a1)
(call #:system:generate-tagbody)
(push a1)
(push (cvalq #:system:lvar))
(push nil)
107
(bfcons (& 1) 108)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a4)
(mov (cdr a4) a4)
(bfcons (cdr a4) 109)
(push (@ 111))
(mov (& 1) a3)
(push (car a3))
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
111
(eval ())
(bra 110)
109
(mov nil a1)
110
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 107)
108
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push (cvalq #:system:x))
(mov a1 (cvalq #:system:x))
(push '1)
(push '(#:system:x))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil a1 112)
(mov a1 a2)
(mov 'setq a1)
(jcall cons)
(jcall ncons)
(mov a1 a4)
(bra 113)
112
(mov nil a4)
113
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:x))
(adjstk '7)
(push a4)
(mov '2 a4)
(jmp append)
106
(eval ())
(push a1)
(mov '3 a4)
(jmp mcons)
105
(eval ())
(push a1)
(mov (cvalq #:system:result) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '4 a4)
(jmp list)
101
(eval ())
(mov a1 a2)
(pop a1)
(call #:system:generate-block)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(mov (& 7) (cvalq #:system:result))
(mov (& 8) (cvalq #:system:test))
(mov (& 9) (cvalq #:system:lvar))
(adjstk '10)
(return)
))
(loader'((fentry backtrack dmsubr)
(entry backtrack dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push (cvalq #:system:name))
(mov a1 (cvalq #:system:name))
(push (cvalq #:system:lvar))
(mov a4 (cvalq #:system:lvar))
(push (cvalq #:system:body))
(mov a3 (cvalq #:system:body))
(push '3)
(push '(#:system:name #:system:lvar #:system:body))
(push (@ backtrack))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btsymb a1 102)
(mov a1 a3)
(mov 'errnaa a2)
(mov 'backtrack a1)
(jcall error)
102
(push (@ 103))
(push 'tag)
(push 'backtrack)
(bfnil (cvalq #:system:lvar) 104)
(push (cvalq #:system:body))
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 108))
(push 'tag)
(push (cvalq #:system:name))
(push (& 3))
(push '((exit backtrack)))
(mov '4 a4)
(jmp mcons)
108
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 106)
107
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a4)
(bra 105)
104
(push (@ 109))
(push 'let)
(push (@ 110))
(push '#:system:backtrack)
(mov (cvalq #:system:lvar) a2)
(mov 'list a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
110
(eval ())
(jcall ncons)
(push a1)
(push (cvalq #:system:body))
(push nil)
111
(bfcons (& 1) 112)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 113))
(push (@ 114))
(push 'tag)
(push (cvalq #:system:name))
(push (& 4))
(push '((exit backtrack)))
(mov '4 a4)
(jmp mcons)
114
(eval ())
(push a1)
(push (@ 115))
(push 'desetq)
(push (cvalq #:system:lvar))
(push '(#:system:backtrack))
(mov '3 a4)
(jmp mcons)
115
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
113
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 111)
112
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '3 a4)
(jmp mcons)
109
(eval ())
(jcall ncons)
(mov a1 a4)
105
(push a4)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(mov (& 7) (cvalq #:system:lvar))
(mov (& 8) (cvalq #:system:name))
(adjstk '9)
(return)
))
(loader'((fentry catch-all-but dmsubr)
(entry catch-all-but dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push (cvalq #:system:body))
(mov a4 (cvalq #:system:body))
(push '1)
(push '(#:system:body))
(push (@ catch-all-but))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'lock)
(push (@ 102))
(push 'lambda)
(push '(tag val))
(push (@ 103))
(push 'cond)
(push '((null tag) val))
(push (@ 104))
(push 'memq)
(push 'tag)
(push (@ 105))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(mov '((evexit tag val)) a2)
(jcall cons)
(push a1)
(push '((t (error 'catch-all-but errudt tag))))
(mov '4 a4)
(jmp mcons)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
102
(eval ())
(push a1)
(push (cvalq #:system:body))
(mov '3 a4)
(jmp mcons)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:body))
(adjstk '7)
(return)
))
(loader'((fentry closure subr2)
(entry closure subr2)
(push a1)
(push (cvalq #:system:f))
(mov a2 (cvalq #:system:f))
(push '1)
(push '(#:system:f))
(push (@ closure))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 103))
(push 'quote)
(push (@ 104))
(push (& 3))
(mov '1 a4)
(jmp eval)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov (cvalq #:system:f) a4)
(mov (cdr a4) a4)
(mov (cvalq #:system:f) a3)
(mov (cdr a3) a3)
(push (car a4))
(push (cdr a3))
(push a1)
(push (cvalq #:system:body))
(mov (& 2) (cvalq #:system:body))
(push (cvalq #:system:lvar))
(mov (& 4) (cvalq #:system:lvar))
(push '2)
(push '(#:system:body #:system:lvar))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 105))
(push 'lambda)
(push (cvalq #:system:lvar))
(push (@ 106))
(push 'lambda)
(push (& 23))
(push (@ 107))
(push 'protect)
(mov (cvalq #:system:body) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(push (& 17))
(push (& 28))
(push nil)
108
(bfcons (& 2) 109)
(bfcons (& 1) 109)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(push (car a4))
(push (car a3))
(push (cvalq #:system:var))
(mov (& 1) (cvalq #:system:var))
(push '1)
(push '(#:system:var))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 110))
(push 'rplaca)
(push (@ 111))
(push 'cdr)
(push (@ 112))
(push 'quote)
(push (& 14))
(mov '2 a4)
(jmp list)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
111
(eval ())
(push a1)
(push (cvalq #:system:var))
(mov '3 a4)
(jmp list)
110
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:var))
(adjstk '9)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 108)
109
(mov (& 0) a1)
(jcall nreverse)
(adjstk '3)
(push a1)
(mov '3 a4)
(jmp mcons)
107
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
106
(eval ())
(mov (& 11) a2)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
105
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:lvar))
(mov (& 7) (cvalq #:system:body))
(adjstk '11)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:f))
(adjstk '8)
(return)
))
(loader '((end)))
