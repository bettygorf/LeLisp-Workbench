(loader '((title |takr.lo|)))
(loader'((fentry check-takr subr0)
(entry check-takr subr0)
(mov '7 a2)
(mov '(test-takr 1) a1)
(jmp check-value)
))
(loader'((fentry meter-takr subr0)
(entry meter-takr subr0)
(push (@ 101))
(push '(count-calls-init))
(mov '1 a4)
(jmp eval)
101
(eval ())
(mov '6 a3)
(mov '12 a2)
(mov '18 a1)
(call takr)
(push (@ 102))
(push '(count-calls-stop))
(mov '1 a4)
(jmp eval)
102
(eval ())
(return)
))
(loader'((fentry test-takr subr1)
(entry test-takr subr1)
(cabne a1 '1 104)
(mov '6 a3)
(mov '12 a2)
(mov '18 a1)
(bra takr)
103
(push a1)
(mov '6 a3)
(mov '12 a2)
(mov '18 a1)
(call takr)
(pop a1)
104
(sobgez a1 103)
(mov 't a1)
(return)
))
(loader'((entry takr subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak37)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak11)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak17)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak1)
))
(loader'((entry tak1 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak74)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak22)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak34)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak2)
))
(loader'((entry tak2 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak11)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak33)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak51)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak3)
))
(loader'((entry tak3 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak48)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak44)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak68)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak4)
))
(loader'((entry tak4 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak85)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak55)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak85)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak5)
))
(loader'((entry tak5 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak22)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak66)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak2)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak6)
))
(loader'((entry tak6 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak59)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak77)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak19)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak7)
))
(loader'((entry tak7 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak96)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak88)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak36)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak8)
))
(loader'((entry tak8 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak33)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak99)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak53)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak9)
))
(loader'((entry tak9 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak70)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak10)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak70)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak10)
))
(loader'((entry tak10 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak7)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak21)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak87)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak11)
))
(loader'((entry tak11 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak44)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak32)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak4)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak12)
))
(loader'((entry tak12 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak81)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak43)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak21)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak13)
))
(loader'((entry tak13 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak18)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak54)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak38)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak14)
))
(loader'((entry tak14 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak55)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak65)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak55)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak15)
))
(loader'((entry tak15 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak92)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak76)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak72)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak16)
))
(loader'((entry tak16 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak29)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak87)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak89)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak17)
))
(loader'((entry tak17 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak66)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak98)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak6)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak18)
))
(loader'((entry tak18 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak3)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak9)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak23)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak19)
))
(loader'((entry tak19 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak40)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak20)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak40)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak20)
))
(loader'((entry tak20 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak77)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak31)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak57)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak21)
))
(loader'((entry tak21 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak14)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak42)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak74)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak22)
))
(loader'((entry tak22 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak51)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak53)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak91)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak23)
))
(loader'((entry tak23 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak88)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak64)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak8)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak24)
))
(loader'((entry tak24 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak25)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak75)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak25)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak25)
))
(loader'((entry tak25 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak62)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak86)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak42)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak26)
))
(loader'((entry tak26 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak99)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak97)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak59)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak27)
))
(loader'((entry tak27 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak36)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak8)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak76)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak28)
))
(loader'((entry tak28 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak73)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak19)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak93)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak29)
))
(loader'((entry tak29 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak10)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak30)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak10)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak30)
))
(loader'((entry tak30 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak47)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak41)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak27)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak31)
))
(loader'((entry tak31 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak84)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak52)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak44)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak32)
))
(loader'((entry tak32 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak21)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak63)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak61)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak33)
))
(loader'((entry tak33 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak58)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak74)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak78)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak34)
))
(loader'((entry tak34 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak95)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak85)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak95)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak35)
))
(loader'((entry tak35 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak32)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak96)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak12)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak36)
))
(loader'((entry tak36 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak69)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak7)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak29)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak37)
))
(loader'((entry tak37 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak6)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak18)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak46)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak38)
))
(loader'((entry tak38 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak43)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak29)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak63)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak39)
))
(loader'((entry tak39 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak80)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak40)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak80)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak40)
))
(loader'((entry tak40 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak17)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak51)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak97)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak41)
))
(loader'((entry tak41 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak54)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak62)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak14)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak42)
))
(loader'((entry tak42 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak91)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak73)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak31)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak43)
))
(loader'((entry tak43 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak28)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak84)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak48)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak44)
))
(loader'((entry tak44 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak65)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak95)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak65)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak45)
))
(loader'((entry tak45 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak2)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak6)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak82)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak46)
))
(loader'((entry tak46 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak39)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak17)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak99)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak47)
))
(loader'((entry tak47 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak76)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak28)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak16)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak48)
))
(loader'((entry tak48 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak13)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak39)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak33)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak49)
))
(loader'((entry tak49 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak50)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak50)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak50)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak50)
))
(loader'((entry tak50 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak87)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak61)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak67)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak51)
))
(loader'((entry tak51 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak24)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak72)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak84)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak52)
))
(loader'((entry tak52 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak61)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak83)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak1)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak53)
))
(loader'((entry tak53 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak98)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak94)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak18)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak54)
))
(loader'((entry tak54 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak35)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak5)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak35)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak55)
))
(loader'((entry tak55 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak72)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak16)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak52)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak56)
))
(loader'((entry tak56 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak9)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak27)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak69)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak57)
))
(loader'((entry tak57 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak46)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak38)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak86)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak58)
))
(loader'((entry tak58 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak83)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak49)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak3)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak59)
))
(loader'((entry tak59 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak20)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak60)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak20)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak60)
))
(loader'((entry tak60 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak57)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak71)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak37)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak61)
))
(loader'((entry tak61 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak94)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak82)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak54)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak62)
))
(loader'((entry tak62 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak31)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak93)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak71)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak63)
))
(loader'((entry tak63 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak68)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak4)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak88)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak64)
))
(loader'((entry tak64 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak5)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak15)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak5)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak65)
))
(loader'((entry tak65 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak42)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak26)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak22)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak66)
))
(loader'((entry tak66 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak79)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak37)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak39)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak67)
))
(loader'((entry tak67 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak16)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak48)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak56)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak68)
))
(loader'((entry tak68 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak53)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak59)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak73)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak69)
))
(loader'((entry tak69 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak90)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak70)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak90)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak70)
))
(loader'((entry tak70 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak27)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak81)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak7)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak71)
))
(loader'((entry tak71 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak64)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak92)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak24)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak72)
))
(loader'((entry tak72 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak1)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak3)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak41)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak73)
))
(loader'((entry tak73 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak38)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak14)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak58)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak74)
))
(loader'((entry tak74 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak75)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak25)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak75)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak75)
))
(loader'((entry tak75 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak12)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak36)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak92)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak76)
))
(loader'((entry tak76 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak49)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak47)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak9)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak77)
))
(loader'((entry tak77 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak86)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak58)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak26)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak78)
))
(loader'((entry tak78 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak23)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak69)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak43)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak79)
))
(loader'((entry tak79 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak60)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak80)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak60)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak80)
))
(loader'((entry tak80 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak97)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak91)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak77)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak81)
))
(loader'((entry tak81 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak34)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak2)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak94)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak82)
))
(loader'((entry tak82 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak71)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak13)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak11)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak83)
))
(loader'((entry tak83 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak8)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak24)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak28)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak84)
))
(loader'((entry tak84 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak45)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak35)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak45)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak85)
))
(loader'((entry tak85 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak82)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak46)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak62)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak86)
))
(loader'((entry tak86 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak19)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak57)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak79)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak87)
))
(loader'((entry tak87 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak56)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak68)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak96)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak88)
))
(loader'((entry tak88 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak93)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak79)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak13)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak89)
))
(loader'((entry tak89 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak30)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak90)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak30)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak90)
))
(loader'((entry tak90 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak67)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak1)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak47)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak91)
))
(loader'((entry tak91 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak4)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak12)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak64)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak92)
))
(loader'((entry tak92 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak41)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak23)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak81)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak93)
))
(loader'((entry tak93 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak78)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak34)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak98)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak94)
))
(loader'((entry tak94 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak15)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak45)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak15)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak95)
))
(loader'((entry tak95 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak52)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak56)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak32)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak96)
))
(loader'((entry tak96 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak89)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak67)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak49)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak97)
))
(loader'((entry tak97 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak26)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak78)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak66)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak98)
))
(loader'((entry tak98 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call tak63)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call tak89)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call tak83)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra tak99)
))
(loader'((entry tak99 subr3)
(push a3)
(push a2)
(push a1)
(cnblt a2 a1 101)
(mov a3 a1)
(adjstk '3)
(return)
101
(diff '1 a1)
(call takr)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(mov (& 1) a3)
(mov (& 3) a2)
(mov a4 a1)
(call takr)
(push a1)
(mov (& 4) a4)
(diff '1 a4)
(mov (& 3) a3)
(mov (& 2) a2)
(mov a4 a1)
(call takr)
(mov a1 a3)
(pop a2)
(pop a1)
(adjstk '3)
(bra takr)
))
(loader '((end)))
