;;; GELL 15.26: elaboration file for the module: complice
;;;             translation done: "Thu Aug  26 93 10:15:12 "

(with ((outchan ()))
	(print ";Loading elaboration file: complice.le"))
(unless (boundp '#:module:compiled-list)
	(setq #:module:compiled-list ()))
(newl #:module:compiled-list 'complice)
(setq #:system:read-case-flag t)

(defcelaborate "GZcomplice" "Thu Aug  26 93 10:15:12 "

'((defmacro-open . fsubr) (make-macro-open . subr2) (macro-openp . subr1) (remove-macro-open . subr1) (#:complice:macroexpand . subr1) (#:complice:flatt . subr1) (#:complice:count . subr2) (#:complice:complement . subr2) (#:complice:setcassq . subr3) (#:complice:defvar . fsubr) (#:complice:globalvarp . subr1) (#:complice:declareglobalvar . subr1) (#:complice:get-all-def-in-files . subr2) (#:complice:error . subr2) (#:complice:errorf . subr3) (#:complice:warning . subr2) (#:complice:warningf . subr3) (#:complice:ierror . subr2) (#:complice:set-error . subr0) (#:complice:error:eol . subr0) (#:complice:syserror . subr3) (#:complice:pass-one . subr1) (makemodule . subr1) (makemodule-pass-two . subr1) (#:complice:generate-in-file . subr3) (pretty-lap . subr2) (#:complice:peephole . subr1) (#:complice:pass-two . subr3) (dont-compile . fsubr) (compile . fsubr) (compiler . nsubr) (compile-all-in-core . nsubr) (#:compile-all-in-core:g104 . subr1) (compilefiles . nsubr) (compilemodule . nsubr))

#[macro-open symbol expr setfn getfn1 getsymb1 remob #:complice:error #:system:debug #:system:print-msgs #:system:error-flag (#:system:debug #:system:print-msgs #:system:error-flag) lambda #:system:error-tag #:compiler:open-p apply typefn macro valfn dmacro msubr call dmsubr cond unless if not list progn when ifn mcons neq eq nequal equal null atomp atom decr setq |-| |1-| incr |+| |1+| newl cons nextl prog1 car cdr newr let #:compiler:newr nconc ((ncons #:compiler:newr)) dynamic-let dynamic return return-from map mapl maplist mapcon nreconc mapc mapcar mapcan every any mapvector untilexit tag while t loop catcherror errset err exit eval-when desetq deset quote defprop putprop psetq setqq letvq prog2 lognot logxor (-1) add1 add (1) sub1 sub (1) time caar cadr cdar cddr caaar caadr cadar caddr cdaar cdadr cddar cdddr caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr ((#:system:error-flag t)) ncons ((#:system:error-flag ()) (#:system:print-msgs 0) (#:system:debug ())) eval ((#:system:print-msgs (if #:system:error-flag #:system:print-msgs 0)) (#:system:debug (if #:system:error-flag #:system:debug ()))) nil or complice featurep dynamic-flag load compile #:compiler:exported-env member copy eprogn local-compile #:system:map:r "arg" concat #:system:map consp let* (#:system:map:r 0) #:system:map:v ((#:system:map:n (vlength #:system:map:v))) (lt #:system:map:r #:system:map:n) ((vref #:system:map:v #:system:map:r)) ((setq #:system:map:r (add1 #:system:map:r))) funcall function () fexpr fsubr flambda mlambda and append nreverse (()) (t) (()) ((#:compiler:time (runtime))) ((fsub (runtime) #:compiler:time)) ((#:compiler:time (runtime))) ((fsub (runtime) #:compiler:time)) #:complice:count #:complice:complement errnva defvar #:complice:globalvar #:system:loaded-from-file get system sys-package #:sys-package:colon inchan #:system:in-read-flag #:system:redef-flag (#:system:in-read-flag #:system:redef-flag #:system:loaded-from-file #:sys-package:colon) #:complice:list-of-loaded-file cassoc probepathf "fichier inexistant" compilefiles openi close eof read scan de df defun dm dmd defmacro #:complice:exportable-definition remq exportable-definition synonym #:complice:synonym-definition #:complice:macroexpand #:complice:x ('t '#:complice:globalvar) #:messages:current-language getprop string #:complice:f #:complice:errorf #:complice:set-error "E" #:complice:warningf #:complice:warning-flag #:complice:no-warning "W" #:complice:warning #:complice:debug? "I" #:complice:error-occured outchan #:complice:outchan #:sys-package:itsoft #:system:print-for-read (#:sys-package:itsoft #:system:print-for-read) eol "." ".." ":" print "     " #:llcp:exit syserror #:complice:extfnt #:complice:fvar-al #:complice:lvar-al #:complice:allfnt (#:sys-package:itsoft #:complice:extfnt #:complice:fvar-al #:complice:lvar-al #:complice:allfnt) #:complice:fvar (#:complice:f) resetfn remprop #:complice:switched #:complice:rec-env &nobind #:complice:flatt last constantp numberp #:complice:ftype subr0 subr1 subr2 subr3 nsubr until repeat protect evexit evtag schedule with-interrupts without-interrupts lock tagbody comment declare selectq letv unexit block unwind symeval evlis set precompile flet #:complice:parano-flag #:complice:globalvarp cval #:complice:setcassq parano subr #:complice:bind gensym delq special cpcall #:complice:done (#:complice:done) readdefmodule makemodule import getdefmodule cpexport libloadfile files include export cpenv #:complice:get-all-def-in-files #:complice:pass-one setdefmodule printdefmodule (#:complice:bind #:complice:fvar #:complice:ftype) macro-openp cpfunctions cpimport loadmodule #:complice:generate-in-file (#:complice:bind #:complice:fvar #:complice:ftype) (#:complice:bind #:complice:ftype) obase printlevel printlength rmargin lmargin (#:system:print-for-read) #:system:obj-extension index catenate openo outbuf loader title #:complice:pass-two ('#:complice:fvar) princn prin terpri (loader '((end))) "(loader '(" "))" (#:system:print-for-read) outpos (#:system:print-for-read) cvalq @ & rplac acons bra (return) jmp push mov jcall #:compiler:no-jrst-hack adjstk (return) #:complice:talk? #:complice:lfnt-module (#:complice:talk? #:complice:lfnt-module #:complice:f #:sys-package:itsoft) #:complice:lap #:complice:&nobind #:complice:tail? a1 (return) #:complice:op-stack #:complice:peephole-flag #:complice:peephole pretty-lap #:complice:return? a2 a3 #:complice:lframe #:complice:v-stack #:complice:genlab a4 (eval ()) #:complice:stack done 't bfnil btnil fentry entry cnbeq cnbge (a1) (a2) (jmp #:llcp:errwna) (a1 a2 a3) (push a4) diff (a4) (jcall #:llcp:nlist) (jcall #:llcp:nlist) sp #:complice:env variablep #:complice:a1 #:complice:a2 #:complice:a3 #:complice:a4 #:complice:protect #:complice:l-adjust #:complice:l-readjust ?? (a1 a2 a3 a4) tailp 'lambda llink cbindn (mov (& 1) dlink) (mov (& 2) llink) reverse "STACK NOT EMPTY" #:complice:ierror (pop a4) (adjstk a4) "OPERANDE DESTINATION INCORRECTE" dlink (stack dlink) pop (return) 't 't arg go identity rplaca rplacd plist objval oval packagecell pkgc typestring typevector vlength slen hgsize 'comment vref hpxmov sref hbxmov vset hpmovx sset hbmovx plus '1 '1 mul times div quo rem fadd fplus fsub fdiff fmul ftimes fdiv fquo logand land logor lor lxor logshift lshift "CLAUSE DE SELECTQ" cabne symbolp (a1 a2 a3 a4) (a1 a2 a3 a4) sobgez 't #:complice:lhack-for-arg (a4) (a4) (a4) xspmov (mov (& 1) dlink) (eval ()) (jmp #:llcp:exit) (jmp #:llcp:exit) prot (mov (& 1) dlink) (bri a3) (eval ()) (mov (& 1) dlink) bffix (& 2) (& 4) (& 5) '3 (jmp funcall) btsymb (& 1) (mov (& 2) a1) (mov (& 1) a2) (bri (& 0)) (jcall #:llcp:block) (return) (eval ()) (jmp #:llcp:retfrom) (jcall #:llcp:schedule) (return) (eval ()) (jcall #:llcp:with-interrupts) (return) (eval ()) (jcall #:llcp:without-interrupts) (return) (eval ()) (jcall #:llcp:tagbody) (eval ()) (return) (eval ()) (jmp #:llcp:go) 'comment 't (return) 't bfcons btcons btvar bfvar bfsymb fixp btfix floatp btfloat bffloat vectorp btvect bfvect stringp btstrg bfstrg cabeq eqn cnbne neqn ge cnblt gt cnbgt cnble le lt feqn cfbeq cfbne fneqn fge cfbge cfblt fgt cfbgt cfble fle flt memq dont-compile larg 'eval 'quote (larg) make-macro-open compiler #:llcp:errwna ((abort)) abort ((end)) #:complice:save (#:complice:save #:complice:bind #:complice:ftype) old f2 f1 (#:complice:outchan old #:complice:warning-flag f2 f1) #:compile-all-in-core:g104 mapoblist #:system:print-with-abbrev-flag (#:system:print-with-abbrev-flag) (#:complice:bind #:complice:fvar #:complice:ftype) compilemodule (#:system:print-with-abbrev-flag) makemodule-pass-two defmacro-open #:gell-resetfn:function-name #:gell-resetfn:function-f #:gell-resetfn:function-2 #:gell-resetfn:function-1 remove-macro-open #:gell-resetfn:function-3 #:complice:defvar #:complice:declareglobalvar #:gell-resetfn:function-0 #:complice:error:eol #:complice:syserror #:gell-resetfn:function-n compile-all-in-core]
)

(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'cpmac)))
(defvar #:sys-package:colon 'compiler)
(defvar #:compiler:exported-env ())
(defvar #:compiler:open-p t)
(defcsetfn 'defmacro-open "GZcomplice" 0)
(defcsetfn 'make-macro-open "GZcomplice" 1)
(defcsetfn 'macro-openp "GZcomplice" 2)
(defcsetfn 'remove-macro-open "GZcomplice" 3)
(defvar dynamic-flag '#:complice:globalvar)
(defmacro-open synonymq (s1 s2) (list 'synonym (list 'quote s1) (list 'quote s2)))
(defvar #:sys-package:colon 'complice)
(synonym 'declare 'comment)
(defcsetfn '#:complice:macroexpand "GZcomplice" 4)
(defcsetfn '#:complice:flatt "GZcomplice" 5)
(defcsetfn '#:complice:count "GZcomplice" 6)
(defcsetfn '#:complice:complement "GZcomplice" 7)
(defcsetfn '#:complice:setcassq "GZcomplice" 8)
(defcsetfn '#:complice:defvar "GZcomplice" 9)
(synonym 'defvar '#:complice:defvar)
(defcsetfn '#:complice:globalvarp "GZcomplice" 10)
(defcsetfn '#:complice:declareglobalvar "GZcomplice" 11)
(defvar #:complice:list-of-loaded-file ())
(defcsetfn '#:complice:get-all-def-in-files "GZcomplice" 12)
(defvar #:complice:exportable-definition ())
(defvar #:complice:synonym-definition ())
(defvar #:sys-package:colon 'complice)
(defvar #:messages:current-language 'french)
(putprop '#:complice:error '#["Internal Error" "Function computed" "Application of an mlambda" "Error during macro expansion" "function not defined" "Cannot compile an flet" "Makemodule impossible" "Cannot compile a letv" "Argument not a variable"] 'english)
(putprop '#:complice:error '#["Erreur interne" "Fonction calculee" "Application d'une mlambda" "Erreur durant macroexpansion" "Fonction non definie" "Ne peut pas compiler un flet" "Il faut faire un makemodule" "Ne peut pas compiler un letv" "L'argument n'est pas une variable"] 'french)
(putprop '#:complice:warning '#["Undeclared global variable" "Variable not dynamic" "Unused function" "Wrong function type" "External function" "Wrong number of arguments" "Function external to module" "Calculated function" "Explicit call to evaluator" "Function external to file" "Module Interdependence" "Function redefined in module"] 'english)
(putprop '#:complice:warning '#["Variable globale non declaree" "Variable non speciale" "Fonction non utilisee" "Fonction de mauvais type" "Fonction externe" "Mauvais nombre d'arguments" "Fonction externe au module" "Fonction calculee" "Appel explicite a l'evaluateur" "Fonction externe au fichier" "Interdependance de modules" "Fonction deja definie dans le module"] 'french)
(defvar #:complice:error-occured ())
(if (not (boundp '#:complice:warning-flag)) (progn (defvar #:complice:warning-flag t)))
(if (not (boundp '#:complice:no-warning)) (progn (defvar #:complice:no-warning '(7 8))))
(defvar #:complice:debug? ())
(defvar #:complice:outchan ())
(defcsetfn '#:complice:error "GZcomplice" 13)
(defcsetfn '#:complice:errorf "GZcomplice" 14)
(defcsetfn '#:complice:warning "GZcomplice" 15)
(defcsetfn '#:complice:warningf "GZcomplice" 16)
(defcsetfn '#:complice:ierror "GZcomplice" 17)
(defcsetfn '#:complice:set-error "GZcomplice" 18)
(defcsetfn '#:complice:error:eol "GZcomplice" 19)
(defcsetfn '#:complice:syserror "GZcomplice" 20)
(defvar #:sys-package:colon 'complice)
(if (not (boundp '#:complice:parano-flag)) (progn (defvar #:complice:parano-flag t)))
(defvar #:complice:x ())
(defvar #:complice:f '#:complice:pass-one)
(defcsetfn '#:complice:pass-one "GZcomplice" 21)
(defvar #:sys-package:colon 'complice)
(defcsetfn 'makemodule "GZcomplice" 22)
(defvar #:sys-package:colon 'complice)
(defcsetfn 'makemodule-pass-two "GZcomplice" 23)
(defcsetfn '#:complice:generate-in-file "GZcomplice" 24)
(defcsetfn 'pretty-lap "GZcomplice" 25)
(defcsetfn '#:complice:peephole "GZcomplice" 26)
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'peephole)))
(defvar #:sys-package:colon 'compiler)
(if (not (boundp '#:compiler:ph-debug)) (progn (defvar #:compiler:ph-debug ())))
(if (not (boundp '#:compiler:ph-stat)) (progn (defvar #:compiler:ph-stat ())))
(defvar #:compiler:no-jrst-hack '(#:llcp:nlist #:llcp:cbindl #:llcp:cbinds #:llcp:tagbody #:llcp:with-interrupts #:llcp:without-interrupts #:llcp:schedule #:llcp:block #:llcp:protect #:llcp:tag))
(defvar #:sys-package:colon 'complice)
(defvar #:complice:peephole-flag t)
(defcsetfn '#:complice:pass-two "GZcomplice" 27)
(defvar #:sys-package:colon 'complice)
(defvar #:complice:genlab 100)
(defvar #:complice:lap ())
(defvar #:complice:a1 ())
(defvar #:complice:a2 ())
(defvar #:complice:a3 ())
(defvar #:complice:a4 ())
(defvar #:complice:stack ())
(defvar #:complice:v-stack ())
(defvar #:complice:env ())
(defvar #:complice:protect ())
(defvar #:complice:op-stack ())
(defvar #:complice:l-adjust ())
(defvar #:complice:l-readjust ())
(defvar #:complice:tail? ())
(defvar #:complice:return? ())
(defvar #:complice:lframe ())
(defvar #:complice:bind ())
(defvar #:complice:&nobind ())
(defvar #:sys-package:colon 'complice)
(defvar #:complice:lhack-for-arg ())
(defvar #:sys-package:colon 'complice)
(defvar #:sys-package:colon 'complice)
(add-feature 'compiler)
(add-feature 'complice)
(defcsetfn 'dont-compile "GZcomplice" 28)
(defcsetfn 'compile "GZcomplice" 29)
(defcsetfn 'compiler "GZcomplice" 30)
(defcsetfn 'compile-all-in-core "GZcomplice" 31)
(defcsetfn '#:compile-all-in-core:g104 "GZcomplice" 32)
(defcsetfn 'compilefiles "GZcomplice" 33)
(defcsetfn 'compilemodule "GZcomplice" 34)

(defccheck '(makemodule-pass-two makemodule mapoblist loader #:llcp:errwna compiler make-macro-open |-| symbolp #:complice:ierror reverse tailp variablep equal pretty-lap #:complice:peephole acons rplac outpos terpri prin princn #:complice:pass-two outbuf openo catenate index lmargin rmargin printlength printlevel obase #:complice:generate-in-file loadmodule macro-openp printdefmodule setdefmodule #:complice:pass-one nconc #:complice:get-all-def-in-files libloadfile getdefmodule readdefmodule delq gensym #:complice:setcassq #:complice:globalvarp numberp constantp last #:complice:flatt #:complice:warning remprop funcall #:llcp:exit eol print outchan #:complice:warningf #:complice:set-error #:complice:errorf string getprop #:complice:macroexpand remq read close openi probepathf cassoc inchan get eval #:complice:complement #:complice:count append concat |1-| eprogn copy member putprop featurep mcons list call valfn typefn apply #:complice:error remob getsymb1 getfn1 setfn symbol))
