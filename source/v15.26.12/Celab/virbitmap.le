;;; GELL 15.26: elaboration file for the module: virbitmap
;;;             translation done: "Tue Aug  24 93 10:49:23 "

(with ((outchan ()))
	(print ";Loading elaboration file: virbitmap.le"))
(unless (boundp '#:module:compiled-list)
	(setq #:module:compiled-list ()))
(newl #:module:compiled-list 'virbitmap)
(setq #:system:read-case-flag t)

(defcelaborate "GZvirbitmap" "Tue Aug  24 93 10:49:23 "

'((#:display:make . subr0) (#:display:name . nsubr) (#:display:package . nsubr) (#:display:device . nsubr) (#:display:xmax . nsubr) (#:display:ymax . nsubr) (#:display:eventmode . nsubr) (#:display:prologuep . nsubr) (#:display:keyboard-focus-window . nsubr) (#:display:window . nsubr) (#:display:graph-env . nsubr) (#:display:root-window . nsubr) (#:display:main-graph-env . nsubr) (#:display:background . nsubr) (#:display:foreground . nsubr) (#:display:windows . nsubr) (#:display:bitmaps . nsubr) (#:display:menus . nsubr) (#:display:colors . nsubr) (#:display:font-names . nsubr) (#:display:pattern-bitmaps . nsubr) (#:display:cursor-bitmaps . nsubr) (#:display:extend . nsubr) (#:display:graph-envs . nsubr) (#:display:current-selection . nsubr) (#:display:resource . nsubr) (#:display:named-cursors . nsubr) (#:display:stipple-bitmaps . nsubr) (#:color:name . nsubr) (#:color:red . nsubr) (#:color:green . nsubr) (#:color:blue . nsubr) (#:color:mutable . nsubr) (#:color:display . nsubr) (#:color:extend . nsubr) (#:graph-env:font . nsubr) (#:graph-env:line-style . nsubr) (#:graph-env:pattern . nsubr) (#:graph-env:mode . nsubr) (#:graph-env:foreground . nsubr) (#:graph-env:background . nsubr) (#:graph-env:clip-x . nsubr) (#:graph-env:clip-y . nsubr) (#:graph-env:clip-w . nsubr) (#:graph-env:clip-h . nsubr) (#:graph-env:bitmap . nsubr) (#:graph-env:display . nsubr) (#:graph-env:extend . nsubr) (#:graph-env:stipple . nsubr) (#:graph-env:fill-mode . nsubr) (#:event:make . subr0) (#:event:code . nsubr) (#:event:window . nsubr) (#:event:detail . nsubr) (#:event:gx . nsubr) (#:event:gy . nsubr) (#:event:x . nsubr) (#:event:y . nsubr) (#:event:w . nsubr) (#:event:h . nsubr) (#:event:b . nsubr) (#:bitmap:w . nsubr) (#:bitmap:h . nsubr) (#:bitmap:extend . nsubr) (#:bitmap:display . nsubr) (#:bitmap:stipple:data . nsubr) (#:image:rectangle:make . subr0) (#:image:rectangle:x . nsubr) (#:image:rectangle:y . nsubr) (#:image:rectangle:w . nsubr) (#:image:rectangle:h . nsubr) (#:image:rectangle:window:title . nsubr) (#:image:rectangle:window:hilited . nsubr) (#:image:rectangle:window:visible . nsubr) (#:image:rectangle:window:graph-env . nsubr) (#:image:rectangle:window:extend . nsubr) (#:image:rectangle:window:father . nsubr) (#:image:rectangle:window:properties . nsubr) (#:image:rectangle:window:cursor . nsubr) (#:image:rectangle:window:display . nsubr) (#:image:rectangle:window:subwindows . nsubr) (#:image:rectangle:window:events-list . nsubr) (#:image:rectangle:window:window-type . nsubr) (#:image:rectangle:window:graphic-properties . nsubr) (#:image:rectangle:window:state . nsubr) (#:menu:title . nsubr) (#:menu:itemlists . nsubr) (#:menu:display . nsubr) (#:menu:extend . nsubr) (#:menu:itemlist:name . nsubr) (#:menu:itemlist:active . nsubr) (#:menu:itemlist:items . nsubr) (#:menu:item:name . nsubr) (#:menu:item:active . nsubr) (#:menu:item:value . nsubr) (#:font-info:make . subr0) (#:font-info:ascent . nsubr) (#:font-info:descent . nsubr) (#:font-info:angle . nsubr) (#:font-info:weight . nsubr) (#:font-info:minrbearing . nsubr) (#:font-info:minlbearing . nsubr) (#:font-info:minascent . nsubr) (#:font-info:mindescent . nsubr) (#:font-info:minwidth . nsubr) (#:font-info:maxrbearing . nsubr) (#:font-info:maxlbearing . nsubr) (#:font-info:maxascent . nsubr) (#:font-info:maxdescent . nsubr) (#:font-info:maxwidth . nsubr) (#:window:make . dmsubr) (#:window:background . nsubr) (#:window:left . dmsubr) (#:window:top . dmsubr) (#:window:width . dmsubr) (#:window:height . dmsubr) (#:window:title . dmsubr) (#:window:hilited . dmsubr) (#:window:visible . dmsubr) (#:window:graph-env . dmsubr) (#:window:extend . dmsubr) (#:window:father . dmsubr) (#:window:properties . dmsubr) (#:window:cursor . dmsubr) (#:window:display . dmsubr) (#:window:subwindows . dmsubr) (#:window:events-list . dmsubr) (#:window:window-type . dmsubr) (#:window:graphic-properties . dmsubr) (#:window:state . dmsubr))

#[vector display #:display:name #:system:structaccess #:display:package #:display:device #:display:xmax #:display:ymax #:display:eventmode #:display:prologuep #:display:keyboard-focus-window #:display:window #:display:graph-env #:display:root-window #:display:main-graph-env #:display:background #:display:foreground #:display:windows #:display:bitmaps #:display:menus #:display:colors #:display:font-names #:display:pattern-bitmaps #:display:cursor-bitmaps #:display:extend #:display:graph-envs #:display:current-selection #:display:resource #:display:named-cursors #:display:stipple-bitmaps #:color:name #:color:red #:color:green #:color:blue #:color:mutable #:color:display #:color:extend #:graph-env:font #:graph-env:line-style #:graph-env:pattern #:graph-env:mode #:graph-env:foreground #:graph-env:background #:graph-env:clip-x #:graph-env:clip-y #:graph-env:clip-w #:graph-env:clip-h #:graph-env:bitmap #:graph-env:display #:graph-env:extend #:graph-env:stipple #:graph-env:fill-mode event #:event:code #:event:window #:event:detail #:event:gx #:event:gy #:event:x #:event:y #:event:w #:event:h #:event:b #:bitmap:w #:bitmap:h #:bitmap:extend #:bitmap:display #:bitmap:stipple:data #:image:rectangle #:image:rectangle:x #:image:rectangle:y #:image:rectangle:w #:image:rectangle:h #:image:rectangle:window:title #:image:rectangle:window:hilited #:image:rectangle:window:visible #:image:rectangle:window:graph-env #:image:rectangle:window:extend #:image:rectangle:window:father #:image:rectangle:window:properties #:image:rectangle:window:cursor #:image:rectangle:window:display #:image:rectangle:window:subwindows #:image:rectangle:window:events-list #:image:rectangle:window:window-type #:image:rectangle:window:graphic-properties #:image:rectangle:window:state #:menu:title #:menu:itemlists #:menu:display #:menu:extend #:menu:itemlist:name #:menu:itemlist:active #:menu:itemlist:items #:menu:item:name #:menu:item:active #:menu:item:value font-info #:font-info:ascent #:font-info:descent #:font-info:angle #:font-info:weight #:font-info:minrbearing #:font-info:minlbearing #:font-info:minascent #:font-info:mindescent #:font-info:minwidth #:font-info:maxrbearing #:font-info:maxlbearing #:font-info:maxascent #:font-info:maxdescent #:font-info:maxwidth (#:image:rectangle:window:make) #:window:background #:llcp:errwna #:display:make #:gell-resetfn:function-name #:gell-resetfn:function-0 #:gell-resetfn:function-n #:event:make #:image:rectangle:make #:font-info:make #:window:make #:gell-resetfn:function-1 #:window:left #:window:top #:window:width #:window:height #:window:title #:window:hilited #:window:visible #:window:graph-env #:window:extend #:window:father #:window:properties #:window:cursor #:window:display #:window:subwindows #:window:events-list #:window:window-type #:window:graphic-properties #:window:state]
)

(setq #:sys-package:colon 'display)
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'virbitmap)))
(putprop 'display '((() () () () () () () () () () () () () () () () () () () () () () () () () () ()) name package device xmax ymax eventmode prologuep keyboard-focus-window window graph-env root-window main-graph-env background foreground windows bitmaps menus colors font-names pattern-bitmaps cursor-bitmaps extend graph-envs current-selection resource named-cursors stipple-bitmaps) 'defstruct)
(defcsetfn '#:display:make "GZvirbitmap" 0)
(defcsetfn '#:display:name "GZvirbitmap" 1)
(if (featurep 'setf) (progn (progn (putprop '#:display:name '#:display:name 'setf-inverse) '#:display:name)))
(if (featurep 'compiler) (progn (defmacro-open #:display:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:display:package "GZvirbitmap" 2)
(if (featurep 'setf) (progn (progn (putprop '#:display:package '#:display:package 'setf-inverse) '#:display:package)))
(if (featurep 'compiler) (progn (defmacro-open #:display:package (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:display:device "GZvirbitmap" 3)
(if (featurep 'setf) (progn (progn (putprop '#:display:device '#:display:device 'setf-inverse) '#:display:device)))
(if (featurep 'compiler) (progn (defmacro-open #:display:device (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:display:xmax "GZvirbitmap" 4)
(if (featurep 'setf) (progn (progn (putprop '#:display:xmax '#:display:xmax 'setf-inverse) '#:display:xmax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:xmax (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:display:ymax "GZvirbitmap" 5)
(if (featurep 'setf) (progn (progn (putprop '#:display:ymax '#:display:ymax 'setf-inverse) '#:display:ymax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ymax (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:display:eventmode "GZvirbitmap" 6)
(if (featurep 'setf) (progn (progn (putprop '#:display:eventmode '#:display:eventmode 'setf-inverse) '#:display:eventmode)))
(if (featurep 'compiler) (progn (defmacro-open #:display:eventmode (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:display:prologuep "GZvirbitmap" 7)
(if (featurep 'setf) (progn (progn (putprop '#:display:prologuep '#:display:prologuep 'setf-inverse) '#:display:prologuep)))
(if (featurep 'compiler) (progn (defmacro-open #:display:prologuep (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(defcsetfn '#:display:keyboard-focus-window "GZvirbitmap" 8)
(if (featurep 'setf) (progn (progn (putprop '#:display:keyboard-focus-window '#:display:keyboard-focus-window 'setf-inverse) '#:display:keyboard-focus-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:keyboard-focus-window (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(defcsetfn '#:display:window "GZvirbitmap" 9)
(if (featurep 'setf) (progn (progn (putprop '#:display:window '#:display:window 'setf-inverse) '#:display:window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:window (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(defcsetfn '#:display:graph-env "GZvirbitmap" 10)
(if (featurep 'setf) (progn (progn (putprop '#:display:graph-env '#:display:graph-env 'setf-inverse) '#:display:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:graph-env (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(defcsetfn '#:display:root-window "GZvirbitmap" 11)
(if (featurep 'setf) (progn (progn (putprop '#:display:root-window '#:display:root-window 'setf-inverse) '#:display:root-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:root-window (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(defcsetfn '#:display:main-graph-env "GZvirbitmap" 12)
(if (featurep 'setf) (progn (progn (putprop '#:display:main-graph-env '#:display:main-graph-env 'setf-inverse) '#:display:main-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:main-graph-env (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(defcsetfn '#:display:background "GZvirbitmap" 13)
(if (featurep 'setf) (progn (progn (putprop '#:display:background '#:display:background 'setf-inverse) '#:display:background)))
(if (featurep 'compiler) (progn (defmacro-open #:display:background (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(defcsetfn '#:display:foreground "GZvirbitmap" 14)
(if (featurep 'setf) (progn (progn (putprop '#:display:foreground '#:display:foreground 'setf-inverse) '#:display:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:display:foreground (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(defcsetfn '#:display:windows "GZvirbitmap" 15)
(if (featurep 'setf) (progn (progn (putprop '#:display:windows '#:display:windows 'setf-inverse) '#:display:windows)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(defcsetfn '#:display:bitmaps "GZvirbitmap" 16)
(if (featurep 'setf) (progn (progn (putprop '#:display:bitmaps '#:display:bitmaps 'setf-inverse) '#:display:bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bitmaps (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(defcsetfn '#:display:menus "GZvirbitmap" 17)
(if (featurep 'setf) (progn (progn (putprop '#:display:menus '#:display:menus 'setf-inverse) '#:display:menus)))
(if (featurep 'compiler) (progn (defmacro-open #:display:menus (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(defcsetfn '#:display:colors "GZvirbitmap" 18)
(if (featurep 'setf) (progn (progn (putprop '#:display:colors '#:display:colors 'setf-inverse) '#:display:colors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:colors (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(defcsetfn '#:display:font-names "GZvirbitmap" 19)
(if (featurep 'setf) (progn (progn (putprop '#:display:font-names '#:display:font-names 'setf-inverse) '#:display:font-names)))
(if (featurep 'compiler) (progn (defmacro-open #:display:font-names (struct . valeur) (ifn valeur (list 'vref struct 18) (list 'vset struct 18 (car valeur))))))
(defcsetfn '#:display:pattern-bitmaps "GZvirbitmap" 20)
(if (featurep 'setf) (progn (progn (putprop '#:display:pattern-bitmaps '#:display:pattern-bitmaps 'setf-inverse) '#:display:pattern-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:pattern-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 19) (list 'vset struct 19 (car valeur))))))
(defcsetfn '#:display:cursor-bitmaps "GZvirbitmap" 21)
(if (featurep 'setf) (progn (progn (putprop '#:display:cursor-bitmaps '#:display:cursor-bitmaps 'setf-inverse) '#:display:cursor-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:cursor-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 20) (list 'vset struct 20 (car valeur))))))
(defcsetfn '#:display:extend "GZvirbitmap" 22)
(if (featurep 'setf) (progn (progn (putprop '#:display:extend '#:display:extend 'setf-inverse) '#:display:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:display:extend (struct . valeur) (ifn valeur (list 'vref struct 21) (list 'vset struct 21 (car valeur))))))
(defcsetfn '#:display:graph-envs "GZvirbitmap" 23)
(if (featurep 'setf) (progn (progn (putprop '#:display:graph-envs '#:display:graph-envs 'setf-inverse) '#:display:graph-envs)))
(if (featurep 'compiler) (progn (defmacro-open #:display:graph-envs (struct . valeur) (ifn valeur (list 'vref struct 22) (list 'vset struct 22 (car valeur))))))
(defcsetfn '#:display:current-selection "GZvirbitmap" 24)
(if (featurep 'setf) (progn (progn (putprop '#:display:current-selection '#:display:current-selection 'setf-inverse) '#:display:current-selection)))
(if (featurep 'compiler) (progn (defmacro-open #:display:current-selection (struct . valeur) (ifn valeur (list 'vref struct 23) (list 'vset struct 23 (car valeur))))))
(defcsetfn '#:display:resource "GZvirbitmap" 25)
(if (featurep 'setf) (progn (progn (putprop '#:display:resource '#:display:resource 'setf-inverse) '#:display:resource)))
(if (featurep 'compiler) (progn (defmacro-open #:display:resource (struct . valeur) (ifn valeur (list 'vref struct 24) (list 'vset struct 24 (car valeur))))))
(defcsetfn '#:display:named-cursors "GZvirbitmap" 26)
(if (featurep 'setf) (progn (progn (putprop '#:display:named-cursors '#:display:named-cursors 'setf-inverse) '#:display:named-cursors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:named-cursors (struct . valeur) (ifn valeur (list 'vref struct 25) (list 'vset struct 25 (car valeur))))))
(defcsetfn '#:display:stipple-bitmaps "GZvirbitmap" 27)
(if (featurep 'setf) (progn (progn (putprop '#:display:stipple-bitmaps '#:display:stipple-bitmaps 'setf-inverse) '#:display:stipple-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:stipple-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 26) (list 'vset struct 26 (car valeur))))))
(putprop 'color '((() () () () () () ()) name red green blue mutable display extend) 'defstruct)
(defcsetfn '#:color:name "GZvirbitmap" 28)
(if (featurep 'setf) (progn (progn (putprop '#:color:name '#:color:name 'setf-inverse) '#:color:name)))
(if (featurep 'compiler) (progn (defmacro-open #:color:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:color:red "GZvirbitmap" 29)
(if (featurep 'setf) (progn (progn (putprop '#:color:red '#:color:red 'setf-inverse) '#:color:red)))
(if (featurep 'compiler) (progn (defmacro-open #:color:red (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:color:green "GZvirbitmap" 30)
(if (featurep 'setf) (progn (progn (putprop '#:color:green '#:color:green 'setf-inverse) '#:color:green)))
(if (featurep 'compiler) (progn (defmacro-open #:color:green (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:color:blue "GZvirbitmap" 31)
(if (featurep 'setf) (progn (progn (putprop '#:color:blue '#:color:blue 'setf-inverse) '#:color:blue)))
(if (featurep 'compiler) (progn (defmacro-open #:color:blue (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:color:mutable "GZvirbitmap" 32)
(if (featurep 'setf) (progn (progn (putprop '#:color:mutable '#:color:mutable 'setf-inverse) '#:color:mutable)))
(if (featurep 'compiler) (progn (defmacro-open #:color:mutable (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:color:display "GZvirbitmap" 33)
(if (featurep 'setf) (progn (progn (putprop '#:color:display '#:color:display 'setf-inverse) '#:color:display)))
(if (featurep 'compiler) (progn (defmacro-open #:color:display (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:color:extend "GZvirbitmap" 34)
(if (featurep 'setf) (progn (progn (putprop '#:color:extend '#:color:extend 'setf-inverse) '#:color:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:color:extend (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop 'graph-env '((0 0 1 3 () () 0 0 0 0 () () () () () () 'pattern) font line-style pattern mode foreground background clip-x clip-y clip-w clip-h bitmap display extend font-y font-h stipple fill-mode) 'defstruct)
(defcsetfn '#:graph-env:font "GZvirbitmap" 35)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font '#:graph-env:font 'setf-inverse) '#:graph-env:font)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:graph-env:line-style "GZvirbitmap" 36)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:line-style '#:graph-env:line-style 'setf-inverse) '#:graph-env:line-style)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:line-style (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:graph-env:pattern "GZvirbitmap" 37)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:pattern '#:graph-env:pattern 'setf-inverse) '#:graph-env:pattern)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:pattern (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:graph-env:mode "GZvirbitmap" 38)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:mode '#:graph-env:mode 'setf-inverse) '#:graph-env:mode)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:mode (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:graph-env:foreground "GZvirbitmap" 39)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:foreground '#:graph-env:foreground 'setf-inverse) '#:graph-env:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:foreground (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:graph-env:background "GZvirbitmap" 40)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:background '#:graph-env:background 'setf-inverse) '#:graph-env:background)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:background (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:graph-env:clip-x "GZvirbitmap" 41)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-x '#:graph-env:clip-x 'setf-inverse) '#:graph-env:clip-x)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-x (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(defcsetfn '#:graph-env:clip-y "GZvirbitmap" 42)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-y '#:graph-env:clip-y 'setf-inverse) '#:graph-env:clip-y)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-y (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(defcsetfn '#:graph-env:clip-w "GZvirbitmap" 43)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-w '#:graph-env:clip-w 'setf-inverse) '#:graph-env:clip-w)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-w (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(defcsetfn '#:graph-env:clip-h "GZvirbitmap" 44)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-h '#:graph-env:clip-h 'setf-inverse) '#:graph-env:clip-h)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-h (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(defcsetfn '#:graph-env:bitmap "GZvirbitmap" 45)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:bitmap '#:graph-env:bitmap 'setf-inverse) '#:graph-env:bitmap)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:bitmap (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(defcsetfn '#:graph-env:display "GZvirbitmap" 46)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:display '#:graph-env:display 'setf-inverse) '#:graph-env:display)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:display (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(defcsetfn '#:graph-env:extend "GZvirbitmap" 47)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:extend '#:graph-env:extend 'setf-inverse) '#:graph-env:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:extend (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font-y '#:graph-env:font-y 'setf-inverse) '#:graph-env:font-y)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font-y (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font-h '#:graph-env:font-h 'setf-inverse) '#:graph-env:font-h)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font-h (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(defcsetfn '#:graph-env:stipple "GZvirbitmap" 48)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:stipple '#:graph-env:stipple 'setf-inverse) '#:graph-env:stipple)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:stipple (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(defcsetfn '#:graph-env:fill-mode "GZvirbitmap" 49)
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:fill-mode '#:graph-env:fill-mode 'setf-inverse) '#:graph-env:fill-mode)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:fill-mode (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(putprop 'event '((() () () () () () () () () ()) code window detail gx gy x y w h b) 'defstruct)
(defcsetfn '#:event:make "GZvirbitmap" 50)
(defcsetfn '#:event:code "GZvirbitmap" 51)
(if (featurep 'setf) (progn (defsetf #:event:code #:event:code)))
(if (featurep 'compiler) (progn (defmacro-open #:event:code (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:event:window "GZvirbitmap" 52)
(if (featurep 'setf) (progn (defsetf #:event:window #:event:window)))
(if (featurep 'compiler) (progn (defmacro-open #:event:window (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:event:detail "GZvirbitmap" 53)
(if (featurep 'setf) (progn (defsetf #:event:detail #:event:detail)))
(if (featurep 'compiler) (progn (defmacro-open #:event:detail (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:event:gx "GZvirbitmap" 54)
(if (featurep 'setf) (progn (defsetf #:event:gx #:event:gx)))
(if (featurep 'compiler) (progn (defmacro-open #:event:gx (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:event:gy "GZvirbitmap" 55)
(if (featurep 'setf) (progn (defsetf #:event:gy #:event:gy)))
(if (featurep 'compiler) (progn (defmacro-open #:event:gy (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:event:x "GZvirbitmap" 56)
(if (featurep 'setf) (progn (defsetf #:event:x #:event:x)))
(if (featurep 'compiler) (progn (defmacro-open #:event:x (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:event:y "GZvirbitmap" 57)
(if (featurep 'setf) (progn (defsetf #:event:y #:event:y)))
(if (featurep 'compiler) (progn (defmacro-open #:event:y (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(defcsetfn '#:event:w "GZvirbitmap" 58)
(if (featurep 'setf) (progn (defsetf #:event:w #:event:w)))
(if (featurep 'compiler) (progn (defmacro-open #:event:w (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(defcsetfn '#:event:h "GZvirbitmap" 59)
(if (featurep 'setf) (progn (defsetf #:event:h #:event:h)))
(if (featurep 'compiler) (progn (defmacro-open #:event:h (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(defcsetfn '#:event:b "GZvirbitmap" 60)
(if (featurep 'setf) (progn (defsetf #:event:b #:event:b)))
(if (featurep 'compiler) (progn (defmacro-open #:event:b (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(putprop 'bitmap '((() () () ()) w h extend display) 'defstruct)
(defcsetfn '#:bitmap:w "GZvirbitmap" 61)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:w '#:bitmap:w 'setf-inverse) '#:bitmap:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:bitmap:h "GZvirbitmap" 62)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:h '#:bitmap:h 'setf-inverse) '#:bitmap:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:bitmap:extend "GZvirbitmap" 63)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:extend '#:bitmap:extend 'setf-inverse) '#:bitmap:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:bitmap:display "GZvirbitmap" 64)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:display '#:bitmap:display 'setf-inverse) '#:bitmap:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:bitmap:bytemap '(()) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:w '#:bitmap:bytemap:w 'setf-inverse) '#:bitmap:bytemap:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:h '#:bitmap:bytemap:h 'setf-inverse) '#:bitmap:bytemap:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:extend '#:bitmap:bytemap:extend 'setf-inverse) '#:bitmap:bytemap:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:display '#:bitmap:bytemap:display 'setf-inverse) '#:bitmap:bytemap:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:bitmap:stipple '((()) data) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:w '#:bitmap:stipple:w 'setf-inverse) '#:bitmap:stipple:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:h '#:bitmap:stipple:h 'setf-inverse) '#:bitmap:stipple:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:extend '#:bitmap:stipple:extend 'setf-inverse) '#:bitmap:stipple:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:display '#:bitmap:stipple:display 'setf-inverse) '#:bitmap:stipple:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:bitmap:stipple:data "GZvirbitmap" 65)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:data '#:bitmap:stipple:data 'setf-inverse) '#:bitmap:stipple:data)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:data (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(putprop '#:image:rectangle '((0 0 1 1) x y w h) 'defstruct)
(defcsetfn '#:image:rectangle:make "GZvirbitmap" 66)
(defcsetfn '#:image:rectangle:x "GZvirbitmap" 67)
(if (featurep 'setf) (progn (defsetf #:image:rectangle:x #:image:rectangle:x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:x (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:image:rectangle:y "GZvirbitmap" 68)
(if (featurep 'setf) (progn (defsetf #:image:rectangle:y #:image:rectangle:y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:y (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:image:rectangle:w "GZvirbitmap" 69)
(if (featurep 'setf) (progn (defsetf #:image:rectangle:w #:image:rectangle:w)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:w (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:image:rectangle:h "GZvirbitmap" 70)
(if (featurep 'setf) (progn (defsetf #:image:rectangle:h #:image:rectangle:h)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:h (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:image:rectangle:window '((() () () () () () () 0 () () () () () ()) title hilited visible graph-env extend father properties cursor display subwindows events-list window-type graphic-properties state) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:x '#:image:rectangle:window:x 'setf-inverse) '#:image:rectangle:window:x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:x (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:y '#:image:rectangle:window:y 'setf-inverse) '#:image:rectangle:window:y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:y (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:w '#:image:rectangle:window:w 'setf-inverse) '#:image:rectangle:window:w)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:w (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:h '#:image:rectangle:window:h 'setf-inverse) '#:image:rectangle:window:h)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:h (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:image:rectangle:window:title "GZvirbitmap" 71)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:title '#:image:rectangle:window:title 'setf-inverse) '#:image:rectangle:window:title)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:title (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:image:rectangle:window:hilited "GZvirbitmap" 72)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:hilited '#:image:rectangle:window:hilited 'setf-inverse) '#:image:rectangle:window:hilited)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:hilited (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:image:rectangle:window:visible "GZvirbitmap" 73)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:visible '#:image:rectangle:window:visible 'setf-inverse) '#:image:rectangle:window:visible)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:visible (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(defcsetfn '#:image:rectangle:window:graph-env "GZvirbitmap" 74)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:graph-env '#:image:rectangle:window:graph-env 'setf-inverse) '#:image:rectangle:window:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:graph-env (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(defcsetfn '#:image:rectangle:window:extend "GZvirbitmap" 75)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:extend '#:image:rectangle:window:extend 'setf-inverse) '#:image:rectangle:window:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:extend (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(defcsetfn '#:image:rectangle:window:father "GZvirbitmap" 76)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:father '#:image:rectangle:window:father 'setf-inverse) '#:image:rectangle:window:father)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:father (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(defcsetfn '#:image:rectangle:window:properties "GZvirbitmap" 77)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:properties '#:image:rectangle:window:properties 'setf-inverse) '#:image:rectangle:window:properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:properties (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(defcsetfn '#:image:rectangle:window:cursor "GZvirbitmap" 78)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:cursor '#:image:rectangle:window:cursor 'setf-inverse) '#:image:rectangle:window:cursor)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:cursor (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(defcsetfn '#:image:rectangle:window:display "GZvirbitmap" 79)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:display '#:image:rectangle:window:display 'setf-inverse) '#:image:rectangle:window:display)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:display (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(defcsetfn '#:image:rectangle:window:subwindows "GZvirbitmap" 80)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:subwindows '#:image:rectangle:window:subwindows 'setf-inverse) '#:image:rectangle:window:subwindows)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:subwindows (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(defcsetfn '#:image:rectangle:window:events-list "GZvirbitmap" 81)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:events-list '#:image:rectangle:window:events-list 'setf-inverse) '#:image:rectangle:window:events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:events-list (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(defcsetfn '#:image:rectangle:window:window-type "GZvirbitmap" 82)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:window-type '#:image:rectangle:window:window-type 'setf-inverse) '#:image:rectangle:window:window-type)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:window-type (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(defcsetfn '#:image:rectangle:window:graphic-properties "GZvirbitmap" 83)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:graphic-properties '#:image:rectangle:window:graphic-properties 'setf-inverse) '#:image:rectangle:window:graphic-properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:graphic-properties (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(defcsetfn '#:image:rectangle:window:state "GZvirbitmap" 84)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:state '#:image:rectangle:window:state 'setf-inverse) '#:image:rectangle:window:state)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:state (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(putprop 'menu '((() () () ()) title itemlists display extend) 'defstruct)
(defcsetfn '#:menu:title "GZvirbitmap" 85)
(if (featurep 'setf) (progn (progn (putprop '#:menu:title '#:menu:title 'setf-inverse) '#:menu:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:menu:itemlists "GZvirbitmap" 86)
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlists '#:menu:itemlists 'setf-inverse) '#:menu:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:menu:display "GZvirbitmap" 87)
(if (featurep 'setf) (progn (progn (putprop '#:menu:display '#:menu:display 'setf-inverse) '#:menu:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:menu:extend "GZvirbitmap" 88)
(if (featurep 'setf) (progn (progn (putprop '#:menu:extend '#:menu:extend 'setf-inverse) '#:menu:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:menu:itemlist '((() () ()) name active items) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:title '#:menu:itemlist:title 'setf-inverse) '#:menu:itemlist:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:itemlists '#:menu:itemlist:itemlists 'setf-inverse) '#:menu:itemlist:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:display '#:menu:itemlist:display 'setf-inverse) '#:menu:itemlist:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:extend '#:menu:itemlist:extend 'setf-inverse) '#:menu:itemlist:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:menu:itemlist:name "GZvirbitmap" 89)
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:name '#:menu:itemlist:name 'setf-inverse) '#:menu:itemlist:name)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:menu:itemlist:active "GZvirbitmap" 90)
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:active '#:menu:itemlist:active 'setf-inverse) '#:menu:itemlist:active)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:active (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:menu:itemlist:items "GZvirbitmap" 91)
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:items '#:menu:itemlist:items 'setf-inverse) '#:menu:itemlist:items)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:items (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop '#:menu:item '((() () ()) name active value) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:title '#:menu:item:title 'setf-inverse) '#:menu:item:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:itemlists '#:menu:item:itemlists 'setf-inverse) '#:menu:item:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:display '#:menu:item:display 'setf-inverse) '#:menu:item:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:extend '#:menu:item:extend 'setf-inverse) '#:menu:item:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:menu:item:name "GZvirbitmap" 92)
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:name '#:menu:item:name 'setf-inverse) '#:menu:item:name)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:menu:item:active "GZvirbitmap" 93)
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:active '#:menu:item:active 'setf-inverse) '#:menu:item:active)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:active (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:menu:item:value "GZvirbitmap" 94)
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:value '#:menu:item:value 'setf-inverse) '#:menu:item:value)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:value (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop 'font-info '((() () () () () () () () () () () () () ()) ascent descent angle weight minrbearing minlbearing minascent mindescent minwidth maxrbearing maxlbearing maxascent maxdescent maxwidth) 'defstruct)
(defcsetfn '#:font-info:make "GZvirbitmap" 95)
(defcsetfn '#:font-info:ascent "GZvirbitmap" 96)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:ascent '#:font-info:ascent 'setf-inverse) '#:font-info:ascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:ascent (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:font-info:descent "GZvirbitmap" 97)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:descent '#:font-info:descent 'setf-inverse) '#:font-info:descent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:descent (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:font-info:angle "GZvirbitmap" 98)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:angle '#:font-info:angle 'setf-inverse) '#:font-info:angle)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:angle (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:font-info:weight "GZvirbitmap" 99)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:weight '#:font-info:weight 'setf-inverse) '#:font-info:weight)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:weight (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:font-info:minrbearing "GZvirbitmap" 100)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minrbearing '#:font-info:minrbearing 'setf-inverse) '#:font-info:minrbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minrbearing (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:font-info:minlbearing "GZvirbitmap" 101)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minlbearing '#:font-info:minlbearing 'setf-inverse) '#:font-info:minlbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minlbearing (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:font-info:minascent "GZvirbitmap" 102)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minascent '#:font-info:minascent 'setf-inverse) '#:font-info:minascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minascent (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(defcsetfn '#:font-info:mindescent "GZvirbitmap" 103)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:mindescent '#:font-info:mindescent 'setf-inverse) '#:font-info:mindescent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:mindescent (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(defcsetfn '#:font-info:minwidth "GZvirbitmap" 104)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minwidth '#:font-info:minwidth 'setf-inverse) '#:font-info:minwidth)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minwidth (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(defcsetfn '#:font-info:maxrbearing "GZvirbitmap" 105)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxrbearing '#:font-info:maxrbearing 'setf-inverse) '#:font-info:maxrbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxrbearing (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(defcsetfn '#:font-info:maxlbearing "GZvirbitmap" 106)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxlbearing '#:font-info:maxlbearing 'setf-inverse) '#:font-info:maxlbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxlbearing (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(defcsetfn '#:font-info:maxascent "GZvirbitmap" 107)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxascent '#:font-info:maxascent 'setf-inverse) '#:font-info:maxascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxascent (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(defcsetfn '#:font-info:maxdescent "GZvirbitmap" 108)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxdescent '#:font-info:maxdescent 'setf-inverse) '#:font-info:maxdescent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxdescent (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(defcsetfn '#:font-info:maxwidth "GZvirbitmap" 109)
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxwidth '#:font-info:maxwidth 'setf-inverse) '#:font-info:maxwidth)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxwidth (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(defcsetfn '#:window:make "GZvirbitmap" 110)
(defcsetfn '#:window:background "GZvirbitmap" 111)
(defcsetfn '#:window:left "GZvirbitmap" 112)
(defcsetfn '#:window:top "GZvirbitmap" 113)
(defcsetfn '#:window:width "GZvirbitmap" 114)
(defcsetfn '#:window:height "GZvirbitmap" 115)
(defcsetfn '#:window:title "GZvirbitmap" 116)
(defcsetfn '#:window:hilited "GZvirbitmap" 117)
(defcsetfn '#:window:visible "GZvirbitmap" 118)
(defcsetfn '#:window:graph-env "GZvirbitmap" 119)
(defcsetfn '#:window:extend "GZvirbitmap" 120)
(defcsetfn '#:window:father "GZvirbitmap" 121)
(defcsetfn '#:window:properties "GZvirbitmap" 122)
(defcsetfn '#:window:cursor "GZvirbitmap" 123)
(defcsetfn '#:window:display "GZvirbitmap" 124)
(defcsetfn '#:window:subwindows "GZvirbitmap" 125)
(defcsetfn '#:window:events-list "GZvirbitmap" 126)
(defcsetfn '#:window:window-type "GZvirbitmap" 127)
(defcsetfn '#:window:graphic-properties "GZvirbitmap" 128)
(defcsetfn '#:window:state "GZvirbitmap" 129)
(add-feature 'virbitmap)

(defccheck '(#:llcp:errwna #:system:structaccess vector))
