;;; GELL 15.26: elaboration file for the module: x11struct
;;;             translation done: "Tue Aug  24 93 10:48:35 "

(with ((outchan ()))
	(print ";Loading elaboration file: x11struct.le"))
(unless (boundp '#:module:compiled-list)
	(setq #:module:compiled-list ()))
(newl #:module:compiled-list 'x11struct)
(setq #:system:read-case-flag t)

(defcelaborate "GZx11struct" "Tue Aug  24 93 10:48:35 "

'((#:display:x11:make . subr0) (#:display:x11:name . nsubr) (#:display:x11:package . nsubr) (#:display:x11:device . nsubr) (#:display:x11:xmax . nsubr) (#:display:x11:ymax . nsubr) (#:display:x11:eventmode . nsubr) (#:display:x11:prologuep . nsubr) (#:display:x11:keyboard-focus-window . nsubr) (#:display:x11:window . nsubr) (#:display:x11:graph-env . nsubr) (#:display:x11:root-window . nsubr) (#:display:x11:main-graph-env . nsubr) (#:display:x11:background . nsubr) (#:display:x11:foreground . nsubr) (#:display:x11:windows . nsubr) (#:display:x11:bitmaps . nsubr) (#:display:x11:menus . nsubr) (#:display:x11:colors . nsubr) (#:display:x11:font-names . nsubr) (#:display:x11:pattern-bitmaps . nsubr) (#:display:x11:cursor-bitmaps . nsubr) (#:display:x11:extend . nsubr) (#:display:x11:graph-envs . nsubr) (#:display:x11:current-selection . nsubr) (#:display:x11:resource . nsubr) (#:display:x11:named-cursors . nsubr) (#:display:x11:stipple-bitmaps . nsubr) (#:display:x11:file-descriptor . nsubr) (#:display:x11:events-in-socket . nsubr) (#:display:x11:reread . nsubr) (#:display:x11:drawing-flag . nsubr) (#:display:x11:events-list . nsubr) (#:display:x11:function-keys . nsubr) (#:display:x11:line-style-vector . nsubr) (#:display:x11:pattern-vector . nsubr) (#:display:x11:cursor-vector . nsubr) (#:display:x11:font-vector . nsubr) (#:display:x11:mode-vector . nsubr) (#:display:x11:version . nsubr) (#:display:x11:top-events-list . nsubr) (#:display:x11:opaque-events-list . nsubr) (#:display:x11:transparent-events-list . nsubr) (#:display:x11:top-events-mask . nsubr) (#:display:x11:opaque-events-mask . nsubr) (#:display:x11:transparent-events-mask . nsubr) (#:display:x11:reverse-bit-flag . nsubr) (#:display:x11:default-window-type . nsubr) (#:display:x11:args-vector . nsubr) (#:display:x11:depth . nsubr) (#:display:x11:display-class . nsubr) (#:display:x11:top-window-border . nsubr) (#:display:x11:subwindow-border . nsubr) (#:display:x11:graph-env-mode . nsubr) (#:display:x11:drag-event-p . nsubr) (#:display:x11:move-event-p . nsubr) (#:display:x11:functionkey-event-p . nsubr) (#:display:x11:ascii-event-p . nsubr) (#:display:x11:unmap-window-p . nsubr) (#:display:x11:map-window-p . nsubr) (#:display:x11:client-message-p . nsubr) (#:display:x11:visibility-change-p . nsubr) (#:display:x11:reparent-notify-p . nsubr) (#:display:x11:event-responses . nsubr) (#:display:x11:synchrone . nsubr) (#:display:x11:cursors-alist . nsubr) (#:x11:bitmap:make . subr0) (#:x11:menu:make . subr0) (#:image:rectangle:window:menu-window:make . subr0) (#:tclass:x11window:make . subr0) (#:tclass:x11window:opaque-window:make . subr0) (#:tclass:x11window:opaque-window:top-window:make . subr0) (#:tclass:x11window:transparent-window:make . subr0) (#:display:x11:top-opaque-window . dmsubr))

#["Lelisp" vector #:display:x11 #:display:x11:name #:system:structaccess #:display:x11:package #:display:x11:device #:display:x11:xmax #:display:x11:ymax #:display:x11:eventmode #:display:x11:prologuep #:display:x11:keyboard-focus-window #:display:x11:window #:display:x11:graph-env #:display:x11:root-window #:display:x11:main-graph-env #:display:x11:background #:display:x11:foreground #:display:x11:windows #:display:x11:bitmaps #:display:x11:menus #:display:x11:colors #:display:x11:font-names #:display:x11:pattern-bitmaps #:display:x11:cursor-bitmaps #:display:x11:extend #:display:x11:graph-envs #:display:x11:current-selection #:display:x11:resource #:display:x11:named-cursors #:display:x11:stipple-bitmaps #:display:x11:file-descriptor #:display:x11:events-in-socket #:display:x11:reread #:display:x11:drawing-flag #:display:x11:events-list #:display:x11:function-keys #:display:x11:line-style-vector #:display:x11:pattern-vector #:display:x11:cursor-vector #:display:x11:font-vector #:display:x11:mode-vector #:display:x11:version #:display:x11:top-events-list #:display:x11:opaque-events-list #:display:x11:transparent-events-list #:display:x11:top-events-mask #:display:x11:opaque-events-mask #:display:x11:transparent-events-mask #:display:x11:reverse-bit-flag #:display:x11:default-window-type #:display:x11:args-vector #:display:x11:depth #:display:x11:display-class #:display:x11:top-window-border #:display:x11:subwindow-border #:display:x11:graph-env-mode #:display:x11:drag-event-p #:display:x11:move-event-p #:display:x11:functionkey-event-p #:display:x11:ascii-event-p #:display:x11:unmap-window-p #:display:x11:map-window-p #:display:x11:client-message-p #:display:x11:visibility-change-p #:display:x11:reparent-notify-p #:display:x11:event-responses #:display:x11:synchrone #:display:x11:cursors-alist #:x11:bitmap #:x11:menu #:image:rectangle:window:menu-window #:tclass:x11window #:tclass:x11window:opaque-window #:tclass:x11window:opaque-window:top-window #:tclass:x11window:transparent-window #:tclass:x11window:transparent-window:top-opaque-father #:window:extend list #:display:x11:make #:gell-resetfn:function-name #:gell-resetfn:function-0 #:gell-resetfn:function-n #:x11:bitmap:make #:x11:menu:make #:image:rectangle:window:menu-window:make #:tclass:x11window:make #:tclass:x11window:opaque-window:make #:tclass:x11window:opaque-window:top-window:make #:tclass:x11window:transparent-window:make #:display:x11:top-opaque-window #:gell-resetfn:function-1]
)

(setq #:sys-package:colon '#:display:x11)
(putprop '#:display:x11 '((0 () () () () () () () () () () () () () () () () () () () () () "Lelisp" 2 1 0 () () () () () () () () () () () ()) file-descriptor events-in-socket reread drawing-flag events-list function-keys line-style-vector pattern-vector cursor-vector font-vector mode-vector version top-events-list opaque-events-list transparent-events-list top-events-mask opaque-events-mask transparent-events-mask reverse-bit-flag default-window-type args-vector depth display-class top-window-border subwindow-border graph-env-mode drag-event-p move-event-p functionkey-event-p ascii-event-p unmap-window-p map-window-p client-message-p visibility-change-p reparent-notify-p event-responses synchrone cursors-alist) 'defstruct)
(defcsetfn '#:display:x11:make "GZx11struct" 0)
(defcsetfn '#:display:x11:name "GZx11struct" 1)
(if (featurep 'setf) (progn (defsetf #:display:x11:name #:display:x11:name)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(defcsetfn '#:display:x11:package "GZx11struct" 2)
(if (featurep 'setf) (progn (defsetf #:display:x11:package #:display:x11:package)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:package (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(defcsetfn '#:display:x11:device "GZx11struct" 3)
(if (featurep 'setf) (progn (defsetf #:display:x11:device #:display:x11:device)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:device (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defcsetfn '#:display:x11:xmax "GZx11struct" 4)
(if (featurep 'setf) (progn (defsetf #:display:x11:xmax #:display:x11:xmax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:xmax (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(defcsetfn '#:display:x11:ymax "GZx11struct" 5)
(if (featurep 'setf) (progn (defsetf #:display:x11:ymax #:display:x11:ymax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:ymax (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(defcsetfn '#:display:x11:eventmode "GZx11struct" 6)
(if (featurep 'setf) (progn (defsetf #:display:x11:eventmode #:display:x11:eventmode)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:eventmode (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(defcsetfn '#:display:x11:prologuep "GZx11struct" 7)
(if (featurep 'setf) (progn (defsetf #:display:x11:prologuep #:display:x11:prologuep)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:prologuep (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(defcsetfn '#:display:x11:keyboard-focus-window "GZx11struct" 8)
(if (featurep 'setf) (progn (defsetf #:display:x11:keyboard-focus-window #:display:x11:keyboard-focus-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:keyboard-focus-window (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(defcsetfn '#:display:x11:window "GZx11struct" 9)
(if (featurep 'setf) (progn (defsetf #:display:x11:window #:display:x11:window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:window (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(defcsetfn '#:display:x11:graph-env "GZx11struct" 10)
(if (featurep 'setf) (progn (defsetf #:display:x11:graph-env #:display:x11:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:graph-env (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(defcsetfn '#:display:x11:root-window "GZx11struct" 11)
(if (featurep 'setf) (progn (defsetf #:display:x11:root-window #:display:x11:root-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:root-window (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(defcsetfn '#:display:x11:main-graph-env "GZx11struct" 12)
(if (featurep 'setf) (progn (defsetf #:display:x11:main-graph-env #:display:x11:main-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:main-graph-env (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(defcsetfn '#:display:x11:background "GZx11struct" 13)
(if (featurep 'setf) (progn (defsetf #:display:x11:background #:display:x11:background)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:background (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(defcsetfn '#:display:x11:foreground "GZx11struct" 14)
(if (featurep 'setf) (progn (defsetf #:display:x11:foreground #:display:x11:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:foreground (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(defcsetfn '#:display:x11:windows "GZx11struct" 15)
(if (featurep 'setf) (progn (defsetf #:display:x11:windows #:display:x11:windows)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:windows (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(defcsetfn '#:display:x11:bitmaps "GZx11struct" 16)
(if (featurep 'setf) (progn (defsetf #:display:x11:bitmaps #:display:x11:bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:bitmaps (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(defcsetfn '#:display:x11:menus "GZx11struct" 17)
(if (featurep 'setf) (progn (defsetf #:display:x11:menus #:display:x11:menus)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:menus (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(defcsetfn '#:display:x11:colors "GZx11struct" 18)
(if (featurep 'setf) (progn (defsetf #:display:x11:colors #:display:x11:colors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:colors (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(defcsetfn '#:display:x11:font-names "GZx11struct" 19)
(if (featurep 'setf) (progn (defsetf #:display:x11:font-names #:display:x11:font-names)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:font-names (struct . valeur) (ifn valeur (list 'vref struct 18) (list 'vset struct 18 (car valeur))))))
(defcsetfn '#:display:x11:pattern-bitmaps "GZx11struct" 20)
(if (featurep 'setf) (progn (defsetf #:display:x11:pattern-bitmaps #:display:x11:pattern-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:pattern-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 19) (list 'vset struct 19 (car valeur))))))
(defcsetfn '#:display:x11:cursor-bitmaps "GZx11struct" 21)
(if (featurep 'setf) (progn (defsetf #:display:x11:cursor-bitmaps #:display:x11:cursor-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:cursor-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 20) (list 'vset struct 20 (car valeur))))))
(defcsetfn '#:display:x11:extend "GZx11struct" 22)
(if (featurep 'setf) (progn (defsetf #:display:x11:extend #:display:x11:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:extend (struct . valeur) (ifn valeur (list 'vref struct 21) (list 'vset struct 21 (car valeur))))))
(defcsetfn '#:display:x11:graph-envs "GZx11struct" 23)
(if (featurep 'setf) (progn (defsetf #:display:x11:graph-envs #:display:x11:graph-envs)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:graph-envs (struct . valeur) (ifn valeur (list 'vref struct 22) (list 'vset struct 22 (car valeur))))))
(defcsetfn '#:display:x11:current-selection "GZx11struct" 24)
(if (featurep 'setf) (progn (defsetf #:display:x11:current-selection #:display:x11:current-selection)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:current-selection (struct . valeur) (ifn valeur (list 'vref struct 23) (list 'vset struct 23 (car valeur))))))
(defcsetfn '#:display:x11:resource "GZx11struct" 25)
(if (featurep 'setf) (progn (defsetf #:display:x11:resource #:display:x11:resource)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:resource (struct . valeur) (ifn valeur (list 'vref struct 24) (list 'vset struct 24 (car valeur))))))
(defcsetfn '#:display:x11:named-cursors "GZx11struct" 26)
(if (featurep 'setf) (progn (defsetf #:display:x11:named-cursors #:display:x11:named-cursors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:named-cursors (struct . valeur) (ifn valeur (list 'vref struct 25) (list 'vset struct 25 (car valeur))))))
(defcsetfn '#:display:x11:stipple-bitmaps "GZx11struct" 27)
(if (featurep 'setf) (progn (defsetf #:display:x11:stipple-bitmaps #:display:x11:stipple-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:stipple-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 26) (list 'vset struct 26 (car valeur))))))
(defcsetfn '#:display:x11:file-descriptor "GZx11struct" 28)
(if (featurep 'setf) (progn (defsetf #:display:x11:file-descriptor #:display:x11:file-descriptor)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:file-descriptor (struct . valeur) (ifn valeur (list 'vref struct 27) (list 'vset struct 27 (car valeur))))))
(defcsetfn '#:display:x11:events-in-socket "GZx11struct" 29)
(if (featurep 'setf) (progn (defsetf #:display:x11:events-in-socket #:display:x11:events-in-socket)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:events-in-socket (struct . valeur) (ifn valeur (list 'vref struct 28) (list 'vset struct 28 (car valeur))))))
(defcsetfn '#:display:x11:reread "GZx11struct" 30)
(if (featurep 'setf) (progn (defsetf #:display:x11:reread #:display:x11:reread)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:reread (struct . valeur) (ifn valeur (list 'vref struct 29) (list 'vset struct 29 (car valeur))))))
(defcsetfn '#:display:x11:drawing-flag "GZx11struct" 31)
(if (featurep 'setf) (progn (defsetf #:display:x11:drawing-flag #:display:x11:drawing-flag)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:drawing-flag (struct . valeur) (ifn valeur (list 'vref struct 30) (list 'vset struct 30 (car valeur))))))
(defcsetfn '#:display:x11:events-list "GZx11struct" 32)
(if (featurep 'setf) (progn (defsetf #:display:x11:events-list #:display:x11:events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:events-list (struct . valeur) (ifn valeur (list 'vref struct 31) (list 'vset struct 31 (car valeur))))))
(defcsetfn '#:display:x11:function-keys "GZx11struct" 33)
(if (featurep 'setf) (progn (defsetf #:display:x11:function-keys #:display:x11:function-keys)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:function-keys (struct . valeur) (ifn valeur (list 'vref struct 32) (list 'vset struct 32 (car valeur))))))
(defcsetfn '#:display:x11:line-style-vector "GZx11struct" 34)
(if (featurep 'setf) (progn (defsetf #:display:x11:line-style-vector #:display:x11:line-style-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:line-style-vector (struct . valeur) (ifn valeur (list 'vref struct 33) (list 'vset struct 33 (car valeur))))))
(defcsetfn '#:display:x11:pattern-vector "GZx11struct" 35)
(if (featurep 'setf) (progn (defsetf #:display:x11:pattern-vector #:display:x11:pattern-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:pattern-vector (struct . valeur) (ifn valeur (list 'vref struct 34) (list 'vset struct 34 (car valeur))))))
(defcsetfn '#:display:x11:cursor-vector "GZx11struct" 36)
(if (featurep 'setf) (progn (defsetf #:display:x11:cursor-vector #:display:x11:cursor-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:cursor-vector (struct . valeur) (ifn valeur (list 'vref struct 35) (list 'vset struct 35 (car valeur))))))
(defcsetfn '#:display:x11:font-vector "GZx11struct" 37)
(if (featurep 'setf) (progn (defsetf #:display:x11:font-vector #:display:x11:font-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:font-vector (struct . valeur) (ifn valeur (list 'vref struct 36) (list 'vset struct 36 (car valeur))))))
(defcsetfn '#:display:x11:mode-vector "GZx11struct" 38)
(if (featurep 'setf) (progn (defsetf #:display:x11:mode-vector #:display:x11:mode-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:mode-vector (struct . valeur) (ifn valeur (list 'vref struct 37) (list 'vset struct 37 (car valeur))))))
(defcsetfn '#:display:x11:version "GZx11struct" 39)
(if (featurep 'setf) (progn (defsetf #:display:x11:version #:display:x11:version)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:version (struct . valeur) (ifn valeur (list 'vref struct 38) (list 'vset struct 38 (car valeur))))))
(defcsetfn '#:display:x11:top-events-list "GZx11struct" 40)
(if (featurep 'setf) (progn (defsetf #:display:x11:top-events-list #:display:x11:top-events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:top-events-list (struct . valeur) (ifn valeur (list 'vref struct 39) (list 'vset struct 39 (car valeur))))))
(defcsetfn '#:display:x11:opaque-events-list "GZx11struct" 41)
(if (featurep 'setf) (progn (defsetf #:display:x11:opaque-events-list #:display:x11:opaque-events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:opaque-events-list (struct . valeur) (ifn valeur (list 'vref struct 40) (list 'vset struct 40 (car valeur))))))
(defcsetfn '#:display:x11:transparent-events-list "GZx11struct" 42)
(if (featurep 'setf) (progn (defsetf #:display:x11:transparent-events-list #:display:x11:transparent-events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:transparent-events-list (struct . valeur) (ifn valeur (list 'vref struct 41) (list 'vset struct 41 (car valeur))))))
(defcsetfn '#:display:x11:top-events-mask "GZx11struct" 43)
(if (featurep 'setf) (progn (defsetf #:display:x11:top-events-mask #:display:x11:top-events-mask)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:top-events-mask (struct . valeur) (ifn valeur (list 'vref struct 42) (list 'vset struct 42 (car valeur))))))
(defcsetfn '#:display:x11:opaque-events-mask "GZx11struct" 44)
(if (featurep 'setf) (progn (defsetf #:display:x11:opaque-events-mask #:display:x11:opaque-events-mask)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:opaque-events-mask (struct . valeur) (ifn valeur (list 'vref struct 43) (list 'vset struct 43 (car valeur))))))
(defcsetfn '#:display:x11:transparent-events-mask "GZx11struct" 45)
(if (featurep 'setf) (progn (defsetf #:display:x11:transparent-events-mask #:display:x11:transparent-events-mask)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:transparent-events-mask (struct . valeur) (ifn valeur (list 'vref struct 44) (list 'vset struct 44 (car valeur))))))
(defcsetfn '#:display:x11:reverse-bit-flag "GZx11struct" 46)
(if (featurep 'setf) (progn (defsetf #:display:x11:reverse-bit-flag #:display:x11:reverse-bit-flag)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:reverse-bit-flag (struct . valeur) (ifn valeur (list 'vref struct 45) (list 'vset struct 45 (car valeur))))))
(defcsetfn '#:display:x11:default-window-type "GZx11struct" 47)
(if (featurep 'setf) (progn (defsetf #:display:x11:default-window-type #:display:x11:default-window-type)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:default-window-type (struct . valeur) (ifn valeur (list 'vref struct 46) (list 'vset struct 46 (car valeur))))))
(defcsetfn '#:display:x11:args-vector "GZx11struct" 48)
(if (featurep 'setf) (progn (defsetf #:display:x11:args-vector #:display:x11:args-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:args-vector (struct . valeur) (ifn valeur (list 'vref struct 47) (list 'vset struct 47 (car valeur))))))
(defcsetfn '#:display:x11:depth "GZx11struct" 49)
(if (featurep 'setf) (progn (defsetf #:display:x11:depth #:display:x11:depth)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:depth (struct . valeur) (ifn valeur (list 'vref struct 48) (list 'vset struct 48 (car valeur))))))
(defcsetfn '#:display:x11:display-class "GZx11struct" 50)
(if (featurep 'setf) (progn (defsetf #:display:x11:display-class #:display:x11:display-class)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:display-class (struct . valeur) (ifn valeur (list 'vref struct 49) (list 'vset struct 49 (car valeur))))))
(defcsetfn '#:display:x11:top-window-border "GZx11struct" 51)
(if (featurep 'setf) (progn (defsetf #:display:x11:top-window-border #:display:x11:top-window-border)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:top-window-border (struct . valeur) (ifn valeur (list 'vref struct 50) (list 'vset struct 50 (car valeur))))))
(defcsetfn '#:display:x11:subwindow-border "GZx11struct" 52)
(if (featurep 'setf) (progn (defsetf #:display:x11:subwindow-border #:display:x11:subwindow-border)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:subwindow-border (struct . valeur) (ifn valeur (list 'vref struct 51) (list 'vset struct 51 (car valeur))))))
(defcsetfn '#:display:x11:graph-env-mode "GZx11struct" 53)
(if (featurep 'setf) (progn (defsetf #:display:x11:graph-env-mode #:display:x11:graph-env-mode)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:graph-env-mode (struct . valeur) (ifn valeur (list 'vref struct 52) (list 'vset struct 52 (car valeur))))))
(defcsetfn '#:display:x11:drag-event-p "GZx11struct" 54)
(if (featurep 'setf) (progn (defsetf #:display:x11:drag-event-p #:display:x11:drag-event-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:drag-event-p (struct . valeur) (ifn valeur (list 'vref struct 53) (list 'vset struct 53 (car valeur))))))
(defcsetfn '#:display:x11:move-event-p "GZx11struct" 55)
(if (featurep 'setf) (progn (defsetf #:display:x11:move-event-p #:display:x11:move-event-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:move-event-p (struct . valeur) (ifn valeur (list 'vref struct 54) (list 'vset struct 54 (car valeur))))))
(defcsetfn '#:display:x11:functionkey-event-p "GZx11struct" 56)
(if (featurep 'setf) (progn (defsetf #:display:x11:functionkey-event-p #:display:x11:functionkey-event-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:functionkey-event-p (struct . valeur) (ifn valeur (list 'vref struct 55) (list 'vset struct 55 (car valeur))))))
(defcsetfn '#:display:x11:ascii-event-p "GZx11struct" 57)
(if (featurep 'setf) (progn (defsetf #:display:x11:ascii-event-p #:display:x11:ascii-event-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:ascii-event-p (struct . valeur) (ifn valeur (list 'vref struct 56) (list 'vset struct 56 (car valeur))))))
(defcsetfn '#:display:x11:unmap-window-p "GZx11struct" 58)
(if (featurep 'setf) (progn (defsetf #:display:x11:unmap-window-p #:display:x11:unmap-window-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:unmap-window-p (struct . valeur) (ifn valeur (list 'vref struct 57) (list 'vset struct 57 (car valeur))))))
(defcsetfn '#:display:x11:map-window-p "GZx11struct" 59)
(if (featurep 'setf) (progn (defsetf #:display:x11:map-window-p #:display:x11:map-window-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:map-window-p (struct . valeur) (ifn valeur (list 'vref struct 58) (list 'vset struct 58 (car valeur))))))
(defcsetfn '#:display:x11:client-message-p "GZx11struct" 60)
(if (featurep 'setf) (progn (defsetf #:display:x11:client-message-p #:display:x11:client-message-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:client-message-p (struct . valeur) (ifn valeur (list 'vref struct 59) (list 'vset struct 59 (car valeur))))))
(defcsetfn '#:display:x11:visibility-change-p "GZx11struct" 61)
(if (featurep 'setf) (progn (defsetf #:display:x11:visibility-change-p #:display:x11:visibility-change-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:visibility-change-p (struct . valeur) (ifn valeur (list 'vref struct 60) (list 'vset struct 60 (car valeur))))))
(defcsetfn '#:display:x11:reparent-notify-p "GZx11struct" 62)
(if (featurep 'setf) (progn (defsetf #:display:x11:reparent-notify-p #:display:x11:reparent-notify-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:reparent-notify-p (struct . valeur) (ifn valeur (list 'vref struct 61) (list 'vset struct 61 (car valeur))))))
(defcsetfn '#:display:x11:event-responses "GZx11struct" 63)
(if (featurep 'setf) (progn (defsetf #:display:x11:event-responses #:display:x11:event-responses)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:event-responses (struct . valeur) (ifn valeur (list 'vref struct 62) (list 'vset struct 62 (car valeur))))))
(defcsetfn '#:display:x11:synchrone "GZx11struct" 64)
(if (featurep 'setf) (progn (defsetf #:display:x11:synchrone #:display:x11:synchrone)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:synchrone (struct . valeur) (ifn valeur (list 'vref struct 63) (list 'vset struct 63 (car valeur))))))
(defcsetfn '#:display:x11:cursors-alist "GZx11struct" 65)
(if (featurep 'setf) (progn (defsetf #:display:x11:cursors-alist #:display:x11:cursors-alist)))
(if (featurep 'compiler) (progn (defmacro-open #:display:x11:cursors-alist (struct . valeur) (ifn valeur (list 'vref struct 64) (list 'vset struct 64 (car valeur))))))
(putprop '#:x11:bitmap '((() ()) window xbitmap) 'defstruct)
(defcsetfn '#:x11:bitmap:make "GZx11struct" 66)
(if (featurep 'setf) (progn (defsetf #:x11:bitmap:window #:x11:bitmap:window)))
(if (featurep 'compiler) (progn (defmacro-open #:x11:bitmap:window (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:x11:bitmap:xbitmap #:x11:bitmap:xbitmap)))
(if (featurep 'compiler) (progn (defmacro-open #:x11:bitmap:xbitmap (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(putprop '#:x11:menu '((() () ()) invertedx invertedy window) 'defstruct)
(defcsetfn '#:x11:menu:make "GZx11struct" 67)
(if (featurep 'setf) (progn (defsetf #:x11:menu:invertedx #:x11:menu:invertedx)))
(if (featurep 'compiler) (progn (defmacro-open #:x11:menu:invertedx (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:x11:menu:invertedy #:x11:menu:invertedy)))
(if (featurep 'compiler) (progn (defmacro-open #:x11:menu:invertedy (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:x11:menu:window #:x11:menu:window)))
(if (featurep 'compiler) (progn (defmacro-open #:x11:menu:window (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(putprop '#:image:rectangle:window:menu-window '(()) 'defstruct)
(defcsetfn '#:image:rectangle:window:menu-window:make "GZx11struct" 68)
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:x #:image:rectangle:window:menu-window:x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:x (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:y #:image:rectangle:window:menu-window:y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:y (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:w #:image:rectangle:window:menu-window:w)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:w (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:h #:image:rectangle:window:menu-window:h)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:h (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:title #:image:rectangle:window:menu-window:title)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:title (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:hilited #:image:rectangle:window:menu-window:hilited)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:hilited (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:visible #:image:rectangle:window:menu-window:visible)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:visible (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:graph-env #:image:rectangle:window:menu-window:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:graph-env (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:extend #:image:rectangle:window:menu-window:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:extend (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:father #:image:rectangle:window:menu-window:father)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:father (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:properties #:image:rectangle:window:menu-window:properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:properties (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:cursor #:image:rectangle:window:menu-window:cursor)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:cursor (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:display #:image:rectangle:window:menu-window:display)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:display (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:subwindows #:image:rectangle:window:menu-window:subwindows)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:subwindows (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:events-list #:image:rectangle:window:menu-window:events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:events-list (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:window-type #:image:rectangle:window:menu-window:window-type)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:window-type (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:graphic-properties #:image:rectangle:window:menu-window:graphic-properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:graphic-properties (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:state #:image:rectangle:window:menu-window:state)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:state (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(putprop '#:tclass:x11window '((() () ()) xwindow xgraph-env events-mask) 'defstruct)
(defcsetfn '#:tclass:x11window:make "GZx11struct" 69)
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:xwindow #:tclass:x11window:xwindow)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:xwindow (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:xgraph-env #:tclass:x11window:xgraph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:xgraph-env (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:events-mask #:tclass:x11window:events-mask)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:events-mask (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(put-abbrev 'x11window '#:tclass:x11window)
'#:tclass:x11window
(putprop '#:tclass:x11window:opaque-window '((() () ()) border-pixel window-name window-class) 'defstruct)
(defcsetfn '#:tclass:x11window:opaque-window:make "GZx11struct" 70)
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:xwindow #:tclass:x11window:opaque-window:xwindow)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:xwindow (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:xgraph-env #:tclass:x11window:opaque-window:xgraph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:xgraph-env (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:events-mask #:tclass:x11window:opaque-window:events-mask)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:events-mask (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:border-pixel #:tclass:x11window:opaque-window:border-pixel)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:border-pixel (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:window-name #:tclass:x11window:opaque-window:window-name)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:window-name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:window-class #:tclass:x11window:opaque-window:window-class)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:window-class (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(put-abbrev 'opaque-window '#:tclass:x11window:opaque-window)
'#:tclass:x11window:opaque-window
(putprop '#:tclass:x11window:opaque-window:top-window '((()) icon-title) 'defstruct)
(defcsetfn '#:tclass:x11window:opaque-window:top-window:make "GZx11struct" 71)
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:top-window:xwindow #:tclass:x11window:opaque-window:top-window:xwindow)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:top-window:xwindow (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:top-window:xgraph-env #:tclass:x11window:opaque-window:top-window:xgraph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:top-window:xgraph-env (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:top-window:events-mask #:tclass:x11window:opaque-window:top-window:events-mask)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:top-window:events-mask (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:top-window:border-pixel #:tclass:x11window:opaque-window:top-window:border-pixel)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:top-window:border-pixel (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:top-window:window-name #:tclass:x11window:opaque-window:top-window:window-name)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:top-window:window-name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:top-window:window-class #:tclass:x11window:opaque-window:top-window:window-class)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:top-window:window-class (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:opaque-window:top-window:icon-title #:tclass:x11window:opaque-window:top-window:icon-title)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:opaque-window:top-window:icon-title (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(put-abbrev 'top-window '#:tclass:x11window:opaque-window:top-window)
'#:tclass:x11window:opaque-window:top-window
(putprop '#:tclass:x11window:transparent-window '((() () () () ()) visible view-rect offset-x offset-y top-opaque-father) 'defstruct)
(defcsetfn '#:tclass:x11window:transparent-window:make "GZx11struct" 72)
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:transparent-window:xwindow #:tclass:x11window:transparent-window:xwindow)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:transparent-window:xwindow (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:transparent-window:xgraph-env #:tclass:x11window:transparent-window:xgraph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:transparent-window:xgraph-env (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:transparent-window:events-mask #:tclass:x11window:transparent-window:events-mask)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:transparent-window:events-mask (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:transparent-window:visible #:tclass:x11window:transparent-window:visible)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:transparent-window:visible (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:transparent-window:view-rect #:tclass:x11window:transparent-window:view-rect)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:transparent-window:view-rect (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:transparent-window:offset-x #:tclass:x11window:transparent-window:offset-x)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:transparent-window:offset-x (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:transparent-window:offset-y #:tclass:x11window:transparent-window:offset-y)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:transparent-window:offset-y (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:x11window:transparent-window:top-opaque-father #:tclass:x11window:transparent-window:top-opaque-father)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:x11window:transparent-window:top-opaque-father (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(put-abbrev 'transparent-window '#:tclass:x11window:transparent-window)
'#:tclass:x11window:transparent-window
(defcsetfn '#:display:x11:top-opaque-window "GZx11struct" 73)

(defccheck '(list #:system:structaccess vector))
