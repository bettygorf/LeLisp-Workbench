(loader '((title |printlm.lo|)))
(setq #:sys-package:colon 'diagnostic)
(loader'((fentry #:diagnostic:update-desc subr2)
(entry #:diagnostic:update-desc subr2)
(push a2)
(push a1)
(hpxmov a2 '4 a4)
(bfnil a4 103)
(hpxmov a2 '13 a4)
(bfnil a4 103)
(hpxmov a2 '16 a4)
(btnil a4 101)
103
(jcall readdefmodule)
(push nil)
(push nil)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 2) (cvalq #:system:print-with-abbrev-flag))
(push '1)
(push '(#:system:print-with-abbrev-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 10) a2)
(call #:diagnostic:set-def)
(mov a1 (& 7))
(bfnil (cvalq #:crunch:keep-old) 104)
(mov (& 9) a1)
(jcall #:crunch:save-file)
(cnblt (cvalq #:crunch:verbose) '1 107)
(push (@ 108))
(push (@ 109))
(push '".. ")
(mov 'updatemodule a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
109
(eval ())
(push a1)
(push (& 11))
(mov '2 a4)
(jmp print)
108
(eval ())
107
(mov (& 9) a2)
(mov (& 7) a1)
(jcall #:diagnostic:printdefmodule)
(bra 105)
104
(mov nil a1)
105
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(adjstk '11)
(return)
101
(cnblt (cvalq #:crunch:verbose) '1 110)
(push (@ 112))
(push (@ 113))
(push '".. ")
(mov 'noneedwrite a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
113
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp print)
112
(eval ())
(adjstk '2)
(return)
110
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:diagnostic:set-def subr2)
(push a2)
(push a1)
(mov 'include a2)
(jcall getdefmodule)
(push a1)
(mov 'import a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push a1)
(mov 'export a2)
(mov (& 2) a1)
(jcall getdefmodule)
(push a1)
(push (@ 101))
(push 'append)
(hpxmov (& 6) '1 a4)
(push a4)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp apply)
101
(eval ())
(jcall simplify-list)
(push a1)
(hpxmov (& 5) '2 a4)
(push a4)
(hpxmov (& 6) '3 a3)
(push a3)
(hpxmov (& 7) '8 a1)
(jcall #:llmodule:format-export)
(push a1)
(hpxmov (& 8) '9 a1)
(jcall #:llmodule:format-export)
(push a1)
(hpxmov (& 9) '10 a1)
(jcall #:llmodule:format-export)
(push a1)
(hpxmov (& 10) '11 a1)
(jcall #:llmodule:format-export)
(push a1)
(hpxmov (& 11) '12 a1)
(jcall #:llmodule:format-export)
(hpxmov (& 11) '15 a4)
(push a4)
(push a1)
(bfnil (& 11) 106)
(btnil (& 8) 105)
106
(btnil (cvalq #:crunch:keep-wrong) 107)
(push (@ 109))
(push (& 9))
(push (& 13))
(mov '2 a4)
(jmp union)
109
(eval ())
(mov a1 a3)
(bra 108)
107
(mov (& 8) a3)
108
(mov 'include a2)
(mov (& 12) a1)
(jcall setdefmodule)
105
(push (@ 110))
(btnil (& 8) 111)
(push (@ 113))
(push 'analyzer-comment)
(push '";;; Imports which seem necessary")
(mov '2 a4)
(jmp list)
113
(eval ())
(mov (& 8) a2)
(jcall cons)
(mov a1 a4)
(bra 112)
111
(mov nil a4)
112
(push a4)
(btnil (& 8) 114)
(btnil (cvalq #:crunch:keep-wrong) 116)
(push (@ 118))
(push 'analyzer-comment)
(push '";;; User-imported modules")
(mov '2 a4)
(jmp list)
118
(eval ())
(mov (& 8) a2)
(jcall cons)
(mov a1 a4)
(bra 115)
116
(push (@ 119))
(push (@ 120))
(push 'analyzer-comment)
(push '";;; Ignoring unneeded imported modules")
(push (& 12))
(mov '3 a4)
(jmp mcons)
120
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
119
(eval ())
(mov a1 a4)
(bra 115)
114
(mov nil a4)
115
(push a4)
(mov '2 a4)
(jmp append)
110
(eval ())
(mov a1 a3)
(mov 'import a2)
(mov (& 12) a1)
(jcall setdefmodule)
(push (@ 121))
(btnil (& 6) 122)
(push (@ 124))
(push 'analyzer-comment)
(push '";;; Functions unused unless exported")
(mov '2 a4)
(jmp list)
124
(eval ())
(mov (& 6) a2)
(jcall cons)
(mov a1 a4)
(bra 123)
122
(mov nil a4)
123
(push a4)
(push (@ 125))
(btnil (& 7) 126)
(push (@ 128))
(push 'analyzer-comment)
(push '";;; Exports required by other modules")
(mov '2 a4)
(jmp list)
128
(eval ())
(mov (& 7) a2)
(jcall cons)
(mov a1 a4)
(bra 127)
126
(mov nil a4)
127
(push a4)
(push (@ 129))
(btnil (& 8) 130)
(push (@ 132))
(push 'analyzer-comment)
(push '";;; Exported because dynamically used")
(mov '2 a4)
(jmp list)
132
(eval ())
(mov (& 8) a2)
(jcall cons)
(mov a1 a4)
(bra 131)
130
(mov nil a4)
131
(push a4)
(push (@ 133))
(btnil (& 7) 134)
(btnil (cvalq #:crunch:keep-all-exports) 136)
(push (@ 138))
(push 'analyzer-comment)
(push '";;; Exported because all exports required")
(mov '2 a4)
(jmp list)
138
(eval ())
(mov (& 7) a2)
(jcall cons)
(mov a1 a4)
(bra 135)
136
(btnil (cvalq #:crunch:keep-wrong) 139)
(push (@ 141))
(push (& 8))
(push (& 18))
(mov '2 a4)
(jmp intersection)
141
(eval ())
(push a1)
(push (@ 142))
(push (& 9))
(push a1)
(mov '2 a4)
(jmp set-difference)
142
(eval ())
(push a1)
(btnil (& 1) 144)
(push (@ 145))
(push 'analyzer-comment)
(push '";;; Internally used but export required by user")
(mov '2 a4)
(jmp list)
145
(eval ())
(mov (& 1) a2)
(jcall cons)
144
(btnil (& 0) 146)
(push (@ 148))
(push (@ 149))
(push 'analyzer-comment)
(push '";;; Not exported because only internally used")
(push (& 4))
(mov '3 a4)
(jmp mcons)
149
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
148
(eval ())
(mov a1 a4)
(bra 147)
146
(mov nil a4)
147
(adjstk '2)
(bra 135)
139
(push (@ 150))
(push (@ 151))
(push 'analyzer-comment)
(push '";;; Not exported because only internally used")
(push (& 11))
(mov '3 a4)
(jmp mcons)
151
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
150
(eval ())
(mov a1 a4)
(bra 135)
134
(mov nil a4)
135
(push a4)
(btnil (& 10) 152)
(btnil (cvalq #:crunch:keep-wrong) 154)
(push (@ 156))
(push 'analyzer-comment)
(push '";;; Not defined but export required by user")
(mov '2 a4)
(jmp list)
156
(eval ())
(mov (& 10) a2)
(jcall cons)
(mov a1 a4)
(bra 153)
154
(push (@ 157))
(push (@ 158))
(push 'analyzer-comment)
(push '";;; Not exported because not defined")
(push (& 14))
(mov '3 a4)
(jmp mcons)
158
(eval ())
(push a1)
(mov '1 a4)
(jmp list)
157
(eval ())
(mov a1 a4)
(bra 153)
152
(mov nil a4)
153
(push a4)
(mov '2 a4)
(jmp nconc)
133
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
129
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
125
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
121
(eval ())
(mov a1 a3)
(mov 'export a2)
(mov (& 12) a1)
(jcall setdefmodule)
(btnil (cvalq #:crunch:keep-wrong) 159)
(mov '(";;; This module descriptor was updated by Analyser") a3)
(bra 160)
159
(mov '(";;; This module descriptor was generated by Analyser") a3)
160
(mov 'comments a2)
(mov (& 12) a1)
(jcall setdefmodule)
(btnil (& 1) 162)
(mov (& 1) a3)
(mov 'cpenv a2)
(mov (& 12) a1)
(jcall setdefmodule)
162
(mov (& 12) a2)
(mov 'cpexport a1)
(jcall assq)
(btnil a1 164)
(mov (& 12) a2)
(jcall delete)
164
(mov (& 12) a2)
(mov 'cpimport a1)
(jcall assq)
(btnil a1 166)
(mov (& 12) a2)
(jcall delete)
166
(mov (& 12) a2)
(mov 'cpfunctions a1)
(jcall assq)
(btnil a1 168)
(mov (& 12) a2)
(jcall delete)
168
(mov (& 12) a1)
(adjstk '14)
(return)
))
(loader'((fentry #:diagnostic:printdefmodule subr2)
(entry #:diagnostic:printdefmodule subr2)
(push a2)
(push a1)
(bfnil a2 101)
(mov a2 a3)
(mov '#:module:errnmd a2)
(mov 'printdefmodule a1)
(jcall error)
(bra 102)
101
(push nil)
(push '0)
(push nil)
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov (& 3) (cvalq #:system:print-msgs))
(push (cvalq #:system:error-flag))
(mov (& 5) (cvalq #:system:error-flag))
(push '3)
(push '(#:system:debug #:system:print-msgs #:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov a2 a1)
(jcall openo)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(mov (& 7) (cvalq #:system:print-msgs))
(mov (& 8) (cvalq #:system:debug))
(adjstk '12)
(push a1)
(bfnil a1 104)
(mov a1 a3)
(mov '#:module:errfpr a2)
(mov 'printdefmodule a1)
(jcall error)
(bra 105)
104
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(mov '0 a4)
(jmp outchan)
108
(eval ())
(push a1)
(push (@ 109))
(mov '0 a4)
(jmp printlength)
109
(eval ())
(push a1)
(push (@ 110))
(mov '0 a4)
(jmp printlevel)
110
(eval ())
(push a1)
(push (@ 111))
(mov '0 a4)
(jmp printline)
111
(eval ())
(push a1)
(push (@ 112))
(push dlink)
(push prot)
(stack dlink)
(push (@ 114))
(mov (& 11) a4)
(mov (car a4) (& 11))
(push (car a4))
(mov '1 a4)
(jmp outchan)
114
(eval ())
(push (@ 115))
(push '0)
(mov '1 a4)
(jmp printlength)
115
(eval ())
(push (@ 116))
(push '0)
(mov '1 a4)
(jmp printlevel)
116
(eval ())
(push (@ 117))
(push '0)
(mov '1 a4)
(jmp printline)
117
(eval ())
(mov 'comments a2)
(mov (& 11) a1)
(jcall getdefmodule)
(btnil a1 119)
(push (@ 120))
(mov '0 a4)
(jmp rmargin)
120
(eval ())
(push a1)
(push (@ 121))
(push dlink)
(push prot)
(stack dlink)
(push (@ 123))
(push (@ 124))
(mov '0 a4)
(jmp outbuf)
124
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
123
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'comments a2)
(mov (& 23) a1)
(jcall getdefmodule)
(push a1)
125
(bfcons (& 0) 126)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 127))
(push '"; ")
(push (& 2))
(mov '2 a4)
(jmp print)
127
(eval ())
(adjstk '1)
(bra 125)
126
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 122) a3)
121
(push a3)
(push a2)
(push (@ 128))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
122
(eval ())
(adjstk '1)
119
(mov nil a2)
(mov (& 11) a1)
(call #:diagnostic:print-rest-of-keys)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 113) a3)
112
(push a3)
(push a2)
(push (@ 129))
(push (& 4))
(mov '1 a4)
(jmp printline)
129
(eval ())
(push (@ 130))
(push (& 5))
(mov '1 a4)
(jmp printlevel)
130
(eval ())
(push (@ 131))
(push (& 6))
(mov '1 a4)
(jmp printlength)
131
(eval ())
(push (@ 132))
(push (& 7))
(mov '1 a4)
(jmp outchan)
132
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
113
(eval ())
(adjstk '4)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 133))
(push (& 4))
(mov '1 a4)
(jmp close)
133
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
105
(adjstk '1)
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:diagnostic:print-rest-of-keys subr2)
(push a2)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(push (car a4))
(push (cdr a4))
(mov (& 1) a3)
(cabeq a3 '#:module:header 104)
(cabeq a3 '#:module:deadheader 104)
(cabeq a3 'comments 104)
(mov (& 12) a2)
(mov a3 a1)
(jcall memq)
(bfnil a1 104)
(push (@ 105))
(mov '0 a4)
(jmp terpri)
105
(eval ())
(bfcons (& 0) 106)
(push (@ 108))
(push (& 2))
(mov '1 a4)
(jmp prin)
108
(eval ())
(push (@ 109))
(push '32)
(mov '1 a4)
(jmp princn)
109
(eval ())
(push (@ 110))
(push '40)
(mov '1 a4)
(jmp princn)
110
(eval ())
(push (@ 111))
(mov '0 a4)
(jmp terpri)
111
(eval ())
(cabne (& 1) 'cpenv 112)
(push (& 0))
114
(bfcons (& 0) 115)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(btcons (& 0) 116)
(push (@ 118))
(push (& 1))
(mov '1 a4)
(jmp print)
118
(eval ())
(bra 117)
116
(push (@ 119))
(push '40)
(mov '1 a4)
(jmp princn)
119
(eval ())
(push (& 0))
120
(bfcons (& 0) 121)
(push (@ 122))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
122
(eval ())
(bra 120)
121
(adjstk '1)
(push (@ 123))
(push '41)
(mov '1 a4)
(jmp princn)
123
(eval ())
117
(adjstk '1)
(bra 114)
115
(adjstk '1)
(bra 113)
112
(mov (& 1) a4)
(cabeq a4 'import 126)
(cabne a4 'export 124)
126
(push (& 0))
127
(bfcons (& 0) 128)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 129)
(mov (& 0) a4)
(cabne (car a4) 'analyzer-comment 129)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 131))
(mov '0 a4)
(jmp rmargin)
131
(eval ())
(push a1)
(push (@ 132))
(push dlink)
(push prot)
(stack dlink)
(push (@ 134))
(push (@ 135))
(mov '0 a4)
(jmp outbuf)
135
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
134
(eval ())
(push (@ 136))
(mov '0 a4)
(jmp terpri)
136
(eval ())
(mov (& 12) a4)
(push (cdr a4))
137
(bfcons (& 0) 138)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 139))
(push '"; ")
(push (& 2))
(mov '2 a4)
(jmp print)
139
(eval ())
(adjstk '1)
(bra 137)
138
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 133) a3)
132
(push a3)
(push a2)
(push (@ 140))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
140
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
133
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(bra 130)
129
(push (@ 141))
(push (& 1))
(mov '1 a4)
(jmp print)
141
(eval ())
130
(adjstk '1)
(bra 127)
128
(adjstk '1)
(bra 113)
124
(push (& 0))
142
(bfcons (& 0) 143)
(push (@ 144))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
144
(eval ())
(bra 142)
143
(adjstk '1)
113
(push (@ 145))
(push '41)
(mov '1 a4)
(jmp princn)
145
(eval ())
(push (@ 146))
(mov '0 a4)
(jmp terpri)
146
(eval ())
(bra 104)
106
(push (@ 147))
(push (& 2))
(mov '1 a4)
(jmp prin)
147
(eval ())
(push (@ 148))
(push '32)
(mov '1 a4)
(jmp princn)
148
(eval ())
(push (@ 149))
(push (& 1))
(mov '1 a4)
(jmp prin)
149
(eval ())
(push (@ 150))
(mov '0 a4)
(jmp terpri)
150
(eval ())
104
(adjstk '3)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '9)
(return)
))
(loader '((end)))
