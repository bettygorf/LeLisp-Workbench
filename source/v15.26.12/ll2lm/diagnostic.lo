(loader '((title |diagnostic.lo|)))
(put-abbrev 'analyze '#:llmodule:analyze)
(putprop '#:llmodule:analyze '((() () () () () () () () () () () ()) allfnt allsynd allexpd allextd allexti allother defd-f alldyn allunknow used-f include allcpenv) 'defstruct)
(loader'((fentry #:llmodule:analyze:make subr0)
(entry #:llmodule:analyze:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '12 a4)
(jmp vector)
101
(eval ())
(mov '#:llmodule:analyze (cdr a1))
(return)
))
(loader'((fentry #:llmodule:analyze:allfnt nsubr)
(entry #:llmodule:analyze:allfnt nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:allfnt)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:allfnt '#:llmodule:analyze:allfnt 'setf-inverse) '#:llmodule:analyze:allfnt)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:allfnt (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:llmodule:analyze:allsynd nsubr)
(entry #:llmodule:analyze:allsynd nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:allsynd)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:allsynd '#:llmodule:analyze:allsynd 'setf-inverse) '#:llmodule:analyze:allsynd)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:allsynd (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:llmodule:analyze:allexpd nsubr)
(entry #:llmodule:analyze:allexpd nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:allexpd)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:allexpd '#:llmodule:analyze:allexpd 'setf-inverse) '#:llmodule:analyze:allexpd)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:allexpd (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:llmodule:analyze:allextd nsubr)
(entry #:llmodule:analyze:allextd nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:allextd)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:allextd '#:llmodule:analyze:allextd 'setf-inverse) '#:llmodule:analyze:allextd)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:allextd (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:llmodule:analyze:allexti nsubr)
(entry #:llmodule:analyze:allexti nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:allexti)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:allexti '#:llmodule:analyze:allexti 'setf-inverse) '#:llmodule:analyze:allexti)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:allexti (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:llmodule:analyze:allother nsubr)
(entry #:llmodule:analyze:allother nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:allother)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:allother '#:llmodule:analyze:allother 'setf-inverse) '#:llmodule:analyze:allother)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:allother (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:llmodule:analyze:defd-f nsubr)
(entry #:llmodule:analyze:defd-f nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:defd-f)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:defd-f '#:llmodule:analyze:defd-f 'setf-inverse) '#:llmodule:analyze:defd-f)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:defd-f (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:llmodule:analyze:alldyn nsubr)
(entry #:llmodule:analyze:alldyn nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:alldyn)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:alldyn '#:llmodule:analyze:alldyn 'setf-inverse) '#:llmodule:analyze:alldyn)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:alldyn (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:llmodule:analyze:allunknow nsubr)
(entry #:llmodule:analyze:allunknow nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:allunknow)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:allunknow '#:llmodule:analyze:allunknow 'setf-inverse) '#:llmodule:analyze:allunknow)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:allunknow (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:llmodule:analyze:used-f nsubr)
(entry #:llmodule:analyze:used-f nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:used-f)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:used-f '#:llmodule:analyze:used-f 'setf-inverse) '#:llmodule:analyze:used-f)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:used-f (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(loader'((fentry #:llmodule:analyze:include nsubr)
(entry #:llmodule:analyze:include nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:include)
(push '10)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:include '#:llmodule:analyze:include 'setf-inverse) '#:llmodule:analyze:include)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:include (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(loader'((fentry #:llmodule:analyze:allcpenv nsubr)
(entry #:llmodule:analyze:allcpenv nsubr)
(push a4)
(push (@ 101))
(push '#:llmodule:analyze:allcpenv)
(push '11)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:llmodule:analyze:allcpenv '#:llmodule:analyze:allcpenv 'setf-inverse) '#:llmodule:analyze:allcpenv)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodule:analyze:allcpenv (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(loader'((fentry #:llmodule:analyze:prin subr1)
(entry #:llmodule:analyze:prin subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp terpri)
101
(eval ())
(push (@ 102))
(push '"-Definitions:")
(mov '1 a4)
(jmp print)
102
(eval ())
(push (@ 103))
(push '" from DE,DEFMACRO,... : ")
(hpxmov (& 2) '0 a4)
(push a4)
(mov '2 a4)
(jmp print)
103
(eval ())
(push (@ 104))
(push '" from SYNONYM : ")
(hpxmov (& 2) '1 a4)
(push a4)
(mov '2 a4)
(jmp print)
104
(eval ())
(push (@ 105))
(push '" from EXPORTABLE-DEFINITION : ")
(hpxmov (& 2) '2 a4)
(push a4)
(mov '2 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push '" export from EXTERNAL MODULES : ")
(hpxmov (& 2) '3 a4)
(push a4)
(mov '2 a4)
(jmp print)
106
(eval ())
(push (@ 107))
(push '" No export from EXTERNAL MODULES : ")
(hpxmov (& 2) '4 a4)
(push a4)
(mov '2 a4)
(jmp print)
107
(eval ())
(push (@ 108))
(push '" from other definer(defabbrev...) : ")
(hpxmov (& 2) '5 a4)
(push a4)
(mov '2 a4)
(jmp print)
108
(eval ())
(push (@ 109))
(push '" all definitions : ")
(hpxmov (& 2) '6 a4)
(push a4)
(mov '2 a4)
(jmp print)
109
(eval ())
(push (@ 110))
(push '"-Used functions:")
(mov '1 a4)
(jmp print)
110
(eval ())
(push (@ 111))
(push '" dynamic used functions : ")
(hpxmov (& 2) '7 a4)
(push a4)
(mov '2 a4)
(jmp print)
111
(eval ())
(push (@ 112))
(push '" unknow used things : ")
(hpxmov (& 2) '8 a4)
(push a4)
(mov '2 a4)
(jmp print)
112
(eval ())
(push (@ 113))
(push '" all used functions : ")
(hpxmov (& 2) '9 a4)
(push a4)
(mov '2 a4)
(jmp print)
113
(eval ())
(push (@ 114))
(push '"-Context from EVAL-WHEN(COMPILE) : ")
(mov '1 a4)
(jmp print)
114
(eval ())
(push (@ 115))
(push '" included files : ")
(hpxmov (& 2) '10 a4)
(push a4)
(mov '2 a4)
(jmp print)
115
(eval ())
(hpxmov (& 0) '11 a1)
(jcall pprint)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(put-abbrev 'diagnostic 'diagnostic)
(setq #:sys-package:colon 'diagnostic)
(putprop 'diagnostic '((() () () () () () () () () () () () () () () () ()) module-name necessary-include necessary-imports excess-imports import-rewrite-p why-to-import unknow-things all-exports localy-necessary-exports extern-necessary-exports dynamic-necessary-exports excess-exports internal-functions export-rewrite-p other-definitions exported-cpenv cpenv-rewrite-p) 'defstruct)
(loader'((fentry #:diagnostic:make subr0)
(entry #:diagnostic:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '17 a4)
(jmp vector)
101
(eval ())
(mov 'diagnostic (cdr a1))
(return)
))
(loader'((fentry #:diagnostic:module-name nsubr)
(entry #:diagnostic:module-name nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:module-name)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:module-name #:diagnostic:module-name)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:module-name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:diagnostic:necessary-include nsubr)
(entry #:diagnostic:necessary-include nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:necessary-include)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:necessary-include #:diagnostic:necessary-include)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:necessary-include (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:diagnostic:necessary-imports nsubr)
(entry #:diagnostic:necessary-imports nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:necessary-imports)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:necessary-imports #:diagnostic:necessary-imports)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:necessary-imports (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:diagnostic:excess-imports nsubr)
(entry #:diagnostic:excess-imports nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:excess-imports)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:excess-imports #:diagnostic:excess-imports)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:excess-imports (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:diagnostic:import-rewrite-p nsubr)
(entry #:diagnostic:import-rewrite-p nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:import-rewrite-p)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:import-rewrite-p #:diagnostic:import-rewrite-p)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:import-rewrite-p (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:diagnostic:why-to-import nsubr)
(entry #:diagnostic:why-to-import nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:why-to-import)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:why-to-import #:diagnostic:why-to-import)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:why-to-import (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:diagnostic:unknow-things nsubr)
(entry #:diagnostic:unknow-things nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:unknow-things)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:unknow-things #:diagnostic:unknow-things)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:unknow-things (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:diagnostic:all-exports nsubr)
(entry #:diagnostic:all-exports nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:all-exports)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:all-exports #:diagnostic:all-exports)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:all-exports (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:diagnostic:localy-necessary-exports nsubr)
(entry #:diagnostic:localy-necessary-exports nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:localy-necessary-exports)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:localy-necessary-exports #:diagnostic:localy-necessary-exports)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:localy-necessary-exports (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:diagnostic:extern-necessary-exports nsubr)
(entry #:diagnostic:extern-necessary-exports nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:extern-necessary-exports)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:extern-necessary-exports #:diagnostic:extern-necessary-exports)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:extern-necessary-exports (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(loader'((fentry #:diagnostic:dynamic-necessary-exports nsubr)
(entry #:diagnostic:dynamic-necessary-exports nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:dynamic-necessary-exports)
(push '10)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:dynamic-necessary-exports #:diagnostic:dynamic-necessary-exports)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:dynamic-necessary-exports (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(loader'((fentry #:diagnostic:excess-exports nsubr)
(entry #:diagnostic:excess-exports nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:excess-exports)
(push '11)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:excess-exports #:diagnostic:excess-exports)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:excess-exports (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(loader'((fentry #:diagnostic:internal-functions nsubr)
(entry #:diagnostic:internal-functions nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:internal-functions)
(push '12)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:internal-functions #:diagnostic:internal-functions)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:internal-functions (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(loader'((fentry #:diagnostic:export-rewrite-p nsubr)
(entry #:diagnostic:export-rewrite-p nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:export-rewrite-p)
(push '13)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:export-rewrite-p #:diagnostic:export-rewrite-p)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:export-rewrite-p (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(loader'((fentry #:diagnostic:other-definitions nsubr)
(entry #:diagnostic:other-definitions nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:other-definitions)
(push '14)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:other-definitions #:diagnostic:other-definitions)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:other-definitions (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(loader'((fentry #:diagnostic:exported-cpenv nsubr)
(entry #:diagnostic:exported-cpenv nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:exported-cpenv)
(push '15)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:exported-cpenv #:diagnostic:exported-cpenv)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:exported-cpenv (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(loader'((fentry #:diagnostic:cpenv-rewrite-p nsubr)
(entry #:diagnostic:cpenv-rewrite-p nsubr)
(push a4)
(push (@ 101))
(push '#:diagnostic:cpenv-rewrite-p)
(push '16)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:diagnostic:cpenv-rewrite-p #:diagnostic:cpenv-rewrite-p)))
(if (featurep 'compiler) (progn (defmacro-open #:diagnostic:cpenv-rewrite-p (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(loader'((fentry #:diagnostic:prin subr1)
(entry #:diagnostic:prin subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp terpri)
101
(eval ())
(push (@ 102))
(push '"the name of THIS module :")
(hpxmov (& 2) '0 a4)
(push a4)
(mov '2 a4)
(jmp print)
102
(eval ())
(push (@ 103))
(push '" needed include :")
(hpxmov (& 2) '1 a4)
(push a4)
(mov '2 a4)
(jmp print)
103
(eval ())
(push (@ 104))
(push '" needed imports :")
(hpxmov (& 2) '2 a4)
(push a4)
(mov '2 a4)
(jmp print)
104
(eval ())
(push (@ 105))
(push '" excess imports :")
(hpxmov (& 2) '3 a4)
(push a4)
(mov '2 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push '" do we migth rewrite import :")
(hpxmov (& 2) '4 a4)
(push a4)
(mov '2 a4)
(jmp print)
106
(eval ())
(push (@ 107))
(push '" (o . mods): object & rigth modules to import :")
(hpxmov (& 2) '5 a4)
(push a4)
(mov '2 a4)
(jmp print)
107
(eval ())
(push (@ 108))
(push '" unknow external & localy used things :")
(hpxmov (& 2) '6 a4)
(push a4)
(mov '2 a4)
(jmp print)
108
(eval ())
(push (@ 109))
(push '" all exports to write in EXPORT field module :")
(hpxmov (& 2) '7 a4)
(push a4)
(mov '2 a4)
(jmp print)
109
(eval ())
(push (@ 110))
(push '" localy needed exports :")
(hpxmov (& 2) '8 a4)
(push a4)
(mov '2 a4)
(jmp print)
110
(eval ())
(push (@ 111))
(push '" needed exports for other modules :")
(hpxmov (& 2) '9 a4)
(push a4)
(mov '2 a4)
(jmp print)
111
(eval ())
(push (@ 112))
(push '" needed exports for dynamic used fcts :")
(hpxmov (& 2) '10 a4)
(push a4)
(mov '2 a4)
(jmp print)
112
(eval ())
(push (@ 113))
(push '" no localy defined fct & no required => no export :")
(hpxmov (& 2) '11 a4)
(push a4)
(mov '2 a4)
(jmp print)
113
(eval ())
(push (@ 114))
(push '" localy defined & localy used fct & no required => no export")
(hpxmov (& 2) '12 a4)
(push a4)
(mov '2 a4)
(jmp print)
114
(eval ())
(push (@ 115))
(push '" do we migth rewrite export :")
(hpxmov (& 2) '13 a4)
(push a4)
(mov '2 a4)
(jmp print)
115
(eval ())
(push (@ 116))
(push '" other definitions (defabbrev, ...) :")
(hpxmov (& 2) '14 a4)
(push a4)
(mov '2 a4)
(jmp print)
116
(eval ())
(push (@ 117))
(push '" from EVAL-WHEN(COMPILE) :")
(hpxmov (& 2) '15 a4)
(push a4)
(mov '2 a4)
(jmp print)
117
(eval ())
(push (@ 118))
(push '" do we migth rewrite cpenv :")
(hpxmov (& 2) '16 a4)
(push a4)
(mov '2 a4)
(jmp print)
118
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(defvar #:diagnostic:silly-f ())
(loader'((fentry #:diagnostic:set-diagnostic-from-analyze subr3)
(entry #:diagnostic:set-diagnostic-from-analyze subr3)
(push a3)
(push a2)
(push a1)
(push a2)
(mov 'import a2)
(pop a1)
(jcall getdefmodule)
(push a1)
(mov 'export a2)
(mov (& 2) a1)
(jcall getdefmodule)
(push a1)
(hpxmov (& 4) '9 a4)
(push a4)
(hpxmov (& 5) '6 a3)
(push a3)
(hpxmov (& 6) '11 a2)
(push a2)
(mov 'diagnostic a1)
(jcall new)
(push a1)
(hpxmov (& 8) '3 a1)
(mov (& 5) a2)
(jcall #:diagnostic:modules-needed)
(mov a1 a2)
(mov (& 6) a1)
(jcall delq)
(push a1)
(push (@ 101))
(push (& 4))
(push (& 6))
(mov '2 a4)
(jmp intersection)
101
(eval ())
(push a1)
(push (@ 102))
(hpxmov (& 11) '7 a4)
(push a4)
(push (& 6))
(mov '2 a4)
(jmp intersection)
102
(eval ())
(push a1)
(hpmovx (& 9) (& 3) '0)
(hpxmov (& 11) '10 a4)
(hpmovx a4 (& 3) '1)
(hpmovx (& 2) (& 3) '2)
(push (@ 103))
(push (& 9))
(push (& 4))
(mov '2 a4)
(jmp set-difference)
103
(eval ())
(hpmovx a1 (& 3) '3)
(hpxmov (& 11) '8 a4)
(hpmovx a4 (& 3) '6)
(push (@ 107))
(hpxmov (& 4) '2 a4)
(push a4)
(push (& 10))
(mov '2 a4)
(jmp set-equal)
107
(eval ())
(mov a1 a4)
(btnil a4 106)
(hpxmov (& 3) '3 a4)
(btnil a4 108)
(mov nil a4)
(bra 106)
108
(mov 't a4)
106
(btnil a4 104)
(mov nil a4)
(bra 105)
104
(mov 't a4)
105
(hpmovx a4 (& 3) '4)
(push (@ 110))
(push (& 6))
(push (& 8))
(push 'equal)
(mov '3 a4)
(jmp set-difference)
110
(eval ())
(hpmovx a1 (& 3) '8)
(push (@ 111))
(hpxmov (& 12) '4 a4)
(push a4)
(push (@ 112))
(push (@ 113))
(push (& 5))
(push (& 12))
(push 'equal)
(mov '3 a4)
(jmp intersection)
113
(eval ())
(push a1)
(push (& 4))
(push 'equal)
(mov '3 a4)
(jmp set-difference)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp union)
111
(eval ())
(hpmovx a1 (& 3) '9)
(hpmovx (& 0) (& 3) '10)
(push (@ 114))
(push (& 8))
(push (& 7))
(push 'equal)
(mov '3 a4)
(jmp set-difference)
114
(eval ())
(hpmovx a1 (& 3) '11)
(hpxmov (& 3) '11 a4)
(btnil a4 116)
(mov (cvalq #:crunch:w-flag) a2)
(mov '105 a1)
(jcall memq)
(bfnil a1 118)
(mov (cvalq #:crunch:w-flag) a2)
(mov '105 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
118
(cnbgt (cvalq #:crunch:verbose) '0 121)
(mov (cvalq #:crunch:no-warning) a2)
(mov '105 a1)
(jcall memq)
(bfnil a1 116)
121
(hpxmov (& 3) '11 a3)
(mov '|5| a2)
(mov '"W.105" a1)
(jcall printerror)
116
(push (@ 122))
(push (@ 123))
(push (@ 124))
(push (& 4))
(push (& 11))
(mov '2 a4)
(jmp set-difference)
124
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp set-difference)
123
(eval ())
(push a1)
(hpxmov (& 13) '4 a4)
(push a4)
(mov '2 a4)
(jmp set-difference)
122
(eval ())
(hpmovx a1 (& 3) '12)
(push (@ 125))
(hpxmov (& 4) '8 a4)
(push a4)
(hpxmov (& 5) '9 a4)
(push a4)
(hpxmov (& 6) '10 a4)
(push a4)
(btnil (cvalq #:crunch:keep-wrong) 126)
(hpxmov (& 7) '11 a4)
(bra 127)
126
(mov nil a4)
127
(push a4)
(btnil (cvalq #:crunch:keep-all-exports) 128)
(hpxmov (& 8) '12 a4)
(bra 129)
128
(btnil (cvalq #:crunch:keep-wrong) 130)
(push (@ 132))
(hpxmov (& 9) '12 a4)
(push a4)
(push (& 14))
(mov '2 a4)
(jmp intersection)
132
(eval ())
(mov a1 a4)
(bra 129)
130
(mov nil a4)
129
(push a4)
(mov '5 a4)
(jmp append)
125
(eval ())
(hpmovx a1 (& 3) '7)
(push (@ 136))
(hpxmov (& 4) '7 a1)
(jcall #:llmodule:format-export)
(push a1)
(push (& 9))
(push 'equal)
(mov '3 a4)
(jmp set-equal)
136
(eval ())
(mov a1 a4)
(btnil a4 135)
(hpxmov (& 3) '11 a4)
(btnil a4 137)
(mov nil a4)
(bra 135)
137
(mov 't a4)
135
(btnil a4 133)
(mov nil a4)
(bra 134)
133
(mov 't a4)
134
(hpmovx a4 (& 3) '13)
(hpxmov (& 11) '5 a3)
(hpmovx a3 (& 3) '14)
(mov (& 4) a3)
(btnil a3 139)
(push (@ 142))
(push a3)
(mov 'cpenv a2)
(mov (& 12) a1)
(jcall getdefmodule)
(push a1)
(push 'equal)
(mov '3 a4)
(jmp set-equal)
142
(eval ())
(btnil a1 140)
(mov nil a3)
(bra 139)
140
(mov 't a3)
139
(hpmovx a3 (& 3) '16)
(mov (& 4) a1)
(jcall nreverse)
(hpmovx a1 (& 3) '15)
(hpxmov (& 11) '3 a4)
(hpmovx a4 (& 3) '5)
(mov (& 3) a1)
(adjstk '12)
(return)
))
(loader'((fentry #:diagnostic:modules-needed subr2)
(entry #:diagnostic:modules-needed subr2)
(push a2)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push a4)
(btnil a4 103)
(push a4)
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 7) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 108)
(mov (& 0) a1)
(jcall ncons)
(bra 109)
108
(mov nil a1)
109
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 106)
107
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(bfnil a1 104)
(mov (& 0) a1)
(jcall copylist)
(bra 104)
103
(mov (cvalq #:diagnostic:silly-f) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:diagnostic:silly-f))
(mov nil a1)
104
(adjstk '2)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(jcall simplify-list)
(mov (& 0) a2)
(adjstk '1)
(bra #:diagnostic:sort-import)
))
(loader'((entry #:diagnostic:sort-import subr2)
(push (@ 101))
(push a2)
(push (@ 102))
(push a1)
(push a2)
(mov '2 a4)
(jmp set-difference)
102
(eval ())
(push a1)
(mov '2 a4)
(jmp append)
101
(eval ())
(return)
))
(loader'((fentry #:diagnostic:explain-diagnostic subr1)
(entry #:diagnostic:explain-diagnostic subr1)
(push a1)
(hpxmov a1 '2 a4)
(push a4)
(hpxmov a1 '3 a3)
(hpxmov a1 '4 a2)
(hpxmov a1 '8 a4)
(push a4)
(hpxmov a1 '9 a4)
(push a4)
(hpxmov a1 '10 a4)
(push a4)
(hpxmov a1 '11 a4)
(push a4)
(hpxmov a1 '12 a4)
(push a4)
(hpxmov a1 '13 a4)
(push a4)
(hpxmov a1 '6 a4)
(push nil)
(push nil)
(push nil)
(push a4)
(push a2)
(push a3)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(push '1)
(push '(#:system:print-with-abbrev-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(cnblt (cvalq #:crunch:verbose) '2 110)
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp rmargin)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push nil)
(mov '1 a4)
(jmp outchan)
115
(eval ())
(push (@ 116))
(push (@ 117))
(mov '0 a4)
(jmp outbuf)
117
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
116
(eval ())
(push (@ 118))
(push '"===== Concerning IMPORTS :")
(mov '1 a4)
(jmp print)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 120))
(push (& 5))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '2)
110
(mov (& 9) (& 11))
(bfnil (& 9) 128)
(bfnil (& 8) 128)
(cnblt (cvalq #:crunch:verbose) '1 122)
(push (@ 125))
(push (@ 126))
(push '".. ")
(push (@ 127))
(push nil)
(mov 'seems a1)
(jcall get-message)
(push a1)
(push 'imports)
(mov '3 a4)
(jmp format)
127
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
126
(eval ())
(push a1)
(push 'ok)
(mov '2 a4)
(jmp print)
125
(eval ())
(bra 122)
128
(mov (& 11) a4)
(mov (cdr a4) (& 11))
(mov (car a4) (& 10))
(btnil (car a4) 129)
(cnblt (cvalq #:crunch:verbose) '2 131)
(push (@ 132))
(mov '0 a4)
(jmp outchan)
132
(eval ())
(push a1)
(push (@ 133))
(mov '0 a4)
(jmp rmargin)
133
(eval ())
(push a1)
(push (@ 134))
(push dlink)
(push prot)
(stack dlink)
(push (@ 136))
(push nil)
(mov '1 a4)
(jmp outchan)
136
(eval ())
(push (@ 137))
(push (@ 138))
(mov '0 a4)
(jmp outbuf)
138
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
137
(eval ())
(push (@ 139))
(push '"--")
(mov '1 a4)
(jmp print)
139
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 135) a3)
134
(push a3)
(push a2)
(push (@ 140))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
140
(eval ())
(push (@ 141))
(push (& 5))
(mov '1 a4)
(jmp outchan)
141
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
135
(eval ())
(adjstk '2)
131
(cnblt (cvalq #:crunch:verbose) '2 143)
(push (@ 144))
(mov '0 a4)
(jmp outchan)
144
(eval ())
(push a1)
(push (@ 145))
(mov '0 a4)
(jmp rmargin)
145
(eval ())
(push a1)
(push (@ 146))
(push dlink)
(push prot)
(stack dlink)
(push (@ 148))
(push nil)
(mov '1 a4)
(jmp outchan)
148
(eval ())
(push (@ 149))
(push (@ 150))
(mov '0 a4)
(jmp outbuf)
150
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
149
(eval ())
(push (@ 151))
(push '"-- The following are ")
(mov (& 17) a1)
(mov (car a1) a1)
(jcall get-message-p)
(btnil a1 152)
(mov (& 17) a1)
(mov (car a1) a1)
(jcall get-message)
(mov a1 a4)
(bra 153)
152
(mov (& 17) a4)
(mov (car a4) a4)
153
(push a4)
(mov '2 a4)
(jmp print)
151
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 147) a3)
146
(push a3)
(push a2)
(push (@ 154))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
154
(eval ())
(push (@ 155))
(push (& 5))
(mov '1 a4)
(jmp outchan)
155
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
147
(eval ())
(adjstk '2)
143
(mov (& 10) a4)
(push (cdr a4))
156
(bfcons (& 0) 157)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 159)
(push (@ 160))
(mov '0 a4)
(jmp outchan)
160
(eval ())
(push a1)
(push (@ 161))
(mov '0 a4)
(jmp rmargin)
161
(eval ())
(push a1)
(push (@ 162))
(push dlink)
(push prot)
(stack dlink)
(push (@ 164))
(push nil)
(mov '1 a4)
(jmp outchan)
164
(eval ())
(push (@ 165))
(push (@ 166))
(mov '0 a4)
(jmp outbuf)
166
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
165
(eval ())
(push (@ 167))
(push '"--      ")
(push (& 7))
(mov '2 a4)
(jmp print)
167
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 163) a3)
162
(push a3)
(push a2)
(push (@ 168))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
168
(eval ())
(push (@ 169))
(push (& 5))
(mov '1 a4)
(jmp outchan)
169
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
163
(eval ())
(adjstk '2)
159
(adjstk '1)
(bra 156)
157
(adjstk '1)
(bra 128)
129
(btnil (& 9) 171)
(cnblt (cvalq #:crunch:verbose) '2 173)
(push (@ 174))
(mov '0 a4)
(jmp outchan)
174
(eval ())
(push a1)
(push (@ 175))
(mov '0 a4)
(jmp rmargin)
175
(eval ())
(push a1)
(push (@ 176))
(push dlink)
(push prot)
(stack dlink)
(push (@ 178))
(push nil)
(mov '1 a4)
(jmp outchan)
178
(eval ())
(push (@ 179))
(push (@ 180))
(mov '0 a4)
(jmp outbuf)
180
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
179
(eval ())
(push (@ 181))
(push '"--")
(mov '1 a4)
(jmp print)
181
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 177) a3)
176
(push a3)
(push a2)
(push (@ 182))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
182
(eval ())
(push (@ 183))
(push (& 5))
(mov '1 a4)
(jmp outchan)
183
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
177
(eval ())
(adjstk '2)
173
(cnblt (cvalq #:crunch:verbose) '2 185)
(push (@ 186))
(mov '0 a4)
(jmp outchan)
186
(eval ())
(push a1)
(push (@ 187))
(mov '0 a4)
(jmp rmargin)
187
(eval ())
(push a1)
(push (@ 188))
(push dlink)
(push prot)
(stack dlink)
(push (@ 190))
(push nil)
(mov '1 a4)
(jmp outchan)
190
(eval ())
(push (@ 191))
(push (@ 192))
(mov '0 a4)
(jmp outbuf)
192
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
191
(eval ())
(push (@ 193))
(push '"-- Modules defining these entities have to be analyzed before module: ")
(hpxmov (& 27) '0 a4)
(push a4)
(mov '2 a4)
(jmp print)
193
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 189) a3)
188
(push a3)
(push a2)
(push (@ 194))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
194
(eval ())
(push (@ 195))
(push (& 5))
(mov '1 a4)
(jmp outchan)
195
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
189
(eval ())
(adjstk '2)
185
(cnblt (cvalq #:crunch:verbose) '2 197)
(push (@ 198))
(mov '0 a4)
(jmp outchan)
198
(eval ())
(push a1)
(push (@ 199))
(mov '0 a4)
(jmp rmargin)
199
(eval ())
(push a1)
(push (@ 200))
(push dlink)
(push prot)
(stack dlink)
(push (@ 202))
(push nil)
(mov '1 a4)
(jmp outchan)
202
(eval ())
(push (@ 203))
(push (@ 204))
(mov '0 a4)
(jmp outbuf)
204
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
203
(eval ())
(push (@ 205))
(push '"-- If these entities are defined in ILOG products, please specify ")
(mov '1 a4)
(jmp print)
205
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 201) a3)
200
(push a3)
(push a2)
(push (@ 206))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
206
(eval ())
(push (@ 207))
(push (& 5))
(mov '1 a4)
(jmp outchan)
207
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
201
(eval ())
(adjstk '2)
197
(cnblt (cvalq #:crunch:verbose) '2 209)
(push (@ 210))
(mov '0 a4)
(jmp outchan)
210
(eval ())
(push a1)
(push (@ 211))
(mov '0 a4)
(jmp rmargin)
211
(eval ())
(push a1)
(push (@ 212))
(push dlink)
(push prot)
(stack dlink)
(push (@ 214))
(push nil)
(mov '1 a4)
(jmp outchan)
214
(eval ())
(push (@ 215))
(push (@ 216))
(mov '0 a4)
(jmp outbuf)
216
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
215
(eval ())
(push (@ 217))
(push '"-- the correct context(s) for analysis.")
(mov '1 a4)
(jmp print)
217
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 213) a3)
212
(push a3)
(push a2)
(push (@ 218))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
218
(eval ())
(push (@ 219))
(push (& 5))
(mov '1 a4)
(jmp outchan)
219
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
213
(eval ())
(adjstk '2)
209
(push (@ 220))
(mov '0 a4)
(jmp terpri)
220
(eval ())
171
(bfnil (& 19) 223)
(btnil (& 7) 122)
223
(mov (& 7) a3)
(mov (& 19) a2)
(mov (& 20) a1)
(call pretty-import)
122
(cnblt (cvalq #:crunch:verbose) '2 225)
(push (@ 226))
(mov '0 a4)
(jmp outchan)
226
(eval ())
(push a1)
(push (@ 227))
(push dlink)
(push prot)
(stack dlink)
(push (@ 229))
(push nil)
(mov '1 a4)
(jmp outchan)
229
(eval ())
(push (@ 230))
(mov '0 a4)
(jmp terpri)
230
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 228) a3)
227
(push a3)
(push a2)
(push (@ 231))
(push (& 4))
(mov '1 a4)
(jmp outchan)
231
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
228
(eval ())
(adjstk '1)
225
(cnblt (cvalq #:crunch:verbose) '2 233)
(push (@ 234))
(mov '0 a4)
(jmp outchan)
234
(eval ())
(push a1)
(push (@ 235))
(mov '0 a4)
(jmp rmargin)
235
(eval ())
(push a1)
(push (@ 236))
(push dlink)
(push prot)
(stack dlink)
(push (@ 238))
(push nil)
(mov '1 a4)
(jmp outchan)
238
(eval ())
(push (@ 239))
(push (@ 240))
(mov '0 a4)
(jmp outbuf)
240
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
239
(eval ())
(push (@ 241))
(push '"===== Concerning EXPORTS :")
(mov '1 a4)
(jmp print)
241
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 237) a3)
236
(push a3)
(push a2)
(push (@ 242))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
242
(eval ())
(push (@ 243))
(push (& 5))
(mov '1 a4)
(jmp outchan)
243
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
237
(eval ())
(adjstk '2)
233
(bfnil (& 13) 244)
(cnblt (cvalq #:crunch:verbose) '1 246)
(push (@ 248))
(push (@ 249))
(push '".. ")
(push (@ 250))
(push nil)
(mov 'seems a1)
(jcall get-message)
(push a1)
(push 'exports)
(mov '3 a4)
(jmp format)
250
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
249
(eval ())
(push a1)
(push 'ok)
(mov '2 a4)
(jmp print)
248
(eval ())
(bra 245)
246
(mov nil a1)
(bra 245)
244
(btnil (& 18) 252)
(cnblt (cvalq #:crunch:verbose) '2 254)
(push (@ 255))
(mov '0 a4)
(jmp outchan)
255
(eval ())
(push a1)
(push (@ 256))
(mov '0 a4)
(jmp rmargin)
256
(eval ())
(push a1)
(push (@ 257))
(push dlink)
(push prot)
(stack dlink)
(push (@ 259))
(push nil)
(mov '1 a4)
(jmp outchan)
259
(eval ())
(push (@ 260))
(push (@ 261))
(mov '0 a4)
(jmp outbuf)
261
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
260
(eval ())
(push (@ 262))
(push '"- The following functions will be unused unless exported :")
(mov '1 a4)
(jmp print)
262
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 258) a3)
257
(push a3)
(push a2)
(push (@ 263))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
263
(eval ())
(push (@ 264))
(push (& 5))
(mov '1 a4)
(jmp outchan)
264
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
258
(eval ())
(adjstk '2)
254
(push (& 18))
265
(bfcons (& 0) 266)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(btcons (& 0) 268)
(cnblt (cvalq #:crunch:verbose) '2 268)
(push (@ 271))
(mov '0 a4)
(jmp outchan)
271
(eval ())
(push a1)
(push (@ 272))
(mov '0 a4)
(jmp rmargin)
272
(eval ())
(push a1)
(push (@ 273))
(push dlink)
(push prot)
(stack dlink)
(push (@ 275))
(push nil)
(mov '1 a4)
(jmp outchan)
275
(eval ())
(push (@ 276))
(push (@ 277))
(mov '0 a4)
(jmp outbuf)
277
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
276
(eval ())
(push (@ 278))
(push '"     ")
(push (& 7))
(mov '2 a4)
(jmp print)
278
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 274) a3)
273
(push a3)
(push a2)
(push (@ 279))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
279
(eval ())
(push (@ 280))
(push (& 5))
(mov '1 a4)
(jmp outchan)
280
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
274
(eval ())
(adjstk '2)
268
(adjstk '1)
(bra 265)
266
(adjstk '1)
252
(btnil (& 17) 282)
(cnblt (cvalq #:crunch:verbose) '2 284)
(push (@ 285))
(mov '0 a4)
(jmp outchan)
285
(eval ())
(push a1)
(push (@ 286))
(mov '0 a4)
(jmp rmargin)
286
(eval ())
(push a1)
(push (@ 287))
(push dlink)
(push prot)
(stack dlink)
(push (@ 289))
(push nil)
(mov '1 a4)
(jmp outchan)
289
(eval ())
(push (@ 290))
(push (@ 291))
(mov '0 a4)
(jmp outbuf)
291
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
290
(eval ())
(push (@ 292))
(push '"- The following exports seem necessary for other modules :")
(mov '1 a4)
(jmp print)
292
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 288) a3)
287
(push a3)
(push a2)
(push (@ 293))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
293
(eval ())
(push (@ 294))
(push (& 5))
(mov '1 a4)
(jmp outchan)
294
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
288
(eval ())
(adjstk '2)
284
(push (& 17))
295
(bfcons (& 0) 296)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 298)
(push (@ 299))
(mov '0 a4)
(jmp outchan)
299
(eval ())
(push a1)
(push (@ 300))
(mov '0 a4)
(jmp rmargin)
300
(eval ())
(push a1)
(push (@ 301))
(push dlink)
(push prot)
(stack dlink)
(push (@ 303))
(push nil)
(mov '1 a4)
(jmp outchan)
303
(eval ())
(push (@ 304))
(push (@ 305))
(mov '0 a4)
(jmp outbuf)
305
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
304
(eval ())
(push (@ 306))
(push '"     ")
(push (& 7))
(mov '2 a4)
(jmp print)
306
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 302) a3)
301
(push a3)
(push a2)
(push (@ 307))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
307
(eval ())
(push (@ 308))
(push (& 5))
(mov '1 a4)
(jmp outchan)
308
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
302
(eval ())
(adjstk '2)
298
(adjstk '1)
(bra 295)
296
(adjstk '1)
282
(btnil (& 16) 310)
(cnblt (cvalq #:crunch:verbose) '2 312)
(push (@ 313))
(mov '0 a4)
(jmp outchan)
313
(eval ())
(push a1)
(push (@ 314))
(mov '0 a4)
(jmp rmargin)
314
(eval ())
(push a1)
(push (@ 315))
(push dlink)
(push prot)
(stack dlink)
(push (@ 317))
(push nil)
(mov '1 a4)
(jmp outchan)
317
(eval ())
(push (@ 318))
(push (@ 319))
(mov '0 a4)
(jmp outbuf)
319
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
318
(eval ())
(push (@ 320))
(push '"- The following exports are necessary because dynamic used :")
(mov '1 a4)
(jmp print)
320
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 316) a3)
315
(push a3)
(push a2)
(push (@ 321))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
321
(eval ())
(push (@ 322))
(push (& 5))
(mov '1 a4)
(jmp outchan)
322
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
316
(eval ())
(adjstk '2)
312
(push (& 16))
323
(bfcons (& 0) 324)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 326)
(push (@ 327))
(mov '0 a4)
(jmp outchan)
327
(eval ())
(push a1)
(push (@ 328))
(mov '0 a4)
(jmp rmargin)
328
(eval ())
(push a1)
(push (@ 329))
(push dlink)
(push prot)
(stack dlink)
(push (@ 331))
(push nil)
(mov '1 a4)
(jmp outchan)
331
(eval ())
(push (@ 332))
(push (@ 333))
(mov '0 a4)
(jmp outbuf)
333
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
332
(eval ())
(push (@ 334))
(push '"     ")
(push (& 7))
(mov '2 a4)
(jmp print)
334
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 330) a3)
329
(push a3)
(push a2)
(push (@ 335))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
335
(eval ())
(push (@ 336))
(push (& 5))
(mov '1 a4)
(jmp outchan)
336
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
330
(eval ())
(adjstk '2)
326
(adjstk '1)
(bra 323)
324
(adjstk '1)
310
(btnil (& 14) 338)
(btnil (cvalq #:crunch:keep-all-exports) 339)
(cnblt (cvalq #:crunch:verbose) '2 340)
(push (@ 343))
(mov '0 a4)
(jmp outchan)
343
(eval ())
(push a1)
(push (@ 344))
(mov '0 a4)
(jmp rmargin)
344
(eval ())
(push a1)
(push (@ 345))
(push dlink)
(push prot)
(stack dlink)
(push (@ 347))
(push nil)
(mov '1 a4)
(jmp outchan)
347
(eval ())
(push (@ 348))
(push (@ 349))
(mov '0 a4)
(jmp outbuf)
349
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
348
(eval ())
(push (@ 350))
(push '"- The following exports are not necessary but required by -all option :")
(mov '1 a4)
(jmp print)
350
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 346) a3)
345
(push a3)
(push a2)
(push (@ 351))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
351
(eval ())
(push (@ 352))
(push (& 5))
(mov '1 a4)
(jmp outchan)
352
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
346
(eval ())
(adjstk '2)
(bra 340)
339
(cnblt (cvalq #:crunch:verbose) '2 340)
(push (@ 355))
(mov '0 a4)
(jmp outchan)
355
(eval ())
(push a1)
(push (@ 356))
(mov '0 a4)
(jmp rmargin)
356
(eval ())
(push a1)
(push (@ 357))
(push dlink)
(push prot)
(stack dlink)
(push (@ 359))
(push nil)
(mov '1 a4)
(jmp outchan)
359
(eval ())
(push (@ 360))
(push (@ 361))
(mov '0 a4)
(jmp outbuf)
361
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
360
(eval ())
(push (@ 362))
(push '"- The following exports are not necessary :")
(mov '1 a4)
(jmp print)
362
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 358) a3)
357
(push a3)
(push a2)
(push (@ 363))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
363
(eval ())
(push (@ 364))
(push (& 5))
(mov '1 a4)
(jmp outchan)
364
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
358
(eval ())
(adjstk '2)
340
(push (& 14))
365
(bfcons (& 0) 366)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 368)
(push (@ 369))
(mov '0 a4)
(jmp outchan)
369
(eval ())
(push a1)
(push (@ 370))
(mov '0 a4)
(jmp rmargin)
370
(eval ())
(push a1)
(push (@ 371))
(push dlink)
(push prot)
(stack dlink)
(push (@ 373))
(push nil)
(mov '1 a4)
(jmp outchan)
373
(eval ())
(push (@ 374))
(push (@ 375))
(mov '0 a4)
(jmp outbuf)
375
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
374
(eval ())
(push (@ 376))
(push '"     ")
(push (& 7))
(mov '2 a4)
(jmp print)
376
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 372) a3)
371
(push a3)
(push a2)
(push (@ 377))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
377
(eval ())
(push (@ 378))
(push (& 5))
(mov '1 a4)
(jmp outchan)
378
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
372
(eval ())
(adjstk '2)
368
(adjstk '1)
(bra 365)
366
(adjstk '1)
338
(btnil (& 15) 379)
(cnblt (cvalq #:crunch:verbose) '2 382)
(push (@ 383))
(mov '0 a4)
(jmp outchan)
383
(eval ())
(push a1)
(push (@ 384))
(mov '0 a4)
(jmp rmargin)
384
(eval ())
(push a1)
(push (@ 385))
(push dlink)
(push prot)
(stack dlink)
(push (@ 387))
(push nil)
(mov '1 a4)
(jmp outchan)
387
(eval ())
(push (@ 388))
(push (@ 389))
(mov '0 a4)
(jmp outbuf)
389
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
388
(eval ())
(push (@ 390))
(push '"- The following exports are not defined : ")
(mov '1 a4)
(jmp print)
390
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 386) a3)
385
(push a3)
(push a2)
(push (@ 391))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
391
(eval ())
(push (@ 392))
(push (& 5))
(mov '1 a4)
(jmp outchan)
392
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
386
(eval ())
(adjstk '2)
382
(push (& 15))
393
(bfcons (& 0) 394)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 396)
(push (@ 397))
(mov '0 a4)
(jmp outchan)
397
(eval ())
(push a1)
(push (@ 398))
(mov '0 a4)
(jmp rmargin)
398
(eval ())
(push a1)
(push (@ 399))
(push dlink)
(push prot)
(stack dlink)
(push (@ 401))
(push nil)
(mov '1 a4)
(jmp outchan)
401
(eval ())
(push (@ 402))
(push (@ 403))
(mov '0 a4)
(jmp outbuf)
403
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
402
(eval ())
(push (@ 404))
(push '"     ")
(push (& 7))
(mov '2 a4)
(jmp print)
404
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 400) a3)
399
(push a3)
(push a2)
(push (@ 405))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
405
(eval ())
(push (@ 406))
(push (& 5))
(mov '1 a4)
(jmp outchan)
406
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
400
(eval ())
(adjstk '2)
396
(adjstk '1)
(bra 393)
394
(mov nil a1)
(adjstk '1)
(bra 245)
379
(mov nil a1)
245
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(adjstk '21)
(return)
))
(loader'((entry pretty-import subr3)
(push a3)
(push a2)
(push a1)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp rmargin)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(push nil)
(mov '1 a4)
(jmp outchan)
107
(eval ())
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push '"- Modules that are required for compilation :")
(mov '1 a4)
(jmp print)
110
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 111))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
111
(eval ())
(push (@ 112))
(push (& 5))
(mov '1 a4)
(jmp outchan)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '2)
102
(push (& 1))
113
(bfcons (& 0) 114)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 116)
(push (@ 117))
(mov '0 a4)
(jmp outchan)
117
(eval ())
(push a1)
(push (@ 118))
(push dlink)
(push prot)
(stack dlink)
(push (@ 120))
(push nil)
(mov '1 a4)
(jmp outchan)
120
(eval ())
(push (@ 121))
(push '"- ")
(mov (& 6) a2)
(mov (& 8) a1)
(call why-to-import)
(push a1)
(mov '2 a4)
(jmp prin)
121
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 119) a3)
118
(push a3)
(push a2)
(push (@ 122))
(push (& 4))
(mov '1 a4)
(jmp outchan)
122
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
119
(eval ())
(adjstk '1)
116
(adjstk '1)
(bra 113)
114
(adjstk '1)
(btnil (& 2) 123)
(cnblt (cvalq #:crunch:verbose) '2 126)
(push (@ 127))
(mov '0 a4)
(jmp outchan)
127
(eval ())
(push a1)
(push (@ 128))
(push dlink)
(push prot)
(stack dlink)
(push (@ 130))
(push nil)
(mov '1 a4)
(jmp outchan)
130
(eval ())
(push (@ 131))
(mov '0 a4)
(jmp terpri)
131
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 129) a3)
128
(push a3)
(push a2)
(push (@ 132))
(push (& 4))
(mov '1 a4)
(jmp outchan)
132
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
129
(eval ())
(adjstk '1)
126
(cnblt (cvalq #:crunch:verbose) '2 134)
(push (@ 135))
(mov '0 a4)
(jmp outchan)
135
(eval ())
(push a1)
(push (@ 136))
(mov '0 a4)
(jmp rmargin)
136
(eval ())
(push a1)
(push (@ 137))
(push dlink)
(push prot)
(stack dlink)
(push (@ 139))
(push nil)
(mov '1 a4)
(jmp outchan)
139
(eval ())
(push (@ 140))
(push (@ 141))
(mov '0 a4)
(jmp outbuf)
141
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
140
(eval ())
(push (@ 142))
(push '" these modules doesn't seem useful :")
(mov '1 a4)
(jmp print)
142
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 138) a3)
137
(push a3)
(push a2)
(push (@ 143))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
143
(eval ())
(push (@ 144))
(push (& 5))
(mov '1 a4)
(jmp outchan)
144
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
138
(eval ())
(adjstk '2)
134
(push (& 2))
145
(bfcons (& 0) 146)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 148)
(push (@ 149))
(mov '0 a4)
(jmp outchan)
149
(eval ())
(push a1)
(push (@ 150))
(push dlink)
(push prot)
(stack dlink)
(push (@ 152))
(push nil)
(mov '1 a4)
(jmp outchan)
152
(eval ())
(push (@ 153))
(push '" ")
(push (& 6))
(mov '2 a4)
(jmp prin)
153
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 151) a3)
150
(push a3)
(push a2)
(push (@ 154))
(push (& 4))
(mov '1 a4)
(jmp outchan)
154
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
151
(eval ())
(adjstk '1)
148
(adjstk '1)
(bra 145)
146
(adjstk '1)
(cnblt (cvalq #:crunch:verbose) '2 155)
(push (@ 157))
(mov '0 a4)
(jmp outchan)
157
(eval ())
(push a1)
(push (@ 158))
(push dlink)
(push prot)
(stack dlink)
(push (@ 160))
(push nil)
(mov '1 a4)
(jmp outchan)
160
(eval ())
(push (@ 161))
(mov '0 a4)
(jmp terpri)
161
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 159) a3)
158
(push a3)
(push a2)
(push (@ 162))
(push (& 4))
(mov '1 a4)
(jmp outchan)
162
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
159
(eval ())
(adjstk '4)
(return)
155
(mov nil a1)
(adjstk '3)
(return)
123
(mov nil a1)
(adjstk '3)
(return)
))
(put-abbrev 'whyi 'whyi)
(putprop 'whyi '((() ()) mod f) 'defstruct)
(loader'((fentry #:whyi:make subr0)
(entry #:whyi:make subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp vector)
101
(eval ())
(mov 'whyi (cdr a1))
(return)
))
(loader'((fentry #:whyi:mod nsubr)
(entry #:whyi:mod nsubr)
(push a4)
(push (@ 101))
(push '#:whyi:mod)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:whyi:mod #:whyi:mod)))
(if (featurep 'compiler) (progn (defmacro-open #:whyi:mod (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:whyi:f nsubr)
(entry #:whyi:f nsubr)
(push a4)
(push (@ 101))
(push '#:whyi:f)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:whyi:f #:whyi:f)))
(if (featurep 'compiler) (progn (defmacro-open #:whyi:f (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:whyi:prin subr1)
(entry #:whyi:prin subr1)
(hpxmov a1 '0 a4)
(hpxmov a1 '1 a3)
(push a3)
(push a4)
(bfnil a3 101)
(cnblt (cvalq #:crunch:verbose) '2 103)
(push (@ 105))
(mov '0 a4)
(jmp outchan)
105
(eval ())
(push a1)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(push nil)
(mov '1 a4)
(jmp outchan)
108
(eval ())
(push (@ 109))
(push '"You don't need to import """)
(push (& 6))
(push '"""")
(mov '3 a4)
(jmp prin)
109
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 110))
(push (& 4))
(mov '1 a4)
(jmp outchan)
110
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(adjstk '3)
(return)
103
(mov nil a1)
(adjstk '2)
(return)
101
(cnblt (cvalq #:crunch:verbose) '2 112)
(push (@ 113))
(mov '0 a4)
(jmp outchan)
113
(eval ())
(push a1)
(push (@ 114))
(push dlink)
(push prot)
(stack dlink)
(push (@ 116))
(push nil)
(mov '1 a4)
(jmp outchan)
116
(eval ())
(push (@ 117))
(push '"You have to import """)
(mov '1 a4)
(jmp prin)
117
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 115) a3)
114
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp outchan)
118
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
115
(eval ())
(adjstk '1)
112
(cnblt (cvalq #:crunch:verbose) '2 120)
(push (@ 121))
(mov '0 a4)
(jmp outchan)
121
(eval ())
(push a1)
(push (@ 122))
(push dlink)
(push prot)
(stack dlink)
(push (@ 124))
(push nil)
(mov '1 a4)
(jmp outchan)
124
(eval ())
(push (@ 125))
(push (& 5))
(mov '1 a4)
(jmp prin)
125
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 123) a3)
122
(push a3)
(push a2)
(push (@ 126))
(push (& 4))
(mov '1 a4)
(jmp outchan)
126
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
123
(eval ())
(adjstk '1)
120
(cnblt (cvalq #:crunch:verbose) '2 128)
(push (@ 129))
(mov '0 a4)
(jmp outchan)
129
(eval ())
(push a1)
(push (@ 130))
(push dlink)
(push prot)
(stack dlink)
(push (@ 132))
(push nil)
(mov '1 a4)
(jmp outchan)
132
(eval ())
(push (@ 133))
(push '""" because of :")
(mov '1 a4)
(jmp prin)
133
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 131) a3)
130
(push a3)
(push a2)
(push (@ 134))
(push (& 4))
(mov '1 a4)
(jmp outchan)
134
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
131
(eval ())
(adjstk '1)
128
(push (@ 135))
(mov '0 a4)
(jmp terpri)
135
(eval ())
(push (& 1))
136
(bfcons (& 0) 137)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov a4 a3)
(mov (& 0) a2)
(mov (& 2) a1)
(call #:diagnostic:prin-others)
(adjstk '1)
(bra 136)
137
(adjstk '1)
(cnblt (cvalq #:crunch:verbose) '2 139)
(push (@ 140))
(mov '0 a4)
(jmp outchan)
140
(eval ())
(push a1)
(push (@ 141))
(push dlink)
(push prot)
(stack dlink)
(push (@ 143))
(push nil)
(mov '1 a4)
(jmp outchan)
143
(eval ())
(push (@ 144))
(push '" .")
(mov '1 a4)
(jmp prin)
144
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 142) a3)
141
(push a3)
(push a2)
(push (@ 145))
(push (& 4))
(mov '1 a4)
(jmp outchan)
145
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
142
(eval ())
(adjstk '1)
139
(cnblt (cvalq #:crunch:verbose) '2 146)
(push (@ 148))
(mov '0 a4)
(jmp outchan)
148
(eval ())
(push a1)
(push (@ 149))
(push dlink)
(push prot)
(stack dlink)
(push (@ 151))
(push nil)
(mov '1 a4)
(jmp outchan)
151
(eval ())
(push (@ 152))
(mov '0 a4)
(jmp terpri)
152
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 150) a3)
149
(push a3)
(push a2)
(push (@ 153))
(push (& 4))
(mov '1 a4)
(jmp outchan)
153
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
150
(eval ())
(adjstk '3)
(return)
146
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:diagnostic:prin-others subr3)
(push a3)
(push a2)
(push a1)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(push '" ")
(push (& 7))
(mov '2 a4)
(jmp prin)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(mov (& 2) a2)
(mov (& 0) a1)
(jcall delete)
(mov a1 (& 2))
(btnil a1 109)
(cnblt (cvalq #:crunch:verbose) '2 112)
(push (@ 113))
(mov '0 a4)
(jmp outchan)
113
(eval ())
(push a1)
(push (@ 114))
(push dlink)
(push prot)
(stack dlink)
(push (@ 116))
(push nil)
(mov '1 a4)
(jmp outchan)
116
(eval ())
(push (@ 117))
(push '" (also exported by")
(mov '1 a4)
(jmp prin)
117
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 115) a3)
114
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp outchan)
118
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
115
(eval ())
(adjstk '1)
112
(push (& 2))
119
(bfcons (& 0) 120)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 122)
(push (@ 123))
(mov '0 a4)
(jmp outchan)
123
(eval ())
(push a1)
(push (@ 124))
(push dlink)
(push prot)
(stack dlink)
(push (@ 126))
(push nil)
(mov '1 a4)
(jmp outchan)
126
(eval ())
(push (@ 127))
(push '" ")
(push (& 6))
(mov '2 a4)
(jmp prin)
127
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 125) a3)
124
(push a3)
(push a2)
(push (@ 128))
(push (& 4))
(mov '1 a4)
(jmp outchan)
128
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
125
(eval ())
(adjstk '1)
122
(adjstk '1)
(bra 119)
120
(adjstk '1)
(cnblt (cvalq #:crunch:verbose) '2 129)
(push (@ 131))
(mov '0 a4)
(jmp outchan)
131
(eval ())
(push a1)
(push (@ 132))
(push dlink)
(push prot)
(stack dlink)
(push (@ 134))
(push nil)
(mov '1 a4)
(jmp outchan)
134
(eval ())
(push (@ 135))
(push '")")
(mov '1 a4)
(jmp prin)
135
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 133) a3)
132
(push a3)
(push a2)
(push (@ 136))
(push (& 4))
(mov '1 a4)
(jmp outchan)
136
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
133
(eval ())
(adjstk '4)
(return)
129
(mov nil a1)
(adjstk '3)
(return)
109
(mov nil a1)
(adjstk '3)
(return)
))
'(defun who-calls (f) (mapcan (lambda (x) (when (memq f (cdr x)) (ncons (car x)))) #:llmodule:allfnt))
(loader'((entry why-to-import subr2)
(push a2)
(push a1)
(mov 'whyi a1)
(jcall new)
(push a1)
(hpmovx (& 2) a1 '0)
(push a1)
(hpxmov (& 2) '5 a4)
(push a4)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (& 6) a1)
(jcall memq)
(btnil a1 103)
(mov (& 0) a1)
(jcall ncons)
103
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(jcall simplify-list)
(pop a4)
(hpmovx a1 a4 '1)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader '((end)))
