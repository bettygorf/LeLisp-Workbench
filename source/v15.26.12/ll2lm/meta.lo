(loader '((title |meta.lo|)))
(setq #:sys-package:colon 'rtproject)
(loader'((fentry #:rtproject:build-meta subr2)
(entry #:rtproject:build-meta subr2)
(push a2)
(push a1)
(hpxmov a2 '0 a1)
(jcall find-rt-group-project)
(btnil a1 102)
(mov (& 1) a3)
(mov '"No meta module about group-project" a2)
(mov '-meta a1)
(jcall error)
102
(mov (& 0) a1)
(bfnil a1 103)
(hpxmov (& 1) '27 a1)
(bfnil a1 103)
(hpxmov (& 1) '26 a4)
(btnil a4 104)
(push (@ 106))
(push nil)
(push nil)
(push nil)
(push nil)
(push '"lm")
(push nil)
(mov '6 a4)
(jmp make-pathname)
106
(eval ())
(hpxmov (& 1) '26 a2)
(jcall merge-pathnames)
(bra 105)
104
(mov nil a1)
105
(bfnil a1 103)
(hpxmov (& 1) '12 a1)
(jcall pathname)
(push a1)
(push (@ 107))
(push nil)
(push nil)
(push nil)
(push (@ 108))
(push '"m_")
(jcall pathname-name)
(push a1)
(mov '2 a4)
(jmp catenate)
108
(eval ())
(push a1)
(push '"lm")
(push nil)
(mov '6 a4)
(jmp make-pathname)
107
(eval ())
(mov (& 0) a2)
(jcall merge-pathnames)
(adjstk '1)
103
(jcall pathname)
(push nil)
(push nil)
(push nil)
(push a1)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 4) (cvalq #:system:print-with-abbrev-flag))
(push '1)
(push '(#:system:print-with-abbrev-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall pathname-name)
(mov a1 a2)
(mov (& 12) a1)
(call #:rtproject:build-meta-module)
(mov a1 (& 9))
(mov (& 7) a1)
(jcall #:crunch:save-file)
(cnblt (cvalq #:crunch:verbose) '1 110)
(push (@ 111))
(push (@ 112))
(push '".. ")
(push '"writing meta-module file")
(push '" : ")
(mov '3 a4)
(jmp catenate)
112
(eval ())
(push a1)
(push (& 9))
(mov '2 a4)
(jmp print)
111
(eval ())
110
(mov (& 7) a2)
(mov (& 9) a1)
(jcall #:diagnostic:printdefmodule)
(mov (& 9) a2)
(mov (& 12) a1)
(call #:rtproject:build-meta-ref)
(mov a1 (& 8))
(hpxmov (& 12) '26 a4)
(btnil a4 113)
(hpxmov (& 12) '26 a4)
(mov a4 (& 7))
(bra 114)
113
(hpxmov (& 12) '12 a1)
(jcall pathname-type)
(mov a1 a2)
(mov (& 7) a1)
(jcall set-pathname-type)
114
(mov (& 7) a1)
(jcall #:crunch:save-file)
(mov (& 7) a2)
(mov (& 8) a1)
(jcall #:llmodulereferences:write-to-file)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(adjstk '13)
(return)
))
(loader'((entry #:rtproject:build-meta-module subr2)
(push a2)
(push (@ 101))
(mov '0 a4)
(jmp current-mr)
101
(eval ())
(push a1)
(push (@ 102))
(push (@ 103))
(push (& 3))
(mov '1 a4)
(jmp concat)
103
(eval ())
(mov a1 a2)
(mov 'defmodule a1)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp list)
102
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp current-mr)
104
(eval ())
(hpxmov a1 '1 a4)
(push a4)
(push nil)
105
(bfcons (& 1) 106)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov nil a3)
(mov 'files a2)
(mov (& 1) a1)
(jcall setdefmodule)
(mov (& 0) a3)
(mov 'import a2)
(mov (& 1) a1)
(jcall setdefmodule)
(push (@ 107))
(push 'append)
(hpxmov (& 4) '2 a4)
(push a4)
(push nil)
108
(bfcons (& 1) 109)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 108)
109
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp apply)
107
(eval ())
(mov a1 a3)
(mov 'export a2)
(mov (& 1) a1)
(jcall setdefmodule)
(mov (& 0) a3)
(mov 'cpenv a2)
(mov (& 1) a1)
(jcall setdefmodule)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((entry #:rtproject:build-meta-ref subr2)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp standardmodulereferences)
101
(eval ())
(push a1)
(hpxmov (& 1) '0 a4)
(push a4)
(mov 'defmodule a2)
(mov (& 3) a1)
(jcall getdefmodule)
(push a1)
(hpmovx (& 1) (& 2) '0)
(push (@ 102))
(push a1)
(mov 'import a2)
(mov (& 6) a1)
(jcall getdefmodule)
(mov a1 a2)
(pop a1)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp list)
102
(eval ())
(hpmovx a1 (& 2) '1)
(push (@ 103))
(mov 'export a2)
(mov (& 5) a1)
(jcall getdefmodule)
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp list)
103
(eval ())
(hpmovx a1 (& 2) '2)
(push (@ 104))
(push (@ 105))
(push 'append)
(push (@ 106))
(mov '0 a4)
(jmp current-mr)
106
(eval ())
(hpxmov a1 '3 a4)
(push a4)
(push nil)
107
(bfcons (& 1) 108)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 107)
108
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp apply)
105
(eval ())
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp list)
104
(eval ())
(hpmovx a1 (& 2) '3)
(hpmovx nil (& 2) '4)
(mov (& 2) a1)
(adjstk '5)
(return)
))
(loader '((end)))
