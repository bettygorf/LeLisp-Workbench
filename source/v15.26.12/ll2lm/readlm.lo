(loader '((title |readlm.lo|)))
(setq #:sys-package:colon 'llmodule)
(loader'((fentry #:llmodule:readdefmodule subr1)
(entry #:llmodule:readdefmodule subr1)
(push a1)
(jcall probepathm)
(mov a1 a4)
(bfnil a4 101)
(mov (& 0) a4)
101
(push a4)
(push nil)
(bfnil a4 102)
(cnblt (cvalq #:crunch:verbose) '2 103)
(push (@ 106))
(mov '0 a4)
(jmp outchan)
106
(eval ())
(push a1)
(push (@ 107))
(mov '0 a4)
(jmp rmargin)
107
(eval ())
(push a1)
(push (@ 108))
(push dlink)
(push prot)
(stack dlink)
(push (@ 110))
(push nil)
(mov '1 a4)
(jmp outchan)
110
(eval ())
(push (@ 111))
(push (@ 112))
(mov '0 a4)
(jmp outbuf)
112
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
111
(eval ())
(push (@ 113))
(push '"Reading [1] ")
(push (& 9))
(push '" ABORTED")
(mov '3 a4)
(jmp print)
113
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 109) a3)
108
(push a3)
(push a2)
(push (@ 114))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
114
(eval ())
(push (@ 115))
(push (& 5))
(mov '1 a4)
(jmp outchan)
115
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
109
(eval ())
(adjstk '2)
(bra 103)
102
(cnblt (cvalq #:crunch:verbose) '2 117)
(push (@ 118))
(mov '0 a4)
(jmp outchan)
118
(eval ())
(push a1)
(push (@ 119))
(mov '0 a4)
(jmp rmargin)
119
(eval ())
(push a1)
(push (@ 120))
(push dlink)
(push prot)
(stack dlink)
(push (@ 122))
(push nil)
(mov '1 a4)
(jmp outchan)
122
(eval ())
(push (@ 123))
(push (@ 124))
(mov '0 a4)
(jmp outbuf)
124
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
123
(eval ())
(push (@ 125))
(push '"Reading [1] ")
(push (& 9))
(push '"...")
(mov '3 a4)
(jmp print)
125
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 121) a3)
120
(push a3)
(push a2)
(push (@ 126))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
126
(eval ())
(push (@ 127))
(push (& 5))
(mov '1 a4)
(jmp outchan)
127
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
121
(eval ())
(adjstk '2)
117
(mov (& 1) a1)
(jcall #:crunch:readdefmodule)
(mov a1 (& 0))
103
(mov (& 0) a1)
(adjstk '3)
(return)
))
(defvar #:system:load-when-necessary (if (boundp '#:system:load-when-necessary) #:system:load-when-necessary t))
(loader'((fentry #:crunch:loadmodule subr1)
(entry #:crunch:loadmodule subr1)
(push a1)
(btnil (cvalq #:system:load-when-necessary) 101)
(jcall namestring)
(jcall pathname-name)
(push a1)
(mov (cvalq #:module:compiled-list) a2)
(jcall memq)
(bfnil a1 105)
(mov (cvalq #:module:interpreted-list) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 103)
105
(mov (& 1) a1)
(adjstk '2)
(return)
103
(push (@ 106))
(push (& 2))
(mov '1 a4)
(jmp loadmodule)
106
(eval ())
(adjstk '2)
(return)
101
(push (@ 107))
(push a1)
(mov '1 a4)
(jmp loadmodule)
107
(eval ())
(adjstk '1)
(return)
))
(defvar #:crunch:last-file-read (if (boundp '#:crunch:last-file-read) #:crunch:last-file-read))
(loader'((fentry #:crunch:readdefmodule subr1)
(entry #:crunch:readdefmodule subr1)
(push a1)
(push (@ 101))
(push 'readdefmodule)
(jcall probepathm)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov a1 (cvalq #:crunch:last-file-read))
(mov (& 0) a1)
(adjstk '1)
(jmp readdefmodule)
))
(loader'((fentry #:crunch:openi subr1)
(entry #:crunch:openi subr1)
(push a1)
(call #:crunch:find-channel)
(btnil a1 102)
(push (@ 103))
(push a1)
(mov '1 a4)
(jmp close)
103
(eval ())
102
(mov (& 0) (cvalq #:crunch:last-file-read))
(mov (& 0) a1)
(adjstk '1)
(jmp openi)
))
(loader'((entry #:crunch:find-channel subr1)
(push a1)
(push '0)
(push (@ 101))
(mov '0 a4)
(jmp channel)
101
(eval ())
(push a1)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 4) a1)
(jcall namestring)
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(jcall eqstring)
(btnil a1 104)
(mov (& 3) a4)
(bra 105)
104
(mov (& 3) a1)
(jcall |1+|)
(mov a1 (& 3))
(mov nil a4)
105
(adjstk '1)
(mov a4 (& 0))
(bfnil a4 103)
(bra 102)
103
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((fentry #:crunch:last-file-read subr0)
(entry #:crunch:last-file-read subr0)
(mov (cvalq #:crunch:last-file-read) a1)
(return)
))
(loader '((end)))
