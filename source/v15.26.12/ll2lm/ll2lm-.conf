
;;; Configuration file for analyzer: ll2lm

(defvar :load-runtime (runtime))

;; suppress all autoload
(mapoblist (lambda(f) (when (get f 'autoload)(remprop f 'autoload))) )

;; no inibitmap
(setq #:system:inibitmap-after-restore-flag ())

;; add a path
(newr #:system:path (catenate #:system:directory "/ll2lm/"))

;; minimal environment for ANALYZER
(load-stm ()
          ; virbitmap(to simplify analyze of most appli.)
          t
          ; no editor
          ()
          ; env required
          '(virtty defstruct abbrev pretty format sets cpmac stringio
          ; to simplify analyze of most appli. !!
          ;  setf sort array callext date microceyx format hash
          )
          ; loader
          t
          ; no compiler
          ()
          )

(gc t)
crunch
(gc t)

;; no defextern at analyze-time
(unless (getdef '#:crunch:getglobal)
        (synonymq #:crunch:getglobal getglobal))
(defun getglobal(x) 1)
(defun defextern-cache l)

(add-feature (if (eq 0.0 0.0)
                 '31bitfloats
               '64bitfloats))

(defun #:crunch:restore:user-interrupt ()
  (printerror 'll2lm "break" ())
  (end 1))

(defun #:crunch:restore:syserror(f m b)
  (printerror f m b)
  (print)
  (print "** ll2lm : I quit on error : " m)
  (print)
  (end 0))

(defun #:crunch:restore-fn (msg)
   (when #:system:initty-after-restore-flag (initty))
   (let ((f (control-file-pathname 'll2lm)))
     (when (probefile f)
           (loadfile f t)))
   (let ((cmd (getenv "LL2LMARGS")))
     (if cmd
         (progn (newl #:sys-package:itsoft '#:crunch:restore)
                (eval (read-from-string (catenate "(sh-analyze " cmd ")")))
                (end ()))
       (print "; " msg)
       "interactive use")))

(progn (print ";; load time: " (- (runtime) :load-runtime) " secs.") ())

(save-std #:system:name "Welcome to Analyzer System"
          ()
          '#:crunch:restore-fn
)

