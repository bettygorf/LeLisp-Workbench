(loader '((title |codewalker.lo|)))
(setq #:sys-package:colon 'llmodule)
(loader'((fentry #:llmodule:agree-mod subr3)
(entry #:llmodule:agree-mod subr3)
(push a3)
(push a2)
(push (cvalq mod))
(mov a1 (cvalq mod))
(push '1)
(push '(mod))
(push (@ #:llmodule:agree-mod))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(call assert-code-walker)
(push (cvalq #:llmodule:defd-f))
(push (cvalq #:llmodule:used-f))
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:crunch:loaded-modules))
(mov (& 2) (cvalq #:crunch:loaded-modules))
(push (cvalq #:crunch:loaded-cpenv))
(mov (& 5) (cvalq #:crunch:loaded-cpenv))
(push (cvalq #:llmodule:used-f))
(mov (& 7) (cvalq #:llmodule:used-f))
(push (cvalq #:llmodule:defd-f))
(mov (& 9) (cvalq #:llmodule:defd-f))
(push '4)
(push '(#:crunch:loaded-modules #:crunch:loaded-cpenv #:llmodule:used-f #:llmodule:defd-f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push (cvalq #:module:compiled-list))
(push (cvalq #:module:interpreted-list))
(mov '2 a4)
(jmp union)
101
(eval ())
(mov a1 (cvalq #:crunch:loaded-modules))
(mov 'files a2)
(mov (cvalq #:crunch:current-defmod) a1)
(jcall getdefmodule)
(bfnil a1 102)
(mov (cvalq #:crunch:e-flag) a2)
(mov '136 a1)
(jcall memq)
(bfnil a1 104)
(mov (cvalq #:crunch:e-flag) a2)
(mov '136 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
104
(mov (cvalq mod) a3)
(mov '|36| a2)
(mov '"E.136" a1)
(jcall syserror)
102
(mov (& 24) a3)
(mov (& 23) a2)
(call #:llmodule:analyse-files)
(mov a1 a3)
(mov (cvalq #:crunch:current-defmod) a2)
(mov (cvalq mod) a1)
(jcall #:diagnostic:set-diagnostic-from-analyze)
(mov a1 (& 10))
(push (cvalq mod))
(hpxmov a1 '2 a2)
(push a2)
(push (@ 105))
(mov '0 a4)
(jmp standardmodulereferences)
105
(eval ())
(hpxmov (cvalq #:crunch:current-project) '12 a2)
(jcall #:llmodulereferences:read-from-file)
(hpxmov a1 '1 a3)
(pop a2)
(pop a1)
(call #:llmodule:circular-dependancies-p)
(push a1)
(btnil a1 107)
(mov (cvalq #:crunch:w-flag) a2)
(mov '121 a1)
(jcall memq)
(bfnil a1 109)
(mov (cvalq #:crunch:w-flag) a2)
(mov '121 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
109
(cnbgt (cvalq #:crunch:verbose) '0 112)
(mov (cvalq #:crunch:no-warning) a2)
(mov '121 a1)
(jcall memq)
(bfnil a1 107)
112
(mov (& 0) a3)
(mov '|21| a2)
(mov '"W.121" a1)
(jcall printerror)
107
(adjstk '1)
(mov (& 10) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llmodule:defd-f))
(mov (& 7) (cvalq #:llmodule:used-f))
(mov (& 8) (cvalq #:crunch:loaded-cpenv))
(mov (& 9) (cvalq #:crunch:loaded-modules))
(adjstk '16)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq mod))
(adjstk '9)
(return)
))
(loader'((entry #:llmodule:analyse-files subr3)
(push a2)
(push a1)
(mov '#:llmodule:analyze a1)
(jcall new)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push a1)
(push (cvalq #:llmodule:allupmod))
(mov (& 4) (cvalq #:llmodule:allupmod))
(push (cvalq #:llmodule:allext))
(mov (& 6) (cvalq #:llmodule:allext))
(push (cvalq #:llmodule:used-macros))
(mov (& 9) (cvalq #:llmodule:used-macros))
(push (cvalq #:crunch:modules-to-include))
(mov (& 11) (cvalq #:crunch:modules-to-include))
(push (cvalq #:llmodule:allextd))
(mov (& 15) (cvalq #:llmodule:allextd))
(push (cvalq #:llmodule:prog))
(mov (& 19) (cvalq #:llmodule:prog))
(push '6)
(push '(#:llmodule:allupmod #:llmodule:allext #:llmodule:used-macros #:crunch:modules-to-include #:llmodule:allextd #:llmodule:prog))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'crunch a1)
(jcall cons)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(cnblt (cvalq #:crunch:verbose) '1 102)
(push (@ 103))
(push (@ 104))
(push '".. ")
(mov 'readfile a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
104
(eval ())
(push a1)
(push (& 35))
(mov '2 a4)
(jmp print)
103
(eval ())
102
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:crunch:modules-to-import))
(mov (& 1) (cvalq #:crunch:modules-to-import))
(push (cvalq #:crunch:unknow-things))
(mov (& 3) (cvalq #:crunch:unknow-things))
(push (cvalq #:compiler:exported-env))
(mov (& 5) (cvalq #:compiler:exported-env))
(push (cvalq #:llmodule:exported-cpenv))
(mov (& 7) (cvalq #:llmodule:exported-cpenv))
(push (cvalq #:llmodule:definer))
(mov (& 9) (cvalq #:llmodule:definer))
(push (cvalq #:llmodule:exportable-definition))
(mov (& 11) (cvalq #:llmodule:exportable-definition))
(push (cvalq #:llmodule:synonym-definition))
(mov (& 13) (cvalq #:llmodule:synonym-definition))
(push '7)
(push '(#:crunch:modules-to-import #:crunch:unknow-things #:compiler:exported-env #:llmodule:exported-cpenv #:llmodule:definer #:llmodule:exportable-definition #:llmodule:synonym-definition))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 53) a1)
(jcall #:llmodule:get-all-def-in-files)
(mov a1 (cvalq #:llmodule:prog))
(btnil (cvalq #:llmodule:synonym-definition) 106)
(mov (cvalq #:llmodule:synonym-definition) (& 51))
106
(btnil (cvalq #:llmodule:exportable-definition) 108)
(mov (cvalq #:llmodule:exportable-definition) (& 50))
108
(btnil (cvalq #:llmodule:definer) 110)
(mov (cvalq #:llmodule:definer) (& 48))
110
(btnil (cvalq #:compiler:exported-env) 112)
(mov (cvalq #:compiler:exported-env) (& 47))
112
(btnil (cvalq #:crunch:modules-to-import) 114)
(mov (cvalq #:crunch:modules-to-import) (cvalq #:llmodule:allextd))
114
(btnil (cvalq #:crunch:unknow-things) 116)
(mov (cvalq #:crunch:unknow-things) (& 40))
116
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llmodule:synonym-definition))
(mov (& 7) (cvalq #:llmodule:exportable-definition))
(mov (& 8) (cvalq #:llmodule:definer))
(mov (& 9) (cvalq #:llmodule:exported-cpenv))
(mov (& 10) (cvalq #:compiler:exported-env))
(mov (& 11) (cvalq #:crunch:unknow-things))
(mov (& 12) (cvalq #:crunch:modules-to-import))
(adjstk '20)
(push (@ 117))
(push (& 20))
(push (& 33))
(mov '2 a4)
(jmp #:llmodule:analyze:allsynd)
117
(eval ())
(push (@ 118))
(push (& 20))
(push (& 32))
(mov '2 a4)
(jmp #:llmodule:analyze:allexpd)
118
(eval ())
(push (@ 119))
(push (& 20))
(mov (& 30) a1)
(jcall simplify-list)
(push a1)
(mov '2 a4)
(jmp #:llmodule:analyze:allother)
119
(eval ())
(push (@ 120))
(push (& 20))
(push (& 29))
(mov '2 a4)
(jmp #:llmodule:analyze:allcpenv)
120
(eval ())
(push (@ 121))
(push (& 20))
(push (cvalq #:crunch:modules-to-include))
(mov '2 a4)
(jmp #:llmodule:analyze:include)
121
(eval ())
(cnblt (cvalq #:crunch:verbose) '1 123)
(push (@ 124))
(push (@ 125))
(push '".. ")
(mov 'scanning a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
125
(eval ())
(push a1)
(push '"...")
(mov '2 a4)
(jmp print)
124
(eval ())
123
(push (cvalq #:llmodule:prog))
126
(bfcons (& 0) 127)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 129)
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:crunch:modules-to-import))
(mov (& 1) (cvalq #:crunch:modules-to-import))
(push (cvalq #:llmodule:dynamic))
(mov (& 3) (cvalq #:llmodule:dynamic))
(push (cvalq #:llmodule:extern-u))
(mov (& 5) (cvalq #:llmodule:extern-u))
(push (cvalq #:llmodule:closure))
(mov (& 7) (cvalq #:llmodule:closure))
(push '4)
(push '(#:crunch:modules-to-import #:llmodule:dynamic #:llmodule:extern-u #:llmodule:closure))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(cnblt (cvalq #:crunch:verbose) '1 131)
(push (@ 132))
(push (@ 133))
(push '".. ")
(mov 'scan-1 a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
133
(eval ())
(push a1)
(push (& 16))
(mov '2 a4)
(jmp print)
132
(eval ())
131
(mov (& 14) a1)
(jcall #:llmodule:parse)
(btnil (cvalq #:llmodule:closure) 135)
(mov (cvalq #:llmodule:closure) a1)
(jcall nreverse)
(mov (& 40) a2)
(jcall cons)
(mov a1 (& 40))
135
(btnil (cvalq #:llmodule:extern-u) 137)
(push (@ 138))
(push (cvalq #:llmodule:allext))
(push (cvalq #:llmodule:extern-u))
(mov '2 a4)
(jmp nconc)
138
(eval ())
(mov a1 (cvalq #:llmodule:allext))
137
(btnil (cvalq #:llmodule:dynamic) 140)
(push (@ 141))
(push (& 38))
(push (cvalq #:llmodule:dynamic))
(mov '2 a4)
(jmp nconc)
141
(eval ())
(mov a1 (& 37))
140
(btnil (cvalq #:crunch:modules-to-import) 143)
(push (@ 144))
(push (cvalq #:llmodule:allextd))
(push (cvalq #:crunch:modules-to-import))
(mov '2 a4)
(jmp nconc)
144
(eval ())
(mov a1 (cvalq #:llmodule:allextd))
143
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llmodule:closure))
(mov (& 7) (cvalq #:llmodule:extern-u))
(mov (& 8) (cvalq #:llmodule:dynamic))
(mov (& 9) (cvalq #:crunch:modules-to-import))
(adjstk '14)
129
(adjstk '1)
(bra 126)
127
(adjstk '1)
(push (& 24))
(push nil)
145
(bfcons (& 1) 146)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(mov (car a1) a1)
(jcall #:llmodule:unknow-abbrev-p)
(bfnil a1 147)
(mov (& 0) a1)
(mov (car a1) a1)
(jcall ncons)
(bra 148)
147
(mov nil a1)
148
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 145)
146
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(btnil (cvalq #:crunch:export-accessors) 149)
(mov a1 a4)
(bra 150)
149
(push (@ 151))
(push (& 31))
(push a1)
(push 'equal)
(mov '3 a4)
(jmp union)
151
(eval ())
(mov a1 a4)
150
(mov a4 (cvalq #:llmodule:defd-f))
(push (@ 152))
(push (cvalq #:llmodule:used-f))
(push (& 26))
(push nil)
153
(bfcons (& 1) 154)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall nreconc)
(mov a1 (& 0))
(bra 153)
154
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(call #:llmodule:simplify-list-but-exportable)
(push a1)
(push (& 24))
(push (cvalq #:llmodule:used-macros))
(mov (cvalq #:llmodule:allext) a3)
(push (cdr a3))
(mov '5 a4)
(bra #:llmodule:munion)
152
(eval ())
(mov a1 (cvalq #:llmodule:used-f))
(btnil (cvalq #:llmodule:allext) 156)
(mov (& 20) a2)
(mov 'errudf a1)
(jcall assq)
(btnil a1 157)
(push a1)
(push (@ 159))
(push (cvalq #:llmodule:allext))
(push (cdr a1))
(mov '2 a4)
(jmp nconc)
159
(eval ())
(pop a4)
(mov a1 (cdr a4))
(bra 156)
157
(mov (cvalq #:llmodule:allext) a2)
(mov 'errudf a1)
(jcall cons)
(mov (& 20) a2)
(jcall cons)
(mov a1 (& 20))
156
(push (@ 160))
(push (& 20))
(push (& 22))
(mov '2 a4)
(jmp #:llmodule:analyze:allunknow)
160
(eval ())
(push (@ 161))
(push (& 20))
(push (cvalq #:llmodule:used-f))
(mov '2 a4)
(jmp #:llmodule:analyze:used-f)
161
(eval ())
(push (@ 162))
(push (& 20))
(push (cvalq #:llmodule:allextd))
(mov '2 a4)
(jmp #:llmodule:analyze:allextd)
162
(eval ())
(push (@ 163))
(push (& 20))
(push (& 36))
(mov '2 a4)
(jmp #:llmodule:analyze:allexti)
163
(eval ())
(push (@ 164))
(push (& 20))
(push (cvalq #:llmodule:defd-f))
(mov '2 a4)
(jmp #:llmodule:analyze:defd-f)
164
(eval ())
(push (@ 165))
(push (& 20))
(push (& 26))
(mov '2 a4)
(jmp #:llmodule:analyze:allfnt)
165
(eval ())
(push (@ 166))
(push (& 20))
(mov (& 23) a1)
(jcall simplify-list)
(push a1)
(mov '2 a4)
(jmp #:llmodule:analyze:alldyn)
166
(eval ())
(push (cvalq #:llmodule:allupmod))
167
(bfcons (& 0) 168)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push a4)
(cabne (& 1) (cvalq mod) 169)
(mov (cvalq #:crunch:w-flag) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 172)
(mov (cvalq #:crunch:w-flag) a2)
(mov '115 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
172
(cnbgt (cvalq #:crunch:verbose) '0 175)
(mov (cvalq #:crunch:no-warning) a2)
(mov '115 a1)
(jcall memq)
(bfnil a1 170)
175
(mov (cvalq mod) a3)
(mov '|15| a2)
(mov '"W.115" a1)
(jcall printerror)
(bra 170)
169
(mov (cvalq #:crunch:all-modules) a2)
(mov (& 1) a1)
(jcall memq)
(bfnil a1 176)
(mov (cvalq #:crunch:w-flag) a2)
(mov '128 a1)
(jcall memq)
(bfnil a1 179)
(mov (cvalq #:crunch:w-flag) a2)
(mov '128 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
179
(cnbgt (cvalq #:crunch:verbose) '0 182)
(mov (cvalq #:crunch:no-warning) a2)
(mov '128 a1)
(jcall memq)
(bfnil a1 170)
182
(push (@ 183))
(push nil)
(mov '|28| a1)
(jcall get-message)
(push a1)
(push (cvalq mod))
(push (& 5))
(mov '4 a4)
(jmp format)
183
(eval ())
(mov (& 0) a3)
(mov a1 a2)
(mov '"W.128" a1)
(jcall printerror)
(bra 170)
176
(btnil (cvalq #:crunch:recursive-analyze) 184)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 188))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(cnblt (cvalq #:crunch:verbose) '1 190)
(push (@ 191))
(push (@ 192))
(push '".. ")
(push (@ 193))
(push nil)
(mov 'updateanalyze a1)
(jcall get-message)
(push a1)
(push (& 19))
(mov '3 a4)
(jmp format)
193
(eval ())
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
192
(eval ())
(push a1)
(push (& 14))
(mov '2 a4)
(jmp print)
191
(eval ())
190
(push '0)
(push 't)
(push (cvalq #:crunch:keep-old))
(push 't)
(push 't)
(push nil)
(push 't)
(push nil)
(push nil)
(push nil)
(push (cvalq #:crunch:e-flag))
(mov (& 1) (cvalq #:crunch:e-flag))
(push (cvalq #:crunch:w-flag))
(mov (& 3) (cvalq #:crunch:w-flag))
(push (cvalq #:crunch:current-defmod))
(mov (& 5) (cvalq #:crunch:current-defmod))
(push (cvalq #:crunch:noerror))
(mov (& 7) (cvalq #:crunch:noerror))
(push (cvalq #:crunch:done))
(mov (& 9) (cvalq #:crunch:done))
(push (cvalq #:crunch:update-base))
(mov (& 11) (cvalq #:crunch:update-base))
(push (cvalq #:crunch:update-desc))
(mov (& 13) (cvalq #:crunch:update-desc))
(push (cvalq #:crunch:keep-old))
(mov (& 15) (cvalq #:crunch:keep-old))
(push (cvalq #:crunch:keep-wrong))
(mov (& 17) (cvalq #:crunch:keep-wrong))
(push (cvalq #:crunch:verbose))
(mov (& 19) (cvalq #:crunch:verbose))
(push '10)
(push '(#:crunch:e-flag #:crunch:w-flag #:crunch:current-defmod #:crunch:noerror #:crunch:done #:crunch:update-base #:crunch:update-desc #:crunch:keep-old #:crunch:keep-wrong #:crunch:verbose))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 194))
(push 'analyze)
(push (& 41))
(hpxmov (cvalq #:crunch:current-project) '0 a4)
(push a4)
(mov (& 43) a1)
(jcall probepathm)
(push a1)
(push (& 43))
(mov '5 a4)
(jmp funcall)
194
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:verbose))
(mov (& 7) (cvalq #:crunch:keep-wrong))
(mov (& 8) (cvalq #:crunch:keep-old))
(mov (& 9) (cvalq #:crunch:update-desc))
(mov (& 10) (cvalq #:crunch:update-base))
(mov (& 11) (cvalq #:crunch:done))
(mov (& 12) (cvalq #:crunch:noerror))
(mov (& 13) (cvalq #:crunch:current-defmod))
(mov (& 14) (cvalq #:crunch:w-flag))
(mov (& 15) (cvalq #:crunch:e-flag))
(adjstk '26)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
188
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 170)
(mov (cvalq #:crunch:e-flag) a2)
(mov '120 a1)
(jcall memq)
(bfnil a1 196)
(mov (cvalq #:crunch:e-flag) a2)
(mov '120 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
196
(mov (& 1) a3)
(mov '|20| a2)
(mov '"E.120" a1)
(jcall syserror)
(bra 170)
184
(mov (cvalq #:crunch:w-flag) a2)
(mov '128 a1)
(jcall memq)
(bfnil a1 198)
(mov (cvalq #:crunch:w-flag) a2)
(mov '128 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
198
(cnbgt (cvalq #:crunch:verbose) '0 201)
(mov (cvalq #:crunch:no-warning) a2)
(mov '128 a1)
(jcall memq)
(bfnil a1 170)
201
(push (@ 202))
(push nil)
(mov '|28| a1)
(jcall get-message)
(push a1)
(push (cvalq mod))
(push (& 5))
(mov '4 a4)
(jmp format)
202
(eval ())
(mov (& 0) a3)
(mov a1 a2)
(mov '"W.128" a1)
(jcall printerror)
170
(adjstk '2)
(bra 167)
168
(adjstk '1)
(mov (& 19) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llmodule:prog))
(mov (& 7) (cvalq #:llmodule:allextd))
(mov (& 8) (cvalq #:crunch:modules-to-include))
(mov (& 9) (cvalq #:llmodule:used-macros))
(mov (& 10) (cvalq #:llmodule:allext))
(mov (& 11) (cvalq #:llmodule:allupmod))
(adjstk '28)
(return)
))
(defvar #:llmodule:mod)
(loader'((entry #:llmodule:circular-dependancies-p subr3)
(push a3)
(push a1)
(push (@ 101))
(push 'circular)
(push dlink)
(push tag)
(stack dlink)
(push a2)
102
(bfcons (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 7) a2)
(mov (& 0) a1)
(jcall assq)
(push a1)
(mov (& 7) a1)
(jcall ncons)
(mov (& 8) a3)
(mov a1 a2)
(pop a1)
(call #:llmodule:c-d-p)
(adjstk '1)
(bra 102)
103
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:llmodule:c-d-p subr3)
(push a3)
(push a2)
(push a1)
(mov (car a1) a1)
(jcall memq)
(btnil a1 101)
(mov (& 0) a1)
(push (car a1))
(mov (& 2) a1)
(jcall nreverse)
(mov a1 a2)
(pop a1)
(jcall memq)
(mov 'circular a2)
(jmp #:llcp:exit)
(adjstk '3)
(return)
101
(mov (& 0) a4)
(push (cdr a4))
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 4) a2)
(mov (& 0) a1)
(jcall assq)
(push a1)
(mov (& 3) a1)
(mov (& 4) a2)
(mov (car a1) a1)
(jcall cons)
(mov (& 5) a3)
(mov a1 a2)
(pop a1)
(call #:llmodule:c-d-p)
(adjstk '1)
(bra 103)
104
(mov nil a1)
(adjstk '4)
(return)
))
(defvar #:llmodule:codewalker (if (boundp '#:llmodule:codewalker) #:llmodule:codewalker))
(loader'((entry assert-code-walker subr0)
(bfnil (cvalq #:llmodule:codewalker) 101)
(mov '6 (cvalq #:llmodule:codewalker))
(mov '6 a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry crunch-function-is-used subr1)
(entry crunch-function-is-used subr1)
(push a1)
(mov (cvalq #:llmodule:used-f) a2)
(jcall memq)
(bfnil a1 101)
(mov (cvalq #:llmodule:used-f) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:used-f))
(cnblt (cvalq #:crunch:verbose) '2 103)
(push (@ 105))
(mov '0 a4)
(jmp outchan)
105
(eval ())
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp rmargin)
106
(eval ())
(push a1)
(push (@ 107))
(push dlink)
(push prot)
(stack dlink)
(push (@ 109))
(push nil)
(mov '1 a4)
(jmp outchan)
109
(eval ())
(push (@ 110))
(push (@ 111))
(mov '0 a4)
(jmp outbuf)
111
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
110
(eval ())
(push (@ 112))
(push '"Explicit declaration for use of : ")
(push (& 7))
(mov '2 a4)
(jmp print)
112
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 108) a3)
107
(push a3)
(push a2)
(push (@ 113))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
113
(eval ())
(push (@ 114))
(push (& 5))
(mov '1 a4)
(jmp outchan)
114
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
108
(eval ())
(adjstk '3)
(return)
103
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:llmodule:munion nsubr)
(diff '1 a4)
(jcall #:llcp:nlist)
(push (& 0))
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 103))
(push (& 1))
(push (& 4))
(mov '2 a4)
(jmp union)
103
(eval ())
(mov a1 (& 2))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:llmodule:simplify-list-but-exportable subr1)
(push a1)
(push nil)
(push nil)
101
(btnil (& 2) 102)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(mov (car a4) (& 0))
(bfnil (cvalq #:crunch:export-accessors) 105)
(mov '#:llmodule:exportable-definition a2)
(mov (& 0) a1)
(jcall get)
(bfnil a1 104)
105
(mov (& 1) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 1))
104
(mov (& 2) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (& 2))
(bra 101)
102
(mov (& 1) a1)
(adjstk '3)
(jmp nreverse)
))
(loader '((end)))
