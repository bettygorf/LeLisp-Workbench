(loader '((title |ref.lo|)))
(put-abbrev 'llmodulereferences 'llmodulereferences)
(putprop 'llmodulereferences '((() () () () ()) projectname modulesimport modulesexport modulesotherdef modulesinternal) 'defstruct)
(loader'((fentry #:llmodulereferences:make subr0)
(entry #:llmodulereferences:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '5 a4)
(jmp vector)
101
(eval ())
(mov 'llmodulereferences (cdr a1))
(return)
))
(loader'((fentry #:llmodulereferences:projectname nsubr)
(entry #:llmodulereferences:projectname nsubr)
(push a4)
(push (@ 101))
(push '#:llmodulereferences:projectname)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:llmodulereferences:projectname #:llmodulereferences:projectname)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodulereferences:projectname (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:llmodulereferences:modulesimport nsubr)
(entry #:llmodulereferences:modulesimport nsubr)
(push a4)
(push (@ 101))
(push '#:llmodulereferences:modulesimport)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:llmodulereferences:modulesimport #:llmodulereferences:modulesimport)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodulereferences:modulesimport (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:llmodulereferences:modulesexport nsubr)
(entry #:llmodulereferences:modulesexport nsubr)
(push a4)
(push (@ 101))
(push '#:llmodulereferences:modulesexport)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:llmodulereferences:modulesexport #:llmodulereferences:modulesexport)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodulereferences:modulesexport (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:llmodulereferences:modulesotherdef nsubr)
(entry #:llmodulereferences:modulesotherdef nsubr)
(push a4)
(push (@ 101))
(push '#:llmodulereferences:modulesotherdef)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:llmodulereferences:modulesotherdef #:llmodulereferences:modulesotherdef)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodulereferences:modulesotherdef (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:llmodulereferences:modulesinternal nsubr)
(entry #:llmodulereferences:modulesinternal nsubr)
(push a4)
(push (@ 101))
(push '#:llmodulereferences:modulesinternal)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:llmodulereferences:modulesinternal #:llmodulereferences:modulesinternal)))
(if (featurep 'compiler) (progn (defmacro-open #:llmodulereferences:modulesinternal (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(setq #:sys-package:colon 'llmodulereferences)
(loader'((fentry current-mr nsubr)
(entry current-mr nsubr)
(jcall #:llcp:nlist)
(btnil a1 101)
(mov (car a1) (cvalq #:crunch:current-mr))
(mov (car a1) a1)
(return)
101
(mov (cvalq #:crunch:current-mr) a1)
(return)
))
(loader'((fentry standardmodulereferences nsubr)
(entry standardmodulereferences nsubr)
(jcall #:llcp:nlist)
(push a1)
(jcall #:llmodulereferences:make)
(mov (& 0) a4)
(hpmovx (car a4) a1 '0)
(adjstk '1)
(return)
))
(loader'((fentry #:llmodulereferences:merge-modules-references subr2)
(entry #:llmodulereferences:merge-modules-references subr2)
(push a2)
(push a1)
(hpxmov a1 '1 a4)
(push a4)
(hpxmov a1 '2 a3)
(hpxmov a1 '3 a4)
(push a4)
(hpxmov a1 '4 a4)
(push a4)
(hpxmov a2 '1 a4)
(push a4)
(hpxmov a2 '2 a4)
(push a4)
(hpxmov a2 '3 a4)
(push a4)
(hpxmov a2 '4 a4)
(push a4)
(push a3)
(push (& 4))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall assoc)
(btnil a1 104)
(hpxmov (& 10) '0 a4)
(hpxmov (& 11) '0 a3)
(cabeq a4 a3 104)
(hpxmov (& 10) '0 a4)
(btnil a4 104)
(hpxmov (& 11) '0 a4)
(btnil a4 104)
(mov (cvalq #:crunch:w-flag) a2)
(mov '110 a1)
(jcall memq)
(bfnil a1 106)
(mov (cvalq #:crunch:w-flag) a2)
(mov '110 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
106
(cnbgt (cvalq #:crunch:verbose) '0 109)
(mov (cvalq #:crunch:no-warning) a2)
(mov '110 a1)
(jcall memq)
(bfnil a1 104)
109
(push (@ 110))
(push nil)
(mov '|10| a1)
(jcall get-message)
(push a1)
(hpxmov (& 13) '0 a4)
(push a4)
(hpxmov (& 15) '0 a4)
(push a4)
(mov '4 a4)
(jmp format)
110
(eval ())
(mov (& 0) a3)
(mov (car a3) a3)
(mov a1 a2)
(mov '"W.110" a1)
(jcall printerror)
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(push (@ 111))
(push (& 8))
(push (& 6))
(bra 112)
(fentry #:llmodulereferences:merge-modules-references:g105 subr2)
(entry #:llmodulereferences:merge-modules-references:g105 subr2)
(mov (car a2) a2)
(mov (car a1) a1)
(jmp eq)
112
(push '#:llmodulereferences:merge-modules-references:g105)
(mov '3 a4)
(jmp nunion)
111
(eval ())
(hpmovx a1 (& 8) '1)
(push (@ 113))
(push (& 1))
(push (& 5))
(bra 114)
(fentry #:llmodulereferences:merge-modules-references:g106 subr2)
(entry #:llmodulereferences:merge-modules-references:g106 subr2)
(mov (car a2) a2)
(mov (car a1) a1)
(jmp eq)
114
(push '#:llmodulereferences:merge-modules-references:g106)
(mov '3 a4)
(jmp nunion)
113
(eval ())
(hpmovx a1 (& 8) '2)
(push (@ 115))
(push (& 7))
(push (& 4))
(bra 116)
(fentry #:llmodulereferences:merge-modules-references:g107 subr2)
(entry #:llmodulereferences:merge-modules-references:g107 subr2)
(mov (car a2) a2)
(mov (car a1) a1)
(jmp eq)
116
(push '#:llmodulereferences:merge-modules-references:g107)
(mov '3 a4)
(jmp nunion)
115
(eval ())
(hpmovx a1 (& 8) '3)
(push (@ 117))
(push (& 6))
(push (& 3))
(bra 118)
(fentry #:llmodulereferences:merge-modules-references:g108 subr2)
(entry #:llmodulereferences:merge-modules-references:g108 subr2)
(mov (car a2) a2)
(mov (car a1) a1)
(jmp eq)
118
(push '#:llmodulereferences:merge-modules-references:g108)
(mov '3 a4)
(jmp nunion)
117
(eval ())
(hpmovx a1 (& 8) '4)
(push (@ 119))
(push (& 9))
(mov '1 a4)
(jmp current-mr)
119
(eval ())
(adjstk '10)
(return)
))
(loader'((fentry #:llmodulereferences:read-from-file subr2)
(entry #:llmodulereferences:read-from-file subr2)
(push a1)
(mov a2 a1)
(call #:llmodulereferences:readpair)
(push a1)
101
(btnil (& 0) 102)
(push (@ 103))
(push (@ 104))
(push 'llmodulereferences)
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov '2 a4)
(jmp getfn)
104
(eval ())
(push a1)
(push (& 3))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov '3 a4)
(jmp funcall)
103
(eval ())
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:llmodulereferences:write-to-file subr2)
(entry #:llmodulereferences:write-to-file subr2)
(push a2)
(push a1)
(cnblt (cvalq #:crunch:verbose) '1 102)
(push (@ 103))
(push (@ 104))
(push '".. ")
(mov 'updateref a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
104
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp print)
103
(eval ())
102
(mov (& 1) a1)
(jcall openo)
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(mov '0 a4)
(jmp outchan)
107
(eval ())
(push a1)
(push (@ 108))
(mov '0 a4)
(jmp lmargin)
108
(eval ())
(push a1)
(push (@ 109))
(mov '0 a4)
(jmp printlength)
109
(eval ())
(push a1)
(push (@ 110))
(mov '0 a4)
(jmp printline)
110
(eval ())
(push a1)
(push (@ 111))
(mov '0 a4)
(jmp printlevel)
111
(eval ())
(push a1)
(push (@ 112))
(push dlink)
(push prot)
(stack dlink)
(push (@ 114))
(push (& 12))
(mov '1 a4)
(jmp outchan)
114
(eval ())
(push (@ 115))
(push '0)
(mov '1 a4)
(jmp lmargin)
115
(eval ())
(push (@ 116))
(push '0)
(mov '1 a4)
(jmp printlength)
116
(eval ())
(push (@ 117))
(push '0)
(mov '1 a4)
(jmp printline)
117
(eval ())
(push (@ 118))
(push '0)
(mov '1 a4)
(jmp printlevel)
118
(eval ())
(push (@ 119))
(mov '0 a4)
(jmp print)
119
(eval ())
(mov (& 12) a1)
(jcall pprint)
(push (@ 120))
(mov '0 a4)
(jmp prinflush)
120
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 113) a3)
112
(push a3)
(push a2)
(push (@ 121))
(push (& 4))
(mov '1 a4)
(jmp printlevel)
121
(eval ())
(push (@ 122))
(push (& 5))
(mov '1 a4)
(jmp printline)
122
(eval ())
(push (@ 123))
(push (& 6))
(mov '1 a4)
(jmp printlength)
123
(eval ())
(push (@ 124))
(push (& 7))
(mov '1 a4)
(jmp lmargin)
124
(eval ())
(push (@ 125))
(push (& 8))
(mov '1 a4)
(jmp outchan)
125
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
113
(eval ())
(adjstk '5)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 126))
(push (& 4))
(mov '1 a4)
(jmp close)
126
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry #:llmodulereferences:pretty subr1)
(entry #:llmodulereferences:pretty subr1)
(push a1)
(push nil)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 1) (cvalq #:system:print-with-abbrev-flag))
(push '1)
(push '(#:system:print-with-abbrev-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'defstruct a2)
(mov 'llmodulereferences a1)
(jcall get)
(push (cdr a1))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 103))
(push (& 1))
(mov '1 a4)
(jmp print)
103
(eval ())
(push (@ 104))
(push (@ 105))
(push 'llmodulereferences)
(push (& 3))
(mov '2 a4)
(jmp getfn)
105
(eval ())
(push a1)
(push (& 12))
(mov '2 a4)
(jmp funcall)
104
(eval ())
(jcall pprint)
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(adjstk '9)
(return)
))
(loader'((entry #:llmodulereferences:readpair subr1)
(push a1)
(push nil)
(cnblt (cvalq #:crunch:verbose) '1 102)
(push (@ 103))
(push (@ 104))
(push '".. ")
(mov 'readfile a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
104
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp print)
103
(eval ())
102
(btnil (& 1) 107)
(mov (& 1) a1)
(jcall probefile)
(bfnil a1 105)
107
(mov (& 1) a3)
(mov 'readfilefailed a2)
(mov 'read a1)
(jcall printerror)
(bra 106)
105
(push (@ 108))
(mov '0 a4)
(jmp inchan)
108
(eval ())
(push a1)
(push (@ 109))
(push dlink)
(push prot)
(stack dlink)
(push (@ 111))
(mov (& 6) a1)
(jcall #:crunch:openi)
(push a1)
(mov '1 a4)
(jmp inchan)
111
(eval ())
(push (@ 112))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
113
(jcall read)
(push (@ 115))
(push (& 9))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
115
(eval ())
(mov a1 (& 8))
(bra 113)
114
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
112
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 110) a3)
109
(push a3)
(push a2)
(push (@ 116))
(push (& 4))
(mov '1 a4)
(jmp inchan)
116
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
110
(eval ())
(adjstk '1)
106
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:llmodulereferences:member-in-cdr subr2)
(entry #:llmodulereferences:member-in-cdr subr2)
(push a2)
(push nil)
(push (@ 101))
(push 'found)
(push dlink)
(push tag)
(stack dlink)
(push a1)
102
(bfcons (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (& 7) a1)
(jcall memq)
(btnil a1 105)
(mov (& 0) (& 6))
(mov nil a1)
(mov 'found a2)
(jmp #:llcp:exit)
105
(adjstk '1)
(bra 102)
103
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:llmodulereferences:update-base subr3)
(entry #:llmodulereferences:update-base subr3)
(push a3)
(push a2)
(push a1)
(mov a2 a1)
(jcall probefile)
(btnil a1 101)
(push (@ 103))
(mov '0 a4)
(jmp standardmodulereferences)
103
(eval ())
(mov (& 1) a2)
(jcall #:llmodulereferences:read-from-file)
(mov a1 a4)
(bra 102)
101
(push (@ 104))
(mov '0 a4)
(jmp standardmodulereferences)
104
(eval ())
(mov a1 a4)
102
(hpxmov (& 2) '0 a3)
(push nil)
(push a3)
(push a4)
(hpmovx (& 3) a4 '0)
(hpxmov a4 '1 a2)
(push a2)
(btnil (cvalq #:crunch:keep-wrong) 105)
(push (@ 107))
(hpxmov (& 7) '3 a1)
(push a1)
(hpxmov (& 8) '2 a1)
(push a1)
(mov '2 a4)
(jmp union)
107
(eval ())
(bra 106)
105
(hpxmov (& 6) '2 a1)
106
(push nil)
(push a1)
(push (@ 111))
(push a1)
(mov (& 4) a2)
(mov (& 6) a1)
(jcall assq)
(mov a1 (& 3))
(push (cdr a1))
(mov '2 a4)
(jmp set-equal)
111
(eval ())
(btnil a1 110)
(bfnil (& 1) 109)
110
(mov 't (& 5))
(btnil (& 1) 112)
(mov (& 1) a4)
(mov (& 0) (cdr a4))
(bra 109)
112
(btnil (& 0) 114)
(mov (& 0) a2)
(mov (& 4) a1)
(jcall cons)
(mov a1 a2)
(mov (& 2) a1)
(jcall nconc1)
(hpmovx a1 (& 3) '1)
(bra 109)
114
(mov (& 4) a1)
(jcall ncons)
(mov a1 a2)
(mov (& 2) a1)
(jcall nconc1)
(hpmovx a1 (& 3) '1)
109
(adjstk '3)
(hpxmov (& 0) '2 a4)
(hpxmov (& 5) '7 a3)
(push nil)
(push a3)
(push a4)
(push (@ 119))
(push a3)
(mov a4 a2)
(mov (& 6) a1)
(jcall assq)
(mov a1 (& 4))
(push (cdr a1))
(push 'equal)
(mov '3 a4)
(jmp set-equal)
119
(eval ())
(btnil a1 118)
(bfnil (& 2) 117)
118
(btnil (& 2) 120)
(mov 't (& 5))
(mov (& 2) a4)
(mov (& 1) (cdr a4))
(bra 117)
120
(btnil (& 1) 117)
(mov 't (& 5))
(mov (& 1) a2)
(mov (& 4) a1)
(jcall cons)
(mov a1 a2)
(mov (& 0) a1)
(jcall nconc1)
(hpmovx a1 (& 3) '2)
117
(adjstk '3)
(hpxmov (& 0) '3 a4)
(hpxmov (& 5) '14 a3)
(push nil)
(push a3)
(push a4)
(push (@ 127))
(push a3)
(mov a4 a2)
(mov (& 6) a1)
(jcall assq)
(mov a1 (& 4))
(push (cdr a1))
(mov '2 a4)
(jmp set-equal)
127
(eval ())
(btnil a1 126)
(bfnil (& 2) 125)
126
(btnil (& 2) 128)
(mov 't (& 5))
(mov (& 2) a4)
(mov (& 1) (cdr a4))
(bra 125)
128
(btnil (& 1) 125)
(mov 't (& 5))
(mov (& 1) a2)
(mov (& 4) a1)
(jcall cons)
(mov a1 a2)
(mov (& 0) a1)
(jcall nconc1)
(hpmovx a1 (& 3) '3)
125
(adjstk '3)
(bfnil (cvalq #:crunch:keep-all-exports) 133)
(hpxmov (& 0) '4 a4)
(hpxmov (& 5) '12 a3)
(push nil)
(push a3)
(push a4)
(push (@ 137))
(push a3)
(mov a4 a2)
(mov (& 6) a1)
(jcall assq)
(mov a1 (& 4))
(push (cdr a1))
(mov '2 a4)
(jmp set-equal)
137
(eval ())
(btnil a1 136)
(bfnil (& 2) 135)
136
(btnil (& 2) 138)
(mov 't (& 5))
(mov (& 2) a4)
(mov (& 1) (cdr a4))
(bra 135)
138
(btnil (& 1) 135)
(mov 't (& 5))
(mov (& 1) a2)
(mov (& 4) a1)
(jcall cons)
(mov a1 a2)
(mov (& 0) a1)
(jcall nconc1)
(hpmovx a1 (& 3) '4)
135
(adjstk '3)
133
(bfnil (& 2) 142)
(cnblt (cvalq #:crunch:verbose) '1 143)
(push (@ 146))
(push (@ 147))
(push '".. ")
(mov 'noneedwrite a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
147
(eval ())
(push a1)
(push (& 6))
(mov '2 a4)
(jmp print)
146
(eval ())
(bra 143)
142
(bfnil (cvalq #:crunch:keep-old) 143)
(mov (& 4) a1)
(jcall #:crunch:save-file)
(mov (& 4) a2)
(mov (& 0) a1)
(jcall #:llmodulereferences:write-to-file)
143
(mov (& 0) a1)
(adjstk '6)
(return)
))
(loader'((fentry func-from subr1)
(entry func-from subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-mr)
101
(eval ())
(hpxmov a1 '2 a2)
(pop a1)
(bra #:llmodulereferences:all-memq-in-cdr)
))
(loader'((fentry struct-from subr1)
(entry struct-from subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-mr)
101
(eval ())
(hpxmov a1 '2 a2)
(pop a1)
(bra #:llmodulereferences:all-member-in-cdr)
))
(loader'((fentry intern-from subr1)
(entry intern-from subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-mr)
101
(eval ())
(hpxmov a1 '4 a2)
(pop a1)
(bra #:llmodulereferences:all-memq-in-cdr)
))
(loader'((fentry other-from subr1)
(entry other-from subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-mr)
101
(eval ())
(hpxmov a1 '3 a2)
(pop a1)
(bra #:llmodulereferences:all-memq-in-cdr)
))
(loader'((fentry abbrev-from subr1)
(entry abbrev-from subr1)
(jmp other-from)
))
(loader'((entry #:llmodulereferences:all-memq-in-cdr subr2)
(push a1)
(push a2)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (& 3) a1)
(jcall memq)
(btnil a1 103)
(mov (& 0) a1)
(mov (car a1) a1)
(jcall ncons)
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((entry #:llmodulereferences:all-member-in-cdr subr2)
(push a1)
(push a2)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (& 3) a1)
(jcall member)
(btnil a1 103)
(mov (& 0) a1)
(mov (car a1) a1)
(jcall ncons)
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader '((end)))
