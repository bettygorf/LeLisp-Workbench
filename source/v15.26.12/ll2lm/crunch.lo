(loader '((title |crunch.lo|)))
(control-file-pathname 'll2lm #:pathname:#[ () () () "ll2lm" "ini" () ])
(setq #:sys-package:colon 'llmodule)
(defvar #:llmodule:default-ll-dir (if (or #:system:unixp #:system:dosp) #:pathname:#[ () () ("nfs" "work" "lelisp") () () () ] #:pathname:#[ () () () "lelisp$disk:[000000]" () () ]))
(defvar #:llmodule:default-aida-dir (if (or #:system:unixp #:system:dosp) #:pathname:#[ () () ("nfs" "work" "aida") () () () ] #:pathname:#[ () () () "aida$disk:[000000]" () () ]))
(loader'((fentry all-ll-dirs nsubr)
(entry all-ll-dirs nsubr)
(jcall #:llcp:nlist)
(btnil a1 101)
(mov (car a1) a1)
(bra 102)
101
(mov (cvalq #:llmodule:default-ll-dir) a1)
102
(jcall pathname)
(push a1)
(push (@ 103))
(push '"")
(push a1)
(push (@ 104))
(push '"llmod/")
(jcall system)
(jcall string)
(push a1)
(push '"/")
(mov '3 a4)
(jmp catenate)
104
(eval ())
(jcall #:unix:pathname)
(mov a1 a2)
(pop a1)
(jcall combine-pathnames)
(jcall namestring)
(push a1)
(mov '#:pathname:#[ () () (#:pathname:current "llmod") () () () ] a2)
(mov (& 3) a1)
(jcall combine-pathnames)
(jcall namestring)
(push a1)
(mov '#:pathname:#[ () () (#:pathname:current "llobj") () () () ] a2)
(mov (& 4) a1)
(jcall combine-pathnames)
(jcall namestring)
(push a1)
(mov '#:pathname:#[ () () (#:pathname:current "llib") () () () ] a2)
(mov (& 5) a1)
(jcall combine-pathnames)
(jcall namestring)
(push a1)
(mov '#:pathname:#[ () () (#:pathname:current "llub") () () () ] a2)
(mov (& 6) a1)
(jcall combine-pathnames)
(jcall namestring)
(push a1)
(mov '6 a4)
(jmp list)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:llmodule:lisp-dir subr0)
(entry #:llmodule:lisp-dir subr0)
(bfnil (cvalq #:system:unixp) 103)
(btnil (cvalq #:system:dosp) 101)
103
(push (@ 104))
(mov (cvalq crunch-dir) a1)
(jcall namestring)
(push a1)
(push '"lelisp/")
(mov '2 a4)
(jmp catenate)
104
(eval ())
(return)
101
(mov '"llruntime$disk:[modana.lelisp]" a1)
(jmp pathname)
))
(loader'((fentry analyze nsubr)
(entry analyze nsubr)
(cnbge a4 '2 101)
(mov 'analyze a1)
(mov '2 a2)
(jmp #:llcp:errwna)
101
(diff '2 a4)
(jcall #:llcp:nlist)
(push a1)
(mov (& 1) a1)
(jcall find-rt-project)
(mov (& 0) a4)
(push (car a4))
(mov (cdr a4) a3)
(mov (cdr a4) a2)
(mov (cdr a2) a2)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov (& 2) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push nil)
(push nil)
(push (car a3))
(push (car a2))
(push (car a4))
(push nil)
(push nil)
(push (cvalq #:crunch:current-project))
(mov a1 (cvalq #:crunch:current-project))
(push (cvalq #:crunch:e-flag))
(mov (& 2) (cvalq #:crunch:e-flag))
(push (cvalq #:crunch:w-flag))
(mov (& 4) (cvalq #:crunch:w-flag))
(push (cvalq #:crunch:includes))
(mov (& 6) (cvalq #:crunch:includes))
(push (cvalq #:crunch:current-diagnostic))
(mov (& 10) (cvalq #:crunch:current-diagnostic))
(push (cvalq #:crunch:current-defmod))
(mov (& 12) (cvalq #:crunch:current-defmod))
(push (cvalq #:crunch:imports))
(mov (& 14) (cvalq #:crunch:imports))
(push '7)
(push '(#:crunch:current-project #:crunch:e-flag #:crunch:w-flag #:crunch:includes #:crunch:current-diagnostic #:crunch:current-defmod #:crunch:imports))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (& 17) 103)
(btcons (& 17) 103)
(btnil (cvalq #:crunch:imports) 103)
(btcons (cvalq #:crunch:imports) 103)
(mov '"(analyze <module> <project> [output (exported-fnt...)(files...)(imported-fnt...)(included-fnt...)])" a3)
(mov '"usage" a2)
(mov 'analyze a1)
(jcall error)
103
(btnil (cvalq #:crunch:done) 105)
(push (@ 106))
(mov '0 a4)
(jmp terpri)
106
(eval ())
(mov (cvalq #:crunch:w-flag) a2)
(mov '100 a1)
(jcall memq)
(bfnil a1 108)
(mov (cvalq #:crunch:w-flag) a2)
(mov '100 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
108
(cnbgt (cvalq #:crunch:verbose) '0 111)
(mov (cvalq #:crunch:no-warning) a2)
(mov '100 a1)
(jcall memq)
(bfnil a1 110)
111
(mov (& 24) a3)
(mov '|0| a2)
(mov '"W.100" a1)
(jcall printerror)
110
(push (@ 112))
(mov '0 a4)
(jmp terpri)
112
(eval ())
105
(push '(""))
(push (cvalq #:system:path))
(mov (& 1) (cvalq #:system:path))
(push '1)
(push '(#:system:path))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 't a3)
(mov (& 31) a2)
(mov (& 32) a1)
(jcall #:llmodule:step1)
(push (@ 113))
(push (& 30))
(push (& 34))
(push (& 27))
(push (cvalq #:crunch:imports))
(push (cvalq #:crunch:includes))
(mov '5 a4)
(bra #:llmodule:step1-bis)
113
(eval ())
(mov a1 (& 29))
(mov (cvalq #:crunch:imports) a3)
(mov (& 25) a2)
(mov (& 32) a1)
(call #:llmodule:analyze:step2)
(mov a1 (cvalq #:crunch:current-diagnostic))
(call #:llmodule:step3)
(push (@ 114))
(push (& 30))
(push (cvalq #:crunch:current-diagnostic))
(push (cvalq #:crunch:update-desc))
(push (cvalq #:crunch:update-base))
(mov '4 a4)
(bra #:llmodule:step4)
114
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:path))
(adjstk '8)
(btnil (cvalq #:crunch:w-flag) 116)
(cnble (cvalq #:crunch:verbose) '0 116)
(mov (cvalq #:crunch:w-flag) a3)
(mov 'wflag a2)
(mov (& 24) a1)
(jcall printerror)
116
(btnil (cvalq #:crunch:e-flag) 117)
(mov (cvalq #:crunch:e-flag) a3)
(mov 'eflag a2)
(mov (& 24) a1)
(jcall printerror)
(bra 118)
117
(mov nil a1)
118
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:imports))
(mov (& 7) (cvalq #:crunch:current-defmod))
(mov (& 8) (cvalq #:crunch:current-diagnostic))
(mov (& 9) (cvalq #:crunch:includes))
(mov (& 10) (cvalq #:crunch:w-flag))
(mov (& 11) (cvalq #:crunch:e-flag))
(mov (& 12) (cvalq #:crunch:current-project))
(adjstk '25)
(return)
))
(loader'((fentry #:llmodule:step1 subr3)
(entry #:llmodule:step1 subr3)
(push a3)
(push a2)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(cnblt (cvalq #:crunch:verbose) '2 110)
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp rmargin)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push nil)
(mov '1 a4)
(jmp outchan)
115
(eval ())
(push (@ 116))
(push (@ 117))
(mov '0 a4)
(jmp outbuf)
117
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
116
(eval ())
(push (@ 118))
(push '"=====")
(mov '1 a4)
(jmp print)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 120))
(push (& 5))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '2)
110
(cnblt (cvalq #:crunch:verbose) '2 122)
(push (@ 123))
(mov '0 a4)
(jmp outchan)
123
(eval ())
(push a1)
(push (@ 124))
(mov '0 a4)
(jmp rmargin)
124
(eval ())
(push a1)
(push (@ 125))
(push dlink)
(push prot)
(stack dlink)
(push (@ 127))
(push nil)
(mov '1 a4)
(jmp outchan)
127
(eval ())
(push (@ 128))
(push (@ 129))
(mov '0 a4)
(jmp outbuf)
129
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(push (@ 130))
(push '"===== STEP 1 : loading context of project : ")
(push (& 7))
(mov '2 a4)
(jmp print)
130
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 126) a3)
125
(push a3)
(push a2)
(push (@ 131))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
131
(eval ())
(push (@ 132))
(push (& 5))
(mov '1 a4)
(jmp outchan)
132
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
126
(eval ())
(adjstk '2)
122
(cnblt (cvalq #:crunch:verbose) '2 134)
(push (@ 135))
(mov '0 a4)
(jmp outchan)
135
(eval ())
(push a1)
(push (@ 136))
(mov '0 a4)
(jmp rmargin)
136
(eval ())
(push a1)
(push (@ 137))
(push dlink)
(push prot)
(stack dlink)
(push (@ 139))
(push nil)
(mov '1 a4)
(jmp outchan)
139
(eval ())
(push (@ 140))
(push (@ 141))
(mov '0 a4)
(jmp outbuf)
141
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
140
(eval ())
(push (@ 142))
(push '"=====")
(mov '1 a4)
(jmp print)
142
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 138) a3)
137
(push a3)
(push a2)
(push (@ 143))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
143
(eval ())
(push (@ 144))
(push (& 5))
(mov '1 a4)
(jmp outchan)
144
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
138
(eval ())
(adjstk '2)
134
(mov (& 0) (cvalq #:crunch:all-modules))
(mov (& 1) a2)
(mov (& 0) a1)
(jcall reload-rt-project)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall activate-rt-project)
(cnblt (cvalq #:crunch:verbose) '2 146)
(push (@ 147))
(mov '0 a4)
(jmp outchan)
147
(eval ())
(push a1)
(push (@ 148))
(mov '0 a4)
(jmp rmargin)
148
(eval ())
(push a1)
(push (@ 149))
(push dlink)
(push prot)
(stack dlink)
(push (@ 151))
(push nil)
(mov '1 a4)
(jmp outchan)
151
(eval ())
(push (@ 152))
(push (@ 153))
(mov '0 a4)
(jmp outbuf)
153
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
152
(eval ())
(push (@ 154))
(push '"===== path environment for this analyze :")
(mov '1 a4)
(jmp print)
154
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 150) a3)
149
(push a3)
(push a2)
(push (@ 155))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
155
(eval ())
(push (@ 156))
(push (& 5))
(mov '1 a4)
(jmp outchan)
156
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
150
(eval ())
(adjstk '2)
146
(push (cvalq #:system:path))
157
(bfcons (& 0) 158)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(cnblt (cvalq #:crunch:verbose) '2 160)
(push (@ 161))
(mov '0 a4)
(jmp outchan)
161
(eval ())
(push a1)
(push (@ 162))
(mov '0 a4)
(jmp rmargin)
162
(eval ())
(push a1)
(push (@ 163))
(push dlink)
(push prot)
(stack dlink)
(push (@ 165))
(push nil)
(mov '1 a4)
(jmp outchan)
165
(eval ())
(push (@ 166))
(push (@ 167))
(mov '0 a4)
(jmp outbuf)
167
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
166
(eval ())
(push (@ 168))
(push '"   ")
(mov (& 7) a1)
(jcall pathname)
(push a1)
(mov '2 a4)
(jmp print)
168
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 164) a3)
163
(push a3)
(push a2)
(push (@ 169))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
169
(eval ())
(push (@ 170))
(push (& 5))
(mov '1 a4)
(jmp outchan)
170
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
164
(eval ())
(adjstk '2)
160
(adjstk '1)
(bra 157)
158
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:llmodule:step1-bis nsubr)
(btnil (& 4) 101)
(btnil (cvalq #:crunch:keep-wrong) 103)
(mov (& 4) a1)
(jcall probepathm)
(btnil a1 103)
(mov (& 4) a1)
(jcall probepathm)
(mov a1 (& 4))
(bra 102)
103
(mov (& 2) a3)
(mov (& 4) a2)
(mov (& 3) a1)
(jcall #:rtproject:build-module)
(mov a1 (& 4))
(bra 102)
101
(mov (cvalq #:crunch:current-project) a1)
(jcall get-main-ll-module-directory)
(mov a1 (& 4))
(btnil a1 105)
(push a1)
(mov (& 4) a1)
(jcall pathname)
(mov a1 a2)
(pop a1)
(jcall combine-pathnames)
(mov a1 a2)
(bra 106)
105
(mov nil a2)
106
(mov (& 2) a3)
(mov (& 3) a1)
(jcall #:rtproject:build-module)
(mov a1 (& 4))
(cnblt (cvalq #:crunch:verbose) '1 102)
(push (@ 109))
(push (@ 110))
(push '".. ")
(mov 'no-ooption a1)
(jcall get-message)
(push a1)
(push '" : ")
(mov '3 a4)
(jmp catenate)
110
(eval ())
(push a1)
(push (& 6))
(mov '2 a4)
(jmp print)
109
(eval ())
102
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 111))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 15) a1)
(jcall readdefmodule)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
111
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov (& 1) a4)
(bfnil a4 112)
(mov (& 0) a4)
112
(push a4)
(push a1)
(btnil a1 113)
(mov (car a1) (& 0))
(bra 114)
113
(mov (cvalq #:crunch:e-flag) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 116)
(mov (cvalq #:crunch:e-flag) a2)
(mov '126 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:e-flag))
116
(mov (& 5) a3)
(mov '|26| a2)
(mov '"E.126" a1)
(jcall syserror)
114
(bfnil (cvalq #:crunch:keep-wrong) 118)
(mov 'files a2)
(mov (& 0) a1)
(jcall getdefmodule)
(push a1)
(push nil)
119
(bfcons (& 1) 120)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(btnil (& 0) 121)
(mov (& 0) a1)
(jcall probepathf)
(btnil a1 121)
(mov (& 0) a1)
(jcall ncons)
(bra 122)
121
(mov (cvalq #:crunch:w-flag) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 124)
(mov (cvalq #:crunch:w-flag) a2)
(mov '126 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
124
(cnbgt (cvalq #:crunch:verbose) '0 127)
(mov (cvalq #:crunch:no-warning) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 126)
127
(mov (& 0) a3)
(mov '|26| a2)
(mov '"W.126" a1)
(jcall printerror)
126
(mov 't (& 4))
(mov nil a1)
122
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 119)
120
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a3)
(mov 'files a2)
(mov (& 0) a1)
(jcall setdefmodule)
118
(btnil (& 3) 129)
(push (@ 130))
(push (& 4))
(mov 'import a2)
(mov (& 2) a1)
(jcall getdefmodule)
(push a1)
(mov '2 a4)
(jmp union)
130
(eval ())
(push a1)
(push nil)
131
(bfcons (& 1) 132)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(btnil (& 0) 133)
(mov (& 0) a1)
(jcall probepathm)
(btnil a1 133)
(mov (& 0) a1)
(jcall ncons)
(bra 134)
133
(mov (cvalq #:crunch:w-flag) a2)
(mov '127 a1)
(jcall memq)
(bfnil a1 136)
(mov (cvalq #:crunch:w-flag) a2)
(mov '127 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
136
(cnbgt (cvalq #:crunch:verbose) '0 139)
(mov (cvalq #:crunch:no-warning) a2)
(mov '127 a1)
(jcall memq)
(bfnil a1 138)
139
(mov (& 0) a3)
(mov '|27| a2)
(mov '"W.127" a1)
(jcall printerror)
138
(mov nil a1)
134
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 131)
132
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a3)
(mov 'import a2)
(mov (& 0) a1)
(jcall setdefmodule)
129
(btnil (& 2) 141)
(push (@ 142))
(push (& 3))
(mov 'include a2)
(mov (& 2) a1)
(jcall getdefmodule)
(push a1)
(mov '2 a4)
(jmp union)
142
(eval ())
(push a1)
(push nil)
143
(bfcons (& 1) 144)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(btnil (& 0) 145)
(mov (& 0) a1)
(jcall probepathf)
(btnil a1 145)
(mov (& 0) a1)
(jcall ncons)
(bra 146)
145
(mov (cvalq #:crunch:w-flag) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 148)
(mov (cvalq #:crunch:w-flag) a2)
(mov '126 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
148
(cnbgt (cvalq #:crunch:verbose) '0 151)
(mov (cvalq #:crunch:no-warning) a2)
(mov '126 a1)
(jcall memq)
(bfnil a1 150)
151
(mov (& 0) a3)
(mov '|26| a2)
(mov '"W.126" a1)
(jcall printerror)
150
(mov nil a1)
146
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 143)
144
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a3)
(mov 'include a2)
(mov (& 0) a1)
(jcall setdefmodule)
(push (& 2))
(push nil)
152
(bfcons (& 1) 153)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall probepathf)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 152)
153
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 (cvalq #:crunch:includes))
141
(mov (& 0) (cvalq #:crunch:current-defmod))
(btnil (& 1) 155)
(bfnil (cvalq #:crunch:keep-old) 155)
(mov (& 5) a2)
(mov (& 0) a1)
(jcall printdefmodule)
155
(btnil (cvalq #:crunch:keep-wrong) 157)
(mov 'include a2)
(mov (& 0) a1)
(jcall getdefmodule)
(jcall #:crunch:files-of-module-p)
(push a1)
(btnil a1 159)
(push a1)
160
(bfcons (& 0) 161)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:crunch:w-flag) a2)
(mov '135 a1)
(jcall memq)
(bfnil a1 163)
(mov (cvalq #:crunch:w-flag) a2)
(mov '135 a1)
(jcall cons)
(mov a1 (cvalq #:crunch:w-flag))
163
(cnbgt (cvalq #:crunch:verbose) '0 166)
(mov (cvalq #:crunch:no-warning) a2)
(mov '135 a1)
(jcall memq)
(bfnil a1 165)
166
(push (@ 167))
(push nil)
(mov '|35| a1)
(jcall get-message)
(push a1)
(mov (& 3) a4)
(push (cdr a4))
(mov '3 a4)
(jmp format)
167
(eval ())
(mov (& 0) a3)
(mov (car a3) a3)
(mov a1 a2)
(mov '"W.135" a1)
(jcall printerror)
165
(adjstk '1)
(bra 160)
161
(adjstk '1)
159
(push (@ 168))
(mov 'include a2)
(mov (& 2) a1)
(jcall getdefmodule)
(push a1)
(push nil)
169
(bfcons (& 1) 170)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall probepathf)
(jcall pathname)
(jcall file-namestring)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 169)
170
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (& 2))
(push nil)
171
(bfcons (& 1) 172)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall nreconc)
(mov a1 (& 0))
(bra 171)
172
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push 'equal)
(mov '3 a4)
(jmp set-difference)
168
(eval ())
(btnil a1 174)
(push (@ 175))
(push (& 7))
(jcall nreverse)
(push a1)
(mov '2 a4)
(jmp #:crunch:load-include)
175
(eval ())
174
(adjstk '1)
157
(mov (& 6) a1)
(adjstk '7)
(jmp probepathm)
))
(loader'((entry #:llmodule:analyze:step2 subr3)
(push a3)
(push a2)
(push a1)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(cnblt (cvalq #:crunch:verbose) '2 110)
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp rmargin)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push nil)
(mov '1 a4)
(jmp outchan)
115
(eval ())
(push (@ 116))
(push (@ 117))
(mov '0 a4)
(jmp outbuf)
117
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
116
(eval ())
(push (@ 118))
(push '"=====")
(mov '1 a4)
(jmp print)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 120))
(push (& 5))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '2)
110
(cnblt (cvalq #:crunch:verbose) '2 122)
(push (@ 123))
(mov '0 a4)
(jmp outchan)
123
(eval ())
(push a1)
(push (@ 124))
(mov '0 a4)
(jmp rmargin)
124
(eval ())
(push a1)
(push (@ 125))
(push dlink)
(push prot)
(stack dlink)
(push (@ 127))
(push nil)
(mov '1 a4)
(jmp outchan)
127
(eval ())
(push (@ 128))
(push (@ 129))
(mov '0 a4)
(jmp outbuf)
129
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(push (@ 130))
(push '"===== STEP 2 : browsing files of module : ")
(push (& 7))
(mov '2 a4)
(jmp print)
130
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 126) a3)
125
(push a3)
(push a2)
(push (@ 131))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
131
(eval ())
(push (@ 132))
(push (& 5))
(mov '1 a4)
(jmp outchan)
132
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
126
(eval ())
(adjstk '2)
122
(cnblt (cvalq #:crunch:verbose) '2 134)
(push (@ 135))
(mov '0 a4)
(jmp outchan)
135
(eval ())
(push a1)
(push (@ 136))
(mov '0 a4)
(jmp rmargin)
136
(eval ())
(push a1)
(push (@ 137))
(push dlink)
(push prot)
(stack dlink)
(push (@ 139))
(push nil)
(mov '1 a4)
(jmp outchan)
139
(eval ())
(push (@ 140))
(push (@ 141))
(mov '0 a4)
(jmp outbuf)
141
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
140
(eval ())
(push (@ 142))
(push '"=====          involved files are : ")
(mov 'files a2)
(mov (cvalq #:crunch:current-defmod) a1)
(jcall getdefmodule)
(push a1)
(mov '2 a4)
(jmp print)
142
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 138) a3)
137
(push a3)
(push a2)
(push (@ 143))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
143
(eval ())
(push (@ 144))
(push (& 5))
(mov '1 a4)
(jmp outchan)
144
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
138
(eval ())
(adjstk '2)
134
(cnblt (cvalq #:crunch:verbose) '2 146)
(push (@ 147))
(mov '0 a4)
(jmp outchan)
147
(eval ())
(push a1)
(push (@ 148))
(mov '0 a4)
(jmp rmargin)
148
(eval ())
(push a1)
(push (@ 149))
(push dlink)
(push prot)
(stack dlink)
(push (@ 151))
(push nil)
(mov '1 a4)
(jmp outchan)
151
(eval ())
(push (@ 152))
(push (@ 153))
(mov '0 a4)
(jmp outbuf)
153
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
152
(eval ())
(push (@ 154))
(push '"=====")
(mov '1 a4)
(jmp print)
154
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 150) a3)
149
(push a3)
(push a2)
(push (@ 155))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
155
(eval ())
(push (@ 156))
(push (& 5))
(mov '1 a4)
(jmp outchan)
156
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
150
(eval ())
(adjstk '2)
146
(push 't)
(push (cvalq #:system:redef-flag))
(mov (& 1) (cvalq #:system:redef-flag))
(push '1)
(push '(#:system:redef-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 10) a3)
(mov (& 9) a2)
(mov (& 8) a1)
(jcall #:llmodule:agree-mod)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:redef-flag))
(adjstk '11)
(return)
))
(loader'((fentry #:llmodule:makefile:step2 subr2)
(entry #:llmodule:makefile:step2 subr2)
(push a2)
(push a1)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(cnblt (cvalq #:crunch:verbose) '2 110)
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp rmargin)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push nil)
(mov '1 a4)
(jmp outchan)
115
(eval ())
(push (@ 116))
(push (@ 117))
(mov '0 a4)
(jmp outbuf)
117
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
116
(eval ())
(push (@ 118))
(push '"=====")
(mov '1 a4)
(jmp print)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 120))
(push (& 5))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '2)
110
(cnblt (cvalq #:crunch:verbose) '2 122)
(push (@ 123))
(mov '0 a4)
(jmp outchan)
123
(eval ())
(push a1)
(push (@ 124))
(mov '0 a4)
(jmp rmargin)
124
(eval ())
(push a1)
(push (@ 125))
(push dlink)
(push prot)
(stack dlink)
(push (@ 127))
(push nil)
(mov '1 a4)
(jmp outchan)
127
(eval ())
(push (@ 128))
(push (@ 129))
(mov '0 a4)
(jmp outbuf)
129
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(push (@ 130))
(push '"===== STEP 2 : updating Makefile : ")
(mov (& 7) a4)
(bfnil a4 131)
(hpxmov (& 8) '14 a4)
131
(push a4)
(mov '2 a4)
(jmp print)
130
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 126) a3)
125
(push a3)
(push a2)
(push (@ 132))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
132
(eval ())
(push (@ 133))
(push (& 5))
(mov '1 a4)
(jmp outchan)
133
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
126
(eval ())
(adjstk '2)
122
(cnblt (cvalq #:crunch:verbose) '2 135)
(push (@ 136))
(mov '0 a4)
(jmp outchan)
136
(eval ())
(push a1)
(push (@ 137))
(mov '0 a4)
(jmp rmargin)
137
(eval ())
(push a1)
(push (@ 138))
(push dlink)
(push prot)
(stack dlink)
(push (@ 140))
(push nil)
(mov '1 a4)
(jmp outchan)
140
(eval ())
(push (@ 141))
(push (@ 142))
(mov '0 a4)
(jmp outbuf)
142
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
141
(eval ())
(push (@ 143))
(push '"=====")
(mov '1 a4)
(jmp print)
143
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 139) a3)
138
(push a3)
(push a2)
(push (@ 144))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
144
(eval ())
(push (@ 145))
(push (& 5))
(mov '1 a4)
(jmp outchan)
145
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
139
(eval ())
(adjstk '2)
135
(btnil (& 0) 147)
(hpmovx (& 0) (& 1) '14)
147
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(jmp #:rtproject:build-make)
))
(loader'((fentry #:llmodule:init:step2 subr2)
(entry #:llmodule:init:step2 subr2)
(push a2)
(push a1)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(cnblt (cvalq #:crunch:verbose) '2 110)
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp rmargin)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push nil)
(mov '1 a4)
(jmp outchan)
115
(eval ())
(push (@ 116))
(push (@ 117))
(mov '0 a4)
(jmp outbuf)
117
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
116
(eval ())
(push (@ 118))
(push '"=====")
(mov '1 a4)
(jmp print)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 120))
(push (& 5))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '2)
110
(cnblt (cvalq #:crunch:verbose) '2 122)
(push (@ 123))
(mov '0 a4)
(jmp outchan)
123
(eval ())
(push a1)
(push (@ 124))
(mov '0 a4)
(jmp rmargin)
124
(eval ())
(push a1)
(push (@ 125))
(push dlink)
(push prot)
(stack dlink)
(push (@ 127))
(push nil)
(mov '1 a4)
(jmp outchan)
127
(eval ())
(push (@ 128))
(push (@ 129))
(mov '0 a4)
(jmp outbuf)
129
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(push (@ 130))
(push '"===== STEP 2 : making initial analyzer's Makefile : ")
(mov (& 7) a4)
(bfnil a4 131)
(hpxmov (& 8) '15 a4)
131
(push a4)
(mov '2 a4)
(jmp print)
130
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 126) a3)
125
(push a3)
(push a2)
(push (@ 132))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
132
(eval ())
(push (@ 133))
(push (& 5))
(mov '1 a4)
(jmp outchan)
133
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
126
(eval ())
(adjstk '2)
122
(cnblt (cvalq #:crunch:verbose) '2 135)
(push (@ 136))
(mov '0 a4)
(jmp outchan)
136
(eval ())
(push a1)
(push (@ 137))
(mov '0 a4)
(jmp rmargin)
137
(eval ())
(push a1)
(push (@ 138))
(push dlink)
(push prot)
(stack dlink)
(push (@ 140))
(push nil)
(mov '1 a4)
(jmp outchan)
140
(eval ())
(push (@ 141))
(push (@ 142))
(mov '0 a4)
(jmp outbuf)
142
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
141
(eval ())
(push (@ 143))
(push '"=====")
(mov '1 a4)
(jmp print)
143
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 139) a3)
138
(push a3)
(push a2)
(push (@ 144))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
144
(eval ())
(push (@ 145))
(push (& 5))
(mov '1 a4)
(jmp outchan)
145
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
139
(eval ())
(adjstk '2)
135
(btnil (& 0) 147)
(hpmovx (& 0) (& 1) '15)
147
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(jmp #:rtproject:build-init)
))
(loader'((fentry #:llmodule:meta:step2 subr2)
(entry #:llmodule:meta:step2 subr2)
(push a2)
(push a1)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(cnblt (cvalq #:crunch:verbose) '2 110)
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp rmargin)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push nil)
(mov '1 a4)
(jmp outchan)
115
(eval ())
(push (@ 116))
(push (@ 117))
(mov '0 a4)
(jmp outbuf)
117
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
116
(eval ())
(push (@ 118))
(push '"=====")
(mov '1 a4)
(jmp print)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 120))
(push (& 5))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '2)
110
(cnblt (cvalq #:crunch:verbose) '2 122)
(push (@ 123))
(mov '0 a4)
(jmp outchan)
123
(eval ())
(push a1)
(push (@ 124))
(mov '0 a4)
(jmp rmargin)
124
(eval ())
(push a1)
(push (@ 125))
(push dlink)
(push prot)
(stack dlink)
(push (@ 127))
(push nil)
(mov '1 a4)
(jmp outchan)
127
(eval ())
(push (@ 128))
(push (@ 129))
(mov '0 a4)
(jmp outbuf)
129
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(push (@ 130))
(push '"===== STEP 2 : making meta module : ")
(mov (& 7) a4)
(bfnil a4 131)
(hpxmov (& 8) '27 a4)
131
(push a4)
(mov '2 a4)
(jmp print)
130
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 126) a3)
125
(push a3)
(push a2)
(push (@ 132))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
132
(eval ())
(push (@ 133))
(push (& 5))
(mov '1 a4)
(jmp outchan)
133
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
126
(eval ())
(adjstk '2)
122
(cnblt (cvalq #:crunch:verbose) '2 135)
(push (@ 136))
(mov '0 a4)
(jmp outchan)
136
(eval ())
(push a1)
(push (@ 137))
(mov '0 a4)
(jmp rmargin)
137
(eval ())
(push a1)
(push (@ 138))
(push dlink)
(push prot)
(stack dlink)
(push (@ 140))
(push nil)
(mov '1 a4)
(jmp outchan)
140
(eval ())
(push (@ 141))
(push (@ 142))
(mov '0 a4)
(jmp outbuf)
142
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
141
(eval ())
(push (@ 143))
(push '"=====")
(mov '1 a4)
(jmp print)
143
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 139) a3)
138
(push a3)
(push a2)
(push (@ 144))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
144
(eval ())
(push (@ 145))
(push (& 5))
(mov '1 a4)
(jmp outchan)
145
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
139
(eval ())
(adjstk '2)
135
(btnil (& 0) 147)
(hpmovx (& 0) (& 1) '27)
147
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(jmp #:rtproject:build-meta)
))
(loader'((entry #:llmodule:step3 subr1)
(push a1)
(cnblt (cvalq #:crunch:verbose) '2 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push nil)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(cnblt (cvalq #:crunch:verbose) '2 110)
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp rmargin)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push nil)
(mov '1 a4)
(jmp outchan)
115
(eval ())
(push (@ 116))
(push (@ 117))
(mov '0 a4)
(jmp outbuf)
117
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
116
(eval ())
(push (@ 118))
(push '"=====")
(mov '1 a4)
(jmp print)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 120))
(push (& 5))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '2)
110
(cnblt (cvalq #:crunch:verbose) '2 122)
(push (@ 123))
(mov '0 a4)
(jmp outchan)
123
(eval ())
(push a1)
(push (@ 124))
(mov '0 a4)
(jmp rmargin)
124
(eval ())
(push a1)
(push (@ 125))
(push dlink)
(push prot)
(stack dlink)
(push (@ 127))
(push nil)
(mov '1 a4)
(jmp outchan)
127
(eval ())
(push (@ 128))
(push (@ 129))
(mov '0 a4)
(jmp outbuf)
129
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(push (@ 130))
(push '"===== STEP 3 : diagnostic")
(mov '1 a4)
(jmp print)
130
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 126) a3)
125
(push a3)
(push a2)
(push (@ 131))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
131
(eval ())
(push (@ 132))
(push (& 5))
(mov '1 a4)
(jmp outchan)
132
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
126
(eval ())
(adjstk '2)
122
(cnblt (cvalq #:crunch:verbose) '2 134)
(push (@ 135))
(mov '0 a4)
(jmp outchan)
135
(eval ())
(push a1)
(push (@ 136))
(mov '0 a4)
(jmp rmargin)
136
(eval ())
(push a1)
(push (@ 137))
(push dlink)
(push prot)
(stack dlink)
(push (@ 139))
(push nil)
(mov '1 a4)
(jmp outchan)
139
(eval ())
(push (@ 140))
(push (@ 141))
(mov '0 a4)
(jmp outbuf)
141
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
140
(eval ())
(push (@ 142))
(push '"=====")
(mov '1 a4)
(jmp print)
142
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 138) a3)
137
(push a3)
(push a2)
(push (@ 143))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
143
(eval ())
(push (@ 144))
(push (& 5))
(mov '1 a4)
(jmp outchan)
144
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
138
(eval ())
(adjstk '2)
134
(mov (& 0) a1)
(jcall #:diagnostic:explain-diagnostic)
(mov 't (cvalq #:crunch:done))
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:llmodule:step4 nsubr)
(btnil (& 1) 102)
(cnblt (cvalq #:crunch:verbose) '2 104)
(push (@ 105))
(mov '0 a4)
(jmp outchan)
105
(eval ())
(push a1)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(push nil)
(mov '1 a4)
(jmp outchan)
108
(eval ())
(push (@ 109))
(mov '0 a4)
(jmp terpri)
109
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 110))
(push (& 4))
(mov '1 a4)
(jmp outchan)
110
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(adjstk '1)
104
(cnblt (cvalq #:crunch:verbose) '2 112)
(push (@ 113))
(mov '0 a4)
(jmp outchan)
113
(eval ())
(push a1)
(push (@ 114))
(mov '0 a4)
(jmp rmargin)
114
(eval ())
(push a1)
(push (@ 115))
(push dlink)
(push prot)
(stack dlink)
(push (@ 117))
(push nil)
(mov '1 a4)
(jmp outchan)
117
(eval ())
(push (@ 118))
(push (@ 119))
(mov '0 a4)
(jmp outbuf)
119
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
118
(eval ())
(push (@ 120))
(push '"=====")
(mov '1 a4)
(jmp print)
120
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 116) a3)
115
(push a3)
(push a2)
(push (@ 121))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
121
(eval ())
(push (@ 122))
(push (& 5))
(mov '1 a4)
(jmp outchan)
122
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
116
(eval ())
(adjstk '2)
112
(cnblt (cvalq #:crunch:verbose) '2 124)
(push (@ 125))
(mov '0 a4)
(jmp outchan)
125
(eval ())
(push a1)
(push (@ 126))
(mov '0 a4)
(jmp rmargin)
126
(eval ())
(push a1)
(push (@ 127))
(push dlink)
(push prot)
(stack dlink)
(push (@ 129))
(push nil)
(mov '1 a4)
(jmp outchan)
129
(eval ())
(push (@ 130))
(push (@ 131))
(mov '0 a4)
(jmp outbuf)
131
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
130
(eval ())
(push (@ 132))
(push '"===== STEP 4 : updating module description : ")
(push (& 10))
(mov '2 a4)
(jmp print)
132
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 128) a3)
127
(push a3)
(push a2)
(push (@ 133))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
133
(eval ())
(push (@ 134))
(push (& 5))
(mov '1 a4)
(jmp outchan)
134
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
128
(eval ())
(adjstk '2)
124
(cnblt (cvalq #:crunch:verbose) '2 136)
(push (@ 137))
(mov '0 a4)
(jmp outchan)
137
(eval ())
(push a1)
(push (@ 138))
(mov '0 a4)
(jmp rmargin)
138
(eval ())
(push a1)
(push (@ 139))
(push dlink)
(push prot)
(stack dlink)
(push (@ 141))
(push nil)
(mov '1 a4)
(jmp outchan)
141
(eval ())
(push (@ 142))
(push (@ 143))
(mov '0 a4)
(jmp outbuf)
143
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
142
(eval ())
(push (@ 144))
(push '"=====")
(mov '1 a4)
(jmp print)
144
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 140) a3)
139
(push a3)
(push a2)
(push (@ 145))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
145
(eval ())
(push (@ 146))
(push (& 5))
(mov '1 a4)
(jmp outchan)
146
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
140
(eval ())
(adjstk '2)
136
(mov (& 2) a2)
(mov (& 3) a1)
(jcall #:diagnostic:update-desc)
102
(btnil (& 0) 148)
(cnblt (cvalq #:crunch:verbose) '2 150)
(push (@ 151))
(mov '0 a4)
(jmp outchan)
151
(eval ())
(push a1)
(push (@ 152))
(push dlink)
(push prot)
(stack dlink)
(push (@ 154))
(push nil)
(mov '1 a4)
(jmp outchan)
154
(eval ())
(push (@ 155))
(mov '0 a4)
(jmp terpri)
155
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 153) a3)
152
(push a3)
(push a2)
(push (@ 156))
(push (& 4))
(mov '1 a4)
(jmp outchan)
156
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
153
(eval ())
(adjstk '1)
150
(cnblt (cvalq #:crunch:verbose) '2 158)
(push (@ 159))
(mov '0 a4)
(jmp outchan)
159
(eval ())
(push a1)
(push (@ 160))
(mov '0 a4)
(jmp rmargin)
160
(eval ())
(push a1)
(push (@ 161))
(push dlink)
(push prot)
(stack dlink)
(push (@ 163))
(push nil)
(mov '1 a4)
(jmp outchan)
163
(eval ())
(push (@ 164))
(push (@ 165))
(mov '0 a4)
(jmp outbuf)
165
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
164
(eval ())
(push (@ 166))
(push '"=====")
(mov '1 a4)
(jmp print)
166
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 162) a3)
161
(push a3)
(push a2)
(push (@ 167))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
167
(eval ())
(push (@ 168))
(push (& 5))
(mov '1 a4)
(jmp outchan)
168
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
162
(eval ())
(adjstk '2)
158
(cnblt (cvalq #:crunch:verbose) '2 170)
(push (@ 171))
(mov '0 a4)
(jmp outchan)
171
(eval ())
(push a1)
(push (@ 172))
(mov '0 a4)
(jmp rmargin)
172
(eval ())
(push a1)
(push (@ 173))
(push dlink)
(push prot)
(stack dlink)
(push (@ 175))
(push nil)
(mov '1 a4)
(jmp outchan)
175
(eval ())
(push (@ 176))
(push (@ 177))
(mov '0 a4)
(jmp outbuf)
177
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
176
(eval ())
(push (@ 178))
(push '"===== STEP 4bis : updating reference file : ")
(hpxmov (cvalq #:crunch:current-project) '12 a4)
(push a4)
(mov '2 a4)
(jmp print)
178
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 174) a3)
173
(push a3)
(push a2)
(push (@ 179))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
179
(eval ())
(push (@ 180))
(push (& 5))
(mov '1 a4)
(jmp outchan)
180
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
174
(eval ())
(adjstk '2)
170
(cnblt (cvalq #:crunch:verbose) '2 182)
(push (@ 183))
(mov '0 a4)
(jmp outchan)
183
(eval ())
(push a1)
(push (@ 184))
(mov '0 a4)
(jmp rmargin)
184
(eval ())
(push a1)
(push (@ 185))
(push dlink)
(push prot)
(stack dlink)
(push (@ 187))
(push nil)
(mov '1 a4)
(jmp outchan)
187
(eval ())
(push (@ 188))
(push (@ 189))
(mov '0 a4)
(jmp outbuf)
189
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
188
(eval ())
(push (@ 190))
(push '"=====")
(mov '1 a4)
(jmp print)
190
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 186) a3)
185
(push a3)
(push a2)
(push (@ 191))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
191
(eval ())
(push (@ 192))
(push (& 5))
(mov '1 a4)
(jmp outchan)
192
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
186
(eval ())
(adjstk '2)
182
(hpxmov (cvalq #:crunch:current-project) '0 a1)
(hpxmov (cvalq #:crunch:current-project) '12 a2)
(mov (& 2) a3)
(jcall #:llmodulereferences:update-base)
148
(mov (cvalq #:crunch:current-project) a1)
(adjstk '4)
(return)
))
(loader'((fentry sh-analyze dmsubr)
(entry sh-analyze dmsubr)
(push a1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:llmodule:option-encountered))
(mov (& 7) (cvalq #:llmodule:option-encountered))
(push '1)
(push '(#:llmodule:option-encountered))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 't (cvalq #:crunch:update-desc))
(mov 't (cvalq #:crunch:update-base))
(mov nil (cvalq #:crunch:update-make))
(mov nil (cvalq #:crunch:current-project))
(mov nil (cvalq #:crunch:dynamic-caller))
(mov '0 (cvalq #:crunch:verbose))
(mov '1 (cvalq #:crunch:dependancy))
(mov nil (cvalq #:crunch:include))
(mov nil (cvalq #:crunch:keep-old))
(mov nil (cvalq #:crunch:keep-wrong))
(mov nil (cvalq #:crunch:keep-all-exports))
(mov nil (cvalq #:crunch:recursive-analyze))
(cnblt (cvalq #:crunch:verbose) '2 113)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp rmargin)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(push nil)
(mov '1 a4)
(jmp outchan)
107
(eval ())
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push '">>>>> OPTIONS (version ")
(push (cvalq #:crunch:version))
(push '".")
(push (cvalq #:crunch:subversion))
(push '")")
(mov '5 a4)
(jmp print)
110
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 111))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
111
(eval ())
(push (@ 112))
(push (& 5))
(mov '1 a4)
(jmp outchan)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '2)
113
(btnil (& 22) 114)
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 20))
(mov (car a4) a1)
(cabne a1 '-defmodule 116)
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 12))
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-files a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(mov a1 a2)
(mov '-defmodule a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(cnblt (cvalq #:crunch:verbose) '2 113)
(push (@ 119))
(mov '0 a4)
(jmp outchan)
119
(eval ())
(push a1)
(push (@ 120))
(mov '0 a4)
(jmp rmargin)
120
(eval ())
(push a1)
(push (@ 121))
(push dlink)
(push prot)
(stack dlink)
(push (@ 123))
(push nil)
(mov '1 a4)
(jmp outchan)
123
(eval ())
(push (@ 124))
(push (@ 125))
(mov '0 a4)
(jmp outbuf)
125
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
124
(eval ())
(push (@ 126))
(push '">>>>> building module : ")
(push (& 19))
(mov '2 a4)
(jmp print)
126
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 122) a3)
121
(push a3)
(push a2)
(push (@ 127))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
127
(eval ())
(push (@ 128))
(push (& 5))
(mov '1 a4)
(jmp outchan)
128
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
122
(eval ())
(adjstk '2)
(bra 113)
116
(cabne a1 '-files 129)
(mov '-files a1)
(call #:llmodule:verif-option)
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 20))
(mov (& 20) a1)
(call #:llmodule:source-file-p)
(btnil a1 130)
(mov (& 20) a1)
(jcall namestring)
(push (@ 132))
(push (& 11))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
132
(eval ())
(mov a1 (& 10))
(bra 131)
130
(mov (& 20) a3)
(mov '"not a source file" a2)
(mov 'sh-analyze a1)
(jcall error)
131
(cnblt (cvalq #:crunch:verbose) '2 113)
(push (@ 135))
(mov '0 a4)
(jmp outchan)
135
(eval ())
(push a1)
(push (@ 136))
(mov '0 a4)
(jmp rmargin)
136
(eval ())
(push a1)
(push (@ 137))
(push dlink)
(push prot)
(stack dlink)
(push (@ 139))
(push nil)
(mov '1 a4)
(jmp outchan)
139
(eval ())
(push (@ 140))
(push (@ 141))
(mov '0 a4)
(jmp outbuf)
141
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
140
(eval ())
(push (@ 142))
(push '">>>>> add source file : ")
(push (& 27))
(mov '2 a4)
(jmp print)
142
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 138) a3)
137
(push a3)
(push a2)
(push (@ 143))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
143
(eval ())
(push (@ 144))
(push (& 5))
(mov '1 a4)
(jmp outchan)
144
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
138
(eval ())
(adjstk '2)
(bra 113)
129
(cabeq a1 '-project 146)
(cabne a1 '-p 145)
146
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 20))
(btnil (cvalq #:crunch:current-project) 148)
(mov (& 20) a2)
(mov '"only one -project option to specified. The last one is the rigth one" a1)
(call #:llmodule:printerror)
148
(mov (& 20) a1)
(jcall find-rt-project)
(mov a1 (cvalq #:crunch:current-project))
(btnil a1 149)
(mov (& 20) (& 21))
(bra 150)
149
(mov (& 20) a2)
(mov 'unknownprj a1)
(call #:llmodule:printerror)
150
(cnblt (cvalq #:crunch:verbose) '2 113)
(push (@ 153))
(mov '0 a4)
(jmp outchan)
153
(eval ())
(push a1)
(push (@ 154))
(mov '0 a4)
(jmp rmargin)
154
(eval ())
(push a1)
(push (@ 155))
(push dlink)
(push prot)
(stack dlink)
(push (@ 157))
(push nil)
(mov '1 a4)
(jmp outchan)
157
(eval ())
(push (@ 158))
(push (@ 159))
(mov '0 a4)
(jmp outbuf)
159
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
158
(eval ())
(push (@ 160))
(push '">>>>> current project : ")
(push (& 28))
(mov '2 a4)
(jmp print)
160
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 156) a3)
155
(push a3)
(push a2)
(push (@ 161))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
161
(eval ())
(push (@ 162))
(push (& 5))
(mov '1 a4)
(jmp outchan)
162
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
156
(eval ())
(adjstk '2)
(bra 113)
145
(cabeq a1 '-load 164)
(cabne a1 '-l 163)
164
(cnblt (cvalq #:crunch:verbose) '2 166)
(push (@ 167))
(mov '0 a4)
(jmp outchan)
167
(eval ())
(push a1)
(push (@ 168))
(mov '0 a4)
(jmp rmargin)
168
(eval ())
(push a1)
(push (@ 169))
(push dlink)
(push prot)
(stack dlink)
(push (@ 171))
(push nil)
(mov '1 a4)
(jmp outchan)
171
(eval ())
(push (@ 172))
(push (@ 173))
(mov '0 a4)
(jmp outbuf)
173
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
172
(eval ())
(push (@ 174))
(push '">>>>> loading file : ")
(mov (& 29) a4)
(push (car a4))
(mov '2 a4)
(jmp print)
174
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 170) a3)
169
(push a3)
(push a2)
(push (@ 175))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
175
(eval ())
(push (@ 176))
(push (& 5))
(mov '1 a4)
(jmp outchan)
176
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
170
(eval ())
(adjstk '2)
166
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 177))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 34) a1)
(mov (cdr a1) (& 34))
(mov (car a1) a1)
(jcall namestring)
(mov 't a2)
(jcall loadfile)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
177
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bra 113)
163
(cabeq a1 '-all 179)
(cabne a1 '-allexport 178)
179
(cnblt (cvalq #:crunch:verbose) '2 181)
(push (@ 182))
(mov '0 a4)
(jmp outchan)
182
(eval ())
(push a1)
(push (@ 183))
(mov '0 a4)
(jmp rmargin)
183
(eval ())
(push a1)
(push (@ 184))
(push dlink)
(push prot)
(stack dlink)
(push (@ 186))
(push nil)
(mov '1 a4)
(jmp outchan)
186
(eval ())
(push (@ 187))
(push (@ 188))
(mov '0 a4)
(jmp outbuf)
188
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
187
(eval ())
(push (@ 189))
(push '">>>>> export ALL functions defined.")
(mov '1 a4)
(jmp print)
189
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 185) a3)
184
(push a3)
(push a2)
(push (@ 190))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
190
(eval ())
(push (@ 191))
(push (& 5))
(mov '1 a4)
(jmp outchan)
191
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
185
(eval ())
(adjstk '2)
181
(mov 't (cvalq #:crunch:keep-all-exports))
(bra 113)
178
(cabeq a1 '-export 193)
(cabne a1 '|-e| 192)
193
(cnblt (cvalq #:crunch:verbose) '2 195)
(push (@ 196))
(mov '0 a4)
(jmp outchan)
196
(eval ())
(push a1)
(push (@ 197))
(mov '0 a4)
(jmp rmargin)
197
(eval ())
(push a1)
(push (@ 198))
(push dlink)
(push prot)
(stack dlink)
(push (@ 200))
(push nil)
(mov '1 a4)
(jmp outchan)
200
(eval ())
(push (@ 201))
(push (@ 202))
(mov '0 a4)
(jmp outbuf)
202
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
201
(eval ())
(push (@ 203))
(push '">>>>> exporting function : ")
(mov (& 29) a4)
(push (car a4))
(mov '2 a4)
(jmp print)
203
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 199) a3)
198
(push a3)
(push a2)
(push (@ 204))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
204
(eval ())
(push (@ 205))
(push (& 5))
(mov '1 a4)
(jmp outchan)
205
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
199
(eval ())
(adjstk '2)
195
(mov (& 22) a1)
(mov (cdr a1) (& 22))
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 9))
(bra 113)
192
(cabeq a1 '-import 207)
(cabne a1 '-i 206)
207
(cnblt (cvalq #:crunch:verbose) '2 209)
(push (@ 210))
(mov '0 a4)
(jmp outchan)
210
(eval ())
(push a1)
(push (@ 211))
(mov '0 a4)
(jmp rmargin)
211
(eval ())
(push a1)
(push (@ 212))
(push dlink)
(push prot)
(stack dlink)
(push (@ 214))
(push nil)
(mov '1 a4)
(jmp outchan)
214
(eval ())
(push (@ 215))
(push (@ 216))
(mov '0 a4)
(jmp outbuf)
216
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
215
(eval ())
(push (@ 217))
(push '">>>>> importing module : ")
(mov (& 29) a4)
(push (car a4))
(mov '2 a4)
(jmp print)
217
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 213) a3)
212
(push a3)
(push a2)
(push (@ 218))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
218
(eval ())
(push (@ 219))
(push (& 5))
(mov '1 a4)
(jmp outchan)
219
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
213
(eval ())
(adjstk '2)
209
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(push (car a4))
(push (@ 220))
(push (& 10))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
220
(eval ())
(adjstk '1)
(mov a1 (& 8))
(bra 113)
206
(cabne a1 '-include 221)
(cnblt (cvalq #:crunch:verbose) '2 223)
(push (@ 224))
(mov '0 a4)
(jmp outchan)
224
(eval ())
(push a1)
(push (@ 225))
(mov '0 a4)
(jmp rmargin)
225
(eval ())
(push a1)
(push (@ 226))
(push dlink)
(push prot)
(stack dlink)
(push (@ 228))
(push nil)
(mov '1 a4)
(jmp outchan)
228
(eval ())
(push (@ 229))
(push (@ 230))
(mov '0 a4)
(jmp outbuf)
230
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
229
(eval ())
(push (@ 231))
(push '">>>>> including file : ")
(mov (& 29) a4)
(push (car a4))
(mov '2 a4)
(jmp print)
231
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 227) a3)
226
(push a3)
(push a2)
(push (@ 232))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
232
(eval ())
(push (@ 233))
(push (& 5))
(mov '1 a4)
(jmp outchan)
233
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
227
(eval ())
(adjstk '2)
223
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(push (car a4))
(push (@ 234))
(push (& 9))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
234
(eval ())
(adjstk '1)
(mov a1 (& 7))
(bra 113)
221
(cabne a1 '-includeflag 235)
236
(cnblt (cvalq #:crunch:verbose) '2 238)
(push (@ 239))
(mov '0 a4)
(jmp outchan)
239
(eval ())
(push a1)
(push (@ 240))
(mov '0 a4)
(jmp rmargin)
240
(eval ())
(push a1)
(push (@ 241))
(push dlink)
(push prot)
(stack dlink)
(push (@ 243))
(push nil)
(mov '1 a4)
(jmp outchan)
243
(eval ())
(push (@ 244))
(push (@ 245))
(mov '0 a4)
(jmp outbuf)
245
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
244
(eval ())
(push (@ 246))
(push '">>>>> using include field in generated module")
(mov '1 a4)
(jmp print)
246
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 242) a3)
241
(push a3)
(push a2)
(push (@ 247))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
247
(eval ())
(push (@ 248))
(push (& 5))
(mov '1 a4)
(jmp outchan)
248
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
242
(eval ())
(adjstk '2)
238
(mov 't (cvalq #:crunch:include))
(bra 113)
235
(cabeq a1 '-makefile 250)
(cabne a1 '-make 249)
250
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-makefile a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(cnblt (cvalq #:crunch:verbose) '2 252)
(push (@ 253))
(mov '0 a4)
(jmp outchan)
253
(eval ())
(push a1)
(push (@ 254))
(mov '0 a4)
(jmp rmargin)
254
(eval ())
(push a1)
(push (@ 255))
(push dlink)
(push prot)
(stack dlink)
(push (@ 257))
(push nil)
(mov '1 a4)
(jmp outchan)
257
(eval ())
(push (@ 258))
(push (@ 259))
(mov '0 a4)
(jmp outbuf)
259
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
258
(eval ())
(push (@ 260))
(push '">>>>> building Makefile for current project")
(mov '1 a4)
(jmp print)
260
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 256) a3)
255
(push a3)
(push a2)
(push (@ 261))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
261
(eval ())
(push (@ 262))
(push (& 5))
(mov '1 a4)
(jmp outchan)
262
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
256
(eval ())
(adjstk '2)
252
(mov 't (& 18))
(bra 113)
249
(cabeq a1 '-dependency 264)
(cabne a1 '-dep 263)
264
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 20))
(cnblt (cvalq #:crunch:verbose) '2 266)
(push (@ 267))
(mov '0 a4)
(jmp outchan)
267
(eval ())
(push a1)
(push (@ 268))
(mov '0 a4)
(jmp rmargin)
268
(eval ())
(push a1)
(push (@ 269))
(push dlink)
(push prot)
(stack dlink)
(push (@ 271))
(push nil)
(mov '1 a4)
(jmp outchan)
271
(eval ())
(push (@ 272))
(push (@ 273))
(mov '0 a4)
(jmp outbuf)
273
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
272
(eval ())
(push (@ 274))
(push '">>>>> Makefile's dependancy level : ")
(push (& 27))
(mov '2 a4)
(jmp print)
274
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 270) a3)
269
(push a3)
(push a2)
(push (@ 275))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
275
(eval ())
(push (@ 276))
(push (& 5))
(mov '1 a4)
(jmp outchan)
276
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
270
(eval ())
(adjstk '2)
266
(mov (& 20) a1)
(jcall numberp)
(bfnil a1 278)
(mov (& 20) a2)
(mov 'errnna a1)
(call #:llmodule:printerror)
278
(mov (& 20) (cvalq #:crunch:dependancy))
(bra 113)
263
(cabeq a1 '-meta 280)
(cabne a1 '-super 279)
280
(mov '-meta a1)
(call #:llmodule:verif-option)
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-meta a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(cnblt (cvalq #:crunch:verbose) '2 282)
(push (@ 283))
(mov '0 a4)
(jmp outchan)
283
(eval ())
(push a1)
(push (@ 284))
(mov '0 a4)
(jmp rmargin)
284
(eval ())
(push a1)
(push (@ 285))
(push dlink)
(push prot)
(stack dlink)
(push (@ 287))
(push nil)
(mov '1 a4)
(jmp outchan)
287
(eval ())
(push (@ 288))
(push (@ 289))
(mov '0 a4)
(jmp outbuf)
289
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
288
(eval ())
(push (@ 290))
(push '">>>>> building META module for current project")
(mov '1 a4)
(jmp print)
290
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 286) a3)
285
(push a3)
(push a2)
(push (@ 291))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
291
(eval ())
(push (@ 292))
(push (& 5))
(mov '1 a4)
(jmp outchan)
292
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
286
(eval ())
(adjstk '2)
282
(mov 't (& 17))
(bra 113)
279
(cabeq a1 '-o 294)
(cabne a1 '-output 293)
294
(cnblt (cvalq #:crunch:verbose) '2 296)
(push (@ 297))
(mov '0 a4)
(jmp outchan)
297
(eval ())
(push a1)
(push (@ 298))
(mov '0 a4)
(jmp rmargin)
298
(eval ())
(push a1)
(push (@ 299))
(push dlink)
(push prot)
(stack dlink)
(push (@ 301))
(push nil)
(mov '1 a4)
(jmp outchan)
301
(eval ())
(push (@ 302))
(push (@ 303))
(mov '0 a4)
(jmp outbuf)
303
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
302
(eval ())
(push (@ 304))
(push '">>>>> result in file : ")
(mov (& 29) a4)
(push (car a4))
(mov '2 a4)
(jmp print)
304
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 300) a3)
299
(push a3)
(push a2)
(push (@ 305))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
305
(eval ())
(push (@ 306))
(push (& 5))
(mov '1 a4)
(jmp outchan)
306
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
300
(eval ())
(adjstk '2)
296
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 11))
(bra 113)
293
(cabeq a1 '-silent 308)
(cabne a1 '-s 307)
308
(cnblt (cvalq #:crunch:verbose) '2 310)
(push (@ 311))
(mov '0 a4)
(jmp outchan)
311
(eval ())
(push a1)
(push (@ 312))
(mov '0 a4)
(jmp rmargin)
312
(eval ())
(push a1)
(push (@ 313))
(push dlink)
(push prot)
(stack dlink)
(push (@ 315))
(push nil)
(mov '1 a4)
(jmp outchan)
315
(eval ())
(push (@ 316))
(push (@ 317))
(mov '0 a4)
(jmp outbuf)
317
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
316
(eval ())
(push (@ 318))
(push '">>>>> silent mode.")
(mov '1 a4)
(jmp print)
318
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 314) a3)
313
(push a3)
(push a2)
(push (@ 319))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
319
(eval ())
(push (@ 320))
(push (& 5))
(mov '1 a4)
(jmp outchan)
320
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
314
(eval ())
(adjstk '2)
310
(mov '0 (cvalq #:crunch:verbose))
(bra 113)
307
(cabeq a1 '-update 322)
(cabne a1 '-u 321)
322
(mov '-update a1)
(call #:llmodule:verif-option)
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-update a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 20))
(cnblt (cvalq #:crunch:verbose) '2 324)
(push (@ 325))
(mov '0 a4)
(jmp outchan)
325
(eval ())
(push a1)
(push (@ 326))
(mov '0 a4)
(jmp rmargin)
326
(eval ())
(push a1)
(push (@ 327))
(push dlink)
(push prot)
(stack dlink)
(push (@ 329))
(push nil)
(mov '1 a4)
(jmp outchan)
329
(eval ())
(push (@ 330))
(push (@ 331))
(mov '0 a4)
(jmp outbuf)
331
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
330
(eval ())
(push (@ 332))
(push '">>>>> will update module : ")
(push (& 27))
(mov '2 a4)
(jmp print)
332
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 328) a3)
327
(push a3)
(push a2)
(push (@ 333))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
333
(eval ())
(push (@ 334))
(push (& 5))
(mov '1 a4)
(jmp outchan)
334
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
328
(eval ())
(adjstk '2)
324
(mov (& 20) (& 11))
(mov 't (cvalq #:crunch:keep-wrong))
(mov 't (cvalq #:crunch:update-desc))
(mov 't (cvalq #:crunch:update-base))
(bra 113)
321
(cabeq a1 '-nowrite 336)
(cabne a1 '-no 335)
336
(cnblt (cvalq #:crunch:verbose) '2 338)
(push (@ 339))
(mov '0 a4)
(jmp outchan)
339
(eval ())
(push a1)
(push (@ 340))
(mov '0 a4)
(jmp rmargin)
340
(eval ())
(push a1)
(push (@ 341))
(push dlink)
(push prot)
(stack dlink)
(push (@ 343))
(push nil)
(mov '1 a4)
(jmp outchan)
343
(eval ())
(push (@ 344))
(push (@ 345))
(mov '0 a4)
(jmp outbuf)
345
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
344
(eval ())
(push (@ 346))
(push '">>>>> just to see!")
(mov '1 a4)
(jmp print)
346
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 342) a3)
341
(push a3)
(push a2)
(push (@ 347))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
347
(eval ())
(push (@ 348))
(push (& 5))
(mov '1 a4)
(jmp outchan)
348
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
342
(eval ())
(adjstk '2)
338
(mov 't (cvalq #:crunch:keep-old))
(bra 113)
335
(cabeq a1 '-nodynamic 350)
(cabne a1 '-nodyn 349)
350
(cnblt (cvalq #:crunch:verbose) '2 352)
(push (@ 353))
(mov '0 a4)
(jmp outchan)
353
(eval ())
(push a1)
(push (@ 354))
(mov '0 a4)
(jmp rmargin)
354
(eval ())
(push a1)
(push (@ 355))
(push dlink)
(push prot)
(stack dlink)
(push (@ 357))
(push nil)
(mov '1 a4)
(jmp outchan)
357
(eval ())
(push (@ 358))
(push (@ 359))
(mov '0 a4)
(jmp outbuf)
359
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
358
(eval ())
(push (@ 360))
(push '">>>>> don't considere dynamic calls")
(mov '1 a4)
(jmp print)
360
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 356) a3)
355
(push a3)
(push a2)
(push (@ 361))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
361
(eval ())
(push (@ 362))
(push (& 5))
(mov '1 a4)
(jmp outchan)
362
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
356
(eval ())
(adjstk '2)
352
(mov nil (cvalq #:crunch:dynamic-caller))
(bra 113)
349
(cabeq a1 '-dynamic 364)
(cabne a1 '-dyn 363)
364
(cnblt (cvalq #:crunch:verbose) '2 366)
(push (@ 367))
(mov '0 a4)
(jmp outchan)
367
(eval ())
(push a1)
(push (@ 368))
(mov '0 a4)
(jmp rmargin)
368
(eval ())
(push a1)
(push (@ 369))
(push dlink)
(push prot)
(stack dlink)
(push (@ 371))
(push nil)
(mov '1 a4)
(jmp outchan)
371
(eval ())
(push (@ 372))
(push (@ 373))
(mov '0 a4)
(jmp outbuf)
373
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
372
(eval ())
(push (@ 374))
(push '">>>>> considere dynamic calls")
(mov '1 a4)
(jmp print)
374
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 370) a3)
369
(push a3)
(push a2)
(push (@ 375))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
375
(eval ())
(push (@ 376))
(push (& 5))
(mov '1 a4)
(jmp outchan)
376
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
370
(eval ())
(adjstk '2)
366
(mov 't (cvalq #:crunch:dynamic-caller))
(bra 113)
363
(cabeq a1 '-r 378)
(cabne a1 '-recursive 377)
378
(cnblt (cvalq #:crunch:verbose) '2 380)
(push (@ 381))
(mov '0 a4)
(jmp outchan)
381
(eval ())
(push a1)
(push (@ 382))
(mov '0 a4)
(jmp rmargin)
382
(eval ())
(push a1)
(push (@ 383))
(push dlink)
(push prot)
(stack dlink)
(push (@ 385))
(push nil)
(mov '1 a4)
(jmp outchan)
385
(eval ())
(push (@ 386))
(push (@ 387))
(mov '0 a4)
(jmp outbuf)
387
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
386
(eval ())
(push (@ 388))
(push '">>>>> do recursive analyze")
(mov '1 a4)
(jmp print)
388
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 384) a3)
383
(push a3)
(push a2)
(push (@ 389))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
389
(eval ())
(push (@ 390))
(push (& 5))
(mov '1 a4)
(jmp outchan)
390
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
384
(eval ())
(adjstk '2)
380
(mov 't (cvalq #:crunch:recursive-analyze))
(bra 113)
377
(cabeq a1 '-delete 392)
(cabne a1 '-del 391)
392
(mov '-delete a1)
(call #:llmodule:verif-option)
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-delete a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 20))
(cnblt (cvalq #:crunch:verbose) '2 394)
(push (@ 395))
(mov '0 a4)
(jmp outchan)
395
(eval ())
(push a1)
(push (@ 396))
(mov '0 a4)
(jmp rmargin)
396
(eval ())
(push a1)
(push (@ 397))
(push dlink)
(push prot)
(stack dlink)
(push (@ 399))
(push nil)
(mov '1 a4)
(jmp outchan)
399
(eval ())
(push (@ 400))
(push (@ 401))
(mov '0 a4)
(jmp outbuf)
401
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
400
(eval ())
(push (@ 402))
(push '">>>>> delete module : ")
(push (& 27))
(mov '2 a4)
(jmp print)
402
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 398) a3)
397
(push a3)
(push a2)
(push (@ 403))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
403
(eval ())
(push (@ 404))
(push (& 5))
(mov '1 a4)
(jmp outchan)
404
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
398
(eval ())
(adjstk '2)
394
(mov (& 16) a2)
(mov (& 20) a1)
(jcall cons)
(mov a1 (& 16))
(bra 113)
391
(cabeq a1 '-create 406)
(cabne a1 '-init 405)
406
(mov '-init a1)
(call #:llmodule:verif-option)
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-init a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(cnblt (cvalq #:crunch:verbose) '2 408)
(push (@ 409))
(mov '0 a4)
(jmp outchan)
409
(eval ())
(push a1)
(push (@ 410))
(mov '0 a4)
(jmp rmargin)
410
(eval ())
(push a1)
(push (@ 411))
(push dlink)
(push prot)
(stack dlink)
(push (@ 413))
(push nil)
(mov '1 a4)
(jmp outchan)
413
(eval ())
(push (@ 414))
(push (@ 415))
(mov '0 a4)
(jmp outbuf)
415
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
414
(eval ())
(push (@ 416))
(push '">>>>> create new project's makefile from scratch")
(mov '1 a4)
(jmp print)
416
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 412) a3)
411
(push a3)
(push a2)
(push (@ 417))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
417
(eval ())
(push (@ 418))
(push (& 5))
(mov '1 a4)
(jmp outchan)
418
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
412
(eval ())
(adjstk '2)
408
(mov 't (& 19))
(bra 113)
405
(cabne a1 '-merge 419)
420
(mov '-merge a1)
(call #:llmodule:verif-option)
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-merge a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(mov (& 22) a1)
(mov (car a1) a1)
(jcall find-rt-project)
(push a1)
(mov (& 23) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall find-rt-project)
(push a1)
(bfnil (& 1) 422)
(mov (& 24) a3)
(mov (car a3) a3)
(mov 'unknownprj a2)
(mov 'sh-analyze a1)
(jcall error)
422
(bfnil (& 0) 424)
(mov (& 24) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov 'unknownprj a2)
(mov 'sh-analyze a1)
(jcall error)
424
(mov (& 0) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (& 17))
(adjstk '2)
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(cnblt (cvalq #:crunch:verbose) '2 113)
(push (@ 427))
(mov '0 a4)
(jmp outchan)
427
(eval ())
(push a1)
(push (@ 428))
(mov '0 a4)
(jmp rmargin)
428
(eval ())
(push a1)
(push (@ 429))
(push dlink)
(push prot)
(stack dlink)
(push (@ 431))
(push nil)
(mov '1 a4)
(jmp outchan)
431
(eval ())
(push (@ 432))
(push (@ 433))
(mov '0 a4)
(jmp outbuf)
433
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
432
(eval ())
(push (@ 434))
(push '">>>>> merge 2 project's refences files : ")
(mov (& 22) a4)
(hpxmov (car a4) '0 a4)
(push a4)
(push '" & ")
(mov (& 24) a4)
(hpxmov (cdr a4) '0 a4)
(push a4)
(mov '4 a4)
(jmp print)
434
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 430) a3)
429
(push a3)
(push a2)
(push (@ 435))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
435
(eval ())
(push (@ 436))
(push (& 5))
(mov '1 a4)
(jmp outchan)
436
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
430
(eval ())
(adjstk '2)
(bra 113)
419
(cabne a1 '-build 437)
(mov '-build a1)
(call #:llmodule:verif-option)
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-build a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(cnblt (cvalq #:crunch:verbose) '2 439)
(push (@ 440))
(mov '0 a4)
(jmp outchan)
440
(eval ())
(push a1)
(push (@ 441))
(mov '0 a4)
(jmp rmargin)
441
(eval ())
(push a1)
(push (@ 442))
(push dlink)
(push prot)
(stack dlink)
(push (@ 444))
(push nil)
(mov '1 a4)
(jmp outchan)
444
(eval ())
(push (@ 445))
(push (@ 446))
(mov '0 a4)
(jmp outbuf)
446
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
445
(eval ())
(push (@ 447))
(push '">>>>> build reference base from .lm for project : ")
(hpxmov (cvalq #:crunch:current-project) '0 a4)
(push a4)
(mov '2 a4)
(jmp print)
447
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 443) a3)
442
(push a3)
(push a2)
(push (@ 448))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
448
(eval ())
(push (@ 449))
(push (& 5))
(mov '1 a4)
(jmp outchan)
449
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
443
(eval ())
(adjstk '2)
439
(mov 't (& 14))
(bra 113)
437
(cabne a1 '-config 450)
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-config a1)
(jcall cons)
(mov a1 (cvalq #:llmodule:option-encountered))
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(push (car a4))
(push nil)
(mov (& 1) a1)
(jcall probefile)
(bfnil a1 452)
(mov (& 1) a3)
(mov 'errfile a2)
(mov 'sh-analyze a1)
(jcall error)
452
(mov (& 1) a1)
(jcall probepathf)
(mov a1 (cvalq #:crunch:config-file))
(cnblt (cvalq #:crunch:verbose) '2 454)
(push (@ 455))
(mov '0 a4)
(jmp outchan)
455
(eval ())
(push a1)
(push (@ 456))
(mov '0 a4)
(jmp rmargin)
456
(eval ())
(push a1)
(push (@ 457))
(push dlink)
(push prot)
(stack dlink)
(push (@ 459))
(push nil)
(mov '1 a4)
(jmp outchan)
459
(eval ())
(push (@ 460))
(push (@ 461))
(mov '0 a4)
(jmp outbuf)
461
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
460
(eval ())
(push (@ 462))
(push '">>>>> reading options from : ")
(push (& 8))
(mov '2 a4)
(jmp print)
462
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 458) a3)
457
(push a3)
(push a2)
(push (@ 463))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
463
(eval ())
(push (@ 464))
(push (& 5))
(mov '1 a4)
(jmp outchan)
464
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
458
(eval ())
(adjstk '2)
454
(push (@ 465))
(mov '0 a4)
(jmp inchan)
465
(eval ())
(push a1)
(push (@ 466))
(push dlink)
(push prot)
(stack dlink)
(push (@ 468))
(mov (& 6) a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
468
(eval ())
(push (@ 469))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
470
(jcall read)
(mov (& 8) a2)
(jcall cons)
(mov a1 (& 8))
(bra 470)
471
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
469
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 467) a3)
466
(push a3)
(push a2)
(push (@ 472))
(push (& 4))
(mov '1 a4)
(jmp inchan)
472
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
467
(eval ())
(adjstk '1)
(push (@ 473))
(mov (& 1) a1)
(jcall nreverse)
(push a1)
(push (& 26))
(mov '2 a4)
(jmp append)
473
(eval ())
(mov a1 (& 24))
(adjstk '2)
(bra 113)
450
(cabeq a1 '-usage 475)
(cabne a1 '-help 474)
475
(push '2)
(push (cvalq #:crunch:verbose))
(mov (& 1) (cvalq #:crunch:verbose))
(push '1)
(push '(#:crunch:verbose))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '-usage a1)
(jcall #:llmodule:display-usage)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:verbose))
(adjstk '8)
(bra 113)
474
(cabeq a1 '-verbose 477)
(cabne a1 '-v 476)
477
(mov (& 22) a4)
(mov (cdr a4) (& 22))
(mov (car a4) (& 20))
(mov (& 20) a1)
(jcall numberp)
(bfnil a1 479)
(mov (& 20) a2)
(mov 'errnna a1)
(call #:llmodule:printerror)
479
(mov (& 20) (cvalq #:crunch:verbose))
(cnblt (cvalq #:crunch:verbose) '2 113)
(push (@ 482))
(mov '0 a4)
(jmp outchan)
482
(eval ())
(push a1)
(push (@ 483))
(mov '0 a4)
(jmp rmargin)
483
(eval ())
(push a1)
(push (@ 484))
(push dlink)
(push prot)
(stack dlink)
(push (@ 486))
(push nil)
(mov '1 a4)
(jmp outchan)
486
(eval ())
(push (@ 487))
(push (@ 488))
(mov '0 a4)
(jmp outbuf)
488
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
487
(eval ())
(push (@ 489))
(push '">>>>> verbose mode level = ")
(push (& 27))
(mov '2 a4)
(jmp print)
489
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 485) a3)
484
(push a3)
(push a2)
(push (@ 490))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
490
(eval ())
(push (@ 491))
(push (& 5))
(mov '1 a4)
(jmp outchan)
491
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
485
(eval ())
(adjstk '2)
(bra 113)
476
(mov (& 20) a2)
(mov '"unknown option" a1)
(call #:llmodule:printerror)
(bra 113)
114
(bfnil (cvalq #:crunch:current-project) 494)
(mov (& 22) a2)
(mov '"you must specified current project with option -project" a1)
(call #:llmodule:printerror)
494
(mov (cvalq #:llmodule:option-encountered) a2)
(mov '-defmodule a1)
(jcall memq)
(bfnil a1 497)
(btnil (cvalq #:crunch:keep-wrong) 495)
497
(bfnil (& 12) 499)
(bfnil (cvalq #:crunch:keep-wrong) 499)
(btnil (& 10) 500)
(mov (& 10) a4)
(mov (car a4) (& 12))
(cnblt (cvalq #:crunch:verbose) '1 499)
(push (@ 504))
(push (@ 505))
(push '".. ")
(push '"-defmodule option should be used; assuming module name is")
(push '" : ")
(mov '3 a4)
(jmp catenate)
505
(eval ())
(push a1)
(push (& 14))
(mov '2 a4)
(jmp print)
504
(eval ())
(bra 499)
500
(mov nil a2)
(mov '"-defmodule option should be used" a1)
(call #:llmodule:printerror)
499
(push (@ 506))
(push 'let)
(push (@ 507))
(push '#:system:path)
(push (@ 508))
(push 'cons)
(mov (& 17) a1)
(call #:llmodule:directory)
(push a1)
(push '(#:system:path))
(mov '3 a4)
(jmp mcons)
508
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
507
(eval ())
(jcall ncons)
(push a1)
(push (@ 509))
(push 'analyze)
(push (@ 510))
(push 'quote)
(mov (& 19) a4)
(bfnil a4 511)
(mov (& 18) a1)
(jcall pathname)
(jcall pathname-name)
(mov a1 a2)
(mov nil a1)
(jcall symbol)
(mov a1 a4)
511
(push a4)
(mov '2 a4)
(jmp list)
510
(eval ())
(push a1)
(push (@ 512))
(push 'quote)
(push (& 29))
(mov '2 a4)
(jmp list)
512
(eval ())
(push a1)
(push (@ 513))
(push 'quote)
(push (& 20))
(mov '2 a4)
(jmp list)
513
(eval ())
(push a1)
(push (@ 514))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
514
(eval ())
(push a1)
(push (@ 515))
(push 'quote)
(push (& 21))
(mov '2 a4)
(jmp list)
515
(eval ())
(push a1)
(push (@ 516))
(push 'quote)
(push (& 20))
(mov '2 a4)
(jmp list)
516
(eval ())
(push a1)
(push (@ 517))
(push 'quote)
(push (& 20))
(mov '2 a4)
(jmp list)
517
(eval ())
(push a1)
(mov '8 a4)
(jmp list)
509
(eval ())
(push a1)
(push (cvalq #:crunch:current-project))
(mov '4 a4)
(jmp list)
506
(eval ())
(bra 496)
495
(btnil (& 18) 518)
(push (@ 520))
(push 'let)
(push '((#:system:path '(""))))
(push (@ 521))
(push '#:llmodule:step1)
(push nil)
(push (@ 522))
(push 'quote)
(push (& 29))
(mov '2 a4)
(jmp list)
522
(eval ())
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
521
(eval ())
(push a1)
(push (@ 523))
(push '#:llmodule:makefile:step2)
(push (@ 524))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
524
(eval ())
(push a1)
(push (@ 525))
(push 'quote)
(push (cvalq #:crunch:current-project))
(mov '2 a4)
(jmp list)
525
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
523
(eval ())
(push a1)
(push (@ 526))
(push 'quote)
(hpxmov (cvalq #:crunch:current-project) '14 a4)
(push a4)
(mov '2 a4)
(jmp list)
526
(eval ())
(push a1)
(mov '5 a4)
(jmp list)
520
(eval ())
(bra 496)
518
(btnil (& 17) 527)
(push (@ 529))
(push 'let)
(push '((#:system:path '(""))))
(push (@ 530))
(push '#:llmodule:step1)
(push (@ 531))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
531
(eval ())
(push a1)
(push (@ 532))
(push 'quote)
(push (& 29))
(mov '2 a4)
(jmp list)
532
(eval ())
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
530
(eval ())
(push a1)
(push (@ 533))
(push '#:llmodule:meta:step2)
(push (@ 534))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
534
(eval ())
(push a1)
(push (@ 535))
(push 'quote)
(push (cvalq #:crunch:current-project))
(mov '2 a4)
(jmp list)
535
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
533
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
529
(eval ())
(bra 496)
527
(btnil (& 16) 536)
(hpxmov (cvalq #:crunch:current-project) '0 a1)
(jcall find-rt-group-project)
(btnil a1 539)
(mov (cvalq #:crunch:current-project) a3)
(mov '"No deletable module in group-project" a2)
(mov '-delete a1)
(jcall error)
539
(push (@ 540))
(push '#:llmodule:delete-modules)
(push (@ 541))
(push 'quote)
(hpxmov (cvalq #:crunch:current-project) '12 a4)
(push a4)
(mov '2 a4)
(jmp list)
541
(eval ())
(push a1)
(push (@ 542))
(push 'quote)
(push (& 21))
(mov '2 a4)
(jmp list)
542
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
540
(eval ())
(bra 496)
536
(btnil (& 19) 543)
(push (@ 545))
(push 'let)
(push '((#:system:path '(""))))
(push (@ 546))
(push '#:llmodule:step1)
(push nil)
(push (@ 547))
(push 'quote)
(push (& 29))
(mov '2 a4)
(jmp list)
547
(eval ())
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
546
(eval ())
(push a1)
(push (@ 548))
(push '#:llmodule:init:step2)
(push (@ 549))
(push 'quote)
(push (& 19))
(mov '2 a4)
(jmp list)
549
(eval ())
(push a1)
(push (@ 550))
(push 'quote)
(push (cvalq #:crunch:current-project))
(mov '2 a4)
(jmp list)
550
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
548
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
545
(eval ())
(bra 496)
543
(btnil (& 15) 551)
(push (@ 553))
(push '#:llmodule:merge-ref)
(push (@ 554))
(push 'quote)
(push (cvalq #:crunch:current-project))
(mov '2 a4)
(jmp list)
554
(eval ())
(push a1)
(push (@ 555))
(push 'quote)
(mov (& 20) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
555
(eval ())
(push a1)
(push (@ 556))
(push 'quote)
(mov (& 21) a4)
(push (cdr a4))
(mov '2 a4)
(jmp list)
556
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
553
(eval ())
(bra 496)
551
(btnil (& 14) 557)
(push (@ 559))
(push 'let)
(push '((#:system:path '(""))))
(push (@ 560))
(push '#:llmodule:step1)
(push nil)
(push (@ 561))
(push 'quote)
(push (& 29))
(mov '2 a4)
(jmp list)
561
(eval ())
(push a1)
(push '(()))
(mov '4 a4)
(jmp mcons)
560
(eval ())
(push a1)
(push '(#:crunch:print "===== STEP 2 : building references file"))
(push (@ 562))
(push '#:llmodulereferences:build-ref-from-lm)
(push (@ 563))
(push 'quote)
(push (cvalq #:crunch:current-project))
(mov '2 a4)
(jmp list)
563
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
562
(eval ())
(push a1)
(mov '5 a4)
(jmp list)
559
(eval ())
(bra 496)
557
(push (cvalq #:llmodule:excluded-options))
(push nil)
564
(bfcons (& 1) 565)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 564)
565
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(mov '"nothing to do! one of this options must be specified" a1)
(call #:llmodule:printerror)
496
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llmodule:option-encountered))
(adjstk '23)
(return)
))
(loader'((entry #:llmodule:directory subr1)
(jcall pathname)
(jmp directory-namestring)
))
(defvar #:llmodule:excluded-options '((-defmodule -update -makefile -meta -delete -merge -init) (-files -update -makefile -meta -delete -merge -init) (-update -defmodule -makefile -meta -delete -merge -init) (-makefile -defmodule -update -meta -delete -merge -init) (-meta -defmodule -update -makefile -delete -merge -init) (-delete -defmodule -update -makefile -meta -merge -init) (-merge -defmodule -update -makefile -meta -delete -init) (-init -defmodule -update -makefile -meta -delete -merge)))
(loader'((entry #:llmodule:verif-option subr1)
(push a1)
(mov (cvalq #:llmodule:excluded-options) a2)
(jcall cassq)
(push a1)
(push (@ 103))
(push a1)
(push (cvalq #:llmodule:option-encountered))
(mov '2 a4)
(jmp intersection)
103
(eval ())
(mov a1 (& 0))
(btnil a1 101)
(mov a1 a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 a2)
(mov '"exclusive options" a1)
(adjstk '2)
(bra #:llmodule:printerror)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:llmodule:printerror subr2)
(push a2)
(push a1)
(push (@ 101))
(push '"**")
(mov '1 a4)
(jmp print)
101
(eval ())
(mov (& 1) a3)
(mov (& 0) a2)
(mov 'sh-analyze a1)
(jcall printerror)
(push (@ 102))
(push '"**")
(mov '1 a4)
(jmp print)
102
(eval ())
(mov (& 0) a1)
(adjstk '2)
(jmp #:llmodule:display-usage)
))
(loader'((entry #:llmodule:source-file-p subr1)
(jcall namestring)
(push a1)
(hgsize a1 a1)
(mov '3 a2)
(jcall lt)
(bfnil a1 101)
(push (@ 104))
(push (& 1))
(hgsize (& 2) a4)
(diff '3 a4)
(push a4)
(push '3)
(mov '3 a4)
(jmp substring)
104
(eval ())
(mov a1 a2)
(mov '".lm" a1)
(jcall eqstring)
(btnil a1 102)
(mov nil a1)
(bra 101)
102
(mov 't a1)
101
(adjstk '1)
(return)
))
(loader'((fentry #:llmodule:display-usage subr1)
(entry #:llmodule:display-usage subr1)
(cnblt (cvalq #:crunch:verbose) '1 102)
(push (@ 103))
(push '"usage : sh-analyze               ;;")
(mov '1 a4)
(jmp print)
103
(eval ())
(push (@ 104))
(push '"           ;; to fabricate .lm from scratch")
(mov '1 a4)
(jmp print)
104
(eval ())
(push (@ 105))
(push '"            [-defmodule mod]     ;; name of module")
(mov '1 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push '"           ;; to keep former modules :")
(mov '1 a4)
(jmp print)
106
(eval ())
(push (@ 107))
(push '"            [-update target.lm]  ;; update given module target.lm")
(mov '1 a4)
(jmp print)
107
(eval ())
(push (@ 108))
(push '"           ;; influence analyze :")
(mov '1 a4)
(jmp print)
108
(eval ())
(push (@ 109))
(push '"            [-files file.ll]     ;; files composing module")
(mov '1 a4)
(jmp print)
109
(eval ())
(push (@ 110))
(push '"            [-include file]      ;; include file")
(mov '1 a4)
(jmp print)
110
(eval ())
(push (@ 111))
(push '"            [-import mod]        ;; import module")
(mov '1 a4)
(jmp print)
111
(eval ())
(push (@ 112))
(push '"            [-export fct]        ;; export function")
(mov '1 a4)
(jmp print)
112
(eval ())
(push (@ 113))
(push '"            [-allexport]         ;; export all functions defined")
(mov '1 a4)
(jmp print)
113
(eval ())
(push (@ 114))
(push '"            [-includeflag]       ;; to use module's field INCLUDE")
(mov '1 a4)
(jmp print)
114
(eval ())
(push (@ 115))
(push '"            [-output target.lm]  ;; force path & name of result module")
(mov '1 a4)
(jmp print)
115
(eval ())
(push (@ 116))
(push '"            [-project project]   ;; current project")
(mov '1 a4)
(jmp print)
116
(eval ())
(push (@ 117))
(push '"            [-load file]         ;; load file")
(mov '1 a4)
(jmp print)
117
(eval ())
(push (@ 118))
(push '"            [-r]                 ;; do recursive analyze on imports")
(mov '1 a4)
(jmp print)
118
(eval ())
(push (@ 119))
(push '"            [-verbose 0,1,2]     ;; verbose level.")
(mov '1 a4)
(jmp print)
119
(eval ())
(push (@ 120))
(push '"            [-nowrite]           ;; just to see!")
(mov '1 a4)
(jmp print)
120
(eval ())
(push (@ 121))
(push '"            [-dynamic/-nodynamic];; considere or not, dynamic calls")
(mov '1 a4)
(jmp print)
121
(eval ())
(push (@ 122))
(push '"           ;; to work directly on reference file :")
(mov '1 a4)
(jmp print)
122
(eval ())
(push (@ 123))
(push '"            [-delete module]     ;; delete module from references file")
(mov '1 a4)
(jmp print)
123
(eval ())
(push (@ 124))
(push '"           ;; to fabricate meta module :")
(mov '1 a4)
(jmp print)
124
(eval ())
(push (@ 125))
(push '"            [-meta]              ;; generate metamodule")
(mov '1 a4)
(jmp print)
125
(eval ())
(push (@ 126))
(push '"           ;; to fabricate makefiles :")
(mov '1 a4)
(jmp print)
126
(eval ())
(push (@ 127))
(push '"            [-dependency 0,1,2]  ;; dependency level in Makefiles")
(mov '1 a4)
(jmp print)
127
(eval ())
(push (@ 128))
(push '"            [-makefile]          ;; generate compiler Makefile")
(mov '1 a4)
(jmp print)
128
(eval ())
(push (@ 129))
(push '"            [-init]              ;; generate analyzer Makefile")
(mov '1 a4)
(jmp print)
129
(eval ())
(push (@ 130))
(push '"           ;; help")
(mov '1 a4)
(jmp print)
130
(eval ())
(push (@ 131))
(push '"            [-usage]             ;; this usage")
(mov '1 a4)
(jmp print)
131
(eval ())
(push (@ 132))
(mov '0 a4)
(jmp terpri)
132
(eval ())
102
(push (@ 133))
(mov '0 a4)
(jmp end)
133
(eval ())
(return)
))
(loader '((end)))
