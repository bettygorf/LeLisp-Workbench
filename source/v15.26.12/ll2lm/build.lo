(loader '((title |build.lo|)))
(setq #:sys-package:colon 'llmodulereferences)
(loader'((fentry #:llmodulereferences:build-ref-from-lm subr1)
(entry #:llmodulereferences:build-ref-from-lm subr1)
(push a1)
(push (@ 101))
(push a1)
(hpxmov a1 '11 a4)
(bfnil a4 102)
(mov '"lm" a4)
102
(push a4)
(mov '2 a4)
(jmp #:rtproject:all-files)
101
(eval ())
(push a1)
(push (@ 103))
(push '".")
(hpxmov (& 3) '11 a4)
(bfnil a4 104)
(mov '"lm" a4)
104
(push a4)
(mov '2 a4)
(jmp catenate)
103
(eval ())
(push nil)
(push (cvalq #:system:mod-extension))
(mov a1 (cvalq #:system:mod-extension))
(push (cvalq #:crunch:keep-old))
(mov (& 2) (cvalq #:crunch:keep-old))
(push '2)
(push '(#:system:mod-extension #:crunch:keep-old))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov (& 10) '0 a1)
(push a1)
(push (& 10))
(push nil)
105
(bfcons (& 1) 106)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a2)
(mov nil a1)
(jcall symbol)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(pop a1)
(call #:llmodulereferences:set-ref)
(hpxmov (& 10) '12 a2)
(jcall #:llmodulereferences:write-to-file)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:crunch:keep-old))
(mov (& 7) (cvalq #:system:mod-extension))
(adjstk '11)
(return)
))
(loader'((entry #:llmodulereferences:set-ref subr2)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp standardmodulereferences)
101
(eval ())
(push a1)
(hpmovx (& 1) a1 '0)
(mov (& 2) a2)
(call #:llmodulereferences:fill-modules-references)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((entry #:llmodulereferences:fill-modules-references subr2)
(push a2)
(push a1)
(cnblt (cvalq #:crunch:verbose) '1 102)
(push (@ 103))
(push (@ 104))
(push '".. ")
(push '"fill modules references")
(push '" : ")
(mov '3 a4)
(jmp catenate)
104
(eval ())
(push a1)
(push '"...")
(mov '2 a4)
(jmp print)
103
(eval ())
102
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push (& 7))
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 109))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 12) a1)
(jcall readdefmodule)
(mov a1 (& 18))
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
109
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 107)
(mov (& 0) a3)
(mov '"read module failed" a2)
(mov '-build a1)
(jcall printerror)
(bra 108)
107
(mov (& 0) (& 7))
(mov 'import a2)
(mov (& 6) a1)
(jcall getdefmodule)
(mov a1 a2)
(mov (& 7) a1)
(jcall cons)
(mov (& 5) a2)
(jcall cons)
(mov a1 (& 5))
(push (@ 110))
(mov 'export a2)
(mov (& 7) a1)
(jcall getdefmodule)
(push a1)
(mov 'cpexport a2)
(mov (& 8) a1)
(jcall getdefmodule)
(push a1)
(push nil)
111
(bfcons (& 1) 112)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 111)
112
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp union)
110
(eval ())
(mov a1 a2)
(mov (& 7) a1)
(jcall cons)
(mov (& 4) a2)
(jcall cons)
(mov a1 (& 4))
(mov 'cpenv a2)
(mov (& 6) a1)
(jcall getdefmodule)
(call #:llmodulereferences:retrieve-definers)
(btnil a1 114)
(mov a1 a2)
(mov (& 7) a1)
(jcall cons)
(push (@ 115))
(push (& 4))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
115
(eval ())
(mov a1 (& 3))
114
(mov 'cpfunctions a2)
(mov (& 6) a1)
(jcall getdefmodule)
(push a1)
(push nil)
116
(bfcons (& 1) 117)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 116)
117
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(btnil a1 108)
(mov a1 a2)
(mov (& 7) a1)
(jcall cons)
(push (@ 120))
(push (& 3))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
120
(eval ())
(mov a1 (& 2))
108
(adjstk '1)
(bra 105)
106
(adjstk '1)
(hpmovx (& 3) (& 6) '1)
(hpmovx (& 2) (& 6) '2)
(hpmovx (& 1) (& 6) '3)
(hpmovx (& 0) (& 6) '4)
(mov (& 6) a1)
(adjstk '8)
(return)
))
(loader'((entry #:llmodulereferences:retrieve-definers subr1)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(bfcons (& 0) 103)
(push (& 0))
(push nil)
105
(bfcons (& 1) 106)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall #:llmodulereferences:retrieve-definer)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(jmp nreverse)
))
(loader'((fentry #:llmodulereferences:retrieve-definer subr1)
(entry #:llmodulereferences:retrieve-definer subr1)
(push a1)
(push nil)
(bfcons a1 101)
(cabne (car a1) 'progn 103)
(mov (cdr a1) a1)
(adjstk '2)
(bra #:llmodulereferences:retrieve-definers)
103
(mov (car a1) a1)
(jcall #:llmodule:definerp)
(mov a1 (& 0))
(btnil a1 105)
(push (@ 107))
(push a1)
(mov (& 3) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp funcall)
107
(eval ())
(adjstk '2)
(jmp ncons)
105
(mov nil a1)
(adjstk '2)
(return)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader '((end)))
