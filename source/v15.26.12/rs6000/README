





	      Installation Notice for Le-Lisp 15.26
			     For IBM RS/6000
			      under X11R5

Dear user,

You have installed Le-Lisp 15.26 on your disk.	This  notice
allows	you to configure or reconfigure	Le-Lisp	according to
your needs.  You should	distribute this	document to all	 Le-
Lisp users at your site; they will certainly find it useful.

This notice is divided into three sections:

 * The first section describes all of  Le-Lisp's  configura-
tion  modes for	binary and memory image	files.	This section
describes the way to create the	standard binary	 and  memory
image  files as	well as	the way	to create your own personal-
ized binaries and images.

Le-Lisp	is currently configured	for X11R5, so we  will	also
see  how  to  configure	Le-Lisp	for X11R4 if such a need ar-
ises.

 * The second section gives further information	for the	 cu-
rious about certain features of	Le-Lisp.  It explains how to
install	the Le-Lisp UNIX manual	page and how to	use the	 Le-
Lisp validation	test suite.  The last paragraph	speaks about
the product's future evolution.

 * The third section describes what you	need to	 do  if	 Le-
Lisp  is  not  to  be  installed  in  the standard directory
/usr/ilog/lelisp.


I/   POSSIBLE CONFIGURATIONS


Binary creation

     A certain number of Le-Lisp binaries are  supplied	 and
     ready  to	be  used.   These  binaries are	found in the
     directory lelisp/rs6000.  Standardly, there are:

     lelispbin:	standard binary	for the	Le-Lisp	kernel.

     leX11bin: binary linked  with  X  Windows	version	 11,
     which  is	used  by  the  graphic tools including Aida,



		      January 25, 1995





			   - 2 -


     Masai, Smeci, and so on.

     Other  binaries  can  be  created	using  the   Le-Lisp
     Makefile.	 All  possible combinations of the following
     parameters	can be generated using this Makefile:

      *	Use of 31 or 64	bit floating  point  numbers.	(See
     below for details.)

      *	Linking	the binary with	X11 library code.

     In	all, you can make the  following  standard  binaries
     using the Le-Lisp Makefile	on IBM RS/6000:

     lelisp31bin,

     lelisp64bin,

     lelisp31X11bin,

     lelisp64X11bin,

     Example:

	   $ cd	/usr/ilog/lelisp/rs6000

	   $ make lelisp64bin FLT=64 ->	with 64	bit floats

     You can make your own Le-Lisp binaries linked with	your
     own  C  or	Fortran	object files, to create	a static Le-
     Lisp interface with this so-called	`foreign code.'	 For
     this,  you	 should	 use  the `generic Makefile entries'
     found in the Le-Lisp Makefile.  These  generic  entries
     can  be redefined to use the name that you	like as	well
     as	the list of compiled object files to link  with	 the
     binaries,	the  compilation  flags	to use,	and the	Lisp
     libraries to be loaded.  The complete list	of  redefin-
     able Makefile variables, instructions, and	examples can
     be	found in the Le-Lisp Unix manual page (lelisp(1)).

     Please consult the	Le-Lisp	Unix manual page (lelisp(1))
     to	find out more.


Memory Image Creation

     Because of	space limitations for the  magnetic  support
     on	 which Le-Lisp was delivered to	you, no	memory image
     is	standardly supplied.  The standard memory images may
     be	created	using the Makefile.  By	default, the follow-
     ing images	are created by calling	the  command  `make'
     (see make(1)):

	lelisp (standard lelisp	image)



		      January 25, 1995





			   - 3 -


	cmplc++	(standard module compiler image)

	ll2lm (modules analyzer)

     Here is a transcript of  commands	to  type  to  create
     these images:

	     $ cd /usr/ilog/lelisp/rs6000

	     $ make

	     ./config cmplc++ lelispbin	Cmplcconf.ll -stack

	     ./config lelisp lelispbin Lelispconf.ll -stack

     The following  alternative	 binary-generating  Makefile
     entries also exist:

     Name	  Make command		   Description

     lelispX11	   make	 lelispX11	      Le-Lisp  image
     linked with the X11 virtual bitmap.

     lelispi	  make lelispi		    Interpreted	 Le-
     Lisp image.

     lelisp64	  make lelisp64	FLT=64	   64  bit  floating
     point numbers.

     You can create your own Le-Lisp memory images using the
     binaries  and  configuration  files of your choice, and
     which can be dimensioned as you wish.  To	do  so,	 use
     the  generic  Makefile  entries.	The complete list of
     redefinable Makefile variables as well as	instructions
     and  examples  are	described in the Le-Lisp Unix manual
     page (lelisp(1)).

     Don't hesitate to consult the Le-Lisp Unix	manual	page
     (lelisp(1)) to find out more.


Reconfiguration	of Le-Lisp for IOTHEROS

     Le-Lisp as	supplied works under X11R5.  If	your machine
     IBM  RS/6000 works	under X11R4 you	must reconfigure Le-
     Lisp.  For	this, the  command  `tosystem'	reconfigures
     Le-Lisp  for  one	or  the	 other of these	systems.  It
     works as follows:

	   $ cd	/usr/ilog/lelisp/rs6000

	   $ sh	tosystem X11R5





		      January 25, 1995





			   - 4 -


II For Those Who Wish to Know More:


64 Bit Floating	Point Coding

     Because of	 performance  and  space  concerns,  Le-Lisp
     floating  point  numbers  are  by	default	coded in one
     memory word using 31 bits,	reserving one bit for a	tag.
     This coding is precise to about 7 digits.

     If	you need greater precision, you	can reconfigure	your
     Le-Lisp binaries to use floating point numbers coded in
     64	bits.  The precision of	these floating point numbers
     is	 around	 12 digits.  The cost of this greater preci-
     sion is that  calculations	 will  be  about  two  times
     slower and	your memory needs will increase	since the 64
     bit floating point	numbers	are allocated  Lisp  objects
     rather  than  immediates.	The standard Makefile allows
     you to create a Le-Lisp memory image using	the  64	 bit
     floating point numbers using the following	command:

	   $ cd	/usr/ilog/lelisp/rs6000

	   $ make lelisp64 FLT=64


Link Editing

     To	communicate between Le-Lisp and	some other  language
     such  as  C  or Fortran, the user must link the Le-Lisp
     binary with one or	more external object files.

     This link must be done statically on the  Le-Lisp	port
     for IBM RS/6000 by	specifying the external	object files
     with which	you wish to link the binary in	the  Le-Lisp
     Makefile.	 The  function	CLOAD  does not	exist in the
     port for IBM RS/6000.  See	the above section on  binary
     creation  as  well	 as the	Le-Lisp	Unix manual page for
     further information.

     Note: To compile and  link	 foreign  language  programs
     with  the	Le-Lisp	binary,	you need a complete develop-
     ment environment on your machine, including the foreign
     language compiler and linker.  This includes


Le-Lisp	in the background

     Sometimes it is useful to start a process in the  back-
     ground:	Control	  in  the  terminal  is	 immediately
     returned to the user.   Le-Lisp's	functioning  in	 the
     background	 is  intimately	 connected to the event	loop
     which handles input and output to the  terminal.	This
     possibility  is especially	useful for products based on



		      January 25, 1995





			   - 5 -


     Le-Lisp which define their	own terminal  type  ---	 for
     example, the Aida terminal.

     A command like `aida &' executes in the background	 but
     is	 used  interactively via the Aida terminal.  You can
     therefore continue	to use the Unix	shell in the  window
     which started Aida.

     Although Le-Lisp does not use its own terminal,  it  is
     still  possible  to  start	Le-Lisp	in the background on
     IBM RS/6000, but only in non-interactive mode  ---	 ie,
     no	keyboard input is allowed.


Unix manual pages for Le-Lisp

     Le-Lisp manual pages for Unix, accessible via the	com-
     mand  `man',  are	supplied  with the Le-Lisp streamer.
     They    can    be	  found	    in	   the	   directory
     /usr/ilog/lelisp/manl.

     The available manual pages	are:

	  * lelisp.l: Describes	the command `lelisp' and its
     cohorts  with  explanations  concerning the creation of
     these commands as well as	the  creation  tool  itself.
     (See  make(1).)	  * complice.l:	Describes the module
     compiler complice.	      *	config.l: Describes the	com-
     mand  `config'  which  creates  Le-Lisp  memory images.
	  * newdir.l: Describes	the command  `newdir'  which
     updates the necessary Unix	path during installation.

     You can consult these manual pages	by  using  the	Unix
     command  `man' (see man(1)), by looking directly in the
     text of the manual	 pages,	 or  finally  by  installing
     these  manual pages at your site.	If you would like to
     read the manual page for complice for example, you	 can
     execute the following command:

	   $ man -M /usr/ilog/lelisp complice
	   ...

     Or	you can	recopy	the  files  into  the  local  manual
     directory	of your	machine, /usr/catman/local_man/man1.
     If	this directory does not	exist, you must	create it as
     the  super-user,  using  the following sequence of	com-
     mands:

	   $ su

	      password:	<mot de	passe du super-utilisateur>

	   # mkdir /usr/catman/local_man/man1




		      January 25, 1995





			   - 6 -


	   #	   cp	    /usr/ilog/lelisp/manl/complice.l
     /usr/catman/local_man/man1

	   #	    cp	      /usr/ilog/lelisp/manl/lelisp.l
     /usr/catman/local_man/man1

	   # <ctrl-D>

	   $ man complice
	   ...

     There are also preformatted versions  of  these  manual
     pages  in	the  directory	/usr/ilog/lelisp/manl.	 The
     files are named <file>.txt, and are  directly  readable
     using the following command:

	   $ cat /usr/ilog/lelisp/manl/complice.txt
	   ...


Le-Lisp	Validation

     Note: This	section	need not be systematically  followed
     after  a  standard	 installation.	 However,  it may be
     necessary following certain abnormal behavior in  order
     to	determine its origin.

     To	verify the Le-Lisp installation	or to  extract	cer-
     tain  performance	measurements, there are	several	com-
     mands in the directory  /usr/ilog/lelisp/rs6000/recette
     which  allow  you	to  launch the complete	Le-Lisp	test
     suite on your machine  or	to  launch  the	 performance
     measurement tools for your	machine.

     Note: The launching of the	complete test suites  neces-
     sitates  the  recompilation  of  C	runtime	component of
     Le-Lisp, which requires  the  presence  of	 a  complete
     development environment on	your machine, including

	   $ cd	/usr/ilog/lelisp/rs6000/recette

	   $ sh	Suites	   # to	start the test suite
	   ...

     Depending on the machine, these tests take	from 2 to  8
     hours.

	   $ sh	Bench	   # to	start the benchmarks
	   ...

     The results of the	benchmarks do not in any  case	pro-
     vide  an reliable measure of the machine.	They give at
     most a comparative	measure	of Le-Lisp's performance vis
     a	vis  other  ports.   These  test  suites destroy the



		      January 25, 1995





			   - 7 -


     existing binaries;	it is thus important to	remake	them
     using the following sequence of commands:

		  $  cd	 ..		    #  go  back	  to
     lelisp/rs6000
		  $ make		 # put all  back  in
     order
		  ...


Information about Le-Lisp Versions

     There are a certain number	of Le-Lisp versions  follow-
     ing the product's evolution.  All the information about
     these various versions are	 gathered  together  in	 the
     directory lelisp/info. Please consult this	directory to
     find out more.   These  files  exist  in  LaTeX  format
     (.tex),  in  raw  ASCII  format (.txt), and in compiled
     LaTeX format (.dvi) which can be printed using the	com-
     mand `lpr -d <file>'.


III/ Non-standard Installation

     You just copied Le-Lisp from the streamer to  somewhere
     on	 your  disk,  but  you	have not yet installed it in
     /usr/ilog/lelisp (even using symbolic links).  We	will
     call this directory <lelisp-dir>.


Updating Le-Lisp paths

     You must partially	reconfigure Le-Lisp to indicate	 the
     installation directory.  To do this, you place yourself
     in	the Le-Lisp directory rs6000  and  use	the  command
     `newdir'  which  will  update  this absolute directory.
     (See newdir(l).)  You  now only  have to  recreate  the
     standard memory images

     taking care to verify that	the standard Le-Lisp  confi-
     guration  corresponds  to	your  operating	system.	 You
     should therefore use the command  `tosystem';  see	 the
     first section of this notice.

	   $ cd	<repertoire-lelisp>/rs6000

	   $ sh	newdir	  # to update paths

	   $ make	 # to create standard images


Command	Accessibility




		      January 25, 1995





			   - 8 -


     You are now finished; Le-Lisp is installed.   The	com-
     mands which allow you to start Le-Lisp (lelisp and	com-
     plice)    can    be    found    in	   the	   directory
     /usr/ilog/lelisp/rs6000.  You can copy them in a direc-
     tory of your choice where they will  be  accessible  to
     all  of  your  site's  users --- often in the directory
     /usr/local/bin.  You can do  this	with  the  following
     sequence of commands:

	   $ cd	<repertoire-lelisp>/rs6000

	   $ su

	      password:	<mot de	passe du super-utilisateur>

	   # cp	complice lelisp	/usr/local/bin

	   # <ctrl-d>







































		      January 25, 1995


