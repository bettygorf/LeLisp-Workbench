(loader '(
(listext (prog2 prog1 exdef progn eprogn llident comment mlambda flambda lambda quote mapoblist maploblist mapcoblist mapvect fany fevery mapcan mapcon mapcar maplist mapc map selectq frepeat loop until while lland llor cond unless when llifn llif makedef getdef revert defvar llds dmd lldm lldf llde ini_ctl loc makevect equal nreconc nreverse member remprop putprop getprop addprop inicst inisymb evprogn ffuncall funcall evala1 evalcar gcnumb gcfloat gccons errfs erroob errbal errvec errwna errnva errnla errnia errsym evalan evalt))
(entry startmodule subr0)
	(title cntrl)
	(xrefi llinit hashtab)
	(xrefi llinit fcons)
	(xrefi llinit mstack)
	(xrefi llinit bvar)
	(xrefi llinit |.undef|)
	(xrefi llinit |.t|)
	(xrefi llinit |.void|)
	(xrefi llinit |.llsystem|)
	(xrefp toperr errsym)
	(xrefp toperr errnia)
	(xrefp toperr errnla)
	(xrefp toperr errnva)
	(xrefp toperr errwna)
	(xrefp toperr errvec)
	(xrefp toperr errbal)
	(xrefp toperr erroob)
	(xrefp toperr errfs)
	(xrefi toperr |.lsubr0|)
	(xrefi toperr |.lsubr1|)
	(xrefi toperr |.lsubr2|)
	(xrefi toperr |.lsubr3|)
	(xrefi toperr |.nlsubr|)
	(xrefi toperr |.flsubr|)
	(xrefi toperr |.llexpr|)
	(xrefi toperr |.llfexpr|)
	(xrefi toperr |.llmacro|)
	(xrefi toperr |.lldmacro|)
	(xrefi toperr |.llmsubr|)
	(xrefi toperr |.lldmsubr|)
	(xrefp gc gccons)
	(xrefp gc gcfloat)
	(xrefp gc gcnumb)
	(xrefp eval evalcar)
	(xrefp eval evala1)
	(xrefp eval funcall)
	(xrefp eval ffuncall)
	(xrefp eval evprogn)
	(xrefi eval savea1)
	(xrefi eval savea2)
	(xrefi eval errname)
	(xrefp read inisymb)
	(xrefp read inicst)
	(xrefp symbs addprop)
	(xrefp symbs getprop)
	(xrefp symbs putprop)
	(xrefp symbs remprop)
	(xrefp fntstd member)
	(xrefp fntstd nreverse)
	(xrefp fntstd nreconc)
	(xrefp fntstd equal)
	(xrefp string makevect)
	(xrefp bllsht loc)
	(xdefp ini_ctl)
	(xdefp llde)
	(xdefi |.quote|)
	(xdefi |.lambda|)
	(xdefi |.flambda|)
	(xdefi |.mlambda|)
	(xdefi |.progn|)
	(xdefi tabtypfn)
	(xdefi tabcodfn)
	(impure)
	(ladr tabtypfn 0)
	(ladr tabcodfn 0)
	(pure)
ini_ctl
	(eval ())
	(makcst lff '16 (strg "loaded-from-file"))
	(mov |.llsystem| (pkgc a1))
	(movnil (cval a1))
	(mov '13 a1)
	(movnil a2)
	(push (@ ret_call_makevect_1))
	(bra makevect)
ret_call_makevect_1
	(eval ())
	(mov a1 tabtypfn)
	(hpmovx |.lsubr0| tabtypfn '1)
	(hpmovx |.lsubr1| tabtypfn '2)
	(hpmovx |.lsubr2| tabtypfn '3)
	(hpmovx |.lsubr3| tabtypfn '4)
	(hpmovx |.nlsubr| tabtypfn '5)
	(hpmovx |.flsubr| tabtypfn '6)
	(hpmovx |.llexpr| tabtypfn '7)
	(hpmovx |.llfexpr| tabtypfn '8)
	(hpmovx |.llmacro| tabtypfn '9)
	(hpmovx |.lldmacro| tabtypfn '10)
	(hpmovx |.llmsubr| tabtypfn '11)
	(hpmovx |.lldmsubr| tabtypfn '12)
	(mov '13 a1)
	(movnil a2)
	(push (@ ret_call_makevect_2))
	(bra makevect)
ret_call_makevect_2
	(eval ())
	(mov a1 tabcodfn)
	(hpmovx '1 tabcodfn '1)
	(hpmovx '2 tabcodfn '2)
	(hpmovx '3 tabcodfn '3)
	(hpmovx '4 tabcodfn '4)
	(hpmovx '5 tabcodfn '5)
	(hpmovx '6 tabcodfn '6)
	(hpmovx '7 tabcodfn '7)
	(hpmovx '8 tabcodfn '8)
	(hpmovx '9 tabcodfn '9)
	(hpmovx '10 tabcodfn '10)
	(hpmovx '11 tabcodfn '11)
	(hpmovx '12 tabcodfn '12)
	(makfnt llde '5 (strg "defun"))
	(makfnt llde '2 (strg "de"))
	(makfnt lldf '2 (strg "df"))
	(makfnt lldm '2 (strg "dm"))
	(makfnt dmd '3 (strg "dmd"))
	(makfnt dmd '8 (strg "defmacro"))
	(makfnt llds '2 (strg "ds"))
	(makfnt defvar '6 (strg "defvar"))
	(makcst prevdef '12 (strg "previous-def"))
	(mov |.llsystem| (pkgc a1))
	(makfnt revert '6 (strg "revert"))
	(makfnt getdef '6 (strg "getdef"))
	(makfnt makedef '7 (strg "makedef"))
	(makfnt llif '2 (strg "if"))
	(makfnt llifn '3 (strg "ifn"))
	(makfnt when '4 (strg "when"))
	(makfnt unless '6 (strg "unless"))
	(makfnt cond '4 (strg "cond"))
	(makfnt llor '2 (strg "or"))
	(makfnt lland '3 (strg "and"))
	(makfnt while '5 (strg "while"))
	(makfnt until '5 (strg "until"))
	(makfnt loop '4 (strg "loop"))
	(makfnt frepeat '6 (strg "repeat"))
	(makfnt selectq '7 (strg "selectq"))
	(makfnt map '3 (strg "map"))
	(makfnt map '4 (strg "mapl"))
	(makfnt mapc '4 (strg "mapc"))
	(makfnt maplist '7 (strg "maplist"))
	(makfnt mapcar '6 (strg "mapcar"))
	(makfnt mapcon '6 (strg "mapcon"))
	(makfnt mapcan '6 (strg "mapcan"))
	(makfnt fevery '5 (strg "every"))
	(makfnt fany '3 (strg "any"))
	(makfnt mapvect '9 (strg "mapvector"))
	(makfnt mapoblist '9 (strg "mapoblist"))
	(makfnt mapcoblist '10 (strg "mapcoblist"))
	(makfnt maploblist '10 (strg "maploblist"))
	(makfnt quote '5 (strg "quote"))
	(makfnt lambda '6 (strg "lambda"))
	(makfnt flambda '7 (strg "flambda"))
	(makfnt mlambda '7 (strg "mlambda"))
	(makfnt llident '8 (strg "identity"))
	(makfnt comment '7 (strg "comment"))
	(makfnt progn '5 (strg "progn"))
	(makfnt eprogn '6 (strg "eprogn"))
	(makfnt prog1 '5 (strg "prog1"))
	(makfnt exdef '21 (strg "exportable-definition"))
	(makfnt prog2 '5 (strg "prog2"))
	(mov |.quote| a1)
	(mov a1 (cval a1))
	(mov |.lambda| a1)
	(mov a1 (cval a1))
	(mov |.flambda| a1)
	(mov a1 (cval a1))
	(mov |.mlambda| a1)
	(mov a1 (cval a1))
cnfalse
	(movnil a1)
cnpopj
	(return)
cnttrue
	(mov |.t| a1)
	(return)
def
	(eval ())
	(mov (cdr a1) a2)
	(mov (car a1) a1)
	(sftype a3 a1)
	(mov a2 (fval a1))
	(mov |.lff| a3)
	(mov (cval a3) a2)
	(btnil a2 cnpopj)
	(push a1)
	(push (@ ret_call_putprop_3))
	(bra putprop)
ret_call_putprop_3
	(eval ())
	(pop a1)
	(return)
	(lentry llde 6)
	(mov '7 a3)
	(bra def)
	(lentry lldf 6)
	(mov '8 a3)
	(bra def)
	(lentry lldm 6)
	(mov '9 a3)
	(bra def)
	(lentry dmd 6)
	(mov '10 a3)
	(bra def)
	(lentry llds 6)
	(movnil a1)
	(return)
	(lentry defvar 6)
	(bfcons a1 defvar9)
	(push (car a1))
	(mov (cdr a1) a1)
	(push (@ ret_call_evalcar_4))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_4
	(eval ())
	(pop a2)
	(bfvar a2 defverr)
	(mov a1 (cval a2))
	(mov a2 a1)
	(mov |.lff| a3)
	(mov (cval a3) a2)
	(btnil a2 defvar9)
	(push a1)
	(push (@ ret_call_putprop_5))
	(bra putprop)
ret_call_putprop_5
	(eval ())
	(pop a1)
defvar9
	(return)
defverr
	(mov a2 a1)
	(mov |.defvar| a2)
	(bra errnva)
	(lentry revert 2)
	(mov |.prevdef| a2)
	(push (@ ret_call_getprop_6))
	(bra getprop)
ret_call_getprop_6
	(eval ())
	(btnil a1 cnpopj)
	(bfnil evalst evalt)
	(bra evalan)
	(lentry getdef 2)
	(bfsymb a1 gtdefe)
	(gftype a1 a2)
	(mov (fval a1) a3)
	(bra defsuit)
gtdefe
	(mov |.getdef| a2)
	(bra errsym)
	(lentry makedef 4)
	(bffix a2 uncod0)
	(cnblt a2 '0 uncodtr)
	(cnble a2 '12 defsuit)
uncodtr
	(mov |.makedef| a2)
	(bra erroob)
uncod0
	(push a3)
	(hgsize tabtypfn a4)
	(bra uncod2)
uncod1
	(hpxmov tabtypfn a4 a3)
	(cabeq a3 a2 uncod3)
uncod2
	(sobgtz a4 uncod1)
uncod3
	(mov a4 a2)
	(pop a3)
defsuit
	(brx ((@ mkdef0) (@ mkdef1) (@ mkdef1) (@ mkdef1) (@ mkdef1) (@ mkdef1) (@ mkdef1) (@ mkdef2) (@ mkdef3) (@ mkdef4) (@ mkdef5) (@ mkdef1) (@ mkdef1)) a2)
mkdef0
	(movnil a1)
	(return)
mkdef1
	(btlisp a3 mkdef10)
	(push a1)
	(push a2)
	(mov a3 a1)
	(push (@ ret_call_loc_7))
	(bra loc)
ret_call_loc_7
	(eval ())
	(mov a1 a3)
	(pop a2)
	(pop a1)
mkdef10
	(ncons a3)
	(hpxmov tabtypfn a2 a2)
	(cons a2 a3)
	(mov |.llds| a4)
	(bra mkdef8)
mkdef2
	(mov |.llde| a4)
	(bra mkdef8)
mkdef3
	(mov |.lldf| a4)
	(bra mkdef8)
mkdef4
	(mov |.lldm| a4)
	(bra mkdef8)
mkdef5
	(mov |.dmd| a4)
mkdef8
	(cons a1 a3)
	(cons a4 a3)
	(mov a3 a1)
	(return)
	(lentry llif 6)
	(bfcons a1 ifer2)
	(push (cdr a1))
	(push (@ ret_call_evalcar_8))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_8
	(eval ())
	(pop a2)
	(bfcons a2 ifer1)
	(mov (cdr a2) a3)
	(mov |.llif| errname)
	(btnil a1 progna3)
	(mov (car a2) a1)
	(bfnil evalst evalt)
	(bra evalan)
ifer1
	(mov a2 a1)
ifer2
	(btnil a1 cnpopj)
	(mov |.llif| a2)
	(bra errbal)
	(lentry llifn 6)
	(bfcons a1 ifner2)
	(push (cdr a1))
	(push (@ ret_call_evalcar_9))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_9
	(eval ())
	(pop a2)
	(bfcons a2 ifner1)
	(mov (cdr a2) a3)
	(mov |.llifn| errname)
	(bfnil a1 progna3)
	(mov (car a2) a1)
	(bfnil evalst evalt)
	(bra evalan)
ifner1
	(mov a2 a1)
ifner2
	(btnil a1 cnpopj)
	(mov |.llifn| a2)
	(bra errbal)
	(lentry when 6)
	(bfcons a1 whener1)
	(push (cdr a1))
	(push (@ ret_call_evalcar_10))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_10
	(eval ())
	(pop a3)
	(mov |.when| errname)
	(bfnil a1 progna3)
whenr
	(return)
whener1
	(btnil a1 whenr)
	(mov |.when| a2)
	(bra errbal)
	(lentry unless 6)
	(bfcons a1 unler1)
	(push (cdr a1))
	(push (@ ret_call_evalcar_11))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_11
	(eval ())
	(pop a3)
	(mov |.unless| errname)
	(btnil a1 progna3)
	(movnil a1)
unlesr
	(return)
unler1
	(btnil a1 unlesr)
	(mov |.unless| a2)
	(bra errbal)
	(lentry cond 6)
	(mov a1 a2)
cond1
	(bfcons a2 conder3)
	(push (cdr a2))
	(mov (car a2) a1)
	(bfcons a1 conder1)
	(push (cdr a1))
	(push (@ ret_call_evalcar_12))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_12
	(eval ())
	(pop a3)
	(pop a2)
	(btnil a1 cond1)
	(mov |.cond| errname)
	(btcons a3 progna3)
	(btnil a3 condret)
	(mov a3 a1)
	(bra conder4)
condret
	(return)
conder1
	(bfnil a1 conder2)
	(pop a2)
	(bra cond1)
conder2
	(mov |.cond| a2)
	(bra errnla)
conder3
	(mov a2 a1)
	(bfnil a1 conder4)
	(return)
conder4
	(mov |.cond| a2)
	(bra errbal)
	(lentry llor 6)
	(btcons a1 or2)
	(btnil a1 cnpopj)
	(bra orer2)
or1
	(push a2)
	(push (@ ret_call_evalcar_13))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_13
	(eval ())
	(bfnil a1 pret)
	(pop a1)
or2
	(mov (cdr a1) a2)
	(btcons a2 or1)
	(bfnil a2 orer1)
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
orer1
	(mov a2 a1)
orer2
	(mov |.llor| a2)
	(bra errbal)
	(lentry lland 6)
	(btcons a1 and2)
	(btnil a1 cnttrue)
	(bra ander2)
and1
	(push a2)
	(push (@ ret_call_evalcar_14))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_14
	(eval ())
	(btnil a1 pret)
	(pop a1)
and2
	(mov (cdr a1) a2)
	(btcons a2 and1)
	(bfnil a2 ander1)
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
pret
	(pop a2)
	(return)
ander1
	(mov a2 a1)
ander2
	(mov |.lland| a2)
	(bra errbal)
	(lentry while 6)
	(bfcons a1 whiler)
	(push a1)
	(bra while2)
while1
	(topst a1)
	(mov (cdr a1) a1)
	(mov |.while| errname)
	(push (@ ret_call_iprogn_15))
	(bra iprogn)
ret_call_iprogn_15
	(eval ())
while2
	(topst a1)
	(push (@ ret_call_evalcar_16))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_16
	(eval ())
	(bfnil a1 while1)
	(pop a2)
whileret
	(return)
whiler
	(btnil a1 whileret)
	(mov |.while| a2)
	(bra errbal)
	(lentry until 6)
	(bfcons a1 untiler)
	(push a1)
	(bra until2)
until1
	(topst a1)
	(mov (cdr a1) a1)
	(mov |.until| errname)
	(push (@ ret_call_iprogn_17))
	(bra iprogn)
ret_call_iprogn_17
	(eval ())
until2
	(topst a1)
	(push (@ ret_call_evalcar_18))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_18
	(eval ())
	(btnil a1 until1)
	(pop a2)
untilret
	(return)
untiler
	(btnil a1 untilret)
	(mov |.until| a2)
	(bra errbal)
	(lentry loop 6)
	(push a1)
loop1
	(topst a1)
	(mov |.loop| errname)
	(push (@ ret_call_iprogn_19))
	(bra iprogn)
ret_call_iprogn_19
	(eval ())
	(bra loop1)
	(lentry frepeat 6)
	(bfcons a1 freper)
	(push (cdr a1))
	(push (@ ret_call_evalcar_20))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_20
	(eval ())
	(mov a1 a2)
	(pop a1)
	(btfix a2 repeat2)
	(mov a2 a1)
	(mov |.frepeat| a2)
	(bra errnia)
repeat1
	(push a1)
	(push a2)
	(mov |.frepeat| errname)
	(push (@ ret_call_iprogn_21))
	(bra iprogn)
ret_call_iprogn_21
	(eval ())
	(pop a2)
	(pop a1)
repeat2
	(sobgez a2 repeat1)
	(bra cnttrue)
freper
	(btnil a1 cnttrue)
	(mov |.frepeat| a2)
	(bra errbal)
	(lentry selectq 6)
	(bfcons a1 selecer1)
	(push (cdr a1))
	(push (@ ret_call_evalcar_22))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_22
	(eval ())
	(pop a3)
	(bra selec5)
selec1
	(mov (car a3) a2)
	(mov (cdr a3) a3)
	(bfcons a2 selecer2)
	(mov (cdr a2) a4)
	(mov (car a2) a2)
	(cabeq a2 |.t| selec7)
	(push a1)
	(push a2)
	(push a3)
	(push a4)
	(bfcons a2 selec2)
	(push (@ ret_call_member_23))
	(bra member)
ret_call_member_23
	(eval ())
	(bra selec3)
selec2
	(push (@ ret_call_equal_24))
	(bra equal)
ret_call_equal_24
	(eval ())
selec3
	(pop a4)
	(pop a3)
	(pop a2)
	(bfnil a1 selec6)
	(pop a1)
selec5
	(btcons a3 selec1)
	(mov a3 a1)
selecer1
	(btnil a1 cnpopj)
	(mov |.selectq| a2)
	(bra errbal)
selecer2
	(btnil a2 selec5)
	(mov a2 a1)
	(mov |.selectq| a2)
	(bra errnla)
selec6
	(pop a1)
selec7
	(mov a4 a1)
	(mov |.selectq| errname)
	(bra iprogn)
	(lentry map 5)
	(mov |.map| a2)
	(push '0)
	(push (@ map1))
	(movnil a3)
allmap
	(eval ())
	(push a4)
	(push a3)
	(cnble a4 '1 maper)
map1
	(eval ())
	(xspmov '3 a4)
	(xspmov '2 a1)
	(xspmov '1 a2)
	(push a1)
	(mov a2 a3)
	(plus '4 a3)
	(xspmov a3 a1)
	(bra map3)
map2
	(eval ())
	(xspmov a3 a1)
	(bfcons a1 map4)
	(movxsp (cdr a1) a3)
	(cnbeq a4 '0 map3)
	(mov (car a1) a1)
map3
	(eval ())
	(push a1)
	(sobgtz a2 map2)
	(diff '4 a3)
	(mov a3 a4)
	(bra funcall)
map4
	(eval ())
	(diff a2 a3)
	(diff '3 a3)
	(adjstk a3)
	(pop a1)
	(pop a3)
	(plus '2 a3)
	(adjstk a3)
	(cnbeq a4 '2 map5)
	(bra nreverse)
map5
	(return)
map6
	(eval ())
	(pop a2)
	(cons a1 a2)
	(push a2)
	(bra map1)
map7
	(eval ())
	(bfcons a1 map1)
	(pop a2)
	(push (@ ret_call_nreconc_25))
	(bra nreconc)
ret_call_nreconc_25
	(eval ())
	(push a1)
	(bra map1)
map8
	(eval ())
	(movxsp a1 '0)
	(bfnil a1 map1)
	(bra map10)
map9
	(eval ())
	(movxsp a1 '0)
	(btnil a1 map1)
map10
	(eval ())
	(adjstk '1)
	(topst a4)
	(plus '3 a4)
	(adjstk a4)
	(return)
maper
	(mov a4 a1)
	(bra errwna)
allmapun
	(eval ())
	(pop a4)
	(pop a1)
	(pop a2)
	(xtopst a1)
	(push a1)
	(push a2)
	(push a4)
	(push a3)
mapun1
	(eval ())
	(xspmov '2 a2)
	(bfcons a2 mapun4)
	(movxsp (cdr a2) '2)
	(xspmov '1 a3)
	(xspmov '3 a1)
	(push a3)
	(push (car a2))
	(mov '1 a4)
	(bra ffuncall)
mapun4
	(eval ())
	(pop a1)
	(adjstk '3)
	(pop a4)
	(cnbeq a4 '2 mapun5)
	(bra nreverse)
mapun5
	(return)
mapun6
	(eval ())
	(pop a2)
	(cons a1 a2)
	(push a2)
	(bra mapun1)
mapun7
	(eval ())
	(bfcons a1 mapun1)
	(pop a2)
	(push (@ ret_call_nreconc_26))
	(bra nreconc)
ret_call_nreconc_26
	(eval ())
	(push a1)
	(bra mapun1)
mapun8
	(eval ())
	(movxsp a1 '0)
	(bfnil a1 mapun1)
	(adjstk '5)
	(return)
mapun9
	(eval ())
	(btnil a1 mapun1)
	(adjstk '5)
	(return)
	(lentry mapc 5)
	(movnil a3)
	(push '1)
	(cnbne a4 '2 mapcn)
	(push (@ mapun1))
	(bra allmapun)
mapcn
	(eval ())
	(mov |.mapc| a2)
	(push (@ map1))
	(bra allmap)
	(lentry maplist 5)
	(movnil a3)
	(mov |.maplist| a2)
	(push '0)
	(push (@ map6))
	(bra allmap)
	(lentry mapcar 5)
	(movnil a3)
	(push '1)
	(cnbne a4 '2 mapcarn)
	(push (@ mapun6))
	(bra allmapun)
mapcarn
	(eval ())
	(mov |.mapcar| a2)
	(push (@ map6))
	(bra allmap)
	(lentry mapcon 5)
	(mov |.mapcon| a2)
	(movnil a3)
	(push '0)
	(push (@ map7))
	(bra allmap)
	(lentry mapcan 5)
	(movnil a3)
	(push '1)
	(cnbne a4 '2 mapcann)
	(push (@ mapun7))
	(bra allmapun)
mapcann
	(eval ())
	(mov |.mapcan| a2)
	(push (@ map7))
	(bra allmap)
	(lentry fevery 5)
	(mov |.t| a3)
	(push '2)
	(cnbne a4 '2 feveryn)
	(push (@ mapun8))
	(bra allmapun)
feveryn
	(eval ())
	(mov |.fevery| a2)
	(push (@ map8))
	(bra allmap)
	(lentry fany 5)
	(movnil a3)
	(push '2)
	(cnbne a4 '2 fanyn)
	(push (@ mapun9))
	(bra allmapun)
fanyn
	(eval ())
	(mov |.fany| a2)
	(push (@ map9))
	(bra allmap)
	(lentry mapvect 3)
	(bfvect a2 mapvect9)
	(mov '0 a3)
	(hgsize a2 a4)
	(bra mapvect8)
mapvect1
	(eval ())
	(push a1)
	(push a2)
	(push a3)
	(push a4)
	(hpxmov a2 a3 a3)
	(push (@ mapvect2))
	(push a3)
	(mov '1 a4)
	(bra ffuncall)
mapvect2
	(eval ())
	(pop a4)
	(pop a3)
	(pop a2)
	(pop a1)
	(incr a3)
mapvect8
	(eval ())
	(sobgez a4 mapvect1)
	(movnil a1)
	(return)
mapvect9
	(eval ())
	(mov a2 a1)
	(mov |.mapvect| a2)
	(bra errvec)
	(lentry mapcoblist 2)
	(push (@ mapcobco))
allmapob
	(eval ())
	(movnil a4)
	(hgsize hashtab a3)
	(decr a3)
mapcob0
	(hpxmov hashtab a3 a3)
	(bra mapcob7)
mapcob1
	(mov a3 a2)
	(btstrg (pname a2) mapcob3)
mapcob2
	(mov (pname a2) a2)
mapcob3
	(cabeq a2 |.undef| mapcob6)
	(push a1)
	(push a3)
	(push a2)
	(push a4)
	(xspmov '4 a4)
	(push a4)
	(push a2)
	(mov '1 a4)
	(bra ffuncall)
mapcob5
	(pop a4)
mapcob5a
	(eval ())
	(pop a2)
mapcob5b
	(eval ())
	(pop a3)
	(pop a1)
mapcob6
	(cabne a3 a2 mapcob2)
	(mov (alink a3) a3)
mapcob7
	(btsymb a3 mapcob1)
mapcob8
	(sobgez a3 mapcob0)
	(pop a1)
	(mov a4 a1)
	(bra nreverse)
maplobco
	(eval ())
	(btnil a1 mapcob5)
	(pop a4)
	(pop a2)
	(cons a2 a4)
	(bra mapcob5b)
mapcobco
	(eval ())
	(bfcons a1 mapcob5)
	(pop a2)
	(push (@ ret_call_nreconc_27))
	(bra nreconc)
ret_call_nreconc_27
	(eval ())
	(mov a1 a4)
	(bra mapcob5a)
	(lentry maploblist 2)
	(push (@ maplobco))
	(bra allmapob)
	(lentry mapoblist 2)
	(push (@ mapcob5))
	(bra allmapob)
	(lentry quote 6)
	(mov (cdr a1) a2)
	(bfnil a2 quoterr)
	(mov (car a1) a1)
	(return)
quoterr
	(mov '1 a1)
	(mov |.quote| a2)
	(bra errwna)
	(lentry lambda 6)
	(cons |.lambda| a1)
	(return)
	(lentry flambda 6)
	(cons |.flambda| a1)
	(return)
	(lentry mlambda 6)
	(cons |.mlambda| a1)
	(return)
	(lentry comment 6)
	(mov |.comment| a1)
	(return)
	(lentry llident 2)
	(intest)
	(chkstk mstack errfs)
	(return)
progna3
	(mov a3 a1)
	(intest)
	(bfcons a1 progna35)
	(mov (cdr a1) a2)
	(btnil a2 progna36)
progna35
	(bra evprogn)
progna36
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
	(lentry eprogn 2)
	(mov |.eprogn| errname)
	(intest)
	(bra evprogn)
	(lentry progn 6)
	(mov |.progn| errname)
iprogn
	(intest)
	(bra evprogn)
	(lentry exdef 6)
	(bra prog1)
	(lentry prog1 6)
	(bfcons a1 prog1e)
	(push (cdr a1))
	(push (@ ret_call_evalcar_28))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_28
	(eval ())
	(xtopst a1)
	(mov |.prog1| errname)
	(push (@ ret_call_iprogn_29))
	(bra iprogn)
ret_call_iprogn_29
	(eval ())
	(pop a1)
prog1r
	(return)
prog1e
	(btnil a1 prog1r)
	(mov |.prog1| a2)
	(bra errbal)
	(lentry prog2 6)
	(bfcons a1 prog2e)
	(push (cdr a1))
	(push (@ ret_call_evalcar_30))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_30
	(eval ())
	(pop a1)
	(bfcons a1 prog2e)
	(push (cdr a1))
	(push (@ ret_call_evalcar_31))
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
ret_call_evalcar_31
	(eval ())
	(xtopst a1)
	(mov |.prog2| errname)
	(push (@ ret_call_iprogn_32))
	(bra iprogn)
ret_call_iprogn_32
	(eval ())
	(pop a1)
prog2r
	(return)
prog2e
	(btnil a1 prog2r)
	(mov |.prog2| a2)
	(bra errbal)
	(end)
))
