(loader '(
(listext (llminus0 llfixmin llfixmax lllog10 max min gale gage ganeqn plusp minusp zerop gadiff gatimes gaplus rationalp bangen1 gamod numberp intgerp gadrev gaabs gaquomod gasub1 gaadd1 gagt galt gaeqen gacomp llsqrt llpower lllog llexp llatan llacos llasin llcos llsin lltrunc llfloat llfix gadiv gadinv gatim2i gadiff2i gaplus2i gaeqn ini_nbs ffsymbol nreverse getfns ffuncall apply evala1 evalcar inicst inisymb gcnumb gcfloat gccons gettype err0dv errstl errwna errnva errnla errnsa errnfa errnia errnna errgen errfs theend reenter evalan evalt))
(entry startmodule subr0)
	(title number)
	(xrefi llinit |.undef|)
	(xrefi llinit fcons)
	(xrefi llinit bvar)
	(xrefi llinit |.t|)
	(xrefi llinit |.void|)
	(xrefi llinit |.syspkgc|)
	(xrefi llinit mstack)
	(xrefp llinit reenter)
	(xrefp llinit theend)
	(xrefp toperr errfs)
	(xrefp toperr errgen)
	(xrefp toperr errnna)
	(xrefp toperr errnia)
	(xrefp toperr errnfa)
	(xrefp toperr errnsa)
	(xrefp toperr errnla)
	(xrefp toperr errnva)
	(xrefp toperr errwna)
	(xrefp toperr errstl)
	(xrefp toperr err0dv)
	(xrefp gc gettype)
	(xrefp gc gccons)
	(xrefp gc gcfloat)
	(xrefp gc gcnumb)
	(xrefp read inisymb)
	(xrefp read inicst)
	(xrefp eval evalcar)
	(xrefp eval evala1)
	(xrefp eval apply)
	(xrefp eval ffuncall)
	(xrefi cntrl |.quote|)
	(xrefp symbs getfns)
	(xrefp fntstd nreverse)
	(xrefp string ffsymbol)
	(xdefp ini_nbs)
	(xdefi |.ex|)
	(xdefp gaeqn)
	(xdefp gaplus2i)
	(xdefp gadiff2i)
	(xdefp gatim2i)
	(xdefp gadinv)
	(xdefp gadiv)
	(xdefp llfix)
	(xdefp llfloat)
	(xdefp lltrunc)
	(xdefi |.lltrunc|)
	(xdefp llsin)
	(xdefp llcos)
	(xdefp llasin)
	(xdefp llacos)
	(xdefp llatan)
	(xdefp llexp)
	(xdefp lllog)
	(xdefp llpower)
	(xdefp llsqrt)
	(xdefp gacomp)
	(xdefp gaeqen)
	(xdefp galt)
	(xdefp gagt)
	(xdefp gaadd1)
	(xdefp gasub1)
	(xdefp gaquomod)
	(xdefi |.gaquomod|)
	(xdefp gaabs)
	(xdefp gadrev)
	(xdefp intgerp)
	(xdefp numberp)
	(xdefp gamod)
	(xdefp bangen1)
	(xdefi |.exmod|)
	(xdefi |.llfloat|)
	(xdefi |.llfix|)
	(xdefi fzero)
	(xdefi fltun)
	(xdefi fltmun)
	(xdefi fltimax)
	(xdefi fltimin)
	(impure)
	(ladr moinsun 0)
	(ladr fzero 0)
	(ladr fltun 0)
	(ladr fltmun 0)
	(ladr fltimax 0)
	(ladr fltimin 0)
	(ladr cpfnt 0)
	(pure)
ini_nbs
	(eval ())
	(makcst sysgen '8 (strg "genarith"))
	(movnil (cval a1))
	(mov |.syspkgc| (pkgc a1))
	(makfnt numberp '7 (strg "numberp"))
	(makfnt intgerp '8 (strg "integerp"))
	(makfnt rationalp '9 (strg "rationalp"))
	(makfnt llfloat '5 (strg "float"))
	(makfnt llfix '3 (strg "fix"))
	(makfnt lltrunc '8 (strg "truncate"))
	(makfnt gaadd1 '2 (strg "1+"))
	(makfnt gasub1 '2 (strg "1-"))
	(makfnt gaabs '3 (strg "abs"))
	(makfnt gaplus '1 (strg "+"))
	(makfnt gadinv '2 (strg "0-"))
	(makfnt gadiff '1 (strg "-"))
	(makfnt gatimes '1 (strg "*"))
	(makfnt gadrev '2 (strg "1/"))
	(makfnt gadiv '2 (strg "//"))
	(makfnt gadiv '1 (strg "/"))
	(makfnt gaquomod '3 (strg "quo"))
	(makfnt gaquomod '8 (strg "quotient"))
	(makfnt gaquomod '6 (strg "quomod"))
	(makcst ex '2 (strg "ex"))
	(makcst exmod '3 (strg "mod"))
	(mov '0 (cval a1))
	(mov |.ex| (pkgc a1))
	(makfnt gamod '6 (strg "modulo"))
	(makfnt gacomp '3 (strg "<?>"))
	(makfnt gaeqen '1 (strg "="))
	(makfnt ganeqn '2 (strg "<>"))
	(makfnt ganeqn '2 (strg "/="))
	(makfnt gage '2 (strg ">="))
	(makfnt gagt '1 (strg ">"))
	(makfnt gale '2 (strg "<="))
	(makfnt galt '1 (strg "<"))
	(makfnt zerop '5 (strg "zerop"))
	(makfnt plusp '5 (strg "plusp"))
	(makfnt minusp '6 (strg "minusp"))
	(makfnt min '3 (strg "min"))
	(makfnt max '3 (strg "max"))
	(makfnt llsin '3 (strg "sin"))
	(makfnt llcos '3 (strg "cos"))
	(makfnt llasin '4 (strg "asin"))
	(makfnt llacos '4 (strg "acos"))
	(makfnt llatan '4 (strg "atan"))
	(makfnt llexp '3 (strg "exp"))
	(makfnt lllog '3 (strg "log"))
	(makfnt lllog10 '5 (strg "log10"))
	(makfnt llpower '5 (strg "power"))
	(makfnt llsqrt '4 (strg "sqrt"))
	(makfnt llfixmax '20 (strg "most-positive-fixnum"))
	(makfnt llfixmin '20 (strg "most-negative-fixnum"))
	(makfnt llminus0 '14 (strg "minus-0-fixnum"))
	(mov '-1 a1)
	(mov a1 moinsun)
	(mov '0 a1)
	(float a1)
	(mov a1 fzero)
	(mov '1 a1)
	(float a1)
	(mov a1 fltun)
	(mov '-1 a1)
	(float a1)
	(mov a1 fltmun)
	(mov '32767 a1)
	(float a1)
	(mov a1 fltimax)
	(mov '-32767 a1)
	(float a1)
	(mov a1 fltimin)
	(return)
bangen
	(push a3)
	(push (@ ret_call_gettype_1))
	(bra gettype)
ret_call_gettype_1
	(eval ())
	(push a1)
	(bfsymb a1 bangerr)
	(mov a3 a2)
	(movnil a3)
	(push (@ ret_call_getfns_2))
	(bra getfns)
ret_call_getfns_2
	(eval ())
	(bfnil a1 bangencal)
	(topst a2)
	(mov |.sysgen| a1)
	(mov (cval a1) a1)
	(btnil a1 bangerr)
	(bfsymb a1 bangerr)
	(push (@ ret_call_ffsymbol_3))
	(bra ffsymbol)
ret_call_ffsymbol_3
	(eval ())
	(xspmov '1 a2)
	(movnil a3)
	(push (@ ret_call_getfns_4))
	(bra getfns)
ret_call_getfns_4
	(eval ())
	(btnil a1 bangerr)
bangencal
	(adjstk '3)
	(pop a4)
	(bra ffuncall)
bangerr
	(pop a4)
	(pop a2)
	(return)
bangen1
	(push a1)
	(push '1)
	(push (@ ret_call_bangen_5))
	(bra bangen)
ret_call_bangen_5
	(eval ())
	(pop a4)
	(pop a1)
	(bra errgen)
bangen2
	(push a1)
	(push a2)
	(push '2)
	(push (@ ret_call_bangen_6))
	(bra bangen)
ret_call_bangen_6
	(eval ())
	(pop a4)
	(pop a1)
	(ncons a1)
	(pop a3)
	(cons a3 a1)
	(bra errgen)
	(lentry numberp 2)
	(btfix a1 nbpt)
	(btfloat a1 nbpt)
	(mov |.numberp| a2)
nbpgen
	(push a1)
	(push (@ ret_call_gettype_7))
	(bra gettype)
ret_call_gettype_7
	(eval ())
	(bfsymb a1 nbpn)
	(movnil a3)
	(push (@ ret_call_getfns_8))
	(bra getfns)
ret_call_getfns_8
	(eval ())
	(btnil a1 nbpn)
	(mov '1 a4)
	(bra ffuncall)
nbpn
	(adjstk '1)
nbpnil
	(movnil a1)
nbpt
	(return)
	(lentry intgerp 2)
	(btfix a1 nbpt)
	(btfloat a1 nbpnil)
	(mov |.intgerp| a2)
	(bra nbpgen)
	(lentry rationalp 2)
	(btfix a1 nbpt)
	(btfloat a1 nbpnil)
	(mov |.rationalp| a2)
	(bra nbpgen)
	(lentry llfloat 2)
	(bffix a1 llfloatf)
	(float a1)
llfloatr
	(return)
llfloatf
	(btfloat a1 llfloatr)
	(mov |.llfloat| a3)
	(bra bangen1)
	(lentry lltrunc 2)
lltrunc1
	(mov |.lltrunc| a3)
	(btfix a1 lltrcret)
	(bffloat a1 bangen1)
	(cfblt a1 fltimin bangen1)
	(cfbgt a1 fltimax bangen1)
	(fix a1)
lltrcret
	(return)
	(lentry llfix 2)
	(bra lltrunc1)
	(lentry gaadd1 2)
	(mov a1 a2)
	(bffix a1 gaadd2)
	(plus '1 a1 gaadd3)
	(endc)
	(cnbeq a1 '#$8000 gaadd3)
	(endc)
	(return)
gaadd2
	(bffloat a1 gaadd3)
	(fplus fltun a1)
	(return)
gaadd3
	(mov a2 a1)
	(mov '1 a2)
	(mov |.gaplus| a3)
	(bra bangen2)
	(lentry gasub1 2)
	(mov a1 a2)
	(bffix a1 gasub2)
	(diff '1 a1 gasub3)
	(endc)
	(cnbeq a1 '#$8000 gasub3)
	(endc)
	(return)
gasub2
	(bffloat a1 gasub3)
	(fdiff fltun a1)
	(return)
gasub3
	(mov a2 a1)
	(mov '1 a2)
	(mov |.gadiff| a3)
	(bra bangen2)
	(lentry gaabs 2)
	(mov '0 a2)
	(bffix a1 gaabs2)
	(endc)
	(cnbeq a1 '#$8000 gaabs3)
	(endc)
	(cnbge a1 a2 gaabsret)
	(diff a1 a2 gaabs3)
	(mov a2 a1)
gaabsret
	(return)
gaabs2
	(bffloat a1 gaabs3)
	(mov fzero a2)
	(cfbge a1 a2 gaabsret)
	(fdiff a1 a2)
	(mov a2 a1)
	(return)
gaabs3
	(mov |.gaabs| a3)
	(bra bangen1)
	(lentry gaplus 5)
	(cnbne a4 '2 gapplus)
	(pop a2)
	(pop a1)
gaplus2i
	(eval ())
	(mov a1 a3)
	(bffix a1 gapplus0)
	(bffix a2 gapplus1)
	(plus a2 a1 gapplus1)
	(endc)
	(cnbeq a1 '#$8000 gapplus1)
	(endc)
	(return)
gapplus0
	(bffloat a1 gapplus1)
	(bffloat a2 gapplus1)
	(fplus a2 a1)
	(return)
gapplus1
	(push a3)
	(push a2)
gapplus
	(cnbeq a4 '0 gaprt0)
	(cnbne a4 '1 gaplus0)
	(pop a1)
	(btfix a1 gaprret)
	(btfloat a1 gaprret)
	(mov '0 a2)
	(mov |.gaplus| a3)
	(bra bangen2)
gaprt0
	(mov a4 a1)
gaprret
	(return)
gaplus0
	(push a4)
	(xspmov a4 a1)
gaplus1
	(btfix a1 gaplfx1)
	(btfloat a1 gaplfl3)
	(sobgtz a4 gaplgn0)
gaplus2
	(pop a4)
	(adjstk a4)
	(return)
gaplfx0
	(xspmov a4 a2)
	(btfloat a2 gaplfl0)
	(bffix a2 gaplgn1)
	(plus a1 a2 gaplgn0)
	(endc)
	(cnbeq a2 '#$8000 gaplgn0)
	(endc)
	(mov a2 a1)
gaplfx1
	(sobgtz a4 gaplfx0)
	(bra gaplus2)
gaplfl0
	(float a1)
	(bra gaplfl2)
gaplfl1
	(xspmov a4 a2)
	(btfloat a2 gaplfl2)
	(bffix a2 gaplgn1)
	(float a2)
gaplfl2
	(fplus a1 a2)
	(mov a2 a1)
gaplfl3
	(sobgtz a4 gaplfl1)
	(bra gaplus2)
gaplgn0
	(xspmov a4 a2)
gaplgn1
	(push a4)
	(mov |.gaplus| a3)
	(push (@ ret_call_bangen2_9))
	(bra bangen2)
ret_call_bangen2_9
	(eval ())
	(pop a4)
	(bra gaplus1)
	(lentry gatimes 5)
	(cnbne a4 '2 gattimes)
	(pop a2)
	(pop a1)
gatim2i
	(eval ())
	(mov a1 a3)
	(bffix a1 gattimes0)
	(bffix a2 gattimes1)
	(times a2 a1 gattimes1)
	(endc)
	(cnbeq a1 '#$8000 gattimes1)
	(endc)
	(return)
gattimes0
	(bffloat a1 gattimes1)
	(bffloat a2 gattimes1)
	(ftimes a2 a1)
	(return)
gattimes1
	(push a3)
	(push a2)
gattimes
	(cnbeq a4 '0 gatrt0)
	(cnbne a4 '1 gatime0)
	(pop a1)
	(btfix a1 gatrret)
	(btfloat a1 gatrret)
	(mov '1 a2)
	(mov |.gatimes| a3)
	(bra bangen2)
gatrret
	(return)
gatrt0
	(mov '1 a1)
	(return)
gatime0
	(push a4)
	(xspmov a4 a1)
gatime1
	(btfix a1 gatifx1)
	(btfloat a1 gatifl3)
	(sobgtz a4 gatign0)
gatime2
	(pop a4)
	(adjstk a4)
	(return)
gatifx0
	(xspmov a4 a2)
	(btfloat a2 gatifl0)
	(bffix a2 gatign1)
	(times a1 a2 gatign0)
	(endc)
	(cnbeq a2 '#$8000 gatign0)
	(endc)
	(mov a2 a1)
gatifx1
	(sobgtz a4 gatifx0)
	(bra gatime2)
gatifl0
	(float a1)
	(bra gatifl2)
gatifl1
	(xspmov a4 a2)
	(btfloat a2 gatifl2)
	(bffix a2 gatign1)
	(float a2)
gatifl2
	(ftimes a1 a2)
	(mov a2 a1)
gatifl3
	(sobgtz a4 gatifl1)
	(bra gatime2)
gatign0
	(xspmov a4 a2)
gatign1
	(push a4)
	(mov |.gatimes| a3)
	(push (@ ret_call_bangen2_10))
	(bra bangen2)
ret_call_bangen2_10
	(eval ())
	(pop a4)
	(bra gatime1)
	(lentry gadinv 2)
	(mov a1 a2)
	(bra gadneg)
	(lentry gadiff 5)
	(cnbeq a4 '2 gadiff2)
	(cnbeq a4 '1 gadiff1)
	(cnbne a4 '0 gadiff3)
	(mov a4 a1)
	(return)
gadiff1
	(pop a2)
gadneg
	(mov '0 a1)
	(btfix a2 gadneg2)
	(btfloat a2 gadneg3)
gadneg1
	(mov |.gadinv| a3)
	(mov a2 a1)
	(bra bangen1)
gadneg2
	(diff a2 a1 gadneg1)
	(endc)
	(cnbeq a1 '#$8000 gadneg1)
	(endc)
	(return)
gadneg3
	(float a1)
	(fdiff a2 a1)
	(return)
gadiff2
	(pop a1)
gadiffp
	(mov a1 a2)
	(pop a1)
gadiff2i
	(eval ())
	(mov a1 a3)
	(btfix a1 gadiffp1)
	(btfloat a1 gadiffp3)
gadiffp0
	(mov a3 a1)
	(mov |.gadiff| a3)
	(bra bangen2)
gadiffp1
	(bffix a2 gadiffp2)
	(diff a2 a1 gadiffp0)
	(endc)
	(cnbeq a1 '#$8000 gadiffp0)
	(endc)
	(return)
gadiffp2
	(bffloat a2 gadiffp0)
	(float a1)
	(bra gadiffp5)
gadiffp3
	(bffix a2 gadiffp4)
	(float a2)
	(bra gadiffp5)
gadiffp4
	(bffloat a2 gadiffp0)
gadiffp5
	(fdiff a2 a1)
	(return)
gadiff3
	(decr a4)
	(decr a4)
	(xspmov a4 a1)
	(movxsp (@ gadiffp) a4)
	(push a4)
	(incr a4)
	(bra gaplus1)
	(lentry gadrev 2)
	(mov a1 a2)
	(bra garev)
	(lentry gadiv 5)
	(cnbeq a4 '2 gadiv2)
	(cnbeq a4 '1 gadiv1)
	(cnbne a4 '0 gadiv3)
garevret
	(mov '1 a1)
	(return)
gadiv1
	(pop a2)
garev
	(cabeq a2 '1 garevret)
	(btfix a2 garev1)
	(btfloat a2 garev2)
garev1
	(mov |.gadrev| a3)
	(mov a2 a1)
	(bra bangen1)
garev2
	(mov '1 a1)
	(float a1)
	(fquo a2 a1)
	(return)
gadiv2
	(pop a1)
gadivt
	(mov a1 a2)
	(pop a1)
	(mov a1 a3)
	(btfix a1 gadivt1)
	(btfloat a1 gadivt3)
gadivt0
	(mov a3 a1)
	(mov |.gadiv| a3)
	(bra bangen2)
gadivt1
	(bffix a2 gadivt2)
	(cnbeq a2 '0 gadivt0)
	(endc)
	(cnbne a1 '#$8000 gadivt11)
	(cnbeq a2 '-1 gadivt0)
	(endc)
gadivt11
	(rem a2 a1)
	(cnbne a1 '0 gadivt0)
	(mov a3 a1)
	(quo a2 a1 gadivt0)
	(endc)
	(cnbeq a1 '#$8000 gadivt0)
	(endc)
	(return)
gadivt2
	(bffloat a2 gadivt0)
	(float a1)
	(bra gadivt5)
gadivt3
	(bffix a2 gadivt4)
	(float a2)
	(bra gadivt5)
gadivt4
	(bffloat a2 gadivt0)
gadivt5
	(fquo a2 a1)
	(return)
gadiv3
	(decr a4)
	(decr a4)
	(xspmov a4 a1)
	(movxsp (@ gadivt) a4)
	(push a4)
	(incr a4)
	(bra gatime1)
	(lentry gaquomod 3)
	(mov |.gaquomod| a3)
	(btfloat a1 bangen2)
	(btfloat a2 bangen2)
	(bffix a1 bangen2)
	(bffix a2 bangen2)
	(cnbeq a2 '0 bangen2)
	(endc)
	(cnbne a1 '#$8000 gaquomod1)
	(cnbeq a2 '-1 bangen2)
	(endc)
gaquomod1
	(mov a1 a3)
	(quo a2 a1 gaquomodg)
	(endc)
	(cnbeq a1 '#$8000 gaquomodg)
	(endc)
	(mov a3 a4)
	(rem a2 a4)
	(cnbge a4 '0 gamodret)
	(cnbgt a1 '0 gaquomod3)
	(cnblt a1 '0 gaquomod2)
	(cnble a2 '0 gaquomod3)
gaquomod2
	(decr a1 gaquomodg)
	(bra gaquoret)
gaquomod3
	(incr a1 gaquomodg)
gaquoret
	(cnbge a2 '0 gamodr3)
	(negate a2)
gamodr3
	(plus a2 a4 gaquomodg)
gamodret
	(mov |.exmod| a2)
	(mov a4 (cval a2))
	(return)
gaquomodg
	(mov a3 a1)
	(mov |.gaquomod| a3)
	(bra bangen2)
gaquo2
	(btfloat a2 gaquo4)
	(bffix a2 bangen2)
	(float a2)
	(bra gaquo4)
gaquo3
	(bffix a1 bangen2)
	(float a1)
gaquo4
	(mov a1 a3)
	(fquo a2 a1)
	(return)
	(lentry gamod 3)
	(push (@ ret_call_gaquomod_11))
	(bra gaquomod)
ret_call_gaquomod_11
	(eval ())
	(mov |.exmod| a1)
	(mov (cval a1) a1)
	(return)
gacom
	(eval ())
	(cnbge a4 '2 gacom0)
	(mov '2 a1)
	(mov cpfnt a2)
	(bra errwna)
gacom0
	(push a4)
	(xspmov a4 a1)
gacom1
	(btfix a1 gacomfx1)
	(btfloat a1 gacomfl3)
	(sobgtz a4 gacomgn0)
gacom2
	(pop a4)
	(decr a4)
	(adjstk a4)
	(pop a1)
	(return)
gacom3
	(movnil a1)
	(pop a4)
	(adjstk a4)
	(return)
gacomfx0
	(xspmov a4 a2)
	(btfloat a2 gacomfl0)
	(bffix a2 gacomgn1)
	(cnbeq a1 a2 gacomfx2)
	(cnbgt a1 a2 gacomfx3)
	(mov '4 a1)
	(bra gacomfx4)
gacomfx2
	(mov '2 a1)
	(bra gacomfx4)
gacomfx3
	(mov '1 a1)
gacomfx4
	(land a3 a1)
	(cnbeq a1 '0 gacom3)
	(mov a2 a1)
gacomfx1
	(sobgtz a4 gacomfx0)
	(bra gacom2)
gacomfl0
	(float a1)
	(bra gacomfl2)
gacomfl1
	(xspmov a4 a2)
	(btfloat a2 gacomfl2)
	(bffix a2 gacomgn1)
	(float a2)
gacomfl2
	(cfbeq a1 a2 gacomfl4)
	(cfbgt a1 a2 gacomfl5)
	(mov '4 a1)
	(bra gacomfl6)
gacomfl4
	(mov '2 a1)
	(bra gacomfl6)
gacomfl5
	(mov '1 a1)
gacomfl6
	(land a3 a1)
	(cnbeq a1 '0 gacom3)
	(mov a2 a1)
gacomfl3
	(sobgtz a4 gacomfl1)
	(bra gacom2)
gacomgn0
	(xspmov a4 a2)
gacomgn1
	(push a4)
	(push a3)
	(push a2)
	(mov |.gacomp| a3)
	(push (@ ret_call_bangensp2_12))
	(bra bangensp2)
ret_call_bangensp2_12
	(eval ())
	(pop a2)
	(pop a3)
	(pop a4)
	(bffix a1 gacom3)
	(cnbeq a1 '0 gacomgn2)
	(cnbeq a1 '1 gacomgn3)
	(cnbne a1 moinsun gacom3)
	(mov '4 a1)
	(bra gacomgn4)
gacomgn2
	(mov '2 a1)
	(bra gacomgn4)
gacomgn3
	(mov '1 a1)
gacomgn4
	(land a3 a1)
	(cnbeq a1 '0 gacom3)
	(mov a2 a1)
	(bra gacom1)
bangensp2
	(push (@ oneret))
	(push a1)
	(push a2)
	(push '2)
	(push (@ ret_call_bangen_13))
	(bra bangen)
ret_call_bangen_13
	(eval ())
	(xspmov '2 a1)
	(mov cpfnt a3)
	(movxsp (@ tworet) '3)
	(push (@ ret_call_bangen_14))
	(bra bangen)
ret_call_bangen_14
	(eval ())
	(pop a4)
	(pop a1)
	(ncons a1)
	(pop a3)
	(cons a3 a1)
	(bra errgen)
oneret
	(return)
tworet
	(pop a4)
	(pop a2)
	(pop a3)
	(pop a4)
	(btnil a1 gacom3)
	(mov a2 a1)
	(bra gacom1)
	(lentry gacomp 3)
	(mov |.gacomp| a3)
	(btfix a1 gacomp5)
	(bffloat a1 bangen2)
	(btfloat a2 gacomp1)
	(bffix a2 bangen2)
	(float a2)
gacomp1
	(cfbeq a1 a2 gacomp3)
	(cfbgt a1 a2 gacomp4)
gacomp2
	(mov moinsun a1)
	(return)
gacomp3
	(mov '0 a1)
	(return)
gacomp4
	(mov '1 a1)
	(return)
gacomp5
	(btfix a2 gacomp6)
	(bffloat a2 bangen2)
	(float a1)
	(bra gacomp1)
gacomp6
	(cnbeq a1 a2 gacomp3)
	(cnbgt a1 a2 gacomp4)
	(bra gacomp2)
	(lentry zerop 2)
	(mov |.zerop| cpfnt)
	(push a1)
	(push '0)
	(mov '2 a4)
	(mov '2 a3)
	(bra gacom)
	(lentry minusp 2)
	(mov |.minusp| cpfnt)
	(push a1)
	(push '0)
	(mov '2 a4)
	(mov '4 a3)
	(bra gacom)
	(lentry plusp 2)
	(mov |.plusp| cpfnt)
	(push a1)
	(push '0)
	(mov '2 a4)
	(mov '3 a3)
	(bra gacom)
gaeqn
	(push a3)
	(push (@ gaeqnret))
	(push a1)
	(push a2)
	(mov |.gaeqen| cpfnt)
	(mov '2 a4)
	(mov '2 a3)
	(bra gacom)
gaeqnret
	(pop a3)
	(return)
	(lentry gaeqen 5)
	(cabne a4 '2 gaeqen2)
	(pop a2)
	(pop a1)
	(bffix a1 gaeqen1)
	(bffix a2 gaeqen1)
	(cnbeq a1 a2 gaeqqn0)
	(movnil a1)
gaeqqn0
	(return)
gaeqen1
	(push a1)
	(push a2)
gaeqen2
	(mov |.gaeqen| cpfnt)
	(mov '2 a3)
	(bra gacom)
	(lentry ganeqn 3)
	(bffix a1 ganen1)
	(bffix a2 ganen1)
	(cnbne a1 a2 ganen0)
	(movnil a1)
ganen0
	(return)
ganen1
	(push a1)
	(push a2)
	(mov |.ganeqn| cpfnt)
	(mov '5 a3)
	(mov '2 a4)
	(bra gacom)
	(lentry gagt 5)
	(mov |.gagt| cpfnt)
	(mov '1 a3)
	(bra gacom)
	(lentry gage 5)
	(mov |.gage| cpfnt)
	(mov '3 a3)
	(bra gacom)
	(lentry galt 5)
	(mov |.galt| cpfnt)
	(mov '4 a3)
	(bra gacom)
	(lentry gale 5)
	(mov |.gale| cpfnt)
	(mov '6 a3)
	(bra gacom)
	(lentry min 5)
	(cnbeq a4 '0 minerr)
	(pop a1)
	(bra min3)
min1
	(topst a2)
	(push a4)
	(push (@ ret_call_mintwo_15))
	(bra mintwo)
ret_call_mintwo_15
	(eval ())
	(pop a4)
	(bfnil a1 min2)
	(pop a1)
	(bra min3)
min2
	(adjstk '1)
min3
	(sobgtz a4 min1)
	(return)
minerr
	(mov '1 a1)
	(mov |.min| a2)
	(bra errwna)
mintwo
	(push a1)
	(push a2)
	(mov '2 a4)
	(bra galt)
	(lentry max 5)
	(cnbeq a4 '0 maxerr)
	(pop a1)
	(bra max3)
max1
	(topst a2)
	(push a4)
	(push (@ ret_call_maxtwo_16))
	(bra maxtwo)
ret_call_maxtwo_16
	(eval ())
	(pop a4)
	(bfnil a1 max2)
	(pop a1)
	(bra max3)
max2
	(adjstk '1)
max3
	(sobgtz a4 max1)
	(return)
maxerr
	(mov '1 a1)
	(mov |.max| a2)
	(bra errwna)
maxtwo
	(push a1)
	(push a2)
	(mov '2 a4)
	(bra gagt)
	(lentry llsin 2)
	(mov |.llsin| a3)
	(btfloat a1 sin2)
	(bffix a1 bangen1)
	(float a1)
sin2
	(sin a1 a1)
	(return)
	(lentry llcos 2)
	(mov |.llcos| a3)
	(btfloat a1 cos2)
	(bffix a1 bangen1)
	(float a1)
cos2
	(cos a1 a1)
	(return)
	(lentry llasin 2)
	(mov |.llasin| a3)
	(btfloat a1 asin2)
	(bffix a1 bangen1)
	(cnbgt a1 '1 bangen1)
	(cnblt a1 moinsun bangen1)
	(float a1)
	(bra asin3)
asin2
	(cfbgt a1 fltun bangen1)
	(cfblt a1 fltmun bangen1)
asin3
	(asin a1 a1)
	(return)
	(lentry llacos 2)
	(mov |.llacos| a3)
	(btfloat a1 acos2)
	(bffix a1 bangen1)
	(cnbgt a1 '1 bangen1)
	(cnblt a1 moinsun bangen1)
	(float a1)
	(bra acos3)
acos2
	(cfbgt a1 fltun bangen1)
	(cfblt a1 fltmun bangen1)
acos3
	(acos a1 a1)
	(return)
	(lentry llatan 2)
	(mov |.llatan| a3)
	(btfloat a1 atan2)
	(bffix a1 bangen1)
	(float a1)
atan2
	(atan a1 a1)
	(return)
	(lentry llexp 2)
	(mov |.llexp| a3)
	(btfloat a1 exp2)
	(bffix a1 bangen1)
	(float a1)
exp2
	(exp a1 a1)
	(return)
	(lentry lllog 2)
	(mov |.lllog| a3)
	(btfloat a1 log2)
	(bffix a1 bangen1)
	(cnble a1 '0 bangen1)
	(float a1)
	(bra log3)
log2
	(cfble a1 fzero bangen1)
log3
	(log a1 a1)
	(return)
	(lentry lllog10 2)
	(mov |.lllog10| a3)
	(btfloat a1 log102)
	(bffix a1 bangen1)
	(cnble a1 '0 bangen1)
	(float a1)
	(bra log103)
log102
	(cfble a1 fzero bangen1)
log103
	(log10 a1 a1)
	(return)
	(lentry llpower 3)
	(mov |.llpower| a3)
	(btfloat a1 power2)
	(bffix a1 bangen2)
	(float a1)
power2
	(btfloat a2 power3)
	(bffix a2 bangen2)
	(float a2)
power3
	(power a1 a2 a1)
	(return)
	(lentry llsqrt 2)
	(mov |.llsqrt| a3)
	(btfloat a1 sqrt2)
	(bffix a1 bangen1)
	(cnblt a1 '0 bangen1)
	(float a1)
	(bra sqrt3)
sqrt2
	(cfblt a1 fzero bangen1)
sqrt3
	(sqrt a1 a1)
	(return)
	(lentry llfixmax 1)
	(mov '32767 a1)
	(plus '0 a1)
	(return)
	(lentry llfixmin 1)
	(mov '-32767 a1)
	(plus '0 a1)
	(return)
	(lentry llminus0 1)
	(mov '#$8000 a1)
	(plus '0 a1)
	(return)
	(end)
))
