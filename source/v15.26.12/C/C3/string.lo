(loader '(
(listext (fillvect exchvect vector bltvect vset vref eqvector vlength typevect bltscrn gensym fpnam hash concat alphales exchstrg typestrg chrset sset chrnth sref chrpos spanstrg scanstrg fillstrg bltstrg duplstrg substring eqstring subsequal caten slen slength plength string ffindex rdpscrn eqvectri makevect makestrg eqstrgi stringa2 stringa1 strgsymb getnumi strgallc ffsymbol ini_str equal nreverse ffuncall hashint trysympk trysymp inicst inisymb tycursor tyo hgc gcvect gcstrg gcnumb gcfloat gccons errstl errnsa errfh erroob errvec errsym errnaa errnia errwna errfs evalan evalt))
(entry startmodule subr0)
	(title string)
	(xrefi llinit |.undef|)
	(xrefi llinit fcons)
	(xrefi llinit bvar)
	(xrefi llinit |.t|)
	(xrefi llinit |.void|)
	(xrefi llinit eheap)
	(xrefi llinit cheap)
	(xrefi llinit fvect)
	(xrefi llinit fstrg)
	(xrefi llinit |.llsystem|)
	(xrefp toperr errfs)
	(xrefp toperr errwna)
	(xrefp toperr errnia)
	(xrefp toperr errnaa)
	(xrefp toperr errsym)
	(xrefp toperr errvec)
	(xrefp toperr erroob)
	(xrefp toperr errfh)
	(xrefp toperr errnsa)
	(xrefp toperr errstl)
	(xrefp gc gccons)
	(xrefp gc gcfloat)
	(xrefp gc gcnumb)
	(xrefp gc gcstrg)
	(xrefp gc gcvect)
	(xrefp gc hgc)
	(xrefp physio tyo)
	(xrefp physio tycursor)
	(xrefi physio |.tyrdspl|)
	(xrefp read inisymb)
	(xrefp read inicst)
	(xrefp read trysymp)
	(xrefp read trysympk)
	(xrefp read hashint)
	(xrefi read cpkgc)
	(xrefi print bufpn)
	(xrefi print obase)
	(xrefp eval ffuncall)
	(xrefi eval savea1)
	(xrefi eval savea2)
	(xrefi eval savea3)
	(xrefi eval savea4)
	(xrefp fntstd nreverse)
	(xrefp fntstd equal)
	(xdefp ini_str)
	(xdefi |.string|)
	(xdefi |.ffsymbol|)
	(xdefi |.vector|)
	(xdefp ffsymbol)
	(xdefp strgallc)
	(xdefp getnumi)
	(xdefp strgsymb)
	(xdefp stringa1)
	(xdefp stringa2)
	(xdefp eqstrgi)
	(xdefp makestrg)
	(xdefp makevect)
	(xdefp eqvectri)
	(xdefp rdpscrn)
	(xdefp ffindex)
	(xdefi bufstrg)
	(impure)
	(ladr ocheap 0)
	(ladr bufstrg 0)
	(pure)
ini_str
	(eval ())
	(makfnt string '6 (strg "string"))
	(makfnt plength '7 (strg "plength"))
	(makfnt slength '7 (strg "slength"))
	(makfnt slen '4 (strg "slen"))
	(makfnt sref '4 (strg "sref"))
	(makfnt sset '4 (strg "sset"))
	(makfnt typestrg '10 (strg "typestring"))
	(makfnt exchstrg '10 (strg "exchstring"))
	(makfnt caten '8 (strg "catenate"))
	(makfnt eqstring '8 (strg "eqstring"))
	(makfnt subsequal '15 (strg "substring-equal"))
	(makfnt substring '9 (strg "substring"))
	(makfnt makestrg '10 (strg "makestring"))
	(makfnt duplstrg '10 (strg "duplstring"))
	(makfnt bltstrg '9 (strg "bltstring"))
	(makfnt fillstrg '10 (strg "fillstring"))
	(makfnt scanstrg '10 (strg "scanstring"))
	(makfnt spanstrg '10 (strg "spanstring"))
	(makfnt chrpos '6 (strg "chrpos"))
	(makfnt chrnth '6 (strg "chrnth"))
	(makfnt chrset '6 (strg "chrset"))
	(makfnt ffindex '5 (strg "index"))
	(makfnt hash '4 (strg "hash"))
	(makfnt ffsymbol '6 (strg "symbol"))
	(makfnt fpnam '5 (strg "pname"))
	(makfnt concat '6 (strg "concat"))
	(makfnt gensym '6 (strg "gensym"))
	(makfnt alphales '10 (strg "alphalessp"))
	(makfnt bltscrn '9 (strg "bltscreen"))
	(makfnt typevect '10 (strg "typevector"))
	(makfnt exchvect '10 (strg "exchvector"))
	(makfnt makevect '10 (strg "makevector"))
	(makfnt vlength '7 (strg "vlength"))
	(makfnt eqvector '8 (strg "eqvector"))
	(makfnt vref '4 (strg "vref"))
	(makfnt vset '4 (strg "vset"))
	(makfnt bltvect '9 (strg "bltvector"))
	(makfnt vector '6 (strg "vector"))
	(makfnt fillvect '10 (strg "fillvector"))
	(makcst genstrg '13 (strg "gensym-string"))
	(mov |.llsystem| (pkgc a1))
	(push a1)
	(mov '1 a1)
	(mov '103 a2)
	(push (@ ret_call_makestrg_1))
	(bra makestrg)
ret_call_makestrg_1
	(eval ())
	(pop a3)
	(mov a1 (cval a3))
	(makcst genscpt '14 (strg "gensym-counter"))
	(mov |.llsystem| (pkgc a1))
	(mov '100 (cval a1))
	(mov '1024 a1)
	(mov '0 a2)
	(push (@ ret_call_makestrg_2))
	(bra makestrg)
ret_call_makestrg_2
	(eval ())
	(mov a1 bufstrg)
	(return)
strgallc
	(eval ())
	(cnbge a2 '0 strgall0)
	(mov '0 a2)
strgall0
	(mov fstrg a1)
	(btnil a1 strgall3)
	(mov cheap ocheap)
	(nxhb a2 cheap)
	(chblt eheap cheap strgall4)
strgall2
	(mov (val a1) fstrg)
	(mov ocheap (val a1))
	(hssize a2 (% ocheap))
	(hsobj a1 (% ocheap))
	(hbmovx '0 a1 a2)
	(mov |.string| (typ a1))
	(return)
strgall3
	(push (@ ret_call_gcstrg_3))
	(bra gcstrg)
ret_call_gcstrg_3
	(eval ())
	(bra strgallc)
strgall4
	(eval ())
	(movnil a1)
	(mov ocheap cheap)
	(push (@ ret_call_hgc_4))
	(bra hgc)
ret_call_hgc_4
	(eval ())
	(mov fstrg a1)
	(mov cheap ocheap)
	(nxhb a2 cheap)
	(chblt cheap eheap strgall2)
	(mov ocheap cheap)
	(movnil a1)
	(bra errfh)
getnumi
	(eval ())
	(cnbeq a1 '#$8000 getmin)
	(cnbge a1 '0 getpos)
	(mov '45 a4)
	(push (@ ret_call_getnumch_5))
	(bra getnumch)
ret_call_getnumch_5
	(eval ())
	(negate a1)
getpos
	(mov a1 a4)
	(rem obase a4)
	(plus '48 a4)
	(cnble a4 '57 getpos2)
	(plus '7 a4)
getpos2
	(quo obase a1)
	(cnbeq a1 '0 getnumch)
	(push a4)
	(push (@ ret_call_getpos_6))
	(bra getpos)
ret_call_getpos_6
	(eval ())
	(pop a4)
	(bra getnumch)
getmin
	(eval ())
	(mov '35 a4)
	(push (@ ret_call_getnumch_7))
	(bra getnumch)
ret_call_getnumch_7
	(eval ())
	(mov '36 a4)
	(push (@ ret_call_getnumch_8))
	(bra getnumch)
ret_call_getnumch_8
	(eval ())
	(mov '56 a4)
	(push (@ ret_call_getnumch_9))
	(bra getnumch)
ret_call_getnumch_9
	(eval ())
	(mov '48 a4)
	(push (@ ret_call_getnumch_10))
	(bra getnumch)
ret_call_getnumch_10
	(eval ())
	(push (@ ret_call_getnumch_11))
	(bra getnumch)
ret_call_getnumch_11
	(eval ())
getnumch
	(eval ())
	(hbmovx a4 a3 a2)
	(incr a2)
	(return)
badstr2
	(mov a2 a1)
badstr1
	(mov savea4 a2)
	(bra errnsa)
badvec2
	(mov a2 a1)
badvec1
	(mov savea4 a2)
	(bra errvec)
badnbar5
	(eval ())
	(mov '5 a1)
	(bra badnba31)
badnbar3
	(eval ())
	(mov '3 a1)
badnba31
	(mov savea4 a2)
	(bra errwna)
badnbar4
	(eval ())
	(mov '4 a1)
	(bra badnba31)
badoob1
	(eval ())
	(mov savea4 a2)
	(bra erroob)
badfix2
	(mov a2 a1)
badfix1
	(mov savea4 a2)
	(bra errnia)
badfix3
	(mov a3 a1)
	(bra badfix1)
badfix4
	(mov a4 a1)
	(bra badfix1)
badind2
	(mov a2 a1)
badind1
	(mov savea4 a2)
	(bra erroob)
badind3
	(mov a3 a1)
	(bra badind1)
badind4
	(mov a4 a1)
	(bra badind1)
mina1a2
	(cnbgt a2 a1 mina1a2x)
	(return)
mina1a2x
	(mov a1 a2)
	(return)
mina1a3
	(cnbgt a3 a1 mina1a3x)
	(return)
mina1a3x
	(mov a1 a3)
	(return)
mina1a4
	(cnbgt a4 a1 mina1a4x)
	(return)
mina1a4x
	(mov a1 a4)
	(return)
mina3a1
	(cnbgt a1 a3 mina3a1x)
	(return)
mina3a1x
	(mov a3 a1)
	(return)
mina3a4
	(cnbgt a4 a3 mina3a4x)
	(return)
mina3a4x
	(mov a3 a4)
	(return)
mina4a1
	(cnbgt a1 a4 mina4a1x)
	(return)
mina4a1x
	(mov a4 a1)
	(return)
mina4a3
	(cnbgt a3 a4 mina4a3x)
	(return)
mina4a3x
	(mov a4 a3)
	(return)
strfalse
	(movnil a1)
	(return)
	(lentry string 2)
	(btstrg a1 stringr)
	(bfsymb a1 stringc)
	(mov (alink a1) a2)
	(btstrg a2 stringr2)
	(mov (pname a1) a2)
	(btstrg a2 stringr2)
	(mov (alink a2) a2)
stringr2
	(mov a2 a1)
stringr
	(return)
stringc
	(mov |.string| savea4)
	(bra strgrest)
stringa1
	(eval ())
	(bfstrg a1 strgrest)
	(return)
strgsymb
	(push a2)
	(mov (alink a1) a2)
	(btstrg a2 strgsyre)
	(mov (pname a1) a2)
	(btstrg a2 strgsyre)
	(mov (alink a2) a2)
strgsyre
	(mov a2 a1)
	(pop a2)
	(return)
strgrest
	(eval ())
	(btsymb a1 strgsymb)
	(btvect a1 badstr1)
	(push a2)
	(push a3)
	(mov bufstrg a3)
	(bffloat a1 strgnf)
	(cvftoa a1 a3 a2)
	(bra strgfol)
strgnf
	(mov '0 a2)
	(push a4)
	(bffix a1 strgnn)
	(push (@ ret_call_getnumi_12))
	(bra getnumi)
ret_call_getnumi_12
	(eval ())
	(bra strgfol4)
strgnn
	(btnil a1 strgfol4)
	(bfcons a1 badstr1)
	(mov (car a1) a4)
	(bffix a4 badstr1)
	(push (@ ret_call_getnumch_13))
	(bra getnumch)
ret_call_getnumch_13
	(eval ())
	(cnbge a2 '1024 badstr1)
	(mov (cdr a1) a1)
	(bra strgnn)
strgfol4
	(pop a4)
strgfol
	(eval ())
	(push (@ ret_call_strgallc_14))
	(bra strgallc)
ret_call_strgallc_14
	(eval ())
	(hbmovm a2 a3 '0 a1 '0)
	(pop a3)
	(pop a2)
	(return)
stringa2
	(eval ())
	(bfstrg a2 stra2c)
	(return)
stra2c
	(push a1)
	(mov a2 a1)
	(push (@ ret_call_strgrest_15))
	(bra strgrest)
ret_call_strgrest_15
	(eval ())
	(mov a1 a2)
	(pop a1)
	(return)
stringa3
	(eval ())
	(bfstrg a3 stra3c)
	(return)
stra3c
	(push a1)
	(mov a3 a1)
	(push (@ ret_call_strgrest_16))
	(bra strgrest)
ret_call_strgrest_16
	(eval ())
	(mov a1 a3)
	(pop a1)
	(return)
	(lentry plength 2)
	(mov |.plength| savea4)
	(push (@ ret_call_stringa1_17))
	(bra stringa1)
ret_call_stringa1_17
	(eval ())
	(hgsize a1 a1)
	(return)
	(lentry slength 2)
	(mov |.slength| savea4)
	(push (@ ret_call_stringa1_18))
	(bra stringa1)
ret_call_stringa1_18
	(eval ())
	(hgsize a1 a1)
	(return)
	(lentry slen 2)
	(mov |.slen| savea4)
	(bfstrg a1 badstr1)
	(hgsize a1 a1)
	(return)
	(lentry caten 5)
	(mov |.caten| savea4)
caten0
	(eval ())
	(mov a4 a3)
	(mov '0 a2)
	(bra caten2)
caten1
	(xspmov a4 a1)
	(push (@ ret_call_stringa1_19))
	(bra stringa1)
ret_call_stringa1_19
	(eval ())
	(movxsp a1 a4)
	(hgsize a1 a1)
	(plus a1 a2 catenstl)
caten2
	(eval ())
	(sobgez a4 caten1)
	(push a3)
	(push (@ ret_call_strgallc_20))
	(bra strgallc)
ret_call_strgallc_20
	(eval ())
	(pop a4)
	(bra caten4)
caten3
	(pop a3)
	(hgsize a3 savea1)
	(diff savea1 a2)
	(hbmovm savea1 a3 '0 a1 a2)
caten4
	(sobgez a4 caten3)
	(return)
catenstl
	(mov '32767 a1)
	(mov |.caten| a2)
	(bra errstl)
	(lentry subsequal 5)
	(mov |.subsequal| savea4)
	(cnbne a4 '5 badnbar5)
	(mov (& 3) a1)
	(bfstrg a1 badstr1)
	(mov (& 1) a2)
	(bfstrg a2 badstr2)
	(mov (& 2) a3)
	(bffix a3 badfix3)
	(cnblt a3 '0 badind3)
	(mov (& 0) a4)
	(bffix a4 badfix4)
	(cnblt a4 '0 badind4)
	(mov a1 savea1)
	(mov a2 savea2)
	(mov (& 4) a1)
	(bffix a1 badfix1)
	(cnblt a1 '0 badind1)
	(mov a1 a2)
	(plus a3 a2)
	(hgsize savea1 savea3)
	(cnbgt a2 savea3 badind1)
	(mov a1 a2)
	(plus a4 a2)
	(hgsize savea2 savea3)
	(cnbgt a2 savea3 badind1)
	(adjstk '5)
	(hbteq a1 savea1 a3 savea2 a4 subseqr)
	(movnil a1)
subseqr
	(return)
	(lentry eqstring 3)
	(mov |.eqstring| savea4)
	(push (@ ret_call_stringa1_21))
	(bra stringa1)
ret_call_stringa1_21
	(eval ())
	(push (@ ret_call_stringa2_22))
	(bra stringa2)
ret_call_stringa2_22
	(eval ())
eqstrgi
	(eval ())
	(cabeq a1 a2 sret)
	(hgsize a1 a3)
	(hgsize a2 a4)
	(cnbne a3 a4 sfalse)
	(mov (typ a1) a4)
	(bfsymb a4 eqstrg2)
	(cabne a4 (typ a2) sfalse)
	(hbteq a3 a1 '0 a2 '0 sret)
sfalse
	(movnil a1)
sret
	(return)
eqstrg2
	(push a1)
	(push a2)
	(push a3)
	(mov a4 a1)
	(mov (typ a2) a2)
	(push (@ ret_call_equal_23))
	(bra equal)
ret_call_equal_23
	(eval ())
	(mov a1 a4)
	(pop a3)
	(pop a2)
	(pop a1)
	(btnil a4 sfalse2)
	(hbteq a3 a1 '0 a2 '0 sret2)
sfalse2
	(movnil a1)
sret2
	(return)
	(lentry substring 5)
	(mov |.substring| savea4)
	(mov '32767 a1)
	(cnbeq a4 '2 substr1)
	(cnbne a4 '3 badnbar3)
	(pop a1)
	(bffix a1 badfix1)
substr1
	(eval ())
	(pop a4)
	(bffix a4 badfix4)
	(cnblt a4 '0 badind4)
	(pop a3)
	(push (@ ret_call_stringa3_24))
	(bra stringa3)
ret_call_stringa3_24
	(eval ())
	(hgsize a3 a2)
	(diff a4 a2)
substr2
	(push (@ ret_call_mina1a2_25))
	(bra mina1a2)
ret_call_mina1a2_25
	(eval ())
	(push (@ ret_call_strgallc_26))
	(bra strgallc)
ret_call_strgallc_26
	(eval ())
	(hbmovm a2 a3 a4 a1 '0)
	(return)
	(lentry makestrg 3)
	(mov |.makestrg| savea4)
	(bffix a1 badfix1)
	(cnbge a1 '0 makstrg0)
	(mov '0 a1)
makstrg0
	(bffix a2 badfix2)
	(push a2)
	(mov a1 a2)
	(push (@ ret_call_strgallc_27))
	(bra strgallc)
ret_call_strgallc_27
	(eval ())
	(pop a3)
	(bra makstrg2)
makstrg1
	(hbmovx a3 a1 a2)
makstrg2
	(sobgez a2 makstrg1)
	(return)
	(lentry duplstrg 3)
	(mov |.duplstrg| savea4)
	(bffix a1 badfix1)
	(cnblt a1 '0 dupserr)
	(push (@ ret_call_stringa2_28))
	(bra stringa2)
ret_call_stringa2_28
	(eval ())
	(mov a2 a3)
	(hgsize a2 a4)
	(mov a4 a2)
	(times a1 a2 dupsstl)
	(mov a1 savea1)
	(push (@ ret_call_strgallc_29))
	(bra strgallc)
ret_call_strgallc_29
	(eval ())
	(mov '0 a2)
	(bra dupstrg2)
dupstrg1
	(hbmovm a4 a3 '0 a1 a2)
	(plus a4 a2)
dupstrg2
	(sobgez savea1 dupstrg1)
	(return)
dupserr
	(mov |.duplstrg| a2)
	(bra erroob)
dupsstl
	(mov |.duplstrg| a2)
	(bra errstl)
	(lentry bltstrg 5)
	(mov |.bltstrg| savea4)
	(cnbeq a4 '5 bltstrg0)
	(mov '32767 a3)
	(cnbeq a4 '4 bltstrg1)
	(mov '0 a2)
	(cnbne a4 '3 badnbar3)
	(bra bltstrg2)
bltstrg0
	(eval ())
	(pop a3)
	(bffix a3 badfix3)
bltstrg1
	(eval ())
	(pop a2)
	(bffix a2 badfix2)
	(cnblt a2 '0 badind2)
bltstrg2
	(eval ())
	(mov a2 savea2)
	(pop a2)
	(push (@ ret_call_stringa2_30))
	(bra stringa2)
ret_call_stringa2_30
	(eval ())
	(pop a1)
	(bffix a1 badfix1)
	(cnblt a1 '0 badind1)
	(mov a1 savea1)
	(topst a1)
	(bfstrg a1 badstr1)
	(hgsize a1 a1)
	(diff savea1 a1)
bltstr3
	(push (@ ret_call_mina1a3_31))
	(bra mina1a3)
ret_call_mina1a3_31
	(eval ())
	(hgsize a2 a4)
	(diff savea2 a4)
bltstr4
	(push (@ ret_call_mina4a3_32))
	(bra mina4a3)
ret_call_mina4a3_32
	(eval ())
	(pop a1)
	(cnble a3 '0 bltstrg6)
	(hbmovm a3 a2 savea2 a1 savea1)
bltstrg6
	(return)
	(lentry fillstrg 5)
	(mov |.fillstrg| savea4)
	(mov '32767 a1)
	(cnbeq a4 '3 fillstr0)
	(cnbne a4 '4 badnbar4)
	(pop a1)
	(bffix a1 badfix1)
fillstr0
	(eval ())
	(pop a3)
	(bffix a3 badfix3)
	(pop a2)
	(bffix a2 badfix2)
	(cnblt a2 '0 badind2)
	(mov a1 a4)
	(topst a1)
	(bfstrg a1 badstr1)
	(hgsize a1 a1)
	(diff a2 a1)
fillstr6
	(push (@ ret_call_mina1a4_33))
	(bra mina1a4)
ret_call_mina1a4_33
	(eval ())
	(pop a1)
	(bra fillstr8)
fillstr7
	(hbmovx a3 a1 a2)
	(incr a2)
fillstr8
	(sobgez a4 fillstr7)
	(return)
	(lentry scanstrg 5)
	(mov |.scanstrg| savea4)
sanstrg1
	(eval ())
	(mov '0 a3)
	(cnbeq a4 '2 sanstrg2)
	(cnbne a4 '3 badnbar3)
	(pop a3)
	(bffix a3 badfix3)
	(cnblt a3 '0 badind3)
sanstrg2
	(eval ())
	(pop a2)
	(push (@ ret_call_stringa2_34))
	(bra stringa2)
ret_call_stringa2_34
	(eval ())
	(pop a1)
	(push (@ ret_call_stringa1_35))
	(bra stringa1)
ret_call_stringa1_35
	(eval ())
	(hgsize a1 a4)
	(diff a3 a4 sanstrg4)
	(bra sanstrg4)
sanstrg3
	(eval ())
	(push a1)
	(push a3)
	(push a4)
	(hbxmov a1 a3 a4)
	(hgsize a2 a3)
	(bra sanpos6)
sanpos5
	(eval ())
	(hbxmov a2 a3 a1)
	(cabeq a4 a1 sanpos9)
sanpos6
	(sobgez a3 sanpos5)
	(cabne |.scanstrg| savea4 sanstrg6)
	(bra sanposf)
sanpos9
	(eval ())
	(cabne |.spanstrg| savea4 sanstrg6)
sanposf
	(eval ())
	(pop a4)
	(pop a3)
	(pop a1)
	(incr a3)
sanstrg4
	(sobgez a4 sanstrg3)
	(bra strfalse)
sanstrg6
	(eval ())
	(pop a4)
	(pop a1)
	(pop a4)
	(return)
	(lentry spanstrg 5)
	(mov |.spanstrg| savea4)
	(bra sanstrg1)
	(lentry chrpos 5)
	(mov |.chrpos| savea4)
	(mov '0 a3)
	(cnbeq a4 '2 chrpos1)
	(cnbne a4 '3 badnbar3)
	(pop a3)
	(bffix a3 badfix3)
	(cnblt a3 '0 badind3)
chrpos1
	(eval ())
	(pop a2)
	(push (@ ret_call_stringa2_36))
	(bra stringa2)
ret_call_stringa2_36
	(eval ())
	(pop a1)
	(bffix a1 badfix1)
	(land '255 a1)
	(hgsize a2 a4)
	(diff a3 a4 chrpos3)
	(bra chrpos3)
chrpos2
	(eval ())
	(hbxmov a2 a3 savea1)
	(cabeq savea1 a1 chrpos5)
	(incr a3)
chrpos3
	(sobgez a4 chrpos2)
	(movnil a1)
	(return)
chrpos5
	(eval ())
	(mov a3 a1)
	(return)
	(lentry sref 3)
	(mov |.sref| savea4)
	(bfstrg a1 badstr1)
	(bffix a2 badfix2)
	(cnblt a2 '0 badind2)
	(hgsize a1 a3)
	(cnbge a2 a3 badind2)
	(hbxmov a1 a2 a1)
	(return)
	(lentry chrnth 3)
	(mov |.chrnth| savea4)
	(push (@ ret_call_stringa2_37))
	(bra stringa2)
ret_call_stringa2_37
	(eval ())
	(bffix a1 badfix1)
	(cnblt a1 '0 strfalse)
	(hgsize a2 a3)
	(cnbge a1 a3 strfalse)
	(hbxmov a2 a1 a1)
	(return)
	(lentry sset 4)
	(mov |.sset| savea4)
	(mov a1 a4)
	(mov a2 a1)
	(mov a4 a2)
	(bfstrg a2 badstr2)
	(push a3)
	(push (@ ret_call_chrset5_38))
	(bra chrset5)
ret_call_chrset5_38
	(eval ())
	(pop a1)
	(return)
	(lentry chrset 4)
	(mov |.chrset| savea4)
	(push (@ ret_call_stringa2_39))
	(bra stringa2)
ret_call_stringa2_39
	(eval ())
chrset5
	(bffix a1 badfix1)
	(cnblt a1 '0 badind1)
	(bffix a3 badfix3)
	(hgsize a2 a4)
	(cnbge a1 a4 badind1)
	(hbmovx a3 a2 a1)
	(mov a3 a1)
	(return)
	(lentry typestrg 5)
	(mov |.typestrg| a2)
	(cnbeq a4 '1 typesg)
	(cnbeq a4 '2 typess)
	(mov '1 a1)
	(bra errwna)
typesg
	(pop a1)
	(bfstrg a1 typeser3)
typesg2
	(mov (typ a1) a1)
	(return)
typess
	(pop a1)
	(btsymb a1 types2)
	(bfcons a1 typeser2)
types2
	(btnil a1 typeser2)
	(pop a3)
	(bfstrg a3 typeser1)
	(mov a1 (typ a3))
	(return)
typeser1
	(mov a3 a1)
typeser3
	(bra errnsa)
typeser2
	(bra errsym)
	(lentry exchstrg 3)
	(mov |.exchstrg| savea4)
	(bfstrg a1 badstr1)
	(bfstrg a2 badstr2)
	(push (typ a1))
	(push (typ a2))
	(mov (val a1) ocheap)
	(mov (val a2) (val a1))
	(mov ocheap (val a2))
	(hsobj a1 a1)
	(hsobj a2 a2)
	(pop (typ a1))
	(pop (typ a2))
	(return)
	(lentry ffindex 5)
	(mov |.ffindex| savea4)
	(mov '0 a3)
	(cnbeq a4 '2 ffindg3)
	(cnbne a4 '3 badnbar3)
	(pop a3)
	(bffix a3 badfix3)
	(cnblt a3 '0 badind3)
ffindg3
	(eval ())
	(pop a2)
	(push (@ ret_call_stringa2_40))
	(bra stringa2)
ret_call_stringa2_40
	(eval ())
	(pop a1)
	(push (@ ret_call_stringa1_41))
	(bra stringa1)
ret_call_stringa1_41
	(eval ())
	(hgsize a2 a4)
	(hgsize a1 savea1)
	(diff savea1 a4)
	(diff a3 a4)
	(incr a4)
	(bra ffindex4)
ffindex3
	(eval ())
	(hbteq savea1 a2 a3 a1 '0 ffindex6)
	(incr a3)
ffindex4
	(sobgez a4 ffindex3)
	(movnil a1)
	(return)
ffindex6
	(mov a3 a1)
	(return)
	(lentry alphales 3)
	(mov |.alphales| savea4)
	(push (@ ret_call_stringa1_42))
	(bra stringa1)
ret_call_stringa1_42
	(eval ())
	(push (@ ret_call_stringa2_43))
	(bra stringa2)
ret_call_stringa2_43
	(eval ())
	(hgsize a1 a3)
	(hgsize a2 a4)
	(push (@ ret_call_mina3a4_44))
	(bra mina3a4)
ret_call_mina3a4_44
	(eval ())
	(mov '0 a3)
	(bra alpha2)
alpha1
	(eval ())
	(hbxmov a1 a3 savea1)
	(hbxmov a2 a3 savea2)
	(cnblt savea1 savea2 strue)
	(cnbne savea1 savea2 strfalse)
	(incr a3)
alpha2
	(sobgez a4 alpha1)
	(hgsize a1 a4)
	(cnbne a4 a3 strfalse)
strue
	(mov |.t| a1)
	(return)
	(lentry ffsymbol 3)
	(bfsymb a2 ffsymb1)
	(bra trysympk)
ffsymb1
	(mov |.ffsymbol| savea4)
	(push (@ ret_call_stringa2_45))
	(bra stringa2)
ret_call_stringa2_45
	(eval ())
	(bfsymb a1 ffsymbr2)
	(bra trysymp)
ffsymbr2
	(mov |.ffsymbol| a2)
	(bra errsym)
	(lentry concat 5)
	(xspmov a4 savea2)
	(movxsp (@ concat9) a4)
	(mov |.concat| savea4)
	(bra caten0)
concat9
	(mov a1 a2)
	(movnil a1)
	(push savea2)
	(bra trysymp)
	(lentry hash 2)
	(mov |.hash| savea4)
	(push (@ ret_call_stringa1_46))
	(bra stringa1)
ret_call_stringa1_46
	(eval ())
	(bra hashint)
	(lentry fpnam 2)
	(mov |.fpnam| savea4)
	(push (@ ret_call_stringa1_47))
	(bra stringa1)
ret_call_stringa1_47
	(eval ())
	(hgsize a1 a2)
	(mov a1 a3)
	(movnil a1)
	(bra fpnam2)
fpnam1
	(hbxmov a3 a2 a4)
	(cons a4 a1)
fpnam2
	(sobgez a2 fpnam1)
	(return)
	(lentry gensym 1)
	(mov |.genstrg| a1)
	(push (cval a1))
	(mov |.genscpt| a2)
	(mov (cval a2) a1)
	(incr a1)
gennerr
	(mov a1 (cval a2))
	(push a1)
	(mov '2 a4)
	(bra concat)
rdpscrn
	(eval ())
	(mov |.tyrdspl| savea4)
	(bra bltscrn0)
rdpscrn1
	(eval ())
	(hbteq dlx savea1 a3 savea2 a3 rdpscrn5)
	(push a3)
	(push a4)
	(mov dlx a4)
	(mov a3 oldid)
	(plus a4 oldid)
	(mov xr oldx)
	(plus a4 oldx)
rdpscrn3
	(eval ())
	(hbxmov savea1 a3 a1)
	(hbxmov savea2 a3 a2)
	(hbmovx a1 savea2 a3)
	(cnbne a1 a2 scrnaff)
rdpscrn4
	(eval ())
	(incr a3)
	(sobgtz a4 rdpscrn3)
	(pop a4)
	(pop a3)
rdpscrn5
	(eval ())
	(plus wd a3)
	(incr yr)
	(sobgtz a4 rdpscrn1)
	(return)
scrnaff
	(eval ())
	(push savea1)
	(push savea2)
	(push a4)
	(push a3)
	(cnbge a1 '32 scrnaff0)
	(mov '46 a1)
scrnaff0
	(eval ())
	(diff oldid a3)
	(plus a3 oldid)
	(plus a3 oldx)
	(mov a3 a4)
	(push (@ scrnaff3))
	(cnbne a3 '1 scrnaff4)
scrnaff1
	(eval ())
	(push a1)
scrnaff2
	(bra tyo)
scrnaff3
	(eval ())
	(pop a3)
	(pop a4)
	(pop savea2)
	(pop savea1)
	(bra rdpscrn4)
scrnaff4
	(mov (& 1) a2)
	(decr a2)
	(cnbne a3 '3 scrnaff7)
	(decr a2)
	(hbxmov savea1 a2 a3)
	(push a3)
	(incr a2)
scrnaff6
	(hbxmov savea1 a2 a3)
	(push a3)
	(bra scrnaff1)
scrnaff7
	(cnbeq a3 '2 scrnaff6)
	(push a1)
	(mov oldx a1)
	(mov yr a2)
	(push (@ ret_call_tycursor_48))
	(bra tycursor)
ret_call_tycursor_48
	(eval ())
	(mov '1 a4)
	(bra scrnaff2)
	(impure)
	(ladr wd 0)
	(ladr ws 0)
	(ladr dlx 0)
	(ladr dly 0)
	(ladr oldid 0)
	(ladr oldx 0)
	(ladr llid 0)
	(ladr llis 0)
	(ladr xr 0)
	(ladr yr 0)
	(ladr ys 0)
	(pure)
	(pure)
clipscrn
	(bffix a1 badfix1)
	(mov '0 a4)
	(cnblt a1 '0 clipscr3)
	(mov a1 a3)
clipscr1
	(bffix a2 badfix2)
	(cnblt a2 '0 clipscr4)
	(plus a2 a4)
	(return)
clipscr3
	(mov '0 a3)
	(diff a1 a4)
	(bra clipscr1)
clipscr4
	(diff a2 a3)
	(return)
mina1dlx
	(cnbgt dlx a1 minx1)
	(return)
minx1
	(mov a1 dlx)
	(return)
mina1dly
	(cnbgt dly a1 miny1)
	(return)
miny1
	(mov a1 dly)
	(return)
	(lentry bltscrn 5)
	(mov |.bltscrn| savea4)
bltscrn0
	(eval ())
	(pop a1)
	(cnbeq a4 '12 bltscrna)
	(cnbne a4 '4 badnbar4)
	(bffix a1 badfix1)
	(pop a2)
	(bffix a2 badfix2)
	(mov a2 dlx)
	(mov a1 dly)
	(mov a2 ws)
	(mov a2 wd)
	(mov '0 llid)
	(mov '0 xr)
	(mov '0 yr)
	(mov '0 llis)
	(mov '0 a3)
	(mov '0 a4)
	(bra bltscrnb)
bltscrna
	(eval ())
	(bffix a1 badfix1)
	(mov a1 dly)
	(pop a1)
	(bffix a1 badfix1)
	(mov a1 dlx)
	(pop ys)
	(pop a2)
	(pop yr)
	(pop a1)
	(push (@ ret_call_clipscrn_49))
	(bra clipscrn)
ret_call_clipscrn_49
	(eval ())
	(mov a3 xr)
	(mov a3 llid)
	(mov a4 llis)
	(mov ys a2)
	(mov yr a1)
	(push (@ ret_call_clipscrn_50))
	(bra clipscrn)
ret_call_clipscrn_50
	(eval ())
	(mov a3 yr)
	(pop a1)
	(bffix a1 badfix1)
	(diff a4 a1)
	(push (@ ret_call_mina1dly_51))
	(bra mina1dly)
ret_call_mina1dly_51
	(eval ())
	(pop a1)
	(bffix a1 badfix1)
	(mov a1 ws)
	(diff llis a1)
	(push (@ ret_call_mina1dlx_52))
	(bra mina1dlx)
ret_call_mina1dlx_52
	(eval ())
	(pop a1)
	(bffix a1 badfix1)
	(diff a3 a1)
	(push (@ ret_call_mina1dly_53))
	(bra mina1dly)
ret_call_mina1dly_53
	(eval ())
	(pop a1)
	(bffix a1 badfix1)
	(mov a1 wd)
	(diff llid a1)
	(push (@ ret_call_mina1dlx_54))
	(bra mina1dlx)
ret_call_mina1dlx_54
	(eval ())
bltscrnb
	(eval ())
	(pop savea2)
	(bfstrg savea2 bltscrn8)
	(pop savea1)
	(bfstrg savea1 bltscrn9)
	(cnble dlx '0 bltscrn7)
	(cnble dly '0 bltscrn7)
	(times ws a4)
	(plus a4 llis)
	(mov dly a4)
	(times wd a3)
	(plus llid a3)
	(cabeq |.tyrdspl| savea4 rdpscrn1)
	(mov dlx a1)
	(mov llis a2)
bltscrn6
	(eval ())
	(hbmovm a1 savea2 a2 savea1 a3)
	(plus wd a3)
	(plus ws a2)
	(sobgtz a4 bltscrn6)
bltscrn7
	(return)
bltscrn8
	(mov savea2 a1)
	(bra badstr1)
bltscrn9
	(mov savea1 a1)
	(bra badstr1)
	(lentry typevect 5)
	(mov |.typevect| a2)
	(cnbeq a4 '1 typevg)
	(cnbeq a4 '2 typevs)
	(mov '1 a1)
	(bra errwna)
typevg
	(pop a1)
	(bfvect a1 typever3)
	(mov (typ a1) a1)
	(return)
typevs
	(pop a1)
	(btsymb a1 typevs2)
	(bfcons a1 typever2)
typevs2
	(btnil a1 typever2)
	(pop a3)
	(bfvect a3 typever1)
	(mov a1 (typ a3))
	(return)
typever1
	(mov a3 a1)
typever3
	(bra errvec)
typever2
	(bra errsym)
	(lentry makevect 3)
	(mov |.makevect| savea4)
	(bffix a1 badfix1)
	(cnblt a1 '0 badind1)
	(mov a1 a3)
makvect0
	(mov fvect a1)
	(btnil a1 makvect3)
	(mov cheap ocheap)
	(nxhp a3 cheap)
	(chblt eheap cheap makvect4)
makvect2
	(mov (val a1) fvect)
	(mov ocheap (val a1))
	(hssize a3 (% ocheap))
	(hsobj a1 (% ocheap))
	(bra vectfil4)
vectfil1
	(hpmovx a2 a1 a3)
vectfil4
	(sobgez a3 vectfil1)
	(mov |.vector| (typ a1))
	(return)
makvect3
	(push (@ ret_call_gcvect_55))
	(bra gcvect)
ret_call_gcvect_55
	(eval ())
	(bra makvect0)
makvect4
	(eval ())
	(movnil a1)
	(mov ocheap cheap)
	(push (@ ret_call_hgc_56))
	(bra hgc)
ret_call_hgc_56
	(eval ())
	(mov fvect a1)
	(mov cheap ocheap)
	(nxhp a3 cheap)
	(chblt cheap eheap makvect2)
	(movnil a1)
	(mov ocheap cheap)
	(bra errfh)
	(lentry vlength 2)
	(mov |.vlength| savea4)
	(bfvect a1 badvec1)
	(hgsize a1 a1)
	(return)
	(lentry eqvector 3)
	(mov |.eqvector| savea4)
	(bfvect a1 badvec1)
	(bfvect a2 badvec2)
eqvectri
	(eval ())
	(hgsize a1 a3)
	(hgsize a2 a4)
	(cnbne a3 a4 strfalse)
	(mov (typ a1) a4)
	(bfsymb a4 eqvect6)
	(cabne a4 (typ a2) strfalse)
	(bra eqvect5)
eqvect4
	(push a1)
	(push a2)
	(hpxmov a1 a3 a1)
	(hpxmov a2 a3 a2)
	(push a3)
	(push (@ ret_call_equal_57))
	(bra equal)
ret_call_equal_57
	(eval ())
	(mov a1 a4)
	(pop a3)
	(pop a2)
	(pop a1)
	(btnil a4 strfalse)
eqvect5
	(sobgez a3 eqvect4)
	(return)
eqvect6
	(push a1)
	(push a2)
	(push a3)
	(mov a4 a1)
	(mov (typ a2) a2)
	(push (@ ret_call_equal_58))
	(bra equal)
ret_call_equal_58
	(eval ())
	(mov a1 a4)
	(pop a3)
	(pop a2)
	(pop a1)
	(bfnil a4 eqvect5)
	(movnil a1)
	(return)
	(lentry vref 3)
	(mov |.vref| savea4)
	(bffix a2 badfix2)
	(cnblt a2 '0 badind2)
	(bfvect a1 badvec1)
	(hgsize a1 a3)
	(cnbge a2 a3 badind2)
	(hpxmov a1 a2 a1)
	(return)
	(lentry vset 4)
	(mov |.vset| savea4)
	(bffix a2 badfix2)
	(cnblt a2 '0 badind2)
	(bfvect a1 badvec1)
	(hgsize a1 a4)
	(cnbge a2 a4 badind2)
	(hpmovx a3 a1 a2)
	(mov a3 a1)
	(return)
	(lentry bltvect 5)
	(mov |.bltvect| savea4)
	(cnbeq a4 '5 bltvect0)
	(mov '32767 a3)
	(cnbeq a4 '4 bltvect1)
	(mov '0 a2)
	(cnbne a4 '3 badnbar3)
	(bra bltvect2)
bltvect0
	(eval ())
	(pop a3)
	(bffix a3 badfix3)
bltvect1
	(eval ())
	(pop a2)
	(bffix a2 badfix2)
	(cnblt a2 '0 badind2)
bltvect2
	(eval ())
	(mov a2 savea2)
	(pop a2)
	(bfvect a2 badvec2)
	(pop a1)
	(bffix a1 badfix1)
	(cnblt a1 '0 badind1)
	(mov a1 savea1)
	(topst a1)
	(bfvect a1 badvec1)
	(hgsize a1 a1)
	(diff savea1 a1)
	(push (@ ret_call_mina1a3_59))
	(bra mina1a3)
ret_call_mina1a3_59
	(eval ())
	(hgsize a2 a4)
	(diff savea2 a4)
	(push (@ ret_call_mina4a3_60))
	(bra mina4a3)
ret_call_mina4a3_60
	(eval ())
	(pop a1)
	(cnble a3 '0 bltvect6)
	(hpmovm a3 a2 savea2 a1 savea1)
bltvect6
	(return)
	(lentry vector 5)
	(mov a4 a1)
	(push a1)
	(movnil a2)
	(push (@ ret_call_makevect_61))
	(bra makevect)
ret_call_makevect_61
	(eval ())
	(pop a4)
	(bra vector2)
vector1
	(pop a2)
	(hpmovx a2 a1 a4)
vector2
	(sobgez a4 vector1)
	(return)
	(lentry exchvect 3)
	(mov |.exchvect| savea4)
	(bfvect a1 badvec1)
	(bfvect a2 badvec2)
	(push (typ a1))
	(push (typ a2))
	(mov (val a1) ocheap)
	(mov (val a2) (val a1))
	(mov ocheap (val a2))
	(hsobj a1 a1)
	(hsobj a2 a2)
	(pop (typ a1))
	(pop (typ a2))
	(return)
	(lentry fillvect 5)
	(mov |.fillvect| savea4)
	(mov '32767 a1)
	(cnbeq a4 '3 fillvec0)
	(cnbne a4 '4 badnbar4)
	(pop a1)
	(bffix a1 badfix1)
fillvec0
	(eval ())
	(pop a3)
	(pop a2)
	(bffix a2 badfix2)
	(cnblt a2 '0 badind2)
	(mov a1 a4)
	(topst a1)
	(bfvect a1 badvec1)
	(hgsize a1 a1)
	(diff a2 a1)
fillvec6
	(push (@ ret_call_mina1a4_62))
	(bra mina1a4)
ret_call_mina1a4_62
	(eval ())
	(pop a1)
	(bra fillvec8)
fillvec7
	(hpmovx a3 a1 a2)
	(incr a2)
fillvec8
	(sobgez a4 fillvec7)
	(return)
	(end)
))
