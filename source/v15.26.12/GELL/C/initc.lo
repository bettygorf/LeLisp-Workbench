(loader '((title |initc.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'initc)))
(defvar #:sys-package:colon 'defC)
(if (not (boundp 'gell-silent-elaboration-p)) (progn (defvar gell-silent-elaboration-p ())))
(if (not (boundp 'gell-prefix-added-by-c)) (progn (defvar gell-prefix-added-by-c "")))
(loader'((entry #:defC:c-name subr1)
(push a1)
(mov '"" a2)
(mov (cvalq gell-prefix-added-by-c) a1)
(jcall eqstring)
(btnil a1 101)
(mov (& 0) a1)
(adjstk '1)
(return)
101
(push (@ 103))
(push (cvalq gell-prefix-added-by-c))
(push (& 2))
(mov '2 a4)
(jmp catenate)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((entry llrt_set_regular_fval subr3)
(push a3)
(push (@ 101))
(push (eval (kwote (#:system:cached-getglobal 'llrt_set_regular_fval))))
(push '1)
(push a1)
(push '0)
(mov a2 a1)
(jcall vag)
(push a1)
(push '0)
(push (& 7))
(push '1)
(mov '8 a4)
(jmp callextern)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry llrt_set_lit_table subr3)
(push a3)
(push a2)
(push (@ 101))
(push (eval (kwote (#:system:cached-getglobal 'llrt_set_lit_table))))
(push '1)
(jcall vag)
(push a1)
(push '0)
(push (& 5))
(push '4)
(push (& 8))
(push '1)
(mov '8 a4)
(jmp callextern)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((entry llrt_check_timestamp subr2)
(push a2)
(push (@ 101))
(push (eval (kwote (#:system:cached-getglobal 'llrt_check_timestamp))))
(push '1)
(jcall vag)
(push a1)
(push '0)
(push (& 5))
(push '3)
(mov '6 a4)
(jmp callextern)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry llrt_set_trace_fval_p subr3)
(entry llrt_set_trace_fval_p subr3)
(push a3)
(push (@ 101))
(push (eval (kwote (#:system:cached-getglobal 'llrt_set_trace_fval_p))))
(push '1)
(push a1)
(push '0)
(mov a2 a1)
(jcall vag)
(push a1)
(push '0)
(mov (& 7) a1)
(jcall vag)
(push a1)
(push '0)
(mov '8 a4)
(jmp callextern)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry local_llrt_set_lit_table subr3)
(bra llrt_set_lit_table)
))
(if (not (boundp 'gell-getglobal-special-cache)) (progn (defvar gell-getglobal-special-cache ())))
(loader'((entry #:defC:gell-getglobal-special-cache subr1)
(push a1)
(mov (cvalq gell-getglobal-special-cache) a2)
(jcall cassoc)
(bfnil a1 101)
(mov (& 0) a1)
(jcall getglobal)
(bfnil a1 101)
(mov (& 0) a1)
(call #:defC:c-name)
(adjstk '1)
(jmp getglobal)
101
(adjstk '1)
(return)
))
(if (not (boundp '#:defC:module-table-name)) (progn (defvar #:defC:module-table-name ())))
(if (not (boundp '#:defC:module-table-adr)) (progn (defvar #:defC:module-table-adr ())))
(if (not (boundp '#:defC:list-module-table-adr)) (progn (defvar #:defC:list-module-table-adr ())))
(if (not (boundp '#:defC:module-date)) (progn (defvar #:defC:module-date ())))
(loader'((entry #:defC:internal-error subr2)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push nil)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push (@ 105))
(push '"***** GELL 15.26: ")
(push (& 6))
(push '" ")
(push (& 9))
(mov '4 a4)
(jmp print)
105
(eval ())
(mov nil a1)
(mov 'eof a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 106))
(push (& 4))
(mov '1 a4)
(jmp outchan)
106
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry defcelaborate nsubr)
(entry defcelaborate nsubr)
(cnbeq a4 '4 101)
(mov 'defcelaborate a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(bfstrg (& 3) 102)
(mov (& 3) (cvalq #:defC:module-table-name))
(bra 103)
102
(mov (& 3) a2)
(mov '"defCelaborate: the name of the module is not a string:" a1)
(call #:defC:internal-error)
103
(bfstrg (& 2) 104)
(mov (& 2) (cvalq #:defC:module-date))
(bra 105)
104
(mov (& 2) a2)
(mov '"defCelaborate: the date is not a string:" a1)
(call #:defC:internal-error)
105
(btvect (& 0) 107)
(mov (& 0) a2)
(mov '"defClit: the literal table is not a vector:" a1)
(call #:defC:internal-error)
107
(mov (& 3) a1)
(call #:defC:c-name)
(call #:defC:gell-getglobal-special-cache)
(push a1)
(cabne a1 '0 108)
(mov (& 4) a2)
(mov '"defCelaborate: module C not linked:" a1)
(call #:defC:internal-error)
(bra 109)
108
(mov (cvalq #:defC:list-module-table-adr) a2)
(jcall cons)
(mov a1 (cvalq #:defC:list-module-table-adr))
(mov (& 0) (cvalq #:defC:module-table-adr))
109
(adjstk '1)
(mov (& 2) a2)
(mov (cvalq #:defC:module-table-adr) a1)
(call llrt_check_timestamp)
(hgsize (& 0) a3)
(mov (& 0) a2)
(mov (cvalq #:defC:module-table-adr) a1)
(call llrt_set_lit_table)
(push (@ 110))
(push (& 4))
(push (cvalq #:defC:module-table-adr))
(push (& 3))
(hgsize (& 4) a4)
(push a4)
(mov '4 a4)
(jmp list)
110
(eval ())
(mov (cvalq #:defC:init-module-list) a2)
(jcall cons)
(mov a1 (cvalq #:defC:init-module-list))
(push (& 1))
111
(bfcons (& 0) 112)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:defC:defcelaborate-check)
(bra 111)
112
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:defC:defcelaborate-check subr1)
(push (car a1))
(push (cdr a1))
(mov (& 1) a1)
(jcall typefn)
(btnil a1 101)
(mov '#:system:loaded-from-file a2)
(mov (& 1) a1)
(jcall remprop)
(mov 'autoload a2)
(mov (& 1) a1)
(jcall remprop)
(bfnil (cvalq gell-silent-elaboration-p) 103)
(push (@ 105))
(mov '0 a4)
(jmp outchan)
105
(eval ())
(push a1)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(push nil)
(mov '1 a4)
(jmp outchan)
108
(eval ())
(push (@ 109))
(push '";;  function    redefined: ")
(push (& 7))
(push '", old:")
(mov (& 9) a1)
(jcall typefn)
(push a1)
(push '" new:")
(push (& 10))
(mov '6 a4)
(jmp print)
109
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 110))
(push (& 4))
(mov '1 a4)
(jmp outchan)
110
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(adjstk '3)
(return)
103
(mov nil a1)
(adjstk '2)
(return)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry defcsetfn subr3)
(entry defcsetfn subr3)
(push a3)
(push a2)
(push a1)
(btsymb a1 102)
(mov a1 a2)
(mov '"defCsetfn: bad symbo name:" a1)
(call #:defC:internal-error)
102
(mov (cvalq #:defC:module-table-name) a2)
(mov (& 1) a1)
(jcall eqstring)
(bfnil a1 104)
(mov (& 1) a2)
(mov '"defCsetfn: bad module table name:" a1)
(call #:defC:internal-error)
104
(mov (& 2) a3)
(mov (cvalq #:defC:module-table-adr) a2)
(mov (& 0) a1)
(adjstk '3)
(bra llrt_set_regular_fval)
))
(if (not (boundp '#:defC:init-module-list)) (progn (defvar #:defC:init-module-list ())))
(loader'((entry initialize-elaborated-modules subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (car a1) a1)
(call local_llrt_set_lit_table)
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(if (not (boundp '#:defC:unresolved-symbols)) (progn (defvar #:defC:unresolved-symbols ())))
(loader'((entry #:defC:resolved-symbol-p subr1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'subr0 103)
(cabeq a4 'subr1 103)
(cabeq a4 'subr2 103)
(cabeq a4 'subr3 103)
(cabeq a4 'nsubr 103)
(cabeq a4 'fsubr 103)
(cabeq a4 'msubr 103)
(cabne a4 'dmsubr 101)
103
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry defccheck subr1)
(entry defccheck subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:defC:unresolved-symbols) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 104)
(mov (cvalq #:defC:unresolved-symbols) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:defC:unresolved-symbols))
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(call #:defC:check-for-unresolved-references)
(mov 'defccheck a1)
(return)
))
(loader'((fentry check-for-unresolved-references subr0)
(entry check-for-unresolved-references subr0)
(push nil)
(push (cvalq gell-silent-elaboration-p))
(mov (& 1) (cvalq gell-silent-elaboration-p))
(push '1)
(push '(gell-silent-elaboration-p))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:defC:check-for-unresolved-references)
(mov (& 1) dlink)
(mov (& 6) (cvalq gell-silent-elaboration-p))
(adjstk '8)
(return)
))
(loader'((entry #:defC:check-for-unresolved-references subr0)
(push (cvalq #:defC:unresolved-symbols))
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(call #:defC:resolved-symbol-p)
(bfnil a1 103)
(bfnil (cvalq gell-silent-elaboration-p) 106)
(push (@ 107))
(mov '0 a4)
(jmp outchan)
107
(eval ())
(push a1)
(push (@ 108))
(push dlink)
(push prot)
(stack dlink)
(push (@ 110))
(push nil)
(mov '1 a4)
(jmp outchan)
110
(eval ())
(push (@ 111))
(push '";;; function not resolved: ")
(push (& 6))
(push '", current type: ")
(mov (& 8) a1)
(jcall typefn)
(push a1)
(mov '4 a4)
(jmp print)
111
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 109) a3)
108
(push a3)
(push a2)
(push (@ 112))
(push (& 4))
(mov '1 a4)
(jmp outchan)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
109
(eval ())
(adjstk '1)
106
(mov (& 0) a1)
(jcall ncons)
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 (cvalq #:defC:unresolved-symbols))
(return)
))
(loader'((fentry gell-clean-core-image subr0)
(entry gell-clean-core-image subr0)
(bra 101)
(fentry #:gell-clean-core-image:g104 subr1)
(entry #:gell-clean-core-image:g104 subr1)
(mov '#:system:loaded-from-file a2)
(jmp remprop)
101
(mov '#:gell-clean-core-image:g104 a1)
(jcall mapoblist)
(mov 'gell-clean-core-image a1)
(return)
))
(loader'((fentry gell-save-core subr3)
(entry gell-save-core subr3)
(push a3)
(push a2)
(push a1)
(jcall gell-clean-core-image)
(push (@ 101))
(mov '0 a4)
(jmp gc)
101
(eval ())
(push (@ 102))
(mov '0 a4)
(jmp gc)
102
(eval ())
(mov 'date a1)
(jcall featurep)
(btnil a1 103)
(jcall date)
(mov a1 a4)
(bra 104)
103
(mov nil a4)
104
(mov a4 (cvalq #:system:save-std-date))
(push (cvalq #:defC:init-module-list))
(mov (& 1) a1)
(jcall save-core)
(btnil a1 105)
(push (@ 107))
(mov '0 a4)
(jmp end)
107
(eval ())
(adjstk '4)
(return)
105
(mov (& 0) a1)
(call initialize-elaborated-modules)
(mov nil (cvalq #:system:initty-after-restore-flag))
(mov nil (cvalq #:system:inibitmap-after-restore-flag))
(push (@ 108))
(push (& 4))
(push (& 4))
(mov '2 a4)
(jmp funcall)
108
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry gell-save-std nsubr)
(entry gell-save-std nsubr)
(cnbge a4 '2 101)
(mov 'gell-save-std a1)
(mov '2 a2)
(jmp #:llcp:errwna)
101
(diff '2 a4)
(jcall #:llcp:nlist)
(push a1)
(jcall gell-clean-core-image)
(push (@ 102))
(push '";; Wait, I am saving : ")
(push (& 3))
(mov '2 a4)
(jmp print)
102
(eval ())
(push (@ 103))
(mov '0 a4)
(jmp gc)
103
(eval ())
(push (@ 104))
(mov '0 a4)
(jmp gc)
104
(eval ())
(mov 'date a1)
(jcall featurep)
(btnil a1 105)
(jcall date)
(mov a1 a4)
(bra 106)
105
(mov nil a4)
106
(mov a4 (cvalq #:system:save-std-date))
(mov (& 0) a3)
(push (car a3))
(mov (cdr a3) a2)
(mov (car a2) a2)
(bfnil a2 107)
(mov (& 0) a2)
(bfnil a2 107)
(mov 'core-init-std a2)
107
(push a2)
(push (cvalq #:defC:init-module-list))
(push (@ 110))
(push (cvalq #:system:core-directory))
(push (& 7))
(push (cvalq #:system:core-extension))
(mov '3 a4)
(jmp catenate)
110
(eval ())
(jcall save-core)
(btnil a1 108)
(btnil (& 2) 111)
(push (@ 113))
(push (& 3))
(push (& 6))
(mov '2 a4)
(jmp funcall)
113
(eval ())
(adjstk '6)
(return)
111
(push (@ 114))
(mov '0 a4)
(jmp end)
114
(eval ())
(adjstk '6)
(return)
108
(mov (& 0) a1)
(call initialize-elaborated-modules)
(mov nil (cvalq #:system:initty-after-restore-flag))
(mov nil (cvalq #:system:inibitmap-after-restore-flag))
(push (@ 115))
(push (& 2))
(push (& 6))
(mov '2 a4)
(jmp funcall)
115
(eval ())
(adjstk '6)
(return)
))
(loader '((end)))
