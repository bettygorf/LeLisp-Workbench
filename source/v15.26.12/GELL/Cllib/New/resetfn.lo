(loader '((title |resetfn.lo|)))
(if (not (>= (version) 15.25)) (progn (error 'load 'erricf 'resetfn)))
(defvar #:sys-package:colon 'gell-resetfn)
(#:messages:put-message '#:gell-resetfn:errnoredef 'french '"impossible de rede'finir la fonction" 'defmessage)
(#:messages:put-message '#:gell-resetfn:errnoredef 'english '"can't redefine the function" 'defmessage)
'#:gell-resetfn:errnoredef
(#:messages:put-message '#:gell-resetfn:errnocomp 'french '"fonction incompatible" 'defmessage)
(#:messages:put-message '#:gell-resetfn:errnocomp 'english '"incompatible function" 'defmessage)
'#:gell-resetfn:errnocomp
(#:messages:put-message '#:gell-resetfn:errnobody 'french '"corps de rede'finition non pre'sent" 'defmessage)
(#:messages:put-message '#:gell-resetfn:errnobody 'english '"no body definition" 'defmessage)
'#:gell-resetfn:errnobody
(defvar #:gell-resetfn:function-name ())
(defvar #:gell-resetfn:body-property '#:gell-resetfn:body-property)
(loader'((fentry #:gell-resetfn:get-body subr0)
(entry #:gell-resetfn:get-body subr0)
(mov '#:gell-resetfn:body-property a2)
(mov (cvalq #:gell-resetfn:function-name) a1)
(jcall getprop)
(btnil a1 101)
(return)
101
(mov (cvalq #:gell-resetfn:function-name) a3)
(mov '#:gell-resetfn:errnobody a2)
(mov '#:gell-resetfn:get-body a1)
(jmp error)
))
(loader '((fentry #:gell-resetfn:function-0 subr0) (jcall #:gell-resetfn:get-body) (mov '0 a4) (jmp #:llcp:ffuncall)))
(loader '((fentry #:gell-resetfn:function-1 subr0) (push a1) (jcall #:gell-resetfn:get-body) (mov '1 a4) (jmp #:llcp:ffuncall)))
(loader '((fentry #:gell-resetfn:function-2 subr0) (push a1) (push a2) (jcall #:gell-resetfn:get-body) (mov '2 a4) (jmp #:llcp:ffuncall)))
(loader '((fentry #:gell-resetfn:function-3 subr0) (push a1) (push a2) (push a3) (jcall #:gell-resetfn:get-body) (mov '3 a4) (jmp #:llcp:ffuncall)))
(loader '((fentry #:gell-resetfn:function-n subr0) (push a4) (jcall #:gell-resetfn:get-body) (pop a4) (jmp #:llcp:ffuncall)))
(loader '((fentry #:gell-resetfn:function-f subr0) (push a1) (jcall #:gell-resetfn:get-body) (pop a2) (mov '0 a4) (bra 102) 101 (push (car a2)) (mov (cdr a2) a2) (incr a4) 102 (btcons a2 101) (jmp #:llcp:ffuncall)))
(loader'((entry #:gell-resetfn:resetfn subr3)
(push a1)
(push a3)
(mov '#:gell-resetfn:body-property a3)
(pop a2)
(jcall putprop)
(push (cvalq #:defC:list-module-table-adr))
(mov (& 1) a1)
(jcall valfn)
(mov a1 a3)
(pop a2)
(mov (& 0) a1)
(call #:gell-resetfn:resetfn-aux)
(bfnil a1 101)
(mov (& 0) a3)
(mov '#:gell-resetfn:errnoredef a2)
(mov 'resetfn a1)
(adjstk '1)
(jmp printerror)
101
(adjstk '1)
(return)
))
(loader'((entry #:gell-resetfn:resetfn-aux subr3)
(push a3)
(push a2)
(push a1)
(btnil a2 101)
(push (@ 105))
(push 'llrt_set_trace_fval_p)
(push a1)
(mov (cdr a2) (& 4))
(push (car a2))
(push a3)
(mov '4 a4)
(jmp funcall)
105
(eval ())
(cabne a1 '0 103)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:gell-resetfn:resetfn-aux)
103
(mov 't a1)
(adjstk '3)
(return)
101
(mov nil a1)
(adjstk '3)
(return)
))
(putprop 'resetfn '(#:defC:list-module-table-adr) '#:complice:fvar)
(loader'((fentry resetfn subr3)
(entry resetfn subr3)
(push a3)
(push a2)
(push a1)
(jcall typefn)
(push a1)
(mov a1 a4)
(cabeq a4 'subr0 103)
(cabeq a4 'subr1 103)
(cabeq a4 'subr2 103)
(cabeq a4 'subr3 103)
(cabeq a4 'nsubr 103)
(cabne a4 'fsubr 101)
103
(mov (& 2) a2)
(jcall eq)
(bfnil a1 102)
(cabne 'expr (& 2) 105)
(mov (& 0) a1)
(cabne a1 'subr0 108)
(mov (& 3) a4)
(btnil (car a4) 109)
(mov nil a4)
(bra 107)
109
(mov 't a4)
(bra 107)
108
(cabne a1 'subr1 111)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a4)
(mov (car a4) a4)
(btnil (cdr a4) 113)
(mov nil a4)
(bra 107)
113
(mov 't a4)
(bra 107)
111
(cabne a1 'subr2 115)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(btnil (cdr a4) 117)
(mov nil a4)
(bra 107)
117
(mov 't a4)
(bra 107)
115
(cabne a1 'subr3 119)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(jcall consp)
(mov a1 a4)
(btnil a4 107)
(mov (& 3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(btnil (cdr a4) 121)
(mov nil a4)
(bra 107)
121
(mov 't a4)
(bra 107)
119
(cabne a1 'nsubr 123)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall variablep)
(mov a1 a4)
(bfnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall last)
(mov (cdr a1) a1)
(jcall variablep)
(mov a1 a4)
(bfnil a4 107)
(mov (& 3) a1)
(mov (car a1) a1)
(jcall length)
(mov '4 a2)
(jcall ge)
(mov a1 a4)
(bra 107)
123
(mov nil a4)
107
(btnil a4 105)
(mov (& 3) a2)
(mov 'lambda a1)
(jcall cons)
(mov a1 a3)
(mov (& 0) a2)
(mov (& 1) a1)
(call #:gell-resetfn:resetfn)
(mov (& 3) a2)
(mov (& 2) a1)
(jcall cons)
(mov 'resetfn a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall putprop)
(bra 102)
105
(cabne 'fexpr (& 2) 125)
(cabne 'fsubr (& 0) 125)
(mov (& 3) a2)
(mov 'flambda a1)
(jcall cons)
(mov a1 a3)
(mov (& 0) a2)
(mov (& 1) a1)
(call #:gell-resetfn:resetfn)
(mov (& 3) a2)
(mov (& 2) a1)
(jcall cons)
(mov 'resetfn a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall putprop)
(bra 102)
125
(bfnil (cvalq #:system:redef-flag) 127)
(mov 'autoload a2)
(mov (& 1) a1)
(jcall getprop)
(bfnil a1 127)
(mov (& 1) a3)
(mov '#:gell-resetfn:errnocomp a2)
(mov 'resetfn a1)
(jcall printerror)
(bra 102)
127
(mov (& 3) a3)
(mov (& 2) a2)
(mov (& 1) a1)
(jcall setfn)
(bra 102)
101
(mov (& 3) a3)
(mov (& 2) a2)
(mov (& 1) a1)
(jcall setfn)
(mov 'compiler a1)
(jcall featurep)
(btnil a1 102)
(mov (& 1) a1)
(jcall macro-openp)
(btnil a1 102)
(mov (& 1) a1)
(jcall remove-macro-open)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader '((end)))
