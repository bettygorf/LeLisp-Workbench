;;; GELL 15.26: elaboration file for the module: testlap
;;;             translation done: "Tue Mar   9 93 16:45:11 "

(with ((outchan ()))
	(print ";Loading elaboration file: testlap.le"))
(unless (boundp '#:module:compiled-list)
	(setq #:module:compiled-list ()))
(newl #:module:compiled-list 'testlap)
(setq #:system:read-case-flag t)

(defcelaborate "GZtestlap" "Tue Mar   9 93 16:45:11 "

'((#:llcp:nlist . subr0) (#:llcp:errwna . subr2) (foo-1-1 . subr1) (foo-1-2 . subr2) (foo-1-3 . subr0) (foo-1-4 . subr0) (foo-1-5 . subr0) (foo-1-6 . subr0) (foo-1-7 . subr0) (foo-1-8 . subr1) (foo-1-9 . subr2) (foo-1-10 . subr1) (foo-1-11 . subr2) (foo-1-12 . subr1) (foo-1-13 . subr2) (foo-1-14 . subr1) (foo-1-15 . subr2) (foo-1-16 . subr1) (foo-1-18 . subr1) (foo-1-19 . subr2) (foo-1-20 . subr0) (foo-1-22 . subr1) (foo-1-23 . subr2) (foo-1-24 . subr1) (foo-2-1 . subr1) (foo-2-2 . subr0) (foo-2-3 . subr0) (foo-2-4 . subr0) (foo-2-5 . subr0) (foo-2-6 . subr0) (foo-2-7 . subr0) (foo-2-8 . subr0) (foo-2-9 . subr0) (foo-2-9b . subr0) (foo-2-10 . subr1) (foo-2-11 . subr0) (foo-2-12 . subr0) (foo-2-13 . subr0) (foo-2-14 . subr0) (foo-2-15 . subr0) (foo-2-18 . subr1) (foo-2-19 . subr1) (foo-3-2 . subr1) (foo-3-3 . subr1) (foo-3-4 . subr1) (foo-3-5 . subr1) (foo-3-6 . subr2) (foo-3-7 . subr2) (foo-3-8 . subr2) (foo-3-9 . subr2) (foo-3-10 . subr0) (foo-3-11 . subr0) (foo-4-1 . subr2) (foo-4-2 . subr1) (foo-4-3 . subr1) (foo-4-4 . subr1) (foo-4-5 . subr1) (foo-4-6 . subr1) (foo-4-7 . subr2) (foo-4-8 . subr2) (foo-4-9 . subr1) (foo-4-10 . subr2) (foo-4-11 . subr2) (foo-4-12 . subr2) (foo-4-13 . subr2) (foo-4-14 . subr1) (foo-4-15 . subr1) (foo-4-16 . subr1) (foo-4-17 . subr1) (foo-4-18 . subr1) (foo-4-19 . subr1) (foo-4-20 . subr1) (foo-4-21 . subr1) (foo-4-22 . subr1) (foo-4-23 . subr1) (foo-4-24 . subr0) (foo-4-24-1 . subr2) (foo-4-25 . subr2) (foo-4-26 . subr1) (foo-4-26-2 . subr0) (foo-4-26-3 . subr0) (foo-4-27 . subr1) (foo-4-27-2 . subr0) (foo-4-27-3 . subr0) (foo-4-28 . subr2) (foo-4-29 . subr2) (foo-4-30 . subr2) (foo-4-31 . subr2) (foo-4-32 . subr2) (foo-4-33 . subr2) (foo-4-34 . subr2) (foo-4-35 . subr2) (foo-4-36 . subr2) (foo-4-37 . subr2) (foo-4-38 . subr2) (foo-4-39 . subr2) (foo-4-40 . subr2) (foo-4-41 . subr3) (foo-4-42 . subr2) (foo-4-43 . subr3) (foo-5-1 . subr1) (foo-5-2 . subr2) (foo-5-3 . subr1) (foo-5-4 . subr1) (foo-5-5 . subr2) (foo-5-6 . subr2) (dlq2 . subr2) (foo-6-1 . subr3) (foo-6-2 . subr2) (foo-6-3 . subr2) (foo-6-4 . subr1) (foo-6-5 . subr3) (foo-6-6 . subr2) (foo-6-7 . subr2) (foo-6-8 . subr1) (foo-6-9 . subr2) (foo-6-10 . subr1) (foo-6-11 . subr2) (foo-6-12 . subr1) (foo-6-13 . subr1) (foo-7-1 . subr1) (foo-7-2 . subr1) (foo-7-3 . subr1) (foo-7-4 . subr1) (foo-7-5 . subr1) (foo-7-6 . subr1) (foo-8-2 . subr1) (foo-8-3 . subr2) (foo-8-4 . subr1) (foo-8-5 . subr1) (foo-8-6 . subr1) (foo-8-7 . subr2) (foo-8-8 . subr1) (foo-8-9 . subr1) (foo-8-10 . subr1) (foo-8-11 . subr0) (foo-8-12 . subr2) (foo-8-13 . subr1) (foo-8-14 . subr1) (foo-8-15 . subr2) (foo-8-16 . subr1) (foo-8-17 . subr1) (foo-8-18 . subr1) (foo-8-19 . subr0) (foo-8-20 . subr2) (foo-8-21 . subr1) (foo-9-2 . subr1) (foo-9-3 . subr2) (foo-9-4 . subr1) (foo-9-5 . subr1) (foo-9-7 . subr2) (foo-9-8 . subr1) (foo-9-9 . subr1) (foo-9-10 . subr1) (foo-9-11 . subr0) (foo-9-12 . subr2) (foo-9-13 . subr1) (foo-9-14 . subr1) (foo-9-15 . subr2) (foo-9-16 . subr1) (foo-9-17 . subr1) (foo-9-18 . subr1) (foo-9-19 . subr0) (foo-9-20 . subr2) (foo-9-21 . subr1) (foo-10-1 . subr1) (foo-10-2 . subr2) (foo-10-3 . subr0) (foo-10-4 . subr2) (foo-10-5 . subr1) (foo-10-6 . subr2) (foo-10-7 . subr1) (foo-10-7-b . subr1) (foo-10-7-c . subr1) (foo-10-8 . subr2) (foo-10-9 . subr1) (foo-10-9-b . subr1) (foo-10-9-c . subr1) (foo-10-9-d . subr1) (foo-10-9-e . subr1) (foo-10-9-f . subr1) (foo-10-9-g . subr1) (foo-10-10 . subr2) (foo-10-11 . subr1) (foo-10-12 . subr2) (foo-10-13 . subr1) (foo-10-14 . subr2) (foo-10-15 . subr1) (foo-10-16 . subr2) (foo-10-17 . subr1) (foo-10-18 . subr2) (foo-10-19 . subr1) (foo-10-20 . subr2) (foo-10-21 . subr1) (foo-10-22 . subr2) (foo-10-23 . subr1) (foo-11-1 . subr0) (foo-11-2 . subr1) (foo-11-3 . subr1) (foo-11-4 . subr1) (foo-12 . subr2) (foo-12-6 . subr1) (foo-12-8 . subr2) (foo-12-13 . subr1) (foo-12-14 . subr0) (foo-12-15 . subr0) (foo-13-1 . subr0) (foo-13-2 . subr0) (foo-13-3 . subr1) (foo-13-4 . subr1) (foo-13-5 . subr1) (foo-14-1 . subr0) (foo-14-2 . subr0) (foo-15-1 . subr2) (foo-15-2 . subr2) (foo-15-3 . subr1) (foo-15-4 . subr1) (foo-15-5 . subr2) (foo-15-6 . subr2) (foo-15-7 . subr2) (foo-15-8 . subr2) (foo-15-9 . subr2) (foo-15-10 . subr1) (foo-15-11 . subr1) (foo-15-12 . subr1) (foo-15-13 . subr1) (foo-15-14 . subr1) (foo-16-1 . subr2) (foo-16-2 . subr1) (foo-16-3 . subr1) (foo-16-4 . subr2) (foo-16-5 . subr2) (foo-16-6 . subr2) (foo-16-7 . subr1) (foo-16-8 . subr1) (foo-16-9 . subr2) (foo-16-10 . subr2) (foo-16-11 . subr2) (foo-16-12 . subr1) (foo-16-13 . subr1) (foo-16-14 . subr2) (foo-16-15 . subr2) (foo-17-1 . subr2) (foo-17-2 . subr2) (foo-17-3 . subr2) (foo-17-4 . subr1) (foo-17-5 . subr1) (foo-17-6 . subr0) (foo-17-7 . subr0) (foo-18-1 . subr3) (foo-18-2 . subr2) (foo-18-3 . subr1) (foo-18-4 . subr1) (foo-18-5 . subr3) (foo-18-6 . subr2) (foo-18-7 . subr1) (foo-18-8 . subr1) (foo-18-9 . subr0) (foo-18-10 . subr0) (foo-19-1 . subr2) (foo-19-2 . subr2) (foo-19-3 . subr1) (foo-19-4 . subr1) (foo-19-5 . subr2) (foo-19-6 . subr2) (foo-19-7 . subr2) (foo-19-8 . subr2) (foo-19-9 . subr2) (foo-20-1 . nsubr) (foo-20-2 . subr0) (foo-20-3 . subr0) (foo-20-4 . subr0) (foo-21-1 . subr0) (foo-21-2 . subr0) (foo-21-2-1 . subr0) (foo-21-3 . subr0) (fiblap . subr1) (dlq . subr2) (screat . subr2) (invector . nsubr) (scl-nil . subr1) (scl-t . subr1))

#[errwna #[0 0 7] .06999999 "0.07" foo-1-6 (0 0 7) () t x joie ncons "c'est NIL" "c'est un atome" "c'est un cons" foo-4- y foo-4-24 list dlq2 "un coup de trop" "un coup pas assez" "completement rate" "dernier push" "rien pope" 6. -1006. 8. 10. -10. 12. -12. add1 zero un rate trois "xcv" #[x c v] 0. -8. foo #:llcp:exit (x) foo-20-4 makestring makevector #:llcp:nlist #:gell-resetfn:function-name #:gell-resetfn:function-0 #:llcp:errwna #:gell-resetfn:function-2 foo-1-1 #:gell-resetfn:function-1 foo-1-2 foo-1-3 foo-1-4 foo-1-5 foo-1-7 foo-1-8 foo-1-9 foo-1-10 foo-1-11 foo-1-12 foo-1-13 foo-1-14 foo-1-15 foo-1-16 foo-1-18 foo-1-19 foo-1-20 foo-1-22 foo-1-23 foo-1-24 foo-2-1 foo-2-2 foo-2-3 foo-2-4 foo-2-5 foo-2-6 foo-2-7 foo-2-8 foo-2-9 foo-2-9b foo-2-10 foo-2-11 foo-2-12 foo-2-13 foo-2-14 foo-2-15 foo-2-18 foo-2-19 foo-3-2 foo-3-3 foo-3-4 foo-3-5 foo-3-6 foo-3-7 foo-3-8 foo-3-9 foo-3-10 foo-3-11 foo-4-1 foo-4-2 foo-4-3 foo-4-4 foo-4-5 foo-4-6 foo-4-7 foo-4-8 foo-4-9 foo-4-10 foo-4-11 foo-4-12 foo-4-13 foo-4-14 foo-4-15 foo-4-16 foo-4-17 foo-4-18 foo-4-19 foo-4-20 foo-4-21 foo-4-22 foo-4-23 foo-4-24-1 foo-4-25 foo-4-26 foo-4-26-2 foo-4-26-3 foo-4-27 foo-4-27-2 foo-4-27-3 foo-4-28 foo-4-29 foo-4-30 foo-4-31 foo-4-32 foo-4-33 foo-4-34 foo-4-35 foo-4-36 foo-4-37 foo-4-38 foo-4-39 foo-4-40 foo-4-41 #:gell-resetfn:function-3 foo-4-42 foo-4-43 foo-5-1 foo-5-2 foo-5-3 foo-5-4 foo-5-5 foo-5-6 foo-6-1 foo-6-2 foo-6-3 foo-6-4 foo-6-5 foo-6-6 foo-6-7 foo-6-8 foo-6-9 foo-6-10 foo-6-11 foo-6-12 foo-6-13 foo-7-1 foo-7-2 foo-7-3 foo-7-4 foo-7-5 foo-7-6 foo-8-2 foo-8-3 foo-8-4 foo-8-5 foo-8-6 foo-8-7 foo-8-8 foo-8-9 foo-8-10 foo-8-11 foo-8-12 foo-8-13 foo-8-14 foo-8-15 foo-8-16 foo-8-17 foo-8-18 foo-8-19 foo-8-20 foo-8-21 foo-9-2 foo-9-3 foo-9-4 foo-9-5 foo-9-7 foo-9-8 foo-9-9 foo-9-10 foo-9-11 foo-9-12 foo-9-13 foo-9-14 foo-9-15 foo-9-16 foo-9-17 foo-9-18 foo-9-19 foo-9-20 foo-9-21 foo-10-1 foo-10-2 foo-10-3 foo-10-4 foo-10-5 foo-10-6 foo-10-7 foo-10-7-b foo-10-7-c foo-10-8 foo-10-9 foo-10-9-b foo-10-9-c foo-10-9-d foo-10-9-e foo-10-9-f foo-10-9-g foo-10-10 foo-10-11 foo-10-12 foo-10-13 foo-10-14 foo-10-15 foo-10-16 foo-10-17 foo-10-18 foo-10-19 foo-10-20 foo-10-21 foo-10-22 foo-10-23 foo-11-1 foo-11-2 foo-11-3 foo-11-4 foo-12 foo-12-6 foo-12-8 foo-12-13 foo-12-14 foo-12-15 foo-13-1 foo-13-2 foo-13-3 foo-13-4 foo-13-5 foo-14-1 foo-14-2 foo-15-1 foo-15-2 foo-15-3 foo-15-4 foo-15-5 foo-15-6 foo-15-7 foo-15-8 foo-15-9 foo-15-10 foo-15-11 foo-15-12 foo-15-13 foo-15-14 foo-16-1 foo-16-2 foo-16-3 foo-16-4 foo-16-5 foo-16-6 foo-16-7 foo-16-8 foo-16-9 foo-16-10 foo-16-11 foo-16-12 foo-16-13 foo-16-14 foo-16-15 foo-17-1 foo-17-2 foo-17-3 foo-17-4 foo-17-5 foo-17-6 foo-17-7 foo-18-1 foo-18-2 foo-18-3 foo-18-4 foo-18-5 foo-18-6 foo-18-7 foo-18-8 foo-18-9 foo-18-10 foo-19-1 foo-19-2 foo-19-3 foo-19-4 foo-19-5 foo-19-6 foo-19-7 foo-19-8 foo-19-9 foo-20-1 #:gell-resetfn:function-n foo-20-2 foo-20-3 foo-21-1 foo-21-2 foo-21-2-1 foo-21-3 fiblap dlq screat invector scl-nil scl-t]
)

(defvar #:user:test-p ())
(defun check (#:user:xxx #:user:yyy) (when #:user:test-p (print "       " #:user:xxx)) (let ((#:user:val (eval #:user:xxx))) (unless (boundp '#:user:yyy) (setq #:user:yyy "<<< undef >>>")) (unless (boundp '#:user:val) (setq #:user:val "<<< indef >>>")) (if (equal #:user:val #:user:yyy) () (print "*** TESTLAP erreur pour " #:user:xxx) (print "devrait etre " #:user:yyy " et non pas " #:user:val))))
(defcsetfn '#:llcp:nlist "GZtestlap" 0)
(defcsetfn '#:llcp:errwna "GZtestlap" 1)
(print "I.     test de RETURN et MOV                                ")
(setq #:user:test-p ())
(defcsetfn 'foo-1-1 "GZtestlap" 2)
(check '(typefn 'foo-1-1) 'subr1)
(check '(foo-1-1 100) '100)
(check '(foo-1-1 '(a)) '(a))
(defcsetfn 'foo-1-2 "GZtestlap" 3)
(check '(typefn 'foo-1-2) 'subr2)
(check '(foo-1-2 100 200) '200)
(check '(foo-1-2 '(b) '(a)) '(a))
(defcsetfn 'foo-1-3 "GZtestlap" 4)
(check '(typefn 'foo-1-3) 'subr0)
(check '(foo-1-3) '#[0 0 7])
(defcsetfn 'foo-1-4 "GZtestlap" 5)
(check '(foo-1-4) '.06999999)
(defcsetfn 'foo-1-5 "GZtestlap" 6)
(check '(foo-1-5) '"0.07")
(defcsetfn 'foo-1-6 "GZtestlap" 7)
(check '(foo-1-6) 'foo-1-6)
(defcsetfn 'foo-1-7 "GZtestlap" 8)
(check '(foo-1-7) '(0 0 7))
(defcsetfn 'foo-1-8 "GZtestlap" 9)
(check '(foo-1-8 '(0 0 7)) '0)
(check '(foo-1-8 '(7 0 0)) '7)
(defcsetfn 'foo-1-9 "GZtestlap" 10)
(check '(foo-1-9 '(0 0 7) 7) '(7 0 7))
(check '(foo-1-9 '(7 0 0) 0) '(0 0 0))
(defcsetfn 'foo-1-10 "GZtestlap" 11)
(check '(foo-1-10 '(0 0 7)) '(0 7))
(check '(foo-1-10 ()) '())
(defcsetfn 'foo-1-11 "GZtestlap" 12)
(check '(foo-1-11 '(0 0 7) 7) '(0 . 7))
(check '(foo-1-11 '(0 0 7) ()) '(0))
(defcsetfn 'foo-1-12 "GZtestlap" 13)
(check '(plist 'x '(0 0 7)) '(0 0 7))
(check '(foo-1-12 'x) '(0 0 7))
(defcsetfn 'foo-1-13 "GZtestlap" 14)
(check '(foo-1-13 'x '(7 0 0)) 'x)
(check '(plist 'x) '(7 0 0))
(defcsetfn 'foo-1-14 "GZtestlap" 15)
(check '(setfn 'x 'expr '(x y)) 'x)
(check '(foo-1-14 'x) '(x y))
(defcsetfn 'foo-1-15 "GZtestlap" 16)
(check '(foo-1-15 'x '(y x)) 'x)
(check '(valfn 'x) '(y x))
(defcsetfn 'foo-1-16 "GZtestlap" 17)
(check '(foo-1-16 '#:z:y:x) '#:z:y)
(defcsetfn 'foo-1-18 "GZtestlap" 18)
(check '(objval 'x '(0 0 7)) '(0 0 7))
(check '(foo-1-18 'x) '(0 0 7))
(defcsetfn 'foo-1-19 "GZtestlap" 19)
(check '(foo-1-19 'x '(7 0 0)) 'x)
(check '(objval 'x) '(7 0 0))
(defcsetfn 'foo-1-20 "GZtestlap" 20)
(check '(foo-1-20) 't)
(defcsetfn 'foo-1-22 "GZtestlap" 21)
(check '(setq x '(0 0 7)) '(0 0 7))
(check '(foo-1-22 'x) '(0 0 7))
(defcsetfn 'foo-1-23 "GZtestlap" 22)
(check '(foo-1-23 'x '(7 0 0)) 'x)
(check 'x '(7 0 0))
(defcsetfn 'foo-1-24 "GZtestlap" 23)
(print "II.    test de PUSH POP ADJSTK                              ")
(setq #:user:test-p ())
(defcsetfn 'foo-2-1 "GZtestlap" 24)
(check '(foo-2-1 '(0 0 7)) '(0 0 7))
(check '(foo-2-1 -2) '-2)
(defcsetfn 'foo-2-2 "GZtestlap" 25)
(check '(foo-2-2) '())
(defcsetfn 'foo-2-3 "GZtestlap" 26)
(check '(foo-2-3) '())
(defcsetfn 'foo-2-4 "GZtestlap" 27)
(check '(foo-2-4) '())
(defcsetfn 'foo-2-5 "GZtestlap" 28)
(check '(foo-2-5) '())
(defcsetfn 'foo-2-6 "GZtestlap" 29)
(check '(foo-2-6) '2)
(defcsetfn 'foo-2-7 "GZtestlap" 30)
(check '(foo-2-7) '1)
(defcsetfn 'foo-2-8 "GZtestlap" 31)
(check '(foo-2-8) '1)
(defcsetfn 'foo-2-9 "GZtestlap" 32)
(check '(foo-2-9) '1)
(defcsetfn 'foo-2-9b "GZtestlap" 33)
(check '(foo-2-9b) '1)
(check 'x '2)
(defcsetfn 'foo-2-10 "GZtestlap" 34)
(check '(setq x '(0 0 7)) '(0 0 7))
(check '(foo-2-10 '(7 0 0)) '(0 0 7))
(check 'x '(7 0 0))
(defcsetfn 'foo-2-11 "GZtestlap" 35)
(check '(foo-2-11) 'joie)
(defcsetfn 'foo-2-12 "GZtestlap" 36)
(check '(foo-2-12) 'joie)
(defcsetfn 'foo-2-13 "GZtestlap" 37)
(check '(foo-2-13) 'joie)
(defcsetfn 'foo-2-14 "GZtestlap" 38)
(check '(foo-2-14) 'joie)
(defcsetfn 'foo-2-15 "GZtestlap" 39)
(check '(foo-2-15) 'joie)
(defcsetfn 'foo-2-18 "GZtestlap" 40)
(check '(foo-2-18 1) '())
(check '(foo-2-18 ()) '())
(defcsetfn 'foo-2-19 "GZtestlap" 41)
(check '(foo-2-19 1) '(1))
(print "III.   test de BFNIL BTNIL BTCONS BFCONS BRA                ")
(setq #:user:test-p ())
(defcsetfn 'foo-3-2 "GZtestlap" 42)
(defcsetfn 'foo-3-3 "GZtestlap" 43)
(defcsetfn 'foo-3-4 "GZtestlap" 44)
(defcsetfn 'foo-3-5 "GZtestlap" 45)
(check '(setq x ()) '())
(check '(foo-3-2 ()) '"c'est NIL")
(check '(foo-3-2 1) '"c'est un atome")
(check '(foo-3-2 1.4) '"c'est un atome")
(check '(foo-3-2 'foo-3-) '"c'est un atome")
(check '(foo-3-2 "foo-3-") '"c'est un atome")
(check '(foo-3-2 #[4]) '"c'est un atome")
(check '(foo-3-2 '(a)) '"c'est un cons")
(check '(foo-3-3 ()) '"c'est NIL")
(check '(foo-3-3 1) '"c'est un atome")
(check '(foo-3-3 '(a)) '"c'est un cons")
(check '(foo-3-3 1.4) '"c'est un atome")
(check '(foo-3-3 'foo-3-) '"c'est un atome")
(check '(foo-3-3 "foo-3-") '"c'est un atome")
(check '(foo-3-3 #[4]) '"c'est un atome")
(check '(foo-3-4 ()) '"c'est NIL")
(check '(foo-3-4 1) '"c'est un atome")
(check '(foo-3-4 1.4) '"c'est un atome")
(check '(foo-3-4 'foo-3-) '"c'est un atome")
(check '(foo-3-4 "foo-3-") '"c'est un atome")
(check '(foo-3-4 #[4]) '"c'est un atome")
(check '(foo-3-4 '(a)) '"c'est un cons")
(check '(foo-3-5 ()) '"c'est NIL")
(check '(foo-3-5 1) '"c'est un atome")
(check '(foo-3-5 1.4) '"c'est un atome")
(check '(foo-3-5 'foo-3-) '"c'est un atome")
(check '(foo-3-5 "foo-3-") '"c'est un atome")
(check '(foo-3-5 #[4]) '"c'est un atome")
(check '(foo-3-5 '(a)) '"c'est un cons")
(defcsetfn 'foo-3-6 "GZtestlap" 46)
(check '(foo-3-6 () ()) '2)
(check '(foo-3-6 () 4) '2)
(check '(foo-3-6 9 ()) '1)
(check '(foo-3-6 9 8) '0)
(defcsetfn 'foo-3-7 "GZtestlap" 47)
(check '(foo-3-7 () ()) '0)
(check '(foo-3-7 () 4) '1)
(check '(foo-3-7 9 ()) '2)
(check '(foo-3-7 9 8) '2)
(defcsetfn 'foo-3-8 "GZtestlap" 48)
(check '(foo-3-8 '(a) '(b)) '2)
(check '(foo-3-8 '(a) 4) '2)
(check '(foo-3-8 9 '(b)) '1)
(check '(foo-3-8 9 8) '0)
(defcsetfn 'foo-3-9 "GZtestlap" 49)
(check '(foo-3-9 '(a) '(b)) '0)
(check '(foo-3-9 '(a) 4) '1)
(check '(foo-3-9 9 '(b)) '2)
(check '(foo-3-9 9 8) '2)
(defcsetfn 'foo-3-10 "GZtestlap" 50)
(check '(foo-3-10) '())
(defcsetfn 'foo-3-11 "GZtestlap" 51)
(check '(foo-3-11) '0)
(setq x (list 1 2 3) y "foo-3-" z #[1 2 3])
(print "IV.    test de CABEQ/NE BT/F[FIX FLOAT SYMB STRG VECT VAR]  ")
(setq #:user:test-p ())
(defcsetfn 'foo-4-1 "GZtestlap" 52)
(defcsetfn 'foo-4-2 "GZtestlap" 53)
(defcsetfn 'foo-4-3 "GZtestlap" 54)
(defcsetfn 'foo-4-4 "GZtestlap" 55)
(defcsetfn 'foo-4-5 "GZtestlap" 56)
(defcsetfn 'foo-4-6 "GZtestlap" 57)
(defcsetfn 'foo-4-7 "GZtestlap" 58)
(defcsetfn 'foo-4-8 "GZtestlap" 59)
(defcsetfn 'foo-4-9 "GZtestlap" 60)
(defcsetfn 'foo-4-10 "GZtestlap" 61)
(defcsetfn 'foo-4-11 "GZtestlap" 62)
(defcsetfn 'foo-4-12 "GZtestlap" 63)
(defcsetfn 'foo-4-13 "GZtestlap" 64)
(defcsetfn 'foo-4-14 "GZtestlap" 65)
(defcsetfn 'foo-4-15 "GZtestlap" 66)
(defcsetfn 'foo-4-16 "GZtestlap" 67)
(defcsetfn 'foo-4-17 "GZtestlap" 68)
(defcsetfn 'foo-4-18 "GZtestlap" 69)
(defcsetfn 'foo-4-19 "GZtestlap" 70)
(defcsetfn 'foo-4-20 "GZtestlap" 71)
(defcsetfn 'foo-4-21 "GZtestlap" 72)
(defcsetfn 'foo-4-22 "GZtestlap" 73)
(defcsetfn 'foo-4-23 "GZtestlap" 74)
(defcsetfn 'foo-4-24 "GZtestlap" 75)
(check '(foo-4-1 t 1) '1)
(check '(foo-4-1 0 t) '2)
(check '(foo-4-1 0 0) '())
(check '(foo-4-1 0 1) '3)
(check '(foo-4-1 '(1) '(1)) '3)
(check '(foo-4-1 "foo-4-" "foo-4-") '3)
(check '(foo-4-1 #[1] #[1]) '3)
(check '(foo-4-1 x x) '())
(check '(foo-4-1 y y) '())
(check '(foo-4-1 z z) '())
(check '(foo-4-2 ()) '())
(check '(foo-4-2 'foo-4-) '())
(check '(foo-4-2 x) '())
(check '(foo-4-2 y) '())
(check '(foo-4-2 z) '())
(check '(foo-4-2 1.4) '())
(check '(foo-4-2 -1) 't)
(check '(foo-4-2 1) 't)
(check '(foo-4-3 ()) '())
(check '(foo-4-3 'foo-4-) '())
(check '(foo-4-3 x) '())
(check '(foo-4-3 y) '())
(check '(foo-4-3 z) '())
(check '(foo-4-3 1.4) '())
(check '(foo-4-3 -1) 't)
(check '(foo-4-3 1) 't)
(check '(foo-4-4 'x) '())
(check '(foo-4-4 x) 't)
(check '(foo-4-5 'x) '())
(check '(foo-4-5 "foo-4-") '())
(check '(foo-4-5 'foo-4-) 't)
(check '(foo-4-6 1) 't)
(check '(foo-4-6 1.2) 't)
(check '(foo-4-7 1 2) '())
(check '(foo-4-7 'x 'foo-4-) '())
(check '(foo-4-7 1 1) 't)
(check '(foo-4-8 1 1) 't)
(check '(foo-4-8 1 2) '())
(check '(foo-4-8 "foo-4-" "foo-4-") '())
(check '(foo-4-9 "foo-4-") 't)
(check '(foo-4-9 ()) 't)
(check '(setq a '(1 2 3)) '(1 2 3))
(check '(setq y "FootheBar") '"FootheBar")
(check '(foo-4-10 1 1) 't)
(check '(foo-4-10 () ()) 't)
(check '(foo-4-10 "foo-4-" "foo-4-") '())
(check '(foo-4-10 'foo-4- 'foo-4-) 't)
(check '(foo-4-10 a a) 't)
(check '(foo-4-11 1 1) 't)
(check '(foo-4-11 () ()) 't)
(check '(foo-4-11 "foo-4-" "foo-4-") '())
(check '(foo-4-11 'foo-4- 'foo-4-) 't)
(check '(foo-4-11 a a) 't)
(check '(foo-4-12 1 1) 't)
(check '(foo-4-12 () ()) 't)
(check '(foo-4-12 "foo-4-" "foo-4-") '())
(check '(foo-4-12 'foo-4- 'foo-4-) 't)
(check '(foo-4-12 a a) 't)
(check '(foo-4-13 1 1) 't)
(check '(foo-4-13 () ()) 't)
(check '(foo-4-13 "foo-4-" "foo-4-") '())
(check '(foo-4-13 'foo-4- 'foo-4-) 't)
(check '(foo-4-13 a a) 't)
(check '(foo-4-14 ()) '())
(check '(foo-4-14 'foo-4-) '())
(check '(foo-4-14 x) '())
(check '(foo-4-14 y) '())
(check '(foo-4-14 z) '())
(check '(foo-4-14 1.4) 't)
(check '(foo-4-14 -1) '())
(check '(foo-4-14 1) '())
(check '(foo-4-15 ()) '())
(check '(foo-4-15 'foo-4-) '())
(check '(foo-4-15 x) '())
(check '(foo-4-15 y) '())
(check '(foo-4-15 z) '())
(check '(foo-4-15 1.4) 't)
(check '(foo-4-15 -1) '())
(check '(foo-4-15 1) '())
(check '(foo-4-16 ()) '())
(check '(foo-4-16 'foo-4-) '())
(check '(foo-4-16 x) '())
(check '(foo-4-16 y) 't)
(check '(foo-4-16 z) '())
(check '(foo-4-16 1.4) '())
(check '(foo-4-16 -1) '())
(check '(foo-4-16 1) '())
(check '(foo-4-17 ()) '())
(check '(foo-4-17 'foo-4-) '())
(check '(foo-4-17 x) '())
(check '(foo-4-17 y) 't)
(check '(foo-4-17 z) '())
(check '(foo-4-17 1.4) '())
(check '(foo-4-17 -1) '())
(check '(foo-4-17 1) '())
(check '(foo-4-18 ()) 't)
(check '(foo-4-18 t) 't)
(check '(foo-4-18 'foo-4-) 't)
(check '(foo-4-18 x) '())
(check '(foo-4-18 y) '())
(check '(foo-4-18 z) '())
(check '(foo-4-18 1.4) '())
(check '(foo-4-18 -1) '())
(check '(foo-4-18 1) '())
(check '(foo-4-19 ()) 't)
(check '(foo-4-19 t) 't)
(check '(foo-4-19 'foo-4-) 't)
(check '(foo-4-19 x) '())
(check '(foo-4-19 y) '())
(check '(foo-4-19 z) '())
(check '(foo-4-19 1.4) '())
(check '(foo-4-19 -1) '())
(check '(foo-4-19 1) '())
(check '(foo-4-20 ()) '())
(check '(foo-4-20 t) '())
(check '(foo-4-20 'foo-4-) '())
(check '(foo-4-20 x) '())
(check '(foo-4-20 y) '())
(check '(foo-4-20 z) 't)
(check '(foo-4-20 1.4) '())
(check '(foo-4-20 -1) '())
(check '(foo-4-20 1) '())
(check '(foo-4-21 ()) '())
(check '(foo-4-21 t) '())
(check '(foo-4-21 'foo-4-) '())
(check '(foo-4-21 x) '())
(check '(foo-4-21 y) '())
(check '(foo-4-21 z) 't)
(check '(foo-4-21 1.4) '())
(check '(foo-4-21 -1) '())
(check '(foo-4-21 1) '())
(check '(foo-4-22 ()) '())
(check '(foo-4-22 t) '())
(check '(foo-4-22 'foo-4-) 't)
(check '(foo-4-22 x) '())
(check '(foo-4-22 y) '())
(check '(foo-4-22 z) '())
(check '(foo-4-22 1.4) '())
(check '(foo-4-22 -1) '())
(check '(foo-4-22 1) '())
(check '(foo-4-23 ()) '())
(check '(foo-4-23 t) '())
(check '(foo-4-23 'foo-4-) 't)
(check '(foo-4-23 x) '())
(check '(foo-4-23 y) '())
(check '(foo-4-23 z) '())
(check '(foo-4-23 1.4) '())
(check '(foo-4-23 -1) '())
(check '(foo-4-23 1) '())
(check '(foo-4-24) 't)
(defcsetfn 'foo-4-24-1 "GZtestlap" 76)
(check '(foo-4-24-1 8 8) '1)
(check '(foo-4-24-1 8 -1) '0)
(defcsetfn 'foo-4-25 "GZtestlap" 77)
(check '(foo-4-25 8 8) '0)
(check '(foo-4-25 8 -1) '1)
(defcsetfn 'foo-4-26 "GZtestlap" 78)
(check '(foo-4-26 '(a . 12)) '1)
(check '(foo-4-26 '(a . -12)) '-1)
(check '(foo-4-26 '(a . -20)) '0)
(defcsetfn 'foo-4-26-2 "GZtestlap" 79)
(check '(foo-4-26-2) '())
(defcsetfn 'foo-4-26-3 "GZtestlap" 80)
(check '(foo-4-26-3) '1)
(defcsetfn 'foo-4-27 "GZtestlap" 81)
(check '(foo-4-27 '(a . 12)) '0)
(check '(foo-4-27 '(a . -12)) '1)
(check '(foo-4-27 '(a . -20)) '-1)
(defcsetfn 'foo-4-27-2 "GZtestlap" 82)
(check '(foo-4-27-2) '1)
(defcsetfn 'foo-4-27-3 "GZtestlap" 83)
(check '(foo-4-27-3) '())
(defcsetfn 'foo-4-28 "GZtestlap" 84)
(check '(foo-4-28 () ()) '0)
(check '(foo-4-28 1 ()) '1)
(check '(foo-4-28 () -1) '0)
(check '(foo-4-28 -1 2) '2)
(defcsetfn 'foo-4-29 "GZtestlap" 85)
(check '(foo-4-29 () ()) '2)
(check '(foo-4-29 1 ()) '0)
(check '(foo-4-29 () -1) '1)
(check '(foo-4-29 -1 2) '0)
(defcsetfn 'foo-4-30 "GZtestlap" 86)
(check '(foo-4-30 () ()) '0)
(check '(foo-4-30 1.1 ()) '1)
(check '(foo-4-30 () -1.1) '0)
(check '(foo-4-30 -1.1 2.2) '2)
(defcsetfn 'foo-4-31 "GZtestlap" 87)
(check '(foo-4-31 () ()) '2)
(check '(foo-4-31 1.1 ()) '0)
(check '(foo-4-31 () -1.1) '1)
(check '(foo-4-31 -1.1 2.2) '0)
(defcsetfn 'foo-4-32 "GZtestlap" 88)
(check '(foo-4-32 '(n) '(n)) '0)
(check '(foo-4-32 'a '(n)) '1)
(check '(foo-4-32 '(n) 'b) '0)
(check '(foo-4-32 'a 'b) '2)
(defcsetfn 'foo-4-33 "GZtestlap" 89)
(check '(foo-4-33 '(n) '(n)) '2)
(check '(foo-4-33 'a '(n)) '0)
(check '(foo-4-33 '(n) 'b) '1)
(check '(foo-4-33 'a 'b) '0)
(defcsetfn 'foo-4-34 "GZtestlap" 90)
(check '(foo-4-34 () ()) '0)
(check '(foo-4-34 "a" ()) '1)
(check '(foo-4-34 () "b") '0)
(check '(foo-4-34 "a" "b") '2)
(defcsetfn 'foo-4-35 "GZtestlap" 91)
(check '(foo-4-35 () ()) '2)
(check '(foo-4-35 "a" ()) '0)
(check '(foo-4-35 () "b") '1)
(check '(foo-4-35 "a" "b") '0)
(defcsetfn 'foo-4-36 "GZtestlap" 92)
(check '(foo-4-36 () ()) '0)
(check '(foo-4-36 #[] ()) '1)
(check '(foo-4-36 () #[b]) '0)
(check '(foo-4-36 #[] #[b]) '2)
(defcsetfn 'foo-4-37 "GZtestlap" 93)
(check '(foo-4-37 () ()) '2)
(check '(foo-4-37 #[] ()) '0)
(check '(foo-4-37 () #[b]) '1)
(check '(foo-4-37 #[] #[b]) '0)
(defcsetfn 'foo-4-38 "GZtestlap" 94)
(check '(foo-4-38 () ()) '0)
(check '(foo-4-38 'a ()) '1)
(check '(foo-4-38 () 'b) '0)
(check '(foo-4-38 'a 'b) '2)
(defcsetfn 'foo-4-39 "GZtestlap" 95)
(check '(foo-4-39 () ()) '2)
(check '(foo-4-39 'a ()) '0)
(check '(foo-4-39 () 'b) '1)
(check '(foo-4-39 'a 'b) '0)
(defcsetfn 'foo-4-40 "GZtestlap" 96)
(defcsetfn 'foo-4-41 "GZtestlap" 97)
(check '(foo-4-40 "a" 5.) '5.)
(check '(foo-4-40 5. "a") '())
(check '(foo-4-41 "a" "b" 6.) '6.)
(check '(foo-4-41 "a" "b" "6.") '())
(defcsetfn 'foo-4-42 "GZtestlap" 98)
(defcsetfn 'foo-4-43 "GZtestlap" 99)
(check '(foo-4-42 "chaine" 5.) '())
(check '(foo-4-42 "chaine" "a") '"a")
(check '(foo-4-43 "a" "b" 6.) '())
(check '(foo-4-43 "a" "b" "c") '"c")
(print "V.     test de JCALL JMP                                    ")
(setq #:user:test-p ())
(defcsetfn 'foo-5-1 "GZtestlap" 100)
(check '(foo-5-1 t) 't)
(check '(foo-5-1 1) '1)
(check '(foo-5-1 '(1 2 3 4)) '(1 2 3 4))
(defcsetfn 'foo-5-2 "GZtestlap" 101)
(check '(foo-5-2 1 4) '(1 . 4))
(check '(foo-5-2 '(1 2 3) ()) '((1 2 3)))
(defcsetfn 'foo-5-3 "GZtestlap" 102)
(defcsetfn 'foo-5-4 "GZtestlap" 103)
(check '(foo-5-3 1) '1)
(check '(foo-5-3 ()) 't)
(check '(foo-5-4 '((1 (foo . bar) . 3) . 4)) 'bar)
(check '(foo-5-4 '((1 (foo) . 3) . 4)) 't)
(defcsetfn 'foo-5-5 "GZtestlap" 104)
(defcsetfn 'foo-5-6 "GZtestlap" 105)
(check '(foo-5-5 1 2) '(((1 2 (1))) . 2))
(check '(foo-5-5 () ()) '(((() () (())))))
(check '(foo-5-5 'x 'y) '(((x y (x))) . y))
(check '(foo-5-6 1 2) '(((1 2 (1))) . 2))
(check '(foo-5-6 () ()) '(((() () (())))))
(check '(foo-5-6 'x 'y) '(((x y (x))) . y))
(defcsetfn 'dlq2 "GZtestlap" 106)
(check '(dlq2 'a '(l a b a d a)) '(l b d))
(print "VI.    test de HPMOVX HPXMOV                                ")
(setq #:user:test-p ())
(defcsetfn 'foo-6-1 "GZtestlap" 107)
(defcsetfn 'foo-6-2 "GZtestlap" 108)
(check '(setq x #[0 a b c d |e|]) '#[0 a b c d |e|])
(check '(foo-6-2 x 1) 'a)
(check '(foo-6-1 2 x 1) '#[0 2 b c d |e|])
(check '(foo-6-2 x 1) '2)
(check '(foo-6-2 x 2) 'b)
(check '(foo-6-1 3 x 2) '#[0 2 3 c d |e|])
(check '(foo-6-2 x 2) '3)
(check '(foo-6-2 x 3) 'c)
(check '(foo-6-1 4 x 3) '#[0 2 3 4 d |e|])
(check '(foo-6-2 x 3) '4)
(defcsetfn 'foo-6-3 "GZtestlap" 109)
(defcsetfn 'foo-6-4 "GZtestlap" 110)
(check '(setq x #[0 a b c d |e|]) '#[0 a b c d |e|])
(check '(foo-6-4 x) 'a)
(check '(foo-6-3 1 x) '#[0 1 b c d |e|])
(defcsetfn 'foo-6-5 "GZtestlap" 111)
(defcsetfn 'foo-6-6 "GZtestlap" 112)
(check '(setq x #[0 a b c d |e|]) '#[0 a b c d |e|])
(check '(foo-6-6 x 1) 'a)
(check '(foo-6-5 2 x 1) '#[0 2 b c d |e|])
(check '(foo-6-6 x 1) '2)
(check '(foo-6-6 x 2) 'b)
(check '(foo-6-5 3 x 2) '#[0 2 3 c d |e|])
(check '(foo-6-6 x 2) '3)
(check '(foo-6-6 x 3) 'c)
(check '(foo-6-5 4 x 3) '#[0 2 3 4 d |e|])
(check '(foo-6-6 x 3) '4)
(defcsetfn 'foo-6-7 "GZtestlap" 113)
(defcsetfn 'foo-6-8 "GZtestlap" 114)
(check '(setq x #[0 a b c d |e|]) '#[0 a b c d |e|])
(check '(foo-6-8 x) 'a)
(check '(foo-6-7 1 x) '#[0 1 b c d |e|])
(defcsetfn 'foo-6-9 "GZtestlap" 115)
(defcsetfn 'foo-6-10 "GZtestlap" 116)
(check '(setq x #[0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5]) '#[0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5])
(check '(foo-6-10 x) '2)
(check '(foo-6-9 100 x) '#[0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 100 3 4 5])
(defcsetfn 'foo-6-11 "GZtestlap" 117)
(defcsetfn 'foo-6-12 "GZtestlap" 118)
(defcsetfn 'foo-6-13 "GZtestlap" 119)
(check '(let ((x (makevector 16400 ()))) (foo-6-11 t x) (and (eq t (foo-6-12 x)) (eq t (foo-6-13 x)))) 't)
(print "VII.   test de MOVXSP XSPMOV et (& n)                       ")
(setq #:user:test-p ())
(defcsetfn 'foo-7-1 "GZtestlap" 120)
(check '(foo-7-1 '(1 2 3)) '(1 2 3))
(check '(foo-7-1 'x) 'x)
(defcsetfn 'foo-7-2 "GZtestlap" 121)
(check '(foo-7-2 '(1 2 3)) '(1 2 3))
(check '(foo-7-2 'y) 'y)
(defcsetfn 'foo-7-3 "GZtestlap" 122)
(check '(foo-7-3 '(1 2 3)) '(1 2 3))
(check '(foo-7-3 'x) 'x)
(defcsetfn 'foo-7-4 "GZtestlap" 123)
(check '(foo-7-4 '(1 2 3)) '(1 2 3))
(check '(foo-7-4 'y) 'y)
(defcsetfn 'foo-7-5 "GZtestlap" 124)
(check '(foo-7-5 '(1 2 3)) '(1 2 3))
(check '(foo-7-5 'x) 'x)
(defcsetfn 'foo-7-6 "GZtestlap" 125)
(check '(foo-7-6 '(1 2 3)) '(1 2 3))
(check '(foo-7-6 'y) 'y)
(print "VIII.  test de INCR PLUS FPLUS                              ")
(setq #:user:test-p ())
(defcsetfn 'foo-8-2 "GZtestlap" 126)
(check '(foo-8-2 -1) '0)
(check '(foo-8-2 0) '1)
(check '(foo-8-2 -10) '-9)
(check '(foo-8-2 10) '11)
(defcsetfn 'foo-8-3 "GZtestlap" 127)
(check '(foo-8-3 10 11) '21)
(check '(foo-8-3 -10 -11) '-21)
(check '(foo-8-3 1 -11) '-10)
(check '(foo-8-3 -1 11) '10)
(defcsetfn 'foo-8-4 "GZtestlap" 128)
(check '(foo-8-4 0) '6)
(check '(foo-8-4 -6) '0)
(check '(foo-8-4 6) '12)
(check '(foo-8-4 -2) '4)
(check '(foo-8-4 -16) '-10)
(defcsetfn 'foo-8-5 "GZtestlap" 129)
(check '(foo-8-5 0) '-1006)
(check '(foo-8-5 -6) '-1012)
(check '(foo-8-5 6) '-1000)
(check '(foo-8-5 -2) '-1008)
(check '(foo-8-5 -16) '-1022)
(defcsetfn 'foo-8-6 "GZtestlap" 130)
(check '(foo-8-6 0) '8)
(check '(foo-8-6 -6) '2)
(check '(foo-8-6 6) '14)
(check '(foo-8-6 -2) '6)
(check '(foo-8-6 -16) '-8)
(defcsetfn 'foo-8-7 "GZtestlap" 131)
(check '(foo-8-7 10 11) '21)
(check '(foo-8-7 -10 -11) '-21)
(check '(foo-8-7 1 -11) '-10)
(check '(foo-8-7 -1 11) '10)
(defcsetfn 'foo-8-8 "GZtestlap" 132)
(check '(foo-8-8 0) '6)
(check '(foo-8-8 -6) '0)
(check '(foo-8-8 6) '12)
(check '(foo-8-8 -2) '4)
(check '(foo-8-8 -16) '-10)
(defcsetfn 'foo-8-9 "GZtestlap" 133)
(check '(foo-8-9 0) '-1006)
(check '(foo-8-9 -6) '-1012)
(check '(foo-8-9 6) '-1000)
(check '(foo-8-9 -2) '-1008)
(check '(foo-8-9 -16) '-1022)
(defcsetfn 'foo-8-10 "GZtestlap" 134)
(check '(setq x 10) '10)
(check '(foo-8-10 0) '10)
(check '(foo-8-10 5) '15)
(check '(foo-8-10 -5) '5)
(check '(foo-8-10 -15) '-5)
(defcsetfn 'foo-8-11 "GZtestlap" 135)
(check '(setq x -2) '-2)
(check '(foo-8-11) '6)
(check 'x '6)
(check '(foo-8-11) '14)
(check 'x '14)
(defcsetfn 'foo-8-12 "GZtestlap" 136)
(check '(foo-8-12 10. 11.) '21.)
(check '(foo-8-12 -10. -11.) '-21.)
(check '(foo-8-12 1. -11.) '-10.)
(check '(foo-8-12 -1. 11.) '10.)
(defcsetfn 'foo-8-13 "GZtestlap" 137)
(check '(foo-8-13 0.) '6.)
(check '(foo-8-13 -6.) '0.)
(check '(foo-8-13 6.) '12.)
(check '(foo-8-13 -2.) '4.)
(check '(foo-8-13 -16.) '-10.)
(defcsetfn 'foo-8-14 "GZtestlap" 138)
(check '(foo-8-14 0.) '-1006.)
(check '(foo-8-14 -6.) '-1012.)
(check '(foo-8-14 6.) '-1000.)
(check '(foo-8-14 -2.) '-1008.)
(check '(foo-8-14 -16.) '-1022.)
(defcsetfn 'foo-8-15 "GZtestlap" 139)
(check '(foo-8-15 10. 11.) '21.)
(check '(foo-8-15 -10. -11.) '-21.)
(check '(foo-8-15 1. -11.) '-10.)
(check '(foo-8-15 -1. 11.) '10.)
(defcsetfn 'foo-8-16 "GZtestlap" 140)
(check '(foo-8-16 0.) '6.)
(check '(foo-8-16 -6.) '0.)
(check '(foo-8-16 6.) '12.)
(check '(foo-8-16 -2.) '4.)
(check '(foo-8-16 -16.) '-10.)
(defcsetfn 'foo-8-17 "GZtestlap" 141)
(check '(foo-8-17 0.) '-1006.)
(check '(foo-8-17 -6.) '-1012.)
(check '(foo-8-17 6.) '-1000.)
(check '(foo-8-17 -2.) '-1008.)
(check '(foo-8-17 -16.) '-1022.)
(defcsetfn 'foo-8-18 "GZtestlap" 142)
(check '(setq x 10.) '10.)
(check '(foo-8-18 0.) '10.)
(check '(foo-8-18 5.) '15.)
(check '(foo-8-18 -5.) '5.)
(check '(foo-8-18 -15.) '-5.)
(defcsetfn 'foo-8-19 "GZtestlap" 143)
(check '(setq x -2.) '-2.)
(check '(foo-8-19) '6.)
(check 'x '6.)
(check '(foo-8-19) '14.)
(check 'x '14.)
(defcsetfn 'foo-8-20 "GZtestlap" 144)
(check '(foo-8-20 10. 11.) '31.)
(check '(foo-8-20 -10. -11.) '-31.)
(check '(foo-8-20 1. -11.) '-9.)
(check '(foo-8-20 -1. 11.) '9.)
(defcsetfn 'foo-8-21 "GZtestlap" 145)
(check '(setq x 10.) '10.)
(check '(foo-8-21 0.) '10.)
(check '(foo-8-21 5.) '20.)
(check '(foo-8-21 -5.) '0.)
(check '(foo-8-21 -15.) '-20.)
(print "IX.    test de DECR DIFF FDIFF                              ")
(setq #:user:test-p ())
(defcsetfn 'foo-9-2 "GZtestlap" 146)
(check '(foo-9-2 1) '0)
(check '(foo-9-2 0) '-1)
(check '(foo-9-2 -10) '-11)
(check '(foo-9-2 10) '9)
(defcsetfn 'foo-9-3 "GZtestlap" 147)
(check '(foo-9-3 10 11) '-1)
(check '(foo-9-3 -10 -11) '1)
(check '(foo-9-3 1 -11) '12)
(check '(foo-9-3 -1 11) '-12)
(defcsetfn 'foo-9-4 "GZtestlap" 148)
(check '(foo-9-4 0) '-6)
(check '(foo-9-4 -6) '-12)
(check '(foo-9-4 6) '0)
(check '(foo-9-4 2) '-4)
(check '(foo-9-4 16) '10)
(defcsetfn 'foo-9-5 "GZtestlap" 149)
(check '(foo-9-5 0) '1006)
(check '(foo-9-5 -6) '1000)
(check '(foo-9-5 6) '1012)
(check '(foo-9-5 -2) '1004)
(check '(foo-9-5 -16) '990)
(defcsetfn 'foo-9-7 "GZtestlap" 150)
(check '(foo-9-7 10 11) '-1)
(check '(foo-9-7 -10 -11) '1)
(check '(foo-9-7 1 -11) '12)
(check '(foo-9-7 -1 11) '-12)
(defcsetfn 'foo-9-8 "GZtestlap" 151)
(check '(foo-9-8 0) '-6)
(check '(foo-9-8 -6) '-12)
(check '(foo-9-8 6) '0)
(check '(foo-9-8 2) '-4)
(check '(foo-9-8 16) '10)
(defcsetfn 'foo-9-9 "GZtestlap" 152)
(check '(foo-9-9 0) '1006)
(check '(foo-9-9 -6) '1000)
(check '(foo-9-9 6) '1012)
(check '(foo-9-9 -2) '1004)
(check '(foo-9-9 -16) '990)
(defcsetfn 'foo-9-10 "GZtestlap" 153)
(check '(setq x 10) '10)
(check '(foo-9-10 0) '-10)
(check '(foo-9-10 5) '-5)
(check '(foo-9-10 -5) '-15)
(check '(foo-9-10 -15) '-25)
(defcsetfn 'foo-9-11 "GZtestlap" 154)
(check '(setq x 14) '14)
(check '(foo-9-11) '6)
(check 'x '6)
(check '(foo-9-11) '-2)
(check 'x '-2)
(defcsetfn 'foo-9-12 "GZtestlap" 155)
(check '(foo-9-12 10. 11.) '-1.)
(check '(foo-9-12 -10. -11.) '1.)
(check '(foo-9-12 1. -11.) '12.)
(check '(foo-9-12 -1. 11.) '-12.)
(defcsetfn 'foo-9-13 "GZtestlap" 156)
(check '(foo-9-13 0.) '-6.)
(check '(foo-9-13 -6.) '-12.)
(check '(foo-9-13 6.) '0.)
(check '(foo-9-13 2.) '-4.)
(check '(foo-9-13 16.) '10.)
(defcsetfn 'foo-9-14 "GZtestlap" 157)
(check '(foo-9-14 0.) '1006.)
(check '(foo-9-14 -6.) '1000.)
(check '(foo-9-14 6.) '1012.)
(check '(foo-9-14 -2.) '1004.)
(check '(foo-9-14 -16.) '990.)
(defcsetfn 'foo-9-15 "GZtestlap" 158)
(check '(foo-9-15 10. 11.) '-1.)
(check '(foo-9-15 -10. -11.) '1.)
(check '(foo-9-15 1. -11.) '12.)
(check '(foo-9-15 -1. 11.) '-12.)
(defcsetfn 'foo-9-16 "GZtestlap" 159)
(check '(foo-9-16 0.) '-6.)
(check '(foo-9-16 -6.) '-12.)
(check '(foo-9-16 6.) '0.)
(check '(foo-9-16 2.) '-4.)
(check '(foo-9-16 16.) '10.)
(defcsetfn 'foo-9-17 "GZtestlap" 160)
(check '(foo-9-17 0.) '1006.)
(check '(foo-9-17 -6.) '1000.)
(check '(foo-9-17 6.) '1012.)
(check '(foo-9-17 -2.) '1004.)
(check '(foo-9-17 -16.) '990.)
(defcsetfn 'foo-9-18 "GZtestlap" 161)
(check '(setq x 10.) '10.)
(check '(foo-9-18 0.) '-10.)
(check '(foo-9-18 5.) '-5.)
(check '(foo-9-18 -5.) '-15.)
(check '(foo-9-18 -15.) '-25.)
(defcsetfn 'foo-9-19 "GZtestlap" 162)
(check '(setq x 14.) '14.)
(check '(foo-9-19) '6.)
(check 'x '6.)
(check '(foo-9-19) '-2.)
(check 'x '-2.)
(defcsetfn 'foo-9-20 "GZtestlap" 163)
(check '(foo-9-20 10. 11.) '-9.)
(check '(foo-9-20 -10. -11.) '9.)
(check '(foo-9-20 1. -11.) '-13.)
(check '(foo-9-20 -1. 11.) '13.)
(defcsetfn 'foo-9-21 "GZtestlap" 164)
(check '(setq x 10.) '10.)
(check '(foo-9-21 0.) '-10.)
(check '(foo-9-21 5.) '-10.)
(check '(foo-9-21 -5.) '-10.)
(check '(foo-9-21 -15.) '-10.)
(print "X.     test de NEGATE TIMES QUO REM FTIMES FQUO             ")
(setq #:user:test-p ())
(defcsetfn 'foo-10-1 "GZtestlap" 165)
(check '(foo-10-1 0) '0)
(check '(foo-10-1 -10) '10)
(check '(foo-10-1 10) '-10)
(defcsetfn 'foo-10-2 "GZtestlap" 166)
(check '(foo-10-2 0 0) '0)
(check '(foo-10-2 -2 8) '-6)
(check '(foo-10-2 12 -18) '6)
(defcsetfn 'foo-10-3 "GZtestlap" 167)
(check '(setq x 9) '9)
(check '(foo-10-3) '-9)
(check 'x '-9)
(check '(foo-10-3) '9)
(check 'x '9)
(defcsetfn 'foo-10-4 "GZtestlap" 168)
(check '(foo-10-4 10 11) '110)
(check '(foo-10-4 10 -2) '-20)
(defcsetfn 'foo-10-5 "GZtestlap" 169)
(check '(foo-10-5 11) '110)
(check '(foo-10-5 -2) '-20)
(defcsetfn 'foo-10-6 "GZtestlap" 170)
(check '(foo-10-6 10 11) '110)
(check '(foo-10-6 10 -2) '-20)
(defcsetfn 'foo-10-7 "GZtestlap" 171)
(check '(foo-10-7 11) '-110)
(check '(foo-10-7 -2) '20)
(defcsetfn 'foo-10-7-b "GZtestlap" 172)
(defcsetfn 'foo-10-7-c "GZtestlap" 173)
(check '(foo-10-7-b 11) '88)
(check '(foo-10-7-b -2) '-16)
(check '(foo-10-7-c 3) '-48)
(check '(foo-10-7-c -2) '32)
(defcsetfn 'foo-10-8 "GZtestlap" 174)
(check '(foo-10-8 120 12) '10)
(check '(foo-10-8 -120 12) '-10)
(defcsetfn 'foo-10-9 "GZtestlap" 175)
(check '(foo-10-9 120) '10)
(check '(foo-10-9 -120) '-10)
(defcsetfn 'foo-10-9-b "GZtestlap" 176)
(defcsetfn 'foo-10-9-c "GZtestlap" 177)
(defcsetfn 'foo-10-9-d "GZtestlap" 178)
(defcsetfn 'foo-10-9-e "GZtestlap" 179)
(defcsetfn 'foo-10-9-f "GZtestlap" 180)
(defcsetfn 'foo-10-9-g "GZtestlap" 181)
(check '(foo-10-9-b 64) '2)
(check '(foo-10-9-b -128) '-4)
(check '(foo-10-9-c 64) '-2)
(check '(foo-10-9-c -128) '4)
(check '(foo-10-9-d 12800) '100)
(check '(foo-10-9-d -12800) '-100)
(check '(foo-10-9-e 12800) '-100)
(check '(foo-10-9-e -12800) '100)
(check '(foo-10-9-f 12800) '12800)
(check '(foo-10-9-f -12800) '-12800)
(check '(foo-10-9-g 12800) '-12800)
(check '(foo-10-9-g -12800) '12800)
(defcsetfn 'foo-10-10 "GZtestlap" 182)
(check '(foo-10-10 120 12) '10)
(check '(foo-10-10 -120 12) '-10)
(defcsetfn 'foo-10-11 "GZtestlap" 183)
(check '(foo-10-11 120) '-10)
(check '(foo-10-11 -120) '10)
(defcsetfn 'foo-10-12 "GZtestlap" 184)
(check '(foo-10-12 14 4) '2)
(check '(foo-10-12 -8 2) '0)
(check '(foo-10-12 30001 3) '1)
(defcsetfn 'foo-10-13 "GZtestlap" 185)
(check '(foo-10-13 14) '2)
(check '(foo-10-13 12) '0)
(check '(foo-10-13 30) '6)
(defcsetfn 'foo-10-14 "GZtestlap" 186)
(check '(foo-10-14 14 4) '2)
(check '(foo-10-14 -8 2) '0)
(defcsetfn 'foo-10-15 "GZtestlap" 187)
(check '(foo-10-15 14) '2)
(check '(foo-10-15 -14) '-2)
(check '(foo-10-15 -24) '0)
(defcsetfn 'foo-10-16 "GZtestlap" 188)
(check '(foo-10-16 10. 11.) '110.)
(check '(foo-10-16 10. -2.) '-20.)
(defcsetfn 'foo-10-17 "GZtestlap" 189)
(check '(foo-10-17 11.) '110.)
(check '(foo-10-17 -2.) '-20.)
(defcsetfn 'foo-10-18 "GZtestlap" 190)
(check '(foo-10-18 10. 11.) '110.)
(check '(foo-10-18 10. -2.) '-20.)
(defcsetfn 'foo-10-19 "GZtestlap" 191)
(check '(foo-10-19 11.) '-110.)
(check '(foo-10-19 -2.) '20.)
(defcsetfn 'foo-10-20 "GZtestlap" 192)
(check '(foo-10-20 120. 12.) '10.)
(check '(foo-10-20 -120. 12.) '-10.)
(defcsetfn 'foo-10-21 "GZtestlap" 193)
(check '(foo-10-21 120.) '10.)
(check '(foo-10-21 -120.) '-10.)
(defcsetfn 'foo-10-22 "GZtestlap" 194)
(check '(foo-10-22 120. 12.) '10.)
(check '(foo-10-22 -120. 12.) '-10.)
(defcsetfn 'foo-10-23 "GZtestlap" 195)
(check '(foo-10-23 120.) '-10.)
(check '(foo-10-23 -120.) '10.)
(print "XI.    test de NOP SOBGEZ                                   ")
(setq #:user:test-p ())
(defcsetfn 'foo-11-1 "GZtestlap" 196)
(check '(foo-11-1) '1)
(defcsetfn 'foo-11-2 "GZtestlap" 197)
(check '(foo-11-2 0) '1)
(check '(foo-11-2 -10) '1)
(check '(foo-11-2 3) '6)
(check '(foo-11-2 5) '120)
(defcsetfn 'foo-11-3 "GZtestlap" 198)
(check '(foo-11-3 0) '1)
(check '(foo-11-3 -10) '1)
(check '(foo-11-3 3) '6)
(check '(foo-11-3 5) '120)
(defcsetfn 'foo-11-4 "GZtestlap" 199)
(check '(foo-11-4 0) '1)
(check '(foo-11-4 -10) '1)
(check '(foo-11-4 3) '6)
(check '(foo-11-4 5) '120)
(check 'x '-1)
(print "XII.   test de CALL BRA ENTRY                               ")
(setq #:user:test-p ())
(defcsetfn 'foo-12 "GZtestlap" 200)
(check '(foo-12 1 2) '(1 . 2))
(check '(foo-12 () ()) '(()))
(check '(foo-12 '(1 2 3) '(4 5)) '((2 3) 4 5))
(check '(foo-12 'toto '(4 5)) '(toto 4 5))
(defcsetfn 'foo-12-6 "GZtestlap" 201)
(check '(foo-12-6 0) '8)
(defcsetfn 'foo-12-8 "GZtestlap" 202)
(check '(foo-12-8 1 2) '(1 . 2))
(check '(foo-12-8 () ()) '(()))
(check '(foo-12-8 '(1 2 3) '(4 5)) '((2 3) 4 5))
(check '(foo-12-8 'toto '(4 5)) '(toto 4 5))
(defcsetfn 'foo-12-13 "GZtestlap" 203)
(check '(foo-12-13 0) '8)
(defcsetfn 'foo-12-14 "GZtestlap" 204)
(check '(foo-12-14) '1)
(defcsetfn 'foo-12-15 "GZtestlap" 205)
(check '(foo-12-15) '1)
(print "XIII.  test de BRI BRX                                      ")
(setq #:user:test-p ())
(defcsetfn 'foo-13-1 "GZtestlap" 206)
(check '(foo-13-1) '1)
(defcsetfn 'foo-13-2 "GZtestlap" 207)
(check '(foo-13-2) '1)
(defcsetfn 'foo-13-3 "GZtestlap" 208)
(check '(foo-13-3 0) 'zero)
(check '(foo-13-3 1) 'un)
(check '(foo-13-3 2) '2)
(check '(foo-13-3 3) 'trois)
(defcsetfn 'foo-13-4 "GZtestlap" 209)
(check '(foo-13-4 '(0 . 0)) '123)
(check '(foo-13-4 '(0 . 1)) '789)
(check '(foo-13-4 '(0 . 2)) '(0 . 2))
(defcsetfn 'foo-13-5 "GZtestlap" 210)
(check '(foo-13-5 0) '130)
(check '(foo-13-5 10) '120)
(check '(foo-13-5 100) '30)
(check '(foo-13-5 130) '0)
(print "XIV.   test de STACK SSTACK                                 ")
(setq #:user:test-p ())
(defcsetfn 'foo-14-1 "GZtestlap" 211)
(check '(foo-14-1) '())
(defcsetfn 'foo-14-2 "GZtestlap" 212)
(check '(foo-14-2) '())
(print "XV.    test de CNB[EQ/NE/LT/LE/GT/GE]                       ")
(setq #:user:test-p ())
(defcsetfn 'foo-15-1 "GZtestlap" 213)
(check '(foo-15-1 0 0) '1)
(check '(foo-15-1 0 8) '0)
(check '(foo-15-1 8 0) '0)
(check '(foo-15-1 8 8) '1)
(check '(foo-15-1 8 16) '0)
(check '(foo-15-1 16 8) '0)
(check '(foo-15-1 0 -8) '0)
(check '(foo-15-1 -8 0) '0)
(check '(foo-15-1 -8 -8) '1)
(check '(foo-15-1 -8 -16) '0)
(check '(foo-15-1 -16 -8) '0)
(check '(foo-15-1 8 -8) '0)
(check '(foo-15-1 -8 8) '0)
(defcsetfn 'foo-15-2 "GZtestlap" 214)
(check '(foo-15-2 0 0) '1)
(check '(foo-15-2 0 8) '0)
(check '(foo-15-2 8 0) '0)
(check '(foo-15-2 8 8) '1)
(check '(foo-15-2 8 16) '0)
(check '(foo-15-2 16 8) '0)
(check '(foo-15-2 0 -8) '0)
(check '(foo-15-2 -8 0) '0)
(check '(foo-15-2 -8 -8) '1)
(check '(foo-15-2 -8 -16) '0)
(check '(foo-15-2 -16 -8) '0)
(check '(foo-15-2 8 -8) '0)
(check '(foo-15-2 -8 8) '0)
(defcsetfn 'foo-15-3 "GZtestlap" 215)
(check '(foo-15-3 0) '1)
(check '(foo-15-3 8) '0)
(check '(foo-15-3 -8) '0)
(defcsetfn 'foo-15-4 "GZtestlap" 216)
(check '(foo-15-4 0) '0)
(check '(foo-15-4 -8) '1)
(check '(foo-15-4 -16) '0)
(check '(foo-15-4 8) '0)
(defcsetfn 'foo-15-5 "GZtestlap" 217)
(check '(foo-15-5 0 0) '0)
(check '(foo-15-5 0 8) '1)
(check '(foo-15-5 8 0) '1)
(check '(foo-15-5 8 8) '0)
(check '(foo-15-5 8 16) '1)
(check '(foo-15-5 16 8) '1)
(check '(foo-15-5 0 -8) '1)
(check '(foo-15-5 -8 0) '1)
(check '(foo-15-5 -8 -8) '0)
(check '(foo-15-5 -8 -16) '1)
(check '(foo-15-5 -16 -8) '1)
(check '(foo-15-5 8 -8) '1)
(check '(foo-15-5 -8 8) '1)
(defcsetfn 'foo-15-6 "GZtestlap" 218)
(check '(foo-15-6 0 0) '0)
(check '(foo-15-6 0 8) '1)
(check '(foo-15-6 8 0) '0)
(check '(foo-15-6 8 8) '0)
(check '(foo-15-6 8 16) '1)
(check '(foo-15-6 16 8) '0)
(check '(foo-15-6 0 -8) '0)
(check '(foo-15-6 -8 0) '1)
(check '(foo-15-6 -8 -8) '0)
(check '(foo-15-6 -8 -16) '0)
(check '(foo-15-6 -16 -8) '1)
(check '(foo-15-6 8 -8) '0)
(check '(foo-15-6 -8 8) '1)
(defcsetfn 'foo-15-7 "GZtestlap" 219)
(check '(foo-15-7 0 0) '1)
(check '(foo-15-7 0 8) '1)
(check '(foo-15-7 8 0) '0)
(check '(foo-15-7 8 8) '1)
(check '(foo-15-7 8 16) '1)
(check '(foo-15-7 16 8) '0)
(check '(foo-15-7 0 -8) '0)
(check '(foo-15-7 -8 0) '1)
(check '(foo-15-7 -8 -8) '1)
(check '(foo-15-7 -8 -16) '0)
(check '(foo-15-7 -16 -8) '1)
(check '(foo-15-7 8 -8) '0)
(check '(foo-15-7 -8 8) '1)
(defcsetfn 'foo-15-8 "GZtestlap" 220)
(check '(foo-15-8 0 0) '0)
(check '(foo-15-8 0 8) '0)
(check '(foo-15-8 8 0) '1)
(check '(foo-15-8 8 8) '0)
(check '(foo-15-8 8 16) '0)
(check '(foo-15-8 16 8) '1)
(check '(foo-15-8 0 -8) '1)
(check '(foo-15-8 -8 0) '0)
(check '(foo-15-8 -8 -8) '0)
(check '(foo-15-8 -8 -16) '1)
(check '(foo-15-8 -16 -8) '0)
(check '(foo-15-8 8 -8) '1)
(check '(foo-15-8 -8 8) '0)
(defcsetfn 'foo-15-9 "GZtestlap" 221)
(check '(foo-15-9 0 0) '1)
(check '(foo-15-9 0 8) '0)
(check '(foo-15-9 8 0) '1)
(check '(foo-15-9 8 8) '1)
(check '(foo-15-9 8 16) '0)
(check '(foo-15-9 16 8) '1)
(check '(foo-15-9 0 -8) '1)
(check '(foo-15-9 -8 0) '0)
(check '(foo-15-9 -8 -8) '1)
(check '(foo-15-9 -8 -16) '1)
(check '(foo-15-9 -16 -8) '0)
(check '(foo-15-9 8 -8) '1)
(check '(foo-15-9 -8 8) '0)
(defcsetfn 'foo-15-10 "GZtestlap" 222)
(check '(foo-15-10 0) '1)
(check '(foo-15-10 8) '1)
(check '(foo-15-10 -8) '0)
(defcsetfn 'foo-15-11 "GZtestlap" 223)
(check '(foo-15-11 -1) '0)
(check '(foo-15-11 1) '1)
(check '(foo-15-11 0) '0)
(check '(foo-15-11 -12) '0)
(check '(foo-15-11 12) '1)
(defcsetfn 'foo-15-12 "GZtestlap" 224)
(check '(foo-15-12 -1) '1)
(check '(foo-15-12 -16) '1)
(check '(foo-15-12 1) '0)
(check '(foo-15-12 16) '0)
(check '(foo-15-12 0) '0)
(defcsetfn 'foo-15-13 "GZtestlap" 225)
(check '(foo-15-13 -1) '0)
(check '(foo-15-13 -8) '0)
(check '(foo-15-13 1) '1)
(check '(foo-15-13 8) '1)
(check '(foo-15-13 0) '1)
(defcsetfn 'foo-15-14 "GZtestlap" 226)
(check '(foo-15-14 -1) '1)
(check '(foo-15-14 -256) '1)
(check '(foo-15-14 1) '0)
(check '(foo-15-14 256) '0)
(check '(foo-15-14 0) '1)
(print "XVI.   test de LAND LOR LXOR                                ")
(setq #:user:test-p ())
(defcsetfn 'foo-16-1 "GZtestlap" 227)
(check '(foo-16-1 1285 262) '260)
(defcsetfn 'foo-16-2 "GZtestlap" 228)
(check '(foo-16-2 262) '260)
(defcsetfn 'foo-16-3 "GZtestlap" 229)
(check '(foo-16-3 262) '260)
(defcsetfn 'foo-16-4 "GZtestlap" 230)
(check '(foo-16-4 1285 262) '260)
(defcsetfn 'foo-16-5 "GZtestlap" 231)
(check '(foo-16-5 1285 262) '260)
(defcsetfn 'foo-16-6 "GZtestlap" 232)
(check '(foo-16-6 1285 262) '1287)
(defcsetfn 'foo-16-7 "GZtestlap" 233)
(check '(foo-16-7 262) '1287)
(defcsetfn 'foo-16-8 "GZtestlap" 234)
(check '(foo-16-8 262) '1287)
(defcsetfn 'foo-16-9 "GZtestlap" 235)
(check '(foo-16-9 1285 262) '1287)
(defcsetfn 'foo-16-10 "GZtestlap" 236)
(check '(foo-16-10 1285 262) '1287)
(defcsetfn 'foo-16-11 "GZtestlap" 237)
(check '(foo-16-11 1285 262) '1027)
(defcsetfn 'foo-16-12 "GZtestlap" 238)
(check '(foo-16-12 262) '1027)
(defcsetfn 'foo-16-13 "GZtestlap" 239)
(check '(foo-16-13 262) '1027)
(defcsetfn 'foo-16-14 "GZtestlap" 240)
(check '(foo-16-14 1285 262) '1027)
(defcsetfn 'foo-16-15 "GZtestlap" 241)
(check '(foo-16-15 1285 262) '1027)
(print "XVII.  test de LSHIFT                                       ")
(setq #:user:test-p ())
(defcsetfn 'foo-17-1 "GZtestlap" 242)
(check '(foo-17-1 1024 -2) '256)
(check '(foo-17-1 256 2) '1024)
(check '(foo-17-1 256 0) '256)
(defcsetfn 'foo-17-2 "GZtestlap" 243)
(check '(foo-17-2 1024 -2) '256)
(check '(foo-17-2 256 2) '1024)
(check '(foo-17-2 256 0) '256)
(defcsetfn 'foo-17-3 "GZtestlap" 244)
(check '(foo-17-3 -2 1024) '256)
(check '(foo-17-3 2 256) '1024)
(check '(foo-17-3 0 256) '256)
(defcsetfn 'foo-17-4 "GZtestlap" 245)
(check '(foo-17-4 256) '1024)
(check '(foo-17-4 1024) '4096)
(defcsetfn 'foo-17-5 "GZtestlap" 246)
(check '(foo-17-5 4098) '1024)
(check '(foo-17-5 1026) '256)
(defcsetfn 'foo-17-6 "GZtestlap" 247)
(check '(foo-17-6) '(0 0 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 #$8000 0 0))
(defcsetfn 'foo-17-7 "GZtestlap" 248)
(check '(foo-17-7) '1)
(print "XVIII. test de HBXMOV HBMOVX HGSIZE                         ")
(setq #:user:test-p ())
(defcsetfn 'foo-18-1 "GZtestlap" 249)
(defcsetfn 'foo-18-2 "GZtestlap" 250)
(check '(setq s "abcdef") '"abcdef")
(check '(foo-18-2 s 0) '97)
(check '(foo-18-2 s 1) '98)
(check '(foo-18-2 s 2) '99)
(check '(foo-18-2 s 3) '100)
(check '(foo-18-1 s 0 120) '"xbcdef")
(check '(foo-18-1 s 1 121) '"xycdef")
(check '(foo-18-1 s 2 122) '"xyzdef")
(check '(foo-18-1 s 3 63) '"xyz?ef")
(check 's '"xyz?ef")
(defcsetfn 'foo-18-3 "GZtestlap" 251)
(defcsetfn 'foo-18-4 "GZtestlap" 252)
(check '(setq s "qwerty") '"qwerty")
(check '(foo-18-4 s) '114)
(check '(foo-18-3 s) '"qwehty")
(check '(foo-18-4 s) '104)
(defcsetfn 'foo-18-5 "GZtestlap" 253)
(defcsetfn 'foo-18-6 "GZtestlap" 254)
(check '(setq s "abcdef") '"abcdef")
(check '(foo-18-6 s 0) '97)
(check '(foo-18-6 s 1) '98)
(check '(foo-18-6 s 2) '99)
(check '(foo-18-6 s 3) '100)
(check '(foo-18-5 s 0 120) '"xbcdef")
(check '(foo-18-5 s 1 121) '"xycdef")
(check '(foo-18-5 s 2 122) '"xyzdef")
(check '(foo-18-5 s 3 63) '"xyz?ef")
(check 's '"xyz?ef")
(defcsetfn 'foo-18-7 "GZtestlap" 255)
(check '(foo-18-7 #[]) '0)
(check '(foo-18-7 #[x]) '1)
(check '(foo-18-7 (makevector 55 ())) '55)
(check '(foo-18-7 "") '0)
(check '(foo-18-7 "x") '1)
(check '(foo-18-7 (makestring 56 32)) '56)
(defcsetfn 'foo-18-8 "GZtestlap" 256)
(check '(foo-18-8 #[]) '0)
(check '(foo-18-8 #[x]) '1)
(check '(foo-18-8 (makevector 55 ())) '55)
(check '(foo-18-8 "") '0)
(check '(foo-18-8 "x") '1)
(check '(foo-18-8 (makestring 56 32)) '56)
(defcsetfn 'foo-18-9 "GZtestlap" 257)
(defcsetfn 'foo-18-10 "GZtestlap" 258)
(check '(foo-18-9) '3)
(check '(foo-18-10) '3)
(print "XIX.   test de CFB[EQ/NE/LT/LE/GT/GE]                       ")
(setq #:user:test-p ())
(defcsetfn 'foo-19-1 "GZtestlap" 259)
(check '(foo-19-1 0. 0.) '1)
(check '(foo-19-1 0. 8.) '0)
(check '(foo-19-1 8. 0.) '0)
(check '(foo-19-1 8. 8.) '1)
(check '(foo-19-1 8. 16.) '0)
(check '(foo-19-1 16. 8.) '0)
(check '(foo-19-1 0. -8.) '0)
(check '(foo-19-1 -8. 0.) '0)
(check '(foo-19-1 -8. -8.) '1)
(check '(foo-19-1 -8. -16.) '0)
(check '(foo-19-1 -16. -8.) '0)
(check '(foo-19-1 8. -8.) '0)
(check '(foo-19-1 -8. 8.) '0)
(defcsetfn 'foo-19-2 "GZtestlap" 260)
(check '(foo-19-2 0. 0.) '1)
(check '(foo-19-2 0. 8.) '0)
(check '(foo-19-2 8. 0.) '0)
(check '(foo-19-2 8. 8.) '1)
(check '(foo-19-2 8. 16.) '0)
(check '(foo-19-2 16. 8.) '0)
(check '(foo-19-2 0. -8.) '0)
(check '(foo-19-2 -8. 0.) '0)
(check '(foo-19-2 -8. -8.) '1)
(check '(foo-19-2 -8. -16.) '0)
(check '(foo-19-2 -16. -8.) '0)
(check '(foo-19-2 8. -8.) '0)
(check '(foo-19-2 -8. 8.) '0)
(defcsetfn 'foo-19-3 "GZtestlap" 261)
(check '(foo-19-3 0.) '1)
(check '(foo-19-3 8.) '0)
(check '(foo-19-3 -8.) '0)
(defcsetfn 'foo-19-4 "GZtestlap" 262)
(check '(foo-19-4 0.) '0)
(check '(foo-19-4 -8.) '1)
(check '(foo-19-4 -16.) '0)
(check '(foo-19-4 8.) '0)
(defcsetfn 'foo-19-5 "GZtestlap" 263)
(check '(foo-19-5 0. 0.) '0)
(check '(foo-19-5 0. 8.) '1)
(check '(foo-19-5 8. 0.) '1)
(check '(foo-19-5 8. 8.) '0)
(check '(foo-19-5 8. 16.) '1)
(check '(foo-19-5 16. 8.) '1)
(check '(foo-19-5 0. -8.) '1)
(check '(foo-19-5 -8. 0.) '1)
(check '(foo-19-5 -8. -8.) '0)
(check '(foo-19-5 -8. -16.) '1)
(check '(foo-19-5 -16. -8.) '1)
(check '(foo-19-5 8. -8.) '1)
(check '(foo-19-5 -8. 8.) '1)
(defcsetfn 'foo-19-6 "GZtestlap" 264)
(check '(foo-19-6 0. 0.) '0)
(check '(foo-19-6 0. 8.) '1)
(check '(foo-19-6 8. 0.) '0)
(check '(foo-19-6 8. 8.) '0)
(check '(foo-19-6 8. 16.) '1)
(check '(foo-19-6 16. 8.) '0)
(check '(foo-19-6 0. -8.) '0)
(check '(foo-19-6 -8. 0.) '1)
(check '(foo-19-6 -8. -8.) '0)
(check '(foo-19-6 -8. -16.) '0)
(check '(foo-19-6 -16. -8.) '1)
(check '(foo-19-6 8. -8.) '0)
(check '(foo-19-6 -8. 8.) '1)
(defcsetfn 'foo-19-7 "GZtestlap" 265)
(check '(foo-19-7 0. 0.) '1)
(check '(foo-19-7 0. 8.) '1)
(check '(foo-19-7 8. 0.) '0)
(check '(foo-19-7 8. 8.) '1)
(check '(foo-19-7 8. 16.) '1)
(check '(foo-19-7 16. 8.) '0)
(check '(foo-19-7 0. -8.) '0)
(check '(foo-19-7 -8. 0.) '1)
(check '(foo-19-7 -8. -8.) '1)
(check '(foo-19-7 -8. -16.) '0)
(check '(foo-19-7 -16. -8.) '1)
(check '(foo-19-7 8. -8.) '0)
(check '(foo-19-7 -8. 8.) '1)
(defcsetfn 'foo-19-8 "GZtestlap" 266)
(check '(foo-19-8 0. 0.) '0)
(check '(foo-19-8 0. 8.) '0)
(check '(foo-19-8 8. 0.) '1)
(check '(foo-19-8 8. 8.) '0)
(check '(foo-19-8 8. 16.) '0)
(check '(foo-19-8 16. 8.) '1)
(check '(foo-19-8 0. -8.) '1)
(check '(foo-19-8 -8. 0.) '0)
(check '(foo-19-8 -8. -8.) '0)
(check '(foo-19-8 -8. -16.) '1)
(check '(foo-19-8 -16. -8.) '0)
(check '(foo-19-8 8. -8.) '1)
(check '(foo-19-8 -8. 8.) '0)
(defcsetfn 'foo-19-9 "GZtestlap" 267)
(check '(foo-19-9 0. 0.) '1)
(check '(foo-19-9 0. 8.) '0)
(check '(foo-19-9 8. 0.) '1)
(check '(foo-19-9 8. 8.) '1)
(check '(foo-19-9 8. 16.) '0)
(check '(foo-19-9 16. 8.) '1)
(check '(foo-19-9 0. -8.) '1)
(check '(foo-19-9 -8. 0.) '0)
(check '(foo-19-9 -8. -8.) '1)
(check '(foo-19-9 -8. -16.) '1)
(check '(foo-19-9 -16. -8.) '0)
(check '(foo-19-9 8. -8.) '1)
(check '(foo-19-9 -8. 8.) '0)
(print "XX.    test de NLIST, LLINK, DLINK, TAG, EXIT, CBINDN, PROT ")
(setq #:user:test-p ())
(defcsetfn 'foo-20-1 "GZtestlap" 268)
(check '(foo-20-1 1 2 3) '(1 2 3))
(check '(foo-20-1) '())
(defcsetfn 'foo-20-2 "GZtestlap" 269)
(check '(foo-20-2) '12)
(defcsetfn 'foo-20-3 "GZtestlap" 270)
(check '(foo-20-3) '12)
(defcsetfn 'foo-20-4 "GZtestlap" 271)
(check '(setq x 12) '12)
(check '(foo-20-4) '10)
(check 'x '12)
(print "XXI.   test de EVAL                                         
")
(setq #:user:test-p ())
(defcsetfn 'foo-21-1 "GZtestlap" 272)
(check '(foo-21-1) '0)
(check 'x '())
(defcsetfn 'foo-21-2 "GZtestlap" 273)
(check '(foo-21-2) '0)
(defcsetfn 'foo-21-2-1 "GZtestlap" 274)
(check '(foo-21-2-1) '0)
(defcsetfn 'foo-21-3 "GZtestlap" 275)
(check '(foo-21-3) '0)
(check 'x '9)
(print "XXII.  test des exemples LAP de la DOC                      ")
(setq #:user:test-p ())
(defcsetfn 'fiblap "GZtestlap" 276)
(defcsetfn 'dlq "GZtestlap" 277)
(defcsetfn 'screat "GZtestlap" 278)
(defcsetfn 'invector "GZtestlap" 279)
(check '(fiblap 20) '6765)
(check '(dlq 'a '(b a c a b)) '(b c b))
(check '(screat 2 4) '"XXaXbX")
(check '(invector 1 2 3 4 5) '#[5 4 3 2 1])
(print "XXIII. test du flag SPECIAL-CASE-LOADER                     ")
(setq #:user:test-p ())
(check '(progn (remob 'scl-nil) (remob 'scl-t) (setq #:testlap:special-case-loader #:ld:special-case-loader) 0) '0)
(check '(setq #:ld:special-case-loader ()) '())
(check '(consp (valfn 'scl-nil)) '())
(defcsetfn 'scl-nil "GZtestlap" 280)
(check '(not (consp (valfn 'scl-nil))) '())
(check '(scl-nil 2) '4)
(check '(setq #:ld:special-case-loader t) 't)
(check '(consp (valfn 'scl-t)) '())
(defcsetfn 'scl-t "GZtestlap" 281)
(check '(consp (valfn 'scl-t)) '())
(check '(not (consp (valfn 'scl-t))) '())
(check '(progn (setq #:ld:special-case-loader #:testlap:special-case-loader) (scl-t 3)) '6)
(print "XXIV.  Fin du Test Lap                                      ")
(setq #:user:test-p ())
(let ((size (subadr (#:system:ccode) deb-code))) (print "Taille en octets de la zone code utilise'e par le test : " (cond ((fixp size) (if (ge size 0) size (|+| (power 2 15) (logand 32767 size)))) ((consp size) (|+| (* (car size) (power 2 16)) (if (ge (cdr size) 0) (cdr size) (|+| (power 2 15) (logand 32767 (cdr size)))))) (t ()))) ())
()

(defccheck '(makevector makestring #:llcp:exit add1 dlq2 list ncons))
