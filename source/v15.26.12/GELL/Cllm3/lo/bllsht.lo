(loader '(
(listext (llcaln llcall precomp bltmemory memory aecode accode gtadr subadr incradr addadr locint vaga1 vag loc epur ini_bll evalcar apply inicst inisymb gcnumb gcfloat gccons errfs errvec errnva errnia errwna errnda theend reenter evalan evalt))
(entry startmodule subr0)
	(title bllsht)
	(xrefi llinit |.undef|)
	(xrefi llinit fcons)
	(xrefi llinit bvar)
	(xrefi llinit |.t|)
	(xrefi llinit |.void|)
	(xrefi llinit |.llsystem|)
	(xrefi llinit ccode)
	(xrefi llinit ecode)
	(xrefp llinit reenter)
	(xrefp llinit theend)
	(xrefi llinit mstack)
	(xrefp toperr errnda)
	(xrefp toperr errwna)
	(xrefp toperr errnia)
	(xrefp toperr errnva)
	(xrefp toperr errvec)
	(xrefp toperr errfs)
	(xrefp gc gccons)
	(xrefp gc gcfloat)
	(xrefp gc gcnumb)
	(xrefp read inisymb)
	(xrefp read inicst)
	(xrefp eval apply)
	(xrefp eval evalcar)
	(xdefp ini_bll)
	(xdefi eimpur)
	(xdefp epur)
	(xdefp loc)
	(xdefp vag)
	(xdefp vaga1)
	(pure)
ini_bll
	(eval ())
	(makfnt loc '3 (strg "loc"))
	(makfnt locint '6 (strg "locint"))
	(mov |.llsystem| (pkgc a1))
	(makfnt vag '3 (strg "vag"))
	(makfnt memory '6 (strg "memory"))
	(makfnt bltmemory '9 (strg "bltmemory"))
	(endc)
	(makfnt addadr '6 (strg "addadr"))
	(makfnt incradr '7 (strg "incradr"))
	(makfnt subadr '6 (strg "subadr"))
	(makfnt gtadr '5 (strg "gtadr"))
	(makfnt accode '5 (strg "ccode"))
	(mov |.llsystem| (pkgc a1))
	(makfnt aecode '5 (strg "ecode"))
	(mov |.llsystem| (pkgc a1))
	(endc)
	(makfnt precomp '10 (strg "precompile"))
	(makfnt llcall '4 (strg "call"))
	(makfnt llcaln '5 (strg "calln"))
	(return)
	(pure)
	(lentry loc 2)
	(adrhl a1 a2 a1)
	(cnbeq a2 '0 loc9)
	(cons a2 a1)
loc9
	(return)
	(lentry locint 2)
	(adrhl a1 a2 a1)
	(plus a2 a1)
	(land '32767 a1)
	(return)
	(lentry vag 2)
	(mov |.vag| a2)
vaga1
	(eval ())
	(btcons a1 vagc)
	(bffix a1 vagerr)
	(bfnumb a1 vagret)
	(mov (val a1) a1)
	(return)
vagc
	(mov (car a1) a2)
	(bffix (cdr a1) vagerr)
	(mov (cdr a1) a1)
	(hladr a2 a1 a1)
vagret
	(return)
vagerr3
	(mov a3 a1)
vagerr
	(eval ())
	(bra errnda)
vaga3
	(eval ())
	(btcons a3 vaga3c)
	(bffix a3 vagerr3)
	(bfnumb a3 vaga3ret)
	(mov (val a3) a3)
	(return)
vaga3c
	(bffix (car a3) vagerr3)
	(bffix (cdr a3) vagerr3)
	(mov (car a3) a2)
	(mov (cdr a3) a3)
	(hladr a2 a3 a3)
vaga3ret
	(return)
	(endc)
	(lentry addadr 3)
	(mov |.addadr| adrtmp)
	(push (@ ret_call_adrverif_1))
	(bra adrverif)
ret_call_adrverif_1
	(eval ())
	(addadr)
	(bra adrcreat)
	(lentry incradr 3)
	(push a1)
	(mov |.incradr| adrtmp)
	(push (@ ret_call_adrverif_2))
	(bra adrverif)
ret_call_adrverif_2
	(eval ())
	(addadr)
	(pop a4)
	(cnbne a3 '0 incadr2)
	(cnbge a1 '0 incadr3)
incadr2
	(cnbeq a3 '-1 incadr3)
	(bfcons a4 incadr1)
	(mov a3 (car a4))
	(mov a1 (cdr a4))
	(mov a4 a1)
	(return)
incadr1
	(cons a3 a1)
incadr3
	(return)
	(lentry subadr 3)
	(mov |.subadr| adrtmp)
	(push (@ ret_call_adrverif_3))
	(bra adrverif)
ret_call_adrverif_3
	(eval ())
	(subadr)
	(bra adrcreat)
	(lentry gtadr 3)
	(mov |.gtadr| adrtmp)
	(push (@ ret_call_adrverif_4))
	(bra adrverif)
ret_call_adrverif_4
	(eval ())
	(ecomp a3 a4 gtadr0 gtadr1 gtadr2)
gtadr1
	(ecomp a1 a2 gtadr0 gtadr0 gtadr2)
gtadr2
	(mov |.t| a1)
	(return)
gtadr0
	(movnil a1)
	(return)
adrverif
	(btcons a1 adrver1)
	(bffix a1 adrerr1)
	(mov '0 a3)
	(cnbge a1 '0 adrver4)
	(mov '-1 a3)
adrver4
	(btcons a2 adrver2)
	(bffix a2 adrerr2)
	(mov '0 a4)
	(cnbge a2 '0 adrver5)
	(mov '-1 a4)
adrver5
	(return)
adrver2
	(mov (car a2) a4)
	(bffix a4 adrerr2)
	(bffix (cdr a2) adrerr2)
	(mov (cdr a2) a2)
	(return)
adrver1
	(btcons a2 adrver3)
	(bffix a2 adrerr2)
	(mov (car a1) a3)
	(bffix a3 adrerr1)
	(mov '0 a4)
	(cnbge a2 '0 adrver6)
	(mov '-1 a4)
adrver6
	(bffix (cdr a1) adrerr1)
	(mov (cdr a1) a1)
	(return)
adrver3
	(mov (car a1) a3)
	(bffix a3 adrerr1)
	(mov (car a2) a4)
	(bffix a4 adrerr2)
	(bffix (cdr a1) adrerr1)
	(mov (cdr a1) a1)
	(bffix (cdr a2) adrerr2)
	(mov (cdr a2) a2)
	(return)
adrerr2
	(mov a2 a1)
adrerr1
	(mov adrtmp a2)
	(bra errnda)
adrcreat
	(eval ())
	(cnbne a3 '0 adrcrea1)
	(cnblt a1 '0 adrcrea2)
	(return)
adrcrea1
	(cnbne a3 '-1 adrcrea2)
	(cnblt a1 '0 adrcrear)
adrcrea2
	(cons a3 a1)
adrcrear
	(return)
	(lentry accode 5)
	(mov |.accode| a2)
	(cnbeq a4 '0 accodeg)
	(cnbeq a4 '1 accodes)
	(mov '1 a1)
	(bra errwna)
accodes
	(eval ())
	(pop a1)
	(push (@ ret_call_vaga1_5))
	(bra vaga1)
ret_call_vaga1_5
	(eval ())
	(mov a1 ccode)
accodeg
	(mov ccode a1)
	(bra loc)
	(lentry aecode 1)
	(mov ecode a1)
	(bra loc)
	(endc)
	(lentry memory 5)
	(mov |.memory| a2)
	(mov (@ memory2) a3)
	(push (@ ret_call_getsetad_6))
	(bra getsetad)
ret_call_getsetad_6
	(eval ())
	(memget a1 a1)
	(return)
memory2
	(eval ())
	(memset a1 a3)
	(return)
	(lentry bltmemory 4)
	(push a2)
	(mov |.bltmemory| a2)
	(push (@ ret_call_vaga1_7))
	(bra vaga1)
ret_call_vaga1_7
	(eval ())
	(push (@ ret_call_vaga3_8))
	(bra vaga3)
ret_call_vaga3_8
	(eval ())
	(mov a1 a4)
	(mov (& 0) a1)
	(push (@ ret_call_vaga1_9))
	(bra vaga1)
ret_call_vaga1_9
	(eval ())
	(mov a4 a2)
	(memmovm a2 a1 a3)
	(pop a1)
	(return)
	(lentry precomp 6)
	(mov (car a1) a1)
	(bfnil evalst evalt)
	(bra evalan)
	(lentry llcall 5)
	(cnbne a4 '4 callerr1)
	(pop a3)
	(pop a2)
	(pop a4)
	(pop a1)
	(push a2)
	(push (@ ret_call_vaga1_10))
	(bra vaga1)
ret_call_vaga1_10
	(eval ())
	(xtopst a1)
	(mov a1 a2)
	(mov a4 a1)
	(return)
callerr1
	(mov |.llcall| a2)
	(mov '4 a1)
	(bra errwna)
	(lentry llcaln 3)
	(mov a2 a3)
	(mov |.llcaln| a2)
	(push (@ ret_call_vaga1_11))
	(bra vaga1)
ret_call_vaga1_11
	(eval ())
	(mov '0 a4)
	(bra calln3)
calln2
	(push (car a3))
	(chkstk mstack errfs)
	(mov (cdr a3) a3)
	(incr a4)
calln3
	(eval ())
	(btcons a3 calln2)
	(bri a1)
getsetad
	(eval ())
	(cnbeq a4 '1 getseta1)
	(cnbeq a4 '2 getseta2)
	(mov '2 a1)
	(bra errwna)
getseta1
	(pop a3)
	(pop a1)
	(push a3)
	(bra vaga1)
getseta2
	(pop a4)
	(pop a1)
	(xtopst a3)
	(bra vaga3)
epur
	(eval ())
	(impure)
	(ladr adrtmp 0)
	(ladr eimpur 0)
	(end)
))
