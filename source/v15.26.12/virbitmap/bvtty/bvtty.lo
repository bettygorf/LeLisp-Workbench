(loader '((title |bvtty.lo|)))
(defvar #:sys-package:bitmap '#:display:bvtty)
(defvar #:sys-package:colon #:sys-package:bitmap)
(#:messages:put-message 'errnotimplemented 'french '"Fonction non imple'mente'e" 'defmessage)
(#:messages:put-message 'errnotimplemented 'english '"Not yet implemented" 'defmessage)
'errnotimplemented
(putprop '#:display:bvtty '(()) 'defstruct)
(loader'((fentry #:display:bvtty:make subr0)
(entry #:display:bvtty:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '27 a4)
(jmp vector)
101
(eval ())
(mov '#:display:bvtty (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:name #:display:bvtty:name)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:package #:display:bvtty:package)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:package (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:device #:display:bvtty:device)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:device (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:xmax #:display:bvtty:xmax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:xmax (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:ymax #:display:bvtty:ymax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:ymax (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:eventmode #:display:bvtty:eventmode)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:eventmode (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:prologuep #:display:bvtty:prologuep)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:prologuep (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:keyboard-focus-window #:display:bvtty:keyboard-focus-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:keyboard-focus-window (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:window #:display:bvtty:window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:window (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:graph-env #:display:bvtty:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:graph-env (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:root-window #:display:bvtty:root-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:root-window (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:main-graph-env #:display:bvtty:main-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:main-graph-env (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:background #:display:bvtty:background)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:background (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:foreground #:display:bvtty:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:foreground (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:windows #:display:bvtty:windows)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:windows (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:bitmaps #:display:bvtty:bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:bitmaps (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:menus #:display:bvtty:menus)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:menus (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:colors #:display:bvtty:colors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:colors (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:font-names #:display:bvtty:font-names)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:font-names (struct . valeur) (ifn valeur (list 'vref struct 18) (list 'vset struct 18 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:pattern-bitmaps #:display:bvtty:pattern-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:pattern-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 19) (list 'vset struct 19 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:cursor-bitmaps #:display:bvtty:cursor-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:cursor-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 20) (list 'vset struct 20 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:extend #:display:bvtty:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:extend (struct . valeur) (ifn valeur (list 'vref struct 21) (list 'vset struct 21 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:graph-envs #:display:bvtty:graph-envs)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:graph-envs (struct . valeur) (ifn valeur (list 'vref struct 22) (list 'vset struct 22 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:current-selection #:display:bvtty:current-selection)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:current-selection (struct . valeur) (ifn valeur (list 'vref struct 23) (list 'vset struct 23 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:resource #:display:bvtty:resource)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:resource (struct . valeur) (ifn valeur (list 'vref struct 24) (list 'vset struct 24 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:named-cursors #:display:bvtty:named-cursors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:named-cursors (struct . valeur) (ifn valeur (list 'vref struct 25) (list 'vset struct 25 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:bvtty:stipple-bitmaps #:display:bvtty:stipple-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bvtty:stipple-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 26) (list 'vset struct 26 (car valeur))))))
(if (not (boundp '#:display:bvtty:main-tty)) (progn (defvar #:display:bvtty:xmax (sub1 (tyxmax))) (defvar #:display:bvtty:ymax (tyymax)) (defvar #:display:bvtty:main-tty 'tty)))
(loader'((fentry #:display:bvtty:bitprologue subr1)
(entry #:display:bvtty:bitprologue subr1)
(push a1)
(mov 't (cvalq #:window:prologuep))
(mov nil (cvalq #:window:all-windows))
(mov nil (cvalq #:window:current-window))
(mov nil (cvalq #:window:current-keyboard-focus-window))
(mov nil (cvalq #:graph-env:main-graph-env))
(mov nil (cvalq #:graph-env:current-graph-env))
(jcall tyflush)
(jcall typrologue)
(jcall tyxmax)
(plus '1 a1)
(push a1)
(jcall tyymax)
(plus '1 a1)
(pop a4)
(times a1 a4)
(mov '32 a2)
(mov a4 a1)
(jcall makestring)
(mov a1 (cvalq #:display:bvtty:screen))
(jcall copy)
(mov a1 (cvalq #:display:bvtty:oscreen))
(mov (cvalq #:display:bvtty:screen) a1)
(jcall copy)
(mov a1 (cvalq #:display:bvtty:blankscreen))
(mov (cvalq #:sys-package:tty) (cvalq #:display:bvtty:main-tty))
(jcall #:graph-env:make)
(mov a1 (cvalq #:graph-env:main-graph-env))
(mov a1 (cvalq #:graph-env:current-graph-env))
(jcall tyxmax)
(hpmovx a1 (& 0) '3)
(jcall tyymax)
(hpmovx a1 (& 0) '4)
(adjstk '1)
(return)
))
(loader'((fentry #:display:bvtty:bitepilogue subr1)
(entry #:display:bvtty:bitepilogue subr1)
(jcall tyflush)
(push (cvalq #:window:all-windows))
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(jcall kill-window)
(bra 101)
102
(adjstk '1)
(mov nil (cvalq #:window:prologuep))
(mov nil (cvalq #:window:all-windows))
(mov nil (cvalq #:window:current-window))
(mov nil (cvalq #:window:current-keyboard-focus-window))
(mov nil (cvalq #:graph-env:main-graph-env))
(mov nil (cvalq #:graph-env:current-graph-env))
(mov (cvalq #:display:bvtty:main-tty) (cvalq #:sys-package:tty))
(jcall tyepilogue)
(jmp tyflush)
))
(loader'((fentry #:display:bvtty:bitmap-refresh subr1)
(entry #:display:bvtty:bitmap-refresh subr1)
(bra #:display:bvtty:full-redisplay)
))
(loader'((fentry #:display:bvtty:bitmap-flush subr1)
(entry #:display:bvtty:bitmap-flush subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:bitmap-sync subr1)
(entry #:display:bvtty:bitmap-sync subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:create-window subr2)
(entry #:display:bvtty:create-window subr2)
(push a2)
(push a2)
(push (@ 101))
(hpxmov a2 '2 a4)
(push a4)
(hpxmov a2 '3 a4)
(push a4)
(hpxmov a2 '4 a4)
(push a4)
(hpxmov a2 '5 a4)
(push a4)
(mov '4 a4)
(bra #:display:bvtty:make-framed-screen)
101
(eval ())
(pop a4)
(hpmovx a1 a4 '8)
(jcall #:graph-env:make)
(hpmovx a1 (& 0) '7)
(push (@ 102))
(push 't)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
102
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:bvtty:create-subwindow subr2)
(entry #:display:bvtty:create-subwindow subr2)
(mov nil a3)
(mov 'errnotimplemented a2)
(mov '#:display:bvtty:create-subwindow a1)
(jmp error)
))
(loader'((entry #:display:bvtty:make-framed-screen nsubr)
(mov (& 3) a4)
(plus '2 a4)
(mov (& 2) a3)
(plus '2 a3)
(times a3 a4)
(mov '46 a2)
(mov a4 a1)
(jcall makestring)
(push a1)
(push (@ 101))
(push a1)
(push (cvalq #:display:bvtty:blankscreen))
(mov (& 7) a4)
(plus '2 a4)
(push a4)
(mov (& 7) a4)
(plus '2 a4)
(push a4)
(push (@ 102))
(mov '0 a4)
(jmp bitxmax)
102
(eval ())
(plus '1 a1)
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp bitymax)
103
(eval ())
(plus '1 a1)
(push a1)
(push '1)
(push '1)
(push '0)
(push '0)
(push (& 15))
(push (& 15))
(mov '12 a4)
(jmp bltscreen)
101
(eval ())
(push (@ 106))
(push (& 2))
(push '0)
(mov '2 a4)
(jmp =)
106
(eval ())
(bfnil a1 105)
(push (@ 107))
(push (& 1))
(push '0)
(push '61)
(mov '2 a4)
(plus (& 8) a4)
(push a4)
(mov '4 a4)
(jmp fillstring)
107
(eval ())
105
(push (@ 108))
(push (& 1))
(push '1)
(push (& 5))
(push '0)
(push (@ 109))
(hgsize (& 8) a4)
(push a4)
(push (& 11))
(mov '2 a4)
(jmp min)
109
(eval ())
(push a1)
(mov '5 a4)
(jmp bltstring)
108
(eval ())
(mov (& 0) a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:current-window subr2)
(entry #:display:bvtty:current-window subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:uncurrent-window subr2)
(entry #:display:bvtty:uncurrent-window subr2)
(mov (cvalq #:graph-env:main-graph-env) (cvalq #:graph-env:current-graph-env))
(mov (cvalq #:graph-env:main-graph-env) a1)
(return)
))
(loader'((fentry #:display:bvtty:modify-window nsubr)
(entry #:display:bvtty:modify-window nsubr)
(cnbeq a4 '9 101)
(mov '#:display:bvtty:modify-window a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(btnil (& 6) 103)
(hpmovx (& 6) (& 7) '0)
103
(btnil (& 5) 105)
(hpmovx (& 5) (& 7) '1)
105
(bfnil (& 4) 108)
(btnil (& 3) 107)
108
(bfnil (& 4) 110)
(hpxmov (& 7) '2 a4)
(mov a4 (& 4))
110
(bfnil (& 3) 112)
(hpxmov (& 7) '3 a4)
(mov a4 (& 3))
112
(push (@ 113))
(push (& 5))
(push (& 5))
(hpxmov (& 10) '4 a4)
(push a4)
(hpxmov (& 11) '5 a4)
(push a4)
(mov '4 a4)
(bra #:display:bvtty:make-framed-screen)
113
(eval ())
(push a1)
(push (@ 114))
(push a1)
(hpxmov (& 10) '8 a4)
(push a4)
(mov '2 a4)
(plus (& 8) a4)
(push a4)
(mov '2 a4)
(plus (& 8) a4)
(push a4)
(hpxmov (& 13) '2 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(hpxmov (& 14) '3 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(push '1)
(push '1)
(push '1)
(push '1)
(push (@ 115))
(push (& 17))
(hpxmov (& 21) '2 a4)
(push a4)
(mov '2 a4)
(jmp min)
115
(eval ())
(push a1)
(push (@ 116))
(push (& 17))
(hpxmov (& 22) '3 a4)
(push a4)
(mov '2 a4)
(jmp min)
116
(eval ())
(push a1)
(mov '12 a4)
(jmp bltscreen)
114
(eval ())
(hpmovx (& 0) (& 8) '8)
(hpmovx (& 5) (& 8) '2)
(hpmovx (& 4) (& 8) '3)
(adjstk '1)
107
(bfnil (& 2) 119)
(btnil (& 1) 118)
119
(btnil (& 2) 121)
(hpmovx (& 2) (& 7) '4)
121
(btnil (& 1) 123)
(hpmovx (& 1) (& 7) '5)
123
(push (@ 124))
(hpxmov (& 8) '8 a4)
(push a4)
(push '0)
(push (@ 127))
(hpxmov (& 11) '5 a4)
(push a4)
(push '0)
(mov '2 a4)
(jmp =)
127
(eval ())
(btnil a1 125)
(mov '46 a4)
(bra 126)
125
(mov '61 a4)
126
(push a4)
(hpxmov (& 11) '2 a3)
(mov '2 a4)
(plus a3 a4)
(push a4)
(mov '4 a4)
(jmp fillstring)
124
(eval ())
(push (@ 128))
(hpxmov (& 8) '8 a4)
(push a4)
(push '1)
(hpxmov (& 10) '4 a4)
(push a4)
(push '0)
(hpxmov (& 12) '2 a4)
(push a4)
(mov '5 a4)
(jmp bltstring)
128
(eval ())
118
(btnil (& 0) 130)
(hpmovx (& 0) (& 7) '6)
130
(push (@ 131))
(push 't)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
131
(eval ())
(mov (& 7) a1)
(adjstk '9)
(return)
))
(loader'((fentry #:display:bvtty:kill-window subr2)
(entry #:display:bvtty:kill-window subr2)
(push (@ 101))
(push 't)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
101
(eval ())
(return)
))
(loader'((fentry #:display:bvtty:pop-window subr2)
(entry #:display:bvtty:pop-window subr2)
(push (@ 101))
(push 't)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
101
(eval ())
(return)
))
(loader'((fentry #:display:bvtty:move-behind-window subr3)
(entry #:display:bvtty:move-behind-window subr3)
(push (@ 101))
(push 't)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
101
(eval ())
(return)
))
(loader'((fentry #:display:bvtty:current-keyboard-focus-window subr2)
(entry #:display:bvtty:current-keyboard-focus-window subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:uncurrent-keyboard-focus-window subr2)
(entry #:display:bvtty:uncurrent-keyboard-focus-window subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:find-window subr3)
(entry #:display:bvtty:find-window subr3)
(mov nil a3)
(mov 'errnotimplemented a2)
(mov '#:display:bvtty:find-window a1)
(jmp error)
))
(if (not (boundp '#:display:bvtty:lx)) (progn (defvar #:display:bvtty:lx) (defvar #:display:bvtty:ly)))
(loader'((fentry #:display:bvtty:map-window nsubr)
(entry #:display:bvtty:map-window nsubr)
(cnbeq a4 '6 101)
(mov '#:display:bvtty:map-window a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(push (cvalq #:display:bvtty:ly))
(mov (& 1) (cvalq #:display:bvtty:ly))
(push (cvalq #:display:bvtty:lx))
(mov (& 3) (cvalq #:display:bvtty:lx))
(push '2)
(push '(#:display:bvtty:ly #:display:bvtty:lx))
(push (@ #:display:bvtty:map-window))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov (& 12) '0 a4)
(mov (& 11) a3)
(diff a4 a3)
(mov (cvalq #:display:bvtty:lx) a4)
(mov a3 (cval a4))
(hpxmov (& 12) '1 a3)
(mov (& 10) a2)
(diff a3 a2)
(mov (cvalq #:display:bvtty:ly) a3)
(mov a2 (cval a3))
(mov a2 a1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:display:bvtty:lx))
(mov (& 7) (cvalq #:display:bvtty:ly))
(adjstk '14)
(return)
))
(if (not (boundp '#:display:bvtty:reread)) (progn (defvar #:display:bvtty:reread ())))
(loader'((fentry #:display:bvtty:event-mode subr2)
(entry #:display:bvtty:event-mode subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:eventp subr1)
(entry #:display:bvtty:eventp subr1)
(mov (cvalq #:display:bvtty:reread) a1)
(bfnil a1 29999)
(jcall tyflush)
(push (cvalq #:display:bvtty:main-tty))
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push '1)
(push '(#:sys-package:tty))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(jcall tys)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(jcall tyflush)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:tty))
(adjstk '8)
(btnil a1 104)
(jcall ncons)
(mov a1 (cvalq #:display:bvtty:reread))
(return)
104
(mov nil a1)
(return)
29999
(return)
))
(loader'((fentry #:display:bvtty:read-event subr2)
(entry #:display:bvtty:read-event subr2)
(push a2)
(btnil (cvalq #:display:bvtty:reread) 101)
(mov (cvalq #:display:bvtty:reread) a2)
(mov (cdr a2) (cvalq #:display:bvtty:reread))
(mov (car a2) a2)
(bra 102)
101
(jcall tyflush)
(push (cvalq #:display:bvtty:main-tty))
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push '1)
(push '(#:sys-package:tty))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(jcall tyi)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 104) a3)
103
(push a3)
(push a2)
(jcall tyflush)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
104
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:tty))
(adjstk '8)
(mov a1 a2)
102
(pop a1)
(bra make-ascii-event)
))
(loader'((fentry #:display:bvtty:peek-event subr2)
(entry #:display:bvtty:peek-event subr2)
(push a2)
(btnil (cvalq #:display:bvtty:reread) 101)
(mov (cvalq #:display:bvtty:reread) a2)
(mov (car a2) a2)
(bra 102)
101
(jcall tyflush)
(push (cvalq #:display:bvtty:main-tty))
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push '1)
(push '(#:sys-package:tty))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(jcall tyi)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 104) a3)
103
(push a3)
(push a2)
(jcall tyflush)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
104
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:tty))
(adjstk '8)
(jcall ncons)
(mov a1 (cvalq #:display:bvtty:reread))
(mov (car a1) a2)
102
(pop a1)
(bra make-ascii-event)
))
(loader'((fentry #:display:bvtty:flush-event subr1)
(entry #:display:bvtty:flush-event subr1)
(mov nil (cvalq #:display:bvtty:reread))
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:add-event subr2)
(entry #:display:bvtty:add-event subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:grab-event subr2)
(entry #:display:bvtty:grab-event subr2)
(mov a2 a3)
(mov 'errnotimplemented a2)
(mov '#:display:bvtty:grab-event a1)
(jmp error)
))
(loader'((fentry #:display:bvtty:ungrab-event subr1)
(entry #:display:bvtty:ungrab-event subr1)
(mov nil a3)
(mov 'errnotimplemented a2)
(mov '#:display:bvtty:ungrab-event a1)
(jmp error)
))
(loader'((fentry #:display:bvtty:itsoft-event subr2)
(entry #:display:bvtty:itsoft-event subr2)
(mov a2 a3)
(mov 'errnotimplemented a2)
(mov '#:display:bvtty:itsoft-event a1)
(jmp error)
))
(loader'((fentry #:display:bvtty:read-mouse subr2)
(entry #:display:bvtty:read-mouse subr2)
(hpmovx '0 a2 '5)
(hpmovx '0 a2 '6)
(hpmovx '0 a2 '3)
(hpmovx '0 a2 '4)
(hpmovx nil a2 '1)
(hpmovx '0 a2 '2)
(mov '0 a1)
(return)
))
(loader'((entry make-ascii-event subr2)
(push a1)
(hpmovx a2 a1 '2)
(hpmovx 'ascii-event a1 '0)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-keyboard-focus-window)
101
(eval ())
(pop a4)
(hpmovx a1 a4 '1)
(hpmovx '0 (& 0) '5)
(hpmovx '0 (& 0) '6)
(hpmovx '0 (& 0) '3)
(hpmovx '0 (& 0) '4)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(if (not (boundp '#:display:bvtty:blankscreen)) (progn (defvar #:display:bvtty:screen) (defvar #:display:bvtty:oscreen) (defvar #:display:bvtty:blankscreen) (defvar #:display:bvtty:flag t) (defvar #:display:bvtty:delayed ())))
(loader'((entry #:display:bvtty:delayed-redisplay nsubr)
(jcall #:llcp:nlist)
(mov (cvalq #:display:bvtty:delayed) a2)
(jcall cons)
(mov a1 (cvalq #:display:bvtty:delayed))
(return)
))
(loader'((entry #:display:bvtty:flush-delayed-redisplay nsubr)
(bfnil (cvalq #:display:bvtty:delayed) 101)
(push (@ 103))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(jmp #:display:bvtty:do-redisplay)
103
(eval ())
(adjstk '5)
(return)
101
(mov (cvalq #:display:bvtty:delayed) a1)
(jcall nreverse)
(mov a1 (cvalq #:display:bvtty:delayed))
104
(btnil (cvalq #:display:bvtty:delayed) 105)
(push (@ 106))
(push '#:display:bvtty:do-redisplay)
(mov (cvalq #:display:bvtty:delayed) a4)
(mov (cdr a4) (cvalq #:display:bvtty:delayed))
(push (car a4))
(mov '2 a4)
(jmp apply)
106
(eval ())
(bra 104)
105
(cabeq (& 4) 't 107)
(push (@ 109))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(jmp #:display:bvtty:do-redisplay)
109
(eval ())
(adjstk '5)
(return)
107
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:display:bvtty:redisplay nsubr)
(bfnil (cvalq #:display:bvtty:flag) 101)
(push (@ 103))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(bra #:display:bvtty:delayed-redisplay)
103
(eval ())
(adjstk '5)
(return)
101
(push (@ 104))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(bra #:display:bvtty:flush-delayed-redisplay)
104
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:do-redisplay nsubr)
(entry #:display:bvtty:do-redisplay nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:do-redisplay a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push nil)
(push (cvalq #:display:bvtty:flag))
(mov (& 1) (cvalq #:display:bvtty:flag))
(push '1)
(push '(#:display:bvtty:flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall tyflush)
(push nil)
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(push a1)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(push (@ 105))
(push 't)
(mov '1 a4)
(jmp outchan)
105
(eval ())
(push (@ 106))
(mov '0 a4)
(jmp rmargin)
106
(eval ())
(mov a1 (& 4))
(push (@ 107))
(push (@ 108))
(mov '0 a4)
(jmp outbuf)
108
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 104) a3)
103
(push a3)
(push a2)
(push (@ 109))
(push (& 4))
(mov '1 a4)
(jmp outchan)
109
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
104
(eval ())
(adjstk '1)
(push (@ 110))
(push dlink)
(push prot)
(stack dlink)
(push (cvalq #:display:bvtty:main-tty))
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push '1)
(push '(#:sys-package:tty))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(cabne (& 24) 't 112)
(push (@ 114))
(push (cvalq #:display:bvtty:screen))
(push (cvalq #:display:bvtty:blankscreen))
(push (@ 115))
(mov '0 a4)
(jmp bitxmax)
115
(eval ())
(plus '1 a1)
(push a1)
(push (@ 116))
(mov '0 a4)
(jmp bitymax)
116
(eval ())
(plus '1 a1)
(push a1)
(mov '4 a4)
(jmp bltscreen)
114
(eval ())
(push (cvalq #:window:all-windows))
117
(bfcons (& 0) 118)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:display:bvtty:redisplay1)
(bra 117)
118
(adjstk '1)
(push (@ 119))
(push (cvalq #:display:bvtty:screen))
(push (cvalq #:display:bvtty:oscreen))
(push (@ 120))
(mov '0 a4)
(jmp bitxmax)
120
(eval ())
(plus '1 a1)
(push a1)
(push (@ 121))
(mov '0 a4)
(jmp bitymax)
121
(eval ())
(plus '1 a1)
(push a1)
(mov '4 a4)
(jmp redisplayscreen)
119
(eval ())
(bra 113)
112
(hpxmov (& 24) '6 a1)
(mov '0 a2)
(jcall <>)
(btnil a1 113)
(mov (cvalq #:window:all-windows) a2)
(mov (& 24) a1)
(jcall memq)
(push a1)
124
(bfcons (& 0) 125)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 126))
(push (& 1))
(push (& 27))
(push (& 27))
(push (& 27))
(push (& 27))
(mov '5 a4)
(bra #:display:bvtty:redisplay1-mini)
126
(eval ())
(adjstk '1)
(bra 124)
125
(adjstk '1)
(push (@ 127))
(push (& 24))
(push (@ 128))
(mov '0 a4)
(jmp bitxmax)
128
(eval ())
(plus '1 a1)
(push a1)
(mov '2 a4)
(jmp min)
127
(eval ())
(mov a1 (& 23))
(push (@ 129))
(push a1)
(push '0)
(mov '2 a4)
(jmp max)
129
(eval ())
(mov a1 (& 23))
(push (@ 130))
(push (& 22))
(push (@ 131))
(mov '0 a4)
(jmp bitxmax)
131
(eval ())
(plus '1 a1)
(push a1)
(mov '2 a4)
(jmp min)
130
(eval ())
(mov a1 (& 21))
(push (@ 132))
(push a1)
(push '0)
(mov '2 a4)
(jmp max)
132
(eval ())
(mov a1 (& 21))
(push (@ 133))
(push (& 23))
(push (@ 134))
(mov '0 a4)
(jmp bitymax)
134
(eval ())
(plus '1 a1)
(push a1)
(mov '2 a4)
(jmp min)
133
(eval ())
(mov a1 (& 22))
(push (@ 135))
(push a1)
(push '0)
(mov '2 a4)
(jmp max)
135
(eval ())
(mov a1 (& 22))
(push (@ 136))
(push (& 21))
(push (@ 137))
(mov '0 a4)
(jmp bitymax)
137
(eval ())
(plus '1 a1)
(push a1)
(mov '2 a4)
(jmp min)
136
(eval ())
(mov a1 (& 20))
(push (@ 138))
(push a1)
(push '0)
(mov '2 a4)
(jmp max)
138
(eval ())
(mov a1 (& 20))
(push (@ 139))
(push (cvalq #:display:bvtty:screen))
(push (cvalq #:display:bvtty:oscreen))
(push (@ 140))
(mov '0 a4)
(jmp bitxmax)
140
(eval ())
(plus '1 a1)
(push a1)
(push (@ 141))
(mov '0 a4)
(jmp bitymax)
141
(eval ())
(plus '1 a1)
(push a1)
(push (@ 142))
(mov '0 a4)
(jmp bitxmax)
142
(eval ())
(plus '1 a1)
(push a1)
(push (@ 143))
(mov '0 a4)
(jmp bitymax)
143
(eval ())
(plus '1 a1)
(push a1)
(push (& 30))
(push (& 30))
(push (& 32))
(push (& 32))
(push (& 32))
(push (& 32))
(mov '12 a4)
(jmp redisplayscreen)
139
(eval ())
113
(jcall tyflush)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:tty))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 111) a3)
110
(push a3)
(push a2)
(push (@ 144))
(mov '0 a4)
(jmp outchan)
144
(eval ())
(push a1)
(push (@ 145))
(push dlink)
(push prot)
(stack dlink)
(push (@ 147))
(push 't)
(mov '1 a4)
(jmp outchan)
147
(eval ())
(push (@ 148))
(push (& 8))
(mov '1 a4)
(jmp rmargin)
148
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 146) a3)
145
(push a3)
(push a2)
(push (@ 149))
(push (& 4))
(mov '1 a4)
(jmp outchan)
149
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
146
(eval ())
(adjstk '1)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
111
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:display:bvtty:flag))
(adjstk '13)
(return)
))
(loader'((entry #:display:bvtty:redisplay1 subr1)
(push a1)
(push (@ 103))
(hpxmov a1 '6 a4)
(push a4)
(push '0)
(mov '2 a4)
(jmp =)
103
(eval ())
(bfnil a1 101)
(push (@ 104))
(push (cvalq #:display:bvtty:screen))
(hpxmov (& 2) '8 a4)
(push a4)
(push (@ 105))
(mov '0 a4)
(jmp bitxmax)
105
(eval ())
(plus '1 a1)
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp bitymax)
106
(eval ())
(plus '1 a1)
(push a1)
(hpxmov (& 5) '2 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(hpxmov (& 6) '3 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(hpxmov (& 7) '0 a4)
(diff '1 a4)
(push a4)
(hpxmov (& 8) '1 a4)
(diff '1 a4)
(push a4)
(push '0)
(push '0)
(hpxmov (& 11) '2 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(hpxmov (& 12) '3 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(mov '12 a4)
(jmp bltscreen)
104
(eval ())
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:display:bvtty:redisplay1-mini nsubr)
(push (@ 103))
(hpxmov (& 5) '6 a4)
(push a4)
(push '0)
(mov '2 a4)
(jmp =)
103
(eval ())
(bfnil a1 101)
(push (@ 104))
(push (cvalq #:display:bvtty:screen))
(hpxmov (& 6) '8 a4)
(push a4)
(push (@ 105))
(mov '0 a4)
(jmp bitxmax)
105
(eval ())
(plus '1 a1)
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp bitymax)
106
(eval ())
(plus '1 a1)
(push a1)
(hpxmov (& 9) '2 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(hpxmov (& 10) '3 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(push (& 10))
(push (& 10))
(hpxmov (& 13) '0 a4)
(mov (& 12) a3)
(diff a4 a3)
(plus '1 a3)
(push a3)
(hpxmov (& 14) '1 a4)
(mov (& 12) a3)
(diff a4 a3)
(plus '1 a3)
(push a3)
(push (& 12))
(push (& 12))
(mov '12 a4)
(jmp bltscreen)
104
(eval ())
(adjstk '5)
(return)
101
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:display:bvtty:full-redisplay subr0)
(push nil)
(push (cvalq #:display:bvtty:flag))
(mov (& 1) (cvalq #:display:bvtty:flag))
(push '1)
(push '(#:display:bvtty:flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall tyflush)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:display:bvtty:flag))
(adjstk '8)
(jcall tyflush)
(push (cvalq #:display:bvtty:main-tty))
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push '1)
(push '(#:sys-package:tty))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push dlink)
(push prot)
(stack dlink)
(jcall tycls)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 102) a3)
101
(push a3)
(push a2)
(jcall tyflush)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
102
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:tty))
(adjstk '8)
(push (@ 103))
(push (cvalq #:display:bvtty:oscreen))
(push (cvalq #:display:bvtty:blankscreen))
(push (@ 104))
(mov '0 a4)
(jmp bitxmax)
104
(eval ())
(push a1)
(push (@ 105))
(mov '0 a4)
(jmp bitymax)
105
(eval ())
(push a1)
(mov '4 a4)
(jmp bltscreen)
103
(eval ())
(push (@ 106))
(push 't)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
106
(eval ())
(return)
))
(loader'((fentry #:tty:window:redisplayscreen nsubr)
(entry #:tty:window:redisplayscreen nsubr)
(jcall #:llcp:nlist)
(push nil)
(push (cvalq #:display:bvtty:flag))
(mov (& 1) (cvalq #:display:bvtty:flag))
(push '1)
(push '(#:display:bvtty:flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '#:tty:redisplayscreen)
(push a1)
(mov '2 a4)
(jmp apply)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:display:bvtty:flag))
(adjstk '8)
(push (@ 102))
(push 't)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
102
(eval ())
(return)
))
(loader'((fentry #:tty:window:tybeep subr0)
(entry #:tty:window:tybeep subr0)
(jcall tyflush)
(push (cvalq #:display:bvtty:main-tty))
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push '1)
(push '(#:sys-package:tty))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push dlink)
(push prot)
(stack dlink)
(jcall tybeep)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 102) a3)
101
(push a3)
(push a2)
(jcall tyflush)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
102
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:tty))
(adjstk '8)
(return)
))
(loader'((fentry #:display:bvtty:create-bitmap subr2)
(entry #:display:bvtty:create-bitmap subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:bvtty:create-window-bitmap subr3)
(entry #:display:bvtty:create-window-bitmap subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:bvtty:get-bit-line nsubr)
(entry #:display:bvtty:get-bit-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:bvtty:get-bit-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:bvtty:set-bit-line nsubr)
(entry #:display:bvtty:set-bit-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:bvtty:set-bit-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:bvtty:kill-bitmap subr2)
(entry #:display:bvtty:kill-bitmap subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:bmset nsubr)
(entry #:display:bvtty:bmset nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:bmset a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:bmref nsubr)
(entry #:display:bvtty:bmref nsubr)
(cnbeq a4 '4 101)
(mov '#:display:bvtty:bmref a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:bvtty:bitblit nsubr)
(entry #:display:bvtty:bitblit nsubr)
(cnbeq a4 '9 101)
(mov '#:display:bvtty:bitblit a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '9)
(return)
))
(loader'((fentry #:display:bvtty:clear-graph-env subr2)
(entry #:display:bvtty:clear-graph-env subr2)
(push (@ 101))
(hpxmov (cvalq #:window:current-window) '8 a4)
(push a4)
(push (cvalq #:display:bvtty:blankscreen))
(hpxmov (cvalq #:window:current-window) '2 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(hpxmov (cvalq #:window:current-window) '3 a4)
(mov '2 a3)
(plus a4 a3)
(push a3)
(push (@ 102))
(mov '0 a4)
(jmp bitxmax)
102
(eval ())
(plus '1 a1)
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp bitymax)
103
(eval ())
(plus '1 a1)
(push a1)
(push '1)
(push '1)
(push '0)
(push '0)
(hpxmov (cvalq #:window:current-window) '2 a4)
(push a4)
(hpxmov (cvalq #:window:current-window) '3 a4)
(push a4)
(mov '12 a4)
(jmp bltscreen)
101
(eval ())
(push (@ 104))
(push 't)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
104
(eval ())
(return)
))
(loader'((fentry #:display:bvtty:draw-cursor nsubr)
(entry #:display:bvtty:draw-cursor nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:draw-cursor a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(btnil (cvalq #:display:bvtty:flag) 102)
(hpxmov (cvalq #:window:current-window) '6 a4)
(cnbeq '0 a4 102)
(push (@ 104))
(mov '0 a4)
(jmp tyshowcursor)
104
(eval ())
(btnil a1 102)
(jcall tyflush)
(push (cvalq #:display:bvtty:main-tty))
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push '1)
(push '(#:sys-package:tty))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 105))
(push (& 9))
(mov '1 a4)
(jmp tyshowcursor)
105
(eval ())
(btnil (& 8) 107)
(push (@ 108))
(mov '0 a4)
(jmp current-window)
108
(eval ())
(hpxmov a1 '0 a4)
(mov (& 10) a3)
(plus a4 a3)
(push a3)
(push (@ 109))
(mov '0 a4)
(jmp current-window)
109
(eval ())
(hpxmov a1 '1 a4)
(mov (& 10) a3)
(plus a4 a3)
(mov a3 a2)
(pop a1)
(jcall tycursor)
107
(jcall tyflush)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:tty))
(adjstk '13)
(return)
102
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:draw-substring nsubr)
(entry #:display:bvtty:draw-substring nsubr)
(cnbeq a4 '7 101)
(mov '#:display:bvtty:draw-substring a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(btnil (cvalq #:window:current-window) 102)
(push (@ 104))
(push (& 5))
(push '0)
(mov '2 a4)
(jmp max)
104
(eval ())
(mov a1 (& 4))
(push (@ 105))
(push (& 4))
(push '0)
(mov '2 a4)
(jmp max)
105
(eval ())
(mov a1 (& 3))
(push (@ 106))
(push (@ 107))
(mov '0 a4)
(jmp current-window)
107
(eval ())
(hpxmov a1 '2 a4)
(diff (& 5) a4)
(push a4)
(push (& 2))
(mov '2 a4)
(jmp min)
106
(eval ())
(mov a1 (& 0))
(mov (& 4) a4)
(plus '1 a4)
(hpxmov (cvalq #:window:current-window) '2 a3)
(mov '2 a2)
(plus a3 a2)
(mov (& 3) a3)
(plus '1 a3)
(times a3 a2)
(plus a2 a4)
(push a4)
(push (@ 108))
(hpxmov (cvalq #:window:current-window) '8 a3)
(push a3)
(push a4)
(push (& 6))
(push (& 6))
(push a1)
(mov '5 a4)
(jmp bltstring)
108
(eval ())
(hpxmov (& 6) '0 a4)
(cabne a4 '1 110)
(hpxmov (cvalq #:window:current-window) '8 a4)
(mov a4 (& 3))
(push (@ 111))
(push (& 2))
(hgsize a4 a3)
(push a3)
(mov '2 a4)
(jmp min)
111
(eval ())
(mov (& 0) a4)
(plus a1 a4)
(diff '1 a4)
(push (& 0))
(push a4)
(mov a4 a1)
(jcall numberp)
(bfnil a1 114)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
114
(push (@ 116))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
116
(eval ())
(bfnil a1 115)
(hbxmov (& 5) (& 1) a4)
(lor '128 a4)
(hbmovx a4 (& 5) (& 1))
(push (@ 117))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
117
(eval ())
(mov a1 (& 1))
(bra 114)
115
(adjstk '2)
110
(adjstk '1)
(push (@ 118))
(push (cvalq #:window:current-window))
(hpxmov (cvalq #:window:current-window) '0 a4)
(mov (& 6) a3)
(plus a4 a3)
(push a3)
(hpxmov (cvalq #:window:current-window) '1 a4)
(mov (& 6) a3)
(plus a4 a3)
(push a3)
(push (& 4))
(push '1)
(mov '5 a4)
(bra #:display:bvtty:redisplay)
118
(eval ())
(adjstk '7)
(return)
102
(mov nil a1)
(adjstk '7)
(return)
))
(loader'((fentry #:display:bvtty:height-substring nsubr)
(entry #:display:bvtty:height-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:height-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov '1 a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:width-substring nsubr)
(entry #:display:bvtty:width-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:width-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push '0)
(push (@ 103))
(push (& 3))
(hgsize (& 6) a4)
(diff (& 5) a4)
(push a4)
(mov '2 a4)
(jmp min)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
102
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:x-base-substring nsubr)
(entry #:display:bvtty:x-base-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:x-base-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov '0 a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:y-base-substring nsubr)
(entry #:display:bvtty:y-base-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:y-base-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov '0 a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:x-inc-substring nsubr)
(entry #:display:bvtty:x-inc-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:x-inc-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(jmp #:display:bvtty:width-substring)
102
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:y-inc-substring nsubr)
(entry #:display:bvtty:y-inc-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:y-inc-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov '0 a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:font-ascent subr2)
(entry #:display:bvtty:font-ascent subr2)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:bvtty:font-height subr2)
(entry #:display:bvtty:font-height subr2)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:bvtty:current-font subr3)
(entry #:display:bvtty:current-font subr3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:font-max subr2)
(entry #:display:bvtty:font-max subr2)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:bvtty:load-font subr3)
(entry #:display:bvtty:load-font subr3)
(mov 'erroob a2)
(mov '#:display:bvtty:load-font a1)
(jmp error)
))
(loader'((fentry #:display:bvtty:current-clip nsubr)
(entry #:display:bvtty:current-clip nsubr)
(cnbeq a4 '6 101)
(mov '#:display:bvtty:current-clip a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 4))
(push (& 4))
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp list)
102
(eval ())
(mov a1 a3)
(mov 'errnotimplemented a2)
(mov '#:display:bvtty:current-clip a1)
(adjstk '6)
(jmp error)
))
(loader'((fentry #:display:bvtty:current-line-style subr3)
(entry #:display:bvtty:current-line-style subr3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:line-style-max subr2)
(entry #:display:bvtty:line-style-max subr2)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:bvtty:current-pattern subr3)
(entry #:display:bvtty:current-pattern subr3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:pattern-max subr2)
(entry #:display:bvtty:pattern-max subr2)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:bvtty:current-mode subr3)
(entry #:display:bvtty:current-mode subr3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:bvtty:draw-polyline nsubr)
(entry #:display:bvtty:draw-polyline nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:draw-polyline a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:draw-polymarker nsubr)
(entry #:display:bvtty:draw-polymarker nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:draw-polymarker a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:fill-area nsubr)
(entry #:display:bvtty:fill-area nsubr)
(cnbeq a4 '5 101)
(mov '#:display:bvtty:fill-area a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:bvtty:draw-ellipse nsubr)
(entry #:display:bvtty:draw-ellipse nsubr)
(cnbeq a4 '6 101)
(mov '#:display:bvtty:draw-ellipse a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:bvtty:fill-ellipse nsubr)
(entry #:display:bvtty:fill-ellipse nsubr)
(cnbeq a4 '6 101)
(mov '#:display:bvtty:fill-ellipse a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '6)
(return)
))
(loader '((end)))
