defmodule #:display:x11
files (x11struct.ll)
include (virstruct.ll)
export (
(structure #:display:x11)
;(structure #:x11:bitmap)
;(structure #:x11:menu)
;(structure #:image:rectangle:window:menu-window)
;(structure #:tclass:x11window)
;(structure #:tclass:x11window:opaque-window)
;(structure #:tclass:x11window:opaque-window:top-window)
;(structure #:tclass:x11window:transparent-window)

;;;;#:display:x11:make
#:x11:bitmap:make
#:x11:menu:make
#:image:rectangle:window:menu-window:make
#:tclass:x11window:make
#:tclass:x11window:opaque-window:make
#:tclass:x11window:opaque-window:top-window:make
#:tclass:x11window:transparent-window:make
:top-opaque-window
)

;;; Added automatically, don't type beyond this line.
cpexport (
(#:display:x11:cursors-alist nsubr ())
(#:display:x11:synchrone nsubr ())
(#:display:x11:event-responses nsubr ())
(#:display:x11:reparent-notify-p nsubr ())
(#:display:x11:visibility-change-p nsubr ())
(#:display:x11:client-message-p nsubr ())
(#:display:x11:map-window-p nsubr ())
(#:display:x11:unmap-window-p nsubr ())
(#:display:x11:ascii-event-p nsubr ())
(#:display:x11:functionkey-event-p nsubr ())
(#:display:x11:move-event-p nsubr ())
(#:display:x11:drag-event-p nsubr ())
(#:display:x11:graph-env-mode nsubr ())
(#:display:x11:subwindow-border nsubr ())
(#:display:x11:top-window-border nsubr ())
(#:display:x11:display-class nsubr ())
(#:display:x11:depth nsubr ())
(#:display:x11:args-vector nsubr ())
(#:display:x11:default-window-type nsubr ())
(#:display:x11:reverse-bit-flag nsubr ())
(#:display:x11:transparent-events-mask nsubr ())
(#:display:x11:opaque-events-mask nsubr ())
(#:display:x11:top-events-mask nsubr ())
(#:display:x11:transparent-events-list nsubr ())
(#:display:x11:opaque-events-list nsubr ())
(#:display:x11:top-events-list nsubr ())
(#:display:x11:version nsubr ())
(#:display:x11:mode-vector nsubr ())
(#:display:x11:font-vector nsubr ())
(#:display:x11:cursor-vector nsubr ())
(#:display:x11:pattern-vector nsubr ())
(#:display:x11:line-style-vector nsubr ())
(#:display:x11:function-keys nsubr ())
(#:display:x11:events-list nsubr ())
(#:display:x11:drawing-flag nsubr ())
(#:display:x11:reread nsubr ())
(#:display:x11:events-in-socket nsubr ())
(#:display:x11:file-descriptor nsubr ())
(#:display:x11:stipple-bitmaps nsubr ())
(#:display:x11:named-cursors nsubr ())
(#:display:x11:resource nsubr ())
(#:display:x11:current-selection nsubr ())
(#:display:x11:graph-envs nsubr ())
(#:display:x11:extend nsubr ())
(#:display:x11:cursor-bitmaps nsubr ())
(#:display:x11:pattern-bitmaps nsubr ())
(#:display:x11:font-names nsubr ())
(#:display:x11:colors nsubr ())
(#:display:x11:menus nsubr ())
(#:display:x11:bitmaps nsubr ())
(#:display:x11:windows nsubr ())
(#:display:x11:foreground nsubr ())
(#:display:x11:background nsubr ())
(#:display:x11:main-graph-env nsubr ())
(#:display:x11:root-window nsubr ())
(#:display:x11:graph-env nsubr ())
(#:display:x11:window nsubr ())
(#:display:x11:keyboard-focus-window nsubr ())
(#:display:x11:prologuep nsubr ())
(#:display:x11:eventmode nsubr ())
(#:display:x11:ymax nsubr ())
(#:display:x11:xmax nsubr ())
(#:display:x11:device nsubr ())
(#:display:x11:package nsubr ())
(#:display:x11:name nsubr ())
(#:display:x11:make subr0 ())
(#:x11:bitmap:make subr0 ())
(#:x11:menu:make subr0 ())
(#:image:rectangle:window:menu-window:make subr0 ())
(#:tclass:x11window:make subr0 ())
(#:tclass:x11window:opaque-window:make subr0 ())
(#:tclass:x11window:opaque-window:top-window:make subr0 ())
(#:tclass:x11window:transparent-window:make subr0 ())
(#:display:x11:top-opaque-window dmsubr ())
)
cpfunctions
()
cpimport
()
cpenv (
((defstruct #:display:x11 (file-descriptor 0) events-in-socket reread drawing-flag events-list function-keys line-style-vector pattern-vector cursor-vector font-vector mode-vector version top-events-list opaque-events-list transparent-events-list top-events-mask opaque-events-mask transparent-events-mask reverse-bit-flag default-window-type args-vector depth (display-class "Lelisp") (top-window-border 2) (subwindow-border 1) (graph-env-mode 0) drag-event-p move-event-p functionkey-event-p ascii-event-p unmap-window-p map-window-p client-message-p visibility-change-p reparent-notify-p event-responses (synchrone ()) cursors-alist)
)((defstruct #:x11:bitmap window xbitmap)
)((defstruct #:x11:menu invertedx invertedy window)
)((defstruct #:image:rectangle:window:menu-window)
)((deftclass x11window xwindow xgraph-env events-mask)
)((deftclass #:tclass:x11window:opaque-window border-pixel window-name window-class)
)((deftclass #:tclass:x11window:opaque-window:top-window icon-title)
)((deftclass #:tclass:x11window:transparent-window visible view-rect offset-x offset-y top-opaque-father)
)((dmd #:display:x11:display-address (dpy . val) (if val (mcons '#:display:extend dpy val) (list '#:display:extend dpy)))
(dmd #:display:x11:vector-args (dpy . val) (if val (mcons '#:display:x11:args-vector dpy val) (list '#:display:x11:args-vector dpy)))
(dmd #:display:x11:window-address (win . val) (if val (mcons '#:tclass:x11window:xwindow (list '#:window:extend win) val) (list '#:tclass:x11window:xwindow (list '#:window:extend win))))
(dmd #:display:x11:window-xgraph-env (win . val) (if val (mcons '#:tclass:x11window:xgraph-env (list '#:window:extend win) val) (list '#:tclass:x11window:xgraph-env (list '#:window:extend win))))
(dmd #:display:x11:graph-env-view-rect (ge . val) (if val (mcons '#:tclass:x11window:transparent-window:view-rect (list '#:graph-env:extend ge) val) (list '#:tclass:x11window:transparent-window:view-rect (list '#:graph-env:extend ge))))
(dmd #:display:x11:graph-env-font-y (ge . val) (if val (mcons '#:graph-env:font-y ge val) (list '#:graph-env:font-y ge)))
(dmd #:display:x11:graph-env-font-h (ge . val) (if val (mcons '#:graph-env:font-h ge val) (list '#:graph-env:font-h ge)))
(dmd #:display:x11:window-offset-x (win . val) (if val (mcons '#:tclass:x11window:transparent-window:offset-x (list '#:window:extend win) val) (list '#:tclass:x11window:transparent-window:offset-x (list '#:window:extend win))))
(dmd #:display:x11:window-offset-y (win . val) (if val (mcons '#:tclass:x11window:transparent-window:offset-y (list '#:window:extend win) val) (list '#:tclass:x11window:transparent-window:offset-y (list '#:window:extend win))))
(dmd #:display:x11:window-visible (win . val) (if val (mcons '#:tclass:x11window:transparent-window:visible (list '#:window:extend win) val) (list '#:tclass:x11window:transparent-window:visible (list '#:window:extend win))))
(dmd #:display:x11:graph-env-address (ge . val) (if val (mcons '#:tclass:x11window:xgraph-env (list '#:graph-env:extend ge) val) (list '#:tclass:x11window:xgraph-env (list '#:graph-env:extend ge))))
)((dmd #:display:x11:xdisplay (dpy . val) (if val (mcons '#:display:extend dpy val) (list '#:display:extend dpy)))
(dmd #:display:x11:xwindow (win . val) (if val (mcons '#:tclass:x11window:xwindow (list '#:window:extend win) val) (list '#:tclass:x11window:xwindow (list '#:window:extend win))))
(dmd #:display:x11:xgraph-env (win . val) (if val (mcons '#:tclass:x11window:xgraph-env (list '#:window:extend win) val) (list '#:tclass:x11window:xgraph-env (list '#:window:extend win))))
(dmd #:display:x11:view-rect (ge . val) (if val (mcons '#:tclass:x11window:transparent-window:view-rect (list '#:graph-env:extend ge) val) (list '#:tclass:x11window:transparent-window:view-rect (list '#:graph-env:extend ge))))
(dmd #:display:x11:offset-x (win . val) (if val (mcons '#:tclass:x11window:transparent-window:offset-x (list '#:window:extend win) val) (list '#:tclass:x11window:transparent-window:offset-x (list '#:window:extend win))))
(dmd #:display:x11:offset-y (win . val) (if val (mcons '#:tclass:x11window:transparent-window:offset-y (list '#:window:extend win) val) (list '#:tclass:x11window:transparent-window:offset-y (list '#:window:extend win))))
(dmd #:display:x11:visible (win . val) (if val (mcons '#:tclass:x11window:transparent-window:visible (list '#:window:extend win) val) (list '#:tclass:x11window:transparent-window:visible (list '#:window:extend win))))
(dmd #:display:x11:xcolor (c . val) (if val (mcons '#:color:extend c val) (list '#:color:extend c)))
(dmd #:display:x11:xbitmap (bitmap . val) (if val (mcons '#:x11:bitmap:xbitmap (list '#:bitmap:extend bitmap) val) (list '#:x11:bitmap:xbitmap (list '#:bitmap:extend bitmap))))
(dmd #:display:x11:window-bitmap (bitmap . val) (if val (mcons '#:x11:bitmap:window (list '#:bitmap:extend bitmap) val) (list '#:x11:bitmap:window (list '#:bitmap:extend bitmap))))
(dmd #:display:x11:menu-window (menu . val) (if val (mcons '#:x11:menu:window (list '#:menu:extend menu) val) (list '#:x11:menu:window (list '#:menu:extend menu))))
(dmd #:display:x11:invertedx (menu . val) (if val (mcons '#:x11:menu:invertedx (list '#:menu:extend menu) val) (list '#:x11:menu:invertedx (list '#:menu:extend menu))))
(dmd #:display:x11:invertedy (menu . val) (if val (mcons '#:x11:menu:invertedy (list '#:menu:extend menu) val) (list '#:x11:menu:invertedy (list '#:menu:extend menu))))
(dmd #:display:x11:notaddressp (address) (list 'eq '0 address))
)((dmd #:display:x11:top-opaque-window (window) (list '#:tclass:x11window:transparent-window:top-opaque-father (list '#:window:extend window)))
))
