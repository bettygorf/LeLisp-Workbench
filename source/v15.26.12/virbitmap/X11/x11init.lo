(loader '((title |x11init.lo|)))
(defvar #:sys-package:bitmap '#:display:x11)
(setq #:display:all-bitmaps (acons 'X11 #:sys-package:bitmap #:display:all-bitmaps))
(defvar #:sys-package:colon '#:display:x11)
(defvar #:display:all-bitmaps (when (boundp '#:display:all-bitmaps) #:display:all-bitmaps))
(#:messages:put-message 'errnoshellvariable 'french '"pas de variable d'environnement" 'defmessage)
(#:messages:put-message 'errnoshellvariable 'english '"unbound shell variable" 'defmessage)
'errnoshellvariable
(#:messages:put-message 'errbadx11version 'french '"mauvaise version de x-window" 'defmessage)
(#:messages:put-message 'errbadx11version 'english '"bad x-window version" 'defmessage)
'errbadx11version
(#:messages:put-message '#:display:x11:bad-display 'french '"connection refuse'e" 'defmessage)
(#:messages:put-message '#:display:x11:bad-display 'english '"connexion refused" 'defmessage)
'#:display:x11:bad-display
(#:messages:put-message 'xioerror 'french '"erreur fatale d'entree/sortie xwindow" 'defmessage)
(#:messages:put-message 'xioerror 'english '"xwindow io fatal error" 'defmessage)
'xioerror
(if (not (boundp '#:display:x11:bit-reverse-vector)) (progn (defvar #:display:x11:bit-reverse-vector)))
(if (not (boundp '#:display:x11:file-descriptor-mask)) (progn (defvar #:display:x11:file-descriptor-mask 0)))
(if (not (boundp '#:display:x11:device)) (progn (defvar #:display:x11:device)))
(if (not (boundp '#:display:x11:events-list)) (progn (defvar #:display:x11:events-list (list 'down-event 'up-event 'ascii-event 'drag-event 'enterwindow-event 'leavewindow-event))))
(if (not (boundp '#:display:x11:override-redirect)) (progn (defvar #:display:x11:override-redirect)))
(if (not (boundp '#:display:x11:default-application-name)) (progn (defvar #:display:x11:default-application-name "lelisp")))
(if (not (boundp '#:display:x11:default-application-class)) (progn (defvar #:display:x11:default-application-class "Lelisp")))
(if (not (boundp '#:display:x11:default-x11r2-fonts)) (progn (defvar #:display:x11:default-x11r2-fonts '("vtsingle" "vtbold" "6x10" "swd-s30"))))
(if (not (boundp '#:display:x11:default-x11r3-fonts)) (progn (defvar #:display:x11:default-x11r3-fonts '("-adobe-courier-medium-r-normal--12-120-75-75-m-70-iso8859-1" "-adobe-courier-bold-r-normal--12-120-75-75-m-70-iso8859-1" "-adobe-courier-medium-r-normal--10-100-75-75-m-60-iso8859-1" "-adobe-courier-medium-r-normal--18-180-75-75-m-110-iso8859-1"))))
(defvar #:display:x11:default-cursors '(68 150 82))
(loader'((fentry current-application-name nsubr)
(entry current-application-name nsubr)
(push a4)
(mov (& 0) a1)
(cabne a1 '0 102)
(mov (cvalq #:display:x11:default-application-name) a1)
(bra 101)
102
(cabne a1 '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(cabeq (cvalq #:display:x11:default-application-name) a4 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(mov a4 (cvalq #:display:x11:default-application-name))
105
(mov (cvalq #:display:x11:default-application-name) a1)
(bra 101)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'current-application-name a1)
(jcall error)
101
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry current-application-class nsubr)
(entry current-application-class nsubr)
(push a4)
(mov (& 0) a1)
(cabne a1 '0 102)
(mov (cvalq #:display:x11:default-application-class) a1)
(bra 101)
102
(cabne a1 '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(cabeq (cvalq #:display:x11:default-application-class) a4 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(mov a4 (cvalq #:display:x11:default-application-class))
105
(mov (cvalq #:display:x11:default-application-class) a1)
(bra 101)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'current-application-class a1)
(jcall error)
101
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:x11:get-app-name subr0)
(entry #:display:x11:get-app-name subr0)
(mov (cvalq #:display:x11:default-application-name) a1)
(jmp x11_setappname)
))
(loader'((fentry #:display:x11:get-app-class subr0)
(entry #:display:x11:get-app-class subr0)
(mov (cvalq #:display:x11:default-application-class) a1)
(jmp x11_setappclass)
))
(if (not (boundp '#:display:x11:xmax)) (progn (defvar #:display:x11:xmax)))
(if (not (boundp '#:display:x11:ymax)) (progn (defvar #:display:x11:ymax)))
(if (not (boundp '#:display:x11:fd)) (progn (defvar #:display:x11:fd)))
(if (not (boundp '#:display:x11:depth)) (progn (defvar #:display:x11:depth)))
(loader'((fentry #:display:x11:bitprologue subr1)
(entry #:display:x11:bitprologue subr1)
(push a1)
(push '0)
(push '0)
(push '0)
(push (cvalq #:system:vmsp))
(push (cvalq #:display:x11:fd))
(mov (& 2) (cvalq #:display:x11:fd))
(push (cvalq #:display:x11:ymax))
(mov (& 4) (cvalq #:display:x11:ymax))
(push (cvalq #:display:x11:xmax))
(mov (& 6) (cvalq #:display:x11:xmax))
(push '3)
(push '(#:display:x11:fd #:display:x11:ymax #:display:x11:xmax))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov a1 '6 a4)
(bfnil a4 101)
(btnil (& 9) 104)
(push '"lelisp$disk:[virbitmap.x11]")
(push (cvalq #:system:path))
(mov (& 1) (cvalq #:system:path))
(push '1)
(push '(#:system:path))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov nil a2)
(mov '"x11_def.lo" a1)
(jcall libloadfile)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:path))
(adjstk '8)
104
(hpxmov (& 13) '2 a4)
(bfnil a4 106)
(btnil (& 9) 107)
(push (@ 109))
(push 'vaxvms_trnlnm)
(push '"decw$display")
(push '"")
(mov '3 a4)
(jmp funcall)
109
(eval ())
(mov a1 a4)
(bra 108)
107
(mov '"DISPLAY" a1)
(jcall getenv)
(mov a1 a4)
(bfnil a4 108)
(mov (cvalq #:display:x11:device) a4)
108
(hpmovx a4 (& 13) '2)
106
(hpxmov (& 13) '2 a4)
(bfnil a4 112)
(mov '"DISPLAY" a3)
(mov 'errnoshellvariable a2)
(mov '#:display:x11:bitprologue a1)
(jcall error)
112
(mov (& 13) a1)
(call #:display:x11:initialise)
(mov '0 a2)
(mov '4 a1)
(jcall makevector)
(push a1)
(push (@ 113))
(hpxmov (& 15) '2 a4)
(push a4)
(mov '1 a4)
(jmp catenate)
113
(eval ())
(push a1)
(mov (& 15) a1)
(call #:display:x11:event-mask)
(btnil (cvalq #:display:x11:override-redirect) 114)
(mov '1 a4)
(bra 115)
114
(mov '0 a4)
115
(push a4)
(push a1)
(btnil (& 13) 116)
(push (@ 118))
(push 'x11_bitprologue)
(push (& 4))
(push (@ 119))
(push 'vaxvms_trnlnm)
(push '"sys$node")
(push '"")
(mov '3 a4)
(jmp funcall)
119
(eval ())
(push a1)
(push (& 4))
(push (& 6))
(push (& 9))
(mov '6 a4)
(jmp funcall)
118
(eval ())
(mov a1 a3)
(bra 117)
116
(push (@ 120))
(push 'x11_bitprologue)
(push (& 4))
(push a1)
(push a4)
(push (& 8))
(mov '5 a4)
(jmp funcall)
120
(eval ())
(mov a1 a3)
117
(hpmovx a3 (& 17) '21)
(hpxmov (& 17) '21 a4)
(cabne '0 a4 122)
(mov (& 17) a3)
(mov '#:display:x11:bad-display a2)
(mov 'bitprologue a1)
(jcall error)
122
(hpxmov (& 3) '0 a4)
(mov a4 (cvalq #:display:x11:xmax))
(hpxmov (& 3) '1 a3)
(mov a3 (cvalq #:display:x11:ymax))
(hpxmov (& 3) '2 a2)
(mov a2 (cvalq #:display:x11:fd))
(hpxmov (& 3) '3 a1)
(mov a1 (cvalq #:display:x11:depth))
(adjstk '4)
(hpmovx (cvalq #:display:x11:default-application-name) (& 13) '49)
(hpxmov (& 13) '21 a1)
(jcall x11_depth)
(hpmovx a1 (& 13) '48)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 123))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 124))
(push (& 26))
(push (cvalq #:display:x11:xmax))
(push (cvalq #:display:x11:ymax))
(push (cvalq #:display:x11:fd))
(mov '4 a4)
(bra #:display:x11:init-display)
124
(eval ())
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
123
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 125))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 25) a1)
(jcall #:display:x11:init-color)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
125
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 126))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 25) a1)
(jcall #:display:x11:init-cursor)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
126
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 127))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 25) a1)
(jcall #:display:x11:init-font)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
127
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 128))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 25) a1)
(jcall #:display:x11:init-line-style)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
128
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov (& 13) a1)
(call #:display:x11:initialize-event-responses)
(hpxmov (& 13) '21 a1)
(jcall x11_bitmapbitorder)
(cabne a1 '1 129)
(mov 't a4)
(bra 130)
129
(mov nil a4)
130
(hpmovx a4 (& 13) '45)
(bfnil (cvalq #:display:x11:bit-reverse-vector) 132)
(mov '#[0 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15] (cvalq #:display:x11:bit-reverse-vector))
132
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 133))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 25) a1)
(jcall #:display:x11:init-pattern)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
133
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov (& 13) a1)
(call #:display:x11:init-window)
(hpmovx nil (& 13) '29)
(mov '0 a2)
(mov '20 a1)
(jcall makevector)
(hpmovx a1 (& 13) '47)
(hpxmov (& 13) '46 a4)
(bfnil a4 135)
(hpmovx 'transparent (& 13) '46)
135
(hpxmov (& 13) '63 a4)
(btnil a4 137)
(push (@ 138))
(push (& 14))
(push 't)
(mov '2 a4)
(jmp #:display:x11:synchronize)
138
(eval ())
137
(mov (& 13) a1)
(bra 102)
101
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 6) (cvalq #:display:x11:xmax))
(mov (& 7) (cvalq #:display:x11:ymax))
(mov (& 8) (cvalq #:display:x11:fd))
(adjstk '14)
(return)
))
(loader'((fentry #:display:x11:bitepilogue subr1)
(entry #:display:x11:bitepilogue subr1)
(push a1)
(hpxmov a1 '14 a4)
(push a4)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(hpxmov (& 0) '9 a4)
(bfnil a4 104)
(hpxmov (& 0) '12 a4)
(btnil a4 104)
(push (@ 105))
(push 'kill-window)
(push (& 2))
(mov '2 a4)
(jmp send)
105
(eval ())
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(hpxmov (& 0) '35 a4)
(push '0)
(push a4)
(btnil a4 107)
108
(hgsize (& 0) a4)
(cnbge (& 1) a4 107)
(hpxmov (& 2) '21 a1)
(hpxmov (& 0) (& 1) a2)
(jcall x11_free_cursor)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 108)
107
(adjstk '2)
(hpmovx nil (& 0) '35)
(hpmovx nil (& 0) '64)
(hpxmov (& 0) '15 a4)
(push a4)
110
(bfcons (& 0) 111)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(hpxmov (& 2) '21 a1)
(hpxmov (& 0) '2 a2)
(hpxmov a2 '1 a2)
(jcall x11_kill_bitmap)
(adjstk '1)
(bra 110)
111
(adjstk '1)
(hpxmov (& 0) '6 a4)
(btnil a4 113)
(hpmovx nil (& 0) '36)
113
(hpmovx nil (& 0) '34)
(hpmovx nil (& 0) '37)
(hpmovx nil (& 0) '29)
(hpmovx nil (& 0) '30)
(hpmovx nil (& 0) '32)
(hpmovx nil (& 0) '29)
(push (cvalq #:display:x11:file-descriptor-mask))
(hpxmov (& 1) '27 a1)
(jcall 2**)
(pop a4)
(lxor a1 a4)
(mov a4 (cvalq #:display:x11:file-descriptor-mask))
(hpmovx '0 (& 0) '27)
(hpmovx nil (& 0) '28)
(hpxmov (& 0) '21 a1)
(adjstk '1)
(jmp x11_bitepilogue)
))
(loader'((fentry #:display:x11:bitmap-save subr1)
(entry #:display:x11:bitmap-save subr1)
(jmp #:display:x11:bitepilogue)
))
(loader'((fentry #:display:x11:bitmap-restore subr1)
(entry #:display:x11:bitmap-restore subr1)
(jmp #:display:x11:bitprologue)
))
(loader'((fentry #:display:x11:bitmap-refresh subr1)
(entry #:display:x11:bitmap-refresh subr1)
(push a1)
(hpxmov a1 '8 a4)
(hpxmov a1 '21 a1)
(hpxmov (& 0) '35 a2)
(btnil a4 101)
(hpxmov a4 '11 a3)
(bra 102)
101
(mov '0 a3)
102
(hpxmov a2 a3 a2)
(adjstk '1)
(jmp x11_bitmap_refresh)
))
(loader'((fentry #:display:x11:bitmap-flush subr1)
(entry #:display:x11:bitmap-flush subr1)
(hpxmov a1 '21 a1)
(jmp x11_bitmap_flush)
))
(loader'((fentry #:display:x11:bitmap-sync subr1)
(entry #:display:x11:bitmap-sync subr1)
(hpxmov a1 '21 a1)
(jmp x11_bitmap_sync)
))
(loader'((fentry #:display:x11:standard-roman-font subr1)
(entry #:display:x11:standard-roman-font subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:x11:standard-bold-font subr1)
(entry #:display:x11:standard-bold-font subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:x11:small-roman-font subr1)
(entry #:display:x11:small-roman-font subr1)
(mov '2 a1)
(return)
))
(loader'((fentry #:display:x11:large-roman-font subr1)
(entry #:display:x11:large-roman-font subr1)
(mov '3 a1)
(return)
))
(loader'((fentry #:display:x11:standard-background-pattern subr1)
(entry #:display:x11:standard-background-pattern subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:x11:standard-foreground-pattern subr1)
(entry #:display:x11:standard-foreground-pattern subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:x11:standard-medium-gray-pattern subr1)
(entry #:display:x11:standard-medium-gray-pattern subr1)
(mov '2 a1)
(return)
))
(loader'((fentry #:display:x11:standard-light-gray-pattern subr1)
(entry #:display:x11:standard-light-gray-pattern subr1)
(mov '3 a1)
(return)
))
(loader'((fentry #:display:x11:standard-dark-gray-pattern subr1)
(entry #:display:x11:standard-dark-gray-pattern subr1)
(mov '4 a1)
(return)
))
(loader'((fentry #:display:x11:standard-lelisp-cursor subr1)
(entry #:display:x11:standard-lelisp-cursor subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:x11:standard-gc-cursor subr1)
(entry #:display:x11:standard-gc-cursor subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:x11:standard-busy-cursor subr1)
(entry #:display:x11:standard-busy-cursor subr1)
(mov '2 a1)
(return)
))
(loader'((entry #:display:x11:initialise subr1)
(hpmovx '((-248 . backspace) (-247 . tab) (-246 . linefeed) (-245 . clear) (-243 . return) (-237 . pause) (-229 . escape) (-1 . delete) (-224 . multi-key) (-223 . kanji) (-176 . home) (-175 . left) (-174 . up) (-173 . right) (-172 . down) (-171 . prior) (-170 . next) (-169 . end) (-168 . begin) (-160 . select) (-159 . print) (-158 . execute) (-157 . insert) (-155 . undo) (-154 . redo) (-153 . menu) (-152 . find) (-151 . cancel) (-150 . help) (-149 . break) (-130 . mode-switch) (-130 . script-switch) (-129 . num-lock) (-128 . kp-space) (-119 . kp-tab) (-115 . kp-enter) (-111 . kp-f1) (-110 . kp-f2) (-109 . kp-f3) (-108 . kp-f4) (-67 . kp-equal) (-86 . kp-multiply) (-85 . kp-add) (-84 . kp-separator) (-83 . kp-subtract) (-82 . kp-decimal) (-81 . kp-divide) (-80 . kp-0) (-79 . kp-1) (-78 . kp-2) (-77 . kp-3) (-76 . kp-4) (-75 . kp-5) (-74 . kp-6) (-73 . kp-7) (-72 . kp-8) (-71 . kp-9) (-66 . f1) (-65 . f2) (-64 . f3) (-63 . f4) (-62 . f5) (-61 . f6) (-60 . f7) (-59 . f8) (-58 . f9) (-57 . f10) (-56 . f11) (-56 . l1) (-55 . f12) (-55 . l2) (-54 . f13) (-54 . l3) (-53 . f14) (-53 . l4) (-52 . f15) (-52 . l5) (-51 . f16) (-51 . l6) (-50 . f17) (-50 . l7) (-49 . f18) (-49 . l8) (-48 . f19) (-48 . l9) (-47 . f20) (-47 . l10) (-46 . f21) (-46 . r1) (-45 . f22) (-45 . r2) (-44 . f23) (-44 . r3) (-43 . f24) (-43 . r4) (-42 . f25) (-42 . r5) (-41 . f26) (-41 . r6) (-40 . f27) (-40 . r7) (-39 . f28) (-39 . r8) (-38 . f29) (-38 . r9) (-37 . f30) (-37 . r10) (-36 . f31) (-36 . r11) (-35 . f32) (-35 . r12) (-34 . r13) (-34 . f33) (-33 . f34) (-33 . r14) (-32 . f35) (-32 . r15) (-31 . shift-l) (-30 . shift-r) (-29 . control-l) (-28 . control-r) (-27 . caps-lock) (-26 . shift-lock) (-25 . meta-l) (-24 . meta-r) (-23 . alt-l) (-22 . alt-r) (-21 . super-l) (-20 . super-r) (-19 . hyper-l) (-18 . hyper-r)) a1 '32)
(mov '#:display:x11:xioerror a3)
(mov '#:display:x11:xerror a2)
(mov nil a1)
(jmp x11_initialise)
))
(loader'((fentry #:display:x11:xerror subr2)
(entry #:display:x11:xerror subr2)
(btnil (cvalq #:system:vmsp) 101)
(push (@ 103))
(push a1)
(push a2)
(mov '2 a4)
(jmp catenate)
103
(eval ())
(mov nil a3)
(mov a1 a2)
(mov 'errx a1)
(jmp printerror)
101
(push (@ 104))
(push a1)
(push a2)
(mov '2 a4)
(jmp catenate)
104
(eval ())
(mov nil a3)
(mov a1 a2)
(mov 'errx a1)
(jmp error)
))
(loader'((fentry #:display:x11:xioerror subr0)
(entry #:display:x11:xioerror subr0)
(push (@ 101))
(mov '0 a4)
(jmp current-display)
101
(eval ())
(mov 'tty (cvalq #:sys-package:tty))
(mov nil (cvalq #:sys-package:itsoft))
(mov a1 a3)
(mov 'xioerror a2)
(mov '#:display:x11:ioerror a1)
(jmp error)
))
(loader'((entry #:display:x11:event-mask subr1)
(push a1)
(push (cvalq #:display:x11:events-list))
(bfnil (& 0) 101)
(push (@ 103))
(push 'ascii-event)
(push 'down-event)
(push 'up-event)
(push 'drag-event)
(push 'functionkey-event)
(push 'enterwindow-event)
(push 'leavewindow-event)
(mov '7 a4)
(jmp list)
103
(eval ())
(mov a1 (& 0))
(bra 102)
101
(mov (& 0) a2)
(mov 'move-event a1)
(jcall memq)
(btnil a1 102)
(mov (& 0) a2)
(mov 'drag-event a1)
(jcall memq)
(bfnil a1 102)
(push 'drag-event)
(push (@ 106))
(push (& 2))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
106
(eval ())
(adjstk '1)
(mov a1 (& 0))
(mov a1 (& 0))
102
(mov (& 0) a2)
(mov 'ascii-event a1)
(jcall memq)
(btnil a1 108)
(hpmovx 't (& 1) '56)
108
(mov (& 0) a2)
(mov 'functionkey-event a1)
(jcall memq)
(btnil a1 110)
(hpmovx 't (& 1) '55)
110
(mov (& 0) a2)
(mov 'move-event a1)
(jcall memq)
(btnil a1 112)
(hpmovx 't (& 1) '54)
112
(mov (& 0) a2)
(mov 'drag-event a1)
(jcall memq)
(btnil a1 114)
(hpmovx 't (& 1) '53)
114
(hpmovx 't (& 1) '58)
(hpmovx 't (& 1) '57)
(hpmovx 't (& 1) '61)
(hpmovx 't (& 1) '60)
(mov (& 0) a2)
(mov 'client-message a1)
(jcall memq)
(btnil a1 116)
(hpmovx 't (& 1) '59)
116
(hpmovx (& 0) (& 1) '31)
(mov 'repaint-event a2)
(mov (& 0) a1)
(jcall append1)
(hpmovx a1 (& 1) '40)
(push (@ 117))
(push (& 1))
(push '(repaint-event modify-window-event))
(mov '2 a4)
(jmp append)
117
(eval ())
(hpmovx a1 (& 1) '39)
(hpmovx (& 0) (& 1) '41)
(hpxmov (& 1) '39 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 1) '42)
(hpxmov (& 1) '40 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 1) '43)
(hpxmov (& 1) '41 a1)
(jcall #:display:x11:compute-event-mask)
(hpmovx a1 (& 1) '44)
(push '0)
118
(btnil (& 1) 119)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(cabne a1 'ascii-event 121)
(mov (& 0) a4)
(lor '1 a4)
(mov a4 (& 0))
(bra 118)
121
(cabne a1 'functionkey-event 122)
(mov (& 0) a4)
(lor '1 a4)
(mov a4 (& 0))
(bra 118)
122
(cabne a1 'down-event 123)
(mov (& 0) a4)
(lor '4 a4)
(mov a4 (& 0))
(bra 118)
123
(cabne a1 'up-event 124)
(mov (& 0) a4)
(lor '8 a4)
(mov a4 (& 0))
(bra 118)
124
(cabne a1 'enterwindow-event 125)
(mov (& 0) a4)
(lor '16 a4)
(mov a4 (& 0))
(bra 118)
125
(cabne a1 'leavewindow-event 126)
(mov (& 0) a4)
(lor '32 a4)
(mov a4 (& 0))
(bra 118)
126
(cabne a1 'drag-event 127)
(mov (& 0) a4)
(lor '8192 a4)
(mov a4 (& 0))
(bra 118)
127
(cabne a1 'move-event 118)
(mov (& 0) a4)
(lor '64 a4)
(mov a4 (& 0))
(bra 118)
119
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((entry #:display:x11:init-display nsubr)
(push (cvalq #:display:x11:file-descriptor-mask))
(hpmovx (& 1) (& 4) '27)
(mov (& 1) a1)
(jcall 2**)
(pop a4)
(lor a1 a4)
(mov a4 (cvalq #:display:x11:file-descriptor-mask))
(hpmovx (& 2) (& 3) '3)
(hpmovx (& 1) (& 3) '4)
(hpxmov (& 3) '21 a1)
(jcall x11_x_version)
(push a1)
(hpxmov (& 4) '21 a1)
(jcall x11_x_release)
(push a1)
(hpxmov (& 5) '21 a1)
(jcall x11_x_revision)
(push (@ 101))
(push '"x")
(push (& 3))
(push '"r")
(push (& 4))
(push '"r")
(push a1)
(mov '6 a4)
(jmp catenate)
101
(eval ())
(hpmovx a1 (& 5) '38)
(cabeq (& 1) '11 102)
(hpxmov (& 5) '38 a3)
(mov 'errbadx11version a2)
(mov '#:display:x11:bitprologue a1)
(adjstk '6)
(jmp error)
102
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:x11:init-font subr1)
(entry #:display:x11:init-font subr1)
(push a1)
(hpmovx '#[] a1 '36)
(hpxmov a1 '21 a1)
(jcall x11_x_release)
(cabne a1 '2 101)
(mov (cvalq #:display:x11:default-x11r2-fonts) a4)
(bra 102)
101
(mov (cvalq #:display:x11:default-x11r3-fonts) a4)
102
(push a4)
(mov (car a4) a3)
(mov '"font" a2)
(mov (& 1) a1)
(jcall #:display:x11:add-a-font)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov '"attributefont" a2)
(mov (& 1) a1)
(jcall #:display:x11:add-a-font)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov '"smallfont" a2)
(mov (& 1) a1)
(jcall #:display:x11:add-a-font)
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov '"largefont" a2)
(mov (& 1) a1)
(adjstk '2)
(jmp #:display:x11:add-a-font)
))
(loader'((fentry #:display:x11:add-a-font subr3)
(entry #:display:x11:add-a-font subr3)
(push a3)
(push a1)
(jcall #:display:x11:get-default)
(push a1)
(hgsize a1 a4)
(cabne '0 a4 102)
(mov (& 2) (& 0))
102
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 12) a2)
(mov (& 13) a1)
(jcall #:display:x11:load-font)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(btnil a1 104)
(hpxmov (& 1) '18 a3)
(mov (car a1) a2)
(mov (& 0) a1)
(jcall acons)
(hpmovx a1 (& 1) '18)
(adjstk '3)
(return)
104
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry #:display:x11:init-line-style subr1)
(entry #:display:x11:init-line-style subr1)
(hpxmov a1 '33 a4)
(bfnil a4 101)
(push a1)
(push (@ 103))
(push '#[0 0])
(push '#[1 0])
(push '#[1 1])
(push '#[1 2])
(push '#[2 0])
(push '#[2 1])
(push '#[2 2])
(push '#[3 0])
(push '#[3 1])
(push '#[3 2])
(mov '10 a4)
(jmp vector)
103
(eval ())
(pop a4)
(hpmovx a1 a4 '33)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:init-pattern subr1)
(entry #:display:x11:init-pattern subr1)
(push a1)
(hpmovx '#[] a1 '34)
(push (@ 101))
(push a1)
(push '16)
(push '16)
(push '#[#*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000])
(mov '4 a4)
(jmp #:display:x11:add-a-pattern)
101
(eval ())
(push (@ 102))
(push (& 1))
(push '16)
(push '16)
(push '#[#*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF])
(mov '4 a4)
(jmp #:display:x11:add-a-pattern)
102
(eval ())
(push (@ 103))
(push (& 1))
(push '16)
(push '16)
(push '#[#*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555])
(mov '4 a4)
(jmp #:display:x11:add-a-pattern)
103
(eval ())
(push (@ 104))
(push (& 1))
(push '16)
(push '16)
(push '#[#*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222])
(mov '4 a4)
(jmp #:display:x11:add-a-pattern)
104
(eval ())
(push (@ 105))
(push (& 1))
(push '16)
(push '16)
(push '#[#*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD])
(mov '4 a4)
(jmp #:display:x11:add-a-pattern)
105
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:add-a-pattern nsubr)
(entry #:display:x11:add-a-pattern nsubr)
(cnbeq a4 '4 101)
(mov '#:display:x11:add-a-pattern a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(jcall #:bitmap:make)
(push a1)
(hpmovx (& 3) a1 '0)
(hpmovx (& 2) a1 '1)
(hpmovx (& 4) a1 '3)
(mov a1 a2)
(mov (& 4) a1)
(jcall #:display:x11:create-bitmap)
(push (@ 102))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp #:bitmap:bits)
102
(eval ())
(mov (& 0) a2)
(mov (& 4) a1)
(adjstk '5)
(jmp #:display:x11:make-pattern)
))
(loader'((fentry #:display:x11:init-cursor subr1)
(entry #:display:x11:init-cursor subr1)
(push a1)
(push a1)
(mov '0 a2)
(mov '3 a1)
(jcall makevector)
(pop a4)
(hpmovx a1 a4 '35)
(hpmovx nil (& 0) '64)
(mov '"cursor" a2)
(mov (& 0) a1)
(jcall #:display:x11:get-default)
(push a1)
(mov '"gccursor" a2)
(mov (& 1) a1)
(jcall #:display:x11:get-default)
(push a1)
(mov '"busycursor" a2)
(mov (& 2) a1)
(jcall #:display:x11:get-default)
(push a1)
(mov '"" a2)
(mov (& 2) a1)
(jcall eqstring)
(btnil a1 101)
(mov (cvalq #:display:x11:default-cursors) a4)
(mov (car a4) a4)
(bra 102)
101
(mov (& 2) a1)
(jcall read-from-string)
(mov a1 a4)
102
(mov a4 (& 2))
(mov '"" a2)
(mov (& 1) a1)
(jcall eqstring)
(btnil a1 103)
(mov (cvalq #:display:x11:default-cursors) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(bra 104)
103
(mov (& 1) a1)
(jcall read-from-string)
(mov a1 a4)
104
(mov a4 (& 1))
(mov '"" a2)
(mov (& 0) a1)
(jcall eqstring)
(btnil a1 105)
(mov (cvalq #:display:x11:default-cursors) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(bra 106)
105
(mov (& 0) a1)
(jcall read-from-string)
(mov a1 a4)
106
(mov a4 (& 0))
(hpxmov (& 3) '35 a3)
(push a3)
(hpxmov (& 4) '21 a1)
(mov (& 3) a2)
(jcall x11_create_cursor)
(pop a4)
(hpmovx a1 a4 '0)
(hpxmov (& 3) '35 a4)
(push a4)
(hpxmov (& 4) '21 a1)
(mov (& 2) a2)
(jcall x11_create_cursor)
(pop a4)
(hpmovx a1 a4 '1)
(hpxmov (& 3) '35 a4)
(push a4)
(hpxmov (& 4) '21 a1)
(mov (& 1) a2)
(jcall x11_create_cursor)
(pop a4)
(hpmovx a1 a4 '2)
(adjstk '3)
(hpmovx nil (& 0) '20)
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:synchronize nsubr)
(entry #:display:x11:synchronize nsubr)
(cnbge a4 '1 101)
(mov '#:display:x11:synchronize a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(bfnil a1 102)
(hpxmov (& 1) '63 a1)
(adjstk '2)
(return)
102
(hpxmov (& 1) '21 a1)
(mov (& 0) a4)
(btnil (car a4) 104)
(mov '1 a2)
(bra 105)
104
(mov '0 a2)
105
(jcall x11_synchronize)
(mov (& 0) a4)
(hpmovx (car a4) (& 1) '63)
(mov (car a4) a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:x11:init-window subr1)
(push a1)
(jcall #:image:rectangle:window:make)
(push a1)
(jcall #:tclass:x11window:make)
(push nil)
(hpmovx '0 (& 1) '0)
(hpmovx '0 (& 1) '1)
(hpxmov (& 2) '3 a4)
(plus '1 a4)
(hpmovx a4 (& 1) '2)
(hpxmov (& 2) '4 a4)
(plus '1 a4)
(hpmovx a4 (& 1) '3)
(hpmovx '"root-window" (& 1) '4)
(hpmovx '0 (& 1) '5)
(hpxmov (& 2) '48 a4)
(cabne (cvalq #:display:x11:depth) a4 101)
(mov '1 a4)
(bra 102)
101
(mov '0 a4)
102
(hpmovx a4 (& 1) '6)
(hpmovx (& 2) (& 1) '12)
(hpmovx a1 (& 1) '8)
(hpmovx 'opaque (& 1) '15)
(hpmovx 'map (& 1) '17)
(hpxmov (& 1) '8 a3)
(push a3)
(hpxmov (& 3) '21 a1)
(jcall x11_root_window)
(pop a4)
(hpmovx a1 a4 '0)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall #:display:x11:x11-create-graph-env)
(hpxmov (& 1) '7 a4)
(mov a4 (& 0))
(hpxmov (& 2) '21 a1)
(hpxmov a4 '12 a2)
(hpxmov a2 '1 a2)
(mov '1 a3)
(jcall x11_graph_subwindow_mode)
(hpmovx (& 1) (& 2) '10)
(hpmovx (& 0) (& 2) '11)
(hpxmov (& 2) '13 a4)
(hpmovx a4 (& 0) '4)
(hpxmov (& 2) '12 a4)
(hpmovx a4 (& 0) '5)
(hpmovx nil (& 2) '8)
(push (@ 103))
(push (& 2))
(mov '1 a4)
(jmp list)
103
(eval ())
(hpmovx a1 (& 2) '14)
(hpxmov (& 2) '11 a4)
(hpmovx a4 (& 2) '9)
(mov a4 a1)
(adjstk '3)
(return)
))
(loader'((fentry #:display:x11:store-selection subr2)
(entry #:display:x11:store-selection subr2)
(hpxmov a1 '21 a1)
(hgsize a2 a3)
(jmp x11_store_bytes)
))
(loader'((fentry #:display:x11:get-selection subr1)
(entry #:display:x11:get-selection subr1)
(push a1)
(push (@ 101))
(push '0)
(mov '1 a4)
(jmp vector)
101
(eval ())
(push nil)
(push nil)
(push a1)
(hpxmov (& 3) '21 a1)
(mov (& 0) a2)
(jcall x11_fetch_bytes)
(mov a1 (& 2))
(hpxmov (& 0) '0 a4)
(mov a4 (& 1))
(cnble a4 '0 102)
(mov '0 a2)
(mov a4 a1)
(jcall makestring)
(push a1)
(mov (& 2) a3)
(mov a1 a2)
(mov (& 3) a1)
(jcall x11_bytes_to_llstring)
(mov (& 0) a1)
(adjstk '5)
(return)
102
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:x11:display-depth subr1)
(entry #:display:x11:display-depth subr1)
(hpxmov a1 '48 a1)
(return)
))
(loader'((entry #:display:x11:initialize-event-responses subr1)
(push a1)
(mov '#:display:x11:default-event-code a2)
(mov '37 a1)
(jcall makevector)
(hpmovx '#:display:x11:ascii-event-code a1 '2)
(hpmovx '#:display:x11:functionkey-event-code a1 '36)
(hpmovx '#:display:x11:down-event-code a1 '4)
(hpmovx '#:display:x11:up-event-code a1 '5)
(hpmovx '#:display:x11:movedrag-event-code a1 '6)
(hpmovx '#:display:x11:enterwindow-event-code a1 '7)
(hpmovx '#:display:x11:leavewindow-event-code a1 '8)
(hpmovx '#:display:x11:keyboard-focus-event-code a1 '9)
(hpmovx '#:display:x11:keyboard-focus-event-code a1 '10)
(hpmovx '#:display:x11:repaint-window-event-code a1 '12)
(hpmovx '#:display:x11:repaint-window-event-code a1 '13)
(hpmovx '#:display:x11:kill-window-event-code a1 '17)
(hpmovx '#:display:x11:modify-window-event-code a1 '22)
(hpmovx '#:display:x11:unmap-window-code a1 '18)
(hpmovx '#:display:x11:map-window-code a1 '19)
(hpmovx '#:display:x11:client-message-code a1 '33)
(hpmovx '#:display:x11:visibility-change-code a1 '15)
(hpmovx '#:display:x11:reparent-notify-code a1 '21)
(hpmovx a1 (& 0) '62)
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:get-xdisplay subr1)
(entry #:display:x11:get-xdisplay subr1)
(push a1)
(mov '#:display:x11 a2)
(jcall typep)
(btnil a1 101)
(hpxmov (& 0) '21 a4)
(btnil a4 101)
(hpxmov (& 0) '21 a1)
(adjstk '1)
(jmp x11_xdisplay)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader '((end)))
