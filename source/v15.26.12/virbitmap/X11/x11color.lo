(loader '((title |x11color.lo|)))
(defvar #:sys-package:colon '#:display:x11)
(#:messages:put-message 'errnomorecolors 'french '"plus de couleurs disponibles" 'defmessage)
(#:messages:put-message 'errnomorecolors 'english '"no more colours available" 'defmessage)
'errnomorecolors
(if (not (boundp '#:display:x11:grey4-colors)) (progn (defvar #:display:x11:grey4-colors '("grey" "lightgrey"))))
(if (not (boundp '#:display:x11:grey12-colors)) (progn (defvar #:display:x11:grey12-colors '("grey" "lightgrey" "grey20" "grey30" "grey40" "grey50" "grey60" "grey70" "grey80" "grey90"))))
(if (not (boundp '#:display:x11:default-colors)) (progn (defvar #:display:x11:default-colors '("red" "green" "blue" "yellow" "cyan" "magenta" "grey" "lightgrey"))))
(if (not (boundp '#:display:x11:color24-colors)) (progn (defvar #:display:x11:color24-colors '("red" "pink" "firebrick" "green" "palegreen" "forestgreen" "blue" "lightsteelblue" "navyblue" "yellow" "mediumgoldenrod" "goldenrod" "cyan" "turquoise" "mediumturquoise" "magenta" "plum" "orchid" "grey" "lightgrey" "grey30" "grey70"))))
(if (not (boundp '#:display:x11:color49-colors)) (progn (defvar #:display:x11:color49-colors '("red" "pink" "orange" "firebrick" "salmon" "indianred" "green" "palegreen" "limegreen" "forestgreen" "mediumseagreen" "darkgreen" "blue" "lightsteelblue" "mediumblue" "navyblue" "cornflowerblue" "midnightblue" "yellow" "mediumgoldenrod" "wheat" "goldenrod" "khaki" "darkolivegreen" "cyan" "turquoise" "lightblue" "mediumturquoise" "cadetblue" "darkslateblue" "magenta" "plum" "thistle" "orchid" "blueviolet" "violet" "grey" "lightgrey" "grey10" "grey20" "grey30" "grey40" "grey50" "grey60" "grey70" "grey80" "grey90"))))
(loader'((fentry #:display:x11:get-default subr2)
(entry #:display:x11:get-default subr2)
(push a2)
(push a1)
(hpxmov a1 '21 a1)
(hpxmov (& 0) '49 a2)
(mov (& 1) a3)
(jcall x11_get_default)
(push nil)
(push a1)
101
(hgsize (& 0) a4)
(cnble a4 '0 104)
(hbxmov (& 0) '0 a4)
(cabne a4 '32 104)
(push (@ 103))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp substring)
103
(eval ())
(mov a1 (& 0))
(bra 101)
104
(hgsize (& 0) a4)
(mov a4 (& 1))
(cnble a4 '0 105)
(diff '1 a4)
(hbxmov (& 0) a4 a3)
(cabne a3 '32 105)
(push (@ 106))
(push (& 1))
(push '0)
(mov (& 4) a4)
(diff '1 a4)
(push a4)
(mov '3 a4)
(jmp substring)
106
(eval ())
(mov a1 (& 0))
(bra 104)
105
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((entry #:display:x11:all-but-once subr1)
(btnil a1 101)
(push (car a1))
(push (car a1))
(mov (cdr a1) a1)
(call #:display:x11:all-but-once)
(mov a1 a2)
(pop a1)
(jcall remq)
(mov a1 a2)
(pop a1)
(jmp cons)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:init-color subr1)
(entry #:display:x11:init-color subr1)
(push a1)
(mov '"foreground" a2)
(jcall #:display:x11:get-default)
(push a1)
(mov '"background" a2)
(mov (& 1) a1)
(jcall #:display:x11:get-default)
(push a1)
(mov '"colors" a2)
(mov (& 2) a1)
(jcall #:display:x11:get-default)
(push a1)
(mov '"reversevideo" a2)
(mov (& 3) a1)
(jcall #:display:x11:get-default)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push nil)
(push a1)
(mov '"" a2)
(mov (& 6) a1)
(jcall eqstring)
(btnil a1 102)
(mov '"black" (& 6))
102
(mov '"" a2)
(mov (& 5) a1)
(jcall eqstring)
(btnil a1 104)
(mov '"white" (& 5))
104
(mov '"on" a2)
(mov (& 3) a1)
(jcall eqstring)
(btnil a1 106)
(mov '"white" (& 6))
(mov '"black" (& 5))
106
(hpmovx (& 6) (& 2) '0)
(hpmovx (& 7) (& 2) '5)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 109))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 18) a3)
(mov (& 14) a2)
(mov (& 19) a1)
(jcall #:display:x11:make-named-color)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
109
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 108)
(mov '"black" (& 6))
(hpmovx (& 6) (& 2) '0)
(mov (& 6) a3)
(mov (& 2) a2)
(mov (& 7) a1)
(jcall #:display:x11:make-named-color)
108
(hpmovx (& 5) (& 0) '0)
(hpmovx (& 7) (& 0) '5)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 112))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 17) a3)
(mov (& 12) a2)
(mov (& 19) a1)
(jcall #:display:x11:make-named-color)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
112
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 111)
(mov '"white" (& 5))
(hpmovx (& 5) (& 0) '0)
(mov (& 5) a3)
(mov (& 0) a2)
(mov (& 7) a1)
(jcall #:display:x11:make-named-color)
111
(hpmovx (& 2) (& 7) '13)
(hpmovx (& 0) (& 7) '12)
(push (@ 113))
(push (& 3))
(push (& 2))
(mov '2 a4)
(jmp list)
113
(eval ())
(hpmovx a1 (& 7) '17)
(hpxmov (& 2) '6 a4)
(hpxmov (& 0) '6 a3)
(cabne a4 a3 114)
(mov '1 a4)
(bra 115)
114
(hpxmov (& 2) '6 a1)
(hpxmov (& 0) '6 a2)
(mov '1 a3)
(call #:display:x11:compute-mask)
(mov a1 a4)
115
(mov a4 (& 1))
(push (@ 116))
(hpxmov (& 8) '17 a3)
(push a3)
(mov (& 6) a1)
(push a1)
(mov '("" "standard" "color10") a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 118)
(mov (cvalq #:display:x11:default-colors) a3)
(bra 117)
118
(push a1)
(mov '"none" a2)
(jcall equal)
(mov a1 a2)
(pop a1)
(btnil a2 119)
(mov nil a3)
(bra 117)
119
(push a1)
(mov '("grey4" "grey") a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 120)
(mov (cvalq #:display:x11:grey4-colors) a3)
(bra 117)
120
(push a1)
(mov '("grey12" "shade") a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 121)
(mov (cvalq #:display:x11:grey12-colors) a3)
(bra 117)
121
(push a1)
(mov '("color24" "basic") a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 122)
(mov (cvalq #:display:x11:color24-colors) a3)
(bra 117)
122
(push a1)
(mov '("color49" "extended") a2)
(jcall member)
(mov a1 a2)
(pop a1)
(btnil a2 123)
(mov (cvalq #:display:x11:color49-colors) a3)
(bra 117)
123
(mov nil a3)
117
(push a3)
(push nil)
124
(bfcons (& 1) 125)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push nil)
(push '0)
(push nil)
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov (& 3) (cvalq #:system:print-msgs))
(push (cvalq #:system:error-flag))
(mov (& 5) (cvalq #:system:error-flag))
(push '3)
(push '(#:system:debug #:system:print-msgs #:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 126))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(jcall #:color:make)
(hpmovx (& 28) a1 '5)
(hpmovx (& 16) a1 '0)
(mov (& 16) a3)
(mov a1 a2)
(mov (& 28) a1)
(jcall #:display:x11:make-named-color)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
126
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(mov (& 7) (cvalq #:system:print-msgs))
(mov (& 8) (cvalq #:system:debug))
(adjstk '13)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 124)
125
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp append)
116
(eval ())
(call #:display:x11:all-but-once)
(hpmovx a1 (& 7) '17)
(push (@ 127))
(hpxmov (& 8) '21 a4)
(push a4)
(hpxmov (& 4) '6 a4)
(push a4)
(hpxmov (& 3) '6 a4)
(push a4)
(push (& 5))
(mov '4 a4)
(jmp x11_init_pixels)
127
(eval ())
(hpxmov (& 2) '6 a4)
(land (& 1) a4)
(cabeq '0 a4 128)
(hpmovx '#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] (& 7) '37)
(mov '#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] a1)
(adjstk '8)
(return)
128
(hpmovx '#[15 7 11 3 13 5 9 1 14 6 10 2 12 4 8 0] (& 7) '37)
(mov '#[15 7 11 3 13 5 9 1 14 6 10 2 12 4 8 0] a1)
(adjstk '8)
(return)
))
(if (not (boundp '#:display:x11:rgb)) (progn (defvar #:display:x11:rgb #[() () ()])))
(loader'((fentry #:display:x11:make-color nsubr)
(entry #:display:x11:make-color nsubr)
(cnbeq a4 '5 101)
(mov '#:display:x11:make-color a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(hpxmov (& 5) '21 a4)
(push a4)
(push (& 4))
(push (& 4))
(push (& 4))
(push (cvalq #:display:x11:rgb))
(mov '5 a4)
(jmp x11_make_color)
102
(eval ())
(push a1)
(cabne a1 '-1 104)
(push (@ 105))
(push (& 4))
(push (& 4))
(push (& 4))
(mov '3 a4)
(jmp list)
105
(eval ())
(mov a1 a3)
(mov 'errnomorecolors a2)
(mov '#:display:x11:make-color a1)
(jcall error)
104
(push (@ 106))
(push (& 6))
(push (& 6))
(push (& 3))
(push (cvalq #:display:x11:rgb))
(mov '4 a4)
(bra #:display:x11:do-color)
106
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry #:display:x11:make-mutable-color nsubr)
(entry #:display:x11:make-mutable-color nsubr)
(cnbeq a4 '5 101)
(mov '#:display:x11:make-mutable-color a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(hpmovx (& 2) (cvalq #:display:x11:rgb) '0)
(hpmovx (& 1) (cvalq #:display:x11:rgb) '1)
(hpmovx (& 0) (cvalq #:display:x11:rgb) '2)
(push (@ 102))
(hpxmov (& 5) '21 a4)
(push a4)
(push (& 4))
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp x11_make_mutable_color)
102
(eval ())
(push a1)
(cabne a1 '-1 104)
(push (@ 105))
(push (& 4))
(push (& 4))
(push (& 4))
(mov '3 a4)
(jmp list)
105
(eval ())
(mov a1 a3)
(mov 'errnomorecolors a2)
(mov '#:display:x11:make-mutable-color a1)
(jcall error)
104
(push (@ 106))
(push (& 6))
(push (& 6))
(push (& 3))
(push (cvalq #:display:x11:rgb))
(mov '4 a4)
(bra #:display:x11:do-color)
106
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry #:display:x11:make-named-color subr3)
(entry #:display:x11:make-named-color subr3)
(push a3)
(push a2)
(push a1)
(hpxmov a1 '21 a1)
(push a3)
(mov (cvalq #:display:x11:rgb) a3)
(pop a2)
(jcall x11_make_named_color)
(push a1)
(cabne a1 '-1 102)
(mov (& 3) a3)
(mov '#:display:errnotacolor a2)
(mov '#:display:x11:make-named-color a1)
(jcall error)
102
(cabne (& 0) '-2 104)
(mov (& 3) a3)
(mov 'errnomorecolors a2)
(mov '#:display:x11:make-named-color a1)
(jcall error)
104
(push (@ 105))
(push (& 2))
(push (& 4))
(push (& 3))
(push (cvalq #:display:x11:rgb))
(mov '4 a4)
(bra #:display:x11:do-color)
105
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:display:x11:do-color nsubr)
(hpxmov (& 3) '17 a4)
(push a4)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(hpxmov (& 0) '6 a4)
(cabne a4 (& 4) 104)
(mov (& 0) a4)
(bra 105)
104
(mov nil a4)
105
(adjstk '1)
(mov a4 (& 0))
(bfnil a4 103)
(bra 102)
103
(mov (& 0) a1)
(adjstk '2)
(bfnil a1 101)
(hpxmov (& 0) '0 a4)
(hpmovx a4 (& 2) '1)
(hpxmov (& 0) '1 a4)
(hpmovx a4 (& 2) '2)
(hpxmov (& 0) '2 a4)
(hpmovx a4 (& 2) '3)
(hpmovx (& 1) (& 2) '6)
(mov (& 2) a1)
101
(adjstk '4)
(return)
))
(loader'((fentry #:display:x11:kill-color subr2)
(entry #:display:x11:kill-color subr2)
(hpxmov a1 '48 a4)
(cnble a4 '1 101)
(hpxmov a1 '21 a1)
(hpxmov a2 '6 a2)
(jmp x11_kill_color)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:x11:red-component subr3)
(entry #:display:x11:red-component subr3)
(push (@ 101))
(hpxmov a1 '21 a4)
(push a4)
(hpxmov a2 '6 a4)
(push a4)
(push a3)
(hpxmov a2 '2 a4)
(push a4)
(hpxmov a2 '3 a4)
(push a4)
(push '0)
(mov '6 a4)
(jmp x11_color_component)
101
(eval ())
(return)
))
(loader'((fentry #:display:x11:green-component subr3)
(entry #:display:x11:green-component subr3)
(push (@ 101))
(hpxmov a1 '21 a4)
(push a4)
(hpxmov a2 '6 a4)
(push a4)
(hpxmov a2 '1 a4)
(push a4)
(push a3)
(hpxmov a2 '3 a4)
(push a4)
(push '1)
(mov '6 a4)
(jmp x11_color_component)
101
(eval ())
(return)
))
(loader'((fentry #:display:x11:blue-component subr3)
(entry #:display:x11:blue-component subr3)
(push (@ 101))
(hpxmov a1 '21 a4)
(push a4)
(hpxmov a2 '6 a4)
(push a4)
(hpxmov a2 '1 a4)
(push a4)
(hpxmov a2 '2 a4)
(push a4)
(push a3)
(push '2)
(mov '6 a4)
(jmp x11_color_component)
101
(eval ())
(return)
))
(loader'((entry #:display:x11:compute-mask subr3)
(push a2)
(push a1)
(land a3 a1)
(land a3 a2)
(cabeq a1 a2 101)
(mov a3 a1)
(adjstk '2)
(return)
101
(lshift '1 a3)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:display:x11:compute-mask)
))
(loader'((fentry #:display:x11:name-to-rgb subr3)
(entry #:display:x11:name-to-rgb subr3)
(push a3)
(push (@ 103))
(hpxmov a1 '21 a4)
(push a4)
(push a2)
(push (cvalq #:display:x11:rgb))
(push a3)
(mov '4 a4)
(jmp x11_lookup_named_color)
103
(eval ())
(cabne a1 '0 101)
(mov (& 0) a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:get-rgb-values subr3)
(entry #:display:x11:get-rgb-values subr3)
(push a3)
(hpxmov a1 '21 a1)
(jcall x11_query_color)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader '((end)))
