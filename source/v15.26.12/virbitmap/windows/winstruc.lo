(loader '((title |winstruc.lo|)))
(defvar #:sys-package:colon '#:display:windows)
(putprop '#:display:windows '((() () () () () () () () () () () () () () () () () () () () () () () () () () () () 2 () ()) drawing-flag function-keys line-style-vector pattern-vector cursor-vector font-vector mode-vector cursors-alist args-vector default-window-type depth reread event-responses events-list top-events-list opaque-events-list transparent-events-list drag-event-p move-event-p functionkey-event-p ascii-event-p unmap-window-p map-window-p client-message-p visibility-change-p reparent-notify-p grab-window synchrone top-window-border all-font-names transient-window-p) 'defstruct)
(loader'((fentry #:display:windows:make subr0)
(entry #:display:windows:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '2)
(push nil)
(push nil)
(mov '58 a4)
(jmp vector)
101
(eval ())
(mov '#:display:windows (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:windows:name #:display:windows:name)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:package #:display:windows:package)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:package (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:device #:display:windows:device)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:device (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:xmax #:display:windows:xmax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:xmax (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:ymax #:display:windows:ymax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:ymax (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:eventmode #:display:windows:eventmode)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:eventmode (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:prologuep #:display:windows:prologuep)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:prologuep (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:keyboard-focus-window #:display:windows:keyboard-focus-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:keyboard-focus-window (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:window #:display:windows:window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:window (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:graph-env #:display:windows:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:graph-env (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:root-window #:display:windows:root-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:root-window (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:main-graph-env #:display:windows:main-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:main-graph-env (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:background #:display:windows:background)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:background (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:foreground #:display:windows:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:foreground (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:windows #:display:windows:windows)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:windows (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:bitmaps #:display:windows:bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:bitmaps (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:menus #:display:windows:menus)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:menus (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:colors #:display:windows:colors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:colors (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:font-names #:display:windows:font-names)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:font-names (struct . valeur) (ifn valeur (list 'vref struct 18) (list 'vset struct 18 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:pattern-bitmaps #:display:windows:pattern-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:pattern-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 19) (list 'vset struct 19 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:cursor-bitmaps #:display:windows:cursor-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:cursor-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 20) (list 'vset struct 20 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:extend #:display:windows:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:extend (struct . valeur) (ifn valeur (list 'vref struct 21) (list 'vset struct 21 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:graph-envs #:display:windows:graph-envs)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:graph-envs (struct . valeur) (ifn valeur (list 'vref struct 22) (list 'vset struct 22 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:current-selection #:display:windows:current-selection)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:current-selection (struct . valeur) (ifn valeur (list 'vref struct 23) (list 'vset struct 23 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:resource #:display:windows:resource)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:resource (struct . valeur) (ifn valeur (list 'vref struct 24) (list 'vset struct 24 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:named-cursors #:display:windows:named-cursors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:named-cursors (struct . valeur) (ifn valeur (list 'vref struct 25) (list 'vset struct 25 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:stipple-bitmaps #:display:windows:stipple-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:stipple-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 26) (list 'vset struct 26 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:drawing-flag #:display:windows:drawing-flag)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:drawing-flag (struct . valeur) (ifn valeur (list 'vref struct 27) (list 'vset struct 27 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:function-keys #:display:windows:function-keys)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:function-keys (struct . valeur) (ifn valeur (list 'vref struct 28) (list 'vset struct 28 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:line-style-vector #:display:windows:line-style-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:line-style-vector (struct . valeur) (ifn valeur (list 'vref struct 29) (list 'vset struct 29 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:pattern-vector #:display:windows:pattern-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:pattern-vector (struct . valeur) (ifn valeur (list 'vref struct 30) (list 'vset struct 30 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:cursor-vector #:display:windows:cursor-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:cursor-vector (struct . valeur) (ifn valeur (list 'vref struct 31) (list 'vset struct 31 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:font-vector #:display:windows:font-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:font-vector (struct . valeur) (ifn valeur (list 'vref struct 32) (list 'vset struct 32 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:mode-vector #:display:windows:mode-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:mode-vector (struct . valeur) (ifn valeur (list 'vref struct 33) (list 'vset struct 33 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:cursors-alist #:display:windows:cursors-alist)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:cursors-alist (struct . valeur) (ifn valeur (list 'vref struct 34) (list 'vset struct 34 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:args-vector #:display:windows:args-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:args-vector (struct . valeur) (ifn valeur (list 'vref struct 35) (list 'vset struct 35 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:default-window-type #:display:windows:default-window-type)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:default-window-type (struct . valeur) (ifn valeur (list 'vref struct 36) (list 'vset struct 36 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:depth #:display:windows:depth)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:depth (struct . valeur) (ifn valeur (list 'vref struct 37) (list 'vset struct 37 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:reread #:display:windows:reread)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:reread (struct . valeur) (ifn valeur (list 'vref struct 38) (list 'vset struct 38 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:event-responses #:display:windows:event-responses)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:event-responses (struct . valeur) (ifn valeur (list 'vref struct 39) (list 'vset struct 39 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:events-list #:display:windows:events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:events-list (struct . valeur) (ifn valeur (list 'vref struct 40) (list 'vset struct 40 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:top-events-list #:display:windows:top-events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:top-events-list (struct . valeur) (ifn valeur (list 'vref struct 41) (list 'vset struct 41 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:opaque-events-list #:display:windows:opaque-events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:opaque-events-list (struct . valeur) (ifn valeur (list 'vref struct 42) (list 'vset struct 42 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:transparent-events-list #:display:windows:transparent-events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:transparent-events-list (struct . valeur) (ifn valeur (list 'vref struct 43) (list 'vset struct 43 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:drag-event-p #:display:windows:drag-event-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:drag-event-p (struct . valeur) (ifn valeur (list 'vref struct 44) (list 'vset struct 44 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:move-event-p #:display:windows:move-event-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:move-event-p (struct . valeur) (ifn valeur (list 'vref struct 45) (list 'vset struct 45 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:functionkey-event-p #:display:windows:functionkey-event-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:functionkey-event-p (struct . valeur) (ifn valeur (list 'vref struct 46) (list 'vset struct 46 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:ascii-event-p #:display:windows:ascii-event-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:ascii-event-p (struct . valeur) (ifn valeur (list 'vref struct 47) (list 'vset struct 47 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:unmap-window-p #:display:windows:unmap-window-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:unmap-window-p (struct . valeur) (ifn valeur (list 'vref struct 48) (list 'vset struct 48 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:map-window-p #:display:windows:map-window-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:map-window-p (struct . valeur) (ifn valeur (list 'vref struct 49) (list 'vset struct 49 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:client-message-p #:display:windows:client-message-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:client-message-p (struct . valeur) (ifn valeur (list 'vref struct 50) (list 'vset struct 50 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:visibility-change-p #:display:windows:visibility-change-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:visibility-change-p (struct . valeur) (ifn valeur (list 'vref struct 51) (list 'vset struct 51 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:reparent-notify-p #:display:windows:reparent-notify-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:reparent-notify-p (struct . valeur) (ifn valeur (list 'vref struct 52) (list 'vset struct 52 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:grab-window #:display:windows:grab-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:grab-window (struct . valeur) (ifn valeur (list 'vref struct 53) (list 'vset struct 53 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:synchrone #:display:windows:synchrone)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:synchrone (struct . valeur) (ifn valeur (list 'vref struct 54) (list 'vset struct 54 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:top-window-border #:display:windows:top-window-border)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:top-window-border (struct . valeur) (ifn valeur (list 'vref struct 55) (list 'vset struct 55 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:all-font-names #:display:windows:all-font-names)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:all-font-names (struct . valeur) (ifn valeur (list 'vref struct 56) (list 'vset struct 56 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:display:windows:transient-window-p #:display:windows:transient-window-p)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows:transient-window-p (struct . valeur) (ifn valeur (list 'vref struct 57) (list 'vset struct 57 (car valeur))))))
(putprop '#:tclass:winwindow '((() ()) windows-window windows-graph-env) 'defstruct)
(loader'((fentry #:tclass:winwindow:make subr0)
(entry #:tclass:winwindow:make subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp vector)
101
(eval ())
(mov '#:tclass:winwindow (cdr a1))
(return)
))
(loader'((fentry #:tclass:winwindow:windows-window nsubr)
(entry #:tclass:winwindow:windows-window nsubr)
(push a4)
(push (@ 101))
(push '#:tclass:winwindow:windows-window)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:windows-window #:tclass:winwindow:windows-window)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:windows-window (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:windows-graph-env #:tclass:winwindow:windows-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:windows-graph-env (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(put-abbrev 'winwindow '#:tclass:winwindow)
'#:tclass:winwindow
(putprop '#:tclass:winwindow:opaque-window '(()) 'defstruct)
(loader'((fentry #:tclass:winwindow:opaque-window:make subr0)
(entry #:tclass:winwindow:opaque-window:make subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp vector)
101
(eval ())
(mov '#:tclass:winwindow:opaque-window (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:opaque-window:windows-window #:tclass:winwindow:opaque-window:windows-window)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:opaque-window:windows-window (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:opaque-window:windows-graph-env #:tclass:winwindow:opaque-window:windows-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:opaque-window:windows-graph-env (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(put-abbrev 'opaque-window '#:tclass:winwindow:opaque-window)
'#:tclass:winwindow:opaque-window
(putprop '#:tclass:winwindow:opaque-window:top-window '(()) 'defstruct)
(loader'((fentry #:tclass:winwindow:opaque-window:top-window:make subr0)
(entry #:tclass:winwindow:opaque-window:top-window:make subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp vector)
101
(eval ())
(mov '#:tclass:winwindow:opaque-window:top-window (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:opaque-window:top-window:windows-window #:tclass:winwindow:opaque-window:top-window:windows-window)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:opaque-window:top-window:windows-window (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:opaque-window:top-window:windows-graph-env #:tclass:winwindow:opaque-window:top-window:windows-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:opaque-window:top-window:windows-graph-env (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(put-abbrev 'top-window '#:tclass:winwindow:opaque-window:top-window)
'#:tclass:winwindow:opaque-window:top-window
(putprop '#:tclass:winwindow:transparent-window '((() () () () ()) visible view-rect offset-x offset-y top-opaque-father) 'defstruct)
(loader'((fentry #:tclass:winwindow:transparent-window:make subr0)
(entry #:tclass:winwindow:transparent-window:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '7 a4)
(jmp vector)
101
(eval ())
(mov '#:tclass:winwindow:transparent-window (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:transparent-window:windows-window #:tclass:winwindow:transparent-window:windows-window)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:transparent-window:windows-window (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:transparent-window:windows-graph-env #:tclass:winwindow:transparent-window:windows-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:transparent-window:windows-graph-env (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:transparent-window:visible #:tclass:winwindow:transparent-window:visible)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:transparent-window:visible (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:transparent-window:view-rect #:tclass:winwindow:transparent-window:view-rect)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:transparent-window:view-rect (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:transparent-window:offset-x #:tclass:winwindow:transparent-window:offset-x)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:transparent-window:offset-x (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:transparent-window:offset-y #:tclass:winwindow:transparent-window:offset-y)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:transparent-window:offset-y (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:tclass:winwindow:transparent-window:top-opaque-father #:tclass:winwindow:transparent-window:top-opaque-father)))
(if (featurep 'compiler) (progn (defmacro-open #:tclass:winwindow:transparent-window:top-opaque-father (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(put-abbrev 'transparent-window '#:tclass:winwindow:transparent-window)
'#:tclass:winwindow:transparent-window
(putprop '#:windows:bitmap '((() ()) window winbitmap) 'defstruct)
(loader'((fentry #:windows:bitmap:make subr0)
(entry #:windows:bitmap:make subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp vector)
101
(eval ())
(mov '#:windows:bitmap (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:windows:bitmap:window #:windows:bitmap:window)))
(if (featurep 'compiler) (progn (defmacro-open #:windows:bitmap:window (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:windows:bitmap:winbitmap #:windows:bitmap:winbitmap)))
(if (featurep 'compiler) (progn (defmacro-open #:windows:bitmap:winbitmap (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(putprop '#:windows:menu '((() () ()) invertedx invertedy window) 'defstruct)
(loader'((fentry #:windows:menu:make subr0)
(entry #:windows:menu:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(mov '3 a4)
(jmp vector)
101
(eval ())
(mov '#:windows:menu (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:windows:menu:invertedx #:windows:menu:invertedx)))
(if (featurep 'compiler) (progn (defmacro-open #:windows:menu:invertedx (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:windows:menu:invertedy #:windows:menu:invertedy)))
(if (featurep 'compiler) (progn (defmacro-open #:windows:menu:invertedy (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:windows:menu:window #:windows:menu:window)))
(if (featurep 'compiler) (progn (defmacro-open #:windows:menu:window (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(putprop '#:image:rectangle:window:menu-window '(()) 'defstruct)
(loader'((fentry #:image:rectangle:window:menu-window:make subr0)
(entry #:image:rectangle:window:menu-window:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '0)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '18 a4)
(jmp vector)
101
(eval ())
(mov '#:image:rectangle:window:menu-window (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:x #:image:rectangle:window:menu-window:x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:x (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:y #:image:rectangle:window:menu-window:y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:y (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:w #:image:rectangle:window:menu-window:w)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:w (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:h #:image:rectangle:window:menu-window:h)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:h (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:title #:image:rectangle:window:menu-window:title)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:title (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:hilited #:image:rectangle:window:menu-window:hilited)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:hilited (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:visible #:image:rectangle:window:menu-window:visible)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:visible (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:graph-env #:image:rectangle:window:menu-window:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:graph-env (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:extend #:image:rectangle:window:menu-window:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:extend (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:father #:image:rectangle:window:menu-window:father)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:father (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:properties #:image:rectangle:window:menu-window:properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:properties (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:cursor #:image:rectangle:window:menu-window:cursor)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:cursor (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:display #:image:rectangle:window:menu-window:display)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:display (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:subwindows #:image:rectangle:window:menu-window:subwindows)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:subwindows (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:events-list #:image:rectangle:window:menu-window:events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:events-list (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:window-type #:image:rectangle:window:menu-window:window-type)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:window-type (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:graphic-properties #:image:rectangle:window:menu-window:graphic-properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:graphic-properties (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:window:menu-window:state #:image:rectangle:window:menu-window:state)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:menu-window:state (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(loader'((fentry #:display:windows:windows-window dmsubr)
(entry #:display:windows:windows-window dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(btnil a4 101)
(push (@ 103))
(push '#:tclass:winwindow:windows-window)
(push (@ 104))
(push '#:window:extend)
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 105))
(push '#:tclass:winwindow:windows-window)
(push (@ 106))
(push '#:window:extend)
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '1)
(return)
))
(loader '((end)))
