(loader '((title |wininit.lo|)))
(defvar #:sys-package:colon '#:display:windows)
(if (not (boundp '#:display:windows:window-activate)) (progn (defvar #:display:windows:window-activate ())))
(if (not (boundp '#:display:windows:events-list)) (progn (defvar #:display:windows:events-list)))
(if (not (boundp '#:display:windows:default-application-name)) (progn (defvar #:display:windows:default-application-name "lelisp")))
(if (not (boundp '#:display:windows:default-application-class)) (progn (defvar #:display:windows:default-application-class "Lelisp")))
(if (not (boundp '#:display:windows:default-fonts)) (progn (defvar #:display:windows:default-fonts)))
(if (not (boundp '#:display:windows:font-buffer-size)) (progn (defvar #:display:windows:font-buffer-size 32700)))
(if (not (boundp '#:display:windows:font-all-height)) (progn (defvar #:display:windows:font-all-height #[5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 22 25 30 36 48])))
(if (eq (valfn '#:display:windows:at-end) 0) (progn (synonym '#:display:windows:at-end 'at-end)))
(loader'((fentry at-end nsubr)
(entry at-end nsubr)
(jcall #:llcp:nlist)
(push (@ 103))
(mov '0 a4)
(jmp current-display)
103
(eval ())
(btnil a1 102)
(push (@ 104))
(push 'prologuep)
(push (@ 105))
(mov '0 a4)
(jmp current-display)
105
(eval ())
(push a1)
(mov '2 a4)
(jmp send)
104
(eval ())
(btnil a1 102)
(push (@ 106))
(mov '0 a4)
(jmp bitepilogue)
106
(eval ())
102
(push (@ 107))
(mov '0 a4)
(jmp #:display:windows:at-end)
107
(eval ())
(return)
))
(loader'((fentry #:display:windows:bitprologue subr1)
(entry #:display:windows:bitprologue subr1)
(push a1)
(jcall #:graph-env:make)
(push nil)
(push a1)
(bfnil (cvalq #:display:windows:default-fonts) 102)
(push (@ 105))
(jcall winversion)
(push a1)
(push '3.)
(mov '2 a4)
(jmp =)
105
(eval ())
(btnil a1 103)
(mov '("Courier-10" "Terminal-10" "MS Sans Serif-10" "Courier-10") a4)
(bra 104)
103
(mov '("Courier New-10-TT" "Courier New-10-TT-Bold" "Courier New-8-TT-Bold" "Courier New-12-TT") a4)
104
(mov a4 (cvalq #:display:windows:default-fonts))
102
(mov '0 a2)
(mov '20 a1)
(jcall makevector)
(hpmovx a1 (& 2) '35)
(hpmovx 'transparent (& 2) '36)
(btnil (cvalq #:display:windows:window-activate) 107)
(hpxmov (& 2) '35 a4)
(hpmovx '1 a4 '0)
107
(hpxmov (& 2) '35 a1)
(hgsize (cvalq #:display:windows:font-all-height) a3)
(mov (cvalq #:display:windows:font-all-height) a2)
(jcall windows_bitprologue)
(mov a1 (& 1))
(cabne a1 '0 108)
(mov (& 2) a3)
(mov '"Insufficient memory" a2)
(mov '#:display:windows:bitprologue a1)
(jcall error)
(bra 109)
108
(hpmovx a1 (& 2) '21)
(hpxmov (& 2) '35 a4)
(hpxmov a4 '0 a4)
(hpmovx a4 (& 2) '3)
(hpxmov (& 2) '35 a4)
(hpxmov a4 '1 a4)
(hpmovx a4 (& 2) '4)
(hpxmov (& 2) '35 a4)
(hpxmov a4 '2 a4)
(hpmovx a4 (& 2) '37)
(mov (& 2) a1)
(call #:display:windows:init-mode)
(mov (& 2) a1)
(call #:display:windows:init-line-style)
(mov (& 2) a1)
(call #:display:windows:init-color)
(hpxmov (& 2) '13 a4)
(hpmovx a4 (& 0) '4)
(hpxmov (& 2) '12 a4)
(hpmovx a4 (& 0) '5)
(hpmovx (& 0) (& 2) '9)
(mov (& 2) a1)
(call #:display:windows:init-pattern)
(mov (& 2) a1)
(call #:display:windows:init-font)
(mov (& 2) a1)
(call #:display:windows:init-cursor)
(mov (& 2) a1)
(call #:display:windows:init-window)
(mov (& 2) a1)
(call #:display:windows:event-mask)
(mov (& 2) a1)
(call #:display:windows:initialize-event-responses)
(mov (& 2) a1)
(jcall #:display:windows:flush-event)
(hpmovx nil (& 2) '38)
(hpmovx '((36 . home) (37 . left) (38 . up) (39 . right) (40 . down) (33 . prior) (34 . next) (35 . end) (45 . insert) (46 . cancel) (112 . f1) (113 . f2) (114 . f3) (115 . f4) (116 . f5) (117 . f6) (118 . f7) (119 . f8) (120 . f9) (121 . f10) (122 . f11) (123 . f12)) (& 2) '28)
109
(mov (& 2) a1)
(adjstk '3)
(return)
))
(loader'((fentry #:display:windows:bitepilogue subr1)
(entry #:display:windows:bitepilogue subr1)
(push a1)
(hpxmov a1 '14 a4)
(push a4)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(hpxmov (& 0) '9 a4)
(bfnil a4 104)
(hpxmov (& 0) '12 a4)
(btnil a4 104)
(mov (& 0) a1)
(jcall kill-window)
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(hpmovx nil (& 0) '31)
(hpmovx nil (& 0) '34)
(hpxmov (& 0) '37 a4)
(cnble a4 '1 106)
(hpxmov (& 0) '17 a4)
(push a4)
107
(bfcons (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(hpxmov (& 0) '6 a1)
(jcall windows_kill_color)
(adjstk '1)
(bra 107)
108
(adjstk '1)
106
(hpxmov (& 0) '15 a4)
(push a4)
109
(bfcons (& 0) 110)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall #:display:windows:kill-bitmap)
(adjstk '1)
(bra 109)
110
(adjstk '1)
(push '0)
111
(push (@ 113))
(push (& 1))
(push '4)
(mov '2 a4)
(jmp >)
113
(eval ())
(bfnil a1 112)
(hpxmov (& 1) '30 a2)
(hpxmov a2 (& 0) a2)
(mov (& 1) a1)
(jcall #:display:windows:kill-bitmap)
(push (@ 114))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp |+|)
114
(eval ())
(mov a1 (& 0))
(bra 111)
112
(adjstk '1)
(hpxmov (& 0) '6 a4)
(btnil a4 116)
(hpmovx nil (& 0) '32)
116
(hpmovx nil (& 0) '30)
(hpmovx nil (& 0) '33)
(hpmovx nil (& 0) '38)
(hpmovx nil (& 0) '27)
(hpmovx nil (& 0) '28)
(hpmovx nil (& 0) '38)
(hpxmov (& 0) '21 a1)
(jcall windows_bitepilogue)
(hpmovx nil (& 0) '21)
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:bitmap-save subr1)
(entry #:display:windows:bitmap-save subr1)
(jmp #:display:windows:bitepilogue)
))
(loader'((fentry #:display:windows:bitmap-restore subr1)
(entry #:display:windows:bitmap-restore subr1)
(jmp #:display:windows:bitprologue)
))
(loader'((fentry #:display:windows:bitmap-refresh subr1)
(entry #:display:windows:bitmap-refresh subr1)
(mov 't a1)
(return)
))
(loader'((fentry #:display:windows:bitmap-flush subr1)
(entry #:display:windows:bitmap-flush subr1)
(mov 't a1)
(return)
))
(loader'((fentry #:display:windows:bitmap-sync subr1)
(entry #:display:windows:bitmap-sync subr1)
(mov 't a1)
(return)
))
(loader'((fentry #:display:windows:standard-roman-font subr1)
(entry #:display:windows:standard-roman-font subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:windows:standard-bold-font subr1)
(entry #:display:windows:standard-bold-font subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:windows:small-roman-font subr1)
(entry #:display:windows:small-roman-font subr1)
(mov '2 a1)
(return)
))
(loader'((fentry #:display:windows:large-roman-font subr1)
(entry #:display:windows:large-roman-font subr1)
(mov '3 a1)
(return)
))
(loader'((fentry #:display:windows:standard-background-pattern subr1)
(entry #:display:windows:standard-background-pattern subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:windows:standard-foreground-pattern subr1)
(entry #:display:windows:standard-foreground-pattern subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:windows:standard-medium-gray-pattern subr1)
(entry #:display:windows:standard-medium-gray-pattern subr1)
(mov '2 a1)
(return)
))
(loader'((fentry #:display:windows:standard-light-gray-pattern subr1)
(entry #:display:windows:standard-light-gray-pattern subr1)
(mov '3 a1)
(return)
))
(loader'((fentry #:display:windows:standard-dark-gray-pattern subr1)
(entry #:display:windows:standard-dark-gray-pattern subr1)
(mov '4 a1)
(return)
))
(loader'((fentry #:display:windows:standard-lelisp-cursor subr1)
(entry #:display:windows:standard-lelisp-cursor subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:windows:standard-gc-cursor subr1)
(entry #:display:windows:standard-gc-cursor subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:windows:standard-busy-cursor subr1)
(entry #:display:windows:standard-busy-cursor subr1)
(mov '1 a1)
(return)
))
(loader'((entry #:display:windows:init-color subr1)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push nil)
(push nil)
(push nil)
(push a1)
(mov '"black" (& 3))
(mov '"white" (& 2))
(jcall windows_init_table_color)
(hpmovx (& 3) (& 13) '0)
(hpmovx (& 14) (& 13) '5)
(push (@ 101))
(push (& 15))
(push (& 15))
(push '0)
(push '0)
(push '0)
(mov '5 a4)
(jmp #:display:windows:make-color)
101
(eval ())
(hpmovx (& 2) (& 12) '0)
(hpmovx (& 14) (& 12) '5)
(push (@ 102))
(push (& 15))
(push (& 14))
(push '32767)
(push '32767)
(push '32767)
(mov '5 a4)
(jmp #:display:windows:make-color)
102
(eval ())
(hpmovx '"red" (& 11) '0)
(hpmovx (& 14) (& 11) '5)
(push (@ 103))
(push (& 15))
(push (& 13))
(push '32767)
(push '0)
(push '0)
(mov '5 a4)
(jmp #:display:windows:make-color)
103
(eval ())
(hpmovx '"green" (& 10) '0)
(hpmovx (& 14) (& 10) '5)
(push (@ 104))
(push (& 15))
(push (& 12))
(push '0)
(push '32767)
(push '0)
(mov '5 a4)
(jmp #:display:windows:make-color)
104
(eval ())
(hpmovx '"blue" (& 9) '0)
(hpmovx (& 14) (& 9) '5)
(push (@ 105))
(push (& 15))
(push (& 11))
(push '0)
(push '0)
(push '32767)
(mov '5 a4)
(jmp #:display:windows:make-color)
105
(eval ())
(hpmovx '"yellow" (& 8) '0)
(hpmovx (& 14) (& 8) '5)
(push (@ 106))
(push (& 15))
(push (& 10))
(push '32767)
(push '32767)
(push '0)
(mov '5 a4)
(jmp #:display:windows:make-color)
106
(eval ())
(hpmovx '"cyan" (& 6) '0)
(hpmovx (& 14) (& 6) '5)
(push (@ 107))
(push (& 15))
(push (& 8))
(push '0)
(push '32767)
(push '32767)
(mov '5 a4)
(jmp #:display:windows:make-color)
107
(eval ())
(hpmovx '"magenta" (& 7) '0)
(hpmovx (& 14) (& 7) '5)
(push (@ 108))
(push (& 15))
(push (& 9))
(push '32767)
(push '0)
(push '32767)
(mov '5 a4)
(jmp #:display:windows:make-color)
108
(eval ())
(hpmovx '"grey" (& 5) '0)
(hpmovx (& 14) (& 5) '5)
(push (@ 109))
(push (& 15))
(push (& 7))
(push '16384)
(push '16384)
(push '16384)
(mov '5 a4)
(jmp #:display:windows:make-color)
109
(eval ())
(hpmovx '"lightgrey" (& 4) '0)
(hpmovx (& 14) (& 4) '5)
(push (@ 110))
(push (& 15))
(push (& 6))
(push '24576)
(push '24576)
(push '24576)
(mov '5 a4)
(jmp #:display:windows:make-color)
110
(eval ())
(hpmovx '"wheat" (& 0) '0)
(hpmovx (& 14) (& 0) '5)
(push (@ 111))
(push (& 15))
(push (& 2))
(push '32767)
(push '32767)
(push '26112)
(mov '5 a4)
(jmp #:display:windows:make-color)
111
(eval ())
(hpmovx (& 13) (& 14) '13)
(hpmovx (& 12) (& 14) '12)
(push (@ 112))
(push (& 14))
(push (& 14))
(push (& 14))
(push (& 14))
(push (& 14))
(push (& 14))
(push (& 13))
(push (& 15))
(push (& 14))
(push (& 14))
(push (& 11))
(mov '11 a4)
(jmp list)
112
(eval ())
(hpmovx a1 (& 14) '17)
(adjstk '15)
(return)
))
(loader'((entry #:display:windows:init-mode subr1)
(hpmovx '#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] a1 '33)
(mov '#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] a1)
(return)
))
(loader'((entry #:display:windows:init-line-style subr1)
(hpxmov a1 '29 a4)
(bfnil a4 101)
(push a1)
(push (@ 103))
(push '#[0 0])
(push '#[1 0])
(push '#[1 2])
(push '#[1 1])
(push '#[2 0])
(push '#[2 0])
(push '#[1 3])
(push '#[3 0])
(push '#[3 0])
(push '#[1 4])
(mov '10 a4)
(jmp vector)
103
(eval ())
(pop a4)
(hpmovx a1 a4 '29)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:windows:display-depth subr1)
(entry #:display:windows:display-depth subr1)
(hpxmov a1 '37 a1)
(return)
))
(loader'((fentry #:display:windows:synchronize nsubr)
(entry #:display:windows:synchronize nsubr)
(cnbge a4 '1 101)
(mov '#:display:windows:synchronize a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(bfnil a1 102)
(hpxmov (& 0) '54 a1)
(adjstk '1)
(return)
102
(hpmovx (car a1) (& 0) '54)
(mov (car a1) a1)
(adjstk '1)
(return)
))
(loader'((entry #:display:windows:init-window subr1)
(push a1)
(jcall #:image:rectangle:window:make)
(push a1)
(jcall #:tclass:winwindow:make)
(push nil)
(hpmovx '0 (& 1) '0)
(hpmovx '0 (& 1) '1)
(hpxmov (& 2) '3 a4)
(hpmovx a4 (& 1) '2)
(hpxmov (& 2) '4 a4)
(hpmovx a4 (& 1) '3)
(hpmovx '"root-window" (& 1) '4)
(hpmovx '0 (& 1) '5)
(hpmovx '1 (& 1) '6)
(hpmovx (& 2) (& 1) '12)
(hpmovx a1 (& 1) '8)
(hpmovx 'opaque (& 1) '15)
(hpmovx 'map (& 1) '17)
(hpxmov (& 1) '8 a4)
(push a4)
(mov (& 2) a1)
(jcall windows_root_window)
(pop a4)
(hpmovx a1 a4 '0)
(hpmovx (& 1) (& 2) '10)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall #:display:windows:windows-create-graph-env)
(hpxmov (& 1) '7 a4)
(mov a4 (& 0))
(hpmovx a4 (& 2) '11)
(hpxmov (& 2) '13 a3)
(hpmovx a3 a4 '4)
(hpxmov (& 2) '12 a3)
(hpmovx a3 a4 '5)
(hpmovx nil (& 2) '8)
(push (@ 101))
(push (& 2))
(mov '1 a4)
(jmp list)
101
(eval ())
(hpmovx a1 (& 2) '14)
(hpxmov (& 2) '11 a4)
(hpmovx a4 (& 2) '9)
(mov a4 a1)
(adjstk '3)
(return)
))
(loader'((entry #:display:windows:initialize-event-responses subr1)
(push a1)
(mov '#:display:windows:default-event-code a2)
(mov '37 a1)
(jcall makevector)
(hpmovx '#:display:windows:ascii-event-code a1 '0)
(hpmovx '#:display:windows:move-event-code a1 '1)
(hpmovx '#:display:windows:drag-event-code a1 '2)
(hpmovx '#:display:windows:down-event-code a1 '3)
(hpmovx '#:display:windows:up-event-code a1 '4)
(hpmovx '#:display:windows:repaint-window-event-code a1 '5)
(hpmovx '#:display:windows:modify-window-event-code a1 '6)
(hpmovx '#:display:windows:kill-window-event-code a1 '7)
(hpmovx '#:display:windows:enterwindow-event-code a1 '8)
(hpmovx '#:display:windows:leavewindow-event-code a1 '9)
(hpmovx '#:display:windows:keyboard-focus-event-code a1 '10)
(hpmovx '#:display:windows:map-window-code a1 '11)
(hpmovx '#:display:windows:unmap-window-code a1 '12)
(hpmovx '#:display:windows:functionkey-event-code a1 '13)
(hpmovx '#:display:windows:doubleclick-event-code a1 '14)
(hpmovx '#:display:windows:visibility-change-code a1 '15)
(hpmovx '#:display:windows:command-event-code a1 '16)
(hpmovx a1 (& 0) '39)
(adjstk '1)
(return)
))
(loader'((entry #:display:windows:init-font subr1)
(push a1)
(mov '32 a2)
(mov (cvalq #:display:windows:font-buffer-size) a1)
(jcall makestring)
(push a1)
(mov (cvalq #:display:windows:font-buffer-size) a2)
(jcall windows_get_fonts)
(push a1)
(push '0)
(push '0)
(push nil)
(push '0)
(jcall numberp)
(bfnil a1 103)
(mov (& 4) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
103
(push (@ 105))
(push (& 1))
(push (& 6))
(mov '2 a4)
(jmp >)
105
(eval ())
(bfnil a1 104)
(push (@ 106))
(push '46)
(push (& 7))
(push (& 6))
(mov '3 a4)
(jmp chrpos)
106
(eval ())
(mov a1 (& 2))
(btnil a1 108)
(push (@ 111))
(push a1)
(mov (& 5) a4)
(plus '1 a4)
(push a4)
(mov '2 a4)
(jmp >)
111
(eval ())
(btnil a1 110)
(push (@ 112))
(push (& 6))
(push (& 5))
(mov (& 5) a4)
(diff (& 6) a4)
(push a4)
(mov '3 a4)
(jmp substring)
112
(eval ())
(mov (& 1) a3)
(mov (& 0) a2)
(jcall acons)
(mov a1 (& 1))
110
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 3))
108
(push (@ 113))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp |+|)
113
(eval ())
(mov a1 (& 0))
(bra 103)
104
(adjstk '1)
(hpmovx '#[] (& 5) '32)
(mov (& 0) a1)
(jcall reverse)
(hpmovx a1 (& 5) '56)
(mov (cvalq #:display:windows:default-fonts) a2)
(mov (car a2) a2)
(mov (& 5) a1)
(call #:display:windows:add-a-font)
(mov (cvalq #:display:windows:default-fonts) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (& 5) a1)
(call #:display:windows:add-a-font)
(mov (cvalq #:display:windows:default-fonts) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (& 5) a1)
(call #:display:windows:add-a-font)
(mov (cvalq #:display:windows:default-fonts) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (& 5) a1)
(adjstk '6)
(bra #:display:windows:add-a-font)
))
(loader'((entry #:display:windows:add-a-font subr2)
(push a2)
(push a1)
(push a2)
(hpxmov a1 '56 a2)
(pop a1)
(jcall cassoc)
(push nil)
(btnil a1 101)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 14) a2)
(mov (& 13) a1)
(jcall #:display:windows:load-font)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov a1 (& 0))
(btnil a1 104)
(hpxmov (& 1) '18 a3)
(mov (car a1) a2)
(mov (& 2) a1)
(jcall acons)
(hpmovx a1 (& 1) '18)
(adjstk '3)
(return)
104
(mov nil a1)
(adjstk '3)
(return)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:display:windows:init-cursor subr1)
(push a1)
(push '0)
(push '1)
101
(hpxmov (cvalq #:display:cursor-names) (& 1) a2)
(mov '"left-ptr" a1)
(jcall eqstring)
(bfnil a1 103)
(cabeq (& 1) (cvalq #:display:cursor-names-length) 103)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 101)
103
(hpxmov (cvalq #:display:cursor-names) (& 0) a2)
(mov '"watch" a1)
(jcall eqstring)
(bfnil a1 104)
(cabeq (& 0) (cvalq #:display:cursor-names-length) 104)
(mov (& 0) a4)
(plus '1 a4)
(mov a4 (& 0))
(bra 103)
104
(mov nil a3)
(mov '1 a2)
(mov (& 0) a1)
(jcall acons)
(mov a1 a3)
(mov '0 a2)
(mov (& 1) a1)
(jcall acons)
(hpmovx a1 (& 2) '34)
(push (@ 105))
(mov '"left-ptr" a1)
(jcall windows_named_cursor)
(push a1)
(mov '"watch" a1)
(jcall windows_named_cursor)
(push a1)
(mov '2 a4)
(jmp vector)
105
(eval ())
(hpmovx a1 (& 2) '31)
(adjstk '3)
(return)
))
(loader'((entry #:display:windows:init-pattern subr1)
(push a1)
(hpmovx '#[] a1 '30)
(push (@ 101))
(push a1)
(push '16)
(push '16)
(push '#[#*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000])
(mov '4 a4)
(bra #:display:windows:add-a-pattern)
101
(eval ())
(push (@ 102))
(push (& 1))
(push '16)
(push '16)
(push '#[#*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF])
(mov '4 a4)
(bra #:display:windows:add-a-pattern)
102
(eval ())
(push (@ 103))
(push (& 1))
(push '16)
(push '16)
(push '#[#*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555])
(mov '4 a4)
(bra #:display:windows:add-a-pattern)
103
(eval ())
(push (@ 104))
(push (& 1))
(push '16)
(push '16)
(push '#[#*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222])
(mov '4 a4)
(bra #:display:windows:add-a-pattern)
104
(eval ())
(push (@ 105))
(push (& 1))
(push '16)
(push '16)
(push '#[#*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD])
(mov '4 a4)
(bra #:display:windows:add-a-pattern)
105
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:display:windows:add-a-pattern nsubr)
(jcall #:bitmap:make)
(push a1)
(hpmovx (& 3) a1 '0)
(hpmovx (& 2) a1 '1)
(hpmovx (& 4) a1 '3)
(mov a1 a2)
(mov (& 4) a1)
(jcall #:display:windows:create-bitmap)
(push (@ 101))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp #:bitmap:bits)
101
(eval ())
(mov (& 0) a2)
(mov (& 4) a1)
(adjstk '5)
(jmp #:display:windows:make-pattern)
))
(loader'((entry #:display:windows:event-mask subr1)
(push a1)
(push (cvalq #:display:windows:events-list))
(bfnil (& 0) 101)
(push (@ 103))
(push 'ascii-event)
(push 'down-event)
(push 'doubleclick-event)
(push 'up-event)
(push 'drag-event)
(push 'functionkey-event)
(push 'enterwindow-event)
(push 'leavewindow-event)
(push 'command-event)
(mov '9 a4)
(jmp list)
103
(eval ())
(mov a1 (& 0))
(bra 102)
101
(mov (& 0) a2)
(mov 'move-event a1)
(jcall memq)
(btnil a1 102)
(mov (& 0) a2)
(mov 'drag-event a1)
(jcall memq)
(bfnil a1 102)
(push 'drag-event)
(push (@ 106))
(push (& 2))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
106
(eval ())
(adjstk '1)
(mov a1 (& 0))
(mov a1 (& 0))
102
(mov (& 0) a2)
(mov 'ascii-event a1)
(jcall memq)
(btnil a1 108)
(hpmovx 't (& 1) '47)
108
(mov (& 0) a2)
(mov 'functionkey-event a1)
(jcall memq)
(btnil a1 110)
(hpmovx 't (& 1) '46)
110
(mov (& 0) a2)
(mov 'move-event a1)
(jcall memq)
(btnil a1 112)
(hpmovx 't (& 1) '45)
112
(mov (& 0) a2)
(mov 'drag-event a1)
(jcall memq)
(btnil a1 114)
(hpmovx 't (& 1) '44)
114
(hpmovx 't (& 1) '49)
(hpmovx 't (& 1) '48)
(hpmovx 't (& 1) '52)
(hpmovx 't (& 1) '51)
(mov (& 0) a2)
(mov 'client-message a1)
(jcall memq)
(btnil a1 116)
(hpmovx 't (& 1) '50)
116
(hpmovx (& 0) (& 1) '40)
(mov 'repaint-event a2)
(mov (& 0) a1)
(jcall append1)
(hpmovx a1 (& 1) '42)
(push (@ 117))
(push (& 1))
(push '(repaint-event modify-window-event))
(mov '2 a4)
(jmp append)
117
(eval ())
(hpmovx a1 (& 1) '41)
(hpmovx (& 0) (& 1) '43)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader '((end)))
