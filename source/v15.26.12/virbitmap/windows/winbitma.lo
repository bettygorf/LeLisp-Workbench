(loader '((title |winbitma.lo|)))
(defvar #:sys-package:colon '#:display:windows)
(loader'((fentry #:display:windows:create-bitmap subr2)
(entry #:display:windows:create-bitmap subr2)
(push a2)
(hpxmov a1 '21 a4)
(hpxmov a1 '9 a3)
(push a2)
(jcall #:windows:bitmap:make)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 0) '2 a4)
(push a4)
(hpxmov (& 1) '0 a1)
(hpxmov (& 1) '1 a2)
(jcall windows_create_bitmap)
(pop a4)
(hpmovx a1 a4 '1)
(cabne '0 a1 102)
(mov (& 0) a3)
(mov '"Insufficient Memory" a2)
(mov '#:display:windows:create-bitmap a1)
(jcall error)
102
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:kill-bitmap subr2)
(entry #:display:windows:kill-bitmap subr2)
(push a2)
(hpxmov a2 '2 a4)
(hpxmov a4 '0 a4)
(bfnil a4 102)
(hpxmov a2 '2 a4)
(hpxmov a4 '1 a4)
(btnil a4 102)
(hpxmov a2 '2 a1)
(hpxmov a1 '1 a1)
(jcall windows_kill_bitmap)
102
(hpxmov (& 0) '2 a4)
(hpmovx nil a4 '0)
(hpxmov (& 0) '2 a4)
(hpmovx nil a4 '1)
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:get-bit-line nsubr)
(entry #:display:windows:get-bit-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:windows:get-bit-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(push '0)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '4 a3)
(mov (& 0) a2)
(plus a3 a2)
(mov a2 (& 0))
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 2) a1)
(plus a3 a1)
(mov a1 (& 2))
103
(push (@ 104))
(hpxmov (& 4) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 2))
(push (& 5))
(push (& 5))
(hpxmov (& 8) '0 a3)
(push a3)
(hpxmov (& 10) '9 a3)
(hpxmov a3 '5 a3)
(hpxmov a3 '6 a3)
(push a3)
(btnil a4 105)
(mov '0 a3)
(bra 106)
105
(mov '1 a3)
106
(push a3)
(mov '7 a4)
(jmp windows_get_bit_line)
104
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:windows:set-bit-line nsubr)
(entry #:display:windows:set-bit-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:windows:set-bit-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(hpxmov (& 3) '9 a3)
(push '0)
(push a4)
(btnil a4 103)
(hpxmov a4 '15 a2)
(cabne a2 'transparent 103)
(hpxmov a4 '8 a2)
(hpxmov a2 '4 a2)
(mov (& 1) a1)
(plus a2 a1)
(mov a1 (& 1))
(hpxmov a4 '8 a2)
(hpxmov a2 '5 a2)
(mov (& 3) a4)
(plus a2 a4)
(mov a4 (& 3))
103
(push (@ 104))
(hpxmov (& 5) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(push (& 3))
(push (& 6))
(push (& 6))
(hpxmov (& 9) '0 a4)
(push a4)
(hpxmov a3 '5 a4)
(hpxmov a4 '6 a4)
(push a4)
(hpxmov a3 '4 a4)
(hpxmov a4 '6 a4)
(push a4)
(btnil (& 8) 105)
(mov '0 a4)
(bra 106)
105
(mov '1 a4)
106
(push a4)
(mov '8 a4)
(jmp windows_set_bit_line)
104
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry #:display:windows:bmref nsubr)
(entry #:display:windows:bmref nsubr)
(cnbeq a4 '4 101)
(mov '#:display:windows:bmref a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '4 a3)
(mov (& 1) a2)
(plus a3 a2)
(mov a2 (& 1))
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 0) a1)
(plus a3 a1)
(mov a1 (& 0))
103
(push (@ 104))
(hpxmov (& 3) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 3))
(push (& 3))
(hpxmov (& 7) '9 a3)
(hpxmov a3 '5 a3)
(hpxmov a3 '6 a3)
(push a3)
(btnil a4 105)
(mov '0 a3)
(bra 106)
105
(mov '1 a3)
106
(push a3)
(mov '5 a4)
(jmp windows_bmref)
104
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:windows:bmset nsubr)
(entry #:display:windows:bmset nsubr)
(cnbeq a4 '5 101)
(mov '#:display:windows:bmset a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) '2 a4)
(hpxmov a4 '0 a4)
(hpxmov (& 4) '9 a3)
(push a4)
(btnil a4 103)
(hpxmov a4 '15 a2)
(cabne a2 'transparent 103)
(hpxmov a4 '8 a2)
(hpxmov a2 '4 a2)
(mov (& 3) a1)
(plus a2 a1)
(mov a1 (& 3))
(hpxmov a4 '8 a2)
(hpxmov a2 '5 a2)
(mov (& 2) a4)
(plus a2 a4)
(mov a4 (& 2))
103
(push (@ 104))
(hpxmov (& 5) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(push (& 5))
(push (& 5))
(push (& 5))
(hpxmov a3 '5 a4)
(hpxmov a4 '6 a4)
(push a4)
(hpxmov a3 '4 a4)
(hpxmov a4 '6 a4)
(push a4)
(btnil (& 7) 105)
(mov '0 a4)
(bra 106)
105
(mov '1 a4)
106
(push a4)
(mov '7 a4)
(jmp windows_bmset)
104
(eval ())
(mov (& 1) a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:windows:get-byte-line nsubr)
(entry #:display:windows:get-byte-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:windows:get-byte-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(push '0)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '4 a3)
(mov (& 0) a2)
(plus a3 a2)
(mov a2 (& 0))
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 2) a1)
(plus a3 a1)
(mov a1 (& 2))
103
(push (@ 104))
(hpxmov (& 4) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 2))
(push (& 5))
(push (& 5))
(hpxmov (& 8) '0 a3)
(push a3)
(hpxmov (& 9) '1 a3)
(push a3)
(btnil a4 105)
(mov '0 a3)
(bra 106)
105
(mov '1 a3)
106
(push a3)
(mov '7 a4)
(jmp windows_get_byte_line)
104
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:windows:set-byte-line nsubr)
(entry #:display:windows:set-byte-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:windows:set-byte-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(push '0)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '4 a3)
(mov (& 0) a2)
(plus a3 a2)
(mov a2 (& 0))
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 2) a1)
(plus a3 a1)
(mov a1 (& 2))
103
(push (@ 104))
(hpxmov (& 4) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 2))
(push (& 5))
(push (& 5))
(hpxmov (& 8) '0 a3)
(push a3)
(btnil a4 105)
(mov '0 a3)
(bra 106)
105
(mov '1 a3)
106
(push a3)
(mov '6 a4)
(jmp windows_set_byte_line)
104
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:windows:byteref nsubr)
(entry #:display:windows:byteref nsubr)
(cnbeq a4 '4 101)
(mov '#:display:windows:byteref a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '4 a3)
(mov (& 1) a2)
(plus a3 a2)
(mov a2 (& 1))
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 0) a1)
(plus a3 a1)
(mov a1 (& 0))
103
(push (@ 104))
(hpxmov (& 3) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 3))
(push (& 3))
(btnil a4 105)
(mov '0 a3)
(bra 106)
105
(mov '1 a3)
106
(push a3)
(mov '4 a4)
(jmp windows_byteref)
104
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:windows:byteset nsubr)
(entry #:display:windows:byteset nsubr)
(cnbeq a4 '5 101)
(mov '#:display:windows:byteset a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '4 a3)
(mov (& 2) a2)
(plus a3 a2)
(mov a2 (& 2))
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 1) a1)
(plus a3 a1)
(mov a1 (& 1))
103
(push (@ 104))
(hpxmov (& 4) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 4))
(push (& 4))
(push (& 4))
(btnil a4 105)
(mov '0 a3)
(bra 106)
105
(mov '1 a3)
106
(push a3)
(mov '5 a4)
(jmp windows_byteset)
104
(eval ())
(mov (& 0) a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:windows:bitblit nsubr)
(entry #:display:windows:bitblit nsubr)
(cnbeq a4 '9 101)
(mov '#:display:windows:bitblit a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 7) '2 a4)
(hpxmov a4 '0 a4)
(push a4)
(hpxmov (& 7) '2 a3)
(hpxmov a3 '0 a3)
(push a3)
(hpxmov (& 10) '8 a2)
(push a2)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push a3)
(cnbge (& 16) '0 103)
(mov (& 14) a1)
(diff (& 16) a1)
(mov a1 (& 14))
(mov (& 12) a1)
(plus (& 16) a1)
(mov a1 (& 12))
(mov '0 (& 16))
103
(cnbge (& 15) '0 105)
(mov (& 13) a1)
(diff (& 15) a1)
(mov a1 (& 13))
(mov (& 11) a1)
(plus (& 15) a1)
(mov a1 (& 11))
(mov '0 (& 15))
105
(cnbge (& 14) '0 107)
(mov (& 16) a1)
(diff (& 14) a1)
(mov a1 (& 16))
(mov (& 12) a1)
(plus (& 14) a1)
(mov a1 (& 12))
(mov '0 (& 14))
107
(cnbge (& 13) '0 109)
(mov (& 15) a1)
(diff (& 13) a1)
(mov a1 (& 15))
(mov (& 11) a1)
(plus (& 13) a1)
(mov a1 (& 11))
(mov '0 (& 13))
109
(mov (& 14) a1)
(plus (& 12) a1)
(hpxmov (& 17) '0 a4)
(cnble a1 a4 111)
(hpxmov (& 17) '0 a4)
(diff (& 14) a4)
(mov a4 (& 12))
111
(mov (& 13) a4)
(plus (& 11) a4)
(hpxmov (& 17) '1 a1)
(cnble a4 a1 113)
(hpxmov (& 17) '1 a4)
(diff (& 13) a4)
(mov a4 (& 11))
113
(btnil (& 10) 114)
(hpxmov (& 10) '15 a4)
(cabne a4 'transparent 114)
(hpxmov (& 10) '8 a4)
(hpxmov a4 '4 a4)
(mov (& 16) a1)
(plus a4 a1)
(mov a1 (& 7))
(hpxmov (& 10) '8 a4)
(hpxmov a4 '5 a4)
(mov (& 15) a3)
(plus a4 a3)
(mov a3 (& 6))
(bra 115)
114
(mov (& 16) (& 7))
(mov (& 15) (& 6))
115
(btnil (& 9) 117)
(hpxmov (& 9) '15 a4)
(cabne a4 'transparent 117)
(hpxmov (& 9) '8 a4)
(hpxmov a4 '4 a4)
(mov (& 14) a3)
(plus a4 a3)
(mov a3 (& 14))
(hpxmov (& 9) '8 a4)
(hpxmov a4 '5 a4)
(mov (& 13) a1)
(plus a4 a1)
(mov a1 (& 13))
117
(mov (& 12) (& 5))
(mov (& 11) (& 4))
(btnil (& 9) 119)
120
(push (@ 122))
(push 'father)
(push (& 2))
(mov '2 a4)
(jmp send)
122
(eval ())
(btnil a1 121)
(push (@ 123))
(push 'father)
(push (& 2))
(mov '2 a4)
(jmp send)
123
(eval ())
(mov a1 (& 0))
(bra 120)
121
(push (@ 126))
(push (& 15))
(push (& 14))
(push (@ 127))
(push 'x)
(push (& 5))
(mov '2 a4)
(jmp send)
127
(eval ())
(push a1)
(mov '3 a4)
(jmp |+|)
126
(eval ())
(hpxmov (& 19) '3 a4)
(cnble a1 a4 125)
(mov 't (& 2))
(hpxmov (& 19) '3 a4)
(diff (& 14) a4)
(push a4)
(push (@ 128))
(push 'x)
(push (& 3))
(mov '2 a4)
(jmp send)
128
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 12))
125
(push (@ 131))
(push (& 14))
(push (& 13))
(push (@ 132))
(push 'y)
(push (& 5))
(mov '2 a4)
(jmp send)
132
(eval ())
(push a1)
(mov '3 a4)
(jmp |+|)
131
(eval ())
(hpxmov (& 19) '4 a4)
(cnble a1 a4 130)
(mov 't (& 2))
(hpxmov (& 19) '4 a4)
(diff (& 13) a4)
(push a4)
(push (@ 133))
(push 'y)
(push (& 3))
(mov '2 a4)
(jmp send)
133
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 11))
130
(push (@ 136))
(push 'x)
(push (& 2))
(mov '2 a4)
(jmp send)
136
(eval ())
(mov (& 14) a4)
(plus a1 a4)
(cnbge a4 '0 135)
(mov 't (& 1))
(push (@ 137))
(push 'x)
(push (& 2))
(mov '2 a4)
(jmp send)
137
(eval ())
(jcall abs)
(push a1)
(mov (& 15) a1)
(jcall abs)
(pop a4)
(diff a1 a4)
(mov (& 12) a3)
(diff a4 a3)
(mov a3 (& 5))
135
(push (@ 140))
(push 'y)
(push (& 2))
(mov '2 a4)
(jmp send)
140
(eval ())
(mov (& 13) a4)
(plus a1 a4)
(cnbge a4 '0 119)
(mov 't (& 1))
(push (@ 141))
(push 'y)
(push (& 2))
(mov '2 a4)
(jmp send)
141
(eval ())
(jcall abs)
(push a1)
(mov (& 14) a1)
(jcall abs)
(pop a4)
(diff a1 a4)
(mov (& 11) a3)
(diff a4 a3)
(mov a3 (& 4))
119
(btnil (& 10) 143)
(mov (& 10) a2)
(mov (& 19) a1)
(jcall #:display:windows:current-window)
143
(cnble (& 12) '0 145)
(cnble (& 11) '0 145)
(push (@ 146))
(hpxmov (& 19) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(hpxmov (& 19) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(push (& 10))
(push (& 10))
(push (& 19))
(push (& 19))
(push (& 19))
(push (& 19))
(btnil (& 19) 147)
(hpxmov (& 19) '8 a4)
(hpxmov a4 '1 a4)
(bra 148)
147
(hpxmov (& 28) '11 a4)
(hpxmov a4 '12 a4)
(hpxmov a4 '1 a4)
148
(push a4)
(btnil (& 20) 149)
(mov '0 a4)
(bra 150)
149
(mov '1 a4)
150
(push a4)
(btnil (& 20) 151)
(mov '0 a4)
(bra 152)
151
(mov '1 a4)
152
(push a4)
(mov '11 a4)
(jmp windows_bitblit)
146
(eval ())
(mov a1 (& 3))
(btnil (& 9) 145)
(btnil (& 10) 145)
(cabne a1 '2 157)
(bfnil (& 2) 157)
(btnil (& 1) 145)
157
(btnil (& 2) 159)
(cnble (& 5) (& 12) 161)
(push (@ 162))
(push (& 11))
(mov (& 18) a4)
(plus (& 14) a4)
(push a4)
(push (& 18))
(mov (& 9) a4)
(diff (& 16) a4)
(push a4)
(mov (& 20) a4)
(plus (& 9) a4)
(push a4)
(mov '5 a4)
(jmp window-clear-region)
162
(eval ())
161
(cnble (& 4) (& 11) 159)
(push (@ 165))
(push (& 11))
(push (& 18))
(mov (& 18) a4)
(plus (& 14) a4)
(push a4)
(mov (& 20) a4)
(plus (& 9) a4)
(push a4)
(mov (& 9) a4)
(diff (& 16) a4)
(push a4)
(mov '5 a4)
(jmp window-clear-region)
165
(eval ())
159
(btnil (& 1) 167)
(cnbge (& 5) (& 12) 169)
(push (@ 170))
(push (& 11))
(push (& 18))
(push (& 18))
(push (& 9))
(push (& 16))
(mov '5 a4)
(jmp window-clear-region)
170
(eval ())
169
(cnbge (& 4) (& 11) 167)
(push (@ 173))
(push (& 11))
(push (& 18))
(push (& 18))
(push (& 16))
(push (& 9))
(mov '5 a4)
(jmp window-clear-region)
173
(eval ())
167
(jcall #:event:make)
(push nil)
(push a1)
(hpxmov (& 12) '15 a4)
(cabne a4 'transparent 174)
(hpxmov (& 12) '8 a4)
(hpxmov a4 '6 a4)
(hpmovx a4 a1 '1)
(hpxmov (& 12) '8 a4)
(hpxmov a4 '4 a4)
(mov (& 18) a3)
(plus a4 a3)
(hpmovx a3 a1 '5)
(hpxmov (& 12) '8 a4)
(hpxmov a4 '5 a4)
(mov (& 17) a3)
(plus a4 a3)
(hpmovx a3 a1 '6)
(bra 175)
174
(hpmovx (& 12) a1 '1)
(hpmovx (& 18) a1 '5)
(hpmovx (& 17) a1 '6)
175
(hpmovx 'repaint-window-event a1 '0)
(hpmovx (& 7) a1 '7)
(hpmovx (& 6) a1 '8)
(hpxmov (& 21) '38 a1)
(jcall last)
(mov (car a1) (& 1))
(btnil (car a1) 178)
(hpxmov (& 0) '1 a4)
(hpxmov (& 1) '1 a3)
(cabeq a4 a3 177)
178
(hpxmov (& 21) '38 a1)
(mov (& 0) a2)
(jcall nconc1)
(hpmovx a1 (& 21) '38)
177
(adjstk '2)
145
(btnil (& 10) 179)
(mov (& 8) a2)
(mov (& 19) a1)
(adjstk '20)
(jmp #:display:windows:current-window)
179
(mov nil a1)
(adjstk '20)
(return)
))
(loader'((fentry #:display:windows:create-window-bitmap subr3)
(entry #:display:windows:create-window-bitmap subr3)
(push a3)
(push a2)
(push a3)
(jcall #:windows:bitmap:make)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 1) '2 a4)
(hpmovx (& 0) a4 '0)
(hpxmov (& 1) '2 a4)
(hpxmov (& 0) '15 a3)
(cabne a3 'transparent 101)
(hpxmov (& 0) '8 a3)
(hpxmov a3 '6 a3)
(bra 102)
101
(mov (& 0) a3)
102
(hpxmov a3 '8 a3)
(hpxmov a3 '1 a3)
(hpmovx a3 a4 '1)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:windows:subst-colors subr3)
(entry #:display:windows:subst-colors subr3)
(push a3)
(push a2)
(mov a3 a1)
(jcall length)
(push a1)
(mov nil a2)
(jcall makevector)
(push a1)
(mov nil a2)
(mov (& 1) a1)
(jcall makevector)
(push a1)
(push '0)
(push (& 5))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(hpmovx (& 0) (& 4) (& 2))
(hpmovx a4 (& 3) (& 2))
(mov (& 2) a3)
(plus '1 a3)
(mov a3 (& 2))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(push (@ 103))
(hpxmov (& 5) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(push (& 4))
(push (& 4))
(push (& 7))
(hpxmov (& 9) '0 a4)
(push a4)
(hpxmov (& 10) '1 a4)
(push a4)
(hpxmov (& 11) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 104)
(mov '0 a4)
(bra 105)
104
(mov '1 a4)
105
(push a4)
(mov '7 a4)
(jmp windows_subst_colors)
103
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry #:display:windows:create-stipple subr3)
(entry #:display:windows:create-stipple subr3)
(push a3)
(push a2)
(push a2)
(jcall #:windows:bitmap:make)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 0) '2 a4)
(push a4)
(hpxmov (& 1) '0 a1)
(hpxmov (& 1) '1 a2)
(mov (& 2) a3)
(jcall windows_create_stipple)
(pop a4)
(hpmovx a1 a4 '1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:windows:kill-stipple subr2)
(entry #:display:windows:kill-stipple subr2)
(hpxmov a2 '2 a1)
(hpxmov a1 '1 a1)
(jmp windows_kill_bitmap)
))
(loader '((end)))
