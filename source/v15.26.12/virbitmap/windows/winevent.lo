(loader '((title |winevent.lo|)))
(defvar #:sys-package:colon '#:display:windows)
(loader'((fentry #:display:windows:event-mode subr2)
(entry #:display:windows:event-mode subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:windows:flush-event subr1)
(entry #:display:windows:flush-event subr1)
(hpmovx nil a1 '38)
(jcall windows_flush_event)
(mov 't a1)
(return)
))
(loader'((fentry #:display:windows:eventp subr1)
(entry #:display:windows:eventp subr1)
(hpxmov a1 '38 a1)
(bfnil a1 29999)
(push (@ 102))
(jcall windows_eventp)
(push a1)
(push '0)
(mov '2 a4)
(jmp >)
102
(eval ())
(return)
29999
(return)
))
(loader'((fentry #:display:windows:read-event subr2)
(entry #:display:windows:read-event subr2)
(push a2)
(push a1)
(hpxmov a1 '38 a4)
(btnil a4 101)
(hpxmov a1 '38 a4)
(push (car a4))
(hpxmov a1 '38 a4)
(hpmovx (cdr a4) a1 '38)
(push (@ 103))
(push a2)
(push '0)
(push (& 3))
(push '0)
(mov '4 a4)
(jmp bltvector)
103
(eval ())
(adjstk '1)
(bra 102)
101
(push (@ 104))
(push a2)
(push '0)
(push nil)
(mov '3 a4)
(jmp fillvector)
104
(eval ())
(mov (& 1) a1)
(jcall windows_read_event)
(jcall windowp)
(hpmovx a1 (& 1) '1)
(mov 't a3)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall #:display:windows:parse-event)
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:windows:peek-event subr2)
(entry #:display:windows:peek-event subr2)
(push a2)
(push a1)
(hpxmov a1 '38 a4)
(btnil a4 101)
(push (@ 103))
(push a2)
(push '0)
(hpxmov a1 '38 a4)
(push (car a4))
(push '0)
(mov '4 a4)
(jmp bltvector)
103
(eval ())
(bra 102)
101
(push (@ 104))
(push a2)
(push '0)
(push nil)
(mov '3 a4)
(jmp fillvector)
104
(eval ())
(mov (& 1) a1)
(jcall windows_peek_event)
(jcall windowp)
(hpmovx a1 (& 1) '1)
(mov 't a3)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall #:display:windows:parse-event)
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:windows:event-grab subr2)
(push a2)
(hpxmov a1 '53 a4)
(hpxmov a2 '1 a3)
(push a4)
(btnil a4 101)
(mov a3 a2)
(mov a4 a1)
(jcall equal)
(bfnil a1 101)
(hpmovx (& 0) (& 1) '1)
(hpxmov (& 0) '2 a4)
(hpmovx a4 (& 1) '7)
(hpxmov (& 0) '3 a4)
(hpmovx a4 (& 1) '8)
(push '0)
(push '0)
103
(btnil (& 2) 104)
(hpxmov (& 2) '0 a4)
(mov a4 (& 1))
(hpxmov (& 2) '1 a3)
(mov a3 (& 0))
(hpxmov (& 2) '9 a2)
(mov a2 (& 2))
(bra 103)
104
(hpxmov (& 3) '3 a4)
(diff (& 1) a4)
(hpmovx a4 (& 3) '5)
(hpxmov (& 3) '4 a4)
(diff (& 0) a4)
(hpmovx a4 (& 3) '6)
(mov a4 a1)
(adjstk '4)
(return)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:windows:read-mouse subr2)
(entry #:display:windows:read-mouse subr2)
(push a2)
(push (@ 101))
(push a2)
(push '0)
(push nil)
(mov '3 a4)
(jmp fillvector)
101
(eval ())
(mov (& 0) a1)
(jcall windows_read_mouse)
(jcall windowp)
(hpmovx a1 (& 0) '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:add-event subr2)
(entry #:display:windows:add-event subr2)
(push a2)
(push a1)
(jcall #:event:make)
(push a1)
(push (@ 101))
(push a1)
(push '0)
(push (& 5))
(push '0)
(mov '4 a4)
(jmp bltvector)
101
(eval ())
(hpxmov (& 1) '38 a1)
(mov (& 0) a2)
(jcall nconc1)
(hpmovx a1 (& 1) '38)
(adjstk '3)
(return)
))
(loader'((fentry #:display:windows:grab-event subr2)
(entry #:display:windows:grab-event subr2)
(hpmovx a2 a1 '53)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:windows:ungrab-event subr1)
(entry #:display:windows:ungrab-event subr1)
(hpmovx nil a1 '53)
(mov nil a1)
(return)
))
(loader'((fentry #:display:windows:itsoft-event subr1)
(entry #:display:windows:itsoft-event subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:windows:default-event-code subr2)
(entry #:display:windows:default-event-code subr2)
(hpmovx 'no-event a2 '0)
(mov 'no-event a1)
(return)
))
(loader'((fentry #:display:windows:ascii-event-code subr2)
(entry #:display:windows:ascii-event-code subr2)
(hpxmov a1 '7 a4)
(btnil a4 102)
(hpxmov a1 '7 a4)
(hpmovx a4 a2 '1)
102
(hpmovx 'ascii-event a2 '0)
(mov 'ascii-event a1)
(return)
))
(loader'((fentry #:display:windows:functionkey-event-code subr2)
(entry #:display:windows:functionkey-event-code subr2)
(push a1)
(hpxmov a1 '7 a4)
(btnil a4 102)
(hpxmov a1 '7 a4)
(hpmovx a4 a2 '1)
102
(push a2)
(hpxmov a1 '46 a4)
(btnil a4 103)
(push a2)
(hpxmov a2 '2 a1)
(hpxmov (& 2) '28 a2)
(jcall cassq)
(pop a4)
(hpmovx a1 a4 '2)
(btnil a1 103)
(mov 'functionkey-event a4)
(bra 104)
103
(mov 'no-event a4)
104
(pop a3)
(hpmovx a4 a3 '0)
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:down-event-code subr2)
(entry #:display:windows:down-event-code subr2)
(push a2)
(call #:display:windows:event-grab)
(hpmovx 'down-event (& 0) '0)
(mov 'down-event a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:up-event-code subr2)
(entry #:display:windows:up-event-code subr2)
(push a2)
(call #:display:windows:event-grab)
(hpmovx 'up-event (& 0) '0)
(mov 'up-event a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:enterwindow-event-code subr2)
(entry #:display:windows:enterwindow-event-code subr2)
(hpmovx 'enterwindow-event a2 '0)
(mov 'enterwindow-event a1)
(return)
))
(loader'((fentry #:display:windows:leavewindow-event-code subr2)
(entry #:display:windows:leavewindow-event-code subr2)
(hpmovx 'leavewindow-event a2 '0)
(mov 'leavewindow-event a1)
(return)
))
(loader'((fentry #:display:windows:drag-event-code subr2)
(entry #:display:windows:drag-event-code subr2)
(push a2)
(push a1)
(call #:display:windows:event-grab)
(hpxmov (& 0) '44 a4)
(btnil a4 101)
(mov 'drag-event a4)
(bra 102)
101
(mov 'no-event a4)
102
(hpmovx a4 (& 1) '0)
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:windows:move-event-code subr2)
(entry #:display:windows:move-event-code subr2)
(push a2)
(push a1)
(call #:display:windows:event-grab)
(hpxmov (& 0) '45 a4)
(btnil a4 101)
(mov 'move-event a4)
(bra 102)
101
(mov 'no-event a4)
102
(hpmovx a4 (& 1) '0)
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:windows:keyboard-focus-event-code subr2)
(entry #:display:windows:keyboard-focus-event-code subr2)
(hpmovx 'keyboard-focus-event a2 '0)
(mov 'keyboard-focus-event a1)
(return)
))
(loader'((fentry #:display:windows:repaint-window-event-code subr2)
(entry #:display:windows:repaint-window-event-code subr2)
(hpmovx 'repaint-window-event a2 '0)
(mov 'repaint-window-event a1)
(return)
))
(loader'((fentry #:display:windows:kill-window-event-code subr2)
(entry #:display:windows:kill-window-event-code subr2)
(hpmovx 'kill-window-event a2 '0)
(mov 'kill-window-event a1)
(return)
))
(loader'((fentry #:display:windows:command-event-code subr2)
(entry #:display:windows:command-event-code subr2)
(push a2)
(call #:display:windows:event-grab)
(hpmovx 'command-event (& 0) '0)
(mov 'command-event a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:modify-window-event-code subr2)
(entry #:display:windows:modify-window-event-code subr2)
(hpxmov a2 '2 a4)
(hpxmov a2 '1 a3)
(push a3)
(btnil a3 103)
(hpxmov a2 '7 a4)
(cabne a4 '36 104)
(hpxmov a2 '8 a4)
(cabeq a4 '36 103)
104
(hpxmov a2 '5 a4)
(btnil a4 105)
(hpxmov a3 '0 a4)
(hpxmov a2 '5 a3)
(cabne a4 a3 101)
105
(hpxmov a2 '6 a4)
(btnil a4 106)
(hpxmov (& 0) '1 a4)
(hpxmov a2 '6 a3)
(cabne a4 a3 101)
106
(hpxmov a2 '7 a4)
(btnil a4 107)
(hpxmov (& 0) '2 a4)
(hpxmov a2 '7 a3)
(cabne a4 a3 101)
107
(hpxmov a2 '8 a4)
(btnil a4 103)
(hpxmov (& 0) '3 a4)
(hpxmov a2 '8 a3)
(cabne a4 a3 101)
103
(mov 'no-event a4)
(bra 102)
101
(mov 'modify-window-event a4)
102
(hpmovx a4 a2 '0)
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:unmap-window-code subr2)
(entry #:display:windows:unmap-window-code subr2)
(hpmovx 'no-event a2 '0)
(hpxmov a2 '1 a4)
(btnil a4 101)
(hpxmov a2 '1 a4)
(hpmovx 'unmap a4 '17)
(hpxmov a1 '48 a4)
(btnil a4 103)
(hpmovx 'unmap-window a2 '0)
(mov 'unmap-window a1)
(return)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:windows:map-window-code subr2)
(entry #:display:windows:map-window-code subr2)
(hpmovx 'no-event a2 '0)
(hpxmov a2 '1 a4)
(btnil a4 101)
(hpxmov a2 '1 a4)
(hpmovx 'map a4 '17)
(hpxmov a1 '49 a4)
(btnil a4 103)
(hpmovx 'map-window a2 '0)
(mov 'map-window a1)
(return)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:windows:doubleclick-event-code subr2)
(entry #:display:windows:doubleclick-event-code subr2)
(push a2)
(call #:display:windows:event-grab)
(hpmovx 'doubleclick-event (& 0) '0)
(mov 'doubleclick-event a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:windows:parse-event subr3)
(entry #:display:windows:parse-event subr3)
(hpxmov a2 '0 a4)
(bffix a4 101)
(hpxmov a1 '39 a4)
(hpxmov a2 '0 a3)
(hpxmov a4 a3 a4)
(push (@ 103))
(push a4)
(push a1)
(push a2)
(mov '3 a4)
(jmp funcall)
103
(eval ())
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:windows:allow-event subr2)
(entry #:display:windows:allow-event subr2)
(push a2)
(push a1)
(mov a2 a1)
(cabne a1 'ascii-event 102)
(hpmovx 't (& 0) '47)
(bra 101)
102
(cabne a1 'functionkey-event 103)
(hpmovx 't (& 0) '46)
(bra 101)
103
(cabne a1 'move-event 104)
(hpmovx 't (& 0) '45)
(hpmovx 't (& 0) '44)
(bra 101)
104
(cabne a1 'drag-event 105)
(hpmovx 't (& 0) '44)
(bra 101)
105
(cabne a1 'client-message 101)
(hpmovx 't (& 0) '50)
101
(hpxmov (& 0) '40 a4)
(push a4)
(mov a4 a2)
(jcall memq)
(bfnil a1 109)
(push (& 2))
(push (@ 110))
(push (& 2))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
110
(eval ())
(adjstk '1)
(mov a1 (& 0))
(mov a1 (& 0))
109
(mov (& 0) a2)
(mov 'move-event a1)
(jcall memq)
(btnil a1 112)
(mov (& 0) a2)
(mov 'drag-event a1)
(jcall memq)
(bfnil a1 112)
(push 'drag-event)
(push (@ 113))
(push (& 2))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
113
(eval ())
(adjstk '1)
(mov a1 (& 0))
(mov a1 (& 0))
112
(hpmovx (& 0) (& 1) '40)
(push (@ 114))
(push (& 1))
(push '(repaint-event modify-window-event))
(mov '2 a4)
(jmp append)
114
(eval ())
(hpmovx a1 (& 1) '41)
(mov 'repaint-event a2)
(mov (& 0) a1)
(jcall append1)
(hpmovx a1 (& 1) '42)
(hpmovx (& 0) (& 1) '43)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry #:display:windows:disallow-event subr2)
(entry #:display:windows:disallow-event subr2)
(push a2)
(push a1)
(mov a2 a1)
(cabne a1 'ascii-event 102)
(hpmovx nil (& 0) '47)
(bra 101)
102
(cabne a1 'functionkey-event 103)
(hpmovx nil (& 0) '46)
(bra 101)
103
(cabne a1 'move-event 104)
(hpmovx nil (& 0) '45)
(bra 101)
104
(cabne a1 'drag-event 105)
(hpmovx nil (& 0) '44)
(bra 101)
105
(cabne a1 'client-message 101)
(hpmovx nil (& 0) '50)
101
(hpxmov (& 0) '40 a2)
(jcall delq)
(hpmovx a1 (& 0) '40)
(hpxmov (& 0) '41 a2)
(mov (& 1) a1)
(jcall delq)
(hpmovx a1 (& 0) '41)
(hpxmov (& 0) '42 a2)
(mov (& 1) a1)
(jcall delq)
(hpmovx a1 (& 0) '42)
(hpxmov (& 0) '43 a2)
(mov (& 1) a1)
(jcall delq)
(hpmovx a1 (& 0) '43)
(adjstk '2)
(return)
))
(loader'((fentry #:display:windows:allowed-event-p subr2)
(entry #:display:windows:allowed-event-p subr2)
(push a2)
(hpxmov a1 '40 a2)
(pop a1)
(jmp memq)
))
(defvar #:display:windows:doubleclick-flag ())
(loader'((fentry #:display:windows:doubleclick-flag nsubr)
(entry #:display:windows:doubleclick-flag nsubr)
(push a4)
(mov (& 0) a1)
(cabne a1 '0 102)
(mov (cvalq #:display:windows:doubleclick-flag) a1)
(bra 101)
102
(cabne a1 '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(btnil a4 104)
(mov 't (cvalq #:display:windows:doubleclick-flag))
(mov '1 a1)
(jcall windows_dblclks_flag)
(bra 101)
104
(mov nil (cvalq #:display:windows:doubleclick-flag))
(mov '0 a1)
(jcall windows_dblclks_flag)
(bra 101)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov '#:display:windows:doubleclick-flag a1)
(jcall error)
101
(pop a4)
(adjstk a4)
(return)
))
(loader '((end)))
