(loader '((title |ps.lo|)))
(product-build-info 'ps-link 'id 14 'version 1.7 'subversion 1 'date #:date:#[1994 7 4 11 44 21 () 1])
(put-abbrev 'dps '#:display:ps)
(put-abbrev 'psdev '#:ps:device)
(defvar #:sys-package:bitmap '#:display:ps)
(defvar #:sys-package:colon #:sys-package:bitmap)
(defvar #:display:all-bitmaps (when (boundp '#:display:all-bitmaps) #:display:all-bitmaps))
(setq #:display:all-bitmaps (acons 'PS #:sys-package:bitmap #:display:all-bitmaps))
(defvar pi (if (boundp 'pi) pi 3.1416))
(defvar #:display:ps:apple-lw-fontnames (if (boundp '#:display:ps:apple-lw-fontnames) #:display:ps:apple-lw-fontnames '("cour" "courbold" "courobli" "courboob" "timeroma" "timebold" "timeital" "timeboit" "helv" "helvbold" "helvobli" "helvboob" "symb" "palaroma" "palaital" "palabold" "palaboit" "avanbook" "avandemi" "avanboob" "avandeob" "hena" "henabold" "henaobli" "henaboob")))
(defvar #:display:ps:default-colors (if (boundp '#:display:ps:default-colors) #:display:ps:default-colors '("red" "firebrick" "green" "forestgreen" "blue" "navyblue" "yellow" "goldenrod" "cyan" "mediumturquoise" "magenta" "orchid" "grey" "lightgrey" "grey10" "grey30" "grey50" "grey70" "grey90")))
(defvar #:display:ps:qms-800-fontnames (if (boundp '#:display:ps:qms-800-fontnames) #:display:ps:qms-800-fontnames ()))
(defvar #:display:ps:lino-300-fontnames (if (boundp '#:display:ps:lino-300-fontnames) #:display:ps:lino-300-fontnames ()))
(defvar #:display:ps:default-ps-fonts (if (boundp '#:display:ps:default-ps-fonts) (or #:display:ps:default-ps-fonts '("cour12" "courbold12" "cour8" "cour18")) '("cour12" "courbold12" "cour8" "cour18")))
(defvar #:display:ps:ps-font-dir (if (boundp '#:display:ps:ps-font-dir) #:display:ps:ps-font-dir ()))
(defvar #:display:ps:ps-rgb-file (if (boundp '#:display:ps:ps-rgb-file) #:display:ps:ps-rgb-file ()))
(defvar #:display:ps:a4h 210)
(defvar #:display:ps:a4v 297)
(defvar #:display:ps:a5h 148)
(defvar #:display:ps:a5v 210)
(defvar #:display:ps:ps-xmax-default 1151)
(defvar #:display:ps:ps-ymax-default 899)
(loader'((fentry ps-reset-device subr1)
(entry ps-reset-device subr1)
(hpmovx nil a1 '42)
(call #:display:ps:psdefaults)
(mov 't a1)
(return)
))
(loader'((fentry ps-clear-output subr1)
(entry ps-clear-output subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '37 a4)
(push a4)
(mov '1 a4)
(jmp channel)
101
(eval ())
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall pathname)
(push a1)
(push (@ 102))
(hpxmov (& 2) '37 a4)
(push a4)
(mov '1 a4)
(jmp close)
102
(eval ())
(mov (& 0) a1)
(jcall deletefile)
(mov (& 0) a1)
(jcall openo)
(hpmovx a1 (& 1) '37)
(adjstk '1)
(mov 't a1)
(adjstk '1)
(return)
))
(loader'((entry #:display:ps:psdefaults subr1)
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp ps-library-directory)
103
(eval ())
(bfnil a1 102)
(push (@ 104))
(push (cvalq #:system:virbitmap-directory))
(mov '1 a4)
(jmp ps-library-directory)
104
(eval ())
102
(hpxmov (& 0) '2 a4)
(bfnil a4 105)
(jcall #:ps:device:make)
(hpmovx a1 (& 0) '2)
(mov a1 a4)
105
(push a4)
(bfnil (cvalq #:display:ps:ps-font-dir) 107)
(push (@ 108))
(mov '0 a4)
(jmp ps-library-directory)
108
(eval ())
(mov '#:pathname:#[ () () (#:pathname:current "PS" "fonts") () () () ] a2)
(jcall #:display:ps:append-pathnames)
(mov a1 (cvalq #:display:ps:ps-font-dir))
107
(bfnil (cvalq #:display:ps:ps-rgb-file) 110)
(push (@ 111))
(mov '0 a4)
(jmp ps-library-directory)
111
(eval ())
(mov '#:pathname:#[ () () (#:pathname:current "PS") "pscolors" "dat" () ] a2)
(jcall #:display:ps:append-pathnames)
(mov a1 (cvalq #:display:ps:ps-rgb-file))
110
(hpxmov (& 0) '4 a4)
(bfnil a4 112)
(hpxmov (& 1) '47 a4)
(bfnil a4 112)
(mov '"PSDISPLAY" a1)
(jcall getenv)
(mov a1 a4)
(bfnil a4 112)
(mov '"psbv.ps" a4)
112
(hpmovx a4 (& 1) '47)
(hpxmov (& 0) '5 a4)
(bfnil a4 113)
(hpxmov (& 1) '48 a4)
(bfnil a4 113)
(mov '90 a4)
113
(hpmovx a4 (& 1) '48)
(hpxmov (& 0) '11 a4)
(bfnil a4 114)
(hpxmov (& 1) '56 a4)
(bfnil a4 114)
(mov 'centered a4)
114
(hpmovx a4 (& 1) '56)
(hpxmov (& 0) '12 a4)
(bfnil a4 115)
(hpxmov (& 1) '57 a4)
(bfnil a4 115)
(mov 'one-file a4)
115
(hpmovx a4 (& 1) '57)
(hpxmov (& 0) '0 a4)
(bfnil a4 116)
(hpxmov (& 1) '3 a4)
(bfnil a4 116)
(mov (cvalq #:display:ps:ps-xmax-default) a4)
116
(hpmovx a4 (& 1) '3)
(hpxmov (& 0) '1 a4)
(bfnil a4 117)
(hpxmov (& 1) '4 a4)
(bfnil a4 117)
(mov (cvalq #:display:ps:ps-ymax-default) a4)
117
(hpmovx a4 (& 1) '4)
(hpxmov (& 0) '2 a4)
(bfnil a4 118)
(hpxmov (& 1) '45 a4)
(bfnil a4 118)
(mov '0 a4)
118
(hpmovx a4 (& 1) '45)
(hpxmov (& 0) '3 a4)
(bfnil a4 119)
(hpxmov (& 1) '46 a4)
(bfnil a4 119)
(mov '0 a4)
119
(hpmovx a4 (& 1) '46)
(hpxmov (& 0) '6 a4)
(bfnil a4 120)
(hpxmov (& 1) '51 a4)
(bfnil a4 120)
(mov '10 a4)
120
(hpmovx a4 (& 1) '51)
(hpxmov (& 0) '14 a4)
(bfnil a4 121)
(hpxmov (& 1) '60 a4)
(bfnil a4 121)
(mov '1 a4)
121
(hpmovx a4 (& 1) '60)
(hpxmov (& 0) '8 a4)
(bfnil a4 122)
(hpxmov (& 1) '53 a4)
(bfnil a4 122)
(mov (cvalq #:display:ps:a4v) a4)
122
(hpmovx a4 (& 1) '53)
(hpxmov (& 0) '7 a4)
(bfnil a4 123)
(hpxmov (& 1) '52 a4)
(bfnil a4 123)
(mov (cvalq #:display:ps:a4h) a4)
123
(hpmovx a4 (& 1) '52)
(hpxmov (& 0) '9 a4)
(bfnil a4 124)
(hpxmov (& 1) '54 a4)
(bfnil a4 124)
(mov '1 a4)
124
(hpmovx a4 (& 1) '54)
(hpxmov (& 0) '10 a4)
(bfnil a4 125)
(hpxmov (& 1) '55 a4)
(bfnil a4 125)
(mov '1 a4)
125
(hpmovx a4 (& 1) '55)
(hpxmov (& 0) '16 a4)
(hpmovx a4 (& 1) '63)
(hpxmov (& 0) '15 a4)
(bfnil a4 126)
(hpxmov (& 1) '61 a4)
126
(hpmovx a4 (& 1) '61)
(hpxmov (& 1) '61 a4)
(cabeq a4 'grey 128)
(cabeq a4 'semicolor 128)
(cabeq a4 'color 128)
(hpmovx 'grey (& 1) '61)
128
(hpxmov (& 1) '55 a4)
(cabne a4 't 130)
(hpxmov (& 1) '54 a4)
(cabne a4 't 130)
(hpmovx '1 (& 1) '55)
(hpmovx '1 (& 1) '54)
130
(hpxmov (& 0) '13 a4)
(bfnil a4 131)
(hpxmov (& 1) '42 a4)
131
(hpmovx a4 (& 1) '42)
(mov (& 1) a1)
(adjstk '2)
(bra #:display:ps:psscale)
))
(loader'((entry #:display:ps:psscale subr1)
(push a1)
(hpxmov a1 '54 a4)
(push a4)
(hpxmov a1 '55 a3)
(push a3)
(push (@ 101))
(mov a4 a1)
(jcall fixp)
(mov a1 a2)
(bfnil a2 102)
(mov '1000 a2)
102
(push a2)
(push (@ 103))
(hpxmov (& 5) '52 a4)
(push a4)
(push (@ 104))
(push '2)
(hpxmov (& 8) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
101
(eval ())
(push a1)
(push (@ 105))
(mov (& 2) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 106)
(mov '1000 a4)
106
(push a4)
(push (@ 107))
(hpxmov (& 6) '53 a4)
(push a4)
(push (@ 108))
(push '2)
(hpxmov (& 9) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
107
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
105
(eval ())
(push a1)
(push (@ 109))
(push '72)
(push (@ 110))
(push (& 4))
(push '25.4)
(mov '2 a4)
(jmp /)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
109
(eval ())
(push a1)
(push (@ 111))
(push '72)
(push (@ 112))
(push (& 4))
(push '25.4)
(mov '2 a4)
(jmp /)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
111
(eval ())
(push a1)
(hpxmov (& 6) '3 a4)
(push a4)
(hpxmov (& 7) '4 a3)
(push a3)
(hpxmov (& 8) '45 a2)
(push a2)
(hpxmov (& 9) '46 a4)
(push a4)
(push (@ 113))
(push (cvalq pi))
(push (@ 114))
(hpxmov (& 13) '48 a4)
(push a4)
(push '180)
(mov '2 a4)
(jmp /)
114
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
113
(eval ())
(push a1)
(mov (& 4) a4)
(diff (& 2) a4)
(mov a4 a1)
(jcall |1+|)
(push a1)
(mov (& 4) a4)
(diff (& 2) a4)
(mov a4 a1)
(jcall |1+|)
(push a1)
(push (@ 115))
(push (@ 116))
(push a1)
(mov (& 5) a1)
(jcall sin)
(jcall abs)
(push a1)
(mov '2 a4)
(jmp *)
116
(eval ())
(push a1)
(push (@ 117))
(push (& 4))
(mov (& 6) a1)
(jcall cos)
(jcall abs)
(push a1)
(mov '2 a4)
(jmp *)
117
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
115
(eval ())
(push a1)
(push (@ 118))
(push (@ 119))
(hpxmov (& 16) '48 a4)
(push a4)
(push '180)
(mov '2 a4)
(jmp /)
119
(eval ())
(push a1)
(push (cvalq pi))
(mov '2 a4)
(jmp *)
118
(eval ())
(jcall sin)
(push a1)
(push (@ 120))
(push (@ 121))
(hpxmov (& 17) '48 a4)
(push a4)
(push '180)
(mov '2 a4)
(jmp /)
121
(eval ())
(push a1)
(push (cvalq pi))
(mov '2 a4)
(jmp *)
120
(eval ())
(jcall cos)
(push a1)
(push (@ 122))
(push (@ 123))
(push (& 5))
(mov (& 8) a1)
(jcall cos)
(jcall abs)
(push a1)
(mov '2 a4)
(jmp *)
123
(eval ())
(push a1)
(push (@ 124))
(push (& 7))
(mov (& 9) a1)
(jcall sin)
(jcall abs)
(push a1)
(mov '2 a4)
(jmp *)
124
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
122
(eval ())
(push a1)
(hpxmov (& 17) '42 a4)
(bfnil a4 125)
(push (@ 126))
(push (@ 127))
(push (& 14))
(push (& 6))
(mov '2 a4)
(jmp /)
127
(eval ())
(push a1)
(push (@ 128))
(push (& 14))
(push (& 4))
(mov '2 a4)
(jmp /)
128
(eval ())
(push a1)
(mov '2 a4)
(jmp min)
126
(eval ())
(mov a1 a4)
125
(push a4)
(push (@ 129))
(push '0)
(push (@ 130))
(push (@ 131))
(push (& 17))
(push a4)
(mov '2 a4)
(jmp /)
131
(eval ())
(push a1)
(push (& 8))
(mov '2 a4)
(jmp |-|)
130
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
129
(eval ())
(push a1)
(push (@ 132))
(push '0)
(push (@ 133))
(push (@ 134))
(push (& 17))
(push (& 6))
(mov '2 a4)
(jmp /)
134
(eval ())
(push a1)
(push (& 6))
(mov '2 a4)
(jmp |-|)
133
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
132
(eval ())
(push a1)
(push (@ 135))
(push (@ 136))
(push (@ 137))
(push '72)
(hpxmov (& 24) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
137
(eval ())
(push a1)
(push '25.4)
(mov '2 a4)
(jmp /)
136
(eval ())
(push a1)
(push (& 4))
(mov '2 a4)
(jmp /)
135
(eval ())
(push a1)
(btfix (& 20) 139)
(push (@ 140))
(push '1)
(push (@ 141))
(push (@ 142))
(push (& 7))
(push (& 12))
(mov '2 a4)
(jmp *)
142
(eval ())
(push a1)
(push (@ 143))
(push '72)
(push (@ 144))
(push (@ 145))
(hpxmov (& 29) '52 a4)
(push a4)
(push (@ 146))
(push '2)
(hpxmov (& 32) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
146
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
145
(eval ())
(push a1)
(push '25.4)
(mov '2 a4)
(jmp /)
144
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
143
(eval ())
(push a1)
(mov '2 a4)
(jmp /)
141
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
140
(eval ())
(jcall fix)
(mov a1 (& 20))
(hpmovx a1 (& 21) '54)
(push (@ 147))
(push a1)
(push (@ 148))
(hpxmov (& 24) '52 a4)
(push a4)
(push (@ 149))
(push '2)
(hpxmov (& 27) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
149
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
148
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
147
(eval ())
(mov a1 (& 18))
(push (@ 150))
(push '72)
(push (@ 151))
(push a1)
(push '25.4)
(mov '2 a4)
(jmp /)
151
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
150
(eval ())
(mov a1 (& 16))
(push (@ 152))
(push '0)
(push (@ 153))
(push (@ 154))
(push a1)
(push (& 8))
(mov '2 a4)
(jmp /)
154
(eval ())
(push a1)
(push (& 11))
(mov '2 a4)
(jmp |-|)
153
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
152
(eval ())
(mov a1 (& 2))
139
(btfix (& 19) 156)
(push (@ 157))
(push '1)
(push (@ 158))
(push (@ 159))
(push (& 7))
(push (& 9))
(mov '2 a4)
(jmp *)
159
(eval ())
(push a1)
(push (@ 160))
(push '72)
(push (@ 161))
(push (@ 162))
(hpxmov (& 29) '53 a4)
(push a4)
(push (@ 163))
(push '2)
(hpxmov (& 32) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
163
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
162
(eval ())
(push a1)
(push '25.4)
(mov '2 a4)
(jmp /)
161
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
160
(eval ())
(push a1)
(mov '2 a4)
(jmp /)
158
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
157
(eval ())
(jcall fix)
(mov a1 (& 19))
(hpmovx a1 (& 21) '55)
(push (@ 164))
(push a1)
(push (@ 165))
(hpxmov (& 24) '53 a4)
(push a4)
(push (@ 166))
(push '2)
(hpxmov (& 27) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
166
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
165
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
164
(eval ())
(mov a1 (& 17))
(push (@ 167))
(push '72)
(push (@ 168))
(push a1)
(push '25.4)
(mov '2 a4)
(jmp /)
168
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
167
(eval ())
(mov a1 (& 15))
(push (@ 169))
(push '0)
(push (@ 170))
(push (@ 171))
(push a1)
(push (& 8))
(mov '2 a4)
(jmp /)
171
(eval ())
(push a1)
(push (& 8))
(mov '2 a4)
(jmp |-|)
170
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
169
(eval ())
(mov a1 (& 1))
156
(hpxmov (& 21) '56 a1)
(cabeq a1 'centered 174)
(cabeq a1 'up-centered 174)
(cabne a1 'down-centered 173)
174
(push (@ 175))
(push (& 3))
(push '2)
(mov '2 a4)
(jmp /)
175
(eval ())
(mov a1 a4)
(bra 172)
173
(cabeq a1 'up-right 177)
(cabeq a1 'down-right 177)
(cabne a1 'centered-right 176)
177
(mov (& 2) a4)
(bra 172)
176
(cabeq a1 'up-left 179)
(cabeq a1 'down-left 179)
(cabne a1 'centered-left 178)
179
(mov '0 a4)
(bra 172)
178
(mov nil a4)
172
(mov a4 (& 2))
(hpxmov (& 21) '56 a1)
(cabeq a1 'centered 182)
(cabeq a1 'centered-left 182)
(cabne a1 'centered-right 181)
182
(push (@ 183))
(push (& 2))
(push '2)
(mov '2 a4)
(jmp /)
183
(eval ())
(mov a1 a3)
(bra 180)
181
(cabeq a1 'up-right 185)
(cabeq a1 'up-left 185)
(cabne a1 'up-centered 184)
185
(mov (& 1) a3)
(bra 180)
184
(cabeq a1 'down-left 187)
(cabeq a1 'down-centered 187)
(cabne a1 'down-right 186)
187
(mov '0 a3)
(bra 180)
186
(mov nil a3)
180
(mov a3 (& 1))
(hpmovx (& 3) (& 21) '42)
(push (@ 188))
(push (@ 189))
(push (& 2))
(push (@ 190))
(push (& 9))
(push (& 11))
(mov '2 a4)
(jmp |+|)
190
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
189
(eval ())
(push a1)
(push (@ 191))
(push (& 5))
(push (& 9))
(mov '2 a4)
(jmp *)
191
(eval ())
(push a1)
(push (@ 192))
(push (& 5))
(push (& 11))
(mov '2 a4)
(jmp *)
192
(eval ())
(push a1)
(push (@ 193))
(hpxmov (& 26) '45 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
193
(eval ())
(push a1)
(push (@ 194))
(push (@ 195))
(push (& 13))
(push (& 13))
(mov '2 a4)
(jmp *)
195
(eval ())
(push a1)
(hpxmov (& 28) '4 a4)
(hpxmov (& 28) '46 a3)
(diff a3 a4)
(push a4)
(mov '2 a4)
(jmp *)
194
(eval ())
(push a1)
(mov '5 a4)
(jmp |+|)
188
(eval ())
(hpmovx a1 (& 21) '49)
(push (@ 196))
(push (@ 197))
(push (& 2))
(push (@ 198))
(push (& 9))
(push (& 11))
(mov '2 a4)
(jmp |-|)
198
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
197
(eval ())
(push a1)
(push (@ 199))
(push (& 5))
(push (& 10))
(mov '2 a4)
(jmp *)
199
(eval ())
(push a1)
(push (@ 200))
(push (@ 201))
(push (& 6))
(push (& 11))
(mov '2 a4)
(jmp *)
201
(eval ())
(push a1)
(mov '1 a4)
(jmp |-|)
200
(eval ())
(push a1)
(push (@ 202))
(push (@ 203))
(push (& 12))
(push (& 13))
(mov '2 a4)
(jmp *)
203
(eval ())
(push a1)
(hpxmov (& 27) '4 a4)
(hpxmov (& 27) '46 a3)
(diff a3 a4)
(push a4)
(mov '2 a4)
(jmp *)
202
(eval ())
(push a1)
(mov '4 a4)
(jmp |-|)
196
(eval ())
(hpmovx a1 (& 21) '50)
(adjstk '22)
(return)
))
(loader'((fentry #:display:ps:current-display subr1)
(entry #:display:ps:current-display subr1)
(return)
))
(loader'((fentry #:display:ps:synchronize subr2)
(entry #:display:ps:synchronize subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:bitprologue subr1)
(entry #:display:ps:bitprologue subr1)
(push a1)
(hpxmov a1 '6 a4)
(bfnil a4 101)
(call #:display:ps:psdefaults)
(mov (& 0) a1)
(call #:display:ps:initialize)
(mov (& 0) a1)
(call #:display:ps:init-color)
(mov (& 0) a1)
(call #:display:ps:init-font)
(mov (& 0) a1)
(call #:display:ps:init-line-style)
(mov (& 0) a1)
(call #:display:ps:init-pattern)
(mov (& 0) a1)
(call #:display:ps:init-window)
(hpmovx nil (& 0) '27)
(mov (& 0) a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:display:ps:initialize subr1)
(push a1)
(hpxmov a1 '47 a1)
(jcall pathname)
(push a1)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push '"ps")
(mov '5 a4)
(jmp make-pathname)
101
(eval ())
(push a1)
(push (@ 102))
(push nil)
(push nil)
(push nil)
(push nil)
(push '"pr")
(mov '5 a4)
(jmp make-pathname)
102
(eval ())
(push a1)
(mov (& 2) a2)
(mov (& 1) a1)
(jcall merge-pathnames)
(push a1)
(mov (& 3) a2)
(mov (& 1) a1)
(jcall merge-pathnames)
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp current-directory)
103
(eval ())
(jcall pathname)
(mov nil a2)
(mov '256 a1)
(jcall makevector)
(hpmovx a1 (& 5) '44)
(mov (& 1) a1)
(jcall namestring)
(hpmovx a1 (& 5) '47)
(mov (& 0) a1)
(jcall openo)
(hpmovx a1 (& 5) '36)
(mov (& 1) a1)
(jcall openo)
(hpmovx a1 (& 5) '37)
(hpmovx '"apple-lw" (& 5) '38)
(hpmovx '"canon" (& 5) '39)
(hpmovx '"epsf1.2" (& 5) '41)
(hpmovx '"PS-Adobe-2.0" (& 5) '40)
(mov '"PS-Adobe-2.0" a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:ps:bitepilogue subr1)
(entry #:display:ps:bitepilogue subr1)
(push a1)
(hpxmov a1 '6 a4)
(btnil a4 101)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 104))
(hpxmov a1 '36 a4)
(push a4)
(mov '1 a4)
(jmp channel)
104
(eval ())
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall pathname)
(push a1)
(push (@ 105))
(hpxmov (& 14) '37 a4)
(push a4)
(mov '1 a4)
(jmp channel)
105
(eval ())
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall pathname)
(push a1)
(mov (& 14) a1)
(jcall #:display:ps:init-psfile)
(push (@ 106))
(hpxmov (& 15) '36 a4)
(push a4)
(mov '1 a4)
(jmp close)
106
(eval ())
(push (@ 107))
(hpxmov (& 15) '37 a4)
(push a4)
(mov '1 a4)
(jmp close)
107
(eval ())
(mov (& 1) a3)
(mov (& 0) a2)
(mov (& 14) a1)
(jcall #:display:ps:multilayout)
(adjstk '2)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(hpmovx nil (& 0) '28)
(hpmovx nil (& 0) '29)
(hpmovx nil (& 0) '30)
(hpmovx nil (& 0) '31)
(hpmovx nil (& 0) '32)
(hpmovx nil (& 0) '33)
(hpmovx nil (& 0) '34)
(hpmovx nil (& 0) '35)
(hpmovx nil (& 0) '38)
(hpmovx nil (& 0) '39)
(hpmovx nil (& 0) '40)
(hpmovx nil (& 0) '41)
(hpmovx nil (& 0) '43)
(hpmovx nil (& 0) '44)
(hpmovx nil (& 0) '58)
(hpmovx nil (& 0) '59)
(hpmovx nil (& 0) '24)
(hpmovx nil (& 0) '17)
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:bitmap-save subr1)
(entry #:display:ps:bitmap-save subr1)
(jmp #:display:ps:bitepilogue)
))
(loader'((fentry #:display:ps:bitmap-restore subr1)
(entry #:display:ps:bitmap-restore subr1)
(jmp #:display:ps:bitprologue)
))
(loader'((fentry #:display:ps:bitmap-refresh subr1)
(entry #:display:ps:bitmap-refresh subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:bitmap-flush subr1)
(entry #:display:ps:bitmap-flush subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:bitmap-sync subr1)
(entry #:display:ps:bitmap-sync subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:standard-roman-font subr1)
(entry #:display:ps:standard-roman-font subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:ps:standard-bold-font subr1)
(entry #:display:ps:standard-bold-font subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:ps:small-roman-font subr1)
(entry #:display:ps:small-roman-font subr1)
(mov '2 a1)
(return)
))
(loader'((fentry #:display:ps:large-roman-font subr1)
(entry #:display:ps:large-roman-font subr1)
(mov '3 a1)
(return)
))
(loader'((fentry #:display:ps:standard-background-pattern subr1)
(entry #:display:ps:standard-background-pattern subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:ps:standard-foreground-pattern subr1)
(entry #:display:ps:standard-foreground-pattern subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:ps:standard-medium-gray-pattern subr1)
(entry #:display:ps:standard-medium-gray-pattern subr1)
(mov '2 a1)
(return)
))
(loader'((fentry #:display:ps:standard-light-gray-pattern subr1)
(entry #:display:ps:standard-light-gray-pattern subr1)
(mov '3 a1)
(return)
))
(loader'((fentry #:display:ps:standard-dark-gray-pattern subr1)
(entry #:display:ps:standard-dark-gray-pattern subr1)
(mov '4 a1)
(return)
))
(loader'((fentry #:display:ps:standard-lelisp-cursor subr1)
(entry #:display:ps:standard-lelisp-cursor subr1)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:ps:standard-gc-cursor subr1)
(entry #:display:ps:standard-gc-cursor subr1)
(mov '1 a1)
(return)
))
(loader'((fentry #:display:ps:standard-busy-cursor subr1)
(entry #:display:ps:standard-busy-cursor subr1)
(mov '2 a1)
(return)
))
(loader'((fentry #:display:ps:store-selection subr2)
(entry #:display:ps:store-selection subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:get-selection subr1)
(entry #:display:ps:get-selection subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:display-depth subr1)
(entry #:display:ps:display-depth subr1)
(mov '8 a1)
(return)
))
(loader'((entry #:display:ps:init-font subr1)
(push a1)
(hpmovx '#[] a1 '30)
(hpmovx '#[] a1 '31)
(push a1)
(mov '"fontaliases.dat" a2)
(call #:display:ps:find-alias)
(pop a4)
(hpmovx a1 a4 '58)
(mov '"famaliases.dat" a2)
(mov (& 0) a1)
(call #:display:ps:find-alias)
(hpmovx a1 (& 0) '59)
(push (cvalq #:display:ps:default-ps-fonts))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 12) a2)
(mov (& 14) a1)
(jcall #:display:ps:load-font)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(btnil a1 105)
(hpxmov (& 2) '18 a3)
(mov (car a1) a2)
(mov (& 0) a1)
(jcall acons)
(hpmovx a1 (& 2) '18)
105
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:font-namestr subr2)
(push a2)
(push a1)
(call #:display:ps:get-font-alias)
(mov a1 a4)
(bfnil a4 101)
(mov (& 1) a4)
101
(mov a4 (& 1))
(push (@ 102))
(push a4)
(push '"0123456789")
(mov '2 a4)
(jmp scanstring)
102
(eval ())
(btnil a1 103)
(push (@ 105))
(push (& 2))
(push '0)
(push a1)
(mov '3 a4)
(jmp substring)
105
(eval ())
(mov a1 a4)
(bra 104)
103
(mov (& 1) a4)
104
(mov a4 (& 1))
(hpxmov (& 0) '59 a2)
(mov a4 a1)
(jcall cassoc)
(bfnil a1 106)
(mov (& 1) a1)
106
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:font-sizestr subr1)
(push a1)
(push (@ 101))
(push a1)
(push '"0123456789")
(mov '2 a4)
(jmp scanstring)
101
(eval ())
(push a1)
(btnil a1 102)
(push (@ 104))
(push (& 2))
(push a1)
(hgsize (& 4) a4)
(push a4)
(mov '3 a4)
(jmp substring)
104
(eval ())
(mov a1 a4)
(bra 103)
102
(mov nil a4)
103
(push a4)
(btnil (& 1) 105)
(push (@ 107))
(push a4)
(push '"1234567890")
(mov '2 a4)
(jmp spanstring)
107
(eval ())
(mov a1 a3)
(bra 106)
105
(mov nil a3)
106
(btnil (& 0) 109)
(btnil a3 111)
(push (@ 113))
(push (& 1))
(push '0)
(push a3)
(mov '3 a4)
(jmp substring)
113
(eval ())
(bra 110)
111
(mov (& 0) a1)
(bra 110)
109
(mov nil a1)
110
(bfnil a1 108)
(mov '"" a1)
108
(adjstk '3)
(return)
))
(loader'((entry #:display:ps:get-font-alias subr2)
(push a2)
(hpxmov a1 '58 a2)
(pop a1)
(jmp cassoc)
))
(loader'((entry #:display:ps:find-alias subr2)
(push a2)
(push nil)
(push (@ 101))
(mov '0 a4)
(jmp inchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push (cvalq #:display:ps:ps-font-dir))
(mov (& 7) a1)
(jcall pathname)
(mov a1 a2)
(pop a1)
(jcall merge-pathnames)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
104
(eval ())
(jcall read)
(mov a1 (& 4))
(push (@ 107))
(mov '0 a4)
(jmp inchan)
107
(eval ())
(btnil a1 105)
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp inchan)
109
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
108
(eval ())
(bra 106)
105
(mov nil a1)
106
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 110))
(push (& 4))
(mov '1 a4)
(jmp inchan)
110
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:font-realname subr2)
(push a2)
(push a1)
(push a2)
(mov a1 a2)
(pop a1)
(call #:display:ps:get-font-alias)
(mov a1 a4)
(bfnil a4 101)
(mov (& 0) a4)
101
(mov a4 (& 0))
(push (@ 102))
(push a4)
(push '"0123456789")
(mov '2 a4)
(jmp scanstring)
102
(eval ())
(btnil a1 103)
(push (@ 105))
(push (& 1))
(push '0)
(push a1)
(mov '3 a4)
(jmp substring)
105
(eval ())
(mov a1 a4)
(bra 104)
103
(mov (& 0) a4)
104
(push a4)
(push (@ 106))
(hpxmov (& 3) '59 a2)
(mov a4 a1)
(jcall cassoc)
(mov a1 a3)
(bfnil a3 107)
(mov (& 1) a3)
107
(push a3)
(mov (& 3) a1)
(call #:display:ps:font-sizestr)
(push a1)
(mov '2 a4)
(jmp catenate)
106
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:display:ps:test-font subr2)
(push a1)
(call #:display:ps:font-namestr)
(push a1)
(push (@ 101))
(push (@ 102))
(hpxmov (& 3) '38 a4)
(push a4)
(push '"-fontnames")
(mov '2 a4)
(jmp catenate)
102
(eval ())
(mov a1 a2)
(mov '#:display:ps a1)
(jcall symbol)
(push a1)
(mov '1 a4)
(jmp eval)
101
(eval ())
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp member)
))
(loader'((fentry #:display:ps:font-max subr1)
(entry #:display:ps:font-max subr1)
(hpxmov a1 '30 a1)
(hgsize a1 a1)
(diff '1 a1)
(return)
))
(loader'((fentry #:display:ps:load-font subr2)
(entry #:display:ps:load-font subr2)
(push a2)
(push a1)
(push a2)
(mov a1 a2)
(pop a1)
(call #:display:ps:font-realname)
(push a1)
(hpxmov (& 1) '18 a2)
(jcall cassoc)
(push a1)
(bfnil a1 102)
(mov (& 1) a2)
(mov (& 2) a1)
(call #:display:ps:test-font)
(bfnil a1 103)
(mov (& 3) a3)
(mov '#:display:err-not-a-font-name a2)
(mov '#:display:ps:load-font a1)
(jcall error)
(bra 102)
103
(hpxmov (& 2) '30 a4)
(hgsize a4 a4)
(mov a4 (& 0))
(push (@ 105))
(plus '1 a4)
(mov '0 a2)
(mov a4 a1)
(jcall makevector)
(push a1)
(push '0)
(hpxmov (& 5) '30 a3)
(push a3)
(push '0)
(push (& 5))
(mov '5 a4)
(jmp bltvector)
105
(eval ())
(hpmovx a1 (& 2) '30)
(hpxmov (& 2) '30 a4)
(hpmovx (& 1) a4 (& 0))
(push (@ 106))
(mov (& 1) a4)
(plus '1 a4)
(mov '0 a2)
(mov a4 a1)
(jcall makevector)
(push a1)
(push '0)
(hpxmov (& 5) '31 a4)
(push a4)
(push '0)
(push (& 5))
(mov '5 a4)
(jmp bltvector)
106
(eval ())
(hpmovx a1 (& 2) '31)
(hpxmov (& 2) '31 a4)
(push a4)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:display:ps:read-font-metrics)
(pop a4)
(hpmovx a1 a4 (& 0))
102
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:current-font subr3)
(entry #:display:ps:current-font subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:get-font-names subr3)
(entry #:display:ps:get-font-names subr3)
(push (@ 101))
(mov a1 a2)
(mov a3 a1)
(call #:display:ps:font-realname)
(push a1)
(mov '1 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry #:display:ps:get-font-info subr3)
(entry #:display:ps:get-font-info subr3)
(push a3)
(push a1)
(push a2)
(mov a1 a2)
(pop a1)
(call #:display:ps:font-realname)
(push a1)
(call #:display:ps:font-sizestr)
(jcall read-from-string)
(push a1)
(push nil)
(push (@ 101))
(push 'font-names)
(push (& 5))
(mov '2 a4)
(jmp send)
101
(eval ())
(mov a1 a2)
(mov (& 2) a1)
(jcall cassoc)
(btnil a1 102)
(hpxmov (& 3) '31 a4)
(hpxmov a4 a1 a4)
(mov a4 (& 0))
(bra 103)
102
(mov (& 2) a2)
(mov (& 3) a1)
(call #:display:ps:test-font)
(btnil a1 103)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:display:ps:read-font-metrics)
(mov a1 (& 0))
103
(btnil (& 0) 106)
(push (@ 108))
(push (@ 109))
(hpxmov (& 2) '0 a4)
(push a4)
(push '1000)
(mov '2 a4)
(jmp /)
109
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp *)
108
(eval ())
(call #:display:ps:round)
(hpmovx a1 (& 4) '1)
(hpxmov (& 4) '1 a4)
(mov (& 1) a3)
(diff a4 a3)
(hpmovx a3 (& 4) '0)
(push (@ 113))
(push '"ob")
(push (& 4))
(push '4)
(mov '3 a4)
(jmp index)
113
(eval ())
(bfnil a1 112)
(push (@ 114))
(push '"it")
(push (& 4))
(push '4)
(mov '3 a4)
(jmp index)
114
(eval ())
(btnil a1 110)
112
(mov '-10 a4)
(bra 111)
110
(mov '0 a4)
111
(hpmovx a4 (& 4) '2)
(push (@ 115))
(push '0.0009999999)
(push (& 3))
(bra 116)
(fentry #:display:ps:get-font-info:g108 subr1)
(entry #:display:ps:get-font-info:g108 subr1)
(bfcons a1 117)
(push (@ 119))
(push (car a1))
(push (cdr a1))
(mov '2 a4)
(jmp |+|)
119
(eval ())
(return)
117
(mov '1000 a1)
(return)
116
(mov '#:display:ps:get-font-info:g108 a2)
(mov (& 3) a1)
(call #:display:ps:vect-min)
(push a1)
(mov '3 a4)
(jmp *)
115
(eval ())
(call #:display:ps:round)
(hpmovx a1 (& 4) '4)
(push (@ 120))
(push '0.0009999999)
(push (& 3))
(bra 121)
(fentry #:display:ps:get-font-info:g109 subr1)
(entry #:display:ps:get-font-info:g109 subr1)
(bfcons a1 122)
(mov (cdr a1) a1)
(return)
122
(mov '1000 a1)
(return)
121
(mov '#:display:ps:get-font-info:g109 a2)
(mov (& 3) a1)
(call #:display:ps:vect-min)
(push a1)
(mov '3 a4)
(jmp *)
120
(eval ())
(call #:display:ps:round)
(hpmovx a1 (& 4) '5)
(hpxmov (& 4) '0 a4)
(hpmovx a4 (& 4) '6)
(hpxmov (& 4) '1 a4)
(hpmovx a4 (& 4) '7)
(push (@ 124))
(push '0.0009999999)
(push (& 3))
(bra 125)
(fentry #:display:ps:get-font-info:g110 subr1)
(entry #:display:ps:get-font-info:g110 subr1)
(bfcons a1 126)
(mov (car a1) a1)
(return)
126
(mov '1000 a1)
(return)
125
(mov '#:display:ps:get-font-info:g110 a2)
(mov (& 3) a1)
(call #:display:ps:vect-min)
(push a1)
(mov '3 a4)
(jmp *)
124
(eval ())
(call #:display:ps:round)
(hpmovx a1 (& 4) '8)
(push (@ 128))
(push '0.0009999999)
(push (& 3))
(bra 129)
(fentry #:display:ps:get-font-info:g111 subr1)
(entry #:display:ps:get-font-info:g111 subr1)
(bfcons a1 130)
(push (@ 132))
(push (car a1))
(push (cdr a1))
(mov '2 a4)
(jmp |+|)
132
(eval ())
(return)
130
(mov '0 a1)
(return)
129
(mov '#:display:ps:get-font-info:g111 a2)
(mov (& 3) a1)
(call #:display:ps:vect-max)
(push a1)
(mov '3 a4)
(jmp *)
128
(eval ())
(call #:display:ps:round)
(hpmovx a1 (& 4) '9)
(push (@ 133))
(push '0.0009999999)
(push (& 3))
(bra 134)
(fentry #:display:ps:get-font-info:g112 subr1)
(entry #:display:ps:get-font-info:g112 subr1)
(bfcons a1 135)
(mov (cdr a1) a1)
(return)
135
(mov '0 a1)
(return)
134
(mov '#:display:ps:get-font-info:g112 a2)
(mov (& 3) a1)
(call #:display:ps:vect-max)
(push a1)
(mov '3 a4)
(jmp *)
133
(eval ())
(call #:display:ps:round)
(hpmovx a1 (& 4) '10)
(push (@ 137))
(push '1000)
(bra 138)
(fentry #:display:ps:get-font-info:g113 subr1)
(entry #:display:ps:get-font-info:g113 subr1)
(bfcons a1 139)
(mov (cdr a1) a1)
(return)
139
(mov '0 a1)
(return)
138
(mov '#:display:ps:get-font-info:g113 a2)
(mov (& 2) a1)
(call #:display:ps:vect-max)
(push a1)
(mov '2 a4)
(jmp |-|)
137
(eval ())
(hpmovx a1 (& 4) '3)
(hpxmov (& 4) '0 a4)
(hpmovx a4 (& 4) '11)
(hpmovx '0 (& 4) '12)
(push (@ 141))
(push '0.0009999999)
(push (& 3))
(bra 142)
(fentry #:display:ps:get-font-info:g114 subr1)
(entry #:display:ps:get-font-info:g114 subr1)
(bfcons a1 143)
(mov (car a1) a1)
(return)
143
(mov '0 a1)
(return)
142
(mov '#:display:ps:get-font-info:g114 a2)
(mov (& 3) a1)
(call #:display:ps:vect-max)
(push a1)
(mov '3 a4)
(jmp *)
141
(eval ())
(call #:display:ps:round)
(hpmovx a1 (& 4) '13)
(mov (& 4) a1)
(adjstk '5)
(return)
106
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:display:ps:vect-max subr2)
(push a2)
(push a1)
(push (@ 101))
(push a2)
(hpxmov a1 '0 a4)
(push a4)
(mov '2 a4)
(jmp funcall)
101
(eval ())
(push nil)
(push a1)
(push '0)
(push (& 3))
(hgsize (& 0) a4)
(push a4)
102
(cnbge (& 2) (& 0) 103)
(hpxmov (& 1) (& 2) a4)
(btnil a4 105)
(push (@ 106))
(push (& 7))
(push a4)
(mov '2 a4)
(jmp funcall)
106
(eval ())
(mov a1 (& 4))
(push (@ 109))
(push a1)
(push (& 5))
(mov '2 a4)
(jmp >)
109
(eval ())
(btnil a1 105)
(mov (& 4) (& 3))
105
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 102)
103
(adjstk '3)
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((entry #:display:ps:vect-min subr2)
(push a2)
(push a1)
(push (@ 101))
(push a2)
(hpxmov a1 '0 a4)
(push a4)
(mov '2 a4)
(jmp funcall)
101
(eval ())
(push nil)
(push a1)
(push '0)
(push (& 3))
(hgsize (& 0) a4)
(push a4)
102
(cnbge (& 2) (& 0) 103)
(hpxmov (& 1) (& 2) a4)
(btnil a4 105)
(push (@ 106))
(push (& 7))
(push a4)
(mov '2 a4)
(jmp funcall)
106
(eval ())
(mov a1 (& 4))
(push (@ 109))
(push a1)
(push (& 5))
(mov '2 a4)
(jmp <)
109
(eval ())
(btnil a1 105)
(mov (& 4) (& 3))
105
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 102)
103
(adjstk '3)
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((entry #:display:ps:read-font-metrics subr2)
(push a2)
(call #:display:ps:font-namestr)
(push '0)
(push (cvalq #:display:ps:ps-font-dir))
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push a1)
(push '"lfm")
(mov '5 a4)
(jmp make-pathname)
101
(eval ())
(mov a1 a2)
(pop a1)
(jcall #:display:ps:append-pathnames)
(jcall openi)
(push a1)
(mov nil a2)
(mov '225 a1)
(jcall makevector)
(push a1)
(bfnil (& 1) 102)
(mov (& 3) a3)
(mov 'erroob a2)
(mov '#:display:ps:read-font-metrics a1)
(jcall error)
(bra 103)
102
(push (@ 104))
(mov '0 a4)
(jmp inchan)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(push (& 6))
(mov '1 a4)
(jmp inchan)
107
(eval ())
(push (@ 108))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
109
(jcall read)
(hpmovx a1 (& 8) (& 10))
(mov (& 10) a4)
(plus '1 a4)
(mov a4 (& 10))
(bra 109)
110
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
108
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 111))
(push (& 4))
(mov '1 a4)
(jmp inchan)
111
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '1)
103
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((entry #:display:ps:ps-font-ascent subr2)
(push a2)
(push a1)
(hpxmov a1 '30 a1)
(hpxmov a1 a2 a1)
(call #:display:ps:fsize)
(push a1)
(hpxmov (& 1) '31 a4)
(hpxmov a4 (& 2) a4)
(push a1)
(push (@ 101))
(push (@ 102))
(hpxmov a4 '0 a3)
(push a3)
(push '1000)
(mov '2 a4)
(jmp /)
102
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp *)
101
(eval ())
(call #:display:ps:round)
(pop a4)
(diff a1 a4)
(mov a4 a1)
(adjstk '3)
(return)
))
(loader'((entry #:display:ps:round subr1)
(push a1)
(jcall truncate)
(push a1)
(push (@ 103))
(push (@ 104))
(push (& 3))
(push a1)
(mov '2 a4)
(jmp |-|)
104
(eval ())
(push a1)
(push '0.5)
(mov '2 a4)
(jmp >=)
103
(eval ())
(btnil a1 101)
(mov (& 0) a1)
(adjstk '2)
(jmp |1+|)
101
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:fsize subr1)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:display:ps:font-sizestr)
(jcall read-from-string)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(return)
))
(loader'((fentry #:display:ps:width-substring nsubr)
(entry #:display:ps:width-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:width-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push '0)
(push (@ 103))
(push (& 3))
(mov (& 5) a4)
(plus (& 4) a4)
(push a4)
(mov '2 a4)
(jmp min)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
102
(eval ())
(mov a1 (& 0))
(push (@ 104))
(push '0)
(push (& 3))
(mov '2 a4)
(jmp max)
104
(eval ())
(mov a1 (& 1))
(push (@ 105))
(push (& 3))
(push a1)
(push (& 3))
(mov '3 a4)
(jmp substring)
105
(eval ())
(call #:display:ps:no-control)
(push a1)
(hpxmov (& 4) '0 a4)
(push a4)
(hpxmov (& 6) '30 a3)
(hpxmov a3 a4 a3)
(push a3)
(mov a3 a1)
(call #:display:ps:fsize)
(push a1)
(mov (& 1) a1)
(jcall #:display:ps:font-family)
(mov '"cour" a2)
(jcall equal)
(btnil a1 106)
(hgsize (& 3) a1)
(push a1)
(push (@ 108))
(push (& 2))
(push '0.6)
(mov '2 a4)
(jmp *)
108
(eval ())
(call #:display:ps:round)
(pop a4)
(times a1 a4)
(mov a4 a1)
(adjstk '9)
(return)
106
(hpxmov (& 8) '31 a4)
(hpxmov a4 (& 2) a4)
(push a4)
(mov (& 4) a1)
(jcall explode)
(push (@ 109))
(push '|+|)
(push a1)
(push nil)
110
(bfcons (& 1) 111)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 112))
(push (& 7))
(push (@ 113))
(mov (& 3) a4)
(diff '31 a4)
(hpxmov (& 8) a4 a4)
(push (car a4))
(push '1000)
(mov '2 a4)
(jmp /)
113
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
112
(eval ())
(call #:display:ps:round)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 110)
111
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp apply)
109
(eval ())
(adjstk '10)
(return)
))
(loader'((entry #:display:ps:no-control subr1)
(push a1)
(push '"")
(push '0)
(push nil)
(hgsize a1 a4)
(bra 102)
101
(push a4)
(hbxmov (& 4) (& 2) a4)
(mov a4 (& 1))
(cnblt a4 '32 104)
(push (@ 105))
(push (& 4))
(mov a4 a1)
(jcall ascii)
(push a1)
(mov '2 a4)
(jmp catenate)
105
(eval ())
(mov a1 (& 3))
104
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(pop a4)
102
(sobgez a4 101)
(mov (& 2) a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:height-substring nsubr)
(entry #:display:ps:height-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:height-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 4) '30 a4)
(push a4)
(push (@ 102))
(mov '0 a4)
(jmp current-font)
102
(eval ())
(pop a4)
(hpxmov a4 a1 a4)
(mov a4 a1)
(adjstk '5)
(bra #:display:ps:fsize)
))
(loader'((fentry #:display:ps:x-base-substring nsubr)
(entry #:display:ps:x-base-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:x-base-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push '0)
(push (@ 103))
(push (& 3))
(mov (& 5) a4)
(plus (& 4) a4)
(push a4)
(mov '2 a4)
(jmp min)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
102
(eval ())
(mov a1 (& 0))
(push (@ 104))
(push '0)
(push (& 3))
(mov '2 a4)
(jmp max)
104
(eval ())
(mov a1 (& 1))
(cabeq '0 (& 0) 105)
(push (@ 107))
(push (& 3))
(push a1)
(push (& 3))
(mov '3 a4)
(jmp substring)
107
(eval ())
(call #:display:ps:no-control)
(hpxmov (& 3) '0 a4)
(push a4)
(hpxmov (& 5) '30 a3)
(hpxmov a3 a4 a3)
(mov a3 a1)
(call #:display:ps:fsize)
(push a1)
(hbxmov (& 4) (& 3) a4)
(diff '31 a4)
(hpxmov (& 6) '31 a3)
(hpxmov a3 (& 1) a3)
(push (@ 108))
(push (@ 109))
(hpxmov a3 a4 a2)
(push (cdr a2))
(push '1000)
(mov '2 a4)
(jmp /)
109
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp *)
108
(eval ())
(adjstk '7)
(bra #:display:ps:round)
105
(mov '0 a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:y-base-substring nsubr)
(entry #:display:ps:y-base-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:y-base-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(mov '0 a4)
(jmp current-font)
102
(eval ())
(mov a1 a2)
(mov (& 4) a1)
(adjstk '5)
(bra #:display:ps:ps-font-ascent)
))
(loader'((fentry #:display:ps:x-inc-substring nsubr)
(entry #:display:ps:x-inc-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:x-inc-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(jmp #:display:ps:width-substring)
102
(eval ())
(push a1)
(push (@ 103))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(push '0)
(mov '5 a4)
(jmp #:display:ps:x-base-substring)
103
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:y-inc-substring nsubr)
(entry #:display:ps:y-inc-substring nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:y-inc-substring a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov '0 a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:font-ascent subr2)
(entry #:display:ps:font-ascent subr2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-font)
101
(eval ())
(mov a1 a2)
(pop a1)
(bra #:display:ps:ps-font-ascent)
))
(loader'((fentry #:display:ps:font-height subr2)
(entry #:display:ps:font-height subr2)
(hpxmov a1 '30 a1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-font)
101
(eval ())
(pop a4)
(hpxmov a4 a1 a1)
(bra #:display:ps:fsize)
))
(loader'((entry #:display:ps:init-line-style subr1)
(hpmovx '#[(1 . 0) (1 . 0) (1 . 1) (1 . 2) (2 . 0) (2 . 1) (2 . 2) (3 . 0) (3 . 1) (3 . 2)] a1 '28)
(mov '#[(1 . 0) (1 . 0) (1 . 1) (1 . 2) (2 . 0) (2 . 1) (2 . 2) (3 . 0) (3 . 1) (3 . 2)] a1)
(return)
))
(loader'((fentry #:display:ps:line-style-max subr1)
(entry #:display:ps:line-style-max subr1)
(hpxmov a1 '28 a1)
(hgsize a1 a1)
(diff '1 a1)
(return)
))
(loader'((fentry #:display:ps:current-line-style subr3)
(entry #:display:ps:current-line-style subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:make-line-style subr3)
(entry #:display:ps:make-line-style subr3)
(push a3)
(push a2)
(push a1)
(hpxmov a1 '28 a4)
(push a4)
(jcall #:display:ps:line-style-max)
(mov '2 a4)
(plus a1 a4)
(mov '0 a2)
(mov a4 a1)
(jcall makevector)
(push a1)
(push (@ 101))
(push a1)
(push '0)
(push (& 4))
(push '0)
(hgsize (& 6) a4)
(push a4)
(mov '5 a4)
(jmp bltvector)
101
(eval ())
(hgsize (& 1) a4)
(push a4)
(mov (& 5) a2)
(mov (& 4) a1)
(jcall cons)
(pop a4)
(hpmovx a1 (& 0) a4)
(hpmovx (& 0) (& 2) '28)
(hgsize (& 1) a1)
(adjstk '5)
(return)
))
(loader'((entry #:display:ps:init-pattern subr1)
(push a1)
(hpmovx '#[] a1 '29)
(push (@ 101))
(push a1)
(push '16)
(push '16)
(push '#[#*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000 #*0000])
(mov '4 a4)
(bra #:display:ps:add-a-pattern)
101
(eval ())
(push (@ 102))
(push (& 1))
(push '16)
(push '16)
(push '#[#*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF #*FFFF])
(mov '4 a4)
(bra #:display:ps:add-a-pattern)
102
(eval ())
(push (@ 103))
(push (& 1))
(push '16)
(push '16)
(push '#[#*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555 #*AAAA #*5555])
(mov '4 a4)
(bra #:display:ps:add-a-pattern)
103
(eval ())
(push (@ 104))
(push (& 1))
(push '16)
(push '16)
(push '#[#*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222 #*8888 #*2222])
(mov '4 a4)
(bra #:display:ps:add-a-pattern)
104
(eval ())
(push (@ 105))
(push (& 1))
(push '16)
(push '16)
(push '#[#*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD #*7777 #*DDDD])
(mov '4 a4)
(bra #:display:ps:add-a-pattern)
105
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:display:ps:add-a-pattern nsubr)
(jcall #:bitmap:make)
(push a1)
(hpmovx (& 3) a1 '0)
(hpmovx (& 2) a1 '1)
(hpmovx (& 4) a1 '3)
(mov a1 a2)
(mov (& 4) a1)
(jcall #:display:ps:create-bitmap)
(push (@ 101))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp #:bitmap:bits)
101
(eval ())
(mov (& 0) a2)
(mov (& 4) a1)
(adjstk '5)
(jmp #:display:ps:make-pattern)
))
(loader'((fentry #:display:ps:pattern-max subr1)
(entry #:display:ps:pattern-max subr1)
(hpxmov a1 '29 a1)
(hgsize a1 a1)
(diff '1 a1)
(return)
))
(loader'((fentry #:display:ps:make-pattern subr2)
(entry #:display:ps:make-pattern subr2)
(push a2)
(push a1)
(hpxmov a1 '29 a4)
(hgsize a4 a4)
(push a4)
(push a1)
(push (@ 101))
(plus '1 a4)
(mov '0 a2)
(mov a4 a1)
(jcall makevector)
(push a1)
(push '0)
(hpxmov (& 5) '29 a3)
(push a3)
(push '0)
(push (& 6))
(mov '5 a4)
(jmp bltvector)
101
(eval ())
(pop a4)
(hpmovx a1 a4 '29)
(hpxmov (& 1) '29 a4)
(hpmovx (& 2) a4 (& 0))
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry #:display:ps:current-pattern subr3)
(entry #:display:ps:current-pattern subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:current-stipple subr3)
(entry #:display:ps:current-stipple subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:current-fill-mode subr3)
(entry #:display:ps:current-fill-mode subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:create-stipple subr3)
(entry #:display:ps:create-stipple subr3)
(push a3)
(push a2)
(push a2)
(jcall #:ps:bitmap:make)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 0) '2 a4)
(push a4)
(hpxmov (& 1) '1 a1)
(mov nil a2)
(jcall makevector)
(pop a4)
(hpmovx a1 a4 '1)
(hpxmov (& 0) '0 a4)
(mov '7 a3)
(plus a4 a3)
(quo '8 a3)
(push a3)
(hpxmov (& 1) '2 a4)
(push a4)
(hpxmov (& 2) '1 a1)
(mov nil a2)
(jcall makevector)
(pop a4)
(hpmovx a1 a4 '1)
(hgsize (& 2) a4)
(push a4)
(push a1)
(hpxmov (& 3) '1 a3)
(diff '1 a3)
(push '0)
(push a3)
(mov a3 a1)
(jcall numberp)
(bfnil a1 103)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
103
(push (@ 105))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
105
(eval ())
(bfnil a1 104)
(mov '0 a2)
(mov (& 4) a1)
(jcall makestring)
(hpmovx a1 (& 2) (& 1))
(push (@ 106))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(mov a1 (& 1))
(bra 103)
104
(adjstk '2)
(push (@ 107))
(hpxmov (& 4) '1 a4)
(push a4)
(mov (& 3) a4)
(quo (& 4) a4)
(push a4)
(mov '2 a4)
(jmp min)
107
(eval ())
(diff '1 a1)
(push '0)
(push a1)
(jcall numberp)
(bfnil a1 110)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
110
(push (@ 112))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
112
(eval ())
(bfnil a1 111)
(push (@ 113))
(hpxmov (& 3) (& 2) a4)
(push a4)
(push '0)
(push (& 9))
(mov (& 8) a4)
(times (& 5) a4)
(push a4)
(push (& 9))
(mov '5 a4)
(jmp bltstring)
113
(eval ())
(push (@ 114))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
114
(eval ())
(mov a1 (& 1))
(bra 110)
111
(adjstk '5)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:kill-stipple subr2)
(entry #:display:ps:kill-stipple subr2)
(jmp #:display:ps:kill-bitmap)
))
(loader'((entry #:display:ps:init-color subr1)
(push a1)
(hpxmov a1 '47 a1)
(mov '"foreground" a3)
(mov '"lelisp" a2)
(call #:display:ps:get-ps-default)
(push a1)
(hpxmov (& 1) '47 a1)
(mov '"background" a3)
(mov '"lelisp" a2)
(call #:display:ps:get-ps-default)
(push a1)
(hpxmov (& 2) '47 a1)
(mov '"reversevideo" a3)
(mov '"lelisp" a2)
(call #:display:ps:get-ps-default)
(push a1)
(jcall #:color:make)
(push a1)
(jcall #:color:make)
(push nil)
(push a1)
(mov '"" a2)
(mov (& 5) a1)
(jcall eqstring)
(btnil a1 102)
(mov '"black" (& 5))
102
(mov '"" a2)
(mov (& 4) a1)
(jcall eqstring)
(btnil a1 104)
(mov '"white" (& 4))
104
(mov '"on" a2)
(mov (& 3) a1)
(jcall eqstring)
(btnil a1 106)
(mov '"white" (& 5))
(mov '"black" (& 4))
106
(hpmovx (& 5) (& 2) '0)
(hpmovx (& 6) (& 2) '5)
(mov (& 5) a3)
(mov (& 2) a2)
(mov (& 6) a1)
(jcall #:display:ps:make-named-color)
(hpmovx (& 4) (& 0) '0)
(hpmovx (& 6) (& 0) '5)
(mov (& 4) a3)
(mov (& 0) a2)
(mov (& 6) a1)
(jcall #:display:ps:make-named-color)
(hpmovx (& 2) (& 6) '13)
(hpmovx (& 0) (& 6) '12)
(push (@ 107))
(push (& 3))
(push (& 2))
(mov '2 a4)
(jmp list)
107
(eval ())
(hpmovx a1 (& 6) '17)
(push (@ 108))
(hpxmov (& 7) '17 a4)
(push a4)
(push (cvalq #:display:ps:default-colors))
(push nil)
109
(bfcons (& 1) 110)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(jcall #:color:make)
(hpmovx (& 11) a1 '5)
(hpmovx (& 0) a1 '0)
(mov (& 0) a3)
(mov a1 a2)
(mov (& 11) a1)
(jcall #:display:ps:make-named-color)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 109)
110
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp append)
108
(eval ())
(hpmovx a1 (& 6) '17)
(hpmovx '#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] (& 6) '32)
(mov '#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] a1)
(adjstk '7)
(return)
))
(defvar #:display:ps:rgb (if (boundp '#:display:ps:rgb) #:display:ps:rgb #[() () ()]))
(#:messages:put-message 'errnomorecolors 'french '"plus de couleurs disponibles" 'defmessage)
(#:messages:put-message 'errnomorecolors 'english '"no more colours available" 'defmessage)
'errnomorecolors
(#:messages:put-message 'errnosuchcolors 'french '"pas de couleurs ayant ce nom" 'defmessage)
(#:messages:put-message 'errnosuchcolors 'english '"no colour associated with this name" 'defmessage)
'errnosuchcolors
(loader'((entry #:display:ps:do-color subr2)
(push a2)
(push a1)
(push '0)
(push nil)
101
(cnbge (& 1) '256 102)
(btnil (& 3) 102)
(hpxmov (& 2) '44 a4)
(hpxmov a4 (& 1) a4)
(mov a4 (& 0))
(btnil a4 104)
(hpxmov a4 '1 a3)
(hpxmov (& 3) '1 a2)
(cabne a3 a2 104)
(hpxmov a4 '2 a3)
(hpxmov (& 3) '2 a2)
(cabne a3 a2 104)
(hpxmov a4 '3 a3)
(hpxmov (& 3) '3 a2)
(cabne a3 a2 104)
(mov nil (& 3))
104
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 101)
102
(bfnil (& 3) 105)
(mov (& 0) a1)
(adjstk '4)
(return)
105
(mov '0 (& 1))
107
(cnbge (& 1) '256 108)
(hpxmov (& 2) '44 a4)
(hpxmov a4 (& 1) a4)
(btnil a4 108)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 107)
108
(cnblt (& 1) '256 109)
(mov (& 3) a3)
(mov 'errnomorecolors a2)
(mov 'make-color a1)
(jcall error)
(bra 110)
109
(hpmovx (& 1) (& 3) '6)
(mov (cvalq #:display:ps:rgb) a2)
(mov (& 3) a1)
(jcall #:display:ps:get-rgb)
(push (@ 111))
(push (& 3))
(push 'colors)
(push (& 4))
(mov '3 a4)
(jmp #:display:ps:psprin)
111
(eval ())
(push (@ 112))
(push (& 3))
(push '"[(")
(mov '2 a4)
(jmp #:display:ps:psprin)
112
(eval ())
(push (@ 113))
(mov '0 a4)
(jmp outchan)
113
(eval ())
(push a1)
(push (@ 114))
(mov '0 a4)
(jmp rmargin)
114
(eval ())
(push a1)
(push (@ 115))
(mov '0 a4)
(jmp lmargin)
115
(eval ())
(push a1)
(push (@ 116))
(mov '0 a4)
(jmp obase)
116
(eval ())
(push a1)
(push (@ 117))
(push dlink)
(push prot)
(stack dlink)
(push (@ 119))
(hpxmov (& 10) '37 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
119
(eval ())
(push (@ 120))
(push (@ 121))
(mov '0 a4)
(jmp outbuf)
121
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
120
(eval ())
(push (@ 122))
(push '0)
(mov '1 a4)
(jmp lmargin)
122
(eval ())
(push (@ 123))
(push '8)
(mov '1 a4)
(jmp obase)
123
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 124))
(push '\)
(push (@ 125))
(push '255)
(hpxmov (cvalq #:display:ps:rgb) '0 a4)
(push a4)
(mov '2 a4)
(jmp *)
125
(eval ())
(call #:display:ps:round)
(push a1)
(push '\)
(push (@ 126))
(push '255)
(hpxmov (cvalq #:display:ps:rgb) '1 a4)
(push a4)
(mov '2 a4)
(jmp *)
126
(eval ())
(call #:display:ps:round)
(push a1)
(push '\)
(push (@ 127))
(push '255)
(hpxmov (cvalq #:display:ps:rgb) '2 a4)
(push a4)
(mov '2 a4)
(jmp *)
127
(eval ())
(call #:display:ps:round)
(push a1)
(push '")")
(mov '7 a4)
(jmp prin)
124
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 118) a3)
117
(push a3)
(push a2)
(push (@ 128))
(push (& 4))
(mov '1 a4)
(jmp obase)
128
(eval ())
(push (@ 129))
(push (& 5))
(mov '1 a4)
(jmp lmargin)
129
(eval ())
(push (@ 130))
(push (& 6))
(mov '1 a4)
(jmp rmargin)
130
(eval ())
(push (@ 131))
(push (& 7))
(mov '1 a4)
(jmp outchan)
131
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
118
(eval ())
(adjstk '4)
(push (@ 132))
(push (& 3))
(push (@ 133))
(push '255)
(mov (& 7) a1)
(jcall #:display:ps:find-grey)
(push a1)
(mov '2 a4)
(jmp *)
133
(eval ())
(call #:display:ps:round)
(push a1)
(mov '2 a4)
(jmp #:display:ps:psprin)
132
(eval ())
(push (@ 134))
(push (& 3))
(push '"]put")
(mov '2 a4)
(jmp #:display:ps:psprint)
134
(eval ())
(hpxmov (& 2) '44 a4)
(hpmovx (& 3) a4 (& 1))
110
(mov (& 3) a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:make-color nsubr)
(entry #:display:ps:make-color nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:make-color a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov (& 3) a2)
(mov (& 4) a1)
(adjstk '5)
(bra #:display:ps:do-color)
))
(loader'((fentry #:display:ps:make-mutable-color nsubr)
(entry #:display:ps:make-mutable-color nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:make-mutable-color a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov (& 3) a2)
(mov (& 4) a1)
(adjstk '5)
(bra #:display:ps:do-color)
))
(loader'((fentry #:display:ps:kill-color subr2)
(entry #:display:ps:kill-color subr2)
(hpxmov a1 '44 a4)
(hpxmov a2 '6 a3)
(hpmovx nil a4 a3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:make-named-color subr3)
(entry #:display:ps:make-named-color subr3)
(push a2)
(push a1)
(push a2)
(mov a3 a2)
(pop a1)
(call #:display:ps:make-named-pscolor)
(hpxmov (& 0) '17 a4)
(push a4)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(hpxmov (& 0) '0 a1)
(hpxmov (& 4) '0 a2)
(jcall equal)
(btnil a1 104)
(mov (& 0) a4)
(bra 105)
104
(mov nil a4)
105
(adjstk '1)
(mov a4 (& 0))
(bfnil a4 103)
(bra 102)
103
(mov (& 0) a1)
(adjstk '2)
(bfnil a1 101)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:display:ps:do-color)
101
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:make-named-pscolor subr2)
(push a2)
(push a1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '0)
(push (@ 101))
(push '"{")
(push a2)
(push '"}")
(mov '3 a4)
(jmp catenate)
101
(eval ())
(mov a1 (& 4))
(hgsize a1 a4)
(bra 103)
102
(push a4)
(hbxmov (& 5) (& 1) a1)
(jcall lowercase)
(hbmovx a1 (& 5) (& 1))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
103
(sobgez a4 102)
(push (@ 104))
(mov '0 a4)
(jmp inchan)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(mov (cvalq #:display:ps:ps-rgb-file) a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
107
(eval ())
(push (@ 108))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
111
(bfnil (& 14) 112)
(jcall readstring)
(mov a1 (& 13))
(push (@ 115))
(push (& 13))
(push a1)
(mov '2 a4)
(jmp index)
115
(eval ())
(btnil a1 111)
(push (@ 116))
(push (& 14))
(push (@ 117))
(push '125)
(push (& 17))
(mov '2 a4)
(jmp chrpos)
117
(eval ())
(plus '1 a1)
(push a1)
(mov '2 a4)
(jmp substring)
116
(eval ())
(mov a1 (& 14))
(bra 111)
112
(push (@ 118))
(push (@ 119))
(mov '0 a4)
(jmp inchan)
119
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
118
(eval ())
(mov nil a1)
(mov 'eof a2)
(jmp #:llcp:exit)
110
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
108
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 120))
(push (& 4))
(mov '1 a4)
(jmp inchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '1)
(bfnil (& 6) 121)
(bfstrg (& 8) 125)
(hbxmov (& 8) '0 a4)
(cabne '35 a4 125)
(mov (& 8) a1)
(jcall slength)
(cabeq '13 a1 123)
125
(mov (& 8) a3)
(mov 'errnosuchcolors a2)
(mov 'make-color a1)
(adjstk '9)
(jmp error)
123
(push (@ 126))
(mov '0 a4)
(jmp ibase)
126
(eval ())
(push a1)
(push (@ 127))
(push dlink)
(push prot)
(stack dlink)
(push (@ 129))
(push '16)
(mov '1 a4)
(jmp ibase)
129
(eval ())
(push (@ 130))
(push (& 13))
(push '1)
(push '4)
(mov '3 a4)
(jmp substring)
130
(eval ())
(jcall read-from-string)
(lshift '-1 a1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 128) a3)
127
(push a3)
(push a2)
(push (@ 131))
(push (& 4))
(mov '1 a4)
(jmp ibase)
131
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
128
(eval ())
(adjstk '1)
(hpmovx a1 (& 7) '1)
(push (@ 132))
(mov '0 a4)
(jmp ibase)
132
(eval ())
(push a1)
(push (@ 133))
(push dlink)
(push prot)
(stack dlink)
(push (@ 135))
(push '16)
(mov '1 a4)
(jmp ibase)
135
(eval ())
(push (@ 136))
(push (& 13))
(push '5)
(push '8)
(mov '3 a4)
(jmp substring)
136
(eval ())
(jcall read-from-string)
(lshift '-1 a1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 134) a3)
133
(push a3)
(push a2)
(push (@ 137))
(push (& 4))
(mov '1 a4)
(jmp ibase)
137
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
134
(eval ())
(adjstk '1)
(hpmovx a1 (& 7) '2)
(push (@ 138))
(mov '0 a4)
(jmp ibase)
138
(eval ())
(push a1)
(push (@ 139))
(push dlink)
(push prot)
(stack dlink)
(push (@ 141))
(push '16)
(mov '1 a4)
(jmp ibase)
141
(eval ())
(push (@ 142))
(push (& 13))
(push '9)
(push '12)
(mov '3 a4)
(jmp substring)
142
(eval ())
(jcall read-from-string)
(lshift '-1 a1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 140) a3)
139
(push a3)
(push a2)
(push (@ 143))
(push (& 4))
(mov '1 a4)
(jmp ibase)
143
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
140
(eval ())
(adjstk '1)
(hpmovx a1 (& 7) '3)
(adjstk '9)
(return)
121
(mov (& 6) a1)
(jcall read-from-string)
(mov '128 a4)
(times a1 a4)
(mov a4 (& 3))
(push (@ 144))
(push (& 7))
(push (@ 145))
(push '32)
(push (& 10))
(mov '2 a4)
(jmp chrpos)
145
(eval ())
(plus '1 a1)
(push a1)
(mov '2 a4)
(jmp substring)
144
(eval ())
(mov a1 (& 6))
(jcall read-from-string)
(mov '128 a4)
(times a1 a4)
(mov a4 (& 2))
(push (@ 146))
(push (& 7))
(push (@ 147))
(push '32)
(push (& 10))
(mov '2 a4)
(jmp chrpos)
147
(eval ())
(plus '1 a1)
(push a1)
(mov '2 a4)
(jmp substring)
146
(eval ())
(mov a1 (& 6))
(jcall read-from-string)
(mov '128 a4)
(times a1 a4)
(mov a4 (& 1))
(hpmovx (& 3) (& 7) '1)
(hpmovx (& 2) (& 7) '2)
(hpmovx a4 (& 7) '3)
(mov a4 a1)
(adjstk '9)
(return)
))
(loader'((entry #:display:ps:init-window subr1)
(push a1)
(jcall #:image:rectangle:window:make)
(push a1)
(jcall #:ps:extend:make)
(push nil)
(push a1)
(hpmovx '0 (& 2) '0)
(hpmovx '0 (& 2) '1)
(hpxmov (& 3) '3 a1)
(jcall |1+|)
(hpmovx a1 (& 2) '2)
(hpxmov (& 3) '4 a1)
(jcall |1+|)
(hpmovx a1 (& 2) '3)
(hpmovx '"root-window" (& 2) '4)
(hpmovx '0 (& 2) '5)
(hpmovx '1 (& 2) '6)
(hpmovx (& 3) (& 2) '12)
(hpmovx (& 0) (& 2) '8)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:display:ps:create-graph-env)
(hpxmov (& 2) '7 a4)
(mov a4 (& 1))
(hpmovx (& 2) (& 3) '10)
(hpmovx a4 (& 3) '11)
(hpxmov (& 3) '13 a3)
(hpmovx a3 a4 '4)
(hpxmov (& 3) '12 a3)
(hpmovx a3 a4 '5)
(hpmovx nil (& 3) '8)
(push (@ 101))
(push (& 3))
(mov '1 a4)
(jmp list)
101
(eval ())
(hpmovx a1 (& 3) '14)
(hpxmov (& 3) '11 a4)
(hpmovx a4 (& 3) '9)
(jcall #:graph-env:make)
(hpmovx a1 (& 3) '33)
(hpxmov (& 3) '33 a1)
(mov (& 1) a2)
(call #:display:ps:copy-ge)
(hpxmov (& 3) '33 a4)
(hpmovx '-1 a4 '0)
(mov '-1 a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:create-window subr2)
(entry #:display:ps:create-window subr2)
(push a2)
(push a1)
(hpxmov a2 '0 a4)
(push a4)
(hpxmov a2 '1 a3)
(hpxmov a2 '2 a4)
(push a4)
(hpxmov a2 '3 a4)
(push a4)
(hpxmov a2 '4 a4)
(push a4)
(hpxmov a2 '5 a4)
(push a4)
(hpxmov a2 '6 a4)
(push a3)
(push a2)
(jcall #:ps:extend:make)
(pop a4)
(hpmovx a1 a4 '8)
(push (@ 101))
(push 'set-window-hints)
(push (& 9))
(mov '2 a4)
(jmp send)
101
(eval ())
(mov (& 7) a2)
(mov (& 6) a1)
(call #:display:ps:create-graph-env)
(push (@ 104))
(push 'father)
(push (& 9))
(mov '2 a4)
(jmp send)
104
(eval ())
(bfnil a1 103)
(push (@ 105))
(push (& 7))
(push (& 7))
(push (& 3))
(push (& 8))
(push (& 8))
(push (& 13))
(mov '6 a4)
(jmp #:display:ps:psdrawwin)
105
(eval ())
103
(mov (& 7) a1)
(adjstk '8)
(return)
))
(loader'((fentry #:display:ps:create-subwindow subr2)
(entry #:display:ps:create-subwindow subr2)
(push a2)
(push a1)
(hpxmov a2 '0 a4)
(push a4)
(hpxmov a2 '1 a3)
(hpxmov a2 '2 a4)
(push a4)
(hpxmov a2 '3 a4)
(push a4)
(hpxmov a2 '6 a4)
(push a4)
(hpxmov a2 '9 a4)
(push a2)
(jcall #:ps:extend:make)
(pop a4)
(hpmovx a1 a4 '8)
(mov (& 5) a2)
(mov (& 4) a1)
(call #:display:ps:create-graph-env)
(mov (& 5) a1)
(adjstk '6)
(return)
))
(loader'((fentry #:image:rectangle:window:set-window-hints subr1)
(entry #:image:rectangle:window:set-window-hints subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:image:rectangle:window:modify-window-hints subr1)
(entry #:image:rectangle:window:modify-window-hints subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:current-window subr2)
(entry #:display:ps:current-window subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:uncurrent-window subr2)
(entry #:display:ps:uncurrent-window subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:move-window nsubr)
(entry #:display:ps:move-window nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:move-window a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 4))
(push (& 4))
(push (& 4))
(push (& 4))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '9 a4)
(jmp #:display:ps:modify-window)
102
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:resize-window nsubr)
(entry #:display:ps:resize-window nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:resize-window a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 4))
(push (& 4))
(push nil)
(push nil)
(push (& 6))
(push (& 6))
(push nil)
(push nil)
(push nil)
(mov '9 a4)
(jmp #:display:ps:modify-window)
102
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:move-resize-window nsubr)
(entry #:display:ps:move-resize-window nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:move-resize-window a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(push nil)
(push nil)
(push nil)
(mov '9 a4)
(jmp #:display:ps:modify-window)
102
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry #:display:ps:window-events-list subr3)
(entry #:display:ps:window-events-list subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:window-title subr3)
(entry #:display:ps:window-title subr3)
(push (@ 101))
(push a1)
(push a2)
(push nil)
(push nil)
(push nil)
(push nil)
(push a3)
(push nil)
(push nil)
(mov '9 a4)
(jmp #:display:ps:modify-window)
101
(eval ())
(return)
))
(loader'((fentry #:display:ps:window-state subr3)
(entry #:display:ps:window-state subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:window-background subr3)
(entry #:display:ps:window-background subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:window-border subr3)
(entry #:display:ps:window-border subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:window-change-attributes nsubr)
(entry #:display:ps:window-change-attributes nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:window-change-attributes a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:modify-window nsubr)
(entry #:display:ps:modify-window nsubr)
(cnbeq a4 '9 101)
(mov '#:display:ps:modify-window a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(btnil (& 6) 103)
(hpmovx (& 6) (& 7) '0)
103
(btnil (& 5) 105)
(hpmovx (& 5) (& 7) '1)
105
(btnil (& 4) 107)
(hpmovx (& 4) (& 7) '2)
107
(btnil (& 3) 109)
(hpmovx (& 3) (& 7) '3)
109
(btnil (& 2) 111)
(hpmovx (& 2) (& 7) '4)
111
(btnil (& 1) 113)
(hpmovx (& 1) (& 7) '5)
113
(btnil (& 0) 115)
(hpmovx (& 0) (& 7) '6)
115
(mov (& 7) a2)
(mov (& 8) a1)
(call #:display:ps:set-clip-for-subwindows)
(hpxmov (& 8) '8 a4)
(cabne (& 7) a4 117)
(push (@ 118))
(push (& 9))
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 13))
(mov '6 a4)
(jmp #:display:ps:pscurwindow)
118
(eval ())
117
(push (@ 119))
(push 'modify-window-hints)
(push (& 9))
(mov '2 a4)
(jmp send)
119
(eval ())
(adjstk '9)
(return)
))
(loader'((fentry #:display:ps:update-window nsubr)
(entry #:display:ps:update-window nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:update-window a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(btnil (& 3) 103)
(hpmovx (& 3) (& 4) '0)
103
(btnil (& 2) 105)
(hpmovx (& 2) (& 4) '1)
105
(btnil (& 1) 107)
(hpmovx (& 1) (& 4) '2)
107
(btnil (& 0) 109)
(hpmovx (& 0) (& 4) '3)
109
(mov (& 4) a2)
(mov (& 5) a1)
(call #:display:ps:set-clip-for-subwindows)
(hpxmov (& 5) '8 a4)
(cabne (& 4) a4 111)
(push (@ 112))
(push (& 6))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 10))
(mov '6 a4)
(jmp #:display:ps:pscurwindow)
112
(eval ())
111
(push (@ 113))
(push 'modify-window-hints)
(push (& 6))
(mov '2 a4)
(jmp send)
113
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry #:display:ps:kill-window subr2)
(entry #:display:ps:kill-window subr2)
(hpxmov a2 '8 a4)
(hpmovx nil a4 '4)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:pop-window subr2)
(entry #:display:ps:pop-window subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:move-behind-window subr3)
(entry #:display:ps:move-behind-window subr3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:current-keyboard-focus-window subr2)
(entry #:display:ps:current-keyboard-focus-window subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:uncurrent-keyboard-focus-window subr2)
(entry #:display:ps:uncurrent-keyboard-focus-window subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:find-window subr3)
(entry #:display:ps:find-window subr3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:map-window nsubr)
(entry #:display:ps:map-window nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:map-window a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 4) '8 a4)
(hpxmov a4 '1 a4)
(push a4)
(mov (& 5) a1)
(jcall #:display:ps:top-window)
(hpxmov a1 '0 a3)
(pop a4)
(plus a3 a4)
(mov (& 3) a3)
(diff a4 a3)
(mov (& 1) a4)
(mov a3 (cval a4))
(hpxmov (& 4) '8 a3)
(hpxmov a3 '2 a3)
(push a3)
(mov (& 5) a1)
(jcall #:display:ps:top-window)
(hpxmov a1 '1 a2)
(pop a4)
(plus a2 a4)
(mov (& 2) a3)
(diff a4 a3)
(mov (& 0) a4)
(mov a3 (cval a4))
(mov a3 a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:ps:window-clear-region nsubr)
(entry #:display:ps:window-clear-region nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:window-clear-region a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(mov '0 a4)
(jmp current-window)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp current-pattern)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push (& 10))
(mov '1 a4)
(jmp current-window)
106
(eval ())
(push (@ 107))
(push '0)
(mov '1 a4)
(jmp current-pattern)
107
(eval ())
(mov (& 10) a1)
(jcall #:display:ps:psge)
(push (@ 108))
(push (& 11))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push 't)
(mov '6 a4)
(jmp #:display:ps:psrect)
108
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 109))
(push (& 4))
(mov '1 a4)
(jmp current-pattern)
109
(eval ())
(push (@ 110))
(push (& 5))
(mov '1 a4)
(jmp current-window)
110
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '8)
(return)
))
(loader'((entry #:display:ps:create-graph-env subr2)
(push a2)
(push a1)
(hpxmov a2 '7 a4)
(push a4)
(bfnil a4 102)
(jcall #:graph-env:make)
(mov a1 (& 0))
(hpmovx a1 (& 2) '7)
(hpmovx '1 a1 '2)
(hpxmov (& 1) '11 a4)
(btnil a4 102)
(hpxmov (& 1) '11 a4)
(hpxmov a4 '4 a4)
(hpmovx a4 a1 '4)
(hpxmov (& 1) '11 a4)
(hpxmov a4 '5 a4)
(hpmovx a4 a1 '5)
102
(hpmovx '0 (& 0) '6)
(hpmovx '0 (& 0) '7)
(hpxmov (& 2) '2 a4)
(hpmovx a4 (& 0) '8)
(hpxmov (& 2) '3 a4)
(hpmovx a4 (& 0) '9)
(hpmovx (& 1) (& 0) '11)
(hpxmov (& 2) '8 a4)
(hpmovx a4 (& 0) '12)
(hpxmov (& 0) '0 a4)
(push a4)
(hpxmov (& 3) '8 a3)
(hpmovx 't a3 '4)
(hpxmov (& 1) '12 a3)
(push a3)
(mov a4 a2)
(mov (& 3) a1)
(call #:display:ps:ps-font-ascent)
(pop a4)
(hpmovx a1 a4 '6)
(hpxmov (& 1) '12 a4)
(push a4)
(hpxmov (& 3) '30 a1)
(hpxmov a1 (& 1) a1)
(call #:display:ps:fsize)
(pop a4)
(hpmovx a1 a4 '7)
(hpxmov (& 1) '12 a4)
(push a4)
(jcall #:image:rectangle:make)
(pop a4)
(hpmovx a1 a4 '0)
(mov (& 3) a2)
(mov (& 2) a1)
(call #:display:ps:set-clip-for-window)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((entry #:display:ps:copy-ge subr2)
(hpxmov a2 '16 a4)
(hpmovx a4 a1 '16)
(hpxmov a2 '15 a4)
(hpmovx a4 a1 '15)
(hpxmov a2 '0 a4)
(hpmovx a4 a1 '0)
(hpxmov a2 '1 a4)
(hpmovx a4 a1 '1)
(hpxmov a2 '2 a4)
(hpmovx a4 a1 '2)
(hpxmov a2 '3 a4)
(hpmovx a4 a1 '3)
(hpxmov a2 '4 a4)
(hpmovx a4 a1 '4)
(hpxmov a2 '5 a4)
(hpmovx a4 a1 '5)
(hpxmov a2 '6 a4)
(hpmovx a4 a1 '6)
(hpxmov a2 '7 a4)
(hpmovx a4 a1 '7)
(hpxmov a2 '8 a4)
(hpmovx a4 a1 '8)
(hpxmov a2 '9 a4)
(hpmovx a4 a1 '9)
(hpxmov a2 '10 a4)
(hpmovx a4 a1 '10)
(hpxmov a2 '11 a4)
(hpmovx a4 a1 '11)
(hpxmov a2 '12 a4)
(hpmovx a4 a1 '12)
(mov a4 a1)
(return)
))
(loader'((entry #:display:ps:set-clip-for-window subr2)
(push a2)
(mov a2 a1)
(call #:display:ps:set-offsets)
(mov (& 0) a1)
(call #:display:ps:set-view-rectangle)
(mov (& 0) a1)
(adjstk '1)
(bra #:display:ps:set-visibility)
))
(loader'((entry #:display:ps:set-clip-for-subwindows subr2)
(push a2)
(push a1)
(call #:display:ps:set-clip-for-window)
(hpxmov (& 1) '13 a4)
(push a4)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(call #:display:ps:set-clip-for-subwindows)
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:display:ps:set-offsets subr1)
(hpxmov a1 '9 a4)
(push a4)
(hpxmov a1 '8 a3)
(btnil a4 101)
(hpxmov a1 '0 a2)
(hpxmov a4 '8 a4)
(hpxmov a4 '1 a4)
(plus a4 a2)
(bra 102)
101
(mov '0 a2)
102
(hpmovx a2 a3 '1)
(hpxmov a1 '8 a4)
(btnil (& 0) 103)
(hpxmov a1 '1 a3)
(hpxmov (& 0) '8 a2)
(hpxmov a2 '2 a2)
(plus a2 a3)
(bra 104)
103
(mov '0 a3)
104
(hpmovx a3 a4 '2)
(mov a3 a1)
(adjstk '1)
(return)
))
(loader'((entry #:display:ps:intersect nsubr)
(hpxmov (& 4) '0 a4)
(push a4)
(hpxmov (& 5) '1 a3)
(hpxmov (& 5) '2 a2)
(hpxmov (& 5) '3 a1)
(mov (& 4) a4)
(plus (& 2) a4)
(push a4)
(mov (& 4) a4)
(plus (& 2) a4)
(push a4)
(push a1)
(push a2)
(push a3)
(mov (& 9) a2)
(mov (& 5) a1)
(jcall gt)
(mov a1 a4)
(bfnil a4 101)
(mov (& 9) a4)
101
(hpmovx a4 (& 10) '0)
(mov (& 8) a2)
(mov (& 0) a1)
(jcall gt)
(mov a1 a4)
(bfnil a4 102)
(mov (& 8) a4)
102
(hpmovx a4 (& 10) '1)
(push (@ 103))
(push '0)
(mov (& 7) a4)
(plus (& 3) a4)
(mov (& 6) a2)
(mov a4 a1)
(jcall lt)
(mov a1 a4)
(bfnil a4 104)
(mov (& 6) a4)
104
(hpxmov (& 12) '0 a3)
(diff a3 a4)
(push a4)
(mov '2 a4)
(jmp max)
103
(eval ())
(hpmovx a1 (& 10) '2)
(push (@ 105))
(push '0)
(mov (& 2) a4)
(plus (& 4) a4)
(mov (& 5) a2)
(mov a4 a1)
(jcall lt)
(mov a1 a4)
(bfnil a4 106)
(mov (& 5) a4)
106
(hpxmov (& 12) '1 a3)
(diff a3 a4)
(push a4)
(mov '2 a4)
(jmp max)
105
(eval ())
(hpmovx a1 (& 10) '3)
(mov (& 10) a1)
(adjstk '11)
(return)
))
(loader'((entry #:display:ps:set-view-rectangle subr1)
(push a1)
(hpxmov a1 '7 a4)
(push a4)
(hpxmov a1 '9 a3)
(push a3)
(hpxmov a4 '12 a2)
(hpxmov a2 '0 a2)
(push a2)
(hpmovx '0 a2 '0)
(hpmovx '0 a2 '1)
(hpxmov a1 '2 a4)
(hpmovx a4 a2 '2)
(hpxmov a1 '3 a4)
(hpmovx a4 a2 '3)
(hpxmov (& 2) '12 a4)
(push a4)
(push (@ 101))
(push a2)
(hpxmov (& 5) '6 a4)
(push a4)
(hpxmov (& 6) '7 a4)
(push a4)
(hpxmov (& 7) '8 a4)
(push a4)
(hpxmov (& 8) '9 a4)
(push a4)
(mov '5 a4)
(bra #:display:ps:intersect)
101
(eval ())
(pop a4)
(hpmovx a1 a4 '0)
(btnil (& 1) 102)
(hpxmov (& 1) '7 a4)
(hpxmov a4 '12 a4)
(hpxmov a4 '0 a4)
(hpxmov (& 2) '12 a3)
(push a3)
(push (@ 104))
(push (& 2))
(hpxmov a4 '0 a2)
(hpxmov (& 6) '0 a1)
(diff a1 a2)
(push a2)
(hpxmov a4 '1 a2)
(hpxmov (& 7) '1 a1)
(diff a1 a2)
(push a2)
(hpxmov a4 '2 a2)
(push a2)
(hpxmov a4 '3 a2)
(push a2)
(mov '5 a4)
(bra #:display:ps:intersect)
104
(eval ())
(pop a4)
(hpmovx a1 a4 '0)
(adjstk '4)
(return)
102
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:display:ps:set-visibility subr1)
(hpxmov a1 '9 a4)
(hpxmov a1 '7 a3)
(hpxmov a3 '12 a3)
(hpxmov a3 '0 a3)
(push a3)
(hpxmov a1 '8 a2)
(push a2)
(btnil a4 101)
(hpxmov a4 '8 a4)
(hpxmov a4 '3 a4)
(btnil a4 102)
(hpxmov a1 '6 a2)
(mov '1 a1)
(jcall eq)
(mov a1 a4)
(btnil a4 102)
(hpxmov (& 1) '2 a1)
(mov '0 a2)
(jcall gt)
(mov a1 a4)
(btnil a4 102)
(hpxmov (& 1) '3 a1)
(mov '0 a2)
(jcall gt)
(mov a1 a4)
(bra 102)
101
(hpxmov a1 '6 a2)
(mov '1 a1)
(jcall eq)
(mov a1 a4)
102
(pop a3)
(hpmovx a4 a3 '3)
(mov a4 a1)
(adjstk '1)
(return)
))
(defvar #:display:ps:cnstring " ")
(loader'((fentry #:display:ps:draw-cn nsubr)
(entry #:display:ps:draw-cn nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:draw-cn a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push 't)
(mov '6 a4)
(bra #:display:ps:draw-cn-internal)
102
(eval ())
(adjstk '5)
(return)
))
(synonym '#:display:ps:float-draw-cn '#:display:ps:draw-cn)
(loader'((fentry #:display:ps:draw-cn-nobackground nsubr)
(entry #:display:ps:draw-cn-nobackground nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:draw-cn-nobackground a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push nil)
(mov '6 a4)
(bra #:display:ps:draw-cn-internal)
102
(eval ())
(adjstk '5)
(return)
))
(synonym '#:display:ps:float-draw-cn-nobackground '#:display:ps:draw-cn-nobackground)
(loader'((entry #:display:ps:draw-cn-internal nsubr)
(mov (& 5) a1)
(jcall #:display:ps:psge)
(hbmovx (& 1) (cvalq #:display:ps:cnstring) '0)
(btnil (& 0) 102)
(mov (& 5) a1)
(jcall #:display:ps:drawback)
(btnil a1 102)
(push (@ 103))
(mov '0 a4)
(jmp current-pattern)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push '0)
(mov '1 a4)
(jmp current-pattern)
106
(eval ())
(push (@ 107))
(push (& 10))
(push (& 10))
(push (& 10))
(push (@ 108))
(push (& 11))
(mov '1 a3)
(mov '0 a2)
(mov (cvalq #:display:ps:cnstring) a1)
(jcall y-base-substring)
(push a1)
(mov '2 a4)
(jmp |-|)
108
(eval ())
(push a1)
(mov '1 a3)
(mov '0 a2)
(mov (cvalq #:display:ps:cnstring) a1)
(jcall width-substring)
(push a1)
(mov '1 a3)
(mov '0 a2)
(mov (cvalq #:display:ps:cnstring) a1)
(jcall height-substring)
(push a1)
(mov '6 a4)
(jmp #:display:ps:fill-rectangle)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 109))
(push (& 4))
(mov '1 a4)
(jmp current-pattern)
109
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
102
(mov (& 5) a1)
(jcall #:display:ps:drawfore)
(btnil a1 111)
(push (@ 112))
(push (& 6))
(push (& 5))
(push (@ 113))
(hpxmov (& 9) '4 a4)
(push a4)
(push (& 7))
(mov '2 a4)
(jmp |-|)
113
(eval ())
(push a1)
(push (cvalq #:display:ps:moveto))
(mov '4 a4)
(jmp #:display:ps:psprin)
112
(eval ())
(mov (cvalq #:display:ps:cnstring) a2)
(mov (& 5) a1)
(jcall #:display:ps:psstring)
(push (@ 114))
(push (& 6))
(push 'llshow)
(mov '2 a4)
(jmp #:display:ps:psprint)
114
(eval ())
111
(mov '0 a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:ps:draw-substring nsubr)
(entry #:display:ps:draw-substring nsubr)
(cnbeq a4 '7 101)
(mov '#:display:ps:draw-substring a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push 't)
(mov '8 a4)
(bra #:display:ps:draw-substring-internal)
102
(eval ())
(adjstk '7)
(return)
))
(synonym '#:display:ps:float-draw-substring '#:display:ps:draw-substring)
(loader'((fentry #:display:ps:draw-substring-nobackground nsubr)
(entry #:display:ps:draw-substring-nobackground nsubr)
(cnbeq a4 '7 101)
(mov '#:display:ps:draw-substring-nobackground a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push nil)
(mov '8 a4)
(bra #:display:ps:draw-substring-internal)
102
(eval ())
(adjstk '7)
(return)
))
(synonym '#:display:ps:float-draw-substring-nobackground '#:display:ps:draw-substring-nobackground)
(loader'((entry #:display:ps:draw-substring-internal nsubr)
(push (@ 101))
(push '0)
(push (@ 102))
(push (& 4))
(mov (& 6) a4)
(plus (& 5) a4)
(push a4)
(mov '2 a4)
(jmp min)
102
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
101
(eval ())
(mov a1 (& 1))
(push (@ 103))
(push '0)
(push (& 4))
(mov '2 a4)
(jmp max)
103
(eval ())
(mov a1 (& 2))
(mov (& 7) a1)
(jcall #:display:ps:psge)
(hgsize (& 3) a4)
(push a4)
(diff (& 3) a4)
(cnbgt (& 3) (& 0) 105)
(cnble (& 2) a4 107)
(mov a4 (& 2))
107
(push (@ 108))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '3 a4)
(jmp substring)
108
(eval ())
(push a1)
(btnil (& 2) 110)
(mov (& 9) a1)
(jcall #:display:ps:drawback)
(btnil a1 110)
(push (@ 111))
(mov '0 a4)
(jmp current-pattern)
111
(eval ())
(push a1)
(push (@ 112))
(push dlink)
(push prot)
(stack dlink)
(push (@ 114))
(push '0)
(mov '1 a4)
(jmp current-pattern)
114
(eval ())
(push (@ 115))
(push (& 14))
(push (& 14))
(push (& 14))
(push (@ 116))
(push (& 15))
(mov (& 13) a3)
(mov (& 14) a2)
(mov (& 15) a1)
(jcall y-base-substring)
(push a1)
(mov '2 a4)
(jmp |-|)
116
(eval ())
(push a1)
(mov (& 12) a3)
(mov (& 13) a2)
(mov (& 14) a1)
(jcall width-substring)
(push a1)
(mov (& 13) a3)
(mov (& 14) a2)
(mov (& 15) a1)
(jcall height-substring)
(push a1)
(mov '6 a4)
(jmp #:display:ps:fill-rectangle)
115
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 113) a3)
112
(push a3)
(push a2)
(push (@ 117))
(push (& 4))
(mov '1 a4)
(jmp current-pattern)
117
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
113
(eval ())
(adjstk '1)
110
(mov (& 9) a1)
(jcall #:display:ps:drawfore)
(btnil a1 119)
(push (@ 120))
(push (& 10))
(push (& 9))
(push (@ 121))
(hpxmov (& 13) '4 a4)
(push a4)
(push (& 11))
(mov '2 a4)
(jmp |-|)
121
(eval ())
(push a1)
(push (cvalq #:display:ps:moveto))
(mov '4 a4)
(jmp #:display:ps:psprin)
120
(eval ())
(mov (& 0) a2)
(mov (& 9) a1)
(jcall #:display:ps:psstring)
(push (@ 122))
(push (& 10))
(push 'llshow)
(mov '2 a4)
(jmp #:display:ps:psprint)
122
(eval ())
119
(adjstk '1)
105
(adjstk '1)
(mov '0 a1)
(adjstk '8)
(return)
))
(loader'((fentry #:display:ps:draw-point nsubr)
(entry #:display:ps:draw-point nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:draw-point a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov (& 3) a1)
(jcall #:display:ps:psge)
(mov (& 3) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push (@ 104))
(push (& 4))
(push '1)
(push '1)
(push (& 5))
(push (@ 105))
(hpxmov (& 9) '4 a4)
(push a4)
(push (& 7))
(mov '2 a4)
(jmp |-|)
105
(eval ())
(push a1)
(push (cvalq #:display:ps:rectpath))
(push (cvalq #:display:ps:fill))
(mov '7 a4)
(jmp #:display:ps:psprint)
104
(eval ())
103
(mov '0 a1)
(adjstk '4)
(return)
))
(synonym '#:display:ps:float-draw-point '#:display:ps:draw-point)
(loader'((fentry #:display:ps:draw-polymarker nsubr)
(entry #:display:ps:draw-polymarker nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:draw-polymarker a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push '0)
(mov (& 3) a4)
(bra 103)
102
(push a4)
(push (@ 104))
(push (& 7))
(push (& 7))
(hpxmov (& 6) (& 4) a4)
(push a4)
(hpxmov (& 6) (& 5) a4)
(push a4)
(mov '4 a4)
(jmp #:display:ps:draw-point)
104
(eval ())
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
103
(sobgez a4 102)
(mov 't a1)
(adjstk '6)
(return)
))
(synonym '#:display:ps:float-draw-polymarker '#:display:ps:draw-polymarker)
(loader'((fentry #:display:ps:draw-line nsubr)
(entry #:display:ps:draw-line nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:draw-line a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 5) a1)
(jcall #:display:ps:psge)
(mov (& 5) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push (@ 104))
(push (& 6))
(push (cvalq #:display:ps:newpath))
(push (@ 105))
(push (& 7))
(push '0.5)
(mov '2 a4)
(jmp |+|)
105
(eval ())
(push a1)
(push (@ 106))
(hpxmov (& 10) '4 a4)
(push a4)
(push (@ 107))
(push (& 9))
(push '0.5)
(mov '2 a4)
(jmp |+|)
107
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
106
(eval ())
(push a1)
(push (cvalq #:display:ps:moveto))
(push (@ 108))
(push (& 8))
(push '0.5)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(push a1)
(push (@ 109))
(hpxmov (& 13) '4 a4)
(push a4)
(push (@ 110))
(push (& 10))
(push '0.5)
(mov '2 a4)
(jmp |+|)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
109
(eval ())
(push a1)
(push (cvalq #:display:ps:lineto))
(mov '8 a4)
(jmp #:display:ps:psprint)
104
(eval ())
(mov (& 5) a1)
(jcall #:display:ps:stroke)
103
(mov '0 a1)
(adjstk '6)
(return)
))
(synonym '#:display:ps:float-draw-line '#:display:ps:draw-line)
(loader'((fentry #:display:ps:draw-rectangle nsubr)
(entry #:display:ps:draw-rectangle nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:draw-rectangle a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 5) a1)
(jcall #:display:ps:psge)
(mov (& 5) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push (@ 104))
(push (& 6))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push nil)
(mov '6 a4)
(jmp #:display:ps:psrect)
104
(eval ())
103
(mov '0 a1)
(adjstk '6)
(return)
))
(synonym '#:display:ps:float-draw-rectangle '#:display:ps:draw-rectangle)
(loader'((fentry #:display:ps:draw-rectangles nsubr)
(entry #:display:ps:draw-rectangles nsubr)
(cnbeq a4 '7 101)
(mov '#:display:ps:draw-rectangles a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(mov (& 6) a1)
(jcall #:display:ps:psge)
(mov (& 6) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push '0)
(mov (& 5) a4)
(bra 105)
104
(push a4)
(push (@ 106))
(push (& 9))
(mov (& 7) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 107)
(hpxmov (& 7) (& 3) a4)
107
(push a4)
(mov (& 7) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 108)
(hpxmov (& 7) (& 4) a4)
108
(push a4)
(mov (& 7) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 109)
(hpxmov (& 7) (& 5) a4)
109
(push a4)
(mov (& 7) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 110)
(hpxmov (& 7) (& 6) a4)
110
(push a4)
(push nil)
(mov '6 a4)
(jmp #:display:ps:psrect)
106
(eval ())
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
105
(sobgez a4 104)
(adjstk '1)
103
(mov '0 a1)
(adjstk '7)
(return)
))
(synonym '#:display:ps:float-draw-rectangles '#:display:ps:draw-rectangles)
(loader'((fentry #:display:ps:highlight-rectangle nsubr)
(entry #:display:ps:highlight-rectangle nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:highlight-rectangle a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 5) a1)
(jcall #:display:ps:psge)
(mov (& 5) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push (@ 104))
(push (& 6))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push nil)
(mov '6 a4)
(jmp #:display:ps:psrect)
104
(eval ())
103
(mov '0 a1)
(adjstk '6)
(return)
))
(synonym '#:display:ps:float-highlight-rectangle '#:display:ps:highlight-rectangle)
(loader'((fentry #:display:ps:draw-polyline nsubr)
(entry #:display:ps:draw-polyline nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:draw-polyline a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov (& 4) a1)
(jcall #:display:ps:psge)
(mov (& 4) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push (@ 104))
(push (& 5))
(push (& 4))
(push (& 4))
(push (& 4))
(push nil)
(mov '5 a4)
(jmp #:display:ps:pspolyline)
104
(eval ())
103
(mov '0 a1)
(adjstk '5)
(return)
))
(synonym '#:display:ps:float-draw-polyline '#:display:ps:draw-polyline)
(loader'((fentry #:display:ps:draw-segments nsubr)
(entry #:display:ps:draw-segments nsubr)
(cnbeq a4 '7 101)
(mov '#:display:ps:draw-segments a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(mov (& 6) a1)
(jcall #:display:ps:psge)
(mov (& 6) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push (@ 104))
(push (& 7))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(mov '6 a4)
(jmp #:display:ps:pssegments)
104
(eval ())
103
(mov '0 a1)
(adjstk '7)
(return)
))
(synonym '#:display:ps:float-draw-segments '#:display:ps:draw-segments)
(loader'((fentry #:display:ps:draw-ellipse nsubr)
(entry #:display:ps:draw-ellipse nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:draw-ellipse a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 5) a1)
(jcall #:display:ps:psge)
(mov (& 5) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push (@ 104))
(push (& 6))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push '0)
(push '360)
(push nil)
(mov '8 a4)
(jmp #:display:ps:psarc)
104
(eval ())
103
(mov '0 a1)
(adjstk '6)
(return)
))
(synonym '#:display:ps:float-draw-ellipse '#:display:ps:draw-ellipse)
(loader'((fentry #:display:ps:draw-arc nsubr)
(entry #:display:ps:draw-arc nsubr)
(cnbeq a4 '8 101)
(mov '#:display:ps:draw-arc a1)
(mov '8 a2)
(jmp #:llcp:errwna)
101
(mov (& 7) a1)
(jcall #:display:ps:psge)
(mov (& 7) a1)
(jcall #:display:ps:drawfore)
(btnil a1 103)
(push (@ 104))
(push (& 8))
(push (& 7))
(push (& 7))
(push (@ 105))
(push (& 8))
(push '2)
(mov '2 a4)
(jmp /)
105
(eval ())
(push a1)
(push (@ 106))
(push (& 8))
(push '2)
(mov '2 a4)
(jmp /)
106
(eval ())
(push a1)
(push (& 7))
(push (& 7))
(push nil)
(mov '8 a4)
(jmp #:display:ps:psarc)
104
(eval ())
103
(mov '0 a1)
(adjstk '8)
(return)
))
(synonym '#:display:ps:float-draw-arc '#:display:ps:draw-arc)
(loader'((fentry #:display:ps:draw-circle nsubr)
(entry #:display:ps:draw-circle nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:draw-circle a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov (& 4) a1)
(jcall #:display:ps:psge)
(push (@ 102))
(push (& 5))
(push (& 4))
(push (& 4))
(push (& 4))
(push nil)
(mov '5 a4)
(jmp #:display:ps:pscircle)
102
(eval ())
(mov '0 a1)
(adjstk '5)
(return)
))
(synonym '#:display:ps:float-draw-circle '#:display:ps:draw-circle)
(loader'((fentry #:display:ps:fill-rectangle nsubr)
(entry #:display:ps:fill-rectangle nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:fill-rectangle a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 5) a1)
(jcall #:display:ps:psge)
(push (@ 106))
(mov '0 a4)
(jmp current-pattern)
106
(eval ())
(cabne a1 '1 105)
(mov (& 5) a1)
(jcall #:display:ps:drawfore)
(bfnil a1 104)
105
(push (@ 108))
(mov '0 a4)
(jmp current-pattern)
108
(eval ())
(cabne a1 '0 107)
(mov (& 5) a1)
(jcall #:display:ps:drawback)
(bfnil a1 104)
107
(push (@ 109))
(mov '0 a4)
(jmp current-pattern)
109
(eval ())
(mov a1 a4)
(cabeq a4 '0 103)
(cabeq a4 '1 103)
104
(push (@ 110))
(push (& 6))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push 't)
(mov '6 a4)
(jmp #:display:ps:psrect)
110
(eval ())
103
(mov '0 a1)
(adjstk '6)
(return)
))
(synonym '#:display:ps:float-fill-rectangle '#:display:ps:fill-rectangle)
(loader'((fentry #:display:ps:fill-rectangles nsubr)
(entry #:display:ps:fill-rectangles nsubr)
(cnbeq a4 '7 101)
(mov '#:display:ps:fill-rectangles a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(mov (& 6) a1)
(jcall #:display:ps:psge)
(push (@ 106))
(mov '0 a4)
(jmp current-pattern)
106
(eval ())
(cabne a1 '1 105)
(mov (& 6) a1)
(jcall #:display:ps:drawfore)
(bfnil a1 104)
105
(push (@ 108))
(mov '0 a4)
(jmp current-pattern)
108
(eval ())
(cabne a1 '0 107)
(mov (& 6) a1)
(jcall #:display:ps:drawback)
(bfnil a1 104)
107
(push (@ 109))
(mov '0 a4)
(jmp current-pattern)
109
(eval ())
(mov a1 a4)
(cabeq a4 '0 103)
(cabeq a4 '1 103)
104
(push '0)
(mov (& 5) a4)
(bra 111)
110
(push a4)
(push (@ 112))
(push (& 9))
(mov (& 7) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 113)
(hpxmov (& 7) (& 3) a4)
113
(push a4)
(mov (& 7) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 114)
(hpxmov (& 7) (& 4) a4)
114
(push a4)
(mov (& 7) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 115)
(hpxmov (& 7) (& 5) a4)
115
(push a4)
(mov (& 7) a1)
(jcall fixp)
(mov a1 a4)
(bfnil a4 116)
(hpxmov (& 7) (& 6) a4)
116
(push a4)
(push 't)
(mov '6 a4)
(jmp #:display:ps:psrect)
112
(eval ())
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
111
(sobgez a4 110)
(adjstk '1)
103
(mov '0 a1)
(adjstk '7)
(return)
))
(synonym '#:display:ps:float-fill-rectangles '#:display:ps:fill-rectangles)
(loader'((fentry #:display:ps:fill-area nsubr)
(entry #:display:ps:fill-area nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:fill-area a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov (& 4) a1)
(jcall #:display:ps:psge)
(push (@ 106))
(mov '0 a4)
(jmp current-pattern)
106
(eval ())
(cabne a1 '1 105)
(mov (& 4) a1)
(jcall #:display:ps:drawfore)
(bfnil a1 104)
105
(push (@ 108))
(mov '0 a4)
(jmp current-pattern)
108
(eval ())
(cabne a1 '0 107)
(mov (& 4) a1)
(jcall #:display:ps:drawback)
(bfnil a1 104)
107
(push (@ 109))
(mov '0 a4)
(jmp current-pattern)
109
(eval ())
(mov a1 a4)
(cabeq a4 '0 103)
(cabeq a4 '1 103)
104
(push (@ 110))
(push (& 5))
(push (& 4))
(push (& 4))
(push (& 4))
(push 't)
(mov '5 a4)
(jmp #:display:ps:pspolyline)
110
(eval ())
103
(mov '0 a1)
(adjstk '5)
(return)
))
(synonym '#:display:ps:float-fill-area '#:display:ps:fill-area)
(loader'((fentry #:display:ps:fill-ellipse nsubr)
(entry #:display:ps:fill-ellipse nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:fill-ellipse a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 5) a1)
(jcall #:display:ps:psge)
(push (@ 106))
(mov '0 a4)
(jmp current-pattern)
106
(eval ())
(cabne a1 '1 105)
(mov (& 5) a1)
(jcall #:display:ps:drawfore)
(bfnil a1 104)
105
(push (@ 108))
(mov '0 a4)
(jmp current-pattern)
108
(eval ())
(cabne a1 '0 107)
(mov (& 5) a1)
(jcall #:display:ps:drawback)
(bfnil a1 104)
107
(push (@ 109))
(mov '0 a4)
(jmp current-pattern)
109
(eval ())
(mov a1 a4)
(cabeq a4 '0 103)
(cabeq a4 '1 103)
104
(push (@ 110))
(push (& 6))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push '0)
(push '360)
(push 't)
(mov '8 a4)
(jmp #:display:ps:psarc)
110
(eval ())
103
(mov '0 a1)
(adjstk '6)
(return)
))
(synonym '#:display:ps:float-fill-ellipse '#:display:ps:fill-ellipse)
(loader'((fentry #:display:ps:fill-arc nsubr)
(entry #:display:ps:fill-arc nsubr)
(cnbeq a4 '8 101)
(mov '#:display:ps:fill-arc a1)
(mov '8 a2)
(jmp #:llcp:errwna)
101
(mov (& 7) a1)
(jcall #:display:ps:psge)
(push (@ 106))
(mov '0 a4)
(jmp current-pattern)
106
(eval ())
(cabne a1 '1 105)
(mov (& 7) a1)
(jcall #:display:ps:drawfore)
(bfnil a1 104)
105
(push (@ 108))
(mov '0 a4)
(jmp current-pattern)
108
(eval ())
(cabne a1 '0 107)
(mov (& 7) a1)
(jcall #:display:ps:drawback)
(bfnil a1 104)
107
(push (@ 109))
(mov '0 a4)
(jmp current-pattern)
109
(eval ())
(mov a1 a4)
(cabeq a4 '0 103)
(cabeq a4 '1 103)
104
(push (@ 110))
(push (& 8))
(push (& 7))
(push (& 7))
(push (@ 111))
(push (& 8))
(push '2)
(mov '2 a4)
(jmp /)
111
(eval ())
(push a1)
(push (@ 112))
(push (& 8))
(push '2)
(mov '2 a4)
(jmp /)
112
(eval ())
(push a1)
(push (& 7))
(push (& 7))
(push (@ 113))
(mov '0 a4)
(jmp current-arc-mode)
113
(eval ())
(push a1)
(mov '8 a4)
(jmp #:display:ps:psarc)
110
(eval ())
103
(mov '0 a1)
(adjstk '8)
(return)
))
(synonym '#:display:ps:float-fill-arc '#:display:ps:fill-arc)
(loader'((fentry #:display:ps:fill-circle nsubr)
(entry #:display:ps:fill-circle nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:fill-circle a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov (& 4) a1)
(jcall #:display:ps:psge)
(push (@ 106))
(mov '0 a4)
(jmp current-pattern)
106
(eval ())
(cabne a1 '1 105)
(mov (& 4) a1)
(jcall #:display:ps:drawfore)
(bfnil a1 104)
105
(push (@ 108))
(mov '0 a4)
(jmp current-pattern)
108
(eval ())
(cabne a1 '0 107)
(mov (& 4) a1)
(jcall #:display:ps:drawback)
(bfnil a1 104)
107
(push (@ 109))
(mov '0 a4)
(jmp current-pattern)
109
(eval ())
(mov a1 a4)
(cabeq a4 '0 103)
(cabeq a4 '1 103)
104
(push (@ 110))
(push (& 5))
(push (& 4))
(push (& 4))
(push (& 4))
(push 't)
(mov '5 a4)
(jmp #:display:ps:pscircle)
110
(eval ())
103
(mov '0 a1)
(adjstk '5)
(return)
))
(synonym '#:display:ps:float-fill-circle '#:display:ps:fill-circle)
(loader'((fentry #:display:ps:create-menu subr2)
(entry #:display:ps:create-menu subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:kill-menu subr2)
(entry #:display:ps:kill-menu subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:activate-menu nsubr)
(entry #:display:ps:activate-menu nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:activate-menu a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov (& 2) a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:menu-insert-item nsubr)
(entry #:display:ps:menu-insert-item nsubr)
(cnbeq a4 '7 101)
(mov '#:display:ps:menu-insert-item a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(mov (& 5) a1)
(adjstk '7)
(return)
))
(loader'((fentry #:display:ps:menu-insert-item-list nsubr)
(entry #:display:ps:menu-insert-item-list nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:menu-insert-item-list a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov (& 3) a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:menu-delete-item-list subr3)
(entry #:display:ps:menu-delete-item-list subr3)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:menu-delete-item nsubr)
(entry #:display:ps:menu-delete-item nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:menu-delete-item a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov (& 2) a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:menu-modify-item-list nsubr)
(entry #:display:ps:menu-modify-item-list nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:menu-modify-item-list a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov (& 3) a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:menu-modify-item nsubr)
(entry #:display:ps:menu-modify-item nsubr)
(cnbeq a4 '7 101)
(mov '#:display:ps:menu-modify-item a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(mov (& 5) a1)
(adjstk '7)
(return)
))
(loader'((entry #:display:ps:get-ps-default subr3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:psge subr1)
(entry #:display:ps:psge subr1)
(push a1)
(hpxmov a1 '8 a4)
(push a4)
(hpxmov a1 '9 a3)
(hpxmov a3 '0 a2)
(push a2)
(hpxmov a3 '2 a4)
(push a4)
(hpxmov a3 '16 a4)
(push a4)
(hpxmov a3 '15 a4)
(push a4)
(hpxmov a3 '3 a4)
(push a4)
(hpxmov a3 '5 a4)
(push a4)
(hpxmov a3 '4 a4)
(push a4)
(hpxmov a3 '1 a4)
(push a4)
(hpxmov a1 '33 a4)
(push a4)
(hpxmov a4 '0 a4)
(push a4)
(hpxmov (& 1) '16 a4)
(push a4)
(hpxmov (& 2) '15 a4)
(push a4)
(hpxmov (& 3) '2 a4)
(push a4)
(hpxmov (& 4) '3 a4)
(push a4)
(hpxmov (& 5) '4 a4)
(push a4)
(hpxmov (& 6) '5 a4)
(push a4)
(hpxmov (& 7) '1 a4)
(push a4)
(cabeq a2 (& 7) 102)
(call #:display:ps:ps-newfont)
(hpmovx (& 16) (& 8) '0)
102
(cabeq (& 12) (& 3) 104)
(hpmovx (& 12) (& 8) '3)
104
(cabeq (& 10) (& 2) 106)
(hpmovx (& 10) (& 8) '4)
106
(cabeq (& 11) (& 1) 108)
(hpmovx (& 11) (& 8) '5)
108
(cabne (& 12) (& 3) 111)
(cabne (& 10) (& 2) 111)
(cabeq (& 11) (& 1) 110)
111
(mov (& 12) a3)
(mov (& 10) a2)
(mov (& 18) a1)
(jcall #:display:ps:ps-set-modecolor)
110
(cabeq (& 14) (& 6) 113)
(hpmovx (& 14) (& 8) '16)
113
(cabeq (& 13) (& 5) 115)
(hpmovx (& 13) (& 8) '15)
115
(cabeq (& 15) (& 4) 117)
(hpmovx (& 15) (& 8) '2)
117
(cabeq (& 9) (& 0) 119)
(mov (& 9) a2)
(mov (& 18) a1)
(call #:display:ps:ps-newlinestyle)
(hpmovx (& 9) (& 8) '1)
119
(hpxmov (& 18) '34 a4)
(cabeq (& 17) a4 120)
(mov (& 18) a1)
(adjstk '19)
(bra #:display:ps:ps-newwin)
120
(mov nil a1)
(adjstk '19)
(return)
))
(loader'((entry #:display:ps:ps-newfont subr2)
(push a2)
(push a1)
(hpxmov a1 '30 a4)
(hpxmov a4 a2 a4)
(push a4)
(hpxmov a1 '9 a3)
(push a3)
(mov a4 a2)
(call #:display:ps:font-namestr)
(jcall #:display:ps:psfontname)
(push a1)
(mov (& 2) a1)
(call #:display:ps:font-sizestr)
(push a1)
(hpxmov (& 2) '12 a4)
(push a4)
(mov (& 6) a2)
(mov (& 5) a1)
(call #:display:ps:ps-font-ascent)
(pop a4)
(hpmovx a1 a4 '6)
(hpxmov (& 2) '12 a4)
(push a4)
(mov (& 4) a1)
(call #:display:ps:fsize)
(pop a4)
(hpmovx a1 a4 '7)
(mov '1 a3)
(mov '0 a2)
(mov '"W" a1)
(jcall width-substring)
(push a1)
(mov '1 a3)
(mov '0 a2)
(mov '"i" a1)
(jcall width-substring)
(pop a4)
(cabne a4 a1 101)
(push (@ 103))
(push (& 5))
(push '"/llshow/fshow LD")
(mov '2 a4)
(jmp #:display:ps:psprint)
103
(eval ())
(bra 102)
101
(push (@ 104))
(push (& 5))
(push '"/llshow/vshow LD")
(mov '2 a4)
(jmp #:display:ps:psprint)
104
(eval ())
102
(push (@ 105))
(push (& 5))
(push (& 2))
(push (@ 106))
(push '"/LL")
(push (& 6))
(mov '2 a4)
(jmp concat)
106
(eval ())
(push a1)
(push 'lf)
(mov '4 a4)
(jmp #:display:ps:psprint)
105
(eval ())
(adjstk '6)
(return)
))
(defvar #:display:ps:line-style-conversion '((0 . "[] 0 setdash") (1 . "[3] 0 setdash") (2 . "[3] 0 setdash")))
(loader'((entry #:display:ps:ps-newlinestyle subr2)
(push a1)
(hpxmov a1 '28 a4)
(hpxmov a4 a2 a4)
(push a4)
(push (@ 101))
(push a1)
(push (car a4))
(push 'setlinewidth)
(mov '3 a4)
(jmp #:display:ps:psprint)
101
(eval ())
(push (@ 102))
(push (& 2))
(mov (& 2) a1)
(mov (cvalq #:display:ps:line-style-conversion) a2)
(mov (cdr a1) a1)
(jcall cassq)
(mov a1 a4)
(bfnil a4 103)
(mov '"[] 0 setdash" a4)
103
(push a4)
(mov '2 a4)
(jmp #:display:ps:psprint)
102
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:ps-newwin subr1)
(push a1)
(hpxmov a1 '8 a4)
(push a4)
(hpxmov a4 '7 a3)
(hpxmov a3 '12 a2)
(hpxmov a2 '0 a2)
(hpxmov a2 '0 a4)
(push a4)
(hpxmov a2 '1 a4)
(push a4)
(hpxmov a2 '2 a4)
(push a4)
(hpxmov a2 '3 a4)
(push (@ 101))
(push a1)
(push (& 4))
(push (& 4))
(push (& 4))
(push a4)
(push (& 9))
(mov '6 a4)
(jmp #:display:ps:pscurwindow)
101
(eval ())
(hpmovx (& 3) (& 4) '34)
(mov (& 3) a1)
(adjstk '5)
(return)
))
(defvar #:display:ps:init-bitmap)
(loader'((fentry #:display:ps:create-bitmap subr2)
(entry #:display:ps:create-bitmap subr2)
(push a2)
(push a2)
(jcall #:ps:bitmap:make)
(pop a4)
(hpmovx a1 a4 '2)
(push '0)
(mov '#:bitmap:bytemap a2)
(mov (& 1) a1)
(jcall typep)
(btnil a1 101)
(hpxmov (& 1) '2 a4)
(push a4)
(hpxmov (& 2) '1 a1)
(mov nil a2)
(jcall makevector)
(pop a4)
(hpmovx a1 a4 '1)
(btnil (cvalq #:display:ps:init-bitmap) 102)
(hpxmov (& 1) '1 a4)
(bra 106)
105
(push a4)
(hpxmov (& 2) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(hpxmov (& 3) '0 a1)
(mov '0 a2)
(jcall makestring)
(mov 'bitvector (cdr a1))
(pop a4)
(hpmovx a1 a4 (& 1))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
106
(sobgez a4 105)
(bra 102)
101
(hpxmov (& 1) '2 a4)
(push a4)
(hpxmov (& 2) '1 a1)
(mov nil a2)
(jcall makevector)
(pop a4)
(hpmovx a1 a4 '1)
(btnil (cvalq #:display:ps:init-bitmap) 102)
(hpxmov (& 1) '1 a4)
(bra 110)
109
(push a4)
(hpxmov (& 2) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(hpxmov (& 3) '0 a3)
(mov '7 a2)
(plus a3 a2)
(quo '8 a2)
(push a2)
(mov '0 a2)
(pop a1)
(jcall makestring)
(pop a4)
(hpmovx a1 a4 (& 1))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
110
(sobgez a4 109)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:create-bytemap subr2)
(entry #:display:ps:create-bytemap subr2)
(jmp #:display:ps:create-bitmap)
))
(defvar #:display:ps:subst-str (if (boundp '#:display:ps:subst-vect) #:display:ps:subst-str (makestring 256 0)))
(loader'((fentry #:display:ps:subst-colors subr3)
(entry #:display:ps:subst-colors subr3)
(push a3)
(push a2)
(push '0)
(btnil a3 101)
(mov '256 a4)
(bra 104)
103
(push a4)
(hbmovx (& 1) (cvalq #:display:ps:subst-str) (& 1))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
104
(sobgez a4 103)
(push (& 2))
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(hbmovx (cdr a4) (cvalq #:display:ps:subst-str) (car a4))
(adjstk '1)
(bra 105)
106
(adjstk '1)
(hpxmov (& 1) '0 a4)
(push a4)
(push (@ 107))
(push 'bytes)
(push (& 4))
(mov '2 a4)
(jmp send)
107
(eval ())
(hpxmov (& 2) '1 a4)
(push nil)
(push nil)
(push nil)
(push a1)
(mov '0 (& 5))
(bra 109)
108
(push a4)
(hpxmov (& 1) (& 6) a4)
(mov a4 (& 4))
(mov '0 (& 2))
(mov (& 5) a3)
(bra 111)
110
(push a3)
(hbxmov (& 5) (& 3) a4)
(hbxmov (cvalq #:display:ps:subst-str) a4 a4)
(hbmovx a4 (& 5) (& 3))
(mov (& 3) a4)
(plus '1 a4)
(mov a4 (& 3))
(pop a3)
111
(sobgez a3 110)
(mov (& 6) a4)
(plus '1 a4)
(mov a4 (& 6))
(pop a4)
109
(sobgez a4 108)
(push (@ 112))
(push 'bytes)
(push (& 8))
(push (& 3))
(mov '3 a4)
(jmp send)
112
(eval ())
(adjstk '8)
(return)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry #:display:ps:create-window-bitmap subr3)
(entry #:display:ps:create-window-bitmap subr3)
(push a3)
(push a2)
(push a3)
(jcall #:ps:bitmap:make)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 1) '2 a4)
(hpmovx (& 0) a4 '0)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:kill-bitmap subr2)
(entry #:display:ps:kill-bitmap subr2)
(hpxmov a2 '2 a4)
(hpmovx nil a4 '1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:bmref nsubr)
(entry #:display:ps:bmref nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:bmref a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov '#:bitmap:bytemap a2)
(mov (& 2) a1)
(jcall typep)
(btnil a1 102)
(push (@ 106))
(push (& 4))
(push (& 4))
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp #:display:ps:byteref)
106
(eval ())
(push a1)
(jcall standard-foreground)
(hpxmov a1 '6 a4)
(pop a3)
(cabne a3 a4 104)
(mov '1 a1)
(adjstk '4)
(return)
104
(mov '0 a1)
(adjstk '4)
(return)
102
(push (@ 107))
(push (& 4))
(push (& 4))
(push (& 3))
(push (cvalq #:display:ps:bitvector2))
(mov '4 a4)
(jmp #:display:ps:get-bit-line)
107
(eval ())
(mov (& 1) a4)
(quo '8 a4)
(hbxmov (cvalq #:display:ps:bitvector2) a4 a1)
(push a1)
(mov '8 a2)
(mov (& 2) a1)
(jcall modulo)
(mov '7 a4)
(diff a1 a4)
(mov '1 a3)
(mov a4 a2)
(pop a1)
(jcall load-byte-test)
(btnil a1 108)
(mov '1 a1)
(adjstk '4)
(return)
108
(mov '0 a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:bmset nsubr)
(entry #:display:ps:bmset nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:bmset a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov '#:bitmap:bytemap a2)
(mov (& 3) a1)
(jcall typep)
(btnil a1 102)
(push (@ 104))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(cabne (& 5) '1 105)
(jcall standard-foreground)
(hpxmov a1 '6 a4)
(bra 106)
105
(jcall standard-background)
(hpxmov a1 '6 a4)
106
(push a4)
(mov '5 a4)
(jmp #:display:ps:byteset)
104
(eval ())
(adjstk '5)
(return)
102
(push (@ 107))
(push (& 5))
(push (& 5))
(push (& 4))
(push (cvalq #:display:ps:bitvector2))
(mov '4 a4)
(jmp #:display:ps:get-bit-line)
107
(eval ())
(push (cvalq #:display:ps:bitvector2))
(mov (& 3) a4)
(quo '8 a4)
(push a4)
(push (@ 108))
(mov (& 5) a3)
(quo '8 a3)
(hbxmov (cvalq #:display:ps:bitvector2) a3 a3)
(push a3)
(mov '8 a2)
(mov (& 6) a1)
(jcall modulo)
(mov '7 a4)
(diff a1 a4)
(push a4)
(push '1)
(push (& 6))
(mov '4 a4)
(jmp deposit-byte)
108
(eval ())
(pop a4)
(pop a3)
(hbmovx a1 a3 a4)
(push (@ 109))
(push (& 5))
(push (& 5))
(push (& 4))
(push (cvalq #:display:ps:bitvector2))
(mov '4 a4)
(jmp #:display:ps:set-bit-line)
109
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:byteref nsubr)
(entry #:display:ps:byteref nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:byteref a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov '#:bitmap:bytemap a2)
(mov (& 2) a1)
(jcall typep)
(bfnil a1 102)
(push (@ 106))
(push (& 4))
(push (& 4))
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp #:display:ps:bmref)
106
(eval ())
(cabne a1 '0 104)
(jcall standard-background)
(hpxmov a1 '6 a1)
(adjstk '4)
(return)
104
(jcall standard-foreground)
(hpxmov a1 '6 a1)
(adjstk '4)
(return)
102
(hpxmov (& 2) '2 a1)
(hpxmov a1 '1 a1)
(hpxmov a1 (& 0) a1)
(hbxmov a1 (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:byteset nsubr)
(entry #:display:ps:byteset nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:byteset a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov '#:bitmap:bytemap a2)
(mov (& 3) a1)
(jcall typep)
(bfnil a1 102)
(push (@ 104))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(jcall standard-foreground)
(hpxmov a1 '6 a4)
(cabne (& 5) a4 105)
(mov '1 a4)
(bra 106)
105
(mov '0 a4)
106
(push a4)
(mov '5 a4)
(jmp #:display:ps:bmset)
104
(eval ())
(adjstk '5)
(return)
102
(hpxmov (& 3) '2 a4)
(hpxmov a4 '1 a4)
(hpxmov a4 (& 1) a4)
(hbmovx (& 0) a4 (& 2))
(mov (& 0) a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:get-bit-line nsubr)
(entry #:display:ps:get-bit-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:get-bit-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov '#:bitmap:bytemap a2)
(mov (& 2) a1)
(jcall typep)
(btnil a1 102)
(push (@ 104))
(push (& 4))
(push (& 4))
(push (& 4))
(push (cvalq #:display:ps:bitvector))
(mov '4 a4)
(jmp #:display:ps:get-byte-line)
104
(eval ())
(hpxmov (& 2) '0 a3)
(mov (& 0) a2)
(mov (cvalq #:display:ps:bitvector) a1)
(adjstk '4)
(bra #:display:ps:bytes-to-bits)
102
(push (@ 105))
(push (& 1))
(push '0)
(hpxmov (& 5) '2 a4)
(hpxmov a4 '1 a4)
(hpxmov a4 (& 4) a4)
(push a4)
(push '0)
(mov '4 a4)
(jmp bltstring)
105
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:set-bit-line nsubr)
(entry #:display:ps:set-bit-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:set-bit-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov '#:bitmap:bytemap a2)
(mov (& 2) a1)
(jcall typep)
(btnil a1 102)
(hpxmov (& 2) '0 a3)
(mov (cvalq #:display:ps:bitvector) a2)
(mov (& 0) a1)
(call #:display:ps:bits-to-bytes)
(push (@ 104))
(push (& 4))
(push (& 4))
(push (& 4))
(push (cvalq #:display:ps:bitvector))
(mov '4 a4)
(jmp #:display:ps:set-byte-line)
104
(eval ())
(adjstk '4)
(return)
102
(hpxmov (& 2) '2 a4)
(hpxmov a4 '1 a4)
(hpxmov a4 (& 1) a4)
(btnil a4 105)
(push (@ 107))
(hpxmov (& 3) '2 a4)
(hpxmov a4 '1 a4)
(hpxmov a4 (& 2) a4)
(push a4)
(push '0)
(push (& 3))
(push '0)
(mov '4 a4)
(jmp bltstring)
107
(eval ())
(adjstk '4)
(return)
105
(mov (& 0) a4)
(mov 'bitvector (cdr a4))
(hpxmov (& 2) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(mov a4 a1)
(jcall copy)
(pop a4)
(hpmovx a1 a4 (& 1))
(adjstk '4)
(return)
))
(defvar #:display:ps:bitvector (if (boundp '#:display:ps:bitvector) #:display:ps:bitvector (makestring 4000 0)))
(defvar #:display:ps:bitvector2 (if (boundp '#:display:ps:bitvector2) #:display:ps:bitvector2 (makestring 4000 0)))
(loader'((fentry #:display:ps:get-byte-line nsubr)
(entry #:display:ps:get-byte-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:get-byte-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov '#:bitmap:bytemap a2)
(mov (& 2) a1)
(jcall typep)
(bfnil a1 102)
(push (@ 104))
(push (& 4))
(push (& 4))
(push (& 4))
(push (cvalq #:display:ps:bitvector))
(mov '4 a4)
(jmp #:display:ps:get-bit-line)
104
(eval ())
(hpxmov (& 2) '0 a3)
(mov (& 0) a2)
(mov (cvalq #:display:ps:bitvector) a1)
(adjstk '4)
(bra #:display:ps:bits-to-bytes)
102
(push (@ 105))
(push (& 1))
(push '0)
(hpxmov (& 5) '2 a4)
(hpxmov a4 '1 a4)
(hpxmov a4 (& 4) a4)
(push a4)
(push '0)
(mov '4 a4)
(jmp bltstring)
105
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:set-byte-line nsubr)
(entry #:display:ps:set-byte-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:set-byte-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov '#:bitmap:bytemap a2)
(mov (& 2) a1)
(jcall typep)
(bfnil a1 102)
(hpxmov (& 2) '0 a3)
(mov (cvalq #:display:ps:bitvector) a2)
(mov (& 0) a1)
(call #:display:ps:bytes-to-bits)
(push (@ 104))
(push (& 4))
(push (& 4))
(push (& 4))
(push (cvalq #:display:ps:bitvector))
(mov '4 a4)
(jmp #:display:ps:set-bit-line)
104
(eval ())
(adjstk '4)
(return)
102
(hpxmov (& 2) '2 a4)
(hpxmov a4 '1 a4)
(hpxmov a4 (& 1) a4)
(btnil a4 105)
(push (@ 107))
(hpxmov (& 3) '2 a4)
(hpxmov a4 '1 a4)
(hpxmov a4 (& 2) a4)
(push a4)
(push '0)
(push (& 3))
(push '0)
(mov '4 a4)
(jmp bltstring)
107
(eval ())
(adjstk '4)
(return)
105
(mov (& 0) a4)
(mov 'bitvector (cdr a4))
(hpxmov (& 2) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(mov a4 a1)
(jcall copy)
(pop a4)
(hpmovx a1 a4 (& 1))
(adjstk '4)
(return)
))
(loader'((entry #:display:ps:bits-to-bytes subr3)
(push a3)
(push a2)
(push a1)
(jcall standard-foreground)
(hpxmov a1 '6 a4)
(push a4)
(jcall standard-background)
(hpxmov a1 '6 a3)
(push '0)
(push a3)
(mov (& 5) a4)
(bra 102)
101
(push a4)
(mov (& 2) a4)
(quo '8 a4)
(hbxmov (& 4) a4 a1)
(push a1)
(mov '8 a2)
(mov (& 3) a1)
(jcall modulo)
(mov '7 a4)
(diff a1 a4)
(mov '1 a3)
(mov a4 a2)
(pop a1)
(jcall load-byte-test)
(btnil a1 103)
(mov (& 3) a4)
(bra 104)
103
(mov (& 1) a4)
104
(hbmovx a4 (& 5) (& 2))
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(adjstk '6)
(return)
))
(loader'((entry #:display:ps:bytes-to-bits subr3)
(push a3)
(push a2)
(push a1)
(jcall standard-foreground)
(hpxmov a1 '6 a4)
(push a4)
(mov (& 3) a3)
(plus '7 a3)
(quo '8 a3)
(push a3)
(jcall standard-background)
(hpxmov a1 '6 a2)
(push '0)
(mov (& 1) a4)
(bra 102)
101
(push a4)
(hbmovx '0 (& 5) (& 1))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
102
(sobgez a4 101)
(mov '0 (& 0))
(mov (& 5) a4)
(bra 104)
103
(push a4)
(mov (& 1) a4)
(quo '8 a4)
(push a4)
(push (@ 105))
(mov (& 3) a3)
(quo '8 a3)
(hbxmov (& 7) a3 a3)
(push a3)
(mov '8 a2)
(mov (& 4) a1)
(jcall modulo)
(mov '7 a4)
(diff a1 a4)
(push a4)
(push '1)
(hbxmov (& 9) (& 6) a4)
(cabne (& 8) a4 106)
(mov '1 a3)
(bra 107)
106
(mov '0 a3)
107
(push a3)
(mov '4 a4)
(jmp deposit-byte)
105
(eval ())
(pop a4)
(hbmovx a1 (& 5) a4)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
104
(sobgez a4 103)
(mov 't a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:ps:bitblit nsubr)
(entry #:display:ps:bitblit nsubr)
(cnbeq a4 '9 101)
(mov '#:display:ps:bitblit a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 6) '2 a1)
(jcall pathnamep)
(bfnil a1 102)
(hpxmov (& 6) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 102)
(mov '(error 'bitblit "from window-bitmap, not implemented" b2) a1)
(adjstk '9)
(return)
102
(hpxmov (& 7) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 104)
(hpxmov (& 7) '2 a4)
(hpxmov a4 '0 a4)
(hpxmov a4 '7 a3)
(push a3)
(hpxmov a3 '12 a2)
(hpxmov a2 '0 a2)
(hpxmov a2 '0 a2)
(push a2)
(hpxmov a3 '12 a1)
(hpxmov a1 '0 a1)
(hpxmov a1 '2 a1)
(push a1)
(hpxmov (& 9) '0 a4)
(push a4)
(push (@ 106))
(push a2)
(push (@ 107))
(push '0)
(push (& 11))
(mov '2 a4)
(jmp min)
107
(eval ())
(mov (& 11) a4)
(diff a1 a4)
(push a4)
(mov '2 a4)
(jmp max)
106
(eval ())
(push a1)
(push (@ 108))
(mov (& 4) a4)
(plus (& 3) a4)
(push a4)
(mov (& 12) a4)
(plus (& 8) a4)
(push a4)
(push (@ 109))
(push '0)
(mov (& 13) a3)
(plus (& 11) a3)
(diff (& 6) a3)
(push a3)
(mov '2 a4)
(jmp max)
109
(eval ())
(pop a4)
(diff a1 a4)
(push a4)
(mov '2 a4)
(jmp min)
108
(eval ())
(diff (& 0) a1)
(push a1)
(mov (& 11) a4)
(diff (& 9) a4)
(hpxmov (& 5) '12 a3)
(hpxmov a3 '0 a3)
(hpxmov a3 '1 a3)
(push a3)
(hpxmov (& 6) '12 a2)
(hpxmov a2 '0 a2)
(hpxmov a2 '3 a2)
(push a2)
(hpxmov (& 14) '1 a4)
(push a4)
(push (@ 110))
(push a3)
(push (@ 111))
(push '0)
(push (& 15))
(mov '2 a4)
(jmp min)
111
(eval ())
(mov (& 15) a4)
(diff a1 a4)
(push a4)
(mov '2 a4)
(jmp max)
110
(eval ())
(push a1)
(push (@ 112))
(mov (& 4) a4)
(plus (& 3) a4)
(push a4)
(mov (& 16) a4)
(plus (& 12) a4)
(push a4)
(push (@ 113))
(push '0)
(mov (& 17) a3)
(plus (& 15) a3)
(diff (& 6) a3)
(push a3)
(mov '2 a4)
(jmp max)
113
(eval ())
(pop a4)
(diff a1 a4)
(push a4)
(mov '2 a4)
(jmp min)
112
(eval ())
(diff (& 0) a1)
(push a1)
(mov (& 15) a4)
(diff (& 13) a4)
(mov (& 6) a3)
(diff (& 16) a3)
(mov (& 14) a2)
(plus a3 a2)
(push a2)
(mov (& 2) a3)
(diff (& 16) a3)
(mov (& 14) a4)
(plus a3 a4)
(push a4)
(mov (& 21) a1)
(jcall #:display:ps:psge)
(push (@ 114))
(mov '0 a4)
(jmp current-pattern)
114
(eval ())
(push a1)
(push (@ 115))
(mov '0 a4)
(jmp current-background)
115
(eval ())
(push a1)
(push (@ 116))
(push dlink)
(push prot)
(stack dlink)
(push (@ 118))
(push '0)
(mov '1 a4)
(jmp current-pattern)
118
(eval ())
(push (@ 119))
(jcall standard-background)
(push a1)
(mov '1 a4)
(jmp current-background)
119
(eval ())
(cnble (& 12) '0 120)
(cnble (& 7) '0 120)
(mov (& 26) a1)
(jcall #:display:ps:drawback)
(btnil a1 120)
(push (@ 122))
(push (& 27))
(push (& 19))
(push (& 16))
(push (& 12))
(push (& 17))
(push (& 13))
(mov '6 a4)
(jmp #:display:ps:fill-rectangle)
122
(eval ())
(bra 121)
120
(mov nil a1)
121
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 117) a3)
116
(push a3)
(push a2)
(push (@ 123))
(push (& 4))
(mov '1 a4)
(jmp current-background)
123
(eval ())
(push (@ 124))
(push (& 5))
(mov '1 a4)
(jmp current-pattern)
124
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
117
(eval ())
(adjstk '2)
(mov (& 21) a1)
(jcall #:display:ps:drawfore)
(btnil a1 125)
(cnble (& 7) '0 125)
(cnble (& 2) '0 125)
(push (@ 127))
(mov '0 a4)
(jmp current-mode)
127
(eval ())
(cabeq a1 '0 125)
(push (@ 128))
(mov '0 a4)
(jmp current-mode)
128
(eval ())
(cabeq a1 '15 125)
(hpmovx nil (& 21) '34)
(hpmovx 't (& 21) '62)
(push (@ 129))
(push (& 22))
(push (cvalq #:display:ps:gsave))
(mov '2 a4)
(jmp #:display:ps:psprint)
129
(eval ())
(mov '#:bitmap:bytemap a2)
(mov (& 19) a1)
(jcall typep)
(bfnil a1 130)
(mov '8 a2)
(mov (& 1) a1)
(jcall modulo)
(mov (& 7) a4)
(plus a1 a4)
(mov a4 (& 7))
(mov '8 a2)
(mov (& 1) a1)
(jcall modulo)
(mov (& 8) a4)
(diff a1 a4)
(mov a4 (& 8))
(mov (& 1) a3)
(quo '8 a3)
(mov '8 a2)
(times a3 a2)
(mov a2 (& 1))
(push (@ 132))
(push (& 22))
(push '/bmline)
(mov '7 a3)
(plus (& 10) a3)
(quo '8 a3)
(push a3)
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
132
(eval ())
(push (@ 133))
(push (& 22))
(push '/bmcline)
(push (& 10))
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
133
(eval ())
(push (@ 134))
(push (& 22))
(push (@ 137))
(mov '0 a4)
(jmp current-mode)
137
(eval ())
(mov a1 a4)
(cabeq a4 '2 138)
(cabeq a4 '3 138)
(cabeq a4 '6 138)
(cabeq a4 '7 138)
(cabeq a4 '10 138)
(cabeq a4 '11 138)
(cabeq a4 '14 138)
(cabne a4 '15 135)
138
(mov '0 a4)
(bra 136)
135
(mov '1 a4)
136
(push a4)
(push (cvalq #:display:ps:setgray))
(push (& 12))
(push (@ 139))
(hpxmov (& 27) '4 a3)
(push a3)
(push (& 10))
(mov '2 a4)
(jmp |-|)
139
(eval ())
(push a1)
(push 'translate)
(push (& 14))
(push (& 10))
(push 'scale)
(mov '9 a4)
(jmp #:display:ps:psprint)
134
(eval ())
(push (@ 140))
(push (& 22))
(push (& 9))
(push (& 5))
(push '"true[")
(push (& 12))
(push '0)
(push '0)
(push (@ 141))
(push (& 11))
(mov '1 a4)
(jmp |-|)
141
(eval ())
(push a1)
(push '"0 0]/read-bitmap load imagemask")
(mov '9 a4)
(jmp #:display:ps:psprint)
140
(eval ())
(push (@ 142))
(push (& 22))
(push (& 21))
(push (& 4))
(push (& 4))
(push (& 12))
(push (& 8))
(mov '6 a4)
(jmp #:display:ps:psprintbits)
142
(eval ())
(bra 131)
130
(push (@ 143))
(push (& 22))
(push (& 10))
(push (& 6))
(push (& 11))
(push (& 7))
(mov '5 a4)
(jmp #:display:ps:psprintbytemap)
143
(eval ())
(push (@ 144))
(push (& 22))
(push (& 21))
(push (& 4))
(push (& 4))
(push (& 12))
(push (& 8))
(mov '6 a4)
(jmp #:display:ps:psprintbytes)
144
(eval ())
131
(push (@ 145))
(push (& 22))
(push (cvalq #:display:ps:grestore))
(mov '2 a4)
(jmp #:display:ps:psprint)
145
(eval ())
(adjstk '22)
(return)
125
(mov nil a1)
(adjstk '22)
(return)
104
(hpxmov (& 7) '0 a4)
(hpxmov (& 6) '0 a3)
(hpxmov (& 7) '1 a2)
(hpxmov (& 6) '1 a1)
(push nil)
(push nil)
(push '0)
(push nil)
(push a1)
(push a2)
(push (@ 146))
(push (& 8))
(diff (& 11) a3)
(push a3)
(mov '2 a4)
(jmp min)
146
(eval ())
(mov a1 (& 7))
(push a1)
(push (@ 147))
(push '0)
(push (@ 148))
(push (& 13))
(mov '1 a4)
(jmp |-|)
148
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
147
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 7))
(push (@ 149))
(push '0)
(push (@ 150))
(push (& 12))
(mov '1 a4)
(jmp |-|)
150
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
149
(eval ())
(mov (& 11) a4)
(diff a1 a4)
(mov a4 (& 11))
(push (@ 151))
(push '0)
(push (& 11))
(mov '2 a4)
(jmp max)
151
(eval ())
(mov a1 (& 9))
(push a1)
(push (@ 152))
(push '0)
(push (@ 153))
(push (& 15))
(mov '1 a4)
(jmp |-|)
153
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
152
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 9))
(push (@ 154))
(push '0)
(push (@ 155))
(push (& 14))
(mov '1 a4)
(jmp |-|)
155
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
154
(eval ())
(mov (& 7) a4)
(diff a1 a4)
(mov a4 (& 7))
(push (@ 156))
(push '0)
(push (& 12))
(mov '2 a4)
(jmp max)
156
(eval ())
(mov a1 (& 10))
(push (@ 157))
(push (& 7))
(mov (& 2) a4)
(diff a1 a4)
(push a4)
(mov '2 a4)
(jmp min)
157
(eval ())
(mov a1 (& 6))
(push (@ 158))
(push a1)
(mov (& 3) a4)
(diff (& 10) a4)
(push a4)
(mov '2 a4)
(jmp min)
158
(eval ())
(mov a1 (& 6))
(push a1)
(push (@ 159))
(push '0)
(push (@ 160))
(push (& 12))
(mov '1 a4)
(jmp |-|)
160
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
159
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 6))
(push (@ 161))
(push '0)
(push (@ 162))
(push (& 11))
(mov '1 a4)
(jmp |-|)
162
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
161
(eval ())
(mov (& 10) a4)
(diff a1 a4)
(mov a4 (& 10))
(push (@ 163))
(push '0)
(push (& 10))
(mov '2 a4)
(jmp max)
163
(eval ())
(mov a1 (& 8))
(push a1)
(push (@ 164))
(push '0)
(push (@ 165))
(push (& 14))
(mov '1 a4)
(jmp |-|)
165
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
164
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 8))
(push (@ 166))
(push '0)
(push (@ 167))
(push (& 13))
(mov '1 a4)
(jmp |-|)
167
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
166
(eval ())
(mov (& 6) a4)
(diff a1 a4)
(mov a4 (& 6))
(push (@ 168))
(push '0)
(push (& 12))
(mov '2 a4)
(jmp max)
168
(eval ())
(mov a1 (& 10))
(push (@ 169))
(push (& 7))
(mov (& 2) a4)
(diff a1 a4)
(push a4)
(mov '2 a4)
(jmp min)
169
(eval ())
(mov a1 (& 6))
(cnble (& 7) '0 170)
(cnble a1 '0 170)
(push (@ 172))
(push 'bytes)
(push (& 15))
(mov '2 a4)
(jmp send)
172
(eval ())
(mov a1 (& 5))
(push (@ 173))
(push 'bytes)
(push (& 14))
(mov '2 a4)
(jmp send)
173
(eval ())
(mov a1 (& 4))
(mov (& 6) a4)
(bra 175)
174
(push a4)
(mov '0 (& 3))
(mov (& 8) a4)
(bra 177)
176
(push a4)
(mov (& 5) a4)
(plus (& 12) a4)
(hpxmov (& 7) a4 a4)
(mov (& 4) a3)
(plus (& 13) a3)
(mov (& 5) a2)
(plus (& 10) a2)
(hpxmov (& 6) a2 a2)
(mov (& 4) a1)
(plus (& 11) a1)
(hbxmov a2 a1 a2)
(hbmovx a2 a4 a3)
(mov (& 4) a4)
(plus '1 a4)
(mov a4 (& 4))
(pop a4)
177
(sobgez a4 176)
(mov (& 4) a4)
(plus '1 a4)
(mov a4 (& 4))
(pop a4)
175
(sobgez a4 174)
(push (@ 178))
(push 'bytes)
(push (& 15))
(push (& 8))
(mov '3 a4)
(jmp send)
178
(eval ())
(adjstk '15)
(return)
170
(mov nil a1)
(adjstk '15)
(return)
))
(loader'((fentry #:display:ps:cursor-max subr1)
(entry #:display:ps:cursor-max subr1)
(mov '32767 a1)
(return)
))
(loader'((fentry #:display:ps:make-cursor nsubr)
(entry #:display:ps:make-cursor nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:make-cursor a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov '0 a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:make-named-cursor subr2)
(entry #:display:ps:make-named-cursor subr2)
(mov '0 a1)
(return)
))
(loader'((fentry #:display:ps:cursor-name subr2)
(entry #:display:ps:cursor-name subr2)
(mov '"left-ptr" a1)
(return)
))
(loader'((fentry #:display:ps:current-cursor subr2)
(entry #:display:ps:current-cursor subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:move-cursor subr3)
(entry #:display:ps:move-cursor subr3)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:draw-cursor nsubr)
(entry #:display:ps:draw-cursor nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:draw-cursor a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:event-mode subr2)
(entry #:display:ps:event-mode subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:flush-event subr1)
(entry #:display:ps:flush-event subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:eventp subr1)
(entry #:display:ps:eventp subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:read-event subr2)
(entry #:display:ps:read-event subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:peek-event subr2)
(entry #:display:ps:peek-event subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:read-mouse subr2)
(entry #:display:ps:read-mouse subr2)
(hpmovx '0 a2 '3)
(hpmovx '0 a2 '4)
(hpmovx '0 a2 '2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:add-event subr2)
(entry #:display:ps:add-event subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:grab-event subr2)
(entry #:display:ps:grab-event subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:ungrab-event subr1)
(entry #:display:ps:ungrab-event subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:itsoft-event subr1)
(entry #:display:ps:itsoft-event subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:allow-event subr2)
(entry #:display:ps:allow-event subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:disallow-event subr2)
(entry #:display:ps:disallow-event subr2)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:ps:allowed-event-p subr2)
(entry #:display:ps:allowed-event-p subr2)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:clear-graph-env subr2)
(entry #:display:ps:clear-graph-env subr2)
(push a1)
(hpxmov a2 '12 a4)
(hpxmov a4 '0 a4)
(push a4)
(hpxmov a4 '0 a3)
(push a3)
(hpxmov a4 '1 a4)
(push a4)
(hpxmov (& 2) '2 a4)
(push a4)
(hpxmov (& 3) '3 a4)
(push a4)
(push (@ 101))
(mov '0 a4)
(jmp current-pattern)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push '0)
(mov '1 a4)
(jmp current-pattern)
104
(eval ())
(mov (& 9) a1)
(jcall #:display:ps:psge)
(push (@ 105))
(push (& 10))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push 't)
(mov '6 a4)
(jmp #:display:ps:psrect)
105
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 106))
(push (& 4))
(mov '1 a4)
(jmp current-pattern)
106
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '6)
(mov '0 a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:current-clip nsubr)
(entry #:display:ps:current-clip nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:current-clip a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:ps:current-foreground subr3)
(entry #:display:ps:current-foreground subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:current-background subr3)
(entry #:display:ps:current-background subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:red-component subr3)
(entry #:display:ps:red-component subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:green-component subr3)
(entry #:display:ps:green-component subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:blue-component subr3)
(entry #:display:ps:blue-component subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:name-to-rgb subr3)
(entry #:display:ps:name-to-rgb subr3)
(push a3)
(push a2)
(jcall #:color:make)
(push a1)
(mov (& 1) a2)
(call #:display:ps:make-named-pscolor)
(hpxmov (& 0) '1 a4)
(hpmovx a4 (& 2) '0)
(hpxmov (& 0) '2 a4)
(hpmovx a4 (& 2) '1)
(hpxmov (& 0) '3 a4)
(hpmovx a4 (& 2) '2)
(adjstk '1)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:get-rgb-values subr3)
(entry #:display:ps:get-rgb-values subr3)
(hpxmov a1 '44 a4)
(hpxmov a4 a2 a4)
(push a4)
(btnil a4 101)
(hpxmov a4 '1 a4)
(hpmovx a4 a3 '0)
(hpxmov (& 0) '2 a4)
(hpmovx a4 a3 '1)
(hpxmov (& 0) '3 a4)
(hpmovx a4 a3 '2)
(bra 102)
101
(hpmovx '0 a3 '0)
(hpmovx '0 a3 '1)
(hpmovx '0 a3 '2)
102
(mov a3 a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:current-mode subr3)
(entry #:display:ps:current-mode subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:current-arc-mode subr3)
(entry #:display:ps:current-arc-mode subr3)
(mov a3 a1)
(return)
))
(loader'((fentry #:display:ps:graph-env-planemask subr3)
(entry #:display:ps:graph-env-planemask subr3)
(mov nil a1)
(return)
))
(loader '((end)))
