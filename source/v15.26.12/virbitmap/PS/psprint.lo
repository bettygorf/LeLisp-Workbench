(loader '((title |psprint.lo|)))
(defvar #:sys-package:bitmap '#:display:ps)
(defvar #:sys-package:colon #:sys-package:bitmap)
(putprop '#:display:ps '((() () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () ()) reread line-style-vector pattern-vector font-vector font-metrics mode-vector ps-current-ge ps-current-win version hchannel ochannel printer-id engine-id ps-id epsf-id scale-factor pspattern colortable xmin ymin filename orient xori yori margin paper-width paper-height nbcolumns nbrows layout out-file font-aliases family-aliases copies colortype pscompress compressed-icon) 'defstruct)
(loader'((fentry #:display:ps:make subr0)
(entry #:display:ps:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '64 a4)
(jmp vector)
101
(eval ())
(mov '#:display:ps (cdr a1))
(return)
))
(loader'((fentry #:display:ps:name nsubr)
(entry #:display:ps:name nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:name)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:name #:display:ps:name)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:display:ps:package nsubr)
(entry #:display:ps:package nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:package)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:package #:display:ps:package)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:package (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:display:ps:device nsubr)
(entry #:display:ps:device nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:device)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:device #:display:ps:device)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:device (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:display:ps:xmax nsubr)
(entry #:display:ps:xmax nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:xmax)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:xmax #:display:ps:xmax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:xmax (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:display:ps:ymax nsubr)
(entry #:display:ps:ymax nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:ymax)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:ymax #:display:ps:ymax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:ymax (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:display:ps:eventmode nsubr)
(entry #:display:ps:eventmode nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:eventmode)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:eventmode #:display:ps:eventmode)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:eventmode (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:display:ps:prologuep nsubr)
(entry #:display:ps:prologuep nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:prologuep)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:prologuep #:display:ps:prologuep)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:prologuep (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:display:ps:keyboard-focus-window nsubr)
(entry #:display:ps:keyboard-focus-window nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:keyboard-focus-window)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:keyboard-focus-window #:display:ps:keyboard-focus-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:keyboard-focus-window (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:display:ps:window nsubr)
(entry #:display:ps:window nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:window)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:window #:display:ps:window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:window (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:display:ps:graph-env nsubr)
(entry #:display:ps:graph-env nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:graph-env)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:graph-env #:display:ps:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:graph-env (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(loader'((fentry #:display:ps:root-window nsubr)
(entry #:display:ps:root-window nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:root-window)
(push '10)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:root-window #:display:ps:root-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:root-window (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(loader'((fentry #:display:ps:main-graph-env nsubr)
(entry #:display:ps:main-graph-env nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:main-graph-env)
(push '11)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:main-graph-env #:display:ps:main-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:main-graph-env (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(loader'((fentry #:display:ps:background nsubr)
(entry #:display:ps:background nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:background)
(push '12)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:background #:display:ps:background)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:background (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(loader'((fentry #:display:ps:foreground nsubr)
(entry #:display:ps:foreground nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:foreground)
(push '13)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:foreground #:display:ps:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:foreground (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(loader'((fentry #:display:ps:windows nsubr)
(entry #:display:ps:windows nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:windows)
(push '14)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:windows #:display:ps:windows)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:windows (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(loader'((fentry #:display:ps:bitmaps nsubr)
(entry #:display:ps:bitmaps nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:bitmaps)
(push '15)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:bitmaps #:display:ps:bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:bitmaps (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(loader'((fentry #:display:ps:menus nsubr)
(entry #:display:ps:menus nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:menus)
(push '16)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:menus #:display:ps:menus)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:menus (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(loader'((fentry #:display:ps:colors nsubr)
(entry #:display:ps:colors nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:colors)
(push '17)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:colors #:display:ps:colors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:colors (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(loader'((fentry #:display:ps:font-names nsubr)
(entry #:display:ps:font-names nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:font-names)
(push '18)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:font-names #:display:ps:font-names)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:font-names (struct . valeur) (ifn valeur (list 'vref struct 18) (list 'vset struct 18 (car valeur))))))
(loader'((fentry #:display:ps:pattern-bitmaps nsubr)
(entry #:display:ps:pattern-bitmaps nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:pattern-bitmaps)
(push '19)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:pattern-bitmaps #:display:ps:pattern-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:pattern-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 19) (list 'vset struct 19 (car valeur))))))
(loader'((fentry #:display:ps:cursor-bitmaps nsubr)
(entry #:display:ps:cursor-bitmaps nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:cursor-bitmaps)
(push '20)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:cursor-bitmaps #:display:ps:cursor-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:cursor-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 20) (list 'vset struct 20 (car valeur))))))
(loader'((fentry #:display:ps:extend nsubr)
(entry #:display:ps:extend nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:extend)
(push '21)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:extend #:display:ps:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:extend (struct . valeur) (ifn valeur (list 'vref struct 21) (list 'vset struct 21 (car valeur))))))
(loader'((fentry #:display:ps:graph-envs nsubr)
(entry #:display:ps:graph-envs nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:graph-envs)
(push '22)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:graph-envs #:display:ps:graph-envs)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:graph-envs (struct . valeur) (ifn valeur (list 'vref struct 22) (list 'vset struct 22 (car valeur))))))
(loader'((fentry #:display:ps:current-selection nsubr)
(entry #:display:ps:current-selection nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:current-selection)
(push '23)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:current-selection #:display:ps:current-selection)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:current-selection (struct . valeur) (ifn valeur (list 'vref struct 23) (list 'vset struct 23 (car valeur))))))
(loader'((fentry #:display:ps:resource nsubr)
(entry #:display:ps:resource nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:resource)
(push '24)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:resource #:display:ps:resource)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:resource (struct . valeur) (ifn valeur (list 'vref struct 24) (list 'vset struct 24 (car valeur))))))
(loader'((fentry #:display:ps:named-cursors nsubr)
(entry #:display:ps:named-cursors nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:named-cursors)
(push '25)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:named-cursors #:display:ps:named-cursors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:named-cursors (struct . valeur) (ifn valeur (list 'vref struct 25) (list 'vset struct 25 (car valeur))))))
(loader'((fentry #:display:ps:stipple-bitmaps nsubr)
(entry #:display:ps:stipple-bitmaps nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:stipple-bitmaps)
(push '26)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:stipple-bitmaps #:display:ps:stipple-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:stipple-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 26) (list 'vset struct 26 (car valeur))))))
(loader'((fentry #:display:ps:reread nsubr)
(entry #:display:ps:reread nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:reread)
(push '27)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:reread #:display:ps:reread)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:reread (struct . valeur) (ifn valeur (list 'vref struct 27) (list 'vset struct 27 (car valeur))))))
(loader'((fentry #:display:ps:line-style-vector nsubr)
(entry #:display:ps:line-style-vector nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:line-style-vector)
(push '28)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:line-style-vector #:display:ps:line-style-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:line-style-vector (struct . valeur) (ifn valeur (list 'vref struct 28) (list 'vset struct 28 (car valeur))))))
(loader'((fentry #:display:ps:pattern-vector nsubr)
(entry #:display:ps:pattern-vector nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:pattern-vector)
(push '29)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:pattern-vector #:display:ps:pattern-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:pattern-vector (struct . valeur) (ifn valeur (list 'vref struct 29) (list 'vset struct 29 (car valeur))))))
(loader'((fentry #:display:ps:font-vector nsubr)
(entry #:display:ps:font-vector nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:font-vector)
(push '30)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:font-vector #:display:ps:font-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:font-vector (struct . valeur) (ifn valeur (list 'vref struct 30) (list 'vset struct 30 (car valeur))))))
(loader'((fentry #:display:ps:font-metrics nsubr)
(entry #:display:ps:font-metrics nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:font-metrics)
(push '31)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:font-metrics #:display:ps:font-metrics)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:font-metrics (struct . valeur) (ifn valeur (list 'vref struct 31) (list 'vset struct 31 (car valeur))))))
(loader'((fentry #:display:ps:mode-vector nsubr)
(entry #:display:ps:mode-vector nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:mode-vector)
(push '32)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:mode-vector #:display:ps:mode-vector)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:mode-vector (struct . valeur) (ifn valeur (list 'vref struct 32) (list 'vset struct 32 (car valeur))))))
(loader'((fentry #:display:ps:ps-current-ge nsubr)
(entry #:display:ps:ps-current-ge nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:ps-current-ge)
(push '33)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:ps-current-ge #:display:ps:ps-current-ge)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:ps-current-ge (struct . valeur) (ifn valeur (list 'vref struct 33) (list 'vset struct 33 (car valeur))))))
(loader'((fentry #:display:ps:ps-current-win nsubr)
(entry #:display:ps:ps-current-win nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:ps-current-win)
(push '34)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:ps-current-win #:display:ps:ps-current-win)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:ps-current-win (struct . valeur) (ifn valeur (list 'vref struct 34) (list 'vset struct 34 (car valeur))))))
(loader'((fentry #:display:ps:version nsubr)
(entry #:display:ps:version nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:version)
(push '35)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:version #:display:ps:version)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:version (struct . valeur) (ifn valeur (list 'vref struct 35) (list 'vset struct 35 (car valeur))))))
(loader'((fentry #:display:ps:hchannel nsubr)
(entry #:display:ps:hchannel nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:hchannel)
(push '36)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:hchannel #:display:ps:hchannel)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:hchannel (struct . valeur) (ifn valeur (list 'vref struct 36) (list 'vset struct 36 (car valeur))))))
(loader'((fentry #:display:ps:ochannel nsubr)
(entry #:display:ps:ochannel nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:ochannel)
(push '37)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:ochannel #:display:ps:ochannel)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:ochannel (struct . valeur) (ifn valeur (list 'vref struct 37) (list 'vset struct 37 (car valeur))))))
(loader'((fentry #:display:ps:printer-id nsubr)
(entry #:display:ps:printer-id nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:printer-id)
(push '38)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:printer-id #:display:ps:printer-id)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:printer-id (struct . valeur) (ifn valeur (list 'vref struct 38) (list 'vset struct 38 (car valeur))))))
(loader'((fentry #:display:ps:engine-id nsubr)
(entry #:display:ps:engine-id nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:engine-id)
(push '39)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:engine-id #:display:ps:engine-id)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:engine-id (struct . valeur) (ifn valeur (list 'vref struct 39) (list 'vset struct 39 (car valeur))))))
(loader'((fentry #:display:ps:ps-id nsubr)
(entry #:display:ps:ps-id nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:ps-id)
(push '40)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:ps-id #:display:ps:ps-id)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:ps-id (struct . valeur) (ifn valeur (list 'vref struct 40) (list 'vset struct 40 (car valeur))))))
(loader'((fentry #:display:ps:epsf-id nsubr)
(entry #:display:ps:epsf-id nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:epsf-id)
(push '41)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:epsf-id #:display:ps:epsf-id)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:epsf-id (struct . valeur) (ifn valeur (list 'vref struct 41) (list 'vset struct 41 (car valeur))))))
(loader'((fentry #:display:ps:scale-factor nsubr)
(entry #:display:ps:scale-factor nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:scale-factor)
(push '42)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:scale-factor #:display:ps:scale-factor)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:scale-factor (struct . valeur) (ifn valeur (list 'vref struct 42) (list 'vset struct 42 (car valeur))))))
(loader'((fentry #:display:ps:pspattern nsubr)
(entry #:display:ps:pspattern nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:pspattern)
(push '43)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:pspattern #:display:ps:pspattern)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:pspattern (struct . valeur) (ifn valeur (list 'vref struct 43) (list 'vset struct 43 (car valeur))))))
(loader'((fentry #:display:ps:colortable nsubr)
(entry #:display:ps:colortable nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:colortable)
(push '44)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:colortable #:display:ps:colortable)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:colortable (struct . valeur) (ifn valeur (list 'vref struct 44) (list 'vset struct 44 (car valeur))))))
(loader'((fentry #:display:ps:xmin nsubr)
(entry #:display:ps:xmin nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:xmin)
(push '45)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:xmin #:display:ps:xmin)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:xmin (struct . valeur) (ifn valeur (list 'vref struct 45) (list 'vset struct 45 (car valeur))))))
(loader'((fentry #:display:ps:ymin nsubr)
(entry #:display:ps:ymin nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:ymin)
(push '46)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:ymin #:display:ps:ymin)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:ymin (struct . valeur) (ifn valeur (list 'vref struct 46) (list 'vset struct 46 (car valeur))))))
(loader'((fentry #:display:ps:filename nsubr)
(entry #:display:ps:filename nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:filename)
(push '47)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:filename #:display:ps:filename)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:filename (struct . valeur) (ifn valeur (list 'vref struct 47) (list 'vset struct 47 (car valeur))))))
(loader'((fentry #:display:ps:orient nsubr)
(entry #:display:ps:orient nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:orient)
(push '48)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:orient #:display:ps:orient)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:orient (struct . valeur) (ifn valeur (list 'vref struct 48) (list 'vset struct 48 (car valeur))))))
(loader'((fentry #:display:ps:xori nsubr)
(entry #:display:ps:xori nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:xori)
(push '49)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:xori #:display:ps:xori)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:xori (struct . valeur) (ifn valeur (list 'vref struct 49) (list 'vset struct 49 (car valeur))))))
(loader'((fentry #:display:ps:yori nsubr)
(entry #:display:ps:yori nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:yori)
(push '50)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:yori #:display:ps:yori)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:yori (struct . valeur) (ifn valeur (list 'vref struct 50) (list 'vset struct 50 (car valeur))))))
(loader'((fentry #:display:ps:margin nsubr)
(entry #:display:ps:margin nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:margin)
(push '51)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:margin #:display:ps:margin)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:margin (struct . valeur) (ifn valeur (list 'vref struct 51) (list 'vset struct 51 (car valeur))))))
(loader'((fentry #:display:ps:paper-width nsubr)
(entry #:display:ps:paper-width nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:paper-width)
(push '52)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:paper-width #:display:ps:paper-width)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:paper-width (struct . valeur) (ifn valeur (list 'vref struct 52) (list 'vset struct 52 (car valeur))))))
(loader'((fentry #:display:ps:paper-height nsubr)
(entry #:display:ps:paper-height nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:paper-height)
(push '53)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:paper-height #:display:ps:paper-height)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:paper-height (struct . valeur) (ifn valeur (list 'vref struct 53) (list 'vset struct 53 (car valeur))))))
(loader'((fentry #:display:ps:nbcolumns nsubr)
(entry #:display:ps:nbcolumns nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:nbcolumns)
(push '54)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:nbcolumns #:display:ps:nbcolumns)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:nbcolumns (struct . valeur) (ifn valeur (list 'vref struct 54) (list 'vset struct 54 (car valeur))))))
(loader'((fentry #:display:ps:nbrows nsubr)
(entry #:display:ps:nbrows nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:nbrows)
(push '55)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:nbrows #:display:ps:nbrows)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:nbrows (struct . valeur) (ifn valeur (list 'vref struct 55) (list 'vset struct 55 (car valeur))))))
(loader'((fentry #:display:ps:layout nsubr)
(entry #:display:ps:layout nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:layout)
(push '56)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:layout #:display:ps:layout)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:layout (struct . valeur) (ifn valeur (list 'vref struct 56) (list 'vset struct 56 (car valeur))))))
(loader'((fentry #:display:ps:out-file nsubr)
(entry #:display:ps:out-file nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:out-file)
(push '57)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:out-file #:display:ps:out-file)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:out-file (struct . valeur) (ifn valeur (list 'vref struct 57) (list 'vset struct 57 (car valeur))))))
(loader'((fentry #:display:ps:font-aliases nsubr)
(entry #:display:ps:font-aliases nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:font-aliases)
(push '58)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:font-aliases #:display:ps:font-aliases)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:font-aliases (struct . valeur) (ifn valeur (list 'vref struct 58) (list 'vset struct 58 (car valeur))))))
(loader'((fentry #:display:ps:family-aliases nsubr)
(entry #:display:ps:family-aliases nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:family-aliases)
(push '59)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:family-aliases #:display:ps:family-aliases)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:family-aliases (struct . valeur) (ifn valeur (list 'vref struct 59) (list 'vset struct 59 (car valeur))))))
(loader'((fentry #:display:ps:copies nsubr)
(entry #:display:ps:copies nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:copies)
(push '60)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:copies #:display:ps:copies)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:copies (struct . valeur) (ifn valeur (list 'vref struct 60) (list 'vset struct 60 (car valeur))))))
(loader'((fentry #:display:ps:colortype nsubr)
(entry #:display:ps:colortype nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:colortype)
(push '61)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:colortype #:display:ps:colortype)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:colortype (struct . valeur) (ifn valeur (list 'vref struct 61) (list 'vset struct 61 (car valeur))))))
(loader'((fentry #:display:ps:pscompress nsubr)
(entry #:display:ps:pscompress nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:pscompress)
(push '62)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:pscompress #:display:ps:pscompress)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:pscompress (struct . valeur) (ifn valeur (list 'vref struct 62) (list 'vset struct 62 (car valeur))))))
(loader'((fentry #:display:ps:compressed-icon nsubr)
(entry #:display:ps:compressed-icon nsubr)
(push a4)
(push (@ 101))
(push '#:display:ps:compressed-icon)
(push '63)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:display:ps:compressed-icon #:display:ps:compressed-icon)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ps:compressed-icon (struct . valeur) (ifn valeur (list 'vref struct 63) (list 'vset struct 63 (car valeur))))))
(putprop '#:ps:extend '((() () () () () () () ()) view-rect offset-x offset-y visible psgraph-env current-pattern font-y font-h) 'defstruct)
(loader'((fentry #:ps:extend:make subr0)
(entry #:ps:extend:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(jmp vector)
101
(eval ())
(mov '#:ps:extend (cdr a1))
(return)
))
(loader'((fentry #:ps:extend:view-rect nsubr)
(entry #:ps:extend:view-rect nsubr)
(push a4)
(push (@ 101))
(push '#:ps:extend:view-rect)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:extend:view-rect #:ps:extend:view-rect)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:extend:view-rect (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:ps:extend:offset-x nsubr)
(entry #:ps:extend:offset-x nsubr)
(push a4)
(push (@ 101))
(push '#:ps:extend:offset-x)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:extend:offset-x #:ps:extend:offset-x)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:extend:offset-x (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:ps:extend:offset-y nsubr)
(entry #:ps:extend:offset-y nsubr)
(push a4)
(push (@ 101))
(push '#:ps:extend:offset-y)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:extend:offset-y #:ps:extend:offset-y)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:extend:offset-y (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:ps:extend:visible nsubr)
(entry #:ps:extend:visible nsubr)
(push a4)
(push (@ 101))
(push '#:ps:extend:visible)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:extend:visible #:ps:extend:visible)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:extend:visible (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:ps:extend:psgraph-env nsubr)
(entry #:ps:extend:psgraph-env nsubr)
(push a4)
(push (@ 101))
(push '#:ps:extend:psgraph-env)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:extend:psgraph-env #:ps:extend:psgraph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:extend:psgraph-env (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:ps:extend:current-pattern nsubr)
(entry #:ps:extend:current-pattern nsubr)
(push a4)
(push (@ 101))
(push '#:ps:extend:current-pattern)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:extend:current-pattern #:ps:extend:current-pattern)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:extend:current-pattern (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:ps:extend:font-y nsubr)
(entry #:ps:extend:font-y nsubr)
(push a4)
(push (@ 101))
(push '#:ps:extend:font-y)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:extend:font-y #:ps:extend:font-y)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:extend:font-y (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:ps:extend:font-h nsubr)
(entry #:ps:extend:font-h nsubr)
(push a4)
(push (@ 101))
(push '#:ps:extend:font-h)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:extend:font-h #:ps:extend:font-h)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:extend:font-h (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(putprop '#:ps:bitmap '((() ()) window bitstr) 'defstruct)
(loader'((fentry #:ps:bitmap:make subr0)
(entry #:ps:bitmap:make subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp vector)
101
(eval ())
(mov '#:ps:bitmap (cdr a1))
(return)
))
(loader'((fentry #:ps:bitmap:window nsubr)
(entry #:ps:bitmap:window nsubr)
(push a4)
(push (@ 101))
(push '#:ps:bitmap:window)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:bitmap:window #:ps:bitmap:window)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:bitmap:window (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:ps:bitmap:bitstr nsubr)
(entry #:ps:bitmap:bitstr nsubr)
(push a4)
(push (@ 101))
(push '#:ps:bitmap:bitstr)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:bitmap:bitstr #:ps:bitmap:bitstr)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:bitmap:bitstr (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(putprop '#:ps:device '((() () () () () () () () () () () () () () () () ()) xmax ymax xmin ymin filename orient margin paper-width paper-height nbcolumns nbrows layout out-file scale-factor copies colortype compressed-icon) 'defstruct)
(loader'((fentry #:ps:device:make subr0)
(entry #:ps:device:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '17 a4)
(jmp vector)
101
(eval ())
(mov '#:ps:device (cdr a1))
(return)
))
(loader'((fentry #:ps:device:xmax nsubr)
(entry #:ps:device:xmax nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:xmax)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:xmax #:ps:device:xmax)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:xmax (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:ps:device:ymax nsubr)
(entry #:ps:device:ymax nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:ymax)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:ymax #:ps:device:ymax)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:ymax (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:ps:device:xmin nsubr)
(entry #:ps:device:xmin nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:xmin)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:xmin #:ps:device:xmin)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:xmin (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:ps:device:ymin nsubr)
(entry #:ps:device:ymin nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:ymin)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:ymin #:ps:device:ymin)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:ymin (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:ps:device:filename nsubr)
(entry #:ps:device:filename nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:filename)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:filename #:ps:device:filename)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:filename (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:ps:device:orient nsubr)
(entry #:ps:device:orient nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:orient)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:orient #:ps:device:orient)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:orient (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:ps:device:margin nsubr)
(entry #:ps:device:margin nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:margin)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:margin #:ps:device:margin)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:margin (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:ps:device:paper-width nsubr)
(entry #:ps:device:paper-width nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:paper-width)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:paper-width #:ps:device:paper-width)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:paper-width (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:ps:device:paper-height nsubr)
(entry #:ps:device:paper-height nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:paper-height)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:paper-height #:ps:device:paper-height)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:paper-height (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:ps:device:nbcolumns nsubr)
(entry #:ps:device:nbcolumns nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:nbcolumns)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:nbcolumns #:ps:device:nbcolumns)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:nbcolumns (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(loader'((fentry #:ps:device:nbrows nsubr)
(entry #:ps:device:nbrows nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:nbrows)
(push '10)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:nbrows #:ps:device:nbrows)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:nbrows (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(loader'((fentry #:ps:device:layout nsubr)
(entry #:ps:device:layout nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:layout)
(push '11)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:layout #:ps:device:layout)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:layout (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(loader'((fentry #:ps:device:out-file nsubr)
(entry #:ps:device:out-file nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:out-file)
(push '12)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:out-file #:ps:device:out-file)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:out-file (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(loader'((fentry #:ps:device:scale-factor nsubr)
(entry #:ps:device:scale-factor nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:scale-factor)
(push '13)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:scale-factor #:ps:device:scale-factor)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:scale-factor (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(loader'((fentry #:ps:device:copies nsubr)
(entry #:ps:device:copies nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:copies)
(push '14)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:copies #:ps:device:copies)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:copies (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(loader'((fentry #:ps:device:colortype nsubr)
(entry #:ps:device:colortype nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:colortype)
(push '15)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:colortype #:ps:device:colortype)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:colortype (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(loader'((fentry #:ps:device:compressed-icon nsubr)
(entry #:ps:device:compressed-icon nsubr)
(push a4)
(push (@ 101))
(push '#:ps:device:compressed-icon)
(push '16)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:ps:device:compressed-icon #:ps:device:compressed-icon)))
(if (featurep 'compiler) (progn (defmacro-open #:ps:device:compressed-icon (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(defvar #:display:ps:s " ")
(defvar #:display:ps:moveto "M")
(defvar #:display:ps:rmoveto "m")
(defvar #:display:ps:lineto "L")
(defvar #:display:ps:rlineto "l")
(defvar #:display:ps:currentgray "C")
(defvar #:display:ps:setgray "S")
(defvar #:display:ps:currentrgbcolor "c")
(defvar #:display:ps:setrgbcolor "s")
(defvar #:display:ps:fill "F")
(defvar #:display:ps:stroke "f")
(defvar #:display:ps:newpath "N")
(defvar #:display:ps:gsave "G")
(defvar #:display:ps:grestore "g")
(defvar #:display:ps:reset "I")
(defvar #:display:ps:rectpath "R")
(defvar #:display:ps:ps-lib-directory)
(defvar #:display:ps:ps-linecap (if (boundp '#:display:ps:ps-linecap) #:display:ps:ps-linecap 1))
(defvar #:display:ps:ps-linejoin (if (boundp '#:display:ps:ps-linejoin) #:display:ps:ps-linejoin 1))
(defvar #:display:ps:ps-other-init (if (boundp '#:display:ps:ps-other-init) #:display:ps:ps-other-init ""))
(loader'((fentry ps-library-directory nsubr)
(entry ps-library-directory nsubr)
(jcall #:llcp:nlist)
(btnil a1 101)
(mov (car a1) (cvalq #:display:ps:ps-lib-directory))
(mov (car a1) a1)
(return)
101
(mov (cvalq #:display:ps:ps-lib-directory) a1)
(return)
))
(loader'((fentry #:display:ps:init-psfile subr1)
(entry #:display:ps:init-psfile subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(hpxmov (& 5) '36 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push (@ 105))
(mov '0 a4)
(jmp rmargin)
105
(eval ())
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp lmargin)
106
(eval ())
(push a1)
(push (@ 107))
(push dlink)
(push prot)
(stack dlink)
(push (@ 109))
(push (@ 110))
(mov '0 a4)
(jmp outbuf)
110
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
109
(eval ())
(push (@ 111))
(push '0)
(mov '1 a4)
(jmp lmargin)
111
(eval ())
(mov (& 9) a1)
(jcall #:display:ps:pspreamble)
(push (@ 112))
(push '"/#copies ")
(hpxmov (& 11) '60 a4)
(push a4)
(push '" def")
(mov '3 a4)
(jmp print)
112
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 108) a3)
107
(push a3)
(push a2)
(push (@ 113))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
113
(eval ())
(push (@ 114))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
114
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
108
(eval ())
(adjstk '2)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 115))
(push (& 4))
(mov '1 a4)
(jmp outchan)
115
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(mov (& 0) a1)
(jcall #:display:ps:psinit-widget)
(push (@ 116))
(mov '0 a4)
(jmp outchan)
116
(eval ())
(push a1)
(push (@ 117))
(push dlink)
(push prot)
(stack dlink)
(push (@ 119))
(hpxmov (& 5) '36 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
119
(eval ())
(push (@ 120))
(mov '0 a4)
(jmp rmargin)
120
(eval ())
(push a1)
(push (@ 121))
(mov '0 a4)
(jmp lmargin)
121
(eval ())
(push a1)
(push (@ 122))
(push dlink)
(push prot)
(stack dlink)
(push (@ 124))
(push (@ 125))
(mov '0 a4)
(jmp outbuf)
125
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
124
(eval ())
(push (@ 126))
(push '0)
(mov '1 a4)
(jmp lmargin)
126
(eval ())
(mov (& 9) a1)
(call #:display:ps:extendfont)
(mov (& 9) a1)
(jcall #:display:ps:psctm-widget)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 123) a3)
122
(push a3)
(push a2)
(push (@ 127))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
127
(eval ())
(push (@ 128))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
123
(eval ())
(adjstk '2)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 118) a3)
117
(push a3)
(push a2)
(push (@ 129))
(push (& 4))
(mov '1 a4)
(jmp outchan)
129
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
118
(eval ())
(adjstk '1)
(hpxmov (& 0) '43 a4)
(btnil a4 131)
(mov (& 0) a1)
(call #:display:ps:pspattern-widget)
131
(hpxmov (& 0) '62 a4)
(btnil a4 133)
(mov (& 0) a1)
(call #:display:ps:pscompressor-widget)
133
(push (@ 134))
(mov '0 a4)
(jmp outchan)
134
(eval ())
(push a1)
(push (@ 135))
(push dlink)
(push prot)
(stack dlink)
(push (@ 137))
(hpxmov (& 5) '36 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
137
(eval ())
(push (@ 138))
(mov '0 a4)
(jmp rmargin)
138
(eval ())
(push a1)
(push (@ 139))
(mov '0 a4)
(jmp lmargin)
139
(eval ())
(push a1)
(push (@ 140))
(push dlink)
(push prot)
(stack dlink)
(push (@ 142))
(push (@ 143))
(mov '0 a4)
(jmp outbuf)
143
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
142
(eval ())
(push (@ 144))
(push '0)
(mov '1 a4)
(jmp lmargin)
144
(eval ())
(push (@ 145))
(push '"%%EndProlog")
(mov '1 a4)
(jmp print)
145
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 141) a3)
140
(push a3)
(push a2)
(push (@ 146))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
146
(eval ())
(push (@ 147))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
147
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
141
(eval ())
(adjstk '2)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 136) a3)
135
(push a3)
(push a2)
(push (@ 148))
(push (& 4))
(mov '1 a4)
(jmp outchan)
148
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
136
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:pspreamble subr1)
(entry #:display:ps:pspreamble subr1)
(push a1)
(push (@ 101))
(push '"%!")
(hpxmov a1 '40 a4)
(push a4)
(push (cvalq #:display:ps:s))
(hpxmov a1 '41 a4)
(push a4)
(mov '4 a4)
(jmp print)
101
(eval ())
(push (@ 102))
(push '"%%Creator: ")
(mov '"USER" a1)
(jcall getenv)
(mov a1 a4)
(bfnil a4 103)
(mov '"unknown" a4)
103
(push a4)
(mov '2 a4)
(jmp print)
102
(eval ())
(push (@ 104))
(push '"%%Title: ")
(hpxmov (& 2) '47 a4)
(push a4)
(mov '2 a4)
(jmp print)
104
(eval ())
(push (@ 105))
(mov '0 a4)
(jmp current-language)
105
(eval ())
(push a1)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(push 'english)
(mov '1 a4)
(jmp current-language)
108
(eval ())
(push (@ 109))
(push '"%%CreationDate: ")
(jcall date)
(push a1)
(mov '2 a4)
(jmp print)
109
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 110))
(push (& 4))
(mov '1 a4)
(jmp current-language)
110
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(adjstk '1)
(push (@ 111))
(push '"%%Pages: (atend)")
(mov '1 a4)
(jmp print)
111
(eval ())
(push (@ 112))
(push '"%%DocumentFonts: ")
(mov (& 2) a1)
(call #:display:ps:psdocfont)
(push a1)
(mov '2 a4)
(jmp print)
112
(eval ())
(hpxmov (& 0) '3 a4)
(push a4)
(hpxmov (& 1) '4 a3)
(push (@ 113))
(hpxmov (& 2) '4 a2)
(push a2)
(hpxmov (& 3) '46 a2)
(push a2)
(mov '2 a4)
(jmp |-|)
113
(eval ())
(push a1)
(hpxmov (& 2) '45 a4)
(push a4)
(hpxmov (& 3) '46 a3)
(hpxmov (& 3) '49 a2)
(push a2)
(hpxmov (& 4) '50 a4)
(push a4)
(push (@ 114))
(push '3.1416)
(push (@ 115))
(hpxmov (& 8) '48 a4)
(push a4)
(push '180)
(mov '2 a4)
(jmp /)
115
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
114
(eval ())
(push a1)
(jcall cos)
(push a1)
(mov (& 1) a1)
(jcall sin)
(push a1)
(hpxmov (& 8) '42 a4)
(push a4)
(push (@ 116))
(push a4)
(push (@ 117))
(push (@ 118))
(push (& 6))
(push (@ 119))
(push (& 11))
(push (& 13))
(mov '2 a4)
(jmp |+|)
119
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
118
(eval ())
(push a1)
(push (@ 120))
(push (& 6))
(push (@ 121))
(push (& 11))
(push (& 15))
(mov '2 a4)
(jmp |+|)
121
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
120
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
117
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
116
(eval ())
(jcall fix)
(push a1)
(push (@ 122))
(push (& 2))
(push (@ 123))
(push (@ 124))
(push (& 6))
(push (@ 125))
(push (& 12))
(push (& 14))
(mov '2 a4)
(jmp |+|)
125
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
124
(eval ())
(push a1)
(push (@ 126))
(push (& 8))
(push (& 11))
(mov '2 a4)
(jmp *)
126
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
123
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
122
(eval ())
(jcall fix)
(push a1)
(push (@ 127))
(push (& 3))
(push (@ 128))
(push (@ 129))
(push (& 8))
(push (@ 130))
(push (& 13))
(push (& 17))
(mov '2 a4)
(jmp |+|)
130
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
129
(eval ())
(push a1)
(push (@ 131))
(push (& 8))
(push (& 12))
(mov '2 a4)
(jmp *)
131
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
128
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
127
(eval ())
(jcall fix)
(plus '1 a1)
(push a1)
(push (@ 132))
(push (& 4))
(push (@ 133))
(push (@ 134))
(push (& 8))
(push (@ 135))
(push (& 14))
(push (& 18))
(mov '2 a4)
(jmp |+|)
135
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
134
(eval ())
(push a1)
(push (@ 136))
(push (& 10))
(push (@ 137))
(push (& 14))
(push (& 18))
(mov '2 a4)
(jmp |+|)
137
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
136
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
133
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
132
(eval ())
(jcall fix)
(plus '1 a1)
(push a1)
(push (@ 138))
(push '"%%BoundingBox: ")
(push (@ 139))
(push (& 6))
(push (& 5))
(mov '2 a4)
(jmp min)
139
(eval ())
(push a1)
(push (cvalq #:display:ps:s))
(push (@ 140))
(push (& 7))
(push (& 6))
(mov '2 a4)
(jmp min)
140
(eval ())
(push a1)
(push (cvalq #:display:ps:s))
(push (@ 141))
(push (& 10))
(push (& 9))
(mov '2 a4)
(jmp max)
141
(eval ())
(push a1)
(push (cvalq #:display:ps:s))
(push (@ 142))
(push (& 11))
(push (& 10))
(mov '2 a4)
(jmp max)
142
(eval ())
(push a1)
(mov '8 a4)
(jmp print)
138
(eval ())
(adjstk '13)
(push (@ 143))
(push '"%%EndComments")
(mov '1 a4)
(jmp print)
143
(eval ())
(push (@ 144))
(mov '0 a4)
(jmp print)
144
(eval ())
(adjstk '1)
(return)
))
(defvar #:display:ps:internal-font-aliases (if (boundp '#:display:ps:internal-font-aliases) #:display:ps:internal-font-aliases '(("avanbook" . "AvantGarde-Book") ("avandemi" . "AvantGarde-Demi") ("avanboob" . "AvantGarde-BookOblique") ("avandeob" . "AvantGarde-DemiOblique") ("cour" . "Courier") ("courbold" . "Courier-Bold") ("courboob" . "Courier-BoldOblique") ("courobli" . "Courier-Oblique") ("palaroma" . "Palatino-Roman") ("palabold" . "Palatino-Bold") ("palaital" . "Palatino-Italic") ("palaboit" . "Palatino-BoldItalic") ("timeroma" . "Times-Roman") ("timebold" . "Times-Bold") ("timeital" . "Times-Italic") ("timeboit" . "Times-BoldItalic") ("helv" . "Helvetica") ("helvbold" . "Helvetica-Bold") ("helvboob" . "Helvetica-BoldOblique") ("helvobli" . "Helvetica-Oblique") ("hena" . "Helvetica-Narrow") ("henabold" . "Helvetica-Narrow-Bold") ("henaboob" . "Helvetica-Narrow-BoldOblique") ("henaobli" . "Helvetica-Narrow-Oblique") ("symb" . "Symbol"))))
(loader'((fentry #:display:ps:font-family subr1)
(entry #:display:ps:font-family subr1)
(push (@ 101))
(push a1)
(push '0)
(push (@ 102))
(push a1)
(push '"-0123456789")
(mov '2 a4)
(jmp scanstring)
102
(eval ())
(push a1)
(mov '3 a4)
(jmp substring)
101
(eval ())
(return)
))
(loader'((entry #:display:ps:indexfile subr2)
(push a2)
(push a1)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push (@ 102))
(jcall pathname-name)
(push a1)
(push (& 7))
(mov '2 a4)
(jmp catenate)
102
(eval ())
(push a1)
(mov '4 a4)
(jmp make-pathname)
101
(eval ())
(mov (& 0) a2)
(adjstk '2)
(jmp merge-pathnames)
))
(loader'((fentry #:display:ps:psfontname subr1)
(entry #:display:ps:psfontname subr1)
(mov (cvalq #:display:ps:internal-font-aliases) a2)
(jmp cassoc)
))
(loader'((fentry #:display:ps:multilayout subr3)
(entry #:display:ps:multilayout subr3)
(push a3)
(push a2)
(push a1)
(hpxmov a1 '57 a2)
(mov 'one-file a1)
(jcall eq)
(push a1)
(mov '0 a2)
(mov (& 2) a1)
(call #:display:ps:indexfile)
(push a1)
(push (@ 101))
(push (@ 102))
(push '72)
(push (@ 103))
(push (@ 104))
(hpxmov (& 7) '53 a4)
(push a4)
(push (@ 105))
(push '2)
(hpxmov (& 10) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
105
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
104
(eval ())
(push a1)
(push '25.4)
(mov '2 a4)
(jmp /)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
102
(eval ())
(push a1)
(hpxmov (& 4) '42 a4)
(push a4)
(mov '2 a4)
(jmp /)
101
(eval ())
(push a1)
(push (@ 106))
(push (@ 107))
(push '72)
(push (@ 108))
(push (@ 109))
(hpxmov (& 8) '52 a4)
(push a4)
(push (@ 110))
(push '2)
(hpxmov (& 11) '51 a4)
(push a4)
(mov '2 a4)
(jmp *)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
109
(eval ())
(push a1)
(push '25.4)
(mov '2 a4)
(jmp /)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp *)
107
(eval ())
(push a1)
(hpxmov (& 5) '42 a4)
(push a4)
(mov '2 a4)
(jmp /)
106
(eval ())
(push (& 5))
(push '0)
(push '0)
(push nil)
(push a1)
(btnil (& 7) 112)
(mov (& 4) a2)
(mov (& 6) a1)
(jcall #:display:ps:copy-files)
112
(push (@ 113))
(mov '0 a4)
(jmp outchan)
113
(eval ())
(push a1)
(push (@ 114))
(mov '0 a4)
(jmp rmargin)
114
(eval ())
(push a1)
(push (@ 115))
(push dlink)
(push prot)
(stack dlink)
(push (@ 117))
(mov (& 15) a1)
(jcall opena)
(push a1)
(mov '1 a4)
(jmp outchan)
117
(eval ())
(push (@ 118))
(push (@ 119))
(mov '0 a4)
(jmp outbuf)
119
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
118
(eval ())
(push (@ 120))
(push '"showpage")
(mov '1 a4)
(jmp print)
120
(eval ())
(push (@ 121))
(push (@ 122))
(mov '0 a4)
(jmp outchan)
122
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
121
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 116) a3)
115
(push a3)
(push a2)
(push (@ 123))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
123
(eval ())
(push (@ 124))
(push (& 5))
(mov '1 a4)
(jmp outchan)
124
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
116
(eval ())
(adjstk '2)
(hpxmov (& 8) '55 a4)
(bra 126)
125
(push a4)
(mov '0 (& 2))
(hpxmov (& 9) '54 a4)
(bra 128)
127
(push a4)
(bfnil (& 9) 130)
(mov (& 5) a4)
(plus '1 a4)
(mov a4 a2)
(mov (& 11) a1)
(call #:display:ps:indexfile)
(mov a1 (& 8))
(mov (& 6) a2)
(jcall #:display:ps:copy-files)
130
(push (@ 131))
(mov '0 a4)
(jmp outchan)
131
(eval ())
(push a1)
(push (@ 132))
(mov '0 a4)
(jmp rmargin)
132
(eval ())
(push a1)
(push (@ 133))
(push dlink)
(push prot)
(stack dlink)
(push (@ 135))
(mov (& 14) a1)
(jcall opena)
(push a1)
(mov '1 a4)
(jmp outchan)
135
(eval ())
(push (@ 136))
(push (@ 137))
(mov '0 a4)
(jmp outbuf)
137
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
136
(eval ())
(push (@ 138))
(push '"%%Page: ")
(push (& 12))
(push (cvalq #:display:ps:s))
(mov (& 14) a1)
(jcall |1+|)
(mov a1 (& 14))
(push a1)
(mov '4 a4)
(jmp print)
138
(eval ())
(push (@ 139))
(push '"rootmtrx setmatrix")
(mov '1 a4)
(jmp print)
139
(eval ())
(push (@ 140))
(push (@ 141))
(hpxmov (& 17) '48 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
141
(eval ())
(push a1)
(push '" rotate ")
(push '"-")
(push (@ 142))
(push (& 13))
(push (& 13))
(mov '2 a4)
(jmp *)
142
(eval ())
(push a1)
(push '" -")
(push (@ 143))
(push (& 19))
(push (& 17))
(mov '2 a4)
(jmp *)
143
(eval ())
(push a1)
(push '" translate ")
(hpxmov (& 23) '48 a4)
(push a4)
(push '" rotate")
(mov '9 a4)
(jmp print)
140
(eval ())
(push (@ 144))
(push '"/rootmtrx matrix currentmatrix def")
(mov '1 a4)
(jmp print)
144
(eval ())
(push (@ 145))
(push '"1 setlinewidth")
(mov '1 a4)
(jmp print)
145
(eval ())
(push (@ 146))
(push '"[] 0 setdash")
(mov '1 a4)
(jmp print)
146
(eval ())
(push (@ 147))
(push (cvalq #:display:ps:ps-linejoin))
(push '" setlinejoin")
(mov '2 a4)
(jmp print)
147
(eval ())
(push (@ 148))
(push (cvalq #:display:ps:ps-linecap))
(push '" setlinecap")
(mov '2 a4)
(jmp print)
148
(eval ())
(push (@ 149))
(push (cvalq #:display:ps:ps-other-init))
(mov '1 a4)
(jmp print)
149
(eval ())
(push (@ 150))
(push (@ 151))
(mov '0 a4)
(jmp outchan)
151
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
150
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 134) a3)
133
(push a3)
(push a2)
(push (@ 152))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
152
(eval ())
(push (@ 153))
(push (& 5))
(mov '1 a4)
(jmp outchan)
153
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
134
(eval ())
(adjstk '2)
(mov (& 11) a2)
(mov (& 8) a1)
(jcall #:display:ps:append-files)
(btnil (& 9) 154)
(push (@ 156))
(mov '0 a4)
(jmp outchan)
156
(eval ())
(push a1)
(push (@ 157))
(mov '0 a4)
(jmp rmargin)
157
(eval ())
(push a1)
(push (@ 158))
(push dlink)
(push prot)
(stack dlink)
(push (@ 160))
(mov (& 14) a1)
(jcall opena)
(push a1)
(mov '1 a4)
(jmp outchan)
160
(eval ())
(push (@ 161))
(push (@ 162))
(mov '0 a4)
(jmp outbuf)
162
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
161
(eval ())
(push (@ 163))
(push '"rootmtrx setmatrix")
(mov '1 a4)
(jmp print)
163
(eval ())
(push (@ 164))
(push (@ 165))
(hpxmov (& 17) '48 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
165
(eval ())
(push a1)
(push '" rotate ")
(push (@ 166))
(push (& 12))
(push (& 12))
(mov '2 a4)
(jmp *)
166
(eval ())
(push a1)
(push (cvalq #:display:ps:s))
(push (@ 167))
(push (& 18))
(push (& 16))
(mov '2 a4)
(jmp *)
167
(eval ())
(push a1)
(push '" translate ")
(hpxmov (& 22) '48 a4)
(push a4)
(push '" rotate")
(mov '8 a4)
(jmp print)
164
(eval ())
(push (@ 168))
(push '"/rootmtrx matrix currentmatrix def")
(mov '1 a4)
(jmp print)
168
(eval ())
(push (@ 169))
(push (@ 170))
(mov '0 a4)
(jmp outchan)
170
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
169
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 159) a3)
158
(push a3)
(push a2)
(push (@ 171))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
171
(eval ())
(push (@ 172))
(push (& 5))
(mov '1 a4)
(jmp outchan)
172
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
159
(eval ())
(adjstk '2)
(bra 155)
154
(mov (& 8) a2)
(mov (& 10) a1)
(jcall #:display:ps:pspostambule)
155
(mov (& 3) a4)
(plus '1 a4)
(mov a4 (& 3))
(pop a4)
128
(sobgez a4 127)
(mov (& 3) a4)
(plus '1 a4)
(mov a4 (& 3))
(pop a4)
126
(sobgez a4 125)
(mov (& 9) a1)
(jcall deletefile)
(btnil (& 7) 174)
(mov (& 9) a2)
(mov (& 6) a1)
(jcall renamefile)
(mov (& 9) a2)
(mov (& 8) a1)
(jcall #:display:ps:pspostambule)
174
(adjstk '8)
(mov (& 2) a1)
(adjstk '3)
(jmp deletefile)
))
(loader'((fentry #:display:ps:pspostambule subr2)
(entry #:display:ps:pspostambule subr2)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp rmargin)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp lmargin)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(mov (& 8) a1)
(jcall opena)
(push a1)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(push (@ 108))
(mov '0 a4)
(jmp outbuf)
108
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
107
(eval ())
(push (@ 109))
(push '0)
(mov '1 a4)
(jmp lmargin)
109
(eval ())
(push (@ 110))
(push '"%%Trailer")
(mov '1 a4)
(jmp print)
110
(eval ())
(push (@ 111))
(push '"end")
(mov '1 a4)
(jmp print)
111
(eval ())
(push (@ 112))
(push '"%%Pages: ")
(hpxmov (& 8) '54 a4)
(hpxmov (& 8) '55 a3)
(times a3 a4)
(push a4)
(mov '2 a4)
(jmp print)
112
(eval ())
(push (@ 113))
(push (@ 114))
(mov '0 a4)
(jmp outchan)
114
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
113
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 115))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
115
(eval ())
(push (@ 116))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
116
(eval ())
(push (@ 117))
(push (& 6))
(mov '1 a4)
(jmp outchan)
117
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:display:ps:psdocfont subr1)
(push '"")
(push nil)
(push '0)
(hpxmov a1 '30 a4)
(push a4)
(hgsize a4 a3)
(push a3)
101
(cnbge (& 2) (& 0) 102)
(hpxmov (& 1) (& 2) a4)
(mov a4 a1)
(jcall #:display:ps:font-family)
(jcall #:display:ps:psfontname)
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 101)
102
(adjstk '3)
(mov (& 0) a1)
(call #:display:ps:once)
(mov a1 (& 0))
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 105))
(push (& 4))
(push (cvalq #:display:ps:s))
(push (& 3))
(mov '3 a4)
(jmp catenate)
105
(eval ())
(mov a1 (& 3))
(adjstk '1)
(bra 103)
104
(adjstk '1)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:extendfont subr1)
(push nil)
(push '0)
(hpxmov a1 '30 a4)
(push a4)
(hgsize a4 a3)
(push a3)
101
(cnbge (& 2) (& 0) 102)
(hpxmov (& 1) (& 2) a4)
(mov a4 a1)
(jcall #:display:ps:font-family)
(jcall #:display:ps:psfontname)
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 101)
102
(adjstk '3)
(mov (& 0) a1)
(call #:display:ps:once)
(mov a1 (& 0))
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 105))
(push '"(")
(push (& 2))
(push '")makeLLfont")
(mov '3 a4)
(jmp print)
105
(eval ())
(adjstk '1)
(bra 103)
104
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:once subr1)
(btnil a1 101)
(push (car a1))
(mov a1 a2)
(mov (car a1) a1)
(jcall remq)
(call #:display:ps:once)
(mov a1 a2)
(pop a1)
(jmp cons)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:top-window subr1)
(entry #:display:ps:top-window subr1)
(hpxmov a1 '9 a4)
(btnil a4 29999)
(hpxmov a1 '9 a1)
(jmp #:display:ps:top-window)
29999
(return)
))
(loader'((fentry #:display:ps:pstransy dmsubr)
(entry #:display:ps:pstransy dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push (@ 101))
(push '|-|)
(push (@ 102))
(push '#:display:ymax)
(push a4)
(mov '2 a4)
(jmp list)
102
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:stroke subr1)
(entry #:display:ps:stroke subr1)
(push a1)
(hpxmov a1 '28 a4)
(push a4)
(push (@ 101))
(mov '0 a4)
(jmp current-line-style)
101
(eval ())
(pop a4)
(hpxmov a4 a1 a4)
(push (cdr a4))
(cnbne '2 (& 0) 103)
(push (@ 104))
(push (& 2))
(push (cvalq #:display:ps:gsave))
(push '"[] 0 setdash")
(mov '3 a4)
(jmp #:display:ps:psprint)
104
(eval ())
(push (@ 105))
(mov '0 a4)
(jmp current-background)
105
(eval ())
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp current-mode)
106
(eval ())
(mov a1 a3)
(pop a2)
(mov (& 1) a1)
(jcall #:display:ps:ps-set-modecolor)
(push (@ 107))
(push (& 2))
(push (cvalq #:display:ps:stroke))
(push (cvalq #:display:ps:grestore))
(mov '3 a4)
(jmp #:display:ps:psprint)
107
(eval ())
103
(push (@ 108))
(push (& 2))
(push (cvalq #:display:ps:stroke))
(mov '2 a4)
(jmp #:display:ps:psprint)
108
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:pscircle nsubr)
(entry #:display:ps:pscircle nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:pscircle a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 5))
(push (cvalq #:display:ps:newpath))
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprin)
102
(eval ())
(bfnil (& 0) 103)
(push (@ 105))
(push (& 5))
(push (@ 106))
(push (& 6))
(push '0.5)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(push a1)
(push (@ 107))
(hpxmov (& 8) '4 a4)
(push a4)
(push (@ 108))
(push (& 8))
(push '0.5)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
107
(eval ())
(push a1)
(push (& 5))
(push '0)
(push '360)
(push '"arc ")
(mov '7 a4)
(jmp #:display:ps:psprin)
105
(eval ())
(bra 104)
103
(push (@ 109))
(push (& 5))
(push (& 5))
(push (@ 110))
(hpxmov (& 8) '4 a4)
(push a4)
(push (& 7))
(mov '2 a4)
(jmp |-|)
110
(eval ())
(push a1)
(push (& 5))
(push '0)
(push '360)
(push '"arc ")
(mov '7 a4)
(jmp #:display:ps:psprin)
109
(eval ())
104
(btnil (& 0) 111)
(mov (& 4) a1)
(adjstk '5)
(jmp #:display:ps:psfill)
111
(mov (& 4) a1)
(adjstk '5)
(jmp #:display:ps:stroke)
))
(loader'((fentry #:display:ps:psarc nsubr)
(entry #:display:ps:psarc nsubr)
(cnbeq a4 '8 101)
(mov '#:display:ps:psarc a1)
(mov '8 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 8))
(push 'matrix)
(push 'currentmatrix)
(mov '3 a4)
(jmp #:display:ps:psprint)
102
(eval ())
(bfnil (& 0) 103)
(push (@ 105))
(push (& 8))
(push (@ 106))
(push (& 9))
(push '0.5)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(push a1)
(push (@ 107))
(hpxmov (& 11) '4 a4)
(push a4)
(push (@ 108))
(push (& 11))
(push '0.5)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
107
(eval ())
(push a1)
(push '"translate ")
(mov '4 a4)
(jmp #:display:ps:psprin)
105
(eval ())
(bra 104)
103
(push (@ 109))
(push (& 8))
(push (& 8))
(push (@ 110))
(hpxmov (& 11) '4 a4)
(push a4)
(push (& 10))
(mov '2 a4)
(jmp |-|)
110
(eval ())
(push a1)
(push '"translate ")
(mov '4 a4)
(jmp #:display:ps:psprin)
109
(eval ())
104
(push (@ 111))
(push (& 8))
(push (& 6))
(push (& 6))
(push '"scale ")
(push (cvalq #:display:ps:newpath))
(push (cvalq #:display:ps:s))
(mov '6 a4)
(jmp #:display:ps:psprin)
111
(eval ())
(cabne (& 0) '0 113)
(push (@ 114))
(push (& 8))
(push '0)
(push '0)
(push (cvalq #:display:ps:moveto))
(push (cvalq #:display:ps:s))
(mov '5 a4)
(jmp #:display:ps:psprin)
114
(eval ())
113
(push (@ 115))
(push (& 8))
(push '0)
(push '0)
(push '1)
(push (& 7))
(push (& 7))
(push '"arc setmatrix ")
(mov '7 a4)
(jmp #:display:ps:psprin)
115
(eval ())
(btnil (& 0) 116)
(mov (& 7) a1)
(adjstk '8)
(jmp #:display:ps:psfill)
116
(mov (& 7) a1)
(adjstk '8)
(jmp #:display:ps:stroke)
))
(loader'((fentry #:display:ps:psrect nsubr)
(entry #:display:ps:psrect nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:psrect a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 6))
(push (& 4))
(push (& 4))
(push (cvalq #:display:ps:s))
(mov '4 a4)
(jmp #:display:ps:psprin)
102
(eval ())
(bfnil (& 0) 103)
(push (@ 105))
(push (& 6))
(push (@ 106))
(push (& 7))
(push '0.5)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(push a1)
(push (@ 107))
(hpxmov (& 9) '4 a4)
(push a4)
(push (@ 108))
(push (& 9))
(push '0.5)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
107
(eval ())
(push a1)
(mov '3 a4)
(jmp #:display:ps:psprin)
105
(eval ())
(bra 104)
103
(push (@ 109))
(push (& 6))
(push (& 6))
(push (@ 110))
(hpxmov (& 9) '4 a4)
(push a4)
(push (& 8))
(mov '2 a4)
(jmp |-|)
110
(eval ())
(push a1)
(mov '3 a4)
(jmp #:display:ps:psprin)
109
(eval ())
104
(push (@ 111))
(push (& 6))
(push (cvalq #:display:ps:s))
(push (cvalq #:display:ps:rectpath))
(push (cvalq #:display:ps:s))
(mov '4 a4)
(jmp #:display:ps:psprin)
111
(eval ())
(btnil (& 0) 112)
(mov (& 5) a1)
(adjstk '6)
(jmp #:display:ps:psfill)
112
(mov (& 5) a1)
(adjstk '6)
(jmp #:display:ps:stroke)
))
(loader'((fentry #:display:ps:pspolyline nsubr)
(entry #:display:ps:pspolyline nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:pspolyline a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push '1)
(push (@ 102))
(push (& 6))
(push (cvalq #:display:ps:newpath))
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprint)
102
(eval ())
(push (@ 103))
(push (& 6))
(hpxmov (& 5) '0 a4)
(push a4)
(btnil (& 4) 104)
(push (@ 106))
(hpxmov (& 9) '4 a4)
(push a4)
(hpxmov (& 7) '0 a4)
(push a4)
(mov '2 a4)
(jmp |-|)
106
(eval ())
(mov a1 a4)
(bra 105)
104
(push (@ 107))
(hpxmov (& 9) '4 a4)
(push a4)
(push (@ 108))
(hpxmov (& 8) '0 a4)
(push a4)
(push '0.5)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
107
(eval ())
(mov a1 a4)
105
(push a4)
(push (cvalq #:display:ps:moveto))
(push (cvalq #:display:ps:s))
(mov '5 a4)
(jmp #:display:ps:psprint)
103
(eval ())
(mov (& 4) a4)
(diff '1 a4)
(bra 110)
109
(push a4)
(push (@ 111))
(push (& 7))
(hpxmov (& 6) (& 3) a4)
(push a4)
(btnil (& 5) 112)
(push (@ 114))
(hpxmov (& 10) '4 a4)
(push a4)
(hpxmov (& 8) (& 6) a4)
(push a4)
(mov '2 a4)
(jmp |-|)
114
(eval ())
(mov a1 a4)
(bra 113)
112
(push (@ 115))
(hpxmov (& 10) '4 a4)
(push a4)
(push (@ 116))
(hpxmov (& 9) (& 7) a4)
(push a4)
(push '0.5)
(mov '2 a4)
(jmp |+|)
116
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
115
(eval ())
(mov a1 a4)
113
(push a4)
(push (cvalq #:display:ps:lineto))
(push (cvalq #:display:ps:s))
(mov '5 a4)
(jmp #:display:ps:psprint)
111
(eval ())
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
110
(sobgez a4 109)
(btnil (& 1) 117)
(mov (& 5) a1)
(adjstk '6)
(jmp #:display:ps:psfill)
117
(mov (& 5) a1)
(adjstk '6)
(jmp #:display:ps:stroke)
))
(loader'((fentry #:display:ps:pssegments nsubr)
(entry #:display:ps:pssegments nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:pssegments a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 6))
(push (cvalq #:display:ps:newpath))
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprin)
102
(eval ())
(push '0)
(mov (& 5) a4)
(bra 104)
103
(push a4)
(push (@ 105))
(push (& 8))
(push (@ 106))
(hpxmov (& 8) (& 4) a4)
(push a4)
(push '0.5)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(push a1)
(push (@ 107))
(hpxmov (& 11) '4 a4)
(push a4)
(push (@ 108))
(hpxmov (& 10) (& 7) a4)
(push a4)
(push '0.5)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
107
(eval ())
(push a1)
(push (cvalq #:display:ps:moveto))
(push (cvalq #:display:ps:s))
(mov '5 a4)
(jmp #:display:ps:psprint)
105
(eval ())
(push (@ 109))
(push (& 8))
(push (@ 110))
(hpxmov (& 6) (& 4) a4)
(push a4)
(push '0.5)
(mov '2 a4)
(jmp |+|)
110
(eval ())
(push a1)
(push (@ 111))
(hpxmov (& 11) '4 a4)
(push a4)
(push (@ 112))
(hpxmov (& 8) (& 7) a4)
(push a4)
(push '0.5)
(mov '2 a4)
(jmp |+|)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
111
(eval ())
(push a1)
(push (cvalq #:display:ps:lineto))
(push (cvalq #:display:ps:s))
(mov '5 a4)
(jmp #:display:ps:psprint)
109
(eval ())
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
104
(sobgez a4 103)
(adjstk '1)
(mov (& 5) a1)
(adjstk '6)
(jmp #:display:ps:stroke)
))
(loader'((fentry #:display:ps:psprintbits nsubr)
(entry #:display:ps:psprintbits nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:psprintbits a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 1) a4)
(plus '7 a4)
(lshift '-3 a4)
(hpxmov (& 4) '0 a3)
(plus '7 a3)
(lshift '-3 a3)
(push nil)
(push (& 1))
(push (& 4))
(push nil)
(push a3)
(push a4)
(push (cvalq #:system:print-for-read))
(mov (& 3) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp rmargin)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp lmargin)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(hpxmov (& 25) '37 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
107
(eval ())
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push '0)
(mov '1 a4)
(jmp lmargin)
110
(eval ())
(hpxmov (& 23) '2 a1)
(jcall pathnamep)
(btnil a1 111)
(push (@ 113))
(mov '0 a4)
(jmp inchan)
113
(eval ())
(push a1)
(push (@ 114))
(push dlink)
(push prot)
(stack dlink)
(push (@ 116))
(hpxmov (& 28) '2 a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
116
(eval ())
(push 't)
(push (cvalq #:system:compressed-icon))
(mov (& 1) (cvalq #:system:compressed-icon))
(push '1)
(push '(#:system:compressed-icon))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '0 a2)
(mov (& 25) a1)
(jcall makestring)
(push a1)
(push nil)
(push nil)
(mov '0 (& 31))
117
(mov (& 36) a4)
(plus (& 32) a4)
(cnbge (& 31) a4 118)
119
(jcall peekcn)
(mov a1 (& 0))
(cabeq '10 a1 121)
(cabne '13 a1 120)
121
(jcall readcn)
(bra 119)
120
(cabeq '35 (& 0) 136)
(cnblt (& 31) (& 36) 124)
(jcall read)
(mov a1 (& 1))
(bra 127)
126
(push a1)
(push (@ 128))
(push '"+")
(mov '1 a4)
(jmp print)
128
(eval ())
(pop a1)
127
(sobgez a1 126)
(mov (& 31) a4)
(plus (& 1) a4)
(mov a4 (& 31))
(bra 117)
124
(jcall read)
(mov a1 (& 1))
(bra 130)
129
(push a1)
(mov (& 32) a4)
(plus '1 a4)
(mov a4 (& 32))
(mov (& 2) a3)
(diff '1 a3)
(mov a3 (& 2))
(cnbne a4 (& 37) 131)
(mov (& 40) a2)
(mov (& 34) a1)
(jcall #:display:ps:print-bitvector)
(mov (& 2) a4)
(bra 134)
133
(push a4)
(push (@ 135))
(push '"+")
(mov '1 a4)
(jmp print)
135
(eval ())
(pop a4)
134
(sobgez a4 133)
(mov (& 32) a4)
(plus (& 2) a4)
(mov a4 (& 32))
(bra 132)
131
(mov nil a4)
132
(pop a1)
130
(sobgez a1 129)
(bra 117)
136
(jcall readcn)
(cabeq '42 a1 137)
(bra 136)
137
(mov nil a2)
(mov (& 29) a1)
(jcall #:bitvector:read)
(mov a1 (& 33))
(cnblt (& 31) (& 36) 139)
(push (@ 140))
(push (& 3))
(push '0)
(push a1)
(push (& 41))
(push (& 33))
(mov '5 a4)
(jmp bltstring)
140
(eval ())
(mov (& 39) a2)
(mov (& 2) a1)
(jcall #:display:ps:print-bitvector)
139
(mov (& 31) a4)
(plus '1 a4)
(mov a4 (& 31))
(bra 117)
118
(adjstk '3)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:compressed-icon))
(adjstk '8)
(push (@ 141))
(push (@ 142))
(mov '0 a4)
(jmp inchan)
142
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
141
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 115) a3)
114
(push a3)
(push a2)
(push (@ 143))
(push (& 4))
(mov '1 a4)
(jmp inchan)
143
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
115
(eval ())
(adjstk '1)
(bra 112)
111
(mov '0 a2)
(mov (& 13) a1)
(jcall makestring)
(push a1)
(mov '0 a2)
(mov (& 14) a1)
(jcall makestring)
(push a1)
(hpxmov (& 25) '2 a4)
(hpxmov a4 '1 a4)
(mov a4 (& 20))
(mov (& 19) a3)
(bra 145)
144
(push a3)
(push (@ 146))
(push (& 2))
(push '0)
(hpxmov (& 24) (& 22) a4)
(push a4)
(push (& 29))
(push (& 21))
(mov '5 a4)
(jmp bltstring)
146
(eval ())
(cabeq (& 19) (& 24) 147)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall eqstring)
(btnil a1 147)
(push (@ 149))
(push '"+")
(mov '1 a4)
(jmp print)
149
(eval ())
(bra 148)
147
(mov (& 27) a2)
(mov (& 1) a1)
(jcall #:display:ps:print-bitvector)
(push (@ 150))
(push (& 3))
(push '0)
(push (& 4))
(push '0)
(push (& 21))
(mov '5 a4)
(jmp bltstring)
150
(eval ())
148
(mov (& 19) a4)
(plus '1 a4)
(mov a4 (& 19))
(pop a3)
145
(sobgez a3 144)
(mov 't a1)
(adjstk '2)
112
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 151))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
151
(eval ())
(push (@ 152))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
152
(eval ())
(push (@ 153))
(push (& 6))
(mov '1 a4)
(jmp outchan)
153
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '3)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '19)
(return)
))
(loader'((fentry #:display:ps:psprintbytes nsubr)
(entry #:display:ps:psprintbytes nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:psprintbytes a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 4) '0 a4)
(push nil)
(push nil)
(push (& 3))
(push (& 3))
(push (& 6))
(push a4)
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp inchan)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp rmargin)
104
(eval ())
(push a1)
(push (@ 105))
(mov '0 a4)
(jmp lmargin)
105
(eval ())
(push a1)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(hpxmov (& 19) '37 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
108
(eval ())
(push (@ 109))
(hpxmov (& 18) '2 a1)
(jcall pathnamep)
(btnil a1 110)
(hpxmov (& 18) '2 a1)
(jcall openi)
(mov a1 a4)
(bra 111)
110
(mov nil a4)
111
(push a4)
(mov '1 a4)
(jmp inchan)
109
(eval ())
(push (@ 112))
(push (@ 113))
(mov '0 a4)
(jmp outbuf)
113
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
112
(eval ())
(push (@ 114))
(push '0)
(mov '1 a4)
(jmp lmargin)
114
(eval ())
(push (@ 117))
(mov '0 a4)
(jmp inchan)
117
(eval ())
(bfnil a1 115)
(mov '0 a2)
(mov (& 10) a1)
(jcall makestring)
(push a1)
(mov '0 a2)
(mov (& 11) a1)
(jcall makestring)
(push a1)
(hpxmov (& 19) '2 a4)
(hpxmov a4 '1 a4)
(mov a4 (& 14))
(mov (& 11) a3)
(bra 119)
118
(push a3)
(push (@ 120))
(push (& 2))
(push '0)
(hpxmov (& 18) (& 14) a4)
(push a4)
(push (& 23))
(push (& 18))
(mov '5 a4)
(jmp bltstring)
120
(eval ())
(mov (& 1) a2)
(mov (& 2) a1)
(jcall eqstring)
(btnil a1 121)
(cnbeq (& 11) (& 18) 121)
(push (@ 123))
(push '"+")
(mov '1 a4)
(jmp print)
123
(eval ())
(bra 122)
121
(push (@ 124))
(push (& 3))
(push '0)
(push (& 4))
(push '0)
(push (& 18))
(mov '5 a4)
(jmp bltstring)
124
(eval ())
(mov (& 21) a3)
(mov (& 13) a2)
(mov (& 1) a1)
(jcall #:display:ps:print-convertbytevector)
122
(mov (& 11) a4)
(plus '1 a4)
(mov a4 (& 11))
(pop a3)
119
(sobgez a3 118)
(adjstk '2)
(bra 116)
115
(mov '0 (& 8))
(mov '0 a2)
(mov (& 10) a1)
(jcall makestring)
(push 't)
(push nil)
(push a1)
(push (cvalq #:system:compressed-icon))
(mov (& 3) (cvalq #:system:compressed-icon))
(push '1)
(push '(#:system:compressed-icon))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
125
(mov (& 25) a4)
(plus (& 19) a4)
(cnbge (& 18) a4 126)
127
(jcall peekcn)
(mov a1 (& 8))
(cabeq '10 a1 129)
(cabne '13 a1 128)
129
(jcall readcn)
(bra 127)
128
(cabeq '35 (& 8) 144)
(cnblt (& 18) (& 25) 132)
(jcall read)
(mov a1 (& 21))
(bra 135)
134
(push a1)
(push (@ 136))
(push '"+")
(mov '1 a4)
(jmp print)
136
(eval ())
(pop a1)
135
(sobgez a1 134)
(mov (& 18) a4)
(plus (& 21) a4)
(mov a4 (& 18))
(bra 125)
132
(jcall read)
(mov a1 (& 21))
(bra 138)
137
(push a1)
(mov (& 19) a4)
(plus '1 a4)
(mov a4 (& 19))
(mov (& 22) a3)
(diff '1 a3)
(mov a3 (& 22))
(cnbne a4 (& 26) 139)
(mov (& 29) a3)
(mov (& 21) a2)
(mov (& 23) a1)
(jcall #:display:ps:print-convertbytevector)
(mov (& 22) a4)
(bra 142)
141
(push a4)
(push (@ 143))
(push '"+")
(mov '1 a4)
(jmp print)
143
(eval ())
(pop a4)
142
(sobgez a4 141)
(mov (& 19) a4)
(plus (& 22) a4)
(mov a4 (& 19))
(bra 140)
139
(mov nil a4)
140
(pop a1)
138
(sobgez a1 137)
(bra 125)
144
(jcall readcn)
(cabeq '42 a1 145)
(bra 144)
145
(mov nil a2)
(mov (& 17) a1)
(jcall #:bitvector:read)
(mov a1 (& 22))
(cnblt (& 18) (& 25) 147)
(push (@ 148))
(push (& 8))
(push '0)
(push a1)
(push (& 30))
(push (& 25))
(mov '5 a4)
(jmp bltstring)
148
(eval ())
(mov (& 28) a3)
(mov (& 20) a2)
(mov (& 7) a1)
(jcall #:display:ps:print-convertbytevector)
147
(mov (& 18) a4)
(plus '1 a4)
(mov a4 (& 18))
(bra 125)
126
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:compressed-icon))
(adjstk '10)
(push (@ 149))
(push (@ 150))
(mov '0 a4)
(jmp inchan)
150
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
149
(eval ())
116
(push (@ 151))
(mov '0 a4)
(jmp terpri)
151
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 152))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
152
(eval ())
(push (@ 153))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
153
(eval ())
(push (@ 154))
(push (& 6))
(mov '1 a4)
(jmp inchan)
154
(eval ())
(push (@ 155))
(push (& 7))
(mov '1 a4)
(jmp outchan)
155
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(adjstk '16)
(return)
))
(loader'((fentry #:display:ps:print-convertbytevector subr3)
(entry #:display:ps:print-convertbytevector subr3)
(push a3)
(push a2)
(push a1)
(push '0)
(hpxmov a3 '61 a4)
(cabeq a4 'color 102)
103
(cnbge (& 0) (& 2) 102)
(push (@ 105))
(push '256)
(hpxmov (& 5) '44 a1)
(hbxmov (& 3) (& 2) a4)
(hpxmov a1 a4 a1)
(bfnil a1 106)
(jcall standard-background)
106
(jcall #:display:ps:find-grey)
(push a1)
(mov '2 a4)
(jmp *)
105
(eval ())
(jcall fix)
(hbmovx a1 (& 1) (& 0))
(mov (& 0) a4)
(plus '1 a4)
(mov a4 (& 0))
(bra 103)
102
(mov (& 3) a2)
(mov (& 1) a1)
(adjstk '4)
(jmp #:display:ps:print-bitvector)
))
(loader'((fentry #:display:ps:print-bitvector subr2)
(entry #:display:ps:print-bitvector subr2)
(push a2)
(push a1)
(hgsize a1 a4)
(push '0)
(push nil)
(push nil)
(push a4)
(push (cvalq #:system:print-for-read))
(mov (& 2) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '"*")
(mov '1 a4)
(jmp prin)
101
(eval ())
(hpxmov (& 12) '63 a4)
(bfnil a4 102)
(mov (& 7) a4)
(bra 105)
104
(push a4)
(hbxmov (& 12) (& 11) a4)
(mov a4 (& 10))
(push (@ 106))
(lshift '-4 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a3)
(push a3)
(mov '1 a4)
(jmp princn)
106
(eval ())
(push (@ 107))
(mov (& 11) a4)
(land '15 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
107
(eval ())
(mov (& 11) a4)
(plus '1 a4)
(mov a4 (& 11))
(pop a4)
105
(sobgez a4 104)
(bra 103)
102
(push '-1)
(push '0)
108
(cabeq (& 12) (& 9) 109)
(hbxmov (& 13) (& 12) a4)
(mov a4 (& 11))
(cabne a4 (& 1) 110)
(mov (& 0) a3)
(plus '1 a3)
(mov a3 (& 0))
(bra 111)
110
(mov (& 0) a2)
(mov (& 1) a1)
(call #:display:ps:prin-aux)
(mov '0 (& 0))
(mov (& 11) (& 1))
111
(mov (& 12) a4)
(plus '1 a4)
(mov a4 (& 12))
(bra 108)
109
(cabne (& 1) '0 112)
(cabeq (& 0) '0 112)
(push (@ 114))
(hbxmov (cvalq #:bitmap:int->ext-encode-string) '62 a4)
(push a4)
(mov '1 a4)
(jmp princn)
114
(eval ())
(bra 113)
112
(mov (& 0) a2)
(mov (& 1) a1)
(call #:display:ps:prin-aux)
113
(adjstk '2)
103
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '11)
(push (@ 115))
(mov '0 a4)
(jmp print)
115
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:display:ps:prin-aux subr2)
(push a2)
(push a1)
(cnble a2 '896 102)
(diff '897 a2)
(call #:display:ps:prin-aux)
(mov '896 (& 1))
102
(cabeq (& 0) '-1 104)
(push (@ 105))
(push (& 1))
(push (cvalq #:bitmap:predefined-bytes))
(mov '2 a4)
(jmp chrpos)
105
(eval ())
(btnil a1 106)
(push (@ 108))
(mov '16 a4)
(plus a1 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
108
(eval ())
(bra 104)
106
(push (@ 109))
(mov (& 1) a4)
(lshift '-4 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
109
(eval ())
(push (@ 110))
(mov (& 1) a4)
(land '15 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
110
(eval ())
104
(cabeq (& 1) '0 111)
(mov (& 1) a4)
(diff '1 a4)
(mov a4 (& 1))
(cnbge a4 '16 113)
(push (@ 115))
(plus '32 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a3)
(push a3)
(mov '1 a4)
(jmp princn)
115
(eval ())
(adjstk '2)
(return)
113
(push (@ 116))
(lshift '-6 a4)
(plus '48 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a3)
(push a3)
(mov '1 a4)
(jmp princn)
116
(eval ())
(push (@ 117))
(mov (& 2) a4)
(land '63 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
117
(eval ())
(adjstk '2)
(return)
111
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:psprintbytemap nsubr)
(entry #:display:ps:psprintbytemap nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:psprintbytemap a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 5))
(push '/bmwidth)
(push (& 4))
(push 'def)
(mov '4 a4)
(jmp #:display:ps:psprint)
102
(eval ())
(push (@ 103))
(push (& 5))
(push '/bands)
(push (@ 104))
(push (& 5))
(push '3)
(mov '2 a4)
(jmp *)
104
(eval ())
(push a1)
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
103
(eval ())
(push (@ 105))
(push (& 5))
(push '/bmline)
(push (& 4))
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
105
(eval ())
(push (@ 106))
(push (& 5))
(push '/bmcline)
(push (@ 107))
(push (& 5))
(push '2)
(mov '2 a4)
(jmp *)
107
(eval ())
(push a1)
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
106
(eval ())
(push (@ 108))
(push (& 5))
(push (& 5))
(push (@ 109))
(hpxmov (& 8) '4 a4)
(push a4)
(push (& 7))
(mov '2 a4)
(jmp |-|)
109
(eval ())
(push a1)
(push 'translate)
(push (& 6))
(push (& 6))
(push 'scale)
(mov '7 a4)
(jmp #:display:ps:psprint)
108
(eval ())
(push (@ 110))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(jmp #:display:ps:drawbytemap)
110
(eval ())
(adjstk '5)
(return)
))
(defvar #:display:ps:iconmargin (if (boundp '#:display:ps:iconmargin) #:display:ps:iconmargin 0.3))
(defvar #:display:ps:iconmargin2 (* 2 #:display:ps:iconmargin))
(loader'((fentry #:display:ps:drawbytemap nsubr)
(entry #:display:ps:drawbytemap nsubr)
(cnbeq a4 '5 101)
(mov '#:display:ps:drawbytemap a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp rmargin)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp lmargin)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(hpxmov (& 11) '37 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
107
(eval ())
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push '0)
(mov '1 a4)
(jmp lmargin)
110
(eval ())
(push (@ 111))
(push (& 8))
(push (cvalq #:display:ps:s))
(push (& 9))
(push (cvalq #:display:ps:s))
(push '"8[")
(push (@ 112))
(push (& 14))
(push (cvalq #:display:ps:iconmargin2))
(mov '2 a4)
(jmp |-|)
112
(eval ())
(push a1)
(push '" 0 0 -")
(push (@ 113))
(push (& 15))
(push (cvalq #:display:ps:iconmargin2))
(mov '2 a4)
(jmp |-|)
113
(eval ())
(push a1)
(push (cvalq #:display:ps:s))
(push (cvalq #:display:ps:iconmargin))
(push (cvalq #:display:ps:s))
(push (cvalq #:display:ps:iconmargin))
(push '"]/read-")
(hpxmov (& 24) '61 a4)
(cabeq a4 'color 114)
(mov '"bitmap load image" a4)
(bra 115)
114
(push (@ 118))
(mov '0 a4)
(jmp current-mode)
118
(eval ())
(cnble a1 '7 116)
(mov '"inv-color-bitmap load false 3 colorimage" a4)
(bra 115)
116
(mov '"color-bitmap load false 3 colorimage" a4)
115
(push a4)
(mov '14 a4)
(jmp print)
111
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
119
(eval ())
(push (@ 120))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
120
(eval ())
(push (@ 121))
(push (& 6))
(mov '1 a4)
(jmp outchan)
121
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '8)
(return)
))
(loader'((entry #:display:ps:pscompressor-widget subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '36 a4)
(push a4)
(mov '1 a4)
(jmp channel)
101
(eval ())
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall pathname)
(push a1)
(push (@ 102))
(hpxmov (& 2) '36 a4)
(push a4)
(mov '1 a4)
(jmp close)
102
(eval ())
(push (@ 103))
(mov '0 a4)
(jmp ps-library-directory)
103
(eval ())
(hpxmov (& 1) '63 a4)
(btnil a4 104)
(mov '#:pathname:#[ () () (#:pathname:current "PS") "pscompress" "ps" () ] a2)
(bra 105)
104
(mov '#:pathname:#[ () () (#:pathname:current "PS") "pscompact" "ps" () ] a2)
105
(jcall #:display:ps:append-pathnames)
(mov a1 a2)
(mov (& 0) a1)
(jcall #:display:ps:append-files)
(mov (& 0) a1)
(jcall opena)
(hpmovx a1 (& 1) '36)
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:psinit-widget subr1)
(entry #:display:ps:psinit-widget subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '36 a4)
(push a4)
(mov '1 a4)
(jmp channel)
101
(eval ())
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall pathname)
(push a1)
(push (@ 102))
(hpxmov (& 2) '36 a4)
(push a4)
(mov '1 a4)
(jmp close)
102
(eval ())
(jcall #:display:ps:synchronize-disk)
(push (@ 103))
(mov '0 a4)
(jmp ps-library-directory)
103
(eval ())
(mov '#:pathname:#[ () () (#:pathname:current "PS") "psinit" "ps" () ] a2)
(jcall #:display:ps:append-pathnames)
(mov a1 a2)
(mov (& 0) a1)
(jcall #:display:ps:append-files)
(jcall #:display:ps:synchronize-disk)
(push (@ 104))
(mov '0 a4)
(jmp ps-library-directory)
104
(eval ())
(mov '#:pathname:#[ () () (#:pathname:current "PS") "psfont" "ps" () ] a2)
(jcall #:display:ps:append-pathnames)
(mov a1 a2)
(mov (& 0) a1)
(jcall #:display:ps:append-files)
(mov (& 0) a1)
(jcall opena)
(hpmovx a1 (& 1) '36)
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:psctm-widget subr1)
(entry #:display:ps:psctm-widget subr1)
(hpxmov a1 '42 a4)
(hpxmov a1 '48 a3)
(push (@ 101))
(push a4)
(push (cvalq #:display:ps:s))
(push a4)
(push (cvalq #:display:ps:s))
(push 'scale)
(push (cvalq #:display:ps:s))
(push a3)
(push (cvalq #:display:ps:s))
(push 'rotate)
(push (cvalq #:display:ps:s))
(hpxmov a1 '49 a2)
(push a2)
(push (cvalq #:display:ps:s))
(hpxmov a1 '50 a2)
(push a2)
(push (cvalq #:display:ps:s))
(push 'translate)
(mov '15 a4)
(jmp print)
101
(eval ())
(push (@ 102))
(push '"/rootmtrx matrix currentmatrix def")
(mov '1 a4)
(jmp print)
102
(eval ())
(push (@ 103))
(push '"clippath pathbbox /clipury exch def")
(mov '1 a4)
(jmp print)
103
(eval ())
(push (@ 104))
(push '"/clipurx exch def")
(mov '1 a4)
(jmp print)
104
(eval ())
(push (@ 105))
(push '"/cliplly exch def")
(mov '1 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push '"/clipllx exch def")
(mov '1 a4)
(jmp print)
106
(eval ())
(push (@ 107))
(mov '0 a4)
(jmp print)
107
(eval ())
(return)
))
(loader'((fentry #:display:ps:psdrawwin nsubr)
(entry #:display:ps:psdrawwin nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:psdrawwin a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(push (@ 102))
(push (& 6))
(push 'matrix)
(push 'currentmatrix)
(push 'clippath)
(push (cvalq #:display:ps:reset))
(mov '5 a4)
(jmp #:display:ps:psprint)
102
(eval ())
(push (@ 103))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(mov '6 a4)
(jmp #:display:ps:psbanner)
103
(eval ())
(push (@ 104))
(push (& 6))
(mov (& 7) a1)
(jcall #:display:ps:current-color)
(push a1)
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprin)
104
(eval ())
(btnil (cvalq #:display:ps:fill-main-background) 105)
(hpxmov (& 5) '61 a4)
(cabne a4 'grey 107)
(push (@ 109))
(push (& 6))
(push (@ 110))
(hpxmov (& 3) '7 a1)
(hpxmov a1 '5 a1)
(jcall #:display:ps:find-grey)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
110
(eval ())
(push a1)
(push (cvalq #:display:ps:setgray))
(mov '3 a4)
(jmp #:display:ps:psprint)
109
(eval ())
(bra 106)
107
(hpxmov (& 0) '7 a1)
(hpxmov a1 '5 a1)
(mov (cvalq #:display:ps:rgb) a2)
(jcall #:display:ps:get-rgb)
(push (@ 111))
(push (& 6))
(push (@ 112))
(hpxmov (cvalq #:display:ps:rgb) '0 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
112
(eval ())
(push a1)
(push (@ 113))
(hpxmov (cvalq #:display:ps:rgb) '1 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
113
(eval ())
(push a1)
(push (@ 114))
(hpxmov (cvalq #:display:ps:rgb) '2 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
114
(eval ())
(push a1)
(push (cvalq #:display:ps:setrgbcolor))
(mov '5 a4)
(jmp #:display:ps:psprint)
111
(eval ())
(bra 106)
105
(push (@ 115))
(push (& 6))
(push '1)
(push (cvalq #:display:ps:setgray))
(mov '3 a4)
(jmp #:display:ps:psprint)
115
(eval ())
106
(push (@ 116))
(push (& 6))
(push (& 4))
(push (& 4))
(push (& 8))
(push (@ 117))
(hpxmov (& 11) '4 a4)
(push a4)
(push (& 10))
(mov '2 a4)
(jmp |-|)
117
(eval ())
(push a1)
(push (cvalq #:display:ps:rectpath))
(push (cvalq #:display:ps:fill))
(mov (& 13) a1)
(jcall #:display:ps:set-current-color)
(push a1)
(push 'clip)
(push 'setmatrix)
(mov '10 a4)
(jmp #:display:ps:psprint)
116
(eval ())
(adjstk '6)
(return)
))
(defvar #:display:ps:fill-main-background (if (boundp '#:display:ps:fill-main-background) #:display:ps:fill-main-background t))
(loader'((fentry ps-fill-main-background nsubr)
(entry ps-fill-main-background nsubr)
(jcall #:llcp:nlist)
(btnil a1 101)
(mov (car a1) (cvalq #:display:ps:fill-main-background))
(mov (car a1) a1)
(return)
101
(mov (cvalq #:display:ps:fill-main-background) a1)
(return)
))
(defvar #:display:ps:border-width (if (boundp '#:display:ps:border-width) #:display:ps:border-width 2))
(if (not (boundp '#:display:ps:ps-show-title-function)) (progn (defvar #:display:ps:ps-show-title-function 'false)))
(loader'((fentry ps-show-title-function nsubr)
(entry ps-show-title-function nsubr)
(jcall #:llcp:nlist)
(btnil a1 101)
(mov (car a1) (cvalq #:display:ps:ps-show-title-function))
(mov (car a1) a1)
(return)
101
(mov (cvalq #:display:ps:ps-show-title-function) a1)
(return)
))
(if (not (boundp '#:display:ps:title-font)) (progn (defvar #:display:ps:title-font 0)))
(loader'((fentry ps-title-font subr1)
(entry ps-title-font subr1)
(bffix a1 101)
(mov a1 (cvalq #:display:ps:title-font))
(return)
101
(mov a1 a3)
(mov 'errnia a2)
(mov 'ps-title-font a1)
(jmp error)
))
(if (not (boundp '#:display:ps:title-foreground)) (progn (defvar #:display:ps:title-foreground "0 0 0")))
(loader'((fentry ps-title-foreground subr3)
(entry ps-title-foreground subr3)
(push a3)
(push a2)
(push a1)
(jcall numberp)
(btnil a1 103)
(mov (& 1) a1)
(jcall numberp)
(btnil a1 103)
(mov (& 2) a1)
(jcall numberp)
(bfnil a1 102)
103
(push (@ 104))
(push (& 1))
(push (& 3))
(push (& 5))
(mov '3 a4)
(jmp list)
104
(eval ())
(mov a1 a3)
(mov 'ps-title-foreground a2)
(mov 'errnna a1)
(jcall error)
102
(push (@ 105))
(mov (& 1) a1)
(jcall print-to-string)
(push a1)
(push '" ")
(mov (& 4) a1)
(jcall print-to-string)
(push a1)
(push '" ")
(mov (& 7) a1)
(jcall print-to-string)
(push a1)
(mov '5 a4)
(jmp catenate)
105
(eval ())
(mov a1 (cvalq #:display:ps:title-foreground))
(adjstk '3)
(return)
))
(if (not (boundp '#:display:ps:title-background)) (progn (defvar #:display:ps:title-background ".7 .7 .7")))
(loader'((fentry ps-title-background subr3)
(entry ps-title-background subr3)
(push a3)
(push a2)
(push a1)
(jcall numberp)
(btnil a1 103)
(mov (& 1) a1)
(jcall numberp)
(btnil a1 103)
(mov (& 2) a1)
(jcall numberp)
(bfnil a1 102)
103
(push (@ 104))
(push (& 1))
(push (& 3))
(push (& 5))
(mov '3 a4)
(jmp list)
104
(eval ())
(mov a1 a3)
(mov 'ps-title-background a2)
(mov 'errnna a1)
(jcall error)
102
(push (@ 105))
(mov (& 1) a1)
(jcall print-to-string)
(push a1)
(push '" ")
(mov (& 4) a1)
(jcall print-to-string)
(push a1)
(push '" ")
(mov (& 7) a1)
(jcall print-to-string)
(push a1)
(mov '5 a4)
(jmp catenate)
105
(eval ())
(mov a1 (cvalq #:display:ps:title-background))
(adjstk '3)
(return)
))
(loader'((entry #:display:ps:pstitle nsubr)
(mov (& 0) a2)
(mov (& 5) a1)
(jcall #:display:ps:border-width)
(push a1)
(hpxmov (& 6) '30 a4)
(hpxmov a4 (cvalq #:display:ps:title-font) a4)
(push a4)
(mov a4 a1)
(jcall #:display:ps:font-family)
(jcall #:display:ps:psfontname)
(push a1)
(push (cvalq #:display:ps:title-foreground))
(push (cvalq #:display:ps:title-background))
(push (@ 101))
(push (& 4))
(push (@ 102))
(push (& 6))
(push '"0123456789")
(mov '2 a4)
(jmp scanstring)
102
(eval ())
(push a1)
(hgsize (& 6) a4)
(push a4)
(mov '3 a4)
(jmp substring)
101
(eval ())
(jcall read-from-string)
(push a1)
(push (@ 103))
(push (@ 104))
(hpxmov (& 13) '31 a4)
(hpxmov a4 (cvalq #:display:ps:title-font) a4)
(hpxmov a4 '0 a4)
(push a4)
(push '1000)
(mov '2 a4)
(jmp /)
104
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp *)
103
(eval ())
(push a1)
(hpxmov (& 7) '4 a4)
(push a4)
(push nil)
(push '0)
(push nil)
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov (& 3) (cvalq #:system:print-msgs))
(push (cvalq #:system:error-flag))
(mov (& 5) (cvalq #:system:error-flag))
(push '3)
(push '(#:system:debug #:system:print-msgs #:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 107))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 108))
(push (cvalq #:display:ps:ps-show-title-function))
(push (& 26))
(mov '2 a4)
(jmp funcall)
108
(eval ())
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
107
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(mov (& 7) (cvalq #:system:print-msgs))
(mov (& 8) (cvalq #:system:debug))
(adjstk '12)
(btnil (car a1) 105)
(push (@ 109))
(push (& 14))
(push (@ 110))
(push (& 13))
(push (& 11))
(push (& 12))
(mov '3 a4)
(jmp |+|)
110
(eval ())
(push a1)
(push (@ 111))
(push (& 6))
(push (& 12))
(push (& 13))
(mov '3 a4)
(jmp |+|)
111
(eval ())
(push a1)
(push (@ 112))
(push (& 17))
(push (& 13))
(mov '2 a4)
(jmp |-|)
112
(eval ())
(push a1)
(push (@ 113))
(hpxmov (& 19) '4 a4)
(push a4)
(push (@ 114))
(push (& 19))
(push (& 16))
(push (& 12))
(push (& 18))
(mov '4 a4)
(jmp |-|)
114
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
113
(eval ())
(push a1)
(push (cvalq #:display:ps:rectpath))
(mov '6 a4)
(jmp #:display:ps:psprint)
109
(eval ())
(push (@ 115))
(push (& 14))
(mov (& 15) a1)
(jcall #:display:ps:current-color)
(push a1)
(push '0)
(push (cvalq #:display:ps:setgray))
(push (cvalq #:display:ps:fill))
(mov '5 a4)
(jmp #:display:ps:psprint)
115
(eval ())
(push (@ 116))
(push (& 14))
(push (& 12))
(push (& 5))
(push (& 16))
(push (@ 117))
(hpxmov (& 19) '4 a4)
(push a4)
(push (@ 118))
(push (& 19))
(push (& 16))
(push (& 12))
(mov '3 a4)
(jmp |-|)
118
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
117
(eval ())
(push a1)
(push (cvalq #:display:ps:rectpath))
(mov '6 a4)
(jmp #:display:ps:psprint)
116
(eval ())
(push (@ 119))
(push (& 14))
(push (& 5))
(push (cvalq #:display:ps:setrgbcolor))
(push 'gsave)
(push 'clip)
(push 'clippath)
(push (cvalq #:display:ps:fill))
(mov '7 a4)
(jmp #:display:ps:psprint)
119
(eval ())
(push (@ 120))
(push (& 14))
(push (@ 121))
(push (& 15))
(push (@ 122))
(push (& 7))
(push '3)
(mov '2 a4)
(jmp /)
122
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
121
(eval ())
(push a1)
(push (@ 123))
(hpxmov (& 17) '4 a4)
(push a4)
(push (@ 124))
(push (& 17))
(push (& 14))
(push (& 9))
(mov '3 a4)
(jmp |-|)
124
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
123
(eval ())
(push a1)
(push (cvalq #:display:ps:moveto))
(push (& 9))
(push (cvalq #:display:ps:setrgbcolor))
(mov '6 a4)
(jmp #:display:ps:psprint)
120
(eval ())
(push (@ 125))
(push (& 14))
(push (& 4))
(push (@ 126))
(push '"/LL")
(push (& 10))
(mov '2 a4)
(jmp catenate)
126
(eval ())
(push a1)
(push '"lf")
(mov '4 a4)
(jmp #:display:ps:psprint)
125
(eval ())
(mov (& 0) a2)
(mov (& 13) a1)
(jcall #:display:ps:psstring)
(push (@ 127))
(push (& 14))
(push 'show)
(push 'grestore)
(mov '3 a4)
(jmp #:display:ps:psprint)
127
(eval ())
(push (@ 128))
(push (& 14))
(mov (& 15) a1)
(jcall #:display:ps:set-current-color)
(push a1)
(mov '2 a4)
(jmp #:display:ps:psprint)
128
(eval ())
(adjstk '14)
(return)
105
(mov nil a1)
(adjstk '14)
(return)
))
(loader'((fentry #:display:ps:psbanner nsubr)
(entry #:display:ps:psbanner nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:psbanner a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 0) a2)
(mov (& 5) a1)
(jcall #:display:ps:border-width)
(push a1)
(cabeq (& 3) '0 102)
(cabeq (& 2) '0 102)
(push (@ 104))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '6 a4)
(bra #:display:ps:pstitle)
104
(eval ())
(push (@ 105))
(push (& 7))
(push (@ 106))
(push (& 6))
(push (& 4))
(push (& 5))
(mov '3 a4)
(jmp |+|)
106
(eval ())
(push a1)
(push (@ 107))
(push (& 6))
(push (& 5))
(push (& 6))
(mov '3 a4)
(jmp |+|)
107
(eval ())
(push a1)
(push (@ 108))
(push (& 10))
(push (& 6))
(mov '2 a4)
(jmp |-|)
108
(eval ())
(push a1)
(push (@ 109))
(hpxmov (& 12) '4 a4)
(push a4)
(push (@ 110))
(push (& 12))
(push (& 9))
(mov '2 a4)
(jmp |-|)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
109
(eval ())
(push a1)
(push (cvalq #:display:ps:rectpath))
(mov (& 13) a1)
(jcall #:display:ps:current-color)
(push a1)
(push '0)
(push (cvalq #:display:ps:setgray))
(push (cvalq #:display:ps:fill))
(mov (& 17) a1)
(jcall #:display:ps:set-current-color)
(push a1)
(mov '11 a4)
(jmp #:display:ps:psprint)
105
(eval ())
(adjstk '7)
(return)
102
(mov nil a1)
(adjstk '7)
(return)
))
(loader'((fentry #:display:ps:border-width subr2)
(entry #:display:ps:border-width subr2)
(mov (cvalq #:display:ps:border-width) a1)
(return)
))
(loader'((fentry ps-banner-width nsubr)
(entry ps-banner-width nsubr)
(jcall #:llcp:nlist)
(btnil a1 101)
(mov (car a1) (cvalq #:display:ps:border-width))
(mov (car a1) a1)
(return)
101
(mov (cvalq #:display:ps:border-width) a1)
(return)
))
(loader'((fentry #:display:ps:pscurwindow nsubr)
(entry #:display:ps:pscurwindow nsubr)
(cnbeq a4 '6 101)
(mov '#:display:ps:pscurwindow a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 0) '8 a4)
(hpxmov a4 '1 a4)
(push a4)
(mov (& 1) a1)
(jcall #:display:ps:top-window)
(hpxmov a1 '0 a3)
(pop a4)
(plus a3 a4)
(push a4)
(hpxmov (& 1) '8 a3)
(hpxmov a3 '2 a3)
(push a3)
(mov (& 2) a1)
(jcall #:display:ps:top-window)
(hpxmov a1 '1 a2)
(pop a4)
(plus a2 a4)
(push a4)
(push (@ 102))
(push (& 8))
(push (cvalq #:display:ps:reset))
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprin)
102
(eval ())
(mov (& 2) a2)
(mov (& 7) a1)
(jcall #:display:ps:psclip)
(mov (& 1) a1)
(jcall zerop)
(btnil a1 105)
(mov (& 0) a1)
(jcall zerop)
(bfnil a1 103)
105
(push (@ 106))
(push (& 8))
(push (& 3))
(push (@ 107))
(push (& 4))
(mov '1 a4)
(jmp |-|)
107
(eval ())
(push a1)
(push 'translate)
(mov '4 a4)
(jmp #:display:ps:psprint)
106
(eval ())
(adjstk '8)
(return)
103
(mov nil a1)
(adjstk '8)
(return)
))
(if (not (boundp '#:display:ps:rec)) (progn (defvar #:display:ps:rec (#:image:rectangle:make))))
(loader'((fentry #:display:ps:psclip subr2)
(entry #:display:ps:psclip subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall #:display:ps:top-window)
(hpxmov (& 1) '7 a4)
(hpxmov a4 '12 a4)
(hpxmov a4 '0 a4)
(push a4)
(push nil)
(push a1)
(push a1)
(hpxmov (& 4) '14 a3)
(push a3)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 105))
(push 'father)
(push (& 2))
(mov '2 a4)
(jmp send)
105
(eval ())
(bfnil a1 103)
(push (@ 106))
(push (& 1))
(mov '1 a4)
(jmp list)
106
(eval ())
(bra 104)
103
(mov nil a1)
104
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(pop a1)
(jcall memq)
(mov a1 a2)
(pop a1)
(jcall remq)
(push a1)
(push (cvalq #:display:ps:rec))
(hpxmov (& 3) '0 a4)
(push a4)
(hpxmov (& 6) '8 a3)
(hpxmov a3 '1 a3)
(push a3)
(mov (& 7) a1)
(jcall #:display:ps:top-window)
(hpxmov a1 '0 a2)
(pop a4)
(plus a2 a4)
(pop a3)
(plus a4 a3)
(pop a4)
(hpmovx a3 a4 '0)
(push (cvalq #:display:ps:rec))
(hpxmov (& 3) '1 a4)
(push a4)
(hpxmov (& 6) '8 a3)
(hpxmov a3 '2 a3)
(push a3)
(mov (& 7) a1)
(jcall #:display:ps:top-window)
(hpxmov a1 '1 a2)
(pop a4)
(plus a2 a4)
(pop a3)
(plus a4 a3)
(pop a4)
(hpmovx a3 a4 '1)
(hpxmov (& 2) '2 a4)
(hpmovx a4 (cvalq #:display:ps:rec) '2)
(hpxmov (& 2) '3 a4)
(hpmovx a4 (cvalq #:display:ps:rec) '3)
(push (cvalq #:display:ps:rec))
(mov (cvalq #:display:ps:rec) a2)
(mov (& 1) a1)
(jcall #:display:ps:bbox-list)
(mov a1 a2)
(pop a1)
(jcall cons)
(jcall #:display:ps:compute-all-regions)
(mov a1 (& 1))
(jcall length)
(cnble a1 '1 107)
(push (@ 109))
(push (& 4))
(push (cvalq #:display:ps:newpath))
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprint)
109
(eval ())
(push (& 1))
110
(bfcons (& 0) 111)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 112))
(push (& 6))
(hpxmov (& 2) '0 a4)
(push a4)
(push (@ 113))
(hpxmov (& 9) '4 a4)
(push a4)
(hpxmov (& 5) '1 a4)
(push a4)
(mov '2 a4)
(jmp |-|)
113
(eval ())
(push a1)
(push (cvalq #:display:ps:moveto))
(hpxmov (& 5) '2 a4)
(push a4)
(push '0)
(push (cvalq #:display:ps:rlineto))
(push '0)
(push (@ 114))
(hpxmov (& 10) '3 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
114
(eval ())
(push a1)
(push (cvalq #:display:ps:rlineto))
(push (@ 115))
(hpxmov (& 12) '2 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
115
(eval ())
(push a1)
(push '0)
(push (cvalq #:display:ps:rlineto))
(push '0)
(hpxmov (& 15) '3 a4)
(push a4)
(push (cvalq #:display:ps:rlineto))
(mov '16 a4)
(jmp #:display:ps:psprint)
112
(eval ())
(adjstk '1)
(bra 110)
111
(adjstk '1)
(bra 108)
107
(mov (& 1) a4)
(mov (car a4) (& 1))
(btnil (& 1) 116)
(push (@ 118))
(push (& 4))
(hpxmov (& 3) '2 a4)
(push a4)
(hpxmov (& 4) '3 a4)
(push a4)
(hpxmov (& 5) '0 a4)
(push a4)
(push (@ 119))
(hpxmov (& 9) '4 a4)
(push a4)
(hpxmov (& 8) '1 a4)
(push a4)
(mov '2 a4)
(jmp |-|)
119
(eval ())
(push a1)
(push (cvalq #:display:ps:rectpath))
(mov '6 a4)
(jmp #:display:ps:psprin)
118
(eval ())
(bra 108)
116
(push (@ 120))
(push (& 4))
(push '0)
(push '0)
(push '0)
(push '0)
(push (cvalq #:display:ps:rectpath))
(mov '6 a4)
(jmp #:display:ps:psprin)
120
(eval ())
108
(push (@ 121))
(push (& 4))
(push (cvalq #:display:ps:s))
(push 'clip)
(mov '3 a4)
(jmp #:display:ps:psprint)
121
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:bounding-box subr2)
(entry #:display:ps:bounding-box subr2)
(push a2)
(push a1)
(hpxmov a1 '12 a1)
(mov (& 0) a2)
(jcall #:display:ps:border-width)
(push a1)
(push (@ 101))
(hpxmov (& 2) '0 a4)
(push a4)
(push a1)
(mov '2 a4)
(jmp |-|)
101
(eval ())
(hpmovx a1 (& 2) '0)
(push (@ 102))
(hpxmov (& 2) '1 a4)
(push a4)
(push (& 2))
(mov '2 a4)
(jmp |-|)
102
(eval ())
(hpmovx a1 (& 2) '1)
(push (@ 103))
(hpxmov (& 2) '2 a4)
(push a4)
(push (& 2))
(push (& 3))
(mov '3 a4)
(jmp |+|)
103
(eval ())
(hpmovx a1 (& 2) '2)
(push (@ 104))
(hpxmov (& 2) '3 a4)
(push a4)
(push (& 2))
(push (& 3))
(mov '3 a4)
(jmp |+|)
104
(eval ())
(hpmovx a1 (& 2) '3)
(adjstk '1)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(defvar #:display:ps:roundcolor (if (boundp '#:display:ps:roundcolor) #:display:ps:roundcolor 0.01))
(defvar #:display:ps:1/roundcolor 100)
(defvar #:display:ps:find-grey-func (if (boundp '#:display:ps:find-grey-func) #:display:ps:find-grey-func '#:display:ps:standard-find-grey))
(defvar #:display:ps:find-grey-hash-table (make-hash-table-eq))
(loader'((fentry #:display:ps:find-grey subr1)
(entry #:display:ps:find-grey subr1)
(push a1)
(push (@ 102))
(push a1)
(push (cvalq #:display:ps:find-grey-hash-table))
(mov '2 a4)
(jmp gethash)
102
(eval ())
(bfnil a1 101)
(push (@ 103))
(push (cvalq #:display:ps:find-grey-func))
(push (& 2))
(mov '2 a4)
(jmp funcall)
103
(eval ())
(push a1)
(hpxmov (& 1) '4 a4)
(bfnil a4 105)
(mov a1 a3)
(mov (cvalq #:display:ps:find-grey-hash-table) a2)
(mov (& 1) a1)
(jcall puthash)
105
(mov (& 0) a1)
(adjstk '1)
101
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:standard-find-grey subr1)
(entry #:display:ps:standard-find-grey subr1)
(push a1)
(push (@ 101))
(push (@ 102))
(hpxmov a1 '1 a4)
(push a4)
(push '106666.7)
(mov '2 a4)
(jmp /)
102
(eval ())
(push a1)
(push (@ 103))
(hpxmov (& 3) '2 a4)
(push a4)
(push '56478.)
(mov '2 a4)
(jmp /)
103
(eval ())
(push a1)
(push (@ 104))
(hpxmov (& 4) '3 a4)
(push a4)
(push '290909.1)
(mov '2 a4)
(jmp /)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp |+|)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry ps-find-grey-function nsubr)
(entry ps-find-grey-function nsubr)
(jcall #:llcp:nlist)
(btnil a1 101)
(mov (car a1) (cvalq #:display:ps:find-grey-func))
(mov (car a1) a1)
(return)
101
(mov (cvalq #:display:ps:find-grey-func) a1)
(return)
))
(defvar #:display:ps:find-rgb-func (if (boundp '#:display:ps:find-rgb-func) #:display:ps:find-rgb-func '#:display:ps:standard-find-rgb))
(loader'((fentry #:display:ps:get-rgb subr2)
(entry #:display:ps:get-rgb subr2)
(push (@ 101))
(push (cvalq #:display:ps:find-rgb-func))
(push a1)
(push a2)
(mov '3 a4)
(jmp funcall)
101
(eval ())
(return)
))
(loader'((fentry #:display:ps:standard-find-rgb subr2)
(entry #:display:ps:standard-find-rgb subr2)
(push a2)
(push a1)
(push a2)
(push (@ 101))
(hpxmov a1 '1 a4)
(push a4)
(push '32767.)
(mov '2 a4)
(jmp /)
101
(eval ())
(pop a4)
(hpmovx a1 a4 '0)
(push (@ 102))
(hpxmov (& 1) '2 a4)
(push a4)
(push '32767.)
(mov '2 a4)
(jmp /)
102
(eval ())
(hpmovx a1 (& 1) '1)
(push (@ 103))
(hpxmov (& 1) '3 a4)
(push a4)
(push '32767.)
(mov '2 a4)
(jmp /)
103
(eval ())
(hpmovx a1 (& 1) '2)
(adjstk '2)
(return)
))
(loader'((fentry ps-find-rgb-function nsubr)
(entry ps-find-rgb-function nsubr)
(jcall #:llcp:nlist)
(btnil a1 101)
(mov (car a1) (cvalq #:display:ps:find-rgb-func))
(mov (car a1) a1)
(return)
101
(mov (cvalq #:display:ps:find-rgb-func) a1)
(return)
))
(loader'((fentry #:display:ps:current-color subr1)
(entry #:display:ps:current-color subr1)
(hpxmov a1 '61 a4)
(cabeq a4 'grey 101)
(mov (cvalq #:display:ps:currentrgbcolor) a1)
(return)
101
(mov (cvalq #:display:ps:currentgray) a1)
(return)
))
(loader'((fentry #:display:ps:set-current-color subr1)
(entry #:display:ps:set-current-color subr1)
(hpxmov a1 '61 a4)
(cabeq a4 'grey 101)
(mov (cvalq #:display:ps:setrgbcolor) a1)
(return)
101
(mov (cvalq #:display:ps:setgray) a1)
(return)
))
(defvar #:display:ps:rgb (makevector 3 0))
(loader'((fentry #:display:ps:ps-set-modecolor subr3)
(entry #:display:ps:ps-set-modecolor subr3)
(push a3)
(push a2)
(push a1)
(mov a2 a1)
(jcall #:display:ps:find-grey)
(push a1)
(hpxmov (& 1) '61 a4)
(cabeq a4 'grey 102)
(mov (cvalq #:display:ps:rgb) a2)
(mov (& 2) a1)
(jcall #:display:ps:get-rgb)
102
(push (@ 105))
(push (& 1))
(push '0.5)
(mov '2 a4)
(jmp <)
105
(eval ())
(btnil a1 103)
(hpxmov (& 1) '61 a4)
(cabeq a4 'grey 106)
(mov (& 3) a4)
(cabeq a4 '2 110)
(cabeq a4 '3 110)
(cabeq a4 '6 110)
(cabeq a4 '7 110)
(cabeq a4 '10 110)
(cabeq a4 '11 110)
(cabeq a4 '14 110)
(cabne a4 '15 108)
110
(push (@ 111))
(push (& 2))
(push (@ 112))
(hpxmov (cvalq #:display:ps:rgb) '0 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
112
(eval ())
(push a1)
(push (@ 113))
(hpxmov (cvalq #:display:ps:rgb) '1 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
113
(eval ())
(push a1)
(push (@ 114))
(hpxmov (cvalq #:display:ps:rgb) '2 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
114
(eval ())
(push a1)
(push (cvalq #:display:ps:setrgbcolor))
(mov '5 a4)
(jmp #:display:ps:psprin)
111
(eval ())
(bra 104)
108
(push (@ 115))
(push (& 2))
(push (@ 116))
(push (@ 117))
(push '1)
(hpxmov (cvalq #:display:ps:rgb) '0 a3)
(push a3)
(mov '2 a4)
(jmp |-|)
117
(eval ())
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
116
(eval ())
(push a1)
(push (@ 118))
(push (@ 119))
(push '1)
(hpxmov (cvalq #:display:ps:rgb) '1 a4)
(push a4)
(mov '2 a4)
(jmp |-|)
119
(eval ())
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
118
(eval ())
(push a1)
(push (@ 120))
(push (@ 121))
(push '1)
(hpxmov (cvalq #:display:ps:rgb) '2 a4)
(push a4)
(mov '2 a4)
(jmp |-|)
121
(eval ())
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
120
(eval ())
(push a1)
(push (cvalq #:display:ps:setrgbcolor))
(mov '5 a4)
(jmp #:display:ps:psprin)
115
(eval ())
(bra 104)
106
(push (@ 122))
(push (& 2))
(push (@ 123))
(mov (& 6) a4)
(cabeq a4 '2 126)
(cabeq a4 '3 126)
(cabeq a4 '6 126)
(cabeq a4 '7 126)
(cabeq a4 '10 126)
(cabeq a4 '11 126)
(cabeq a4 '14 126)
(cabne a4 '15 124)
126
(mov (& 3) a1)
(bra 125)
124
(push (@ 127))
(push '1)
(push (& 5))
(mov '2 a4)
(jmp |-|)
127
(eval ())
125
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
123
(eval ())
(push a1)
(push (cvalq #:display:ps:setgray))
(mov '3 a4)
(jmp #:display:ps:psprin)
122
(eval ())
(bra 104)
103
(hpxmov (& 1) '61 a4)
(cabeq a4 'grey 128)
(mov (& 3) a4)
(cabeq a4 '8 132)
(cabeq a4 '9 132)
(cabeq a4 '10 132)
(cabeq a4 '11 132)
(cabeq a4 '12 132)
(cabeq a4 '13 132)
(cabeq a4 '14 132)
(cabne a4 '15 130)
132
(push (@ 133))
(push (& 2))
(push (@ 134))
(push (@ 135))
(push '1)
(hpxmov (cvalq #:display:ps:rgb) '0 a3)
(push a3)
(mov '2 a4)
(jmp |-|)
135
(eval ())
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
134
(eval ())
(push a1)
(push (@ 136))
(push (@ 137))
(push '1)
(hpxmov (cvalq #:display:ps:rgb) '1 a4)
(push a4)
(mov '2 a4)
(jmp |-|)
137
(eval ())
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
136
(eval ())
(push a1)
(push (@ 138))
(push (@ 139))
(push '1)
(hpxmov (cvalq #:display:ps:rgb) '2 a4)
(push a4)
(mov '2 a4)
(jmp |-|)
139
(eval ())
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
138
(eval ())
(push a1)
(push (cvalq #:display:ps:setrgbcolor))
(mov '5 a4)
(jmp #:display:ps:psprin)
133
(eval ())
(bra 104)
130
(push (@ 140))
(push (& 2))
(push (@ 141))
(hpxmov (cvalq #:display:ps:rgb) '0 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
141
(eval ())
(push a1)
(push (@ 142))
(hpxmov (cvalq #:display:ps:rgb) '1 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
142
(eval ())
(push a1)
(push (@ 143))
(hpxmov (cvalq #:display:ps:rgb) '2 a1)
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
143
(eval ())
(push a1)
(push (cvalq #:display:ps:setrgbcolor))
(mov '5 a4)
(jmp #:display:ps:psprin)
140
(eval ())
(bra 104)
128
(push (@ 144))
(push (& 2))
(push (@ 145))
(mov (& 6) a4)
(cabeq a4 '8 148)
(cabeq a4 '9 148)
(cabeq a4 '10 148)
(cabeq a4 '11 148)
(cabeq a4 '12 148)
(cabeq a4 '13 148)
(cabeq a4 '14 148)
(cabne a4 '15 146)
148
(push (@ 149))
(push '1)
(push (& 5))
(mov '2 a4)
(jmp |-|)
149
(eval ())
(bra 147)
146
(mov (& 3) a1)
147
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
145
(eval ())
(push a1)
(push (cvalq #:display:ps:setgray))
(mov '3 a4)
(jmp #:display:ps:psprin)
144
(eval ())
104
(adjstk '1)
(push (@ 150))
(push (& 1))
(push (cvalq #:display:ps:s))
(mov '2 a4)
(jmp #:display:ps:psprin)
150
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry #:display:ps:psfill subr1)
(entry #:display:ps:psfill subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-mode)
101
(eval ())
(push a1)
(push (@ 102))
(hpxmov (& 2) '33 a4)
(push a4)
(mov '1 a4)
(jmp graph-env-fill-mode)
102
(eval ())
(push a1)
(push (@ 103))
(hpxmov (& 3) '33 a4)
(push a4)
(mov '1 a4)
(jmp graph-env-stipple)
103
(eval ())
(push a1)
(push (@ 104))
(hpxmov (& 4) '33 a4)
(push a4)
(mov '1 a4)
(jmp graph-env-pattern)
104
(eval ())
(push '((0 . 1) (1 . 0) (2 . 0.5) (3 . 0.75) (4 . 0.25)))
(push a1)
(mov (& 3) a1)
(cabne a1 'foreground 106)
(mov '1 a3)
(mov (& 4) a2)
(mov (& 5) a1)
(adjstk '6)
(bra #:display:ps:psfill-pattern)
106
(cabne a1 'opaquestipple 107)
(mov '0 a3)
(mov (& 4) a2)
(mov (& 5) a1)
(call #:display:ps:psfill-pattern)
(push (@ 108))
(push (& 6))
(push (& 6))
(push nil)
(push (& 6))
(mov '4 a4)
(bra #:display:ps:psfill-stipple)
108
(eval ())
(adjstk '6)
(return)
107
(cabne a1 'transparentstipple 109)
(push (@ 110))
(push (& 6))
(push (& 6))
(push nil)
(push (& 6))
(mov '4 a4)
(bra #:display:ps:psfill-stipple)
110
(eval ())
(adjstk '6)
(return)
109
(mov (& 0) a3)
(mov (& 4) a2)
(mov (& 5) a1)
(adjstk '6)
(bra #:display:ps:psfill-pattern)
))
(loader'((entry #:display:ps:psfill-pattern subr3)
(push a3)
(push a2)
(push a1)
(push '((0 . 1) (1 . 0) (2 . 0.5) (3 . 0.75) (4 . 0.25)))
(mov a3 a1)
(cabne a1 '1 102)
(push (@ 103))
(push (& 2))
(mov (& 3) a1)
(jcall #:display:ps:current-color)
(push a1)
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprin)
103
(eval ())
(push (@ 104))
(mov '0 a4)
(jmp current-foreground)
104
(eval ())
(mov (& 2) a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall #:display:ps:ps-set-modecolor)
(push (@ 105))
(push (& 2))
(push (cvalq #:display:ps:s))
(push (cvalq #:display:ps:fill))
(mov (& 5) a1)
(jcall #:display:ps:set-current-color)
(push a1)
(mov '4 a4)
(jmp #:display:ps:psprint)
105
(eval ())
(adjstk '4)
(return)
102
(cabne a1 '0 106)
(push (@ 107))
(push (& 2))
(push (cvalq #:display:ps:gsave))
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprin)
107
(eval ())
(push (@ 108))
(mov '0 a4)
(jmp current-background)
108
(eval ())
(mov (& 2) a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall #:display:ps:ps-set-modecolor)
(push (@ 109))
(push (& 2))
(push (cvalq #:display:ps:s))
(push (cvalq #:display:ps:fill))
(push (cvalq #:display:ps:grestore))
(mov '4 a4)
(jmp #:display:ps:psprint)
109
(eval ())
(adjstk '4)
(return)
106
(cabeq a1 '2 111)
(cabeq a1 '3 111)
(cabne a1 '4 110)
111
(cabeq a2 '5 112)
(push (@ 114))
(push (& 2))
(mov (& 3) a1)
(jcall #:display:ps:current-color)
(push a1)
(push (@ 115))
(mov (& 6) a1)
(cabeq a1 '0 118)
(cabne a1 '1 117)
118
(mov '1 a1)
(bra 116)
117
(cabeq a1 '2 120)
(cabeq a1 '3 120)
(cabeq a1 '4 120)
(cabeq a1 '6 120)
(cabne a1 '7 119)
120
(mov (& 4) a2)
(mov (& 7) a1)
(jcall cassq)
(bra 116)
119
(cabeq a1 '8 122)
(cabeq a1 '9 122)
(cabeq a1 '12 122)
(cabne a1 '13 121)
122
(push (@ 123))
(push '1)
(mov (& 6) a2)
(mov (& 9) a1)
(jcall cassq)
(push a1)
(mov '2 a4)
(jmp |-|)
123
(eval ())
(bra 116)
121
(cabeq a1 '10 125)
(cabeq a1 '11 125)
(cabeq a1 '14 125)
(cabne a1 '15 124)
125
(mov '0 a1)
(bra 116)
124
(mov nil a1)
116
(mov (cvalq #:display:ps:roundcolor) a2)
(jcall round)
(push a1)
(push (cvalq #:display:ps:1/roundcolor))
(mov '2 a4)
(jmp /)
115
(eval ())
(push a1)
(push (cvalq #:display:ps:setgray))
(push (cvalq #:display:ps:fill))
(mov (& 7) a1)
(jcall #:display:ps:set-current-color)
(push a1)
(mov '6 a4)
(jmp #:display:ps:psprint)
114
(eval ())
(adjstk '4)
(return)
112
(mov nil a1)
(adjstk '4)
(return)
110
(push (@ 127))
(push (& 2))
(push a2)
(push a1)
(push nil)
(mov '4 a4)
(bra #:display:ps:psfill-stipple)
127
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:drawfore subr1)
(entry #:display:ps:drawfore subr1)
(push a1)
(hpxmov a1 '9 a1)
(hpxmov a1 '4 a1)
(jcall #:display:ps:find-grey)
(hpxmov (& 0) '9 a4)
(hpxmov a4 '3 a4)
(push a4)
(push a1)
(push (@ 105))
(push a1)
(push '0.5)
(mov '2 a4)
(jmp <)
105
(eval ())
(btnil a1 104)
(mov '(1 5 9 13) a2)
(mov (& 1) a1)
(jcall memq)
104
(bfnil a1 103)
(push (@ 107))
(push (& 1))
(push '0.5)
(mov '2 a4)
(jmp >=)
107
(eval ())
(btnil a1 103)
(mov '(4 5 6 7) a2)
(mov (& 1) a1)
(jcall memq)
103
(btnil a1 101)
(mov nil a1)
(bra 102)
101
(mov 't a1)
102
(adjstk '3)
(return)
))
(loader'((fentry #:display:ps:drawback subr1)
(entry #:display:ps:drawback subr1)
(push a1)
(hpxmov a1 '9 a1)
(hpxmov a1 '5 a1)
(jcall #:display:ps:find-grey)
(hpxmov (& 0) '9 a4)
(hpxmov a4 '3 a4)
(push a4)
(push a1)
(push (@ 105))
(push a1)
(push '0.5)
(mov '2 a4)
(jmp <)
105
(eval ())
(btnil a1 104)
(mov '(1 5 9 13) a2)
(mov (& 1) a1)
(jcall memq)
104
(bfnil a1 103)
(push (@ 107))
(push (& 1))
(push '0.5)
(mov '2 a4)
(jmp >=)
107
(eval ())
(btnil a1 103)
(mov '(4 5 6 7) a2)
(mov (& 1) a1)
(jcall memq)
103
(btnil a1 101)
(mov nil a1)
(bra 102)
101
(mov 't a1)
102
(adjstk '3)
(return)
))
(loader'((entry #:display:ps:bitmap-name subr1)
(push (@ 101))
(push '"psbit")
(jcall loc)
(push (cdr a1))
(mov '2 a4)
(jmp concat)
101
(eval ())
(return)
))
(defvar #:display:ps:store-bitmaps t)
(loader'((entry #:display:ps:psfill-stipple nsubr)
(mov (& 3) a1)
(jcall #:display:ps:drawback)
(btnil a1 102)
(btnil (& 1) 102)
(push (@ 103))
(push (& 4))
(push (cvalq #:display:ps:gsave))
(cnble (& 5) '7 104)
(mov '0 a4)
(bra 105)
104
(mov '1 a4)
105
(push a4)
(push (cvalq #:display:ps:setgray))
(push (cvalq #:display:ps:fill))
(push (cvalq #:display:ps:grestore))
(mov '6 a4)
(jmp #:display:ps:psprint)
103
(eval ())
102
(mov (& 3) a1)
(jcall #:display:ps:drawfore)
(btnil a1 106)
(cabeq (& 2) '0 106)
(cabeq (& 2) '15 106)
(mov (& 0) a4)
(bfnil a4 108)
(hpxmov (& 3) '29 a4)
(hpxmov a4 (& 1) a4)
108
(push a4)
(hpxmov a4 '0 a3)
(push a3)
(hpxmov a4 '1 a2)
(push a2)
(mov a4 a1)
(call #:display:ps:bitmap-name)
(push a1)
(hpmovx 't (& 7) '43)
(hpmovx 't (& 7) '62)
(push (@ 109))
(push (& 8))
(push (cvalq #:display:ps:gsave))
(mov '2 a4)
(jmp #:display:ps:psprint)
109
(eval ())
(mov '#:bitmap:bytemap a2)
(mov (& 3) a1)
(jcall typep)
(bfnil a1 110)
(mov (& 0) a1)
(jcall boundp)
(btnil a1 112)
(push (@ 114))
(push (& 8))
(push '"/pattern")
(push (& 3))
(push '"def")
(mov '4 a4)
(jmp #:display:ps:psprint)
114
(eval ())
(bra 113)
112
(push (@ 115))
(push (& 8))
(push '/bmline)
(mov '7 a4)
(plus (& 5) a4)
(quo '8 a4)
(push a4)
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
115
(eval ())
(push (@ 116))
(push (& 8))
(push '/bmcline)
(push (& 5))
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
116
(eval ())
(push (@ 117))
(push (& 8))
(mov '7 a4)
(plus (& 4) a4)
(quo '8 a4)
(push a4)
(push (& 4))
(push 'read-pattern)
(mov '4 a4)
(jmp #:display:ps:psprint)
117
(eval ())
(push (@ 118))
(push (& 8))
(push (& 5))
(push '0)
(push '0)
(push (& 7))
(push (& 7))
(mov '6 a4)
(jmp #:display:ps:psprintbits)
118
(eval ())
(btnil (cvalq #:display:ps:store-bitmaps) 113)
(push (@ 121))
(push (& 8))
(push (@ 122))
(push '"/")
(push (& 4))
(mov '2 a4)
(jmp catenate)
122
(eval ())
(push a1)
(push '"pattern def")
(mov '3 a4)
(jmp #:display:ps:psprint)
121
(eval ())
(mov (& 0) a4)
(mov nil (cval a4))
113
(btnil (& 5) 123)
(push (@ 125))
(push (& 8))
(push '"{")
(push (@ 128))
(mov '0 a4)
(jmp current-mode)
128
(eval ())
(mov a1 a4)
(cabeq a4 '2 129)
(cabeq a4 '3 129)
(cabeq a4 '6 129)
(cabeq a4 '7 129)
(cabeq a4 '10 129)
(cabeq a4 '11 129)
(cabeq a4 '14 129)
(cabne a4 '15 126)
129
(mov '0 a4)
(bra 127)
126
(mov '1 a4)
127
(push a4)
(push (cvalq #:display:ps:setgray))
(mov '4 a4)
(jmp #:display:ps:psprint)
125
(eval ())
(bra 124)
123
(push (@ 130))
(push (& 8))
(push '"{")
(push (cvalq #:display:ps:s))
(mov '3 a4)
(jmp #:display:ps:psprin)
130
(eval ())
(push (@ 133))
(mov '0 a4)
(jmp current-mode)
133
(eval ())
(mov a1 a4)
(cabeq a4 '2 134)
(cabeq a4 '3 134)
(cabeq a4 '6 134)
(cabeq a4 '7 134)
(cabeq a4 '10 134)
(cabeq a4 '11 134)
(cabeq a4 '14 134)
(cabne a4 '15 131)
134
(push (@ 135))
(mov '0 a4)
(jmp current-foreground)
135
(eval ())
(mov (& 6) a3)
(mov a1 a2)
(mov (& 7) a1)
(jcall #:display:ps:ps-set-modecolor)
(bra 124)
131
(push (@ 136))
(mov '0 a4)
(jmp current-background)
136
(eval ())
(mov (& 6) a3)
(mov a1 a2)
(mov (& 7) a1)
(jcall #:display:ps:ps-set-modecolor)
124
(push (@ 137))
(push (& 8))
(push (& 4))
(push (& 4))
(push 'true)
(push '"patmatrix {pattern}imagemask}")
(mov '5 a4)
(jmp #:display:ps:psprint)
137
(eval ())
(bra 111)
110
(mov (& 0) a1)
(jcall boundp)
(btnil a1 138)
(push (@ 140))
(push (& 8))
(push '"/pattern")
(push (& 3))
(push '"def")
(mov '4 a4)
(jmp #:display:ps:psprint)
140
(eval ())
(bra 139)
138
(push (@ 141))
(push (& 8))
(push '/bmwidth)
(push (& 5))
(push 'def)
(mov '4 a4)
(jmp #:display:ps:psprint)
141
(eval ())
(push (@ 142))
(push (& 8))
(push '/bands)
(push (@ 143))
(push (& 6))
(push '3)
(mov '2 a4)
(jmp *)
143
(eval ())
(push a1)
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
142
(eval ())
(push (@ 144))
(push (& 8))
(push '/bmline)
(push (& 5))
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
144
(eval ())
(push (@ 145))
(push (& 8))
(push '/bmcline)
(push (@ 146))
(push (& 6))
(push '2)
(mov '2 a4)
(jmp *)
146
(eval ())
(push a1)
(push 'string)
(push 'def)
(mov '5 a4)
(jmp #:display:ps:psprint)
145
(eval ())
(push (@ 147))
(push (& 8))
(push (& 4))
(push (& 4))
(hpxmov (& 11) '61 a4)
(cabeq a4 'color 148)
(mov 'read-pattern a4)
(bra 149)
148
(cnble (& 10) '7 150)
(mov 'read-inv-color-pattern a4)
(bra 149)
150
(mov 'read-color-pattern a4)
149
(push a4)
(mov '4 a4)
(jmp #:display:ps:psprint)
147
(eval ())
(push (@ 152))
(push (& 8))
(push (& 5))
(push '0)
(push '0)
(push (& 7))
(push (& 7))
(mov '6 a4)
(jmp #:display:ps:psprintbytes)
152
(eval ())
(btnil (cvalq #:display:ps:store-bitmaps) 139)
(push (@ 155))
(push (& 8))
(push (@ 156))
(push '"/")
(push (& 4))
(mov '2 a4)
(jmp catenate)
156
(eval ())
(push a1)
(push '"pattern def")
(mov '3 a4)
(jmp #:display:ps:psprint)
155
(eval ())
(mov (& 0) a4)
(mov nil (cval a4))
139
(push (@ 157))
(push (& 8))
(push '"{")
(push (& 5))
(push (& 5))
(push '"8 patmatrix {pattern}false 3 colorimage}")
(mov '5 a4)
(jmp #:display:ps:psprin)
157
(eval ())
111
(push (@ 158))
(push (& 8))
(push '"bind")
(push (& 5))
(push (& 5))
(push 'fillpat)
(push (cvalq #:display:ps:grestore))
(mov '6 a4)
(jmp #:display:ps:psprint)
158
(eval ())
(adjstk '8)
(return)
106
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((entry #:display:ps:pspattern-widget subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '36 a4)
(push a4)
(mov '1 a4)
(jmp channel)
101
(eval ())
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall pathname)
(push a1)
(push (@ 102))
(hpxmov (& 2) '36 a4)
(push a4)
(mov '1 a4)
(jmp close)
102
(eval ())
(push (@ 103))
(mov '0 a4)
(jmp ps-library-directory)
103
(eval ())
(mov '#:pathname:#[ () () (#:pathname:current "PS") "pspattern" "ps" () ] a2)
(jcall #:display:ps:append-pathnames)
(mov a1 a2)
(mov (& 0) a1)
(jcall #:display:ps:append-files)
(mov (& 0) a1)
(jcall opena)
(hpmovx a1 (& 1) '36)
(adjstk '2)
(return)
))
(loader'((fentry #:display:ps:psstring subr2)
(entry #:display:ps:psstring subr2)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp rmargin)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp lmargin)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(hpxmov (& 7) '37 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
106
(eval ())
(push (@ 107))
(push (@ 108))
(mov '0 a4)
(jmp outbuf)
108
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
107
(eval ())
(push (@ 109))
(push '0)
(mov '1 a4)
(jmp lmargin)
109
(eval ())
(hgsize (& 7) a4)
(diff '1 a4)
(push nil)
(push '0)
(push a4)
(push (cvalq #:system:print-for-read))
(mov (& 3) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
110
(cnble (& 7) '0 111)
(hbxmov (& 17) (& 7) a4)
(cabne a4 '32 111)
(mov (& 7) a4)
(diff '1 a4)
(mov a4 (& 7))
(bra 110)
111
(push (@ 112))
(push '"(")
(mov '1 a4)
(jmp prin)
112
(eval ())
(push '0)
(mov (& 8) a1)
(jcall numberp)
(bfnil a1 115)
(mov (& 8) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
115
(push (@ 117))
(push (& 1))
(push (& 10))
(mov '2 a4)
(jmp >)
117
(eval ())
(bfnil a1 116)
(hbxmov (& 18) (& 0) a4)
(mov a4 (& 9))
(cabeq a4 '40 120)
(cabeq a4 '41 120)
(cabne a4 '92 118)
120
(push (@ 121))
(push '92)
(mov '1 a4)
(jmp princn)
121
(eval ())
(push (@ 122))
(push (& 10))
(mov '1 a4)
(jmp princn)
122
(eval ())
(bra 119)
118
(cnble a4 '127 123)
(push (@ 125))
(push '92)
(mov '1 a4)
(jmp princn)
125
(eval ())
(push (@ 126))
(mov '0 a4)
(jmp obase)
126
(eval ())
(push a1)
(push (@ 127))
(push dlink)
(push prot)
(stack dlink)
(push (@ 129))
(push '8)
(mov '1 a4)
(jmp obase)
129
(eval ())
(push (@ 130))
(push (& 14))
(mov '1 a4)
(jmp prin)
130
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 128) a3)
127
(push a3)
(push a2)
(push (@ 131))
(push (& 4))
(mov '1 a4)
(jmp obase)
131
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
128
(eval ())
(adjstk '1)
(bra 119)
123
(push (@ 132))
(push a4)
(mov '1 a4)
(jmp princn)
132
(eval ())
119
(push (@ 133))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp |+|)
133
(eval ())
(mov a1 (& 0))
(bra 115)
116
(adjstk '1)
(push (@ 134))
(push '")")
(mov '1 a4)
(jmp prin)
134
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '10)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 135))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
135
(eval ())
(push (@ 136))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
136
(eval ())
(push (@ 137))
(push (& 6))
(mov '1 a4)
(jmp outchan)
137
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:psprin nsubr)
(entry #:display:ps:psprin nsubr)
(cnbge a4 '1 101)
(mov '#:display:ps:psprin a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp rmargin)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp lmargin)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(hpxmov (& 8) '37 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
107
(eval ())
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push '0)
(mov '1 a4)
(jmp lmargin)
110
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (& 14) 112)
(push (@ 113))
(mov (& 15) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
113
(eval ())
112
(mov (& 14) a4)
(push (cdr a4))
114
(bfcons (& 0) 115)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 116))
(push (cvalq #:display:ps:s))
(push (& 2))
(mov '2 a4)
(jmp prin)
116
(eval ())
(adjstk '1)
(bra 114)
115
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 117))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
117
(eval ())
(push (@ 118))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
118
(eval ())
(push (@ 119))
(push (& 6))
(mov '1 a4)
(jmp outchan)
119
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:psprint nsubr)
(entry #:display:ps:psprint nsubr)
(cnbge a4 '1 101)
(mov '#:display:ps:psprint a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp rmargin)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp lmargin)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(hpxmov (& 8) '37 a4)
(push a4)
(mov '1 a4)
(jmp outchan)
107
(eval ())
(push (@ 108))
(push (@ 109))
(mov '0 a4)
(jmp outbuf)
109
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
108
(eval ())
(push (@ 110))
(push '0)
(mov '1 a4)
(jmp lmargin)
110
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (& 14) 112)
(push (@ 113))
(mov (& 15) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
113
(eval ())
112
(mov (& 14) a4)
(push (cdr a4))
114
(bfcons (& 0) 115)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 116))
(push (cvalq #:display:ps:s))
(push (& 2))
(mov '2 a4)
(jmp prin)
116
(eval ())
(adjstk '1)
(bra 114)
115
(adjstk '1)
(push (@ 117))
(mov '0 a4)
(jmp print)
117
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
118
(eval ())
(push (@ 119))
(push (& 5))
(mov '1 a4)
(jmp rmargin)
119
(eval ())
(push (@ 120))
(push (& 6))
(mov '1 a4)
(jmp outchan)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:append-pathnames subr2)
(entry #:display:ps:append-pathnames subr2)
(push a2)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(mov (& 0) a1)
(jcall pathname)
(mov a1 (& 0))
102
(mov (& 1) a1)
(jcall pathnamep)
(bfnil a1 104)
(mov (& 1) a1)
(jcall pathname)
(mov a1 (& 1))
104
(mov (& 0) a1)
(jcall pathname-directory)
(push a1)
(mov (& 2) a1)
(jcall pathname-directory)
(push (@ 105))
(push nil)
(push nil)
(push (@ 106))
(push (& 4))
(push a1)
(mov '2 a4)
(jmp append)
106
(eval ())
(push a1)
(mov (& 6) a1)
(jcall pathname-name)
(push a1)
(mov (& 7) a1)
(jcall pathname-type)
(push a1)
(mov (& 8) a1)
(jcall pathname-version)
(push a1)
(mov '6 a4)
(jmp make-pathname)
105
(eval ())
(mov (& 1) a2)
(adjstk '3)
(jmp merge-pathnames)
))
(defvar #:display:ps:use-comline (if (boundp '#:display:ps:use-comline) #:display:ps:use-comline t))
(loader'((fentry #:display:ps:copy-files subr2)
(entry #:display:ps:copy-files subr2)
(push a2)
(push a1)
(jcall probefile)
(btnil a1 102)
(mov (& 0) a1)
(jcall deletefile)
102
(btnil (cvalq #:system:vmsp) 103)
(push (@ 105))
(push '"copy ")
(mov (& 3) a1)
(jcall namestring)
(push a1)
(push '" ")
(mov (& 4) a1)
(jcall namestring)
(push a1)
(mov '4 a4)
(jmp catenate)
105
(eval ())
(adjstk '2)
(jmp comline)
103
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(jmp copyfile)
))
(loader'((fentry #:display:ps:merge-files subr2)
(entry #:display:ps:merge-files subr2)
(push a2)
(push a1)
(jcall #:display:ps:append-files)
(mov (& 1) a1)
(jcall deletefile)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(jmp renamefile)
))
(loader'((fentry #:display:ps:append-files subr2)
(entry #:display:ps:append-files subr2)
(push a2)
(push a1)
(btnil (cvalq #:display:ps:use-comline) 101)
(btnil (cvalq #:system:unixp) 101)
(push (@ 103))
(push '"cat ")
(mov a2 a1)
(jcall namestring)
(push a1)
(push '" >> ")
(mov (& 4) a1)
(jcall namestring)
(push a1)
(mov '4 a4)
(jmp catenate)
103
(eval ())
(adjstk '2)
(jmp comline)
101
(btnil (cvalq #:display:ps:use-comline) 104)
(btnil (cvalq #:system:vmsp) 104)
(push (@ 106))
(push '"append ")
(mov a2 a1)
(jcall namestring)
(push a1)
(push (cvalq #:display:ps:s))
(mov (& 4) a1)
(jcall namestring)
(push a1)
(mov '4 a4)
(jmp catenate)
106
(eval ())
(adjstk '2)
(jmp comline)
104
(push (@ 107))
(mov '0 a4)
(jmp inchan)
107
(eval ())
(push a1)
(push (@ 108))
(mov '0 a4)
(jmp outchan)
108
(eval ())
(push a1)
(push (@ 109))
(mov '0 a4)
(jmp rmargin)
109
(eval ())
(push a1)
(push (@ 110))
(push dlink)
(push prot)
(stack dlink)
(push (@ 112))
(mov (& 8) a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
112
(eval ())
(push (@ 113))
(mov (& 7) a1)
(jcall opena)
(push a1)
(mov '1 a4)
(jmp outchan)
113
(eval ())
(push (@ 114))
(push (@ 115))
(mov '0 a4)
(jmp outbuf)
115
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
114
(eval ())
(push (@ 116))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
117
(push (@ 119))
(jcall #:display:ps:readstring)
(push a1)
(mov '1 a4)
(jmp print)
119
(eval ())
(bra 117)
118
(mov (& 1) dlink)
(adjstk '4)
116
(eval ())
(push (@ 120))
(push (@ 121))
(mov '0 a4)
(jmp outchan)
121
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
120
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 111) a3)
110
(push a3)
(push a2)
(push (@ 122))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
122
(eval ())
(push (@ 123))
(push (& 5))
(mov '1 a4)
(jmp outchan)
123
(eval ())
(push (@ 124))
(push (& 6))
(mov '1 a4)
(jmp inchan)
124
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
111
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:ps:synchronize-disk subr0)
(entry #:display:ps:synchronize-disk subr0)
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:readstring subr0)
(entry #:display:ps:readstring subr0)
(push (@ 101))
(mov '0 a4)
(jmp outbuf)
101
(eval ())
(hgsize a1 a4)
(diff '1 a4)
(push nil)
(push nil)
(push '0)
(push a4)
102
(jcall readcn)
(mov a1 (& 2))
(cabeq a1 '13 103)
(mov (& 1) a1)
(jcall |1+|)
(mov a1 (& 1))
(cnbge a1 (& 0) 103)
(mov (& 3) a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (& 3))
(bra 102)
103
(cabne (& 2) '13 104)
(jcall readcn)
(bra 105)
104
(mov (& 3) a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (& 3))
105
(mov (& 3) a1)
(jcall nreverse)
(adjstk '4)
(jmp string)
))
(loader'((fentry #:display:ps:rectangle nsubr)
(entry #:display:ps:rectangle nsubr)
(cnbeq a4 '4 101)
(mov '#:display:ps:rectangle a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(jcall #:image:rectangle:make)
(hpmovx (& 3) a1 '0)
(hpmovx (& 2) a1 '1)
(hpmovx (& 1) a1 '2)
(hpmovx (& 0) a1 '3)
(adjstk '4)
(return)
))
(loader'((fentry #:display:ps:bbox-list subr2)
(entry #:display:ps:bbox-list subr2)
(push a2)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 103))
(push '0)
(push '0)
(push '0)
(push '0)
(mov '4 a4)
(jmp #:display:ps:rectangle)
103
(eval ())
(btnil (& 3) 104)
(mov a1 a2)
(mov (& 0) a1)
(jcall #:display:ps:bounding-box)
(mov (& 3) a2)
(jcall #:display:ps:intersection)
(mov (car a1) a1)
(bra 105)
104
(mov a1 a2)
(mov (& 0) a1)
(jcall #:display:ps:bounding-box)
105
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((fentry #:display:ps:compute-all-regions subr1)
(entry #:display:ps:compute-all-regions subr1)
(push a1)
(push (@ 101))
(push (car a1))
(mov '1 a4)
(jmp list)
101
(eval ())
(push a1)
(mov (& 1) a4)
(push (cdr a4))
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 4) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall #:display:ps:intersection1)
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp #:display:ps:compute-regions)
))
(loader'((fentry #:display:ps:compute-regions subr2)
(entry #:display:ps:compute-regions subr2)
(push a2)
(bfnil a2 101)
(adjstk '1)
(return)
101
(push a1)
(push nil)
103
(bfcons (& 1) 104)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 3) a2)
(mov (car a2) a2)
(mov (& 0) a1)
(jcall #:display:ps:compute-regions1)
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 103)
104
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov (& 0) a2)
(mov (cdr a2) a2)
(adjstk '1)
(jmp #:display:ps:compute-regions)
))
(loader'((fentry #:display:ps:compute-regions1 subr2)
(entry #:display:ps:compute-regions1 subr2)
(push a2)
(push a1)
(btnil a2 103)
(jcall #:display:ps:intersectp)
(bfnil a1 101)
103
(push (@ 104))
(push (& 1))
(mov '1 a4)
(jmp list)
104
(eval ())
(adjstk '2)
(return)
101
(hpxmov (& 0) '0 a4)
(push a4)
(hpxmov (& 1) '1 a3)
(push a3)
(hpxmov (& 2) '2 a2)
(plus a2 a4)
(push a4)
(hpxmov (& 3) '3 a2)
(plus a2 a3)
(push a3)
(hpxmov (& 5) '0 a2)
(push a2)
(hpxmov (& 6) '1 a1)
(push a1)
(hpxmov (& 7) '2 a4)
(plus a4 a2)
(push a2)
(hpxmov (& 8) '3 a4)
(plus a4 a1)
(push a1)
(mov (& 3) a2)
(mov (& 7) a1)
(jcall imax)
(push a1)
(mov (& 3) a2)
(mov (& 7) a1)
(jcall imax)
(mov (& 2) a2)
(mov (& 6) a1)
(jcall imin)
(push a1)
(mov (& 2) a2)
(mov (& 6) a1)
(jcall imin)
(push nil)
(cnble (& 6) (& 10) 106)
(push (@ 107))
(push (& 11))
(push (& 11))
(mov (& 9) a4)
(diff (& 13) a4)
(push a4)
(hpxmov (& 15) '3 a4)
(push a4)
(mov '4 a4)
(jmp #:display:ps:rectangle)
107
(eval ())
(push (@ 108))
(push (& 1))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
108
(eval ())
(mov a1 (& 0))
106
(cnbge (& 4) (& 8) 110)
(push (@ 111))
(push (& 5))
(push (& 11))
(mov (& 11) a4)
(diff (& 7) a4)
(push a4)
(hpxmov (& 15) '3 a4)
(push a4)
(mov '4 a4)
(jmp #:display:ps:rectangle)
111
(eval ())
(push (@ 112))
(push (& 1))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
112
(eval ())
(mov a1 (& 0))
110
(cnble (& 5) (& 9) 114)
(push (@ 115))
(push (& 3))
(push (& 11))
(mov (& 4) a4)
(diff (& 5) a4)
(push a4)
(mov (& 9) a4)
(diff (& 13) a4)
(push a4)
(mov '4 a4)
(jmp #:display:ps:rectangle)
115
(eval ())
(push (@ 116))
(push (& 1))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
116
(eval ())
(mov a1 (& 0))
114
(cnbge (& 3) (& 7) 118)
(push (@ 119))
(push (& 3))
(push (& 5))
(mov (& 4) a4)
(diff (& 5) a4)
(push a4)
(mov (& 11) a4)
(diff (& 7) a4)
(push a4)
(mov '4 a4)
(jmp #:display:ps:rectangle)
119
(eval ())
(push (@ 120))
(push (& 1))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
120
(eval ())
(mov a1 (& 0))
118
(mov (& 0) a1)
(adjstk '13)
(return)
))
(loader'((fentry #:display:ps:intersection subr2)
(entry #:display:ps:intersection subr2)
(push a1)
(btnil a1 101)
(btnil a2 101)
(hpxmov a1 '0 a4)
(push a4)
(hpxmov a2 '0 a3)
(hpxmov a1 '1 a4)
(push a4)
(hpxmov a2 '1 a4)
(push a4)
(hpxmov a1 '2 a4)
(push a4)
(hpxmov a1 '3 a4)
(push a4)
(hpxmov a2 '2 a4)
(push a4)
(hpxmov a2 '3 a4)
(push a4)
(push a3)
(push a1)
(mov a3 a2)
(mov (& 8) a1)
(jcall imax)
(pop a4)
(hpmovx a1 a4 '0)
(mov (& 5) a2)
(mov (& 6) a1)
(jcall imax)
(hpmovx a1 (& 8) '1)
(mov (& 7) a4)
(plus (& 4) a4)
(mov (& 0) a3)
(plus (& 2) a3)
(mov a3 a2)
(mov a4 a1)
(jcall imin)
(hpxmov (& 8) '0 a4)
(diff a4 a1)
(hpmovx a1 (& 8) '2)
(mov (& 6) a4)
(plus (& 3) a4)
(mov (& 5) a3)
(plus (& 1) a3)
(mov a3 a2)
(mov a4 a1)
(jcall imin)
(hpxmov (& 8) '1 a4)
(diff a4 a1)
(hpmovx a1 (& 8) '3)
(adjstk '8)
(hpxmov (& 0) '2 a4)
(cnble a4 '0 103)
(hpxmov (& 0) '3 a4)
(cnble a4 '0 103)
(push (@ 105))
(push (& 1))
(mov '1 a4)
(jmp list)
105
(eval ())
(adjstk '1)
(return)
103
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:intersection1 subr2)
(entry #:display:ps:intersection1 subr2)
(push a2)
(push (@ 101))
(hpxmov a1 '0 a4)
(push a4)
(hpxmov a1 '1 a4)
(push a4)
(hpxmov a1 '2 a4)
(push a4)
(hpxmov a1 '3 a4)
(push a4)
(mov '4 a4)
(jmp #:display:ps:rectangle)
101
(eval ())
(mov (& 0) a2)
(adjstk '1)
(jmp #:display:ps:intersection)
))
(loader'((fentry #:display:ps:intersectp subr2)
(entry #:display:ps:intersectp subr2)
(hpxmov a1 '1 a4)
(push a4)
(hpxmov a2 '1 a3)
(hpxmov a2 '3 a4)
(plus a4 a3)
(pop a4)
(cnbgt a4 a3 101)
(hpxmov a1 '1 a4)
(hpxmov a1 '3 a3)
(plus a3 a4)
(hpxmov a2 '1 a3)
(cnblt a4 a3 101)
(hpxmov a1 '0 a4)
(push a4)
(hpxmov a2 '0 a3)
(hpxmov a2 '2 a4)
(plus a4 a3)
(pop a4)
(cnbgt a4 a3 101)
(hpxmov a1 '0 a4)
(hpxmov a1 '2 a3)
(plus a3 a4)
(hpxmov a2 '0 a3)
(cnblt a4 a3 101)
(hpxmov a1 '3 a4)
(cnble a4 '0 101)
(hpxmov a2 '3 a4)
(cnble a4 '0 101)
(hpxmov a1 '2 a4)
(cnble a4 '0 101)
(hpxmov a2 '2 a4)
(cnble a4 '0 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry #:display:ps:window-bitmap dmsubr)
(entry #:display:ps:window-bitmap dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(btnil a4 101)
(push (@ 103))
(push '#:ps:bitmap:window)
(push (@ 104))
(push '#:bitmap:extend)
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 105))
(push '#:ps:bitmap:window)
(push (@ 106))
(push '#:bitmap:extend)
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:psgraph-env dmsubr)
(entry #:display:ps:psgraph-env dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(btnil a4 101)
(push (@ 103))
(push '#:ps:extend:psgraph-env)
(push (@ 104))
(push '#:window:extend)
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 105))
(push '#:ps:extend:psgraph-env)
(push (@ 106))
(push '#:window:extend)
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:pscolor dmsubr)
(entry #:display:ps:pscolor dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(btnil a4 101)
(push (@ 103))
(push '#:color:extend)
(push a1)
(push a4)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(return)
101
(push (@ 104))
(push '#:color:extend)
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(return)
))
(loader'((fentry #:display:ps:visible dmsubr)
(entry #:display:ps:visible dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(btnil a4 101)
(push (@ 103))
(push '#:ps:extend:visible)
(push (@ 104))
(push '#:window:extend)
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 105))
(push '#:ps:extend:visible)
(push (@ 106))
(push '#:window:extend)
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:font-y dmsubr)
(entry #:display:ps:font-y dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(btnil a4 101)
(push (@ 103))
(push '#:ps:extend:font-y)
(push (@ 104))
(push '#:graph-env:extend)
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 105))
(push '#:ps:extend:font-y)
(push (@ 106))
(push '#:graph-env:extend)
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:ps:font-h dmsubr)
(entry #:display:ps:font-h dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(btnil a4 101)
(push (@ 103))
(push '#:ps:extend:font-h)
(push (@ 104))
(push '#:graph-env:extend)
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 105))
(push '#:ps:extend:font-h)
(push (@ 106))
(push '#:graph-env:extend)
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '1)
(return)
))
(loader '((end)))
