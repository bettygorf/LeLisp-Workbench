(loader '((title |virbitmap.lo|)))
(setq #:sys-package:colon 'display)
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'virbitmap)))
(putprop 'display '((() () () () () () () () () () () () () () () () () () () () () () () () () () ()) name package device xmax ymax eventmode prologuep keyboard-focus-window window graph-env root-window main-graph-env background foreground windows bitmaps menus colors font-names pattern-bitmaps cursor-bitmaps extend graph-envs current-selection resource named-cursors stipple-bitmaps) 'defstruct)
(loader'((fentry #:display:make subr0)
(entry #:display:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '27 a4)
(jmp vector)
101
(eval ())
(mov 'display (cdr a1))
(return)
))
(loader'((fentry #:display:name nsubr)
(entry #:display:name nsubr)
(push a4)
(push (@ 101))
(push '#:display:name)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:name '#:display:name 'setf-inverse) '#:display:name)))
(if (featurep 'compiler) (progn (defmacro-open #:display:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:display:package nsubr)
(entry #:display:package nsubr)
(push a4)
(push (@ 101))
(push '#:display:package)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:package '#:display:package 'setf-inverse) '#:display:package)))
(if (featurep 'compiler) (progn (defmacro-open #:display:package (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:display:device nsubr)
(entry #:display:device nsubr)
(push a4)
(push (@ 101))
(push '#:display:device)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:device '#:display:device 'setf-inverse) '#:display:device)))
(if (featurep 'compiler) (progn (defmacro-open #:display:device (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:display:xmax nsubr)
(entry #:display:xmax nsubr)
(push a4)
(push (@ 101))
(push '#:display:xmax)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:xmax '#:display:xmax 'setf-inverse) '#:display:xmax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:xmax (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:display:ymax nsubr)
(entry #:display:ymax nsubr)
(push a4)
(push (@ 101))
(push '#:display:ymax)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:ymax '#:display:ymax 'setf-inverse) '#:display:ymax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ymax (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:display:eventmode nsubr)
(entry #:display:eventmode nsubr)
(push a4)
(push (@ 101))
(push '#:display:eventmode)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:eventmode '#:display:eventmode 'setf-inverse) '#:display:eventmode)))
(if (featurep 'compiler) (progn (defmacro-open #:display:eventmode (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:display:prologuep nsubr)
(entry #:display:prologuep nsubr)
(push a4)
(push (@ 101))
(push '#:display:prologuep)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:prologuep '#:display:prologuep 'setf-inverse) '#:display:prologuep)))
(if (featurep 'compiler) (progn (defmacro-open #:display:prologuep (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:display:keyboard-focus-window nsubr)
(entry #:display:keyboard-focus-window nsubr)
(push a4)
(push (@ 101))
(push '#:display:keyboard-focus-window)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:keyboard-focus-window '#:display:keyboard-focus-window 'setf-inverse) '#:display:keyboard-focus-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:keyboard-focus-window (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:display:window nsubr)
(entry #:display:window nsubr)
(push a4)
(push (@ 101))
(push '#:display:window)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:window '#:display:window 'setf-inverse) '#:display:window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:window (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:display:graph-env nsubr)
(entry #:display:graph-env nsubr)
(push a4)
(push (@ 101))
(push '#:display:graph-env)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:graph-env '#:display:graph-env 'setf-inverse) '#:display:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:graph-env (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(loader'((fentry #:display:root-window nsubr)
(entry #:display:root-window nsubr)
(push a4)
(push (@ 101))
(push '#:display:root-window)
(push '10)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:root-window '#:display:root-window 'setf-inverse) '#:display:root-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:root-window (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(loader'((fentry #:display:main-graph-env nsubr)
(entry #:display:main-graph-env nsubr)
(push a4)
(push (@ 101))
(push '#:display:main-graph-env)
(push '11)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:main-graph-env '#:display:main-graph-env 'setf-inverse) '#:display:main-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:main-graph-env (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(loader'((fentry #:display:background nsubr)
(entry #:display:background nsubr)
(push a4)
(push (@ 101))
(push '#:display:background)
(push '12)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:background '#:display:background 'setf-inverse) '#:display:background)))
(if (featurep 'compiler) (progn (defmacro-open #:display:background (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(loader'((fentry #:display:foreground nsubr)
(entry #:display:foreground nsubr)
(push a4)
(push (@ 101))
(push '#:display:foreground)
(push '13)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:foreground '#:display:foreground 'setf-inverse) '#:display:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:display:foreground (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(loader'((fentry #:display:windows nsubr)
(entry #:display:windows nsubr)
(push a4)
(push (@ 101))
(push '#:display:windows)
(push '14)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:windows '#:display:windows 'setf-inverse) '#:display:windows)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(loader'((fentry #:display:bitmaps nsubr)
(entry #:display:bitmaps nsubr)
(push a4)
(push (@ 101))
(push '#:display:bitmaps)
(push '15)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:bitmaps '#:display:bitmaps 'setf-inverse) '#:display:bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bitmaps (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(loader'((fentry #:display:menus nsubr)
(entry #:display:menus nsubr)
(push a4)
(push (@ 101))
(push '#:display:menus)
(push '16)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:menus '#:display:menus 'setf-inverse) '#:display:menus)))
(if (featurep 'compiler) (progn (defmacro-open #:display:menus (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(loader'((fentry #:display:colors nsubr)
(entry #:display:colors nsubr)
(push a4)
(push (@ 101))
(push '#:display:colors)
(push '17)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:colors '#:display:colors 'setf-inverse) '#:display:colors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:colors (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(loader'((fentry #:display:font-names nsubr)
(entry #:display:font-names nsubr)
(push a4)
(push (@ 101))
(push '#:display:font-names)
(push '18)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:font-names '#:display:font-names 'setf-inverse) '#:display:font-names)))
(if (featurep 'compiler) (progn (defmacro-open #:display:font-names (struct . valeur) (ifn valeur (list 'vref struct 18) (list 'vset struct 18 (car valeur))))))
(loader'((fentry #:display:pattern-bitmaps nsubr)
(entry #:display:pattern-bitmaps nsubr)
(push a4)
(push (@ 101))
(push '#:display:pattern-bitmaps)
(push '19)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:pattern-bitmaps '#:display:pattern-bitmaps 'setf-inverse) '#:display:pattern-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:pattern-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 19) (list 'vset struct 19 (car valeur))))))
(loader'((fentry #:display:cursor-bitmaps nsubr)
(entry #:display:cursor-bitmaps nsubr)
(push a4)
(push (@ 101))
(push '#:display:cursor-bitmaps)
(push '20)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:cursor-bitmaps '#:display:cursor-bitmaps 'setf-inverse) '#:display:cursor-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:cursor-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 20) (list 'vset struct 20 (car valeur))))))
(loader'((fentry #:display:extend nsubr)
(entry #:display:extend nsubr)
(push a4)
(push (@ 101))
(push '#:display:extend)
(push '21)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:extend '#:display:extend 'setf-inverse) '#:display:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:display:extend (struct . valeur) (ifn valeur (list 'vref struct 21) (list 'vset struct 21 (car valeur))))))
(loader'((fentry #:display:graph-envs nsubr)
(entry #:display:graph-envs nsubr)
(push a4)
(push (@ 101))
(push '#:display:graph-envs)
(push '22)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:graph-envs '#:display:graph-envs 'setf-inverse) '#:display:graph-envs)))
(if (featurep 'compiler) (progn (defmacro-open #:display:graph-envs (struct . valeur) (ifn valeur (list 'vref struct 22) (list 'vset struct 22 (car valeur))))))
(loader'((fentry #:display:current-selection nsubr)
(entry #:display:current-selection nsubr)
(push a4)
(push (@ 101))
(push '#:display:current-selection)
(push '23)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:current-selection '#:display:current-selection 'setf-inverse) '#:display:current-selection)))
(if (featurep 'compiler) (progn (defmacro-open #:display:current-selection (struct . valeur) (ifn valeur (list 'vref struct 23) (list 'vset struct 23 (car valeur))))))
(loader'((fentry #:display:resource nsubr)
(entry #:display:resource nsubr)
(push a4)
(push (@ 101))
(push '#:display:resource)
(push '24)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:resource '#:display:resource 'setf-inverse) '#:display:resource)))
(if (featurep 'compiler) (progn (defmacro-open #:display:resource (struct . valeur) (ifn valeur (list 'vref struct 24) (list 'vset struct 24 (car valeur))))))
(loader'((fentry #:display:named-cursors nsubr)
(entry #:display:named-cursors nsubr)
(push a4)
(push (@ 101))
(push '#:display:named-cursors)
(push '25)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:named-cursors '#:display:named-cursors 'setf-inverse) '#:display:named-cursors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:named-cursors (struct . valeur) (ifn valeur (list 'vref struct 25) (list 'vset struct 25 (car valeur))))))
(loader'((fentry #:display:stipple-bitmaps nsubr)
(entry #:display:stipple-bitmaps nsubr)
(push a4)
(push (@ 101))
(push '#:display:stipple-bitmaps)
(push '26)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:display:stipple-bitmaps '#:display:stipple-bitmaps 'setf-inverse) '#:display:stipple-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:stipple-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 26) (list 'vset struct 26 (car valeur))))))
(putprop 'color '((() () () () () () ()) name red green blue mutable display extend) 'defstruct)
(loader'((fentry #:color:name nsubr)
(entry #:color:name nsubr)
(push a4)
(push (@ 101))
(push '#:color:name)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:color:name '#:color:name 'setf-inverse) '#:color:name)))
(if (featurep 'compiler) (progn (defmacro-open #:color:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:color:red nsubr)
(entry #:color:red nsubr)
(push a4)
(push (@ 101))
(push '#:color:red)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:color:red '#:color:red 'setf-inverse) '#:color:red)))
(if (featurep 'compiler) (progn (defmacro-open #:color:red (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:color:green nsubr)
(entry #:color:green nsubr)
(push a4)
(push (@ 101))
(push '#:color:green)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:color:green '#:color:green 'setf-inverse) '#:color:green)))
(if (featurep 'compiler) (progn (defmacro-open #:color:green (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:color:blue nsubr)
(entry #:color:blue nsubr)
(push a4)
(push (@ 101))
(push '#:color:blue)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:color:blue '#:color:blue 'setf-inverse) '#:color:blue)))
(if (featurep 'compiler) (progn (defmacro-open #:color:blue (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:color:mutable nsubr)
(entry #:color:mutable nsubr)
(push a4)
(push (@ 101))
(push '#:color:mutable)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:color:mutable '#:color:mutable 'setf-inverse) '#:color:mutable)))
(if (featurep 'compiler) (progn (defmacro-open #:color:mutable (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:color:display nsubr)
(entry #:color:display nsubr)
(push a4)
(push (@ 101))
(push '#:color:display)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:color:display '#:color:display 'setf-inverse) '#:color:display)))
(if (featurep 'compiler) (progn (defmacro-open #:color:display (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:color:extend nsubr)
(entry #:color:extend nsubr)
(push a4)
(push (@ 101))
(push '#:color:extend)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:color:extend '#:color:extend 'setf-inverse) '#:color:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:color:extend (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop 'graph-env '((0 0 1 3 () () 0 0 0 0 () () () () () () 'pattern 0) font line-style pattern mode foreground background clip-x clip-y clip-w clip-h bitmap display extend font-y font-h stipple fill-mode arc-mode) 'defstruct)
(loader'((fentry #:graph-env:font nsubr)
(entry #:graph-env:font nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:font)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font '#:graph-env:font 'setf-inverse) '#:graph-env:font)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:graph-env:line-style nsubr)
(entry #:graph-env:line-style nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:line-style)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:line-style '#:graph-env:line-style 'setf-inverse) '#:graph-env:line-style)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:line-style (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:graph-env:pattern nsubr)
(entry #:graph-env:pattern nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:pattern)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:pattern '#:graph-env:pattern 'setf-inverse) '#:graph-env:pattern)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:pattern (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:graph-env:mode nsubr)
(entry #:graph-env:mode nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:mode)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:mode '#:graph-env:mode 'setf-inverse) '#:graph-env:mode)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:mode (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:graph-env:foreground nsubr)
(entry #:graph-env:foreground nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:foreground)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:foreground '#:graph-env:foreground 'setf-inverse) '#:graph-env:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:foreground (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:graph-env:background nsubr)
(entry #:graph-env:background nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:background)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:background '#:graph-env:background 'setf-inverse) '#:graph-env:background)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:background (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:graph-env:clip-x nsubr)
(entry #:graph-env:clip-x nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:clip-x)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-x '#:graph-env:clip-x 'setf-inverse) '#:graph-env:clip-x)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-x (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:graph-env:clip-y nsubr)
(entry #:graph-env:clip-y nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:clip-y)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-y '#:graph-env:clip-y 'setf-inverse) '#:graph-env:clip-y)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-y (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:graph-env:clip-w nsubr)
(entry #:graph-env:clip-w nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:clip-w)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-w '#:graph-env:clip-w 'setf-inverse) '#:graph-env:clip-w)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-w (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:graph-env:clip-h nsubr)
(entry #:graph-env:clip-h nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:clip-h)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-h '#:graph-env:clip-h 'setf-inverse) '#:graph-env:clip-h)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-h (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(loader'((fentry #:graph-env:bitmap nsubr)
(entry #:graph-env:bitmap nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:bitmap)
(push '10)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:bitmap '#:graph-env:bitmap 'setf-inverse) '#:graph-env:bitmap)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:bitmap (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(loader'((fentry #:graph-env:display nsubr)
(entry #:graph-env:display nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:display)
(push '11)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:display '#:graph-env:display 'setf-inverse) '#:graph-env:display)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:display (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(loader'((fentry #:graph-env:extend nsubr)
(entry #:graph-env:extend nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:extend)
(push '12)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:extend '#:graph-env:extend 'setf-inverse) '#:graph-env:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:extend (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font-y '#:graph-env:font-y 'setf-inverse) '#:graph-env:font-y)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font-y (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font-h '#:graph-env:font-h 'setf-inverse) '#:graph-env:font-h)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font-h (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(loader'((fentry #:graph-env:stipple nsubr)
(entry #:graph-env:stipple nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:stipple)
(push '15)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:stipple '#:graph-env:stipple 'setf-inverse) '#:graph-env:stipple)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:stipple (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(loader'((fentry #:graph-env:fill-mode nsubr)
(entry #:graph-env:fill-mode nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:fill-mode)
(push '16)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:fill-mode '#:graph-env:fill-mode 'setf-inverse) '#:graph-env:fill-mode)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:fill-mode (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(loader'((fentry #:graph-env:arc-mode nsubr)
(entry #:graph-env:arc-mode nsubr)
(push a4)
(push (@ 101))
(push '#:graph-env:arc-mode)
(push '17)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:arc-mode '#:graph-env:arc-mode 'setf-inverse) '#:graph-env:arc-mode)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:arc-mode (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(putprop 'event '((() () () () () () () () () ()) code window detail gx gy x y w h b) 'defstruct)
(loader'((fentry #:event:make subr0)
(entry #:event:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '10 a4)
(jmp vector)
101
(eval ())
(mov 'event (cdr a1))
(return)
))
(loader'((fentry #:event:code nsubr)
(entry #:event:code nsubr)
(push a4)
(push (@ 101))
(push '#:event:code)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:code #:event:code)))
(if (featurep 'compiler) (progn (defmacro-open #:event:code (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:event:window nsubr)
(entry #:event:window nsubr)
(push a4)
(push (@ 101))
(push '#:event:window)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:window #:event:window)))
(if (featurep 'compiler) (progn (defmacro-open #:event:window (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:event:detail nsubr)
(entry #:event:detail nsubr)
(push a4)
(push (@ 101))
(push '#:event:detail)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:detail #:event:detail)))
(if (featurep 'compiler) (progn (defmacro-open #:event:detail (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:event:gx nsubr)
(entry #:event:gx nsubr)
(push a4)
(push (@ 101))
(push '#:event:gx)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:gx #:event:gx)))
(if (featurep 'compiler) (progn (defmacro-open #:event:gx (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:event:gy nsubr)
(entry #:event:gy nsubr)
(push a4)
(push (@ 101))
(push '#:event:gy)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:gy #:event:gy)))
(if (featurep 'compiler) (progn (defmacro-open #:event:gy (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:event:x nsubr)
(entry #:event:x nsubr)
(push a4)
(push (@ 101))
(push '#:event:x)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:x #:event:x)))
(if (featurep 'compiler) (progn (defmacro-open #:event:x (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:event:y nsubr)
(entry #:event:y nsubr)
(push a4)
(push (@ 101))
(push '#:event:y)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:y #:event:y)))
(if (featurep 'compiler) (progn (defmacro-open #:event:y (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:event:w nsubr)
(entry #:event:w nsubr)
(push a4)
(push (@ 101))
(push '#:event:w)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:w #:event:w)))
(if (featurep 'compiler) (progn (defmacro-open #:event:w (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:event:h nsubr)
(entry #:event:h nsubr)
(push a4)
(push (@ 101))
(push '#:event:h)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:h #:event:h)))
(if (featurep 'compiler) (progn (defmacro-open #:event:h (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:event:b nsubr)
(entry #:event:b nsubr)
(push a4)
(push (@ 101))
(push '#:event:b)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:b #:event:b)))
(if (featurep 'compiler) (progn (defmacro-open #:event:b (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(putprop 'bitmap '((() () () ()) w h extend display) 'defstruct)
(loader'((fentry #:bitmap:w nsubr)
(entry #:bitmap:w nsubr)
(push a4)
(push (@ 101))
(push '#:bitmap:w)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:w '#:bitmap:w 'setf-inverse) '#:bitmap:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:bitmap:h nsubr)
(entry #:bitmap:h nsubr)
(push a4)
(push (@ 101))
(push '#:bitmap:h)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:h '#:bitmap:h 'setf-inverse) '#:bitmap:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:bitmap:extend nsubr)
(entry #:bitmap:extend nsubr)
(push a4)
(push (@ 101))
(push '#:bitmap:extend)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:extend '#:bitmap:extend 'setf-inverse) '#:bitmap:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:bitmap:display nsubr)
(entry #:bitmap:display nsubr)
(push a4)
(push (@ 101))
(push '#:bitmap:display)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:display '#:bitmap:display 'setf-inverse) '#:bitmap:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:bitmap:bytemap '(()) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:w '#:bitmap:bytemap:w 'setf-inverse) '#:bitmap:bytemap:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:h '#:bitmap:bytemap:h 'setf-inverse) '#:bitmap:bytemap:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:extend '#:bitmap:bytemap:extend 'setf-inverse) '#:bitmap:bytemap:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:display '#:bitmap:bytemap:display 'setf-inverse) '#:bitmap:bytemap:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:bitmap:stipple '((()) data) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:w '#:bitmap:stipple:w 'setf-inverse) '#:bitmap:stipple:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:h '#:bitmap:stipple:h 'setf-inverse) '#:bitmap:stipple:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:extend '#:bitmap:stipple:extend 'setf-inverse) '#:bitmap:stipple:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:display '#:bitmap:stipple:display 'setf-inverse) '#:bitmap:stipple:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:bitmap:stipple:data nsubr)
(entry #:bitmap:stipple:data nsubr)
(push a4)
(push (@ 101))
(push '#:bitmap:stipple:data)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:data '#:bitmap:stipple:data 'setf-inverse) '#:bitmap:stipple:data)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:data (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(putprop '#:image:rectangle '((0 0 1 1) x y w h) 'defstruct)
(loader'((fentry #:image:rectangle:make subr0)
(entry #:image:rectangle:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '1)
(mov '4 a4)
(jmp vector)
101
(eval ())
(mov '#:image:rectangle (cdr a1))
(return)
))
(loader'((fentry #:image:rectangle:x nsubr)
(entry #:image:rectangle:x nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:x)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:x #:image:rectangle:x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:x (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:image:rectangle:y nsubr)
(entry #:image:rectangle:y nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:y)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:y #:image:rectangle:y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:y (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:image:rectangle:w nsubr)
(entry #:image:rectangle:w nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:w)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:w #:image:rectangle:w)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:w (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:image:rectangle:h nsubr)
(entry #:image:rectangle:h nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:h)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:h #:image:rectangle:h)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:h (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:image:rectangle:window '((() () () () () () () 0 () () () () () ()) title hilited visible graph-env extend father properties cursor display subwindows events-list window-type graphic-properties state) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:x '#:image:rectangle:window:x 'setf-inverse) '#:image:rectangle:window:x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:x (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:y '#:image:rectangle:window:y 'setf-inverse) '#:image:rectangle:window:y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:y (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:w '#:image:rectangle:window:w 'setf-inverse) '#:image:rectangle:window:w)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:w (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:h '#:image:rectangle:window:h 'setf-inverse) '#:image:rectangle:window:h)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:h (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:image:rectangle:window:title nsubr)
(entry #:image:rectangle:window:title nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:title)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:title '#:image:rectangle:window:title 'setf-inverse) '#:image:rectangle:window:title)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:title (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:image:rectangle:window:hilited nsubr)
(entry #:image:rectangle:window:hilited nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:hilited)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:hilited '#:image:rectangle:window:hilited 'setf-inverse) '#:image:rectangle:window:hilited)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:hilited (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:image:rectangle:window:visible nsubr)
(entry #:image:rectangle:window:visible nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:visible)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:visible '#:image:rectangle:window:visible 'setf-inverse) '#:image:rectangle:window:visible)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:visible (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:image:rectangle:window:graph-env nsubr)
(entry #:image:rectangle:window:graph-env nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:graph-env)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:graph-env '#:image:rectangle:window:graph-env 'setf-inverse) '#:image:rectangle:window:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:graph-env (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:image:rectangle:window:extend nsubr)
(entry #:image:rectangle:window:extend nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:extend)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:extend '#:image:rectangle:window:extend 'setf-inverse) '#:image:rectangle:window:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:extend (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:image:rectangle:window:father nsubr)
(entry #:image:rectangle:window:father nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:father)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:father '#:image:rectangle:window:father 'setf-inverse) '#:image:rectangle:window:father)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:father (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(loader'((fentry #:image:rectangle:window:properties nsubr)
(entry #:image:rectangle:window:properties nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:properties)
(push '10)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:properties '#:image:rectangle:window:properties 'setf-inverse) '#:image:rectangle:window:properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:properties (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(loader'((fentry #:image:rectangle:window:cursor nsubr)
(entry #:image:rectangle:window:cursor nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:cursor)
(push '11)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:cursor '#:image:rectangle:window:cursor 'setf-inverse) '#:image:rectangle:window:cursor)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:cursor (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(loader'((fentry #:image:rectangle:window:display nsubr)
(entry #:image:rectangle:window:display nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:display)
(push '12)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:display '#:image:rectangle:window:display 'setf-inverse) '#:image:rectangle:window:display)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:display (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(loader'((fentry #:image:rectangle:window:subwindows nsubr)
(entry #:image:rectangle:window:subwindows nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:subwindows)
(push '13)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:subwindows '#:image:rectangle:window:subwindows 'setf-inverse) '#:image:rectangle:window:subwindows)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:subwindows (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(loader'((fentry #:image:rectangle:window:events-list nsubr)
(entry #:image:rectangle:window:events-list nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:events-list)
(push '14)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:events-list '#:image:rectangle:window:events-list 'setf-inverse) '#:image:rectangle:window:events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:events-list (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(loader'((fentry #:image:rectangle:window:window-type nsubr)
(entry #:image:rectangle:window:window-type nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:window-type)
(push '15)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:window-type '#:image:rectangle:window:window-type 'setf-inverse) '#:image:rectangle:window:window-type)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:window-type (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(loader'((fentry #:image:rectangle:window:graphic-properties nsubr)
(entry #:image:rectangle:window:graphic-properties nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:graphic-properties)
(push '16)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:graphic-properties '#:image:rectangle:window:graphic-properties 'setf-inverse) '#:image:rectangle:window:graphic-properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:graphic-properties (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(loader'((fentry #:image:rectangle:window:state nsubr)
(entry #:image:rectangle:window:state nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:window:state)
(push '17)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:state '#:image:rectangle:window:state 'setf-inverse) '#:image:rectangle:window:state)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:state (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(putprop 'menu '((() () () ()) title itemlists display extend) 'defstruct)
(loader'((fentry #:menu:title nsubr)
(entry #:menu:title nsubr)
(push a4)
(push (@ 101))
(push '#:menu:title)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:title '#:menu:title 'setf-inverse) '#:menu:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:menu:itemlists nsubr)
(entry #:menu:itemlists nsubr)
(push a4)
(push (@ 101))
(push '#:menu:itemlists)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlists '#:menu:itemlists 'setf-inverse) '#:menu:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:menu:display nsubr)
(entry #:menu:display nsubr)
(push a4)
(push (@ 101))
(push '#:menu:display)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:display '#:menu:display 'setf-inverse) '#:menu:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:menu:extend nsubr)
(entry #:menu:extend nsubr)
(push a4)
(push (@ 101))
(push '#:menu:extend)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:extend '#:menu:extend 'setf-inverse) '#:menu:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:menu:itemlist '((() () ()) name active items) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:title '#:menu:itemlist:title 'setf-inverse) '#:menu:itemlist:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:itemlists '#:menu:itemlist:itemlists 'setf-inverse) '#:menu:itemlist:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:display '#:menu:itemlist:display 'setf-inverse) '#:menu:itemlist:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:extend '#:menu:itemlist:extend 'setf-inverse) '#:menu:itemlist:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:menu:itemlist:name nsubr)
(entry #:menu:itemlist:name nsubr)
(push a4)
(push (@ 101))
(push '#:menu:itemlist:name)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:name '#:menu:itemlist:name 'setf-inverse) '#:menu:itemlist:name)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:menu:itemlist:active nsubr)
(entry #:menu:itemlist:active nsubr)
(push a4)
(push (@ 101))
(push '#:menu:itemlist:active)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:active '#:menu:itemlist:active 'setf-inverse) '#:menu:itemlist:active)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:active (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:menu:itemlist:items nsubr)
(entry #:menu:itemlist:items nsubr)
(push a4)
(push (@ 101))
(push '#:menu:itemlist:items)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:items '#:menu:itemlist:items 'setf-inverse) '#:menu:itemlist:items)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:items (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop '#:menu:item '((() () ()) name active value) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:title '#:menu:item:title 'setf-inverse) '#:menu:item:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:itemlists '#:menu:item:itemlists 'setf-inverse) '#:menu:item:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:display '#:menu:item:display 'setf-inverse) '#:menu:item:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:extend '#:menu:item:extend 'setf-inverse) '#:menu:item:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:menu:item:name nsubr)
(entry #:menu:item:name nsubr)
(push a4)
(push (@ 101))
(push '#:menu:item:name)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:name '#:menu:item:name 'setf-inverse) '#:menu:item:name)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:menu:item:active nsubr)
(entry #:menu:item:active nsubr)
(push a4)
(push (@ 101))
(push '#:menu:item:active)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:active '#:menu:item:active 'setf-inverse) '#:menu:item:active)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:active (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:menu:item:value nsubr)
(entry #:menu:item:value nsubr)
(push a4)
(push (@ 101))
(push '#:menu:item:value)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:value '#:menu:item:value 'setf-inverse) '#:menu:item:value)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:value (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop 'font-info '((() () () () () () () () () () () () () ()) ascent descent angle weight minrbearing minlbearing minascent mindescent minwidth maxrbearing maxlbearing maxascent maxdescent maxwidth) 'defstruct)
(loader'((fentry #:font-info:make subr0)
(entry #:font-info:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '14 a4)
(jmp vector)
101
(eval ())
(mov 'font-info (cdr a1))
(return)
))
(loader'((fentry #:font-info:ascent nsubr)
(entry #:font-info:ascent nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:ascent)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:ascent '#:font-info:ascent 'setf-inverse) '#:font-info:ascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:ascent (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:font-info:descent nsubr)
(entry #:font-info:descent nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:descent)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:descent '#:font-info:descent 'setf-inverse) '#:font-info:descent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:descent (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:font-info:angle nsubr)
(entry #:font-info:angle nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:angle)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:angle '#:font-info:angle 'setf-inverse) '#:font-info:angle)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:angle (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:font-info:weight nsubr)
(entry #:font-info:weight nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:weight)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:weight '#:font-info:weight 'setf-inverse) '#:font-info:weight)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:weight (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:font-info:minrbearing nsubr)
(entry #:font-info:minrbearing nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:minrbearing)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minrbearing '#:font-info:minrbearing 'setf-inverse) '#:font-info:minrbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minrbearing (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:font-info:minlbearing nsubr)
(entry #:font-info:minlbearing nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:minlbearing)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minlbearing '#:font-info:minlbearing 'setf-inverse) '#:font-info:minlbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minlbearing (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:font-info:minascent nsubr)
(entry #:font-info:minascent nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:minascent)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minascent '#:font-info:minascent 'setf-inverse) '#:font-info:minascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minascent (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:font-info:mindescent nsubr)
(entry #:font-info:mindescent nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:mindescent)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:mindescent '#:font-info:mindescent 'setf-inverse) '#:font-info:mindescent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:mindescent (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:font-info:minwidth nsubr)
(entry #:font-info:minwidth nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:minwidth)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minwidth '#:font-info:minwidth 'setf-inverse) '#:font-info:minwidth)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minwidth (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(loader'((fentry #:font-info:maxrbearing nsubr)
(entry #:font-info:maxrbearing nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:maxrbearing)
(push '9)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxrbearing '#:font-info:maxrbearing 'setf-inverse) '#:font-info:maxrbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxrbearing (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(loader'((fentry #:font-info:maxlbearing nsubr)
(entry #:font-info:maxlbearing nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:maxlbearing)
(push '10)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxlbearing '#:font-info:maxlbearing 'setf-inverse) '#:font-info:maxlbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxlbearing (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(loader'((fentry #:font-info:maxascent nsubr)
(entry #:font-info:maxascent nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:maxascent)
(push '11)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxascent '#:font-info:maxascent 'setf-inverse) '#:font-info:maxascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxascent (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(loader'((fentry #:font-info:maxdescent nsubr)
(entry #:font-info:maxdescent nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:maxdescent)
(push '12)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxdescent '#:font-info:maxdescent 'setf-inverse) '#:font-info:maxdescent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxdescent (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(loader'((fentry #:font-info:maxwidth nsubr)
(entry #:font-info:maxwidth nsubr)
(push a4)
(push (@ 101))
(push '#:font-info:maxwidth)
(push '13)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxwidth '#:font-info:maxwidth 'setf-inverse) '#:font-info:maxwidth)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxwidth (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(loader'((fentry #:window:make dmsubr)
(entry #:window:make dmsubr)
(mov '(#:image:rectangle:window:make) a1)
(return)
))
(loader'((fentry #:window:background nsubr)
(entry #:window:background nsubr)
(cnbge a4 '1 101)
(mov '#:window:background a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(btnil a1 102)
(hpxmov (& 0) '7 a4)
(btnil a4 104)
(hpxmov (& 0) '7 a4)
(hpmovx (car a1) a4 '5)
(mov (car a1) a1)
(adjstk '1)
(return)
104
(mov nil a1)
(adjstk '1)
(return)
102
(hpxmov (& 0) '7 a4)
(btnil a4 106)
(hpxmov (& 0) '7 a1)
(hpxmov a1 '5 a1)
(adjstk '1)
(return)
106
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:window:left dmsubr)
(entry #:window:left dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:x a1)
(jmp cons)
))
(loader'((fentry #:window:top dmsubr)
(entry #:window:top dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:y a1)
(jmp cons)
))
(loader'((fentry #:window:width dmsubr)
(entry #:window:width dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:w a1)
(jmp cons)
))
(loader'((fentry #:window:height dmsubr)
(entry #:window:height dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:h a1)
(jmp cons)
))
(loader'((fentry #:window:title dmsubr)
(entry #:window:title dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:title a1)
(jmp cons)
))
(loader'((fentry #:window:hilited dmsubr)
(entry #:window:hilited dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:hilited a1)
(jmp cons)
))
(loader'((fentry #:window:visible dmsubr)
(entry #:window:visible dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:visible a1)
(jmp cons)
))
(loader'((fentry #:window:graph-env dmsubr)
(entry #:window:graph-env dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:graph-env a1)
(jmp cons)
))
(loader'((fentry #:window:extend dmsubr)
(entry #:window:extend dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:extend a1)
(jmp cons)
))
(loader'((fentry #:window:father dmsubr)
(entry #:window:father dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:father a1)
(jmp cons)
))
(loader'((fentry #:window:properties dmsubr)
(entry #:window:properties dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:properties a1)
(jmp cons)
))
(loader'((fentry #:window:cursor dmsubr)
(entry #:window:cursor dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:cursor a1)
(jmp cons)
))
(loader'((fentry #:window:display dmsubr)
(entry #:window:display dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:display a1)
(jmp cons)
))
(loader'((fentry #:window:subwindows dmsubr)
(entry #:window:subwindows dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:subwindows a1)
(jmp cons)
))
(loader'((fentry #:window:events-list dmsubr)
(entry #:window:events-list dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:events-list a1)
(jmp cons)
))
(loader'((fentry #:window:window-type dmsubr)
(entry #:window:window-type dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:window-type a1)
(jmp cons)
))
(loader'((fentry #:window:graphic-properties dmsubr)
(entry #:window:graphic-properties dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:graphic-properties a1)
(jmp cons)
))
(loader'((fentry #:window:state dmsubr)
(entry #:window:state dmsubr)
(mov a1 a2)
(mov '#:image:rectangle:window:state a1)
(jmp cons)
))
(add-feature 'virbitmap)
(loader '((end)))
