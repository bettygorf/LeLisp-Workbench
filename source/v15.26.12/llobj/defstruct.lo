(loader '((title |defstruct.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'defstruct)))
(defvar #:sys-package:colon 'defstruct)
(add-feature 'defstruct)
(defvar #:system:defstruct-all-access-flag t)
(loader'((fentry structurep subr1)
(entry structurep subr1)
(bfvect a1 101)
(mov 'defstruct a2)
(mov (cdr a1) a1)
(jcall getprop)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry defstruct dmsubr)
(entry defstruct dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(btvar a1 102)
(mov a1 a3)
(mov 'errnva a2)
(mov 'defstruct a1)
(jcall error)
102
(push (& 0))
(push nil)
103
(bfcons (& 1) 104)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(bfsymb (& 0) 105)
(mov nil a1)
(bra 106)
105
(bfcons (& 0) 109)
(mov (& 0) a4)
(btsymb (car a4) 107)
109
(mov (& 0) a3)
(mov 'errnaa a2)
(mov 'defstruct a1)
(jcall error)
(bra 106)
107
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
106
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 103)
104
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (& 1))
(push nil)
110
(bfcons (& 1) 111)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(btcons (& 0) 112)
(mov (& 0) a1)
(bra 113)
112
(mov (& 0) a1)
(mov (car a1) a1)
113
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 110)
111
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push (& 2))
(push '-1)
(push a1)
(mov a1 a2)
(mov (& 3) a1)
(jcall cons)
(mov a1 (& 4))
114
(mov (& 2) a4)
(cabeq (pkgc a4) nil 115)
(mov 'defstruct a2)
(mov (pkgc a4) a1)
(jcall getprop)
(btnil a1 115)
(mov (& 2) a4)
(mov (pkgc a4) (& 2))
(push (@ 116))
(mov 'defstruct a2)
(mov (& 3) a1)
(jcall getprop)
(push (car a1))
(push (& 5))
(mov '2 a4)
(jmp append)
116
(eval ())
(mov a1 (& 3))
(push (@ 117))
(mov 'defstruct a2)
(mov (& 3) a1)
(jcall getprop)
(push (cdr a1))
(push (& 2))
(mov '2 a4)
(jmp append)
117
(eval ())
(mov a1 (& 0))
(bra 114)
115
(push (@ 118))
(push 'exportable-definition)
(push (@ 119))
(push 'quote)
(push (& 9))
(mov '2 a4)
(jmp list)
119
(eval ())
(push a1)
(push ''structure)
(push (@ 120))
(push 'putprop)
(push (@ 121))
(push 'quote)
(push (& 13))
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(push (@ 122))
(push 'quote)
(push (& 13))
(mov '2 a4)
(jmp list)
122
(eval ())
(push a1)
(push '('defstruct))
(mov '4 a4)
(jmp mcons)
120
(eval ())
(push a1)
(push (@ 123))
(push 'defun)
(mov 'make a2)
(mov (& 12) a1)
(jcall symbol)
(push a1)
(push nil)
(push (@ 124))
(push 'let)
(push (@ 125))
(push 'vector)
(mov (& 16) a2)
(mov 'vector a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
125
(eval ())
(jcall ncons)
(push a1)
(push (@ 126))
(push 'typevector)
(push 'vector)
(push (@ 127))
(push 'quote)
(push (& 22))
(mov '2 a4)
(jmp list)
127
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
126
(eval ())
(push a1)
(push '(vector))
(mov '4 a4)
(jmp mcons)
124
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
123
(eval ())
(push a1)
(push (& 6))
(push nil)
128
(bfcons (& 1) 129)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 10) a1)
(jcall |1+|)
(mov a1 (& 10))
(bfnil (cvalq #:system:defstruct-all-access-flag) 132)
(mov (& 13) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 130)
132
(mov (& 0) a2)
(mov (& 14) a1)
(jcall symbol)
(mov a1 (& 0))
(push (@ 133))
(push (@ 134))
(push 'defun)
(push a1)
(push '&nobind)
(push (@ 135))
(push '#:system:structaccess)
(push (@ 136))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
136
(eval ())
(push a1)
(push (& 18))
(push '((arg 0) (arg 1) (arg)))
(mov '4 a4)
(jmp mcons)
135
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
134
(eval ())
(push a1)
(push (@ 137))
(push 'when)
(push '(featurep 'setf))
(push (@ 138))
(push 'defsetf)
(push (& 7))
(push (& 8))
(mov '3 a4)
(jmp list)
138
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
137
(eval ())
(push a1)
(push (@ 139))
(push 'when)
(push '(featurep 'compiler))
(push (@ 140))
(push 'defmacro-open)
(push (& 8))
(push '(struct . valeur))
(push (@ 141))
(push 'ifn)
(push 'valeur)
(push (@ 142))
(push 'list)
(push ''vref)
(push 'struct)
(push (& 27))
(mov '4 a4)
(jmp list)
142
(eval ())
(push a1)
(push (@ 143))
(push 'list)
(push ''vset)
(push 'struct)
(push (& 28))
(push '((car valeur)))
(mov '5 a4)
(jmp mcons)
143
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
141
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
140
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
139
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
133
(eval ())
(bra 131)
130
(mov nil a1)
131
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 128)
129
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '6 a4)
(jmp mcons)
118
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry new subr1)
(entry new subr1)
(push a1)
(mov 'defstruct a2)
(jcall getprop)
(btnil a1 101)
(push (@ 103))
(mov 'make a2)
(mov (& 1) a1)
(jcall symbol)
(push a1)
(push nil)
(mov '2 a4)
(jmp apply)
103
(eval ())
(adjstk '1)
(return)
101
(mov (& 0) a3)
(mov 'errstc a2)
(mov 'new a1)
(adjstk '1)
(jmp error)
))
(loader '((end)))
