(loader '((title |lleditor.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'editor)))
(defvar #:sys-package:colon '#:edit:editor)
(add-feature 'editor)
(putprop '#:edit:editor '((() '#:edit:editor:edit-query "test.ll" '#:edit:editor:edit-drawcursor '#:edit:editor:edit-redisplaystring '#:edit:editor:edit-redisplaycleol () () () () 0 80 20 0 0 0 0) sender query file drawcursor redisplaystring redisplaycleol screen cmd ecmd xcmd state w h xcursor ycursor xpos ypos) 'defstruct)
(loader'((fentry #:edit:editor:make subr0)
(entry #:edit:editor:make subr0)
(push (@ 101))
(jcall #:buffer:make)
(push a1)
(push '0)
(push '0)
(push nil)
(push '#:edit:editor:edit-query)
(push '"test.ll")
(push '#:edit:editor:edit-drawcursor)
(push '#:edit:editor:edit-redisplaystring)
(push '#:edit:editor:edit-redisplaycleol)
(push nil)
(push nil)
(push nil)
(push nil)
(push '0)
(push '80)
(push '20)
(push '0)
(push '0)
(push '0)
(push '0)
(mov '20 a4)
(jmp vector)
101
(eval ())
(mov '#:edit:editor (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:pbuffer '#:edit:editor:pbuffer 'setf-inverse) '#:edit:editor:pbuffer)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:pbuffer (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:curx '#:edit:editor:curx 'setf-inverse) '#:edit:editor:curx)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:curx (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:cury '#:edit:editor:cury 'setf-inverse) '#:edit:editor:cury)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:cury (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:sender '#:edit:editor:sender 'setf-inverse) '#:edit:editor:sender)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:sender (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:query '#:edit:editor:query 'setf-inverse) '#:edit:editor:query)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:query (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:file '#:edit:editor:file 'setf-inverse) '#:edit:editor:file)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:file (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:drawcursor '#:edit:editor:drawcursor 'setf-inverse) '#:edit:editor:drawcursor)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:drawcursor (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:redisplaystring '#:edit:editor:redisplaystring 'setf-inverse) '#:edit:editor:redisplaystring)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:redisplaystring (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:redisplaycleol '#:edit:editor:redisplaycleol 'setf-inverse) '#:edit:editor:redisplaycleol)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:redisplaycleol (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:screen '#:edit:editor:screen 'setf-inverse) '#:edit:editor:screen)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:screen (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:cmd '#:edit:editor:cmd 'setf-inverse) '#:edit:editor:cmd)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:cmd (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:ecmd '#:edit:editor:ecmd 'setf-inverse) '#:edit:editor:ecmd)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:ecmd (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:xcmd '#:edit:editor:xcmd 'setf-inverse) '#:edit:editor:xcmd)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:xcmd (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:state '#:edit:editor:state 'setf-inverse) '#:edit:editor:state)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:state (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:w '#:edit:editor:w 'setf-inverse) '#:edit:editor:w)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:w (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:h '#:edit:editor:h 'setf-inverse) '#:edit:editor:h)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:h (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:xcursor '#:edit:editor:xcursor 'setf-inverse) '#:edit:editor:xcursor)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:xcursor (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:ycursor '#:edit:editor:ycursor 'setf-inverse) '#:edit:editor:ycursor)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:ycursor (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:xpos '#:edit:editor:xpos 'setf-inverse) '#:edit:editor:xpos)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:xpos (struct . valeur) (ifn valeur (list 'vref struct 18) (list 'vset struct 18 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:edit:editor:ypos '#:edit:editor:ypos 'setf-inverse) '#:edit:editor:ypos)))
(if (featurep 'compiler) (progn (defmacro-open #:edit:editor:ypos (struct . valeur) (ifn valeur (list 'vref struct 19) (list 'vset struct 19 (car valeur))))))
(loader'((fentry #:edit:editor:prin subr1)
(entry #:edit:editor:prin subr1)
(push (@ 101))
(push '"<")
(hpxmov a1 '14 a4)
(push a4)
(push '",")
(hpxmov a1 '15 a4)
(push a4)
(push '">")
(mov '5 a4)
(jmp prin)
101
(eval ())
(return)
))
(loader'((entry #:edit:editor:add-charp subr1)
(push (@ 101))
(push a1)
(push '" !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
(mov '2 a4)
(jmp chrpos)
101
(eval ())
(return)
))
(loader'((fentry trap-editor subr3)
(entry trap-editor subr3)
(push a3)
(push a2)
(push a1)
(mov a2 a1)
(jcall type-of)
(mov '#:edit:editor a2)
(jcall subtypep)
(bfnil a1 101)
(mov (& 1) a3)
(mov '"Argument is not an editor." a2)
(mov 'trap-editor a1)
(adjstk '3)
(jmp error)
101
(mov (& 0) a1)
(cabne a1 '100 104)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-clear)
104
(cabne a1 '101 105)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-right)
105
(cabne a1 '102 106)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-left)
106
(cabne a1 '103 107)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-down)
107
(cabne a1 '104 108)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-up)
108
(cabne a1 '105 109)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-next)
109
(cabne a1 '106 110)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-previous)
110
(cabne a1 '107 111)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-cur-top)
111
(cabne a1 '108 112)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-ygoto)
112
(cabne a1 '109 113)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:win-xgoto)
113
(cabne a1 '110 114)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:cur-win-top)
114
(cabne a1 '111 115)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:cur-win-buttom)
115
(cabne a1 '112 116)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:cur-win-ygoto)
116
(cabne a1 '113 117)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:cur-win-xgoto)
117
(cabne a1 '114 118)
(hpmovx '1 (& 1) '13)
(mov '1 a1)
(adjstk '3)
(return)
118
(cabne a1 '115 119)
(hpmovx '2 (& 1) '13)
(mov '2 a1)
(adjstk '3)
(return)
119
(cabne a1 '116 120)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:query-readfile)
120
(cabne a1 '117 121)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:query-writefile)
121
(cabne a1 '118 122)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:query-insertfile)
122
(cabne a1 '119 123)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:query-search)
123
(cabne a1 '120 124)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:query-rsearch)
124
(cabne a1 '121 125)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:savefile)
125
(cabne a1 '122 126)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:query-goto-line-number)
126
(cabne a1 '123 127)
(mov '"This key has no global fonction" a1)
(mov 'eoc a2)
(jmp #:llcp:exit)
(adjstk '3)
(return)
127
(cabne a1 '124 128)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:exp-eval)
128
(cabne a1 '125 129)
(mov (& 1) a1)
(adjstk '3)
(bra #:edit:editor:exp-eval-print)
129
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry init-editor nsubr)
(entry init-editor nsubr)
(cnbeq a4 '4 101)
(mov 'init-editor a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov (& 1) a4)
(times (& 0) a4)
(mov '32 a2)
(mov a4 a1)
(jcall makestring)
(hpmovx a1 (& 3) '9)
(hpxmov (& 3) '0 a4)
(hpxmov (& 3) '0 a3)
(hpxmov a3 '1 a3)
(quo '2 a3)
(mov '2 a2)
(times a3 a2)
(mov '1 a3)
(plus a2 a3)
(hpmovx a3 a4 '1)
(hpmovx (& 2) (& 3) '3)
(hpmovx (& 1) (& 3) '14)
(hpmovx (& 0) (& 3) '15)
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((entry #:edit:editor:win-clear subr1)
(hpxmov a1 '0 a4)
(hpxmov a1 '0 a3)
(hpxmov a3 '1 a3)
(quo '2 a3)
(mov '2 a2)
(times a3 a2)
(mov '1 a3)
(plus a2 a3)
(hpmovx a3 a4 '1)
(push (@ 101))
(hpxmov a1 '9 a4)
(push a4)
(push '0)
(push '32)
(mov '3 a4)
(jmp fillstring)
101
(eval ())
(return)
))
(loader'((entry #:edit:editor:win-right subr1)
(hpxmov a1 '18 a4)
(cabeq a4 '0 101)
(hpxmov a1 '18 a4)
(diff '1 a4)
(hpmovx a4 a1 '18)
(hpxmov a1 '1 a4)
(hpxmov a1 '18 a3)
(hpxmov a1 '14 a2)
(plus a2 a3)
(cnblt a4 a3 103)
(hpxmov a1 '18 a4)
(hpxmov a1 '14 a3)
(quo '2 a3)
(plus a3 a4)
(hpmovx a4 a1 '1)
(mov a4 a1)
(return)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:edit:editor:win-left subr1)
(hpxmov a1 '18 a4)
(plus '1 a4)
(hpmovx a4 a1 '18)
(hpxmov a1 '18 a4)
(hpxmov a1 '1 a3)
(cnble a4 a3 101)
(hpxmov a1 '18 a4)
(hpxmov a1 '14 a3)
(quo '2 a3)
(plus a3 a4)
(hpmovx a4 a1 '1)
(mov a4 a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:edit:editor:win-down subr1)
(hpxmov a1 '19 a4)
(cabeq a4 '0 101)
(hpxmov a1 '19 a4)
(diff '1 a4)
(hpmovx a4 a1 '19)
(hpxmov a1 '2 a4)
(hpxmov a1 '19 a3)
(hpxmov a1 '15 a2)
(plus a2 a3)
(cnblt a4 a3 103)
(hpxmov a1 '19 a4)
(hpxmov a1 '15 a3)
(quo '2 a3)
(plus a3 a4)
(hpmovx a4 a1 '2)
(mov a4 a1)
(return)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:edit:editor:win-up subr1)
(push a1)
(hpxmov a1 '2 a4)
(hpxmov a1 '19 a3)
(cabne a4 a3 103)
(hpxmov a1 '2 a4)
(hpxmov a1 '0 a3)
(hpxmov a3 '2 a3)
(cabeq a4 a3 101)
103
(hpxmov a1 '19 a4)
(plus '1 a4)
(hpmovx a4 a1 '19)
(hpxmov a1 '19 a4)
(hpxmov a1 '2 a3)
(cnble a4 a3 104)
(push a1)
(hpxmov a1 '0 a4)
(hpxmov a4 '2 a4)
(push a4)
(hpxmov a1 '19 a1)
(hpxmov (& 2) '15 a3)
(quo '2 a3)
(plus a3 a1)
(mov a4 a2)
(jcall le)
(mov a1 a4)
(bfnil a4 106)
(mov (& 0) a4)
106
(adjstk '1)
(pop a3)
(hpmovx a4 a3 '2)
(mov a4 a1)
(adjstk '1)
(return)
104
(mov nil a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:edit:editor:win-next subr1)
(push a1)
(push a1)
(hpxmov a1 '0 a4)
(hpxmov a4 '2 a4)
(push a4)
(hpxmov a1 '19 a1)
(hpxmov (& 2) '15 a3)
(mov '3 a2)
(times a3 a2)
(quo '4 a2)
(plus a2 a1)
(mov a4 a2)
(jcall le)
(mov a1 a4)
(bfnil a4 101)
(mov (& 0) a4)
101
(adjstk '1)
(pop a3)
(hpmovx a4 a3 '19)
(hpxmov (& 0) '19 a4)
(hpmovx a4 (& 0) '2)
(hpxmov (& 0) '18 a4)
(hpmovx a4 (& 0) '1)
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((entry #:edit:editor:win-previous subr1)
(push a1)
(push a1)
(push '0)
(hpxmov a1 '19 a1)
(hpxmov (& 2) '15 a4)
(mov '3 a3)
(times a4 a3)
(quo '4 a3)
(diff a3 a1)
(mov (& 0) a2)
(jcall ge)
(mov a1 a4)
(bfnil a4 101)
(mov (& 0) a4)
101
(adjstk '1)
(pop a3)
(hpmovx a4 a3 '19)
(hpxmov (& 0) '19 a4)
(hpmovx a4 (& 0) '2)
(hpxmov (& 0) '18 a4)
(hpmovx a4 (& 0) '1)
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((entry #:edit:editor:win-cur-top subr1)
(hpxmov a1 '2 a4)
(hpmovx a4 a1 '19)
(mov a4 a1)
(return)
))
(loader'((entry #:edit:editor:win-ygoto subr2)
(cnblt a2 '0 101)
(hpxmov a1 '0 a4)
(hpxmov a4 '2 a4)
(cnbgt a2 a4 101)
(hpmovx a2 a1 '19)
(hpxmov a1 '19 a4)
(hpxmov a1 '2 a3)
(cnbgt a4 a3 105)
(hpxmov a1 '2 a4)
(push a4)
(hpxmov a1 '19 a3)
(hpxmov a1 '15 a4)
(plus a4 a3)
(pop a4)
(cnblt a4 a3 103)
105
(hpxmov a1 '19 a3)
(hpxmov a1 '15 a4)
(quo '2 a4)
(plus a4 a3)
(mov a1 a2)
(mov '11 a1)
(jmp trap-edit)
103
(mov nil a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:edit:editor:win-xgoto subr2)
(mov nil a1)
(return)
))
(loader'((entry #:edit:editor:cur-win-top subr1)
(hpxmov a1 '18 a4)
(hpmovx a4 a1 '1)
(hpxmov a1 '19 a4)
(hpmovx a4 a1 '2)
(mov a4 a1)
(return)
))
(loader'((entry #:edit:editor:cur-win-buttom subr1)
(push a1)
(push a1)
(hpxmov a1 '0 a4)
(hpxmov a4 '2 a4)
(push a4)
(hpxmov a1 '19 a1)
(hpxmov (& 2) '15 a3)
(diff '1 a3)
(plus a3 a1)
(mov a4 a2)
(jcall le)
(mov a1 a4)
(bfnil a4 101)
(mov (& 0) a4)
101
(adjstk '1)
(pop a3)
(hpmovx a4 a3 '2)
(hpxmov (& 0) '0 a4)
(hpxmov a4 '0 a4)
(hpxmov (& 0) '2 a3)
(hpxmov a4 a3 a4)
(hbxmov a4 '0 a4)
(push a4)
(hpxmov (& 1) '18 a1)
(hpxmov (& 1) '14 a3)
(diff '1 a3)
(plus a3 a1)
(mov a4 a2)
(jcall le)
(mov a1 a4)
(bfnil a4 102)
(mov (& 0) a4)
102
(adjstk '1)
(hpmovx a4 (& 0) '1)
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((entry #:edit:editor:cur-win-ygoto subr2)
(hpxmov a1 '19 a3)
(plus a2 a3)
(mov a1 a2)
(mov '11 a1)
(jmp trap-edit)
))
(loader'((entry #:edit:editor:cur-win-xgoto subr2)
(hpxmov a1 '18 a3)
(plus a2 a3)
(mov a1 a2)
(mov '12 a1)
(jmp trap-edit)
))
(loader'((entry #:edit:editor:query-readfile subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '4 a4)
(push a4)
(push a1)
(push '"Read file: ")
(push 't)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(push a1)
(btnil a1 102)
(jcall probepathf)
(mov a1 (& 0))
(bfnil a1 104)
(mov '"File not found." a1)
(adjstk '2)
(return)
104
(hpmovx a1 (& 1) '5)
(mov a1 a3)
(mov (& 1) a2)
(mov '37 a1)
(adjstk '2)
(jmp trap-edit)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:edit:editor:query-writefile subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '4 a4)
(push a4)
(push a1)
(push '"Write file: ")
(push 't)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(push a1)
(btnil a1 102)
(mov '"" a2)
(jcall equal)
(btnil a1 104)
(hpxmov (& 1) '5 a4)
(mov a4 (& 0))
(bra 105)
104
(hpmovx (& 0) (& 1) '5)
105
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:edit:editor:writefile2)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:edit:editor:savefile subr1)
(hpxmov a1 '5 a2)
(bra #:edit:editor:writefile2)
))
(loader'((entry #:edit:editor:writefile2 subr2)
(push a2)
(push a1)
(push nil)
(push '0)
(push nil)
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov (& 3) (cvalq #:system:print-msgs))
(push (cvalq #:system:error-flag))
(mov (& 5) (cvalq #:system:error-flag))
(push '3)
(push '(#:system:debug #:system:print-msgs #:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov a2 a1)
(jcall opena)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(mov (& 7) (cvalq #:system:print-msgs))
(mov (& 8) (cvalq #:system:debug))
(adjstk '12)
(bfnil a1 102)
(push (@ 104))
(push '"Can't write file ")
(push (& 3))
(mov '2 a4)
(jmp catenate)
104
(eval ())
(adjstk '2)
(return)
102
(push (@ 105))
(push (car a1))
(mov '1 a4)
(jmp close)
105
(eval ())
(mov (& 1) a3)
(mov (& 0) a2)
(mov '39 a1)
(adjstk '2)
(jmp trap-edit)
))
(loader'((entry #:edit:editor:query-insertfile subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '4 a4)
(push a4)
(push a1)
(push '"Insert file: ")
(push 't)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(push a1)
(btnil a1 102)
(jcall probepathf)
(mov a1 (& 0))
(bfnil a1 104)
(mov '"File not found." a1)
(adjstk '2)
(return)
104
(mov a1 a3)
(mov (& 1) a2)
(mov '38 a1)
(adjstk '2)
(jmp trap-edit)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:edit:editor:query-search subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '4 a4)
(push a4)
(push a1)
(push '"Search for : ")
(push 't)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(btnil a1 102)
(mov a1 a3)
(mov (& 0) a2)
(mov '22 a1)
(adjstk '1)
(jmp trap-edit)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:edit:editor:query-rsearch subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '4 a4)
(push a4)
(push a1)
(push '"Reverse search for : ")
(push 't)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(btnil a1 102)
(mov a1 a3)
(mov (& 0) a2)
(mov '23 a1)
(adjstk '1)
(jmp trap-edit)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:edit:editor:query-goto-line-number subr1)
(push a1)
(push (@ 101))
(hpxmov a1 '4 a4)
(push a4)
(push a1)
(push '"Goto line : ")
(push 't)
(mov '4 a4)
(jmp funcall)
101
(eval ())
(push a1)
(btnil a1 102)
(jcall explode)
(jcall implode)
(mov a1 (& 0))
(bffix a1 104)
(mov a1 a3)
(mov (& 1) a2)
(mov '11 a1)
(adjstk '2)
(jmp trap-edit)
104
(mov '"Bad line number" a1)
(adjstk '2)
(return)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry edit-redisplay subr1)
(push (@ 101))
(push a1)
(hpxmov a1 '0 a4)
(hpxmov a4 '0 a4)
(push a4)
(hpxmov a1 '0 a4)
(hpxmov a4 '2 a4)
(push a4)
(hpxmov a1 '9 a4)
(push a4)
(hpxmov a1 '14 a4)
(push a4)
(hpxmov a1 '15 a4)
(push a4)
(hpxmov a1 '19 a4)
(push a4)
(hpxmov a1 '18 a4)
(push a4)
(hpxmov a1 '7 a4)
(push a4)
(hpxmov a1 '8 a4)
(push a4)
(mov '10 a4)
(bra #:edit:editor:edit-redisplayscreen)
101
(eval ())
(return)
))
(loader'((entry #:edit:editor:edit-redisplayscreen nsubr)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '0)
(push nil)
(push '0)
(mov (& 12) a4)
(bra 102)
101
(push a4)
(cnbgt (& 12) (& 16) 105)
(hpxmov (& 17) (& 12) a4)
(mov a4 (& 8))
(cabne a4 '0 103)
105
(mov (& 1) (& 7))
(bra 104)
103
(hbxmov (& 8) '0 a4)
(diff (& 11) a4)
(push a4)
(mov a4 a2)
(mov '0 a1)
(jcall ge)
(mov a1 a4)
(bfnil a4 106)
(mov (& 0) a4)
106
(adjstk '1)
(push a4)
(mov a4 a2)
(mov (& 15) a1)
(jcall le)
(mov a1 a4)
(bfnil a4 107)
(mov (& 0) a4)
107
(adjstk '1)
(mov (& 1) a3)
(plus a4 a3)
(mov a3 (& 7))
104
(mov (& 1) a4)
(plus (& 14) a4)
(mov a4 (& 5))
(mov '0 (& 4))
(mov (& 1) (& 2))
(mov (& 11) a4)
(plus '1 a4)
(mov a4 (& 6))
108
(cnble (& 7) (& 1) 109)
(hbxmov (& 15) (& 1) a4)
(hbxmov (& 8) (& 6) a3)
(cabne a4 a3 109)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(mov (& 6) a4)
(plus '1 a4)
(mov a4 (& 6))
(bra 108)
109
(mov (& 1) a4)
(diff (& 2) a4)
(mov (& 4) a3)
(plus a4 a3)
(mov a3 (& 4))
(cabeq (& 7) (& 1) 111)
(mov (& 7) a4)
(diff (& 1) a4)
(mov a4 (& 2))
(push (@ 112))
(push (& 16))
(push (& 3))
(push (& 11))
(push (& 10))
(push a4)
(mov '5 a4)
(jmp bltstring)
112
(eval ())
(push (@ 113))
(push (& 11))
(push (& 20))
(push (& 7))
(push (& 7))
(push (& 13))
(push (& 12))
(push (& 9))
(mov '7 a4)
(jmp funcall)
113
(eval ())
(mov (& 4) a4)
(plus (& 2) a4)
(mov a4 (& 4))
(mov (& 7) (& 1))
111
(mov (& 1) (& 2))
114
(cnble (& 5) (& 1) 115)
(hbxmov (& 15) (& 1) a4)
(cabne a4 '32 115)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 114)
115
(mov (& 1) a4)
(diff (& 2) a4)
(mov (& 4) a3)
(plus a4 a3)
(mov a3 (& 4))
(cabeq (& 5) (& 1) 117)
(mov (& 5) a4)
(diff (& 1) a4)
(mov a4 (& 2))
(push (@ 118))
(push (& 16))
(push (& 3))
(push '32)
(push a4)
(mov '4 a4)
(jmp fillstring)
118
(eval ())
(push (@ 119))
(push (& 10))
(push (& 20))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '5 a4)
(jmp funcall)
119
(eval ())
(mov (& 5) (& 1))
117
(mov (& 12) a4)
(plus '1 a4)
(mov a4 (& 12))
(mov (& 3) a4)
(plus '1 a4)
(mov a4 (& 3))
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(adjstk '18)
(return)
))
(loader'((fentry #:edit:editor:edit-redisplaystring nsubr)
(entry #:edit:editor:edit-redisplaystring nsubr)
(cnbeq a4 '6 101)
(mov '#:edit:editor:edit-redisplaystring a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov (& 3) a2)
(mov (& 4) a1)
(jcall tycursor)
(mov (& 0) a4)
(bra 103)
102
(push a4)
(push (@ 104))
(hbxmov (& 4) (& 3) a4)
(push a4)
(mov '1 a4)
(jmp tyo)
104
(eval ())
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(pop a4)
103
(sobgez a4 102)
(mov 't a1)
(adjstk '6)
(return)
))
(loader'((fentry #:edit:editor:edit-redisplaycleol nsubr)
(entry #:edit:editor:edit-redisplaycleol nsubr)
(cnbeq a4 '4 101)
(mov '#:edit:editor:edit-redisplaycleol a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov (& 1) a2)
(mov (& 2) a1)
(jcall tycursor)
(adjstk '4)
(jmp tycleol)
))
(loader'((entry #:edit:editor:win-check subr1)
(push a1)
(hpxmov a1 '19 a4)
(push a4)
(hpxmov a1 '18 a3)
(hpxmov a1 '1 a2)
(hpxmov a1 '2 a4)
(push a4)
(hpxmov a1 '14 a4)
(push a4)
(hpxmov a1 '15 a4)
(push a4)
(cnbgt a3 a2 103)
(plus (& 1) a3)
(cnblt a2 a3 102)
103
(push a1)
(push '0)
(mov (& 3) a4)
(quo '2 a4)
(diff a4 a2)
(push a2)
(mov (& 1) a2)
(pop a1)
(jcall ge)
(mov a1 a4)
(bfnil a4 104)
(mov (& 0) a4)
104
(adjstk '1)
(pop a3)
(hpmovx a4 a3 '18)
102
(cnbgt (& 3) (& 2) 107)
(mov (& 3) a4)
(plus (& 0) a4)
(cnblt (& 2) a4 105)
107
(push '0)
(mov (& 1) a4)
(quo '2 a4)
(mov (& 3) a3)
(diff a4 a3)
(mov (& 0) a2)
(mov a3 a1)
(jcall ge)
(mov a1 a4)
(bfnil a4 108)
(mov (& 0) a4)
108
(adjstk '1)
(hpmovx a4 (& 4) '19)
(mov a4 a1)
(adjstk '5)
(return)
105
(mov nil a1)
(adjstk '5)
(return)
))
(defvar editor-simple-command (makevector 128 123))
(defvar editor-escape-command (makevector 128 123))
(defvar editor-extend-command (makevector 128 123))
(loader'((fentry bind-to-key subr2)
(entry bind-to-key subr2)
(bffix a1 101)
(hpmovx a2 (cvalq editor-simple-command) a1)
(mov a2 a1)
(return)
101
(mov a1 a3)
(mov '"Bad key" a2)
(mov 'bind-to-key a1)
(jmp error)
))
(loader'((fentry bind-to-ekey subr2)
(entry bind-to-ekey subr2)
(bffix a1 101)
(hpmovx a2 (cvalq editor-escape-command) a1)
(mov a2 a1)
(return)
101
(mov a1 a3)
(mov '"Bad key" a2)
(mov 'bind-to-ekey a1)
(jmp error)
))
(loader'((fentry bind-to-xkey subr2)
(entry bind-to-xkey subr2)
(bffix a1 101)
(hpmovx a2 (cvalq editor-extend-command) a1)
(mov a2 a1)
(return)
101
(mov a1 a3)
(mov '"Bad key" a2)
(mov 'bind-to-xkey a1)
(jmp error)
))
(loader'((fentry local-bind-to-key subr3)
(entry local-bind-to-key subr3)
(push a3)
(push a2)
(push a1)
(jcall type-of)
(mov '#:edit:editor a2)
(jcall subtypep)
(bfnil a1 101)
(mov (& 0) a3)
(mov '"N'est pas un editeur" a2)
(mov 'local-bind-to-key a1)
(adjstk '3)
(jmp error)
101
(mov (& 2) a2)
(mov (& 1) a1)
(jcall cons)
(hpxmov (& 0) '10 a2)
(jcall cons)
(hpmovx a1 (& 0) '10)
(adjstk '3)
(return)
))
(loader'((fentry local-bind-to-ekey subr3)
(entry local-bind-to-ekey subr3)
(push a3)
(push a2)
(push a1)
(jcall type-of)
(mov '#:edit:editor a2)
(jcall subtypep)
(bfnil a1 101)
(mov (& 0) a3)
(mov '"N'est pas un editeur" a2)
(mov 'local-bind-to-ekey a1)
(adjstk '3)
(jmp error)
101
(mov (& 2) a2)
(mov (& 1) a1)
(jcall cons)
(hpxmov (& 0) '11 a2)
(jcall cons)
(hpmovx a1 (& 0) '11)
(adjstk '3)
(return)
))
(loader'((fentry local-bind-to-xkey subr3)
(entry local-bind-to-xkey subr3)
(push a3)
(push a2)
(push a1)
(jcall type-of)
(mov '#:edit:editor a2)
(jcall subtypep)
(bfnil a1 101)
(mov (& 0) a3)
(mov '"N'est pas un editeur" a2)
(mov 'local-bind-to-xkey a1)
(adjstk '3)
(jmp error)
101
(mov (& 2) a2)
(mov (& 1) a1)
(jcall cons)
(hpxmov (& 0) '12 a2)
(jcall cons)
(hpmovx a1 (& 0) '12)
(adjstk '3)
(return)
))
(loader'((entry edit-command subr2)
(push a2)
(push a1)
(jcall type-of)
(mov '#:edit:editor a2)
(jcall subtypep)
(bfnil a1 101)
(mov (& 0) a3)
(mov '"N'est pas un editeur" a2)
(mov 'edit-command a1)
(adjstk '2)
(jmp error)
101
(push (@ 103))
(push 'eoc)
(push dlink)
(push tag)
(stack dlink)
(hpxmov (& 4) '13 a1)
(cabne a1 '0 105)
(mov (& 5) a2)
(mov (& 4) a1)
(call #:edit:editor:edit-simple-command)
(bra 104)
105
(cabne a1 '1 106)
(mov (& 5) a2)
(mov (& 4) a1)
(call #:edit:editor:edit-escape-command)
(bra 104)
106
(cabne a1 '2 107)
(mov (& 5) a2)
(mov (& 4) a1)
(call #:edit:editor:edit-extend-command)
(bra 104)
107
(mov nil a1)
104
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:edit:editor:edit-simple-command subr2)
(push a2)
(push a1)
(push a2)
(hpxmov a1 '10 a2)
(pop a1)
(jcall cassq)
(btnil a1 101)
(mov (& 0) a2)
(adjstk '2)
(bra #:edit:editor:edit-all-command)
101
(mov (& 1) a1)
(jcall fixp)
(btnil a1 104)
(mov nil a1)
(bra 105)
104
(mov 't a1)
105
(bfnil a1 103)
(mov (& 1) a1)
(call #:edit:editor:add-charp)
(btnil a1 106)
(mov (& 1) a3)
(mov (& 0) a2)
(mov '13 a1)
(adjstk '2)
(jmp trap-edit)
106
(hgsize (cvalq editor-simple-command) a4)
(cnbge (& 1) a4 108)
(hpxmov (cvalq editor-simple-command) (& 1) a1)
(mov (& 0) a2)
(adjstk '2)
(bra #:edit:editor:edit-all-command)
108
(mov nil a1)
(adjstk '2)
(return)
103
(adjstk '2)
(return)
))
(loader'((entry #:edit:editor:edit-escape-command subr2)
(push a2)
(push a1)
(push a2)
(hpxmov a1 '11 a2)
(pop a1)
(jcall cassq)
(hpmovx '0 (& 0) '13)
(btnil a1 101)
(mov (& 0) a2)
(adjstk '2)
(bra #:edit:editor:edit-all-command)
101
(mov (& 1) a1)
(jcall fixp)
(btnil a1 104)
(mov nil a1)
(bra 105)
104
(mov 't a1)
105
(bfnil a1 103)
(hgsize (cvalq editor-escape-command) a4)
(cnbge (& 1) a4 106)
(hpxmov (cvalq editor-escape-command) (& 1) a1)
(mov (& 0) a2)
(adjstk '2)
(bra #:edit:editor:edit-all-command)
106
(mov nil a1)
(adjstk '2)
(return)
103
(adjstk '2)
(return)
))
(loader'((entry #:edit:editor:edit-extend-command subr2)
(push a2)
(push a1)
(push a2)
(hpxmov a1 '12 a2)
(pop a1)
(jcall cassq)
(hpmovx '0 (& 0) '13)
(btnil a1 101)
(mov (& 0) a2)
(adjstk '2)
(bra #:edit:editor:edit-all-command)
101
(mov (& 1) a1)
(jcall fixp)
(btnil a1 104)
(mov nil a1)
(bra 105)
104
(mov 't a1)
105
(bfnil a1 103)
(hgsize (cvalq editor-extend-command) a4)
(cnbge (& 1) a4 106)
(hpxmov (cvalq editor-extend-command) (& 1) a1)
(mov (& 0) a2)
(adjstk '2)
(bra #:edit:editor:edit-all-command)
106
(mov nil a1)
(adjstk '2)
(return)
103
(adjstk '2)
(return)
))
(loader'((entry #:edit:editor:edit-all-command subr2)
(push a2)
(push a1)
(bffix a1 101)
(cnbge a1 '100 103)
(mov nil a3)
(adjstk '2)
(jmp trap-edit)
103
(mov nil a3)
(adjstk '2)
(jmp trap-editor)
101
(bfsymb a1 105)
(push (@ 107))
(push a1)
(push a2)
(mov '2 a4)
(jmp funcall)
107
(eval ())
(adjstk '2)
(return)
105
(jcall consp)
(btnil a1 109)
(mov nil a1)
(bra 110)
109
(mov 't a1)
110
(bfnil a1 108)
(mov (& 0) a4)
(cabne (car a4) 'lambda 111)
(push (@ 113))
(push a4)
(push (& 3))
(mov '2 a4)
(jmp funcall)
113
(eval ())
(adjstk '2)
(return)
111
(bfsymb (car a4) 114)
(push (@ 116))
(push (car a4))
(push (& 3))
(push (cdr a4))
(mov '3 a4)
(jmp funcall)
116
(eval ())
(adjstk '2)
(return)
114
(mov nil a1)
(adjstk '2)
(return)
108
(adjstk '2)
(return)
))
(loader'((fentry edit-command-redisplay subr2)
(entry edit-command-redisplay subr2)
(push a2)
(push a1)
(hpxmov a1 '18 a4)
(hpxmov a1 '19 a3)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push a3)
(push a4)
(btnil a2 102)
(push (@ 103))
(hpxmov a1 '4 a4)
(push a4)
(push a1)
(push nil)
(push nil)
(mov '4 a4)
(jmp funcall)
103
(eval ())
102
(hpxmov (& 7) '0 a4)
(hpxmov (& 7) '0 a3)
(hpxmov a3 '1 a3)
(quo '2 a3)
(mov '2 a2)
(times a3 a2)
(hpmovx a2 a4 '1)
(bfnil (& 8) 104)
(hpxmov (& 7) '0 a4)
(hpxmov (& 7) '0 a3)
(hpxmov a3 '1 a3)
(mov '1 a2)
(plus a3 a2)
(hpmovx a2 a4 '1)
(bra 105)
104
(mov (& 8) a2)
(mov (& 7) a1)
(call edit-command)
(mov a1 (& 6))
(bfstrg a1 105)
(push (@ 108))
(hpxmov (& 8) '4 a4)
(push a4)
(push (& 9))
(push a1)
(push nil)
(mov '4 a4)
(jmp funcall)
108
(eval ())
105
(mov (& 7) a1)
(call #:edit:editor:win-check)
(hpxmov (& 7) '16 a4)
(mov a4 (& 5))
(hpxmov (& 7) '17 a4)
(mov a4 (& 4))
(hpxmov (& 7) '1 a3)
(hpxmov (& 7) '18 a2)
(diff a2 a3)
(mov a3 (& 3))
(hpmovx a3 (& 7) '16)
(hpxmov (& 7) '2 a2)
(hpxmov (& 7) '19 a1)
(diff a1 a2)
(mov a2 (& 2))
(hpmovx a2 (& 7) '17)
(hpxmov (& 7) '19 a1)
(cabne (& 1) a1 111)
(hpxmov (& 7) '18 a1)
(cabne (& 0) a1 111)
(hpxmov (& 7) '0 a1)
(hpxmov a1 '1 a1)
(rem '2 a1)
(cabne a1 '1 109)
111
(push (@ 112))
(hpxmov (& 8) '6 a1)
(push a1)
(push (& 9))
(push (& 8))
(push a4)
(push nil)
(mov '5 a4)
(jmp funcall)
112
(eval ())
(mov (& 7) a1)
(call edit-redisplay)
(push (@ 113))
(hpxmov (& 8) '6 a4)
(push a4)
(push (& 9))
(push (& 6))
(push (& 6))
(push 't)
(mov '5 a4)
(jmp funcall)
113
(eval ())
(adjstk '9)
(return)
109
(cnbge (& 5) '0 114)
(push (@ 116))
(hpxmov (& 8) '6 a1)
(push a1)
(push (& 9))
(push a3)
(push a2)
(push 't)
(mov '5 a4)
(jmp funcall)
116
(eval ())
(adjstk '9)
(return)
114
(cabne (& 5) a3 119)
(cabeq a4 a2 117)
119
(push (@ 120))
(hpxmov (& 8) '6 a1)
(push a1)
(push (& 9))
(push (& 8))
(push a4)
(push nil)
(mov '5 a4)
(jmp funcall)
120
(eval ())
(push (@ 121))
(hpxmov (& 8) '6 a4)
(push a4)
(push (& 9))
(push (& 6))
(push (& 6))
(push 't)
(mov '5 a4)
(jmp funcall)
121
(eval ())
(adjstk '9)
(return)
117
(mov nil a1)
(adjstk '9)
(return)
))
(loader'((fentry #:edit:editor:edit-drawcursor nsubr)
(entry #:edit:editor:edit-drawcursor nsubr)
(cnbeq a4 '4 101)
(mov '#:edit:editor:edit-drawcursor a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(btnil (& 0) 102)
(mov (& 1) a2)
(mov (& 2) a1)
(adjstk '4)
(jmp tycursor)
102
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry #:edit:editor:edit-query subr3)
(entry #:edit:editor:edit-query subr3)
(mov nil a1)
(return)
))
(defvar #:edit:editor:cure)
(loader'((fentry edit-eval-redisplay dmsubr)
(entry edit-eval-redisplay dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push a4)
(push (@ 101))
(push 'let)
(push (@ 102))
(push '(#:system:redef-flag t))
(push '(#:sys-package:itsoft (cons '#:edit:editor #:sys-package:itsoft)))
(push (@ 103))
(push '#:edit:editor:cure)
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
102
(eval ())
(push a1)
(push (@ 104))
(push 'prog1)
(push (@ 105))
(push 'tag)
(push 'eoc)
(push (& 8))
(mov '3 a4)
(jmp list)
105
(eval ())
(push a1)
(push '((edit-command-redisplay #:edit:editor:cure ())))
(mov '3 a4)
(jmp mcons)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:edit:editor:bol subr0)
(entry #:edit:editor:bol subr0)
(push (cvalq #:edit:editor:cure))
(push (@ 103))
(mov '0 a4)
(jmp inchan)
103
(eval ())
(bffix a1 101)
(mov nil a3)
(mov 'bol a2)
(mov '#:edit:editor a1)
(adjstk '1)
(jmp super-itsoft)
101
(mov nil a3)
(mov (& 0) a2)
(mov '31 a1)
(adjstk '1)
(jmp trap-edit)
))
(loader'((fentry #:edit:editor:eol subr0)
(entry #:edit:editor:eol subr0)
(push (cvalq #:edit:editor:cure))
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(bffix a1 101)
(mov nil a3)
(mov 'eol a2)
(mov '#:edit:editor a1)
(adjstk '1)
(jmp super-itsoft)
101
(mov nil a3)
(mov (& 0) a2)
(mov '32 a1)
(adjstk '1)
(jmp trap-edit)
))
(loader'((fentry #:edit:editor:syserror subr3)
(entry #:edit:editor:syserror subr3)
(push a3)
(push a2)
(push a1)
(mov '() a1)
(jcall debug)
(btnil a1 101)
(mov (cvalq #:sys-package:itsoft) a4)
(push (cdr a4))
(push (cvalq #:sys-package:itsoft))
(mov (& 1) (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push (& 9))
(push (& 11))
(push (& 13))
(mov '3 a4)
(jmp list)
103
(eval ())
(mov a1 a3)
(mov 'syserror a2)
(mov '#:edit:editor a1)
(jcall super-itsoft)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(bra 102)
101
(push (cvalq #:edit:editor:cure))
(push 'edit-print-query)
(push (cvalq #:sys-package:itsoft))
(mov (& 1) (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 104))
(push 'edit-print-query)
(push dlink)
(push tag)
(stack dlink)
(mov (& 15) a3)
(mov (& 14) a2)
(mov (& 13) a1)
(jcall printerror)
(mov (& 1) dlink)
(adjstk '4)
104
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(mov a1 a2)
(pop a1)
(jcall edit-print-query)
102
(mov 'eoc a2)
(jmp #:llcp:exit)
(adjstk '3)
(return)
))
(loader'((fentry edit-print-query subr2)
(entry edit-print-query subr2)
(push a2)
(push a1)
(push 'edit-print-query)
(push (cvalq #:sys-package:itsoft))
(mov (& 1) (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'edit-print-query)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(push a2)
(mov '1 a4)
(jmp print)
102
(eval ())
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov a1 (& 9))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '8)
(push (@ 103))
(hpxmov (& 1) '4 a4)
(push a4)
(push (& 2))
(push a1)
(push nil)
(mov '4 a4)
(jmp funcall)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:edit-print-query:eol subr0)
(entry #:edit-print-query:eol subr0)
(push (@ 101))
(push (@ 102))
(mov '0 a4)
(jmp outbuf)
102
(eval ())
(push a1)
(push '0)
(push (@ 103))
(mov '0 a4)
(jmp outpos)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp substring)
101
(eval ())
(push a1)
(push (@ 104))
(push (@ 105))
(mov '0 a4)
(jmp lmargin)
105
(eval ())
(push a1)
(mov '1 a4)
(jmp outpos)
104
(eval ())
(pop a1)
(mov 'edit-print-query a2)
(jmp #:llcp:exit)
))
(loader'((entry #:edit:editor:exp-eval subr1)
(push a1)
(mov nil a3)
(mov a1 a2)
(mov '40 a1)
(jcall trap-edit)
(mov (cvalq #:sys-package:itsoft) a2)
(mov '#:edit:editor a1)
(jcall cons)
(push 't)
(push (& 1))
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push (cvalq #:edit:editor:cure))
(mov (& 2) (cvalq #:edit:editor:cure))
(push (cvalq #:system:redef-flag))
(mov (& 4) (cvalq #:system:redef-flag))
(push '3)
(push '(#:sys-package:itsoft #:edit:editor:cure #:system:redef-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'eoc)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(jcall read)
(push a1)
(mov '1 a4)
(jmp eval)
102
(eval ())
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(push a1)
(mov nil a2)
(mov (cvalq #:edit:editor:cure) a1)
(jcall edit-command-redisplay)
(pop a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:redef-flag))
(mov (& 7) (cvalq #:edit:editor:cure))
(mov (& 8) (cvalq #:sys-package:itsoft))
(adjstk '12)
(return)
))
(loader'((entry #:edit:editor:exp-eval-print subr1)
(push a1)
(mov nil a3)
(mov a1 a2)
(mov '40 a1)
(jcall trap-edit)
(mov (cvalq #:sys-package:itsoft) a2)
(mov '#:edit:editor a1)
(jcall cons)
(push 't)
(push (& 1))
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push (cvalq #:edit:editor:cure))
(mov (& 2) (cvalq #:edit:editor:cure))
(push (cvalq #:system:redef-flag))
(mov (& 4) (cvalq #:system:redef-flag))
(push '3)
(push '(#:sys-package:itsoft #:edit:editor:cure #:system:redef-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'eoc)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(jcall read)
(push a1)
(mov '1 a4)
(jmp eval)
102
(eval ())
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(push a1)
(mov nil a2)
(mov (cvalq #:edit:editor:cure) a1)
(jcall edit-command-redisplay)
(pop a2)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:redef-flag))
(mov (& 7) (cvalq #:edit:editor:cure))
(mov (& 8) (cvalq #:sys-package:itsoft))
(adjstk '11)
(mov (& 0) a1)
(adjstk '1)
(jmp edit-print-query)
))
(bind-to-key 1 5)
(bind-to-key 2 7)
(bind-to-key 4 14)
(bind-to-key 5 6)
(bind-to-key 6 8)
(bind-to-key 8 15)
(bind-to-key 11 29)
(bind-to-key 13 28)
(bind-to-key 14 10)
(bind-to-key 15 27)
(bind-to-key 16 9)
(bind-to-key 18 120)
(bind-to-key 19 119)
(bind-to-key 20 41)
(bind-to-key 22 105)
(bind-to-key 23 36)
(bind-to-key 24 115)
(bind-to-key 25 25)
(bind-to-key 26 104)
(bind-to-key 27 114)
(bind-to-key 127 15)
(bind-to-ekey 98 21)
(bind-to-ekey 100 17)
(bind-to-ekey 101 124)
(bind-to-ekey 102 20)
(bind-to-ekey 104 18)
(bind-to-ekey 110 122)
(bind-to-ekey 112 125)
(bind-to-ekey 115 119)
(bind-to-ekey 118 106)
(bind-to-ekey 119 35)
(bind-to-ekey 122 103)
(bind-to-ekey 41 44)
(bind-to-ekey 40 45)
(bind-to-ekey 62 4)
(bind-to-ekey 60 3)
(bind-to-ekey 44 110)
(bind-to-ekey 46 111)
(bind-to-ekey 33 107)
(bind-to-ekey 27 24)
(bind-to-xkey 115 121)
(bind-to-xkey 82 42)
(bind-to-xkey 87 43)
(bind-to-xkey 1 33)
(bind-to-xkey 9 118)
(bind-to-xkey 18 116)
(bind-to-xkey 23 117)
(bind-to-xkey 24 34)
(loader '((end)))
