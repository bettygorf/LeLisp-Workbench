(loader '((title |debug.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'debug)))
(defvar #:sys-package:colon '#:system:debug)
(if (not (featurep 'virtty)) (progn (initty)))
(defvar #:system:debug-line 5)
(defvar #:system:stack-depth 5)
(defvar #:system:debug ())
(#:messages:put-message '#:system:debug:errnobloc 'french '"bloc inconnu" 'defmessage)
(#:messages:put-message '#:system:debug:errnobloc 'english '"unknown block" 'defmessage)
'#:system:debug:errnobloc
(loader'((fentry printstack nsubr)
(entry printstack nsubr)
(jcall #:llcp:nlist)
(push a1)
(bfcons a1 101)
(bfcons (cdr a1) 101)
(mov (cdr a1) a4)
(mov (car a4) a4)
(bra 102)
101
(jcall cstack)
(mov a1 a4)
102
(push a4)
(bfcons (& 1) 103)
(push (@ 105))
(mov (& 2) a3)
(push (car a3))
(mov a4 a1)
(jcall length)
(push a1)
(mov '2 a4)
(jmp min)
105
(eval ())
(mov a1 a3)
(bra 104)
103
(mov a4 a1)
(jcall length)
(mov a1 a3)
104
(push a3)
(mov (& 1) a1)
(jcall length)
(push a1)
(push nil)
(push (& 3))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(call #:system:debug:is-hidden-block)
(btnil a1 109)
(mov (& 3) a1)
(jcall |1-|)
(mov a1 (& 3))
109
(adjstk '1)
(bra 106)
107
(adjstk '1)
(push (@ 110))
(push (& 3))
(push (& 3))
(mov '2 a4)
(jmp min)
110
(eval ())
(mov a1 (& 2))
(mov (& 1) a1)
(jcall |1+|)
(mov a1 (& 1))
111
(cnble (& 2) '0 112)
(mov (& 3) a4)
(mov (car a4) (& 0))
(mov (cdr a4) (& 3))
(mov (& 0) a1)
(call #:system:debug:is-hidden-block)
(bfnil a1 111)
(mov (& 1) a1)
(jcall |1-|)
(mov a1 (& 1))
(mov (& 2) a1)
(jcall |1-|)
(mov a1 (& 2))
(push (@ 115))
(push '"   [stack ")
(mov '1 a4)
(jmp prin)
115
(eval ())
(push (@ 118))
(push (& 2))
(push '100)
(mov '2 a4)
(jmp <)
118
(eval ())
(btnil a1 117)
(push (@ 119))
(push '32)
(mov '1 a4)
(jmp princn)
119
(eval ())
117
(push (@ 122))
(push (& 2))
(push '10)
(mov '2 a4)
(jmp <)
122
(eval ())
(btnil a1 121)
(push (@ 123))
(push '32)
(mov '1 a4)
(jmp princn)
123
(eval ())
121
(push (@ 124))
(push (& 2))
(push '"]   (")
(mov '2 a4)
(jmp prin)
124
(eval ())
(mov (& 0) a1)
(mov (car a1) a1)
(cabne a1 '1 126)
(push (@ 127))
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:system:debug:findfn)
(mov a1 a4)
(bfnil a4 128)
(mov 'let a4)
128
(push a4)
(mov '1 a4)
(jmp prin)
127
(eval ())
(bra 125)
126
(cabne a1 '2 129)
(push (@ 130))
(push 'flet)
(push '" ")
(mov (& 3) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '3 a4)
(jmp prin)
130
(eval ())
(bra 125)
129
(cabne a1 '3 131)
(push (@ 132))
(push 'tag)
(push '" ")
(mov (& 3) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '3 a4)
(jmp prin)
132
(eval ())
(bra 125)
131
(cabne a1 '4 133)
(push (@ 134))
(push 'itsoft)
(push '" ")
(mov (& 3) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '3 a4)
(jmp prin)
134
(eval ())
(bra 125)
133
(cabne a1 '5 135)
(push (@ 136))
(push 'lock)
(push '" ")
(mov (& 3) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall symbolp)
(mov a1 a4)
(bfnil a4 137)
(mov (& 3) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:system:debug:findfn)
(mov a1 a4)
(bfnil a4 137)
(mov '"(lambda ...)" a4)
137
(push a4)
(mov '3 a4)
(jmp prin)
136
(eval ())
(bra 125)
135
(cabne a1 '6 138)
(push (@ 139))
(push 'protect)
(mov '1 a4)
(jmp prin)
139
(eval ())
(bra 125)
138
(cabne a1 '7 140)
(push (@ 141))
(push 'sys-protect)
(mov '1 a4)
(jmp prin)
141
(eval ())
(bra 125)
140
(cabne a1 '8 142)
(push (@ 143))
(push 'schedule)
(mov '1 a4)
(jmp prin)
143
(eval ())
(bra 125)
142
(cabne a1 '9 144)
(push (@ 145))
(push 'tagbody)
(mov '1 a4)
(jmp prin)
145
(eval ())
(bra 125)
144
(cabne a1 '10 146)
(push (@ 147))
(push 'block)
(mov '1 a4)
(jmp prin)
147
(eval ())
(bra 125)
146
(cabne a1 '11 148)
(bra 125)
148
(mov (& 0) a3)
(mov (car a3) a3)
(mov '#:system:debug:errnobloc a2)
(mov 'printstack a1)
(jcall printerror)
125
(push (@ 150))
(push '" ...)")
(mov '1 a4)
(jmp print)
150
(eval ())
(bra 111)
112
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:system:debug:is-hidden-block subr1)
(push a1)
(mov '7 a2)
(mov (car a1) a1)
(jcall eq)
(bfnil a1 101)
(mov (& 0) a1)
(mov '11 a2)
(mov (car a1) a1)
(jcall eq)
(bfnil a1 101)
(mov (& 0) a1)
(mov '4 a2)
(mov (car a1) a1)
(adjstk '1)
(jmp eq)
101
(adjstk '1)
(return)
))
(putprop 'debug 'parano '#:complice:fvar)
(loader'((fentry debug fsubr)
(entry debug fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ debug))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btcons a1 101)
(mov (cvalq #:system:debug) a1)
(bra 102)
101
(mov (car a1) a4)
(cabeq a4 't 105)
(cabne a4 '() 103)
105
(mov (car a1) (cvalq #:system:debug))
(mov (car a1) a1)
(bra 102)
103
(push (car a1))
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push '1)
(push '(#:system:debug))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 106))
(push (car a1))
(mov '1 a4)
(jmp eval)
106
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug))
(adjstk '8)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(putprop 'break 'parano '#:complice:fvar)
(loader'((fentry break subr0)
(entry break subr0)
(btnil (cvalq #:system:debug) 101)
(mov (cvalq #:sys-package:itsoft) a2)
(mov '#:system:debug a1)
(jcall remq)
(mov a1 a2)
(mov '#:system:debug a1)
(jcall cons)
(push 't)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push (cvalq #:system:debug))
(mov (& 2) (cvalq #:system:debug))
(push '2)
(push '(#:sys-package:itsoft #:system:debug))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '0 a1)
(jcall clockalarm)
(push (@ 103))
(push 'continue)
(push dlink)
(push tag)
(stack dlink)
(push (@ 104))
(mov '0 a4)
(jmp inchan)
104
(eval ())
(push a1)
(push (@ 105))
(mov '0 a4)
(jmp outchan)
105
(eval ())
(push (cvalq #:with:arg1))
(mov a1 (cvalq #:with:arg1))
(push (cvalq #:with:arg0))
(mov (& 2) (cvalq #:with:arg0))
(push '2)
(push '(#:with:arg1 #:with:arg0))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 106))
(push dlink)
(push prot)
(stack dlink)
(push (@ 108))
(push nil)
(mov '1 a4)
(jmp inchan)
108
(eval ())
(push (@ 109))
(push nil)
(mov '1 a4)
(jmp outchan)
109
(eval ())
(jcall cstack)
(call #:system:debug:break-loop)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 107) a3)
106
(push a3)
(push a2)
(push (@ 110))
(push (cvalq #:with:arg1))
(mov '1 a4)
(jmp outchan)
110
(eval ())
(push (@ 111))
(push (cvalq #:with:arg0))
(mov '1 a4)
(jmp inchan)
111
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
107
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:with:arg0))
(mov (& 7) (cvalq #:with:arg1))
(adjstk '9)
(mov nil a1)
(mov '#:system:error-tag a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug))
(mov (& 7) (cvalq #:sys-package:itsoft))
(adjstk '9)
(return)
101
(mov nil a1)
(mov '#:system:error-tag a2)
(jmp #:llcp:exit)
))
(loader'((fentry debug-command subr1)
(entry debug-command subr1)
(mov (cvalq #:system:debug:commands) a2)
(jcall cassq)
(mov (cdr a1) a1)
(jmp eprogn)
))
(defvar #:system:debug:current-form)
(defvar #:system:debug:current-function)
(defvar #:system:debug:current-error-form)
(defvar #:system:debug:error-message)
(defvar #:system:debug:break-number 0)
(defvar #:system:debug:resetfn-alist)
(loader'((entry #:system:debug:break-loop subr1)
(push (cvalq #:system:debug:stack))
(mov a1 (cvalq #:system:debug:stack))
(push '1)
(push '(#:system:debug:stack))
(push (@ #:system:debug:break-loop))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bra 101)
(fentry #:system:debug:break-loop:g113 subr1)
(entry #:system:debug:break-loop:g113 subr1)
(push a1)
(jcall valfn)
(cabeq a1 '0 102)
(mov 'resetfn a2)
(mov (& 0) a1)
(jcall getprop)
(btnil a1 102)
(mov 'resetfn a2)
(mov (& 0) a1)
(jcall getprop)
(mov (& 0) a2)
(mov (cdr a1) a1)
(jcall cons)
(adjstk '1)
(jmp ncons)
102
(mov nil a1)
(adjstk '1)
(return)
101
(mov '#:system:debug:break-loop:g113 a1)
(jcall mapcoblist)
(mov (cvalq #:system:debug:break-number) a4)
(plus '1 a4)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:system:debug:break-number))
(mov a4 (cvalq #:system:debug:break-number))
(push (cvalq #:system:debug:resetfn-alist))
(mov a1 (cvalq #:system:debug:resetfn-alist))
(push (cvalq current-window))
(mov (& 3) (cvalq current-window))
(push (cvalq #:system:debug:current-error-form))
(mov (& 5) (cvalq #:system:debug:current-error-form))
(push (cvalq #:system:debug:current-form))
(mov (& 7) (cvalq #:system:debug:current-form))
(push (cvalq #:system:debug:current-function))
(mov (& 9) (cvalq #:system:debug:current-function))
(push (cvalq #:system:debug:error-message))
(mov (& 11) (cvalq #:system:debug:error-message))
(push '7)
(push '(#:system:debug:break-number #:system:debug:resetfn-alist current-window #:system:debug:current-error-form #:system:debug:current-form #:system:debug:current-function #:system:debug:error-message))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(mov 'window a1)
(jcall featurep)
(btnil a1 107)
(push (@ 108))
(mov '0 a4)
(jmp current-window)
108
(eval ())
(btnil a1 107)
(push (@ 109))
(mov '0 a4)
(jmp current-window)
109
(eval ())
(mov a1 (cvalq current-window))
(push (@ 110))
(mov (cvalq #:system:debug:break-number) a1)
(call #:system:debug:create-break-window)
(push a1)
(mov '1 a4)
(jmp current-window)
110
(eval ())
107
(push (@ 111))
(mov '0 a4)
(jmp prompt)
111
(eval ())
(push (cvalq #:with:arg0))
(mov a1 (cvalq #:with:arg0))
(push '1)
(push '(#:with:arg0))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 112))
(push dlink)
(push prot)
(stack dlink)
(push (@ 114))
(cnble (cvalq #:system:debug:break-number) '1 115)
(push (@ 117))
(push (cvalq #:system:debug:break-number))
(push '">? ")
(mov '2 a4)
(jmp catenate)
117
(eval ())
(mov a1 a4)
(bra 116)
115
(mov '">? " a4)
116
(push a4)
(mov '1 a4)
(jmp prompt)
114
(eval ())
(mov (cvalq #:system:debug:stack) a1)
(call #:system:debug:stack-in-error)
(call #:system:debug:init-stack)
(mov '101 a1)
(jcall debug-command)
(mov '46 a1)
(jcall debug-command)
(push (@ 118))
(push dlink)
(push prot)
(stack dlink)
(push (@ 120))
(push 'break)
(push dlink)
(push tag)
(stack dlink)
121
(mov nil a2)
(mov 'toplevel a1)
(jcall itsoft)
(bra 121)
122
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
120
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 119) a3)
118
(push a3)
(push a2)
(push (@ 123))
(push '#:system:debug)
(push dlink)
(push tag)
(stack dlink)
124
(jcall #:system:debug:up-stack)
(bra 124)
125
(mov (& 1) dlink)
(adjstk '4)
123
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
119
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 113) a3)
112
(push a3)
(push a2)
(push (@ 126))
(push (cvalq #:with:arg0))
(mov '1 a4)
(jmp prompt)
126
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
113
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:with:arg0))
(adjstk '7)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(mov 'window a1)
(jcall featurep)
(btnil a1 128)
(push (@ 129))
(mov '0 a4)
(jmp current-window)
129
(eval ())
(btnil a1 128)
(push (@ 130))
(mov '0 a4)
(jmp current-window)
130
(eval ())
(jcall kill-window)
(push (@ 131))
(push (cvalq current-window))
(mov '1 a4)
(jmp current-window)
131
(eval ())
128
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug:error-message))
(mov (& 7) (cvalq #:system:debug:current-function))
(mov (& 8) (cvalq #:system:debug:current-form))
(mov (& 9) (cvalq #:system:debug:current-error-form))
(mov (& 10) (cvalq current-window))
(mov (& 11) (cvalq #:system:debug:resetfn-alist))
(mov (& 12) (cvalq #:system:debug:break-number))
(adjstk '18)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:stack))
(adjstk '7)
(return)
))
(putprop '#:system:debug:toplevel 'parano '#:complice:fvar)
(loader'((fentry #:system:debug:toplevel subr0)
(entry #:system:debug:toplevel subr0)
(push (@ 101))
(push '#:system:debug)
(push dlink)
(push tag)
(stack dlink)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 102))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 103))
(push '"= ")
(push (@ 104))
(jcall read)
(push a1)
(mov '1 a4)
(jmp eval)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp print)
103
(eval ())
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((fentry #:system:debug:bol subr0)
(entry #:system:debug:bol subr0)
(mov nil a3)
(mov 'bol a2)
(mov '#:system:debug a1)
(jcall super-itsoft)
(push (@ 101))
(mov '0 a4)
(jmp inbuf)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp inbuf)
102
(eval ())
(hbxmov a1 '0 a4)
(push a4)
(mov (cvalq #:system:debug:commands) a2)
(mov a4 a1)
(jcall assq)
(btnil a1 103)
(push (@ 105))
(mov '0 a4)
(jmp inmax)
105
(eval ())
(cabne '3 a1 103)
(hbmovx '13 (& 1) '0)
(hbmovx '10 (& 1) '1)
(mov (& 0) a1)
(adjstk '2)
(jmp debug-command)
103
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:system:debug:create-break-window subr1)
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp current-display)
103
(eval ())
(bfnil a1 102)
(push (@ 104))
(mov '0 a4)
(jmp bitprologue)
104
(eval ())
102
(push (@ 105))
(push '#:window:tty)
(push (@ 106))
(mov '0 a4)
(jmp bitxmax)
106
(eval ())
(quo '3 a1)
(push a1)
(mov (& 3) a4)
(times '2 a4)
(push a4)
(jcall font-height)
(pop a4)
(times a1 a4)
(push a4)
(push (@ 107))
(mov '0 a4)
(jmp bitxmax)
107
(eval ())
(mov '3 a3)
(mov '2 a2)
(jcall scale)
(push a1)
(push (@ 108))
(mov '0 a4)
(jmp bitymax)
108
(eval ())
(mov '3 a3)
(mov '2 a2)
(jcall scale)
(push a1)
(push (@ 109))
(push '"Le-Lisp : Break Loop #")
(mov (& 8) a1)
(jcall string)
(push a1)
(mov '2 a4)
(jmp catenate)
109
(eval ())
(push a1)
(push '1)
(push '1)
(mov '8 a4)
(jmp create-window)
105
(eval ())
(push a1)
(mov (cvalq #:bitmap:name) a1)
(cabne a1 'X11 111)
(push nil)
112
(push (@ 115))
(mov '0 a4)
(jmp read-event)
115
(eval ())
(mov a1 (& 0))
(hpxmov a1 '0 a4)
(cabne a4 'map-window 112)
(hpxmov a1 '1 a4)
(cabeq a4 (& 1) 113)
(bra 112)
113
(adjstk '1)
(bra 110)
111
(cabeq a1 'windows 117)
(cabne a1 'pm 110)
117
(push nil)
118
(push (@ 121))
(mov '0 a4)
(jmp read-event)
121
(eval ())
(mov a1 (& 0))
(hpxmov a1 '0 a4)
(cabne a4 'repaint-window-event 118)
(hpxmov a1 '1 a4)
(cabeq a4 (& 1) 119)
(bra 118)
119
(adjstk '1)
110
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:system:debug:find-syserror subr1)
(btnil a1 101)
(mov (car a1) a4)
(cabne '4 (car a4) 103)
(mov (car a1) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(cabne 'syserror (car a3) 103)
(return)
103
(mov (cdr a1) a1)
(bra #:system:debug:find-syserror)
101
(mov nil a1)
(return)
))
(loader'((entry #:system:debug:find-break subr1)
(push a1)
(btnil a1 101)
(mov (car a1) a4)
(cabne '1 (car a4) 103)
(mov 'break a1)
(jcall typefn)
(cabne a1 'expr 105)
(mov 'break a1)
(jcall valfn)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(jcall eq)
(mov a1 a3)
(bra 106)
105
(mov 'break a1)
(jcall valfn)
(push a1)
(mov (& 1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall loc)
(mov a1 a2)
(pop a1)
(jcall equal)
(mov a1 a3)
106
(btnil a3 103)
(mov (& 0) a1)
(adjstk '1)
(return)
103
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:system:debug:find-break)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:system:debug:cut-to-toplevel subr1)
(push a1)
(call #:system:debug:is-at-toplevel)
(btnil a1 101)
(mov '(()) a2)
(mov (& 0) a1)
(adjstk '1)
(jmp displace)
101
(push nil)
103
(mov (& 1) a4)
(btnil (cdr a4) 104)
(mov (cdr a4) a1)
(call #:system:debug:is-at-toplevel)
(bfnil a1 104)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 103)
104
(bfcons (& 1) 105)
(mov (& 1) a4)
(mov nil (cdr a4))
(mov a4 a1)
(adjstk '2)
(return)
105
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:system:debug:is-at-toplevel subr1)
(push a1)
(mov (car a1) a2)
(mov (car a2) a2)
(mov '4 a1)
(jcall eq)
(btnil a1 102)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov 'toplevel a1)
(jcall eq)
102
(bfnil a1 101)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(mov '7 a1)
(jcall eq)
(btnil a1 101)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(btnil a1 101)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(mov '7 a1)
(jcall eq)
(bfnil a1 104)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(mov '5 a1)
(jcall eq)
104
(btnil a1 101)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(btnil a1 101)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(mov '3 a1)
(jcall eq)
(btnil a1 105)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov '#:system:error-tag a1)
(jcall eq)
105
(btnil a1 101)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(btnil a1 101)
(mov (& 0) a4)
(mov (car a4) a4)
(cabne '11 (car a4) 106)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(bra 107)
106
(mov 't a1)
107
(btnil a1 101)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(mov '3 a1)
(jcall eq)
(btnil a1 108)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov '#:system:toplevel-tag a1)
(jcall eq)
108
(btnil a1 101)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(btnil a1 101)
(mov (& 0) a4)
(mov (car a4) a4)
(cabne '1 (car a4) 109)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(bra 110)
109
(mov 't a1)
110
(btnil a1 101)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(mov '4 a1)
(jcall eq)
(btnil a1 101)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov 'toplevel a1)
(adjstk '1)
(jmp eq)
101
(adjstk '1)
(return)
))
(loader'((entry #:system:debug:stack-in-error subr1)
(push a1)
(call #:system:debug:cut-to-toplevel)
(mov (& 0) a1)
(call #:system:debug:find-syserror)
(mov a1 a4)
(bfnil a4 101)
(mov (& 0) a1)
(call #:system:debug:find-break)
(mov a1 a4)
101
(push a4)
(mov (car a4) a3)
(cabne '1 (car a3) 102)
(mov 'break a1)
(jcall typefn)
(cabne a1 'expr 104)
(mov 'break a1)
(jcall valfn)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(jcall eq)
(mov a1 a2)
(bra 105)
104
(mov 'break a1)
(jcall valfn)
(push a1)
(mov (& 1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall loc)
(mov a1 a2)
(pop a1)
(jcall equal)
(mov a1 a2)
105
(btnil a2 102)
(mov '(break break ()) (cvalq #:system:debug:error-message))
(mov '(break) (cvalq #:system:debug:current-error-form))
(bra 103)
102
(mov (& 0) a4)
(mov (car a4) a4)
(cabne '4 (car a4) 106)
(mov (& 0) a2)
(mov (car a2) a2)
(mov '10 a1)
(jcall nth)
(mov a1 (cvalq #:system:debug:error-message))
(cabne 'step (car a1) 108)
(mov (cdr a1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(bra 109)
108
(mov (& 0) a2)
(mov (car a2) a2)
(mov '4 a1)
(jcall nth)
(mov a1 a4)
109
(mov a4 (cvalq #:system:debug:current-error-form))
(bra 103)
106
(mov '(debug errerr ()) (cvalq #:system:debug:error-message))
103
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (& 0) a2)
(mov '(cstep unstep step #:step:steploop #:step:stepeval) a1)
(adjstk '2)
(bra #:system:debug:remove-fn)
))
(loader'((entry #:system:debug:remove-fn subr2)
(push a2)
(push a1)
(mov nil a1)
(jcall cons)
(mov a1 (& 1))
(push (& 0))
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall valfn)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 (& 0))
(push (& 1))
(push (& 2))
103
(mov (& 0) a1)
(mov (cdr a1) a1)
(call #:system:debug:find-function)
(mov a1 (& 0))
(btnil a1 104)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (& 2) a2)
(mov (car a1) a1)
(call #:system:debug:is-in-lvalfn)
(bfnil a1 105)
(mov (& 0) (& 3))
(bra 103)
105
(mov (& 0) a4)
(mov (& 3) a3)
(mov (cdr a4) (cdr a3))
(bra 103)
104
(mov (& 1) (& 3))
(mov (& 1) a1)
(mov (cdr a1) a1)
(adjstk '4)
(return)
))
(loader'((entry #:system:debug:is-in-lvalfn subr2)
(push a1)
(push a2)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 3) a2)
(mov (& 0) a1)
(jcall eq)
(mov a1 a4)
(bfnil a4 103)
(mov (& 3) a1)
(jcall loc)
(mov (& 0) a2)
(jcall equal)
(mov a1 a4)
103
(adjstk '1)
(mov a4 (& 0))
(bfnil a4 102)
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((entry #:system:debug:init-stack subr1)
(push a1)
(mov (car a1) a1)
(call #:system:debug:is-a-struct-access)
(btnil a1 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
102
(mov (& 0) a1)
(jcall ncons)
(mov a1 (cvalq #:system:debug:current-form))
(mov (& 0) a1)
(call #:system:debug:find-function)
(jcall ncons)
(mov a1 (cvalq #:system:debug:current-function))
(adjstk '1)
(return)
))
(defvar #:system:debug:commands '((118 "show variables" (#:system:debug:print-current-variables)) (104 "print top of stack" (#:system:debug:printstack #:system:stack-depth)) (72 "print complete stack" (#:system:debug:printstack)) (101 "show error message" (#:system:debug:print-error)) (46 "show current stack frame" (#:system:debug:print-current-function)) (43 "down stack" (#:system:debug:down-stack) (#:system:debug:print-current-function)) (45 "up stack" (#:system:debug:up-stack) (#:system:debug:print-current-function)) (116 "back to toplevel" (exit #:system:toplevel-tag)) (113 "exit inspection loop" (exit break)) (114 "resume and correct error" (#:system:debug:continue)) (99 "continue" (exit continue)) (122 "step traced functions" (setq #:trace:step-in-trace-flag t) (#:system:debug:continue)) (63 "list commands" (#:system:debug:help))))
(loader'((fentry #:system:debug:printstack nsubr)
(entry #:system:debug:printstack nsubr)
(jcall #:llcp:nlist)
(push a1)
(btnil a1 101)
(mov (car a1) (& 0))
(bra 102)
101
(mov (cvalq #:system:debug:current-form) a1)
(mov (car a1) a1)
(jcall length)
(mov a1 (& 0))
102
(push (@ 103))
(push (& 1))
(mov (cvalq #:system:debug:current-form) a4)
(push (car a4))
(mov '2 a4)
(jmp printstack)
103
(eval ())
(adjstk '1)
(return)
))
(putprop '#:system:debug:print-current-variables 'parano '#:complice:fvar)
(loader'((fentry #:system:debug:print-current-variables subr0)
(entry #:system:debug:print-current-variables subr0)
(mov (cvalq #:system:debug:current-form) a1)
(mov (car a1) a1)
(bra #:system:debug:print-variables)
))
(loader'((entry #:system:debug:print-variables subr1)
(push (cvalq #:system:debug:s))
(mov a1 (cvalq #:system:debug:s))
(push '1)
(push '(#:system:debug:s))
(push (@ #:system:debug:print-variables))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (car a1) a1)
(call #:system:debug:has-function-definition)
(btnil a1 101)
(mov (cvalq #:system:debug:s) a2)
(mov (car a2) a2)
(mov '3 a1)
(jcall nth)
(call #:system:debug:print-arguments)
(bra 102)
101
(mov (cvalq #:system:debug:s) a4)
(mov (car a4) a4)
(cabne '1 (car a4) 103)
(mov (cvalq #:system:debug:s) a2)
(mov (car a2) a2)
(mov '3 a1)
(jcall nth)
(call #:system:debug:print-arguments)
(mov (cvalq #:system:debug:s) a1)
(mov (car a1) a1)
(call #:system:debug:bind/unbind)
(mov (cvalq #:system:debug:s) a1)
(mov (cdr a1) a1)
(call #:system:debug:print-variables)
(mov (cvalq #:system:debug:s) a1)
(mov (car a1) a1)
(call #:system:debug:bind/unbind)
(bra 102)
103
(btnil (cvalq #:system:debug:s) 105)
(mov (cvalq #:system:debug:s) a1)
(mov (cdr a1) a1)
(call #:system:debug:print-variables)
(bra 102)
105
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:s))
(adjstk '7)
(return)
))
(loader'((entry #:system:debug:print-arguments subr1)
(push (cvalq #:system:debug:larg))
(mov a1 (cvalq #:system:debug:larg))
(push '1)
(push '(#:system:debug:larg))
(push (@ #:system:debug:print-arguments))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '&nobind a2)
(jcall eq)
(bfnil a1 102)
(btnil (cvalq #:system:debug:larg) 103)
(mov nil a1)
(bra 102)
103
(mov 't a1)
102
(bfnil a1 101)
(bfsymb (cvalq #:system:debug:larg) 105)
(push (@ 107))
(push '" ")
(push (cvalq #:system:debug:larg))
(push '"=")
(mov (cvalq #:system:debug:larg) a4)
(push (cval a4))
(mov '4 a4)
(jmp print)
107
(eval ())
(bra 101)
105
(bfcons (cvalq #:system:debug:larg) 108)
(mov (cvalq #:system:debug:larg) a1)
(mov (car a1) a1)
(call #:system:debug:print-arguments)
(mov (cvalq #:system:debug:larg) a1)
(mov (cdr a1) a1)
(call #:system:debug:print-arguments)
(bra 101)
108
(mov nil a1)
101
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:larg))
(adjstk '7)
(return)
))
(putprop '#:system:debug:print-error 'parano '#:complice:fvar)
(loader'((fentry #:system:debug:print-error subr0)
(entry #:system:debug:print-error subr0)
(push (@ 101))
(push 'printerror)
(push (cvalq #:system:debug:error-message))
(mov '2 a4)
(jmp apply)
101
(eval ())
(mov (cvalq #:system:debug:error-message) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(cabeq a1 'errwna 104)
(cabeq a1 'errbpa 104)
(cabne a1 'errilb 103)
104
(mov (cvalq #:system:debug:error-message) a1)
(mov (car a1) a1)
(call #:system:debug:getdef)
(push (@ 105))
(push (car a1))
(mov (cdr a1) a4)
(push (car a4))
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:system:debug:hilited:make)
(push a1)
(mov '3 a4)
(jmp list)
105
(eval ())
(bra #:system:debug:print-filtered)
103
(mov nil a1)
(return)
))
(putprop '#:system:debug:print-current-function 'parano '#:complice:fvar)
(loader'((fentry #:system:debug:print-current-function subr0)
(entry #:system:debug:print-current-function subr0)
(mov (cvalq #:system:debug:current-function) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:system:debug:findfn)
(call #:system:debug:getdef)
(push (cvalq current-definition))
(mov a1 (cvalq current-definition))
(push '1)
(push '(current-definition))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil a1 101)
(call #:system:debug:current-expr)
(mov (cvalq current-definition) a2)
(call #:system:debug:hilite-expr)
(call #:system:debug:print-filtered)
(bra 102)
101
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 6) (cvalq current-definition))
(adjstk '7)
(return)
))
(putprop '#:system:debug:down-stack 'parano '#:complice:fvar)
(loader'((fentry #:system:debug:down-stack subr0)
(entry #:system:debug:down-stack subr0)
(mov (cvalq #:system:debug:current-function) a4)
(mov (car a4) a4)
(push (cdr a4))
(push (cvalq #:system:debug:next-form))
(mov (& 1) (cvalq #:system:debug:next-form))
(push '1)
(push '(#:system:debug:next-form))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:system:debug:next-form) a1)
(call #:system:debug:find-function)
(push (cvalq #:system:debug:next-function))
(mov a1 (cvalq #:system:debug:next-function))
(push '1)
(push '(#:system:debug:next-function))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil a1 101)
(mov nil a1)
(mov '#:system:debug a2)
(jmp #:llcp:exit)
101
(mov (cvalq #:system:debug:current-form) a2)
(mov (cvalq #:system:debug:next-form) a1)
(jcall cons)
(mov a1 (cvalq #:system:debug:current-form))
(mov (cvalq #:system:debug:current-function) a2)
(mov (cvalq #:system:debug:next-function) a1)
(jcall cons)
(mov a1 (cvalq #:system:debug:current-function))
(mov (cvalq #:system:debug:current-form) a4)
(mov (cdr a4) a4)
(push (car a4))
(push (cvalq #:system:debug:previous-form))
(mov (& 1) (cvalq #:system:debug:previous-form))
(push '1)
(push '(#:system:debug:previous-form))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
103
(mov (cvalq #:system:debug:current-form) a4)
(cabeq (cvalq #:system:debug:previous-form) (car a4) 104)
(mov (cvalq #:system:debug:previous-form) a1)
(mov (cdr a1) (cvalq #:system:debug:previous-form))
(mov (car a1) a1)
(call #:system:debug:bind/unbind)
(bra 103)
104
(mov nil a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug:previous-form))
(adjstk '8)
102
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug:next-function))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug:next-form))
(adjstk '8)
(return)
))
(putprop '#:system:debug:up-stack 'parano '#:complice:fvar)
(loader'((fentry #:system:debug:up-stack subr0)
(entry #:system:debug:up-stack subr0)
(mov (cvalq #:system:debug:current-function) a4)
(bfnil (cdr a4) 101)
(mov nil a1)
(mov '#:system:debug a2)
(jmp #:llcp:exit)
101
(mov (cvalq #:system:debug:current-form) a1)
(mov (cdr a1) a1)
(mov (cvalq #:system:debug:current-form) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:system:debug:up-frame-list)
(push (cvalq #:system:debug:rebind-frames))
(mov a1 (cvalq #:system:debug:rebind-frames))
(push '1)
(push '(#:system:debug:rebind-frames))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:system:debug:current-function) a4)
(mov (cdr a4) (cvalq #:system:debug:current-function))
(mov (cvalq #:system:debug:current-form) a4)
(mov (cdr a4) (cvalq #:system:debug:current-form))
103
(btnil (cvalq #:system:debug:rebind-frames) 104)
(mov (cvalq #:system:debug:rebind-frames) a1)
(mov (cdr a1) (cvalq #:system:debug:rebind-frames))
(mov (car a1) a1)
(call #:system:debug:bind/unbind)
(bra 103)
104
(mov nil a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug:rebind-frames))
(adjstk '7)
(return)
))
(loader'((entry #:system:debug:up-frame-list subr2)
(push a2)
(push a1)
(push nil)
101
(mov (& 1) a4)
(mov (& 2) a3)
(cabeq (car a4) (car a3) 102)
(mov (cdr a4) (& 1))
(mov (& 0) a2)
(mov (car a4) a1)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(putprop '#:system:debug:continue 'parano '#:complice:fvar)
(loader'((fentry #:system:debug:continue subr0)
(entry #:system:debug:continue subr0)
(mov (cvalq #:system:debug:error-message) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(cabne a1 'break 102)
(mov nil a1)
(mov 'continue a2)
(jmp #:llcp:exit)
102
(cabne a1 'errudv 103)
(push (@ 104))
(push (@ 105))
(mov '0 a4)
(jmp prompt)
105
(eval ())
(push a1)
(push '"(setq ")
(mov (cvalq #:system:debug:error-message) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(push '" ")
(mov '4 a4)
(jmp prinflush)
104
(eval ())
(push (@ 106))
(mov '0 a4)
(jmp prompt)
106
(eval ())
(push (cvalq #:with:arg0))
(mov a1 (cvalq #:with:arg0))
(push '1)
(push '(#:with:arg0))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 107))
(push dlink)
(push prot)
(stack dlink)
(push (@ 109))
(push '"")
(mov '1 a4)
(jmp prompt)
109
(eval ())
(push (@ 110))
(push 'setq)
(mov (cvalq #:system:debug:error-message) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(jcall read)
(push a1)
(mov '3 a4)
(jmp list)
110
(eval ())
(push (cvalq form))
(mov a1 (cvalq form))
(push '1)
(push '(form))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 111))
(push a1)
(mov '1 a4)
(jmp eval)
111
(eval ())
(mov 'continue a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(mov (& 6) (cvalq form))
(adjstk '7)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 108) a3)
107
(push a3)
(push a2)
(push (@ 112))
(push (cvalq #:with:arg0))
(mov '1 a4)
(jmp prompt)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
108
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:with:arg0))
(adjstk '7)
(return)
103
(cabne a1 'errudf 113)
(push (@ 114))
(push '"Function ")
(mov '1 a4)
(jmp prinflush)
114
(eval ())
(jcall read)
(mov 'continue a2)
(jmp #:llcp:exit)
113
(push (@ 116))
(push '"This error can not be resumed")
(mov '1 a4)
(jmp print)
116
(eval ())
(return)
))
(loader'((fentry #:system:debug:help subr0)
(entry #:system:debug:help subr0)
(push (cvalq #:system:debug:commands))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(push (@ 103))
(push '"; ")
(mov (& 3) a1)
(jcall ascii)
(push a1)
(push '":   ")
(push (& 4))
(mov '4 a4)
(jmp print)
103
(eval ())
(adjstk '2)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:system:debug:bind/unbind subr1)
(push (cvalq #:system:debug:frame))
(mov a1 (cvalq #:system:debug:frame))
(push '1)
(push '(#:system:debug:frame))
(push (@ #:system:debug:bind/unbind))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(cabne '1 (car a1) 101)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(jcall nreverse)
(push (cvalq #:system:debug:lval))
(mov a1 (cvalq #:system:debug:lval))
(push '1)
(push '(#:system:debug:lval))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:system:debug:frame) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:system:debug:lval) a2)
(mov (car a1) a1)
(call #:system:debug:exchange-arguments)
(mov (cvalq #:system:debug:frame) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
(mov (cvalq #:system:debug:lval) a1)
(jcall nreverse)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug:lval))
(adjstk '7)
(bra 102)
101
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:frame))
(adjstk '7)
(return)
))
(loader'((entry #:system:debug:exchange-arguments subr2)
(push (cvalq #:system:debug:lval))
(mov a2 (cvalq #:system:debug:lval))
(push (cvalq #:system:debug:larg))
(mov a1 (cvalq #:system:debug:larg))
(push '2)
(push '(#:system:debug:lval #:system:debug:larg))
(push (@ #:system:debug:exchange-arguments))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '&nobind a2)
(jcall eq)
(bfnil a1 102)
(btnil (cvalq #:system:debug:larg) 103)
(mov nil a1)
(bra 102)
103
(mov 't a1)
102
(bfnil a1 101)
(bfsymb (cvalq #:system:debug:larg) 105)
(push (cvalq #:system:debug:lval))
(mov (cvalq #:system:debug:larg) a1)
(call #:system:debug:cval)
(push a1)
(mov (cvalq #:system:debug:lval) a2)
(mov (car a2) a2)
(mov (cvalq #:system:debug:larg) a1)
(call #:system:debug:scval)
(pop a4)
(pop a3)
(mov a4 (car a3))
(mov a3 a1)
(bra 101)
105
(bfcons (cvalq #:system:debug:larg) 107)
(mov (cvalq #:system:debug:larg) a1)
(bfcons (car a1) 109)
(mov (cvalq #:system:debug:lval) a2)
(mov (car a2) a2)
(bra 110)
109
(mov (cvalq #:system:debug:lval) a2)
110
(mov (car a1) a1)
(call #:system:debug:exchange-arguments)
(mov (cvalq #:system:debug:larg) a1)
(mov (cvalq #:system:debug:lval) a2)
(mov (cdr a2) a2)
(mov (cdr a1) a1)
(call #:system:debug:exchange-arguments)
(bra 101)
107
(mov nil a1)
101
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:larg))
(mov (& 7) (cvalq #:system:debug:lval))
(adjstk '8)
(return)
))
(defvar #:system:debug:v)
(loader'((entry #:system:debug:scval subr2)
(push (cvalq #:system:debug:v))
(mov a2 (cvalq #:system:debug:v))
(push (cvalq #:system:debug:s))
(mov a1 (cvalq #:system:debug:s))
(push '2)
(push '(#:system:debug:v #:system:debug:s))
(push (@ #:system:debug:scval))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:system:debug:v a1)
(jcall boundp)
(btnil a1 101)
(mov (cvalq #:system:debug:s) a4)
(mov (cvalq #:system:debug:v) (cval a4))
(mov (cvalq #:system:debug:v) a1)
(bra 102)
101
(mov (cvalq #:system:debug:s) a1)
(jcall makunbound)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:s))
(mov (& 7) (cvalq #:system:debug:v))
(adjstk '8)
(return)
))
(loader'((entry #:system:debug:cval subr1)
(push (cvalq #:system:debug:s))
(mov a1 (cvalq #:system:debug:s))
(push '1)
(push '(#:system:debug:s))
(push (@ #:system:debug:cval))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall boundp)
(btnil a1 101)
(mov (cvalq #:system:debug:s) a1)
(mov (cval a1) a1)
(bra 102)
101
(mov '_undef_ a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:s))
(adjstk '7)
(return)
))
(loader'((entry #:system:debug:current-expr subr1)
(push (cvalq definition))
(mov a1 (cvalq definition))
(push '1)
(push '(definition))
(push (@ #:system:debug:current-expr))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:system:debug:current-form) a1)
(mov (cvalq #:system:debug:current-function) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:system:debug:up-frame-list)
(push (cvalq #:system:debug:frame-list))
(mov a1 (cvalq #:system:debug:frame-list))
(push '1)
(push '(#:system:debug:frame-list))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
101
(btnil (cvalq #:system:debug:frame-list) 102)
(mov (cvalq #:system:debug:frame-list) a1)
(mov (cdr a1) (cvalq #:system:debug:frame-list))
(mov (cvalq definition) a2)
(mov (car a1) a1)
(call #:system:debug:find-expr)
(mov a1 (cvalq definition))
(bra 101)
102
(mov (cvalq #:system:debug:current-form) a4)
(bfnil (cdr a4) 104)
(mov (cvalq definition) a1)
(call #:system:debug:find-error)
(mov a1 (cvalq definition))
104
(mov (cvalq definition) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug:frame-list))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq definition))
(adjstk '7)
(return)
))
(loader'((entry #:system:debug:find-expr subr2)
(push (cvalq sexpr))
(mov a2 (cvalq sexpr))
(push (cvalq frame))
(mov a1 (cvalq frame))
(push '2)
(push '(sexpr frame))
(push (@ #:system:debug:find-expr))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (car a1) a1)
(cabne a1 '1 104)
(bra 105)
(fentry #:system:debug:find-expr:g114 subr1)
(entry #:system:debug:find-expr:g114 subr1)
(push a1)
(mov (car a1) a1)
(jcall consp)
(btnil a1 106)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cvalq frame) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (cdr a1) a1)
(adjstk '1)
(jmp eq)
106
(adjstk '1)
(return)
105
(mov '#:system:debug:find-expr:g114 a1)
(bra 103)
104
(cabne a1 '3 107)
(bra 108)
(fentry #:system:debug:find-expr:g115 subr1)
(entry #:system:debug:find-expr:g115 subr1)
(push a1)
(mov '(tag untilexit) a2)
(mov (car a1) a1)
(jcall memq)
(btnil a1 109)
(mov (& 0) a1)
(mov (cdr a1) a1)
(jcall consp)
(btnil a1 109)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cvalq frame) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(adjstk '1)
(jmp eq)
109
(adjstk '1)
(return)
108
(mov '#:system:debug:find-expr:g115 a1)
(bra 103)
107
(cabne a1 '5 110)
(bra 111)
(fentry #:system:debug:find-expr:g116 subr1)
(entry #:system:debug:find-expr:g116 subr1)
(push a1)
(mov 'lock a2)
(mov (car a1) a1)
(jcall eq)
(btnil a1 112)
(mov (& 0) a1)
(mov (cdr a1) a1)
(jcall consp)
(btnil a1 112)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cvalq frame) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(adjstk '1)
(jmp eq)
112
(adjstk '1)
(return)
111
(mov '#:system:debug:find-expr:g116 a1)
(bra 103)
110
(cabne a1 '6 113)
(bra 114)
(fentry #:system:debug:find-expr:g117 subr1)
(entry #:system:debug:find-expr:g117 subr1)
(push a1)
(mov 'protect a2)
(mov (car a1) a1)
(jcall eq)
(btnil a1 115)
(mov (& 0) a1)
(mov (cdr a1) a1)
(jcall consp)
(btnil a1 115)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cvalq frame) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (cdr a1) a1)
(adjstk '1)
(jmp eq)
115
(adjstk '1)
(return)
114
(mov '#:system:debug:find-expr:g117 a1)
(bra 103)
113
(cabne a1 '8 116)
(bra 117)
(fentry #:system:debug:find-expr:g118 subr1)
(entry #:system:debug:find-expr:g118 subr1)
(mov 'schedule a2)
(mov (car a1) a1)
(jmp eq)
117
(mov '#:system:debug:find-expr:g118 a1)
(bra 103)
116
(cabne a1 '9 118)
(mov nil a1)
(bra 103)
118
(cabne a1 '11 119)
(bra 120)
(fentry #:system:debug:find-expr:g119 subr1)
(entry #:system:debug:find-expr:g119 subr1)
(mov (cvalq frame) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(mov 'found a2)
(jmp #:llcp:exit)
120
(mov '#:system:debug:find-expr:g119 a1)
(bra 103)
119
(mov nil a1)
103
(bfnil a1 102)
(bra 121)
(fentry #:system:debug:find-expr:g120 subr1)
(entry #:system:debug:find-expr:g120 subr1)
(mov nil a1)
(mov 'found a2)
(jmp #:llcp:exit)
121
(mov '#:system:debug:find-expr:g120 a1)
102
(call #:system:debug:find-tree)
(bfnil a1 101)
(mov (cvalq sexpr) a1)
101
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq frame))
(mov (& 7) (cvalq sexpr))
(adjstk '8)
(return)
))
(loader'((entry #:system:debug:find-error subr1)
(push (cvalq expr))
(mov a1 (cvalq expr))
(push '1)
(push '(expr))
(push (@ #:system:debug:find-error))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:system:debug:error-message) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabeq a4 'errudf 105)
(cabeq a4 'errbal 105)
(cabeq a4 'errwna 105)
(cabeq a4 'errilb 105)
(cabne a4 'break 102)
(bra 105)
(fentry #:system:debug:find-error:g121 subr1)
(entry #:system:debug:find-error:g121 subr1)
(mov (cvalq #:system:debug:current-error-form) a2)
(jmp eq)
105
(mov a1 a2)
(mov '#:system:debug:find-error:g121 a1)
(call #:system:debug:find-tree)
(bra 103)
102
(mov nil a1)
103
(bfnil a1 101)
(mov (cvalq #:system:debug:error-message) a4)
(mov (cdr a4) a4)
(cabne (car a4) 'errudv 106)
(bra 108)
(fentry #:system:debug:find-error:g122 subr1)
(entry #:system:debug:find-error:g122 subr1)
(mov (cvalq #:system:debug:error-message) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(cabne (car a1) (car a4) 109)
(mov (car a1) a1)
(mov 'found a2)
(jmp #:llcp:exit)
109
(mov nil a1)
(return)
108
(mov (cvalq expr) a2)
(mov '#:system:debug:find-error:g122 a1)
(call #:system:debug:find-tree)
(bra 107)
106
(mov nil a1)
107
(bfnil a1 101)
(bra 111)
(fentry #:system:debug:find-error:g123 subr1)
(entry #:system:debug:find-error:g123 subr1)
(push (cvalq expr))
(mov a1 (cvalq expr))
(push '1)
(push '(expr))
(push (@ #:system:debug:find-error))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:system:debug:error-message) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall eq)
(btnil a1 112)
(bra 113)
(fentry #:system:debug:find-error:g124 subr1)
(entry #:system:debug:find-error:g124 subr1)
(mov (cvalq #:system:debug:current-error-form) a2)
(jmp eq)
113
(mov (cvalq expr) a2)
(mov '#:system:debug:find-error:g124 a1)
(call #:system:debug:find-tree)
112
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq expr))
(adjstk '7)
(return)
111
(mov (cvalq expr) a2)
(mov '#:system:debug:find-error:g123 a1)
(call #:system:debug:find-tree)
(bfnil a1 101)
(mov (cvalq expr) a1)
101
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq expr))
(adjstk '7)
(return)
))
(loader'((entry #:system:debug:find-tree subr2)
(push (cvalq #:system:debug:tree))
(mov a2 (cvalq #:system:debug:tree))
(push (cvalq #:system:debug:fn))
(mov a1 (cvalq #:system:debug:fn))
(push '2)
(push '(#:system:debug:tree #:system:debug:fn))
(push (@ #:system:debug:find-tree))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'found)
(push dlink)
(push tag)
(stack dlink)
(call #:system:debug:find-tree1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:fn))
(mov (& 7) (cvalq #:system:debug:tree))
(adjstk '8)
(return)
))
(loader'((entry #:system:debug:find-tree1 subr2)
(push (cvalq #:system:debug:tree))
(mov a2 (cvalq #:system:debug:tree))
(push (cvalq #:system:debug:fn))
(mov a1 (cvalq #:system:debug:fn))
(push '2)
(push '(#:system:debug:tree #:system:debug:fn))
(push (@ #:system:debug:find-tree1))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfcons a2 101)
(push (@ 105))
(push a1)
(push a2)
(mov '2 a4)
(jmp funcall)
105
(eval ())
(btnil a1 106)
(mov (cvalq #:system:debug:tree) a1)
(mov 'found a2)
(jmp #:llcp:exit)
106
(bfcons (cvalq #:system:debug:tree) 107)
(push (cvalq #:system:debug:fn))
(mov (cvalq #:system:debug:tree) a2)
(mov (cdr a2) (cvalq #:system:debug:tree))
(mov (car a2) a2)
(pop a1)
(call #:system:debug:find-tree1)
(bra 106)
107
(mov nil a1)
(bra 102)
101
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:debug:fn))
(mov (& 7) (cvalq #:system:debug:tree))
(adjstk '8)
(return)
))
(loader'((entry substq subr3)
(push a3)
(push a2)
(push a1)
(btcons a3 101)
(cabne a3 a2 103)
(adjstk '3)
(return)
103
(mov a3 a1)
(adjstk '3)
(return)
101
(bfcons a3 105)
(cabne (car a3) a2 107)
(bra 108)
107
(mov (car a3) a3)
(call substq)
108
(push a1)
(mov (& 3) a4)
(cabne (cdr a4) (& 2) 109)
(mov (& 1) a2)
(bra 110)
109
(mov (cdr a4) a3)
(mov (& 2) a2)
(mov (& 1) a1)
(call substq)
(mov a1 a2)
110
(pop a1)
(adjstk '3)
(jmp cons)
105
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:system:debug:find-function subr1)
(push a1)
101
(mov (& 0) a1)
(mov (car a1) a1)
(call #:system:debug:has-function-definition)
(bfnil a1 102)
(btnil (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:system:debug:has-function-definition subr1)
(push a1)
(mov '1 a2)
(mov (car a1) a1)
(jcall eq)
(btnil a1 101)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '1)
(bra #:system:debug:findfn)
101
(adjstk '1)
(return)
))
(loader'((entry #:system:debug:is-a-struct-access subr1)
(push a1)
(mov '1 a2)
(mov (car a1) a1)
(jcall eq)
(btnil a1 101)
(mov (& 0) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov (& 0) a1)
(jcall consp)
(btnil a1 102)
(mov (& 0) a1)
(mov '&nobind a2)
(mov (car a1) a1)
(jcall eq)
(btnil a1 102)
(mov (& 0) a1)
(mov (cdr a1) a1)
(jcall consp)
(btnil a1 102)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall consp)
(btnil a1 102)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov '#:system:structaccess a2)
(mov (car a1) a1)
(adjstk '2)
(jmp eq)
102
(adjstk '1)
101
(adjstk '1)
(return)
))
(loader'((entry #:system:debug:getdef subr1)
(push a1)
(mov (cvalq #:trace:trace) a2)
(jcall memq)
(btnil a1 101)
(mov 'trace a2)
(mov (& 0) a1)
(adjstk '1)
(bra #:system:debug:get-plist-def)
101
(mov 'resetfn a2)
(mov (& 0) a1)
(jcall getprop)
(btnil a1 103)
(mov 'resetfn a2)
(mov (& 0) a1)
(adjstk '1)
(bra #:system:debug:get-plist-def)
103
(mov (& 0) a1)
(adjstk '1)
(jmp getdef)
))
(loader'((entry #:system:debug:findfn subr1)
(push a1)
(jcall findfn)
(bfnil a1 101)
(mov (cvalq #:system:debug:resetfn-alist) a2)
(mov (& 0) a1)
(adjstk '1)
(jmp cassoc)
101
(adjstk '1)
(return)
))
(loader'((entry #:system:debug:get-plist-def subr2)
(push a2)
(push a1)
(push a1)
(jcall getprop)
(push (car a1))
(mov (& 3) a2)
(mov (& 2) a1)
(jcall getprop)
(mov (cdr a1) a3)
(pop a2)
(pop a1)
(adjstk '2)
(jmp makedef)
))
(loader'((entry #:system:debug:hilite-expr subr2)
(push a2)
(push a1)
(bfnil a1 101)
(mov a2 a1)
(adjstk '2)
(return)
101
(call #:system:debug:hilited:make)
(mov (& 1) a3)
(mov (& 0) a2)
(adjstk '2)
(bra substq)
))
(loader'((entry #:system:debug:hilited:make subr1)
(mov a1 a2)
(mov '#:system:debug:hilited a1)
(jmp tcons)
))
(loader'((fentry #:system:debug:hilited:prin subr1)
(entry #:system:debug:hilited:prin subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp tyattrib)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push 't)
(mov '1 a4)
(jmp tyattrib)
104
(eval ())
(mov (& 4) a1)
(mov (cdr a1) a1)
(jcall pprin)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 105))
(push (& 4))
(mov '1 a4)
(jmp tyattrib)
105
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(synonym '#:system:debug:hilited:pretty '#:system:debug:hilited:prin)
(defvar #:system:debug:outlist)
(defvar #:system:debug:hibegin)
(defvar #:system:debug:hiend)
(defvar #:system:debug:nlines)
(defvar #:tty:system:hilited:tyattrib ())
(loader'((fentry #:tty:system:hilited:tyattrib subr1)
(entry #:tty:system:hilited:tyattrib subr1)
(btnil a1 101)
(push (cvalq #:system:debug:nlines))
(push (@ 103))
(mov '0 a4)
(jmp outpos)
103
(eval ())
(mov a1 a2)
(pop a1)
(jcall cons)
(mov a1 (cvalq #:system:debug:hibegin))
(return)
101
(push (cvalq #:system:debug:nlines))
(push (@ 104))
(mov '0 a4)
(jmp outpos)
104
(eval ())
(mov a1 a2)
(pop a1)
(jcall cons)
(mov a1 (cvalq #:system:debug:hiend))
(return)
))
(loader'((fentry #:system:debug:hilited:eol subr0)
(entry #:system:debug:hilited:eol subr0)
(mov (cvalq #:system:debug:nlines) a1)
(jcall |1+|)
(mov a1 (cvalq #:system:debug:nlines))
(push (@ 101))
(push (@ 102))
(mov '0 a4)
(jmp outbuf)
102
(eval ())
(push a1)
(push '0)
(push (@ 103))
(mov '0 a4)
(jmp outpos)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp substring)
101
(eval ())
(mov (cvalq #:system:debug:outlist) a2)
(jcall cons)
(mov a1 (cvalq #:system:debug:outlist))
(push (@ 104))
(push (@ 105))
(mov '0 a4)
(jmp outbuf)
105
(eval ())
(push a1)
(push '0)
(push '32)
(mov '3 a4)
(jmp fillstring)
104
(eval ())
(push (@ 106))
(push (@ 107))
(mov '0 a4)
(jmp lmargin)
107
(eval ())
(push a1)
(mov '1 a4)
(jmp outpos)
106
(eval ())
(return)
))
(loader'((entry #:system:debug:print-filtered subr1)
(push '0)
(push nil)
(push nil)
(push nil)
(push (cvalq #:system:debug:outlist))
(mov (& 1) (cvalq #:system:debug:outlist))
(push (cvalq #:system:debug:hiend))
(mov (& 3) (cvalq #:system:debug:hiend))
(push (cvalq #:system:debug:hibegin))
(mov (& 5) (cvalq #:system:debug:hibegin))
(push (cvalq #:system:debug:nlines))
(mov (& 7) (cvalq #:system:debug:nlines))
(push '4)
(push '(#:system:debug:outlist #:system:debug:hiend #:system:debug:hibegin #:system:debug:nlines))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push '#:system:debug:hilited)
(push '#:tty:system:hilited)
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push (cvalq #:sys-package:itsoft))
(mov (& 3) (cvalq #:sys-package:itsoft))
(push '2)
(push '(#:sys-package:tty #:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall pprint)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(mov (& 7) (cvalq #:sys-package:tty))
(adjstk '10)
(btnil (cvalq #:system:debug:hibegin) 103)
(bfnil (cvalq #:system:debug:hiend) 102)
103
(mov '0 a2)
(mov '0 a1)
(jcall cons)
(mov a1 (cvalq #:system:debug:hibegin))
(mov '0 a2)
(mov '0 a1)
(jcall cons)
(mov a1 (cvalq #:system:debug:hiend))
102
(call #:system:debug:flush-hilited)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:debug:nlines))
(mov (& 7) (cvalq #:system:debug:hibegin))
(mov (& 8) (cvalq #:system:debug:hiend))
(mov (& 9) (cvalq #:system:debug:outlist))
(adjstk '14)
(return)
))
(loader'((entry #:system:debug:flush-hilited subr0)
(mov (cvalq #:system:debug:outlist) a1)
(jcall nreverse)
(mov a1 (cvalq #:system:debug:outlist))
(cnble (cvalq #:system:debug:nlines) (cvalq #:system:debug-line) 102)
(push (@ 103))
(mov (cvalq #:system:debug:hibegin) a4)
(mov (car a4) a4)
(diff '1 a4)
(push a4)
(mov (cvalq #:system:debug:hiend) a4)
(mov (car a4) a4)
(plus '1 a4)
(diff (cvalq #:system:debug-line) a4)
(push a4)
(mov '2 a4)
(jmp min)
103
(eval ())
(push a1)
(cnble a1 '0 105)
(mov (cvalq #:system:debug:hibegin) a4)
(mov (car a4) a4)
(diff a1 a4)
(mov (cvalq #:system:debug:hibegin) a3)
(mov a4 (car a3))
(push (cvalq #:system:debug:hiend))
(push (@ 106))
(mov (cvalq #:system:debug:hiend) a4)
(mov (car a4) a4)
(diff a1 a4)
(push a4)
(mov (cvalq #:system:debug-line) a4)
(diff '1 a4)
(push a4)
(mov '2 a4)
(jmp min)
106
(eval ())
(pop a4)
(mov a1 (car a4))
(push (cvalq #:system:debug:outlist))
(mov (& 1) a4)
(plus '1 a4)
(mov (cvalq #:system:debug:outlist) a2)
(mov a4 a1)
(jcall nthcdr)
(pop a4)
(mov a1 (cdr a4))
(push (cvalq #:system:debug:outlist))
(push (@ 107))
(mov (cvalq #:system:debug:outlist) a4)
(push (car a4))
(push '" ...")
(mov '2 a4)
(jmp catenate)
107
(eval ())
(pop a4)
(mov a1 (car a4))
105
(mov (cvalq #:system:debug:outlist) a1)
(jcall length)
(cnble a1 (cvalq #:system:debug-line) 109)
(mov (cvalq #:system:debug-line) a4)
(diff '1 a4)
(mov (cvalq #:system:debug:outlist) a2)
(mov a4 a1)
(jcall nthcdr)
(push a1)
(mov nil (cdr a1))
(push a1)
(push (@ 110))
(push (car a1))
(push '"  ...")
(mov '2 a4)
(jmp catenate)
110
(eval ())
(pop a4)
(mov a1 (car a4))
(mov (cvalq #:system:debug:hiend) a4)
(mov (cvalq #:system:debug-line) a3)
(diff '1 a3)
(cnble (car a4) a3 112)
(mov (cvalq #:system:debug-line) a3)
(diff '1 a3)
(mov a3 (car a4))
(mov (& 0) a3)
(hgsize (car a3) a3)
(mov a3 (cdr a4))
112
(adjstk '1)
109
(adjstk '1)
102
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 113))
(mov '0 a4)
(jmp outchan)
113
(eval ())
(push a1)
(push (@ 114))
(push dlink)
(push prot)
(stack dlink)
(push (@ 116))
(push 't)
(mov '1 a4)
(jmp outchan)
116
(eval ())
(push (@ 117))
(mov '0 a4)
(jmp rmargin)
117
(eval ())
(push a1)
(push (@ 118))
(push dlink)
(push prot)
(stack dlink)
(push (@ 120))
(push '78)
(mov '1 a4)
(jmp rmargin)
120
(eval ())
(mov (cvalq #:system:debug:hibegin) a4)
(mov (car a4) a3)
(bra 122)
121
(push a3)
(push (@ 123))
(mov (cvalq #:system:debug:outlist) a4)
(mov (cdr a4) (cvalq #:system:debug:outlist))
(push (car a4))
(mov '1 a4)
(jmp print)
123
(eval ())
(pop a3)
122
(sobgez a3 121)
(push (@ 124))
(push (@ 125))
(mov (cvalq #:system:debug:outlist) a4)
(push (car a4))
(push '0)
(mov (cvalq #:system:debug:hibegin) a4)
(push (cdr a4))
(mov '3 a4)
(jmp substring)
125
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
124
(eval ())
(push (@ 126))
(push 't)
(mov '1 a4)
(jmp tyattrib)
126
(eval ())
(mov (cvalq #:system:debug:hiend) a4)
(mov (cvalq #:system:debug:hibegin) a3)
(cabne (car a4) (car a3) 127)
(push (@ 129))
(push (@ 130))
(mov (cvalq #:system:debug:outlist) a2)
(push (car a2))
(push (cdr a3))
(mov (cdr a4) a2)
(diff (cdr a3) a2)
(push a2)
(mov '3 a4)
(jmp substring)
130
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
129
(eval ())
(bra 128)
127
(push (@ 131))
(push (@ 132))
(mov (cvalq #:system:debug:outlist) a2)
(mov (cdr a2) (cvalq #:system:debug:outlist))
(push (car a2))
(push (cdr a3))
(mov '2 a4)
(jmp substring)
132
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
131
(eval ())
(mov (cvalq #:system:debug:hiend) a4)
(mov (cvalq #:system:debug:hibegin) a3)
(mov (car a4) a4)
(diff (car a3) a4)
(diff '1 a4)
(bra 134)
133
(push a4)
(push (@ 135))
(push 't)
(mov '1 a4)
(jmp tyattrib)
135
(eval ())
(push (@ 136))
(mov (cvalq #:system:debug:outlist) a4)
(mov (cdr a4) (cvalq #:system:debug:outlist))
(push (car a4))
(mov '1 a4)
(jmp print)
136
(eval ())
(pop a4)
134
(sobgez a4 133)
(push (@ 137))
(push 't)
(mov '1 a4)
(jmp tyattrib)
137
(eval ())
(push (@ 138))
(push (@ 139))
(mov (cvalq #:system:debug:outlist) a4)
(push (car a4))
(push '0)
(mov (cvalq #:system:debug:hiend) a4)
(push (cdr a4))
(mov '3 a4)
(jmp substring)
139
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
138
(eval ())
128
(push (@ 140))
(push nil)
(mov '1 a4)
(jmp tyattrib)
140
(eval ())
(push (@ 141))
(push (@ 142))
(mov (cvalq #:system:debug:outlist) a4)
(mov (cdr a4) (cvalq #:system:debug:outlist))
(push (car a4))
(mov (cvalq #:system:debug:hiend) a4)
(push (cdr a4))
(mov '2 a4)
(jmp substring)
142
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
141
(eval ())
143
(btnil (cvalq #:system:debug:outlist) 144)
(push (@ 145))
(mov (cvalq #:system:debug:outlist) a4)
(mov (cdr a4) (cvalq #:system:debug:outlist))
(push (car a4))
(mov '1 a4)
(jmp print)
145
(eval ())
(bra 143)
144
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 119) a3)
118
(push a3)
(push a2)
(push (@ 146))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
146
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
119
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 115) a3)
114
(push a3)
(push a2)
(push (@ 147))
(push (& 4))
(mov '1 a4)
(jmp outchan)
147
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
115
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(return)
))
(loader '((end)))
