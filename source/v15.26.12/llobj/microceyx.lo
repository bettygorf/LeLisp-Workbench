(loader '((title |microceyx.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'microceyx)))
(defvar #:sys-package:colon 'microceyx)
(add-feature 'microceyx)
(#:messages:put-message '#:microceyx:errnotafield 'french '"l'argument n'est pas un champ de Tclass microceyx" 'defmessage)
(#:messages:put-message '#:microceyx:errnotafield 'english '"argument not a field of a microceyx Tclass" 'defmessage)
'#:microceyx:errnotafield
(#:messages:put-message '#:microceyx:errnotatclass 'french '"l'argument n'est pas un nom de Tclass microceyx" 'defmessage)
(#:messages:put-message '#:microceyx:errnotatclass 'english '"argument not a name of a microceyx Tclass" 'defmessage)
'#:microceyx:errnotatclass
(#:messages:put-message '#:microceyx:errtclassabbrev 'french '"abre'viation de Tclass microceyx de'ja` de'finie" 'defmessage)
(#:messages:put-message '#:microceyx:errtclassabbrev 'english '"abbrev of microceyx Tclass already defined" 'defmessage)
'#:microceyx:errtclassabbrev
(#:messages:put-message '#:microceyx:errrecordabbrev 'french '"abre'viation de Record microceyx de'ja` de'finie" 'defmessage)
(#:messages:put-message '#:microceyx:errrecordabbrev 'english '"abbrev of microceyx Record already defined" 'defmessage)
'#:microceyx:errrecordabbrev
(#:messages:put-message '#:microceyx:errbadfield 'french '"erreur de syntaxe pour un champ" 'defmessage)
(#:messages:put-message '#:microceyx:errbadfield 'english '"syntax error in field" 'defmessage)
'#:microceyx:errbadfield
(#:messages:put-message '#:microceyx:errrecordtoolong 'french '"un Record ne peut pas avoir plus de 16 champs" 'defmessage)
(#:messages:put-message '#:microceyx:errrecordtoolong 'english '"16 fields maximum per Record" 'defmessage)
'#:microceyx:errrecordtoolong
(#:messages:put-message '#:microceyx:errnotarecordoratclass 'french '"l'argument n'est pas un nom de Tclass ou de Record microceyx" 'defmessage)
(#:messages:put-message '#:microceyx:errnotarecordoratclass 'english '"argument not a name of microceyx Tclass or Record" 'defmessage)
'#:microceyx:errnotarecordoratclass
(loader'((entry #:microceyx:check-record-or-tclass subr2)
(push a2)
(push a1)
101
(bfsymb (& 1) 103)
(mov (& 1) a1)
(jcall tclass-namep)
(bfnil a1 102)
(mov (& 1) a1)
(jcall record-namep)
(bfnil a1 102)
(mov 'defstruct a2)
(mov (& 1) a1)
(jcall getprop)
(bfnil a1 102)
103
(mov (& 1) a3)
(mov '#:microceyx:errnotarecordoratclass a2)
(mov (& 0) a1)
(jcall error)
(mov a1 (& 1))
(bra 101)
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:microceyx:check-tclass subr2)
(push a2)
(push a1)
101
(mov (& 1) a1)
(jcall tclass-namep)
(bfnil a1 102)
(mov (& 1) a3)
(mov '#:microceyx:errnotatclass a2)
(mov (& 0) a1)
(jcall error)
(mov a1 (& 1))
(bra 101)
102
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:microceyx:check-field subr3)
(push a3)
(push a2)
(push a1)
101
(bfsymb (& 2) 103)
(push (@ 104))
(push (& 2))
(push (& 4))
(mov '2 a4)
(jmp getfn)
104
(eval ())
(bfnil a1 102)
103
(push (@ 105))
(push (& 2))
(push (& 4))
(mov '2 a4)
(jmp list)
105
(eval ())
(mov a1 a3)
(mov '#:microceyx:errnotafield a2)
(mov (& 0) a1)
(jcall error)
(mov a1 (& 2))
(bra 101)
102
(mov (& 2) a1)
(adjstk '3)
(return)
))
(loader'((fentry deftclass dmsubr)
(entry deftclass dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(push nil)
101
(bfsymb (& 2) 103)
(mov (& 2) a4)
(btnil (pkgc a4) 102)
(mov (pkgc a4) a1)
(jcall tclass-namep)
(bfnil a1 102)
103
(mov (& 2) a3)
(mov '#:microceyx:errnotatclass a2)
(mov 'deftclass a1)
(jcall error)
(mov a1 (& 2))
(bra 101)
102
(mov (& 2) a4)
(bfnil (pkgc a4) 105)
(mov a4 a2)
(mov 'tclass a1)
(jcall symbol)
(mov a1 (& 2))
105
(mov (& 2) a2)
(mov nil a1)
(jcall symbol)
(mov a1 (& 0))
(jcall abbrevp)
(btnil a1 107)
(mov (& 0) a1)
(jcall get-abbrev)
(cabeq a1 (& 2) 107)
(mov (& 0) a3)
(mov '#:microceyx:errtclassabbrev a2)
(mov 'deftclass a1)
(jcall error)
107
(push (@ 108))
(push 'progn)
(push (@ 109))
(push 'defstruct)
(push (& 6))
(push (& 6))
(mov '3 a4)
(jmp mcons)
109
(eval ())
(push a1)
(push (@ 110))
(push 'defabbrev)
(mov (& 7) a2)
(mov nil a1)
(jcall symbol)
(push a1)
(push (& 8))
(mov '3 a4)
(jmp list)
110
(eval ())
(push a1)
(push (@ 111))
(push 'quote)
(push (& 8))
(mov '2 a4)
(jmp list)
111
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
108
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry defrecord dmsubr)
(entry defrecord dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
101
(bfvar (& 1) 103)
(mov (& 1) a4)
(btnil (pkgc a4) 102)
103
(mov (& 1) a3)
(mov 'errnva a2)
(mov 'defrecord a1)
(jcall error)
(mov a1 (& 1))
(bra 101)
102
(mov (& 0) a1)
(jcall length)
(cnble a1 '16 105)
(mov (& 0) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 a3)
(mov '#:microceyx:errrecordtoolong a2)
(mov 'defrecord a1)
(jcall error)
105
(push (& 0))
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
108
(btsymb (& 0) 109)
(bfcons (& 0) 110)
(mov (& 0) a4)
(bfsymb (car a4) 110)
(bfcons (cdr a4) 110)
(mov (cdr a4) a3)
(btnil (cdr a3) 109)
110
(mov (& 0) a3)
(mov '#:microceyx:errbadfield a2)
(mov 'defrecord a1)
(jcall error)
(mov a1 (& 0))
(bra 108)
109
(mov (& 0) a1)
(jcall consp)
(bfnil a1 111)
(mov '(()) a2)
(mov (& 0) a1)
(jcall cons)
111
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 106)
107
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 (& 0))
(mov (& 1) a1)
(jcall abbrevp)
(btnil a1 113)
(mov (& 1) a1)
(jcall get-abbrev)
(cabeq a1 (& 1) 113)
(mov (& 1) a3)
(mov '#:microceyx:errrecordabbrev a2)
(mov 'defrecord a1)
(jcall error)
113
(mov nil a1)
(jcall ncons)
(push a1)
(mov (& 1) a4)
(btnil (cdr a4) 114)
(push (@ 116))
(push (& 3))
(push a4)
(push nil)
(push a1)
(mov '4 a4)
(bra #:microceyx:make-field-access)
116
(eval ())
(mov a1 a4)
(bra 115)
114
(mov a1 a3)
(mov a4 a2)
(mov (& 2) a1)
(call #:microceyx:make-single-field-access)
(mov a1 a4)
115
(push a4)
(push (@ 117))
(push 'exportable-definition)
(push (@ 118))
(push 'quote)
(push (& 7))
(mov '2 a4)
(jmp list)
118
(eval ())
(push a1)
(push ''structure)
(push (@ 119))
(push 'de)
(mov 'make a2)
(mov (& 9) a1)
(jcall symbol)
(push a1)
(push nil)
(push (& 8))
(mov '4 a4)
(jmp list)
119
(eval ())
(push a1)
(push (@ 120))
(mov (& 7) a4)
(push (cdr a4))
(push (@ 121))
(push (@ 122))
(push 'putprop)
(push (@ 123))
(push 'quote)
(push (& 15))
(mov '2 a4)
(jmp list)
123
(eval ())
(push a1)
(push (@ 124))
(push 'quote)
(push (& 15))
(push nil)
125
(bfcons (& 1) 126)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 125)
126
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (& 16))
(push nil)
127
(bfcons (& 1) 128)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 127)
128
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(pop a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
124
(eval ())
(push a1)
(push '('defrecord))
(mov '4 a4)
(jmp mcons)
122
(eval ())
(push a1)
(push (@ 129))
(push 'defabbrev)
(push (& 14))
(push (& 15))
(mov '3 a4)
(jmp list)
129
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
120
(eval ())
(push a1)
(mov '5 a4)
(jmp mcons)
117
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:microceyx:make-single-field-access subr3)
(push a2)
(push a1)
(push (@ 101))
(push a3)
(push (@ 102))
(push (@ 103))
(push 'de)
(mov (car a2) a2)
(mov (car a2) a2)
(jcall symbol)
(push a1)
(push '(&nobind (if (eq (arg) 1) (car (arg 0)) (car (rplaca (arg 0) (arg 1))))))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(push a1)
(mov 'compiler a1)
(jcall featurep)
(btnil a1 104)
(push (@ 106))
(push 'defmacro-open)
(mov (& 7) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(mov (& 6) a1)
(jcall symbol)
(push a1)
(push '((o . v) (ifn v (list 'car o) (list 'car (list 'rplaca o (car v))))))
(mov '3 a4)
(jmp mcons)
106
(eval ())
(mov a1 a4)
(bra 105)
104
(mov nil a4)
105
(push a4)
(mov '2 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(push (@ 107))
(push 'ncons)
(mov (& 3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
107
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:microceyx:make-field-access nsubr)
(mov (& 2) a4)
(bfnil (cdr a4) 101)
(push (@ 103))
(push (& 1))
(mov (& 3) a3)
(mov (car a4) a2)
(mov (& 5) a1)
(call #:microceyx:make-access)
(push a1)
(mov '2 a4)
(jmp nconc)
103
(eval ())
(mov (& 2) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(adjstk '4)
(return)
101
(push (@ 104))
(push 'cons)
(push (@ 105))
(push (& 6))
(mov a4 a1)
(jcall length)
(quo '2 a1)
(mov (& 6) a2)
(jcall firstn)
(push a1)
(mov (& 6) a2)
(mov 'a a1)
(jcall cons)
(push a1)
(push (& 6))
(mov '4 a4)
(bra #:microceyx:make-field-access)
105
(eval ())
(push a1)
(push (@ 106))
(push (& 7))
(mov (& 7) a1)
(jcall length)
(quo '2 a1)
(mov (& 7) a2)
(jcall nthcdr)
(push a1)
(mov (& 7) a2)
(mov 'd a1)
(jcall cons)
(push a1)
(push (& 7))
(mov '4 a4)
(bra #:microceyx:make-field-access)
106
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:microceyx:make-access subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(push 'de)
(mov (car a2) a2)
(jcall symbol)
(push a1)
(push '&nobind)
(push (@ 102))
(push 'if)
(push '(eq (arg) 1))
(push (@ 103))
(push (& 10))
(push '(r))
(mov '2 a4)
(jmp append)
103
(eval ())
(mov a1 a2)
(mov 'c a1)
(jcall cons)
(jcall implodech)
(mov '((arg 0)) a2)
(jcall cons)
(push a1)
(push (@ 104))
(push (@ 105))
(push 'c)
(mov (& 13) a4)
(push (car a4))
(push '(r))
(mov '3 a4)
(jmp mcons)
105
(eval ())
(jcall implodech)
(push a1)
(push (@ 106))
(push (@ 107))
(push '"rplac")
(mov (& 15) a4)
(push (car a4))
(mov '2 a4)
(jmp concat)
107
(eval ())
(push a1)
(mov (& 14) a4)
(btnil (cdr a4) 108)
(push (@ 110))
(push (cdr a4))
(push '(r))
(mov '2 a4)
(jmp append)
110
(eval ())
(mov a1 a2)
(mov 'c a1)
(jcall cons)
(jcall implodech)
(mov '((arg 0)) a2)
(jcall cons)
(mov a1 a4)
(bra 109)
108
(mov '(arg 0) a4)
109
(push a4)
(push '((arg 1)))
(mov '3 a4)
(jmp mcons)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
101
(eval ())
(push a1)
(mov 'compiler a1)
(jcall featurep)
(btnil a1 111)
(push (@ 113))
(push 'defmacro-open)
(mov (& 4) a2)
(mov (car a2) a2)
(mov (& 3) a1)
(jcall symbol)
(push a1)
(push '(o . v))
(push (@ 114))
(push 'ifn)
(push 'v)
(push (@ 115))
(push 'list)
(push (@ 116))
(push 'quote)
(push (@ 117))
(push (& 15))
(push '(r))
(mov '2 a4)
(jmp append)
117
(eval ())
(mov a1 a2)
(mov 'c a1)
(jcall cons)
(jcall implodech)
(push a1)
(mov '2 a4)
(jmp list)
116
(eval ())
(push a1)
(push '(o))
(mov '3 a4)
(jmp mcons)
115
(eval ())
(push a1)
(mov (& 11) a4)
(btnil (cdr a4) 118)
(push (@ 120))
(push 'list)
(push (@ 121))
(push 'quote)
(push (@ 122))
(push 'c)
(push (car a4))
(push '(r))
(mov '3 a4)
(jmp mcons)
122
(eval ())
(jcall implodech)
(push a1)
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(push (@ 123))
(push 'list)
(push (@ 124))
(push 'quote)
(push (@ 125))
(push '"rplac")
(mov (& 20) a4)
(push (car a4))
(mov '2 a4)
(jmp concat)
125
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
124
(eval ())
(push a1)
(push (@ 126))
(push 'list)
(push (@ 127))
(push 'quote)
(push (@ 128))
(mov (& 22) a4)
(push (cdr a4))
(push '(r))
(mov '2 a4)
(jmp append)
128
(eval ())
(mov a1 a2)
(mov 'c a1)
(jcall cons)
(jcall implodech)
(push a1)
(mov '2 a4)
(jmp list)
127
(eval ())
(push a1)
(push '(o))
(mov '3 a4)
(jmp mcons)
126
(eval ())
(push a1)
(push '((car v)))
(mov '4 a4)
(jmp mcons)
123
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
120
(eval ())
(mov a1 a4)
(bra 119)
118
(push (@ 129))
(push 'list)
(push (@ 130))
(push 'quote)
(push (@ 131))
(push 'c)
(push (car a4))
(push '(r))
(mov '3 a4)
(jmp mcons)
131
(eval ())
(jcall implodech)
(push a1)
(mov '2 a4)
(jmp list)
130
(eval ())
(push a1)
(push (@ 132))
(push 'list)
(push (@ 133))
(push 'quote)
(push (@ 134))
(push '"rplac")
(mov (& 20) a4)
(push (car a4))
(mov '2 a4)
(jmp concat)
134
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
133
(eval ())
(push a1)
(push '(o (car v)))
(mov '3 a4)
(jmp mcons)
132
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
129
(eval ())
(mov a1 a4)
119
(push a4)
(mov '4 a4)
(jmp list)
114
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
113
(eval ())
(jcall ncons)
(mov a1 a2)
(bra 112)
111
(mov nil a2)
112
(pop a1)
(adjstk '3)
(jmp cons)
))
(loader'((fentry tclass-namep subr1)
(entry tclass-namep subr1)
(push a1)
(bfsymb a1 101)
(mov 'tclass a2)
(jcall subtypep)
(btnil a1 101)
(mov 'defstruct a2)
(mov (& 0) a1)
(jcall getprop)
(btnil a1 101)
(mov 't a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry record-namep subr1)
(entry record-namep subr1)
(bfsymb a1 101)
(mov 'defrecord a2)
(jcall getprop)
(btnil a1 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry field-list subr1)
(entry field-list subr1)
(push a1)
(mov a1 a2)
(mov 'field-list a1)
(call #:microceyx:check-record-or-tclass)
(mov a1 (& 0))
(jcall record-namep)
(btnil a1 101)
(mov 'defrecord a2)
(mov (& 0) a1)
(jcall getprop)
(mov (car a1) a1)
(adjstk '1)
(return)
101
(mov nil a2)
(mov (& 0) a1)
(adjstk '1)
(bra #:microceyx:tclass-field-list)
))
(loader'((entry #:microceyx:tclass-field-list subr2)
(push a2)
(bfnil a1 101)
(mov a2 a1)
(adjstk '1)
(return)
101
(cabne a1 'tclass 103)
(mov a2 a1)
(adjstk '1)
(return)
103
(push (pkgc a1))
(push (@ 105))
(mov 'defstruct a2)
(jcall getprop)
(push (cdr a1))
(push (& 3))
(mov '2 a4)
(jmp append)
105
(eval ())
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:microceyx:tclass-field-list)
))
(loader'((fentry defmake dmsubr)
(entry defmake dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (car a3) a3)
(push a3)
101
(btvar (& 1) 102)
(mov (& 1) a3)
(mov 'errsym a2)
(mov 'defmake a1)
(jcall error)
(mov a1 (& 1))
(bra 101)
102
(push (@ 103))
(push 'de)
(push (& 3))
(push (& 3))
(push (@ 104))
(push 'omakeq)
(push (& 8))
(push (& 7))
(push nil)
105
(bfcons (& 1) 106)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 107))
(push (& 1))
(push (& 2))
(mov '2 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '3 a4)
(jmp mcons)
104
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
103
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry omakeq dmsubr)
(entry omakeq dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(push nil)
(push nil)
(push nil)
(mov a1 a2)
(mov 'omakeq a1)
(call #:microceyx:check-record-or-tclass)
(mov a1 (& 4))
101
(bfcons (& 3) 102)
(mov (& 3) a3)
(mov (cdr a3) (& 3))
(mov (car a3) a3)
(mov (& 4) a2)
(mov 'omakeq a1)
(call #:microceyx:check-field)
(mov a1 (& 1))
(btcons (& 3) 104)
(bfnil (& 3) 105)
(mov 'errwna a2)
(bra 106)
105
(mov 'errbpa a2)
106
(mov (& 3) a3)
(mov 'omakeq a1)
(jcall error)
104
(mov (& 3) a4)
(mov (car a4) (& 0))
(mov (cdr a4) (& 3))
(push (@ 107))
(push (@ 108))
(push (& 6))
(push (& 4))
(mov '2 a4)
(jmp getfn)
108
(eval ())
(push a1)
(push '#:microceyx:res)
(push (& 3))
(mov '3 a4)
(jmp list)
107
(eval ())
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(bra 101)
102
(btnil (& 3) 110)
(mov (& 3) a3)
(mov 'errbpa a2)
(mov 'omakeq a1)
(jcall error)
110
(push (@ 111))
(push 'let)
(push (@ 112))
(push '#:microceyx:res)
(mov 'make a2)
(mov (& 8) a1)
(jcall symbol)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp list)
112
(eval ())
(jcall ncons)
(push a1)
(push (@ 113))
(mov (& 6) a1)
(jcall nreverse)
(push a1)
(push '(#:microceyx:res))
(mov '2 a4)
(jmp nconc)
113
(eval ())
(push a1)
(mov '3 a4)
(jmp mcons)
111
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry ogetq dmsubr)
(entry ogetq dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (car a3) a3)
(push a3)
(mov a1 a2)
(mov 'ogetq a1)
(call #:microceyx:check-record-or-tclass)
(mov a1 (& 2))
(mov (& 1) a3)
(mov a1 a2)
(mov 'ogetq a1)
(call #:microceyx:check-field)
(mov a1 (& 1))
(push (@ 101))
(push (@ 102))
(push (& 4))
(push a1)
(mov '2 a4)
(jmp getfn)
102
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp list)
101
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry oputq dmsubr)
(entry oputq dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push a3)
(mov (car a2) a2)
(push a2)
(mov a1 a2)
(mov 'oputq a1)
(call #:microceyx:check-record-or-tclass)
(mov a1 (& 3))
(mov (& 2) a3)
(mov a1 a2)
(mov 'oputq a1)
(call #:microceyx:check-field)
(mov a1 (& 2))
(push (@ 101))
(push (@ 102))
(push (& 5))
(push a1)
(mov '2 a4)
(jmp getfn)
102
(eval ())
(push a1)
(push (& 3))
(push (& 3))
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry omatchq dmsubr)
(entry omatchq dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push a4)
(mov a1 a2)
(mov 'omatchq a1)
(call #:microceyx:check-tclass)
(mov a1 (& 1))
(push (@ 101))
(push 'typep)
(push (& 2))
(push (@ 102))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry demethod dmsubr)
(entry demethod dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a4) a2)
(mov (car a4) a4)
(push a4)
(push a2)
(push (cdr a3))
(mov (car a3) a3)
(push a3)
101
(btsymb (& 4) 102)
(mov (& 4) a3)
(mov 'errsym a2)
(mov 'demethod a1)
(jcall error)
(mov a1 (& 4))
(bra 101)
102
(mov (& 4) a2)
(mov (pkgc a2) a2)
(mov 'demethod a1)
(call #:microceyx:check-record-or-tclass)
(push a1)
(mov (& 1) a1)
(jcall listp)
(bfnil a1 104)
(mov (& 1) a3)
(mov 'errnla a2)
(mov 'demethod a1)
(jcall error)
104
(push (@ 105))
(push 'de)
(push (& 7))
(mov (& 6) a2)
(mov (& 7) a1)
(jcall cons)
(push a1)
(bfnil (& 5) 106)
(mov (& 6) a4)
(bra 107)
106
(push (@ 108))
(push 'let)
(push (& 7))
(push nil)
109
(bfcons (& 1) 110)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a3)
(mov (& 9) a2)
(mov 'demethod a1)
(call #:microceyx:check-field)
(mov a1 (& 0))
(push (@ 111))
(push a1)
(push (@ 112))
(push (@ 113))
(push (& 13))
(push a1)
(mov '2 a4)
(jmp getfn)
113
(eval ())
(push a1)
(push (& 17))
(mov '2 a4)
(jmp list)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
111
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 109)
110
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (& 9))
(mov '3 a4)
(jmp mcons)
108
(eval ())
(jcall ncons)
(mov a1 a4)
107
(push a4)
(mov '4 a4)
(jmp mcons)
105
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry send-error subr2)
(entry send-error subr2)
(push a2)
(push a1)
(push (@ 101))
(push '*)
(push a1)
(mov '2 a4)
(jmp getfn)
101
(eval ())
(btnil a1 102)
(push (@ 104))
(push a1)
(push (& 3))
(mov '2 a4)
(jmp apply)
104
(eval ())
(adjstk '2)
(return)
102
(mov (& 1) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 a3)
(mov 'errudm a2)
(mov 'send a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry sendq dmsubr)
(entry sendq dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(push (@ 101))
(push 'send)
(push (@ 102))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
102
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp mcons)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry sendf dmsubr)
(entry sendf dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push (@ 101))
(push 'lambda)
(push '(#:microceyx:arg1))
(push (@ 102))
(push 'send)
(push a1)
(push '#:microceyx:arg1)
(push a4)
(mov '4 a4)
(jmp mcons)
102
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry sendfq dmsubr)
(entry sendfq dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(push (@ 101))
(push 'sendf)
(push (@ 102))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
102
(eval ())
(push a1)
(push (& 3))
(mov '3 a4)
(jmp mcons)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry plink nsubr)
(entry plink nsubr)
(cnbge a4 '1 101)
(mov 'plink a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(bfnil a1 102)
(mov (& 0) a1)
(jcall abbrevp)
(btnil a1 104)
(mov (& 0) a1)
(adjstk '1)
(jmp get-abbrev)
104
(mov (& 0) a1)
(adjstk '1)
(return)
102
(mov (car a1) a2)
(mov (& 0) a1)
(adjstk '1)
(jmp put-abbrev)
))
(loader '((end)))
