(loader '((title |date.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'date)))
(defvar #:sys-package:colon 'date)
(add-feature 'date)
(loader'((fentry week-day-number subr1)
(entry week-day-number subr1)
(push a1)
(jcall datep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'week-day-number a1)
(jcall error)
102
(hpxmov (& 0) '0 a4)
(hpxmov (& 0) '1 a3)
(hpxmov (& 0) '2 a2)
(push '5)
(push a4)
(mov a4 a1)
(jcall leap-number)
(push a1)
(mov (& 3) a1)
(jcall year-day-number)
(pop a4)
(plus a1 a4)
(pop a3)
(plus a4 a3)
(mov (& 0) a4)
(plus a3 a4)
(mov a4 (& 0))
(mov '7 a2)
(mov a4 a1)
(jcall modulo)
(mov a1 (& 0))
(cabne a1 '0 103)
(mov '7 a1)
(adjstk '2)
(return)
103
(adjstk '2)
(return)
))
(loader'((fentry year-day-number subr1)
(entry year-day-number subr1)
(push a1)
(jcall datep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'year-day-number a1)
(jcall error)
102
(hpxmov (& 0) '0 a4)
(hpxmov (& 0) '1 a3)
(hpxmov (& 0) '2 a2)
(push a2)
(push a4)
(cnble a3 '1 104)
(diff '1 a3)
(push '1)
(push a3)
(mov a3 a1)
(jcall numberp)
(bfnil a1 107)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
107
(push (@ 109))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
109
(eval ())
(bfnil a1 108)
(mov (& 2) a2)
(mov (& 1) a1)
(jcall month-length)
(mov (& 3) a4)
(plus a1 a4)
(mov a4 (& 3))
(push (@ 110))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
110
(eval ())
(mov a1 (& 1))
(bra 107)
108
(adjstk '2)
104
(mov (& 1) a1)
(adjstk '3)
(return)
))
(loader'((fentry month-length subr2)
(entry month-length subr2)
(push a2)
(push a1)
(mov (cvalq month-lengths) a2)
(jcall cassq)
(push a1)
(cabne (& 1) '2 101)
(mov (& 2) a1)
(jcall leap-year-p)
(btnil a1 101)
(mov '1 a4)
(bra 102)
101
(mov '0 a4)
102
(pop a3)
(plus a4 a3)
(mov a3 a1)
(adjstk '2)
(return)
))
(loader'((fentry leap-year-p subr1)
(entry leap-year-p subr1)
(push a1)
(mov '4 a2)
(jcall modulo)
(cabne a1 '0 101)
(mov '100 a2)
(mov (& 0) a1)
(jcall modulo)
(cabne a1 '0 103)
(mov '400 a2)
(mov (& 0) a1)
(jcall modulo)
(cabne a1 '0 105)
(mov 't a1)
(adjstk '1)
(return)
105
(mov nil a1)
(adjstk '1)
(return)
103
(mov 't a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry leap-number subr1)
(entry leap-number subr1)
(push a1)
(cnble a1 '0 101)
(diff '1 a1)
(mov a1 a4)
(bra 102)
101
(mov a1 a4)
102
(push a4)
(quo '4 a4)
(mov (& 0) a3)
(quo '400 a3)
(cnble (& 1) '0 103)
(mov '1 a2)
(bra 104)
103
(mov '0 a2)
104
(plus a2 a3)
(mov (& 0) a1)
(quo '100 a1)
(diff a1 a3)
(plus a3 a4)
(mov a4 a1)
(adjstk '2)
(return)
))
(putprop 'date '((() () () () () () () ()) year month day hour minute second msecond week-day) 'defstruct)
(loader'((fentry #:date:make subr0)
(entry #:date:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(jmp vector)
101
(eval ())
(mov 'date (cdr a1))
(return)
))
(loader'((fentry #:date:year nsubr)
(entry #:date:year nsubr)
(push a4)
(push (@ 101))
(push '#:date:year)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:date:year '#:date:year 'setf-inverse) '#:date:year)))
(if (featurep 'compiler) (progn (defmacro-open #:date:year (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:date:month nsubr)
(entry #:date:month nsubr)
(push a4)
(push (@ 101))
(push '#:date:month)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:date:month '#:date:month 'setf-inverse) '#:date:month)))
(if (featurep 'compiler) (progn (defmacro-open #:date:month (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:date:day nsubr)
(entry #:date:day nsubr)
(push a4)
(push (@ 101))
(push '#:date:day)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:date:day '#:date:day 'setf-inverse) '#:date:day)))
(if (featurep 'compiler) (progn (defmacro-open #:date:day (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:date:hour nsubr)
(entry #:date:hour nsubr)
(push a4)
(push (@ 101))
(push '#:date:hour)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:date:hour '#:date:hour 'setf-inverse) '#:date:hour)))
(if (featurep 'compiler) (progn (defmacro-open #:date:hour (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:date:minute nsubr)
(entry #:date:minute nsubr)
(push a4)
(push (@ 101))
(push '#:date:minute)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:date:minute '#:date:minute 'setf-inverse) '#:date:minute)))
(if (featurep 'compiler) (progn (defmacro-open #:date:minute (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:date:second nsubr)
(entry #:date:second nsubr)
(push a4)
(push (@ 101))
(push '#:date:second)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:date:second '#:date:second 'setf-inverse) '#:date:second)))
(if (featurep 'compiler) (progn (defmacro-open #:date:second (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:date:msecond nsubr)
(entry #:date:msecond nsubr)
(push a4)
(push (@ 101))
(push '#:date:msecond)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:date:msecond '#:date:msecond 'setf-inverse) '#:date:msecond)))
(if (featurep 'compiler) (progn (defmacro-open #:date:msecond (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(loader'((fentry #:date:week-day nsubr)
(entry #:date:week-day nsubr)
(push a4)
(push (@ 101))
(push '#:date:week-day)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:date:week-day '#:date:week-day 'setf-inverse) '#:date:week-day)))
(if (featurep 'compiler) (progn (defmacro-open #:date:week-day (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(#:messages:put-message '#:date:erryear 'french '"mauvaise annee" 'defmessage)
(#:messages:put-message '#:date:erryear 'english '"bad year" 'defmessage)
'#:date:erryear
(#:messages:put-message '#:date:errmonth 'french '"mauvais mois" 'defmessage)
(#:messages:put-message '#:date:errmonth 'english '"bad month" 'defmessage)
'#:date:errmonth
(#:messages:put-message '#:date:errday 'french '"mauvais jour" 'defmessage)
(#:messages:put-message '#:date:errday 'english '"bad day" 'defmessage)
'#:date:errday
(#:messages:put-message '#:date:errhour 'french '"mauvaise heure" 'defmessage)
(#:messages:put-message '#:date:errhour 'english '"bad hour" 'defmessage)
'#:date:errhour
(#:messages:put-message '#:date:errmin 'french '"mauvaise minute" 'defmessage)
(#:messages:put-message '#:date:errmin 'english '"bad minute" 'defmessage)
'#:date:errmin
(#:messages:put-message '#:date:errsec 'french '"mauvaise seconde" 'defmessage)
(#:messages:put-message '#:date:errsec 'english '"bad second" 'defmessage)
'#:date:errsec
(#:messages:put-message '#:date:errmsec 'french '"mauvaise milli-seconde" 'defmessage)
(#:messages:put-message '#:date:errmsec 'english '"bad millisecond" 'defmessage)
'#:date:errmsec
(#:messages:put-message '#:date:errwday 'french '"mauvais jour de semaine" 'defmessage)
(#:messages:put-message '#:date:errwday 'english '"bad day of the week" 'defmessage)
'#:date:errwday
(loader'((fentry create-date subr0)
(entry create-date subr0)
(jcall date)
(push a1)
(mov 'date (cdr a1))
(hpxmov a1 '0 a4)
(btfix a4 102)
(mov a1 a3)
(mov '#:date:erryear a2)
(mov 'date a1)
(jcall error)
102
(hpxmov (& 0) '1 a4)
(bffix a4 105)
(hpxmov (& 0) '1 a4)
(cnblt a4 '1 105)
(hpxmov (& 0) '1 a4)
(cnble a4 '12 104)
105
(mov (& 0) a3)
(mov '#:date:errmonth a2)
(mov 'date a1)
(jcall error)
104
(hpxmov (& 0) '2 a4)
(bffix a4 108)
(hpxmov (& 0) '2 a4)
(cnblt a4 '1 108)
(hpxmov (& 0) '2 a4)
(cnble a4 '31 107)
108
(mov (& 0) a3)
(mov '#:date:errday a2)
(mov 'date a1)
(jcall error)
107
(hpxmov (& 0) '3 a4)
(bffix a4 111)
(hpxmov (& 0) '3 a4)
(cnblt a4 '0 111)
(hpxmov (& 0) '3 a4)
(cnble a4 '23 110)
111
(mov (& 0) a3)
(mov '#:date:errhour a2)
(mov 'date a1)
(jcall error)
110
(hpxmov (& 0) '4 a4)
(bffix a4 114)
(hpxmov (& 0) '4 a4)
(cnblt a4 '0 114)
(hpxmov (& 0) '4 a4)
(cnble a4 '59 113)
114
(mov (& 0) a3)
(mov '#:date:errmin a2)
(mov 'date a1)
(jcall error)
113
(hpxmov (& 0) '5 a4)
(bfnil a4 116)
(hpmovx '0 (& 0) '5)
116
(hpxmov (& 0) '5 a4)
(bffix a4 119)
(hpxmov (& 0) '5 a4)
(cnblt a4 '0 119)
(hpxmov (& 0) '5 a4)
(cnble a4 '59 118)
119
(mov (& 0) a3)
(mov '#:date:errsec a2)
(mov 'date a1)
(jcall error)
118
(hpxmov (& 0) '6 a4)
(bfnil a4 121)
(hpmovx '0 (& 0) '6)
121
(hpxmov (& 0) '6 a4)
(bffix a4 124)
(hpxmov (& 0) '6 a4)
(cnblt a4 '0 124)
(hpxmov (& 0) '6 a4)
(cnble a4 '999 123)
124
(mov (& 0) a3)
(mov '#:date:errmsec a2)
(mov 'date a1)
(jcall error)
123
(hpxmov (& 0) '7 a4)
(bfnil a4 126)
(mov (& 0) a1)
(jcall week-day-number)
(hpmovx a1 (& 0) '7)
126
(hpxmov (& 0) '7 a4)
(bffix a4 129)
(hpxmov (& 0) '7 a4)
(cnblt a4 '1 129)
(hpxmov (& 0) '7 a4)
(cnble a4 '7 128)
129
(mov (& 0) a3)
(mov '#:date:errwday a2)
(mov 'date a1)
(jcall error)
128
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:date:prin subr1)
(entry #:date:prin subr1)
(btnil (cvalq #:system:print-for-read) 101)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '"#:date:#[")
(hpxmov a1 '0 a4)
(push a4)
(push '" ")
(hpxmov a1 '1 a4)
(push a4)
(push '" ")
(hpxmov a1 '2 a4)
(push a4)
(push '" ")
(hpxmov a1 '3 a4)
(push a4)
(push '" ")
(hpxmov a1 '4 a4)
(push a4)
(push '" ")
(hpxmov a1 '5 a4)
(push a4)
(push '" ")
(hpxmov a1 '6 a4)
(push a4)
(push '" ")
(hpxmov a1 '7 a4)
(push a4)
(push '"]")
(mov '17 a4)
(jmp prin)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(return)
101
(push (@ 104))
(jcall short-string-date)
(push a1)
(mov '1 a4)
(jmp prin)
104
(eval ())
(return)
))
(#:messages:put-message '#:date:janv 'french '"janv" 'defmessage)
(#:messages:put-message '#:date:janv 'english '"Jan" 'defmessage)
'#:date:janv
(#:messages:put-message '#:date:fevr 'french '"fevr" 'defmessage)
(#:messages:put-message '#:date:fevr 'english '"Feb" 'defmessage)
'#:date:fevr
(#:messages:put-message '#:date:mars 'french '"mars" 'defmessage)
(#:messages:put-message '#:date:mars 'english '"Mar" 'defmessage)
'#:date:mars
(#:messages:put-message '#:date:avr 'french '"avr" 'defmessage)
(#:messages:put-message '#:date:avr 'english '"Apr" 'defmessage)
'#:date:avr
(#:messages:put-message '#:date:mai 'french '"mai" 'defmessage)
(#:messages:put-message '#:date:mai 'english '"May" 'defmessage)
'#:date:mai
(#:messages:put-message '#:date:juin 'french '"juin" 'defmessage)
(#:messages:put-message '#:date:juin 'english '"Jun" 'defmessage)
'#:date:juin
(#:messages:put-message '#:date:juil 'french '"juil" 'defmessage)
(#:messages:put-message '#:date:juil 'english '"Jul" 'defmessage)
'#:date:juil
(#:messages:put-message '#:date:aout 'french '"aout" 'defmessage)
(#:messages:put-message '#:date:aout 'english '"Aug" 'defmessage)
'#:date:aout
(#:messages:put-message '#:date:sept 'french '"sept" 'defmessage)
(#:messages:put-message '#:date:sept 'english '"Sep" 'defmessage)
'#:date:sept
(#:messages:put-message '#:date:oct 'french '"oct" 'defmessage)
(#:messages:put-message '#:date:oct 'english '"Oct" 'defmessage)
'#:date:oct
(#:messages:put-message '#:date:nov 'french '"nov" 'defmessage)
(#:messages:put-message '#:date:nov 'english '"Nov" 'defmessage)
'#:date:nov
(#:messages:put-message '#:date:dec 'french '"dec" 'defmessage)
(#:messages:put-message '#:date:dec 'english '"Dec" 'defmessage)
'#:date:dec
(defvar short-month-names '((1 . #:date:janv) (2 . #:date:fevr) (3 . #:date:mars) (4 . #:date:avr) (5 . #:date:mai) (6 . #:date:juin) (7 . #:date:juil) (8 . #:date:aout) (9 . #:date:sept) (10 . #:date:oct) (11 . #:date:nov) (12 . #:date:dec)))
(#:messages:put-message '#:date:lun 'french '"lun" 'defmessage)
(#:messages:put-message '#:date:lun 'english '"Mon" 'defmessage)
'#:date:lun
(#:messages:put-message '#:date:mar 'french '"mar" 'defmessage)
(#:messages:put-message '#:date:mar 'english '"Tue" 'defmessage)
'#:date:mar
(#:messages:put-message '#:date:mer 'french '"mer" 'defmessage)
(#:messages:put-message '#:date:mer 'english '"Wed" 'defmessage)
'#:date:mer
(#:messages:put-message '#:date:jeu 'french '"jeu" 'defmessage)
(#:messages:put-message '#:date:jeu 'english '"Thu" 'defmessage)
'#:date:jeu
(#:messages:put-message '#:date:ven 'french '"ven" 'defmessage)
(#:messages:put-message '#:date:ven 'english '"Fri" 'defmessage)
'#:date:ven
(#:messages:put-message '#:date:sam 'french '"sam" 'defmessage)
(#:messages:put-message '#:date:sam 'english '"Sat" 'defmessage)
'#:date:sam
(#:messages:put-message '#:date:dim 'french '"dim" 'defmessage)
(#:messages:put-message '#:date:dim 'english '"Sun" 'defmessage)
'#:date:dim
(defvar short-day-names '((1 . #:date:lun) (2 . #:date:mar) (3 . #:date:mer) (4 . #:date:jeu) (5 . #:date:ven) (6 . #:date:sam) (7 . #:date:dim)))
(defvar month-lengths '((1 . 31) (2 . 28) (3 . 31) (4 . 30) (5 . 31) (6 . 30) (7 . 31) (8 . 31) (9 . 30) (10 . 31) (11 . 30) (12 . 31)))
(loader'((fentry short-string-date subr1)
(entry short-string-date subr1)
(push a1)
(jcall datep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'short-string-date a1)
(jcall error)
102
(hpxmov (& 0) '0 a1)
(mov '100 a2)
(jcall modulo)
(push a1)
(hpxmov (& 1) '1 a1)
(mov (cvalq short-month-names) a2)
(jcall cassq)
(jcall get-message)
(push a1)
(hpxmov (& 2) '2 a4)
(push a4)
(hpxmov (& 3) '3 a3)
(push a3)
(hpxmov (& 4) '4 a2)
(push a2)
(hpxmov (& 5) '5 a4)
(push a4)
(hpxmov (& 6) '7 a1)
(mov (cvalq short-day-names) a2)
(jcall cassq)
(jcall get-message)
(push a1)
(mov '32 a2)
(mov '24 a1)
(jcall makestring)
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp current-language)
104
(eval ())
(cabne a1 'english 105)
(push (@ 106))
(push (& 1))
(push '0)
(push (& 4))
(push '0)
(mov '4 a4)
(jmp bltstring)
106
(eval ())
(push (@ 107))
(push (& 1))
(mov (& 7) a1)
(jcall slength)
(mov '11 a4)
(diff a1 a4)
(push a4)
(push (& 8))
(push '0)
(mov '4 a4)
(jmp bltstring)
107
(eval ())
(push (@ 108))
(push (& 1))
(push '4)
(push (& 9))
(push '0)
(mov '4 a4)
(jmp bltstring)
108
(eval ())
(bra 103)
105
(push (@ 110))
(push (& 1))
(push '0)
(push (& 4))
(push '0)
(mov '4 a4)
(jmp bltstring)
110
(eval ())
(push (@ 111))
(push (& 1))
(mov (& 7) a1)
(jcall slength)
(mov '6 a4)
(diff a1 a4)
(push a4)
(push (& 8))
(push '0)
(mov '4 a4)
(jmp bltstring)
111
(eval ())
(push (@ 112))
(push (& 1))
(push '7)
(push (& 9))
(push '0)
(mov '4 a4)
(jmp bltstring)
112
(eval ())
103
(push (@ 113))
(push (& 1))
(mov (& 9) a1)
(jcall slength)
(mov '14 a4)
(diff a1 a4)
(push a4)
(push (& 10))
(push '0)
(mov '4 a4)
(jmp bltstring)
113
(eval ())
(push (@ 114))
(push (& 1))
(push '15)
(push '"00:00:00")
(push '0)
(mov '4 a4)
(jmp bltstring)
114
(eval ())
(push (@ 115))
(push (& 1))
(mov (& 6) a1)
(jcall slength)
(mov '17 a4)
(diff a1 a4)
(push a4)
(push (& 7))
(push '0)
(mov '4 a4)
(jmp bltstring)
115
(eval ())
(push (@ 116))
(push (& 1))
(mov (& 5) a1)
(jcall slength)
(mov '20 a4)
(diff a1 a4)
(push a4)
(push (& 6))
(push '0)
(mov '4 a4)
(jmp bltstring)
116
(eval ())
(push (@ 117))
(push (& 1))
(mov (& 4) a1)
(jcall slength)
(mov '23 a4)
(diff a1 a4)
(push a4)
(push (& 5))
(push '0)
(mov '4 a4)
(jmp bltstring)
117
(eval ())
(mov (& 0) a1)
(adjstk '9)
(return)
))
(loader'((fentry datep subr1)
(entry datep subr1)
(bfvect a1 101)
(cabne (cdr a1) 'date 101)
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader '((end)))
