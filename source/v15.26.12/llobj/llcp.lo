(loader '((title |llcp.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'cpmac)))
(defvar #:sys-package:colon 'compiler)
(defvar #:compiler:open-p (if (boundp '#:compiler:open-p) #:compiler:open-p t))
(defvar #:compiler:exported-env (if (boundp '#:compiler:exported-env) #:compiler:exported-env ()))
(defvar dynamic-flag (if (featurep 'complice) '#:complice:globalvar '#:system:loaded-from-file))
(loader'((fentry defmacro-open fsubr)
(entry defmacro-open fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov 'macro-open a2)
(jcall symbol)
(mov (& 0) a3)
(mov 'expr a2)
(jcall setfn)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry make-macro-open subr2)
(entry make-macro-open subr2)
(push a2)
(push a1)
(mov 'macro-open a2)
(jcall symbol)
(mov (& 1) a3)
(mov 'expr a2)
(jcall setfn)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry macro-openp subr1)
(entry macro-openp subr1)
(mov 'macro-open a2)
(jmp getfn1)
))
(loader'((fentry remove-macro-open subr1)
(entry remove-macro-open subr1)
(push a1)
(mov 'macro-open a2)
(jcall getsymb1)
(btnil a1 101)
(mov 'macro-open a2)
(mov (& 0) a1)
(jcall getsymb1)
(adjstk '1)
(jmp remob)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:compiler:macroexpand subr1)
(entry #:compiler:macroexpand subr1)
(push a1)
(bfcons a1 101)
(bfsymb (car a1) 101)
(push nil)
(push (car a1))
(push (cdr a1))
(push nil)
(push '0)
(push nil)
(push (cvalq #:system:debug))
(mov (& 1) (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov (& 3) (cvalq #:system:print-msgs))
(push (cvalq #:system:error-flag))
(mov (& 5) (cvalq #:system:error-flag))
(push '3)
(push '(#:system:debug #:system:print-msgs #:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(btnil (cvalq #:compiler:open-p) 104)
(mov 'macro-open a2)
(mov (& 17) a1)
(jcall getfn1)
(mov a1 (& 18))
(btnil a1 104)
(push (@ 107))
(push (& 19))
(mov (& 21) a4)
(push (cdr a4))
(mov '2 a4)
(jmp apply)
107
(eval ())
(bfnil a1 105)
(mov (& 19) a1)
(bra 105)
104
(mov (& 19) a2)
(mov (cdr a2) a2)
(mov (& 17) a1)
(call #:compiler:macroexpand-internal)
(bfnil a1 105)
(mov (& 17) a1)
(jcall typefn)
(cabne a1 'macro 109)
(push (@ 111))
(mov (& 18) a1)
(jcall valfn)
(mov a1 a2)
(mov 'lambda a1)
(jcall cons)
(push a1)
(push (& 21))
(mov '2 a4)
(jmp apply)
111
(eval ())
(bra 105)
109
(mov (& 17) a1)
(jcall typefn)
(cabne a1 'dmacro 112)
(push (@ 114))
(mov (& 18) a1)
(jcall valfn)
(mov a1 a2)
(mov 'lambda a1)
(jcall cons)
(push a1)
(mov (& 21) a4)
(push (cdr a4))
(mov '2 a4)
(jmp apply)
114
(eval ())
(bra 105)
112
(mov (& 17) a1)
(jcall typefn)
(cabne a1 'msubr 115)
(push (@ 117))
(mov (& 18) a1)
(jcall valfn)
(push a1)
(push (& 21))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
117
(eval ())
(bra 105)
115
(mov (& 17) a1)
(jcall typefn)
(cabne a1 'dmsubr 118)
(push (@ 120))
(mov (& 18) a1)
(jcall valfn)
(push a1)
(mov (& 21) a4)
(push (cdr a4))
(push nil)
(push nil)
(mov '4 a4)
(jmp call)
120
(eval ())
(bra 105)
118
(mov (& 19) a1)
105
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(mov (& 7) (cvalq #:system:print-msgs))
(mov (& 8) (cvalq #:system:debug))
(adjstk '12)
(mov a1 (& 2))
(btcons a1 121)
(push (@ 123))
(push '#:compiler:macro-expand-error)
(push (& 3))
(mov '2 a4)
(jmp funcall)
123
(eval ())
(adjstk '4)
(return)
121
(bfcons (car a1) 124)
(cabne (& 3) (car a1) 126)
(mov (car a1) a4)
(cabne (& 1) (car a4) 126)
(mov (car a1) a3)
(cabeq (& 0) (cdr a3) 124)
126
(mov (car a1) a1)
(mov (& 2) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (car a1) a1)
(jcall cons)
(adjstk '4)
(jmp #:compiler:macroexpand)
124
(mov (car a1) a1)
(adjstk '4)
(return)
101
(adjstk '1)
(return)
))
(loader'((entry #:compiler:macroexpand-internal subr2)
(push a2)
(push a1)
(mov (cvalq #:compiler:open-p) a1)
(btnil a1 102)
(mov (& 0) a1)
(call #:compiler:macroexpand-internal-open)
102
(bfnil a1 101)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:compiler:macroexpand-internal-close)
101
(adjstk '2)
(return)
))
(loader'((entry #:compiler:macroexpand-internal-close subr2)
(push a2)
(cabne a1 'cond 102)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:cond)
102
(cabne a1 'unless 103)
(push (@ 104))
(push 'if)
(push (@ 105))
(push 'not)
(push (car a2))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(adjstk '1)
(return)
103
(cabne a1 'when 106)
(push (@ 107))
(push 'if)
(push (car a2))
(mov (cdr a2) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(return)
106
(cabne a1 'ifn 108)
(push (@ 109))
(push 'if)
(push (@ 110))
(push 'not)
(push (car a2))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov (& 3) a4)
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
109
(eval ())
(adjstk '1)
(return)
108
(cabne a1 'neq 111)
(push (@ 112))
(push 'not)
(mov 'eq a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
112
(eval ())
(adjstk '1)
(return)
111
(cabne a1 'nequal 113)
(push (@ 114))
(push 'not)
(mov 'equal a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
114
(eval ())
(adjstk '1)
(return)
113
(cabne a1 'null 115)
(mov 'not a1)
(adjstk '1)
(jmp cons)
115
(cabne a1 'atomp 116)
(mov 'atom a1)
(adjstk '1)
(jmp cons)
116
(cabne a1 'decr 117)
(push (@ 118))
(push 'setq)
(push (car a2))
(btnil (cdr a2) 119)
(mov '|-| a1)
(bra 120)
119
(mov '|1-| a1)
120
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
118
(eval ())
(adjstk '1)
(return)
117
(cabne a1 'incr 121)
(push (@ 122))
(push 'setq)
(push (car a2))
(btnil (cdr a2) 123)
(mov '|+| a1)
(bra 124)
123
(mov '|1+| a1)
124
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
122
(eval ())
(adjstk '1)
(return)
121
(cabne a1 'newl 125)
(push (@ 126))
(push 'setq)
(push (car a2))
(push (@ 127))
(push 'cons)
(mov (cdr a2) a4)
(push (car a4))
(push (car a2))
(mov '3 a4)
(jmp list)
127
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
126
(eval ())
(adjstk '1)
(return)
125
(cabne a1 'nextl 128)
(push (@ 129))
(push 'prog1)
(btnil (cdr a2) 130)
(push (@ 132))
(push 'setq)
(mov (cdr a2) a4)
(push (car a4))
(push (@ 133))
(push 'car)
(push (car a2))
(mov '2 a4)
(jmp list)
133
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
132
(eval ())
(mov a1 a4)
(bra 131)
130
(push (@ 134))
(push 'car)
(push (car a2))
(mov '2 a4)
(jmp list)
134
(eval ())
(mov a1 a4)
131
(push a4)
(push (@ 135))
(push 'setq)
(mov (& 5) a4)
(push (car a4))
(push (@ 136))
(push 'cdr)
(push (car a4))
(mov '2 a4)
(jmp list)
136
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
135
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
129
(eval ())
(adjstk '1)
(return)
128
(cabne a1 'newr 137)
(push (@ 138))
(push 'setq)
(push (car a2))
(push (@ 139))
(push 'let)
(push (@ 140))
(push '#:compiler:newr)
(mov (cdr a2) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
140
(eval ())
(jcall ncons)
(push a1)
(push (@ 141))
(push 'nconc)
(mov (& 8) a4)
(push (car a4))
(push '((ncons #:compiler:newr)))
(mov '3 a4)
(jmp mcons)
141
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
139
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
138
(eval ())
(adjstk '1)
(return)
137
(cabne a1 'dynamic-let 142)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:dynamic-let)
142
(cabne a1 'dynamic 143)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:dynamic)
143
(cabne a1 'return 144)
(push (@ 145))
(push 'return-from)
(push nil)
(push a2)
(mov '3 a4)
(jmp mcons)
145
(eval ())
(adjstk '1)
(return)
144
(cabne a1 'map 146)
(push a2)
(mov 'null a3)
(mov 'map a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
146
(cabne a1 'mapl 147)
(push a2)
(mov 'null a3)
(mov 'map a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
147
(cabne a1 'maplist 148)
(push a2)
(mov 'cons a3)
(mov 'map a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
148
(cabne a1 'mapcon 149)
(push a2)
(mov 'nreconc a3)
(mov 'map a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
149
(cabne a1 'mapc 150)
(push a2)
(mov 'null a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
150
(cabne a1 'mapcar 151)
(push a2)
(mov 'cons a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
151
(cabne a1 'mapcan 152)
(push a2)
(mov 'nreconc a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
152
(cabne a1 'every 153)
(push a2)
(mov 'every a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
153
(cabne a1 'any 154)
(push a2)
(mov 'any a3)
(mov 'mapc a2)
(pop a1)
(adjstk '1)
(bra #:compiler:map)
154
(cabne a1 'mapvector 155)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mapvector)
155
(cabne a1 'untilexit 156)
(push (@ 157))
(push 'tag)
(push (car a2))
(push (@ 158))
(push 'while)
(push 't)
(push (cdr a2))
(mov '3 a4)
(jmp mcons)
158
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
157
(eval ())
(adjstk '1)
(return)
156
(cabne a1 'loop 159)
(push (@ 160))
(push 'while)
(push 't)
(push a2)
(mov '3 a4)
(jmp mcons)
160
(eval ())
(adjstk '1)
(return)
159
(cabne a1 'catcherror 161)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:catcherror)
161
(cabne a1 'errset 162)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:errset)
162
(cabne a1 'err 163)
(push (@ 164))
(push 'exit)
(push '#:system:error-tag)
(push a2)
(mov '3 a4)
(jmp mcons)
164
(eval ())
(adjstk '1)
(return)
163
(cabne a1 'eval-when 165)
(mov a2 a1)
(adjstk '1)
(bra #:compiler:mc:eval-when)
165
(cabne a1 'desetq 166)
(push (@ 167))
(push 'deset)
(push (@ 168))
(push 'quote)
(push (car a2))
(mov '2 a4)
(jmp list)
168
(eval ())
(push a1)
(mov (& 3) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '3 a4)
(jmp list)
167
(eval ())
(adjstk '1)
(return)
166
(cabne a1 'defprop 169)
(push (@ 170))
(push 'putprop)
(push (@ 171))
(push 'quote)
(push (car a2))
(mov '2 a4)
(jmp list)
171
(eval ())
(push a1)
(push (@ 172))
(push 'quote)
(mov (& 5) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
172
(eval ())
(push a1)
(push (@ 173))
(push 'quote)
(mov (& 6) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
173
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
170
(eval ())
(adjstk '1)
(return)
169
(cabne a1 'psetq 174)
(mov (cdr a2) a4)
(btnil (cdr a4) 175)
(push (@ 177))
(push 'setq)
(push (car a2))
(push (@ 178))
(push 'prog1)
(mov (cdr a2) a3)
(push (car a3))
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov 'psetq a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
178
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
177
(eval ())
(adjstk '1)
(return)
175
(push (@ 179))
(push 'setq)
(push (car a2))
(mov (cdr a2) a3)
(push (car a3))
(mov '3 a4)
(jmp list)
179
(eval ())
(adjstk '1)
(return)
174
(cabne a1 'setqq 180)
(mov (cdr a2) a4)
(btnil (cdr a4) 181)
(push (@ 183))
(push 'progn)
(push (@ 184))
(push 'setq)
(push (car a2))
(push (@ 185))
(push 'quote)
(mov (cdr a2) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
185
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
184
(eval ())
(push a1)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov 'setqq a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
183
(eval ())
(adjstk '1)
(return)
181
(push (@ 186))
(push 'setq)
(push (car a2))
(push (@ 187))
(push 'quote)
(mov (cdr a2) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
187
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
186
(eval ())
(adjstk '1)
(return)
180
(cabne a1 'letvq 188)
(push (@ 189))
(push (@ 190))
(push 'lambda)
(mov (car a2) a1)
(jcall ncons)
(push a1)
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
190
(eval ())
(push a1)
(mov (& 2) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
189
(eval ())
(adjstk '1)
(return)
188
(cabne a1 'prog2 191)
(push (@ 192))
(push 'progn)
(push (car a2))
(mov (cdr a2) a2)
(mov 'prog1 a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
192
(eval ())
(adjstk '1)
(return)
191
(cabne a1 'lognot 193)
(push (@ 194))
(push 'logxor)
(push (car a2))
(push '(-1))
(mov '3 a4)
(jmp mcons)
194
(eval ())
(adjstk '1)
(return)
193
(cabne a1 'add1 195)
(push (@ 196))
(push 'add)
(push (car a2))
(push '(1))
(mov '3 a4)
(jmp mcons)
196
(eval ())
(adjstk '1)
(return)
195
(cabne a1 'sub1 197)
(push (@ 198))
(push 'sub)
(push (car a2))
(push '(1))
(mov '3 a4)
(jmp mcons)
198
(eval ())
(adjstk '1)
(return)
197
(cabne a1 'time 199)
(mov (car a2) a1)
(adjstk '1)
(bra #:compiler:mc:time)
199
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:compiler:macroexpand-internal-open subr2)
(cabne a1 'caar 102)
(push (@ 103))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(return)
102
(cabne a1 'cadr 104)
(push (@ 105))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(return)
104
(cabne a1 'cdar 106)
(push (@ 107))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
107
(eval ())
(return)
106
(cabne a1 'cddr 108)
(push (@ 109))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
109
(eval ())
(return)
108
(cabne a1 'caaar 110)
(push (@ 111))
(push 'car)
(push (@ 112))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
111
(eval ())
(return)
110
(cabne a1 'caadr 113)
(push (@ 114))
(push 'car)
(push (@ 115))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
114
(eval ())
(return)
113
(cabne a1 'cadar 116)
(push (@ 117))
(push 'car)
(push (@ 118))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
118
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
117
(eval ())
(return)
116
(cabne a1 'caddr 119)
(push (@ 120))
(push 'car)
(push (@ 121))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
120
(eval ())
(return)
119
(cabne a1 'cdaar 122)
(push (@ 123))
(push 'cdr)
(push (@ 124))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
124
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
123
(eval ())
(return)
122
(cabne a1 'cdadr 125)
(push (@ 126))
(push 'cdr)
(push (@ 127))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
127
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
126
(eval ())
(return)
125
(cabne a1 'cddar 128)
(push (@ 129))
(push 'cdr)
(push (@ 130))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
130
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
129
(eval ())
(return)
128
(cabne a1 'cdddr 131)
(push (@ 132))
(push 'cdr)
(push (@ 133))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
133
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
132
(eval ())
(return)
131
(cabne a1 'caaaar 134)
(push (@ 135))
(push 'car)
(push (@ 136))
(push 'car)
(push (@ 137))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
137
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
136
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
135
(eval ())
(return)
134
(cabne a1 'caaadr 138)
(push (@ 139))
(push 'car)
(push (@ 140))
(push 'car)
(push (@ 141))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
141
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
140
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
139
(eval ())
(return)
138
(cabne a1 'caadar 142)
(push (@ 143))
(push 'car)
(push (@ 144))
(push 'car)
(push (@ 145))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
145
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
144
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
143
(eval ())
(return)
142
(cabne a1 'caaddr 146)
(push (@ 147))
(push 'car)
(push (@ 148))
(push 'car)
(push (@ 149))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
149
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
148
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
147
(eval ())
(return)
146
(cabne a1 'cadaar 150)
(push (@ 151))
(push 'car)
(push (@ 152))
(push 'cdr)
(push (@ 153))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
153
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
152
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
151
(eval ())
(return)
150
(cabne a1 'cadadr 154)
(push (@ 155))
(push 'car)
(push (@ 156))
(push 'cdr)
(push (@ 157))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
157
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
156
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
155
(eval ())
(return)
154
(cabne a1 'caddar 158)
(push (@ 159))
(push 'car)
(push (@ 160))
(push 'cdr)
(push (@ 161))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
161
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
160
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
159
(eval ())
(return)
158
(cabne a1 'cadddr 162)
(push (@ 163))
(push 'car)
(push (@ 164))
(push 'cdr)
(push (@ 165))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
165
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
164
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
163
(eval ())
(return)
162
(cabne a1 'cdaaar 166)
(push (@ 167))
(push 'cdr)
(push (@ 168))
(push 'car)
(push (@ 169))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
169
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
168
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
167
(eval ())
(return)
166
(cabne a1 'cdaadr 170)
(push (@ 171))
(push 'cdr)
(push (@ 172))
(push 'car)
(push (@ 173))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
173
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
172
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
171
(eval ())
(return)
170
(cabne a1 'cdadar 174)
(push (@ 175))
(push 'cdr)
(push (@ 176))
(push 'car)
(push (@ 177))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
177
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
176
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
175
(eval ())
(return)
174
(cabne a1 'cdaddr 178)
(push (@ 179))
(push 'cdr)
(push (@ 180))
(push 'car)
(push (@ 181))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
181
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
180
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
179
(eval ())
(return)
178
(cabne a1 'cddaar 182)
(push (@ 183))
(push 'cdr)
(push (@ 184))
(push 'cdr)
(push (@ 185))
(push 'car)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
185
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
184
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
183
(eval ())
(return)
182
(cabne a1 'cddadr 186)
(push (@ 187))
(push 'cdr)
(push (@ 188))
(push 'cdr)
(push (@ 189))
(push 'car)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
189
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
188
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
187
(eval ())
(return)
186
(cabne a1 'cdddar 190)
(push (@ 191))
(push 'cdr)
(push (@ 192))
(push 'cdr)
(push (@ 193))
(push 'cdr)
(mov 'car a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
193
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
192
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
191
(eval ())
(return)
190
(cabne a1 'cddddr 194)
(push (@ 195))
(push 'cdr)
(push (@ 196))
(push 'cdr)
(push (@ 197))
(push 'cdr)
(mov 'cdr a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
197
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
196
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
195
(eval ())
(return)
194
(mov nil a1)
(return)
))
(loader'((entry #:compiler:mc:catcherror subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(cabne a1 't 101)
(push (@ 103))
(push 'let)
(push '((#:system:error-flag t)))
(push (@ 104))
(push 'tag)
(push '#:system:error-tag)
(push (@ 105))
(push 'ncons)
(mov a4 a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
103
(eval ())
(adjstk '1)
(return)
101
(bfnil a1 106)
(push (@ 108))
(push 'let)
(push '((#:system:error-flag ()) (#:system:print-msgs 0) (#:system:debug ())))
(push (@ 109))
(push 'tag)
(push '#:system:error-tag)
(push (@ 110))
(push 'ncons)
(mov a4 a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
109
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
108
(eval ())
(adjstk '1)
(return)
106
(push (@ 111))
(push 'let)
(push (@ 112))
(push '#:system:error-flag)
(push a1)
(mov '2 a4)
(jmp list)
112
(eval ())
(jcall ncons)
(push a1)
(push (@ 113))
(push 'let)
(push '((#:system:print-msgs (if #:system:error-flag #:system:print-msgs 0)) (#:system:debug (if #:system:error-flag #:system:debug ()))))
(push (@ 114))
(push 'tag)
(push '#:system:error-tag)
(push (@ 115))
(push 'ncons)
(mov (& 11) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
114
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
113
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
111
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:mc:cond subr1)
(push a1)
(bfnil (cdr a1) 101)
(mov (car a1) a4)
(btnil (cdr a4) 103)
(mov (car a1) a3)
(cabne (car a3) 't 105)
(mov (car a1) a2)
(mov (cdr a2) a2)
(mov 'progn a1)
(adjstk '1)
(jmp cons)
105
(push (@ 107))
(push 'if)
(mov (car a1) a2)
(push (car a2))
(mov (car a1) a2)
(mov (cdr a2) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(return)
103
(mov (car a1) a1)
(mov (car a1) a1)
(bfnil a1 108)
(mov 'nil a1)
108
(adjstk '1)
(return)
101
(mov (car a1) a4)
(btnil (cdr a4) 109)
(push (@ 111))
(push 'if)
(mov (car a1) a3)
(push (car a3))
(mov (car a1) a2)
(mov (cdr a2) a2)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov (& 4) a2)
(mov (cdr a2) a2)
(mov 'cond a1)
(jcall cons)
(push a1)
(mov '4 a4)
(jmp list)
111
(eval ())
(adjstk '1)
(return)
109
(push (@ 112))
(push 'or)
(mov (car a1) a3)
(push (car a3))
(mov (cdr a1) a2)
(mov 'cond a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
112
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:mc:dynamic subr1)
(push a1)
(mov 'complice a1)
(jcall featurep)
(btnil a1 102)
(mov (& 0) a1)
(mov (cvalq dynamic-flag) a3)
(mov 't a2)
(mov (car a1) a1)
(jcall putprop)
102
(mov (& 0) a1)
(mov (car a1) a1)
(adjstk '1)
(return)
))
(loader'((entry #:compiler:mc:dynamic-let subr1)
(push a1)
(mov 'complice a1)
(jcall featurep)
(btnil a1 102)
(mov (& 0) a4)
(push (car a4))
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cvalq dynamic-flag) a3)
(mov 't a2)
(mov (& 0) a1)
(jcall putprop)
(adjstk '1)
(bra 103)
104
(adjstk '1)
102
(push (@ 105))
(push 'let)
(mov (& 2) a4)
(push (car a4))
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
105
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:mc:eval-when subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(push 'nil)
(mov a1 a2)
(mov 'load a1)
(jcall memq)
(btnil a1 102)
(mov (& 1) a2)
(mov 'progn a1)
(jcall cons)
(mov a1 (& 0))
102
(mov (& 2) a2)
(mov 'compile a1)
(jcall memq)
(btnil a1 104)
(mov (cvalq #:compiler:exported-env) a2)
(mov (& 1) a1)
(jcall member)
(bfnil a1 104)
(mov (& 1) a1)
(jcall copy)
(mov (cvalq #:compiler:exported-env) a2)
(jcall cons)
(mov a1 (cvalq #:compiler:exported-env))
(mov (& 1) a1)
(jcall eprogn)
104
(mov (& 2) a2)
(mov 'local-compile a1)
(jcall memq)
(btnil a1 108)
(mov (& 1) a1)
(jcall eprogn)
108
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((entry #:compiler:mc:errset subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push (@ 101))
(push 'let)
(push (@ 102))
(push '#:system:error-flag)
(push a4)
(mov '2 a4)
(jmp list)
102
(eval ())
(jcall ncons)
(push a1)
(push (@ 103))
(push 'tag)
(push '#:system:error-tag)
(push (@ 104))
(push 'ncons)
(push (& 8))
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:map subr3)
(push a3)
(push a2)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov a4 a1)
(jcall length)
(push nil)
(push '#:system:map:r)
(push a1)
(bra 102)
101
(push a1)
(push (@ 103))
(push '"arg")
(mov (& 3) a1)
(jcall |1-|)
(mov a1 (& 3))
(push a1)
(mov '2 a4)
(jmp concat)
103
(eval ())
(mov a1 a2)
(mov '#:system:map a1)
(jcall symbol)
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
(pop a1)
102
(sobgez a1 101)
(push (@ 104))
(push 'lambda)
(push (& 4))
(mov (& 8) a2)
(mov (& 5) a1)
(call #:compiler:map-next-arg)
(mov (& 7) a2)
(call #:compiler:map-funcall)
(mov (& 4) a3)
(mov (& 9) a2)
(call #:compiler:map-next-res)
(push a1)
(push (& 6))
(push nil)
105
(bfcons (& 1) 106)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 107))
(push 'consp)
(push (& 2))
(mov '2 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 105)
106
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a3)
(mov (& 10) a2)
(pop a1)
(call #:compiler:map-while)
(mov (& 4) a3)
(mov (& 9) a2)
(call #:compiler:map-result)
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(mov (& 3) a2)
(adjstk '7)
(jmp cons)
))
(loader'((entry #:compiler:mapvector subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push (@ 101))
(push 'let*)
(push (@ 102))
(push '(#:system:map:r 0))
(push (@ 103))
(push '#:system:map:v)
(push a4)
(mov '2 a4)
(jmp list)
103
(eval ())
(push a1)
(push '((#:system:map:n (vlength #:system:map:v))))
(mov '3 a4)
(jmp mcons)
102
(eval ())
(push a1)
(push (@ 104))
(push 'while)
(push '(lt #:system:map:r #:system:map:n))
(mov (& 6) a2)
(mov '((vref #:system:map:v #:system:map:r)) a1)
(call #:compiler:map-funcall)
(push a1)
(push '((setq #:system:map:r (add1 #:system:map:r))))
(mov '4 a4)
(jmp mcons)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:map-next-arg subr2)
(push a2)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 103))
(push 'prog1)
(cabne (& 5) 'map 104)
(mov (& 2) a4)
(bra 105)
104
(push (@ 106))
(push 'car)
(push (& 4))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov a1 a4)
105
(push a4)
(push (@ 107))
(push 'setq)
(push (& 5))
(push (@ 108))
(push 'cdr)
(push (& 8))
(mov '2 a4)
(jmp list)
108
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
103
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(loader'((entry #:compiler:map-funcall subr2)
(push a2)
(push a1)
(btcons a2 101)
(push (@ 103))
(push 'funcall)
(push a2)
(push a1)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(adjstk '2)
(return)
101
(mov (car a2) a4)
(cabeq a4 'function 106)
(cabne a4 'quote 104)
106
(mov (cdr a2) a3)
(bfsymb (car a3) 107)
(mov (cdr a2) a1)
(mov (car a1) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 '() 109)
(cabeq a4 'fexpr 109)
(cabne a4 'fsubr 107)
109
(push (@ 110))
(push 'funcall)
(push (& 3))
(push (& 3))
(mov '3 a4)
(jmp mcons)
110
(eval ())
(adjstk '2)
(return)
107
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(adjstk '2)
(jmp cons)
104
(cabne (car a2) 'lambda 111)
(push a2)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp cons)
111
(cabne (car a2) 'flambda 113)
(mov (cdr a2) a2)
(mov 'lambda a1)
(jcall cons)
(mov (& 0) a2)
(adjstk '2)
(jmp cons)
113
(cabne (car a2) 'mlambda 115)
(push (@ 117))
(push 'funcall)
(push a2)
(push a1)
(mov '3 a4)
(jmp mcons)
117
(eval ())
(adjstk '2)
(return)
115
(push (@ 118))
(push 'funcall)
(push a2)
(push a1)
(mov '3 a4)
(jmp mcons)
118
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:compiler:map-next-res subr3)
(push a1)
(mov a2 a1)
(cabne a1 'null 102)
(mov (& 0) a1)
(adjstk '1)
(return)
102
(cabne a1 'cons 103)
(push (@ 104))
(push 'setq)
(push a3)
(push (@ 105))
(push 'cons)
(push (& 5))
(push a3)
(mov '3 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
104
(eval ())
(adjstk '1)
(return)
103
(cabne a1 'nreconc 106)
(push (@ 107))
(push 'setq)
(push a3)
(push (@ 108))
(push 'nreconc)
(push (& 5))
(push a3)
(mov '3 a4)
(jmp list)
108
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
107
(eval ())
(adjstk '1)
(return)
106
(push (@ 110))
(push 'setq)
(push a3)
(push (& 3))
(mov '3 a4)
(jmp list)
110
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:compiler:map-while subr3)
(push a1)
(mov a2 a1)
(cabeq a1 'null 103)
(cabeq a1 'cons 103)
(cabne a1 'nreconc 102)
103
(push (@ 104))
(push 'while)
(mov a3 a2)
(mov 'and a1)
(jcall cons)
(push a1)
(push (& 3))
(mov '3 a4)
(jmp list)
104
(eval ())
(adjstk '1)
(return)
102
(cabne a1 'every 105)
(push (@ 106))
(push 'while)
(push (@ 107))
(push a3)
(mov (& 4) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp append)
107
(eval ())
(mov a1 a2)
(mov 'and a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(adjstk '1)
(return)
105
(cabne a1 'any 108)
(push (@ 109))
(push 'while)
(push (@ 110))
(push a3)
(push (@ 111))
(push 'not)
(push (& 6))
(mov '2 a4)
(jmp list)
111
(eval ())
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp append)
110
(eval ())
(mov a1 a2)
(mov 'and a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
109
(eval ())
(adjstk '1)
(return)
108
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:compiler:map-result subr3)
(push a3)
(push a1)
(mov a2 a1)
(cabne a1 'null 102)
(mov (& 0) a1)
(adjstk '2)
(return)
102
(cabeq a1 'cons 104)
(cabne a1 'nreconc 103)
104
(push (@ 105))
(push 'lambda)
(mov a3 a1)
(jcall ncons)
(push a1)
(push (& 3))
(push (@ 106))
(push 'nreverse)
(push (& 7))
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
105
(eval ())
(mov '(()) a2)
(adjstk '2)
(jmp cons)
103
(cabne a1 'every 107)
(push (@ 108))
(push 'lambda)
(mov a3 a1)
(jcall ncons)
(push a1)
(push (& 3))
(push (& 5))
(mov '4 a4)
(jmp list)
108
(eval ())
(mov '(t) a2)
(adjstk '2)
(jmp cons)
107
(cabne a1 'any 109)
(push (@ 110))
(push 'lambda)
(mov a3 a1)
(jcall ncons)
(push a1)
(push (& 3))
(push (& 5))
(mov '4 a4)
(jmp list)
110
(eval ())
(mov '(()) a2)
(adjstk '2)
(jmp cons)
109
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:compiler:mc:time subr1)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(push (@ 103))
(push 'let)
(push '((#:compiler:time (runtime))))
(mov (cdr a1) a4)
(push (car a4))
(push '((fsub (runtime) #:compiler:time)))
(mov '4 a4)
(jmp mcons)
103
(eval ())
(return)
101
(push (@ 104))
(push 'let)
(push '((#:compiler:time (runtime))))
(push (@ 105))
(push 'eval)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(push '((fsub (runtime) #:compiler:time)))
(mov '4 a4)
(jmp mcons)
104
(eval ())
(return)
))
(defmacro-open synonymq (s1 s2) (list 'synonym (list 'quote s1) (list 'quote s2)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'llcp)))
(defvar #:sys-package:colon 'llcp)
(add-feature 'compiler)
(defvar #:compiler:open-p t)
(if (not (boundp '#:llcp:stat-flag)) (progn (defvar #:llcp:stat-flag ())))
(defvar #:llcp:a1 ())
(defvar #:llcp:a2 ())
(defvar #:llcp:a3 ())
(defvar #:llcp:a4 ())
(defvar #:llcp:deep ())
(defvar #:llcp:lex ())
(defvar #:llcp:lap ())
(defvar #:ld:talkp ())
(defvar #:llcp:list-commutp '(add mul fadd fmul logand logor logxor eq equal))
(defvar #:llcp:list-subr-open '((identity 0 ()) (car 1 car) (cdr 1 cdr) (vlength 2 hgsize) (slen 2 hgsize) (add 3 plus) (sub 3 diff) (mul 3 times) (div 3 quo) (rem 3 rem) (fadd 3 fplus) (fsub 3 fdiff) (fmul 3 ftimes) (fdiv 3 fquo) (logand 3 land) (logor 3 lor) (logxor 3 lxor) (logshift 3 lshift) (vref 4 hpxmov) (sref 4 hbxmov) (rplaca 5 car) (rplacd 5 cdr) (vset 6 hpmovx) (sset 6 hbmovx)))
(if (not (featurep 'complice)) (progn (defmacro-open nextl (var1 . var2) ())))
(#:messages:put-message '#:llcp:compiler 'french '" se compile." 'defmessage)
(#:messages:put-message '#:llcp:compiler 'english '" is compiling." 'defmessage)
'#:llcp:compiler
(#:messages:put-message '#:llcp:error 'french '"
;***** ERREUR INTERNE DU COMPILATEUR LLCP
;      veuillez envoyer ce message a` :
;      lelisp@ilog.fr
;      avec la fonction en cours de compilation." 'defmessage)
(#:messages:put-message '#:llcp:error 'english '"
;***** INTERNAL ERROR IN LLCP COMPILER:
;      Please send this message to:
;      lelisp@ilog.fr
;      with the current compiling function" 'defmessage)
'#:llcp:error
(#:messages:put-message '#:llcp:rerror 'french '"
***** Erreur durant la compilation.
***** La forme a` compiler e'tait : " 'defmessage)
(#:messages:put-message '#:llcp:rerror 'english '"
***** Error during compilation.
***** The form to compile was:" 'defmessage)
'#:llcp:rerror
(#:messages:put-message '#:llcp:rerror2 'french '"***** dans la fonction : " 'defmessage)
(#:messages:put-message '#:llcp:rerror2 'english '"***** in the function: " 'defmessage)
'#:llcp:rerror2
(#:messages:put-message '#:llcp:in 'french '" dans " 'defmessage)
(#:messages:put-message '#:llcp:in 'english '" in " 'defmessage)
'#:llcp:in
(loader'((fentry dont-compile fsubr)
(entry dont-compile fsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ dont-compile))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
101
(btnil (cvalq #:system:l) 102)
(mov (cvalq #:system:l) a1)
(mov (cdr a1) (cvalq #:system:l))
(mov 'dont-compile a3)
(mov 't a2)
(mov (car a1) a1)
(jcall putprop)
(bra 101)
102
(mov nil a1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry compile dmsubr)
(entry compile dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(push (@ 101))
(push 'compiler)
(push (@ 102))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
102
(eval ())
(push a1)
(push (@ 103))
(push 'quote)
(mov (& 5) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
103
(eval ())
(push a1)
(push (@ 104))
(push 'quote)
(mov (& 6) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(push (@ 105))
(push 'quote)
(mov (& 7) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(mov '5 a4)
(jmp list)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry compiler nsubr)
(entry compiler nsubr)
(cnbge a4 '1 101)
(mov 'compiler a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(push (cvalq #:llcp:xrefnt))
(mov (& 2) (cvalq #:llcp:xrefnt))
(push '1)
(push '(#:llcp:xrefnt))
(push (@ compiler))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push nil)
(push nil)
(push nil)
(push (cvalq #:ld:talkp))
(mov (& 1) (cvalq #:ld:talkp))
(push (cvalq #:llcp:talkp))
(mov (& 3) (cvalq #:llcp:talkp))
(push (cvalq #:llcp:all-p))
(mov (& 5) (cvalq #:llcp:all-p))
(push '3)
(push '(#:ld:talkp #:llcp:talkp #:llcp:all-p))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfcons a1 103)
(mov (cdr a1) (& 19))
(mov (car a1) (cvalq #:llcp:all-p))
103
(bfcons (& 19) 105)
(mov (& 19) a4)
(mov (cdr a4) (& 19))
(mov (car a4) (cvalq #:llcp:talkp))
105
(bfcons (& 19) 107)
(mov (& 19) a4)
(mov (cdr a4) (& 19))
(mov (car a4) (cvalq #:ld:talkp))
107
(call #:llcp:compileready)
108
(btnil (cvalq #:llcp:xrefnt) 109)
(bfnil (cvalq #:llcp:talkp) 112)
(mov '() a1)
(jcall debug)
(btnil a1 111)
112
(push (@ 113))
(push '59)
(mov '1 a4)
(jmp princn)
113
(eval ())
(push (@ 114))
(mov (cvalq #:llcp:xrefnt) a4)
(push (car a4))
(mov '#:llcp:compiler a1)
(jcall get-message)
(push a1)
(mov '2 a4)
(jmp print)
114
(eval ())
111
(mov (cvalq #:llcp:xrefnt) a1)
(mov (cdr a1) (cvalq #:llcp:xrefnt))
(mov (car a1) a1)
(call #:llcp:compiledef)
(mov a1 (& 19))
(push (@ 115))
(push a1)
(push (cvalq #:ld:talkp))
(mov '2 a4)
(jmp loader)
115
(eval ())
(bra 108)
109
(push (@ 116))
(push '((end)))
(mov '1 a4)
(jmp loader)
116
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:all-p))
(mov (& 7) (cvalq #:llcp:talkp))
(mov (& 8) (cvalq #:ld:talkp))
(adjstk '12)
(mov (cvalq #:llcp:xrefnt) a1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:llcp:xrefnt))
(adjstk '9)
(return)
))
(loader'((fentry compilefiles subr2)
(entry compilefiles subr2)
(push a2)
(push a1)
(push nil)
(push (cvalq llist))
(mov (& 1) (cvalq llist))
(push '1)
(push '(llist))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btcons a1 102)
(push (@ 103))
(push a1)
(mov '1 a4)
(jmp list)
103
(eval ())
(mov a1 (& 8))
102
(push a1)
104
(bfcons (& 0) 105)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (cvalq #:sys-package:colon))
(push (cvalq #:sys-package:colon))
(mov (& 1) (cvalq #:sys-package:colon))
(push '1)
(push '(#:sys-package:colon))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 8) a1)
(jcall probefile)
(bfnil a1 107)
(push (@ 110))
(push (& 9))
(push (cvalq #:system:lelisp-extension))
(mov '2 a4)
(jmp catenate)
110
(eval ())
(jcall probefile)
(btnil a1 108)
(push (@ 111))
(push (& 9))
(push (cvalq #:system:lelisp-extension))
(mov '2 a4)
(jmp catenate)
111
(eval ())
(mov a1 (& 8))
(bra 107)
108
(mov (& 8) a3)
(mov 'errfile a2)
(mov 'compilefiles a1)
(jcall error)
107
(push (@ 112))
(mov '0 a4)
(jmp inchan)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(mov (& 13) a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
115
(eval ())
(push (@ 116))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
117
(jcall read)
(jcall #:compiler:macroexpand)
(push a1)
(push (@ 119))
(push a1)
(mov '1 a4)
(jmp eval)
119
(eval ())
(bfcons (& 0) 121)
(mov (& 0) a1)
(call #:llcp:compilefile-intrf)
121
(adjstk '1)
(bra 117)
118
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
116
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 122))
(push (& 4))
(mov '1 a4)
(jmp inchan)
122
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:colon))
(adjstk '9)
(bra 104)
105
(adjstk '1)
(push (@ 123))
(push (& 10))
(mov (cvalq llist) a1)
(jcall nreverse)
(push a1)
(push nil)
(push nil)
(mov '4 a4)
(bra #:llcp:compilerout)
123
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq llist))
(adjstk '10)
(return)
))
(loader'((entry #:llcp:compilefile-intrf subr1)
(mov (car a1) a4)
(cabeq a4 'de 103)
(cabeq a4 'defun 103)
(cabeq a4 'df 103)
(cabeq a4 'dm 103)
(cabeq a4 'dmd 103)
(cabne a4 'defmacro 101)
103
(mov (cdr a1) a1)
(mov (cvalq llist) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq llist))
(return)
101
(cabne (car a1) 'setfn 104)
(mov (cdr a1) a3)
(bfcons (car a3) 104)
(mov (cdr a1) a2)
(mov (car a2) a2)
(cabne (car a2) 'quote 104)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cvalq llist) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq llist))
(return)
104
(cabne (car a1) 'progn 106)
(push (cdr a1))
108
(bfcons (& 0) 109)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:llcp:compilefile-intrf)
(bra 108)
109
(mov nil a1)
(adjstk '1)
(return)
106
(mov (cvalq llist) a2)
(jcall cons)
(mov a1 (cvalq llist))
(return)
))
(loader'((entry #:llcp:compilerout nsubr)
(push (cvalq #:llcp:talkp))
(mov (& 1) (cvalq #:llcp:talkp))
(push (cvalq #:llcp:all-p))
(mov (& 3) (cvalq #:llcp:all-p))
(push (cvalq #:llcp:xrefnt))
(mov (& 5) (cvalq #:llcp:xrefnt))
(push '3)
(push '(#:llcp:talkp #:llcp:all-p #:llcp:xrefnt))
(push (@ #:llcp:compilerout))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov nil (cvalq #:llcp:talkp))
(call #:llcp:compileready)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp printlevel)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp printlength)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push '10)
(mov '1 a4)
(jmp obase)
106
(eval ())
(push (@ 107))
(push '1000)
(mov '1 a4)
(jmp printlevel)
107
(eval ())
(push (@ 108))
(push '30000)
(mov '1 a4)
(jmp printlength)
108
(eval ())
(mov (& 26) a1)
(jcall output)
(push (cvalq #:llcp:xrefnt))
(push (cvalq #:llcp:xrefnt))
(mov (& 1) (cvalq #:llcp:xrefnt))
(push '1)
(push '(#:llcp:xrefnt))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
109
(btnil (cvalq #:llcp:xrefnt) 110)
(mov (cvalq #:llcp:xrefnt) a4)
(mov (cdr a4) (cvalq #:llcp:xrefnt))
(push (car a4))
(btsymb (& 0) 111)
(push (@ 113))
(push (& 1))
(mov '1 a4)
(jmp print)
113
(eval ())
(bra 112)
111
(push (@ 114))
(push (@ 115))
(push 'loader)
(push (@ 116))
(push 'quote)
(mov (& 5) a1)
(call #:llcp:compiledef)
(push a1)
(mov '2 a4)
(jmp list)
116
(eval ())
(push a1)
(push '(()))
(mov '3 a4)
(jmp mcons)
115
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
114
(eval ())
112
(adjstk '1)
(bra 109)
110
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:xrefnt))
(adjstk '8)
(push (@ 117))
(push '(loader '((end))))
(mov '1 a4)
(jmp print)
117
(eval ())
(mov nil a1)
(jcall output)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp printlength)
118
(eval ())
(push (@ 119))
(push (& 5))
(mov '1 a4)
(jmp printlevel)
119
(eval ())
(push (@ 120))
(push (& 6))
(mov '1 a4)
(jmp obase)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '3)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:llcp:xrefnt))
(mov (& 7) (cvalq #:llcp:all-p))
(mov (& 8) (cvalq #:llcp:talkp))
(adjstk '13)
(return)
))
(loader'((entry #:llcp:compileready subr0)
(btnil (cvalq #:llcp:xrefnt) 102)
(bfsymb (cvalq #:llcp:xrefnt) 102)
(push (@ 103))
(push (cvalq #:llcp:xrefnt))
(mov '1 a4)
(jmp list)
103
(eval ())
(mov a1 (cvalq #:llcp:xrefnt))
102
(bfcons (cvalq #:llcp:all-p) 105)
(push (cvalq #:llcp:all-p))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov 'dont-compile a3)
(mov 't a2)
(mov (& 0) a1)
(jcall putprop)
(adjstk '1)
(bra 106)
107
(adjstk '1)
105
(push (cvalq #:llcp:xrefnt))
108
(btnil (& 0) 109)
(mov (& 0) a4)
(bfsymb (car a4) 110)
(mov (car a4) a1)
(call #:llcp:compilindic)
(btnil a1 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 108)
112
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (cvalq #:llcp:xrefnt) a2)
(mov (car a1) a1)
(jcall delq)
(mov a1 (cvalq #:llcp:xrefnt))
(bra 108)
110
(mov (cdr a4) (& 0))
(bra 108)
109
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry compile-all-in-core nsubr)
(entry compile-all-in-core nsubr)
(jcall #:llcp:nlist)
(mov (cdr a1) a4)
(push (car a1))
(push (car a4))
(push (@ 101))
(bra 102)
(fentry #:compile-all-in-core:g103 subr1)
(entry #:compile-all-in-core:g103 subr1)
(push a1)
(mov '#:system:loaded-from-file a2)
(jcall remprop)
(mov 'dont-compile a2)
(mov (& 0) a1)
(jcall getprop)
(btnil a1 104)
(mov nil a1)
(bra 105)
104
(mov 't a1)
105
(btnil a1 103)
(mov 'resetfn a2)
(mov (& 0) a1)
(jcall getprop)
(mov (car a1) a1)
(bfnil a1 106)
(mov (& 0) a1)
(jcall typefn)
106
(mov '(expr fexpr) a2)
(adjstk '1)
(jmp memq)
103
(adjstk '1)
(return)
102
(mov '#:compile-all-in-core:g103 a1)
(jcall maploblist)
(push a1)
(push 't)
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp compiler)
101
(eval ())
(push (@ 107))
(bra 108)
(fentry #:compile-all-in-core:g104 subr1)
(entry #:compile-all-in-core:g104 subr1)
(push a1)
(mov '#:system:loaded-from-file a2)
(jcall remprop)
(mov 'dont-compile a2)
(mov (& 0) a1)
(jcall getprop)
(btnil a1 110)
(mov nil a1)
(bra 111)
110
(mov 't a1)
111
(btnil a1 109)
(mov 'resetfn a2)
(mov (& 0) a1)
(jcall getprop)
(mov (car a1) a1)
(bfnil a1 112)
(mov (& 0) a1)
(jcall typefn)
112
(mov '(macro dmacro) a2)
(adjstk '1)
(jmp memq)
109
(adjstk '1)
(return)
108
(mov '#:compile-all-in-core:g104 a1)
(jcall maploblist)
(push a1)
(push 't)
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp compiler)
107
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:llcp:compilindic subr1)
(push (cvalq #:llcp:fnt))
(mov a1 (cvalq #:llcp:fnt))
(push '1)
(push '(#:llcp:fnt))
(push (@ #:llcp:compilindic))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'resetfn a2)
(jcall getprop)
(btnil a1 101)
(mov 'resetfn a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall getprop)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
(mov 'resetfn a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall remprop)
(mov (& 0) a3)
(mov (& 1) a2)
(mov (cvalq #:llcp:fnt) a1)
(call #:llcp:compilindicaux)
(adjstk '2)
(bra 102)
101
(push (cvalq #:llcp:fnt))
(mov (cvalq #:llcp:fnt) a1)
(jcall typefn)
(push a1)
(mov (cvalq #:llcp:fnt) a1)
(jcall valfn)
(mov a1 a3)
(pop a2)
(pop a1)
(call #:llcp:compilindicaux)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:llcp:fnt))
(adjstk '7)
(return)
))
(loader'((entry #:llcp:compilindicaux subr3)
(push a3)
(push a2)
(push (cvalq #:llcp:fnt))
(mov a1 (cvalq #:llcp:fnt))
(push '1)
(push '(#:llcp:fnt))
(push (@ #:llcp:compilindicaux))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a3)
(mov '#:llcp:fval a3)
(pop a2)
(jcall putprop)
(cabne (& 7) 'expr 101)
(mov (& 8) a4)
(push (car a4))
(bfnil (& 0) 103)
(mov '#:llcp:ftype a3)
(mov 'subr0 a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
(bra 104)
103
(bfsymb (& 0) 105)
(mov '#:llcp:ftype a3)
(mov 'nsubr a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
(bra 104)
105
(mov (& 0) a3)
(bfnil (cdr a3) 107)
(bfvar (car a3) 107)
(mov '#:llcp:ftype a3)
(mov 'subr1 a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
(bra 104)
107
(mov (& 0) a3)
(bfcons (cdr a3) 109)
(mov (cdr a3) a2)
(bfnil (cdr a2) 109)
(bfvar (car a3) 109)
(mov (cdr a3) a1)
(bfvar (car a1) 109)
(mov '#:llcp:ftype a3)
(mov 'subr2 a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
(bra 104)
109
(mov (& 0) a3)
(bfcons (cdr a3) 111)
(mov (cdr a3) a2)
(bfcons (cdr a2) 111)
(mov (cdr a3) a1)
(mov (cdr a1) a1)
(bfnil (cdr a1) 111)
(bfvar (car a3) 111)
(mov (cdr a3) a4)
(bfvar (car a4) 111)
(mov (cdr a3) a4)
(mov (cdr a4) a4)
(bfvar (car a4) 111)
(mov '#:llcp:ftype a3)
(mov 'subr3 a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
(bra 104)
111
(mov '#:llcp:ftype a3)
(mov 'nsubr a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
104
(adjstk '1)
(bra 102)
101
(mov (cvalq #:llcp:fnt) a1)
(jcall typefn)
(cabne a1 'fexpr 113)
(mov '#:llcp:ftype a3)
(mov 'fsubr a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
(bra 102)
113
(mov (cvalq #:llcp:fnt) a1)
(jcall typefn)
(cabne a1 'macro 115)
(mov '#:llcp:ftype a3)
(mov 'msubr a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
(bra 102)
115
(mov (cvalq #:llcp:fnt) a1)
(jcall typefn)
(cabne a1 'dmacro 117)
(mov '#:llcp:ftype a3)
(mov 'dmsubr a2)
(mov (cvalq #:llcp:fnt) a1)
(jcall putprop)
(bra 102)
117
(mov (cvalq #:llcp:fnt) a1)
(jcall typefn)
(mov a1 a3)
(mov '"function of type" a2)
(mov '":COMPILINDIC" a1)
(call #:llcp:warning)
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:llcp:fnt))
(adjstk '9)
(return)
))
(loader'((entry #:llcp:compiledef subr1)
(push a1)
(mov '#:llcp:fval a2)
(jcall getprop)
(push nil)
(push nil)
(push nil)
(push a1)
(push (cvalq aux3))
(mov (& 2) (cvalq aux3))
(push (cvalq aux2))
(mov (& 4) (cvalq aux2))
(push (cvalq aux1))
(mov (& 6) (cvalq aux1))
(push '3)
(push '(aux3 aux2 aux1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '#:llcp:ftype a2)
(mov (& 13) a1)
(jcall getprop)
(cabne a1 'subr0 102)
(push (@ 103))
(push (& 14))
(mov (& 11) a4)
(push (car a4))
(push (cdr a4))
(push (@ 104))
(push (@ 105))
(push 'fentry)
(push (& 20))
(push '(subr0))
(mov '3 a4)
(jmp mcons)
105
(eval ())
(push a1)
(push (@ 106))
(push 'mov)
(push (@ 107))
(push '@)
(push (& 23))
(mov '2 a4)
(jmp list)
107
(eval ())
(push a1)
(push '(a4))
(mov '3 a4)
(jmp mcons)
106
(eval ())
(push a1)
(push '((jcall #:llcp:cbind0)))
(mov '3 a4)
(jmp mcons)
104
(eval ())
(push a1)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:llcp:compilefnt)
103
(eval ())
(bra 101)
102
(cabne a1 'subr1 108)
(push (@ 109))
(push (& 14))
(mov (& 11) a4)
(push (car a4))
(push (cdr a4))
(push (@ 110))
(push (@ 111))
(push 'fentry)
(push (& 20))
(push '(subr1))
(mov '3 a4)
(jmp mcons)
111
(eval ())
(push a1)
(push (@ 112))
(push 'mov)
(push (@ 113))
(push '@)
(push (& 23))
(mov '2 a4)
(jmp list)
113
(eval ())
(push a1)
(push '(a4))
(mov '3 a4)
(jmp mcons)
112
(eval ())
(push a1)
(push (@ 114))
(push 'mov)
(push (@ 115))
(push 'quote)
(mov (& 20) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(push '(a3))
(mov '3 a4)
(jmp mcons)
114
(eval ())
(push a1)
(push '((jcall #:llcp:cbind1)))
(mov '4 a4)
(jmp mcons)
110
(eval ())
(push a1)
(mov (& 14) a4)
(mov (car a4) a4)
(push (car a4))
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:llcp:compilefnt)
109
(eval ())
(bra 101)
108
(cabne a1 'subr2 116)
(push (@ 117))
(push (& 14))
(mov (& 11) a4)
(push (car a4))
(push (cdr a4))
(push (@ 118))
(push (@ 119))
(push 'fentry)
(push (& 20))
(push '(subr2))
(mov '3 a4)
(jmp mcons)
119
(eval ())
(push a1)
(push (@ 120))
(push 'mov)
(push (@ 121))
(push '@)
(push (& 23))
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(push '(a4))
(mov '3 a4)
(jmp mcons)
120
(eval ())
(push a1)
(push (@ 122))
(push 'mov)
(push (@ 123))
(push 'quote)
(mov (& 20) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
123
(eval ())
(push a1)
(push '(a3))
(mov '3 a4)
(jmp mcons)
122
(eval ())
(push a1)
(push '((jcall #:llcp:cbind2)))
(mov '4 a4)
(jmp mcons)
118
(eval ())
(push a1)
(mov (& 14) a4)
(mov (car a4) a4)
(push (car a4))
(mov (& 15) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(push nil)
(push nil)
(mov '8 a4)
(bra #:llcp:compilefnt)
117
(eval ())
(bra 101)
116
(cabne a1 'subr3 124)
(push (@ 125))
(push (& 14))
(mov (& 11) a4)
(push (car a4))
(push (cdr a4))
(push (@ 126))
(push (@ 127))
(push 'fentry)
(push (& 20))
(push '(subr3))
(mov '3 a4)
(jmp mcons)
127
(eval ())
(push a1)
(push (@ 128))
(push 'push)
(push (@ 129))
(push '@)
(push (& 23))
(mov '2 a4)
(jmp list)
129
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
128
(eval ())
(push a1)
(push (@ 130))
(push 'mov)
(push (@ 131))
(push 'quote)
(mov (& 20) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
131
(eval ())
(push a1)
(push '(a4))
(mov '3 a4)
(jmp mcons)
130
(eval ())
(push a1)
(push '((jcall #:llcp:cbind3)))
(mov '4 a4)
(jmp mcons)
126
(eval ())
(push a1)
(mov (& 14) a4)
(mov (car a4) a4)
(push (car a4))
(mov (& 15) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov (& 16) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(push nil)
(mov '8 a4)
(bra #:llcp:compilefnt)
125
(eval ())
(bra 101)
124
(cabne a1 'nsubr 132)
(push (@ 133))
(push (& 14))
(mov (& 11) a4)
(push (car a4))
(push (cdr a4))
(push (@ 134))
(push (@ 135))
(push 'fentry)
(push (& 20))
(push '(nsubr))
(mov '3 a4)
(jmp mcons)
135
(eval ())
(push a1)
(push (@ 136))
(push 'mov)
(push (@ 137))
(push '@)
(push (& 23))
(mov '2 a4)
(jmp list)
137
(eval ())
(push a1)
(push '(a2))
(mov '3 a4)
(jmp mcons)
136
(eval ())
(push a1)
(push (@ 138))
(push 'mov)
(push (@ 139))
(push 'quote)
(mov (& 20) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
139
(eval ())
(push a1)
(push '(a3))
(mov '3 a4)
(jmp mcons)
138
(eval ())
(push a1)
(push '((jcall #:llcp:cbindn)))
(mov '4 a4)
(jmp mcons)
134
(eval ())
(push a1)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:llcp:compilefnt)
133
(eval ())
(bra 101)
132
(cabeq a1 'fsubr 141)
(cabeq a1 'msubr 141)
(cabne a1 'dmsubr 140)
141
(push (@ 142))
(push (& 14))
(mov (& 11) a4)
(push (car a4))
(push (cdr a4))
(push (@ 143))
(push (@ 144))
(push 'fentry)
(push (& 20))
(mov '#:llcp:ftype a2)
(mov (& 21) a1)
(jcall getprop)
(push a1)
(mov '3 a4)
(jmp list)
144
(eval ())
(push a1)
(push (@ 145))
(push 'mov)
(push (@ 146))
(push '@)
(push (& 23))
(mov '2 a4)
(jmp list)
146
(eval ())
(push a1)
(push '(a2))
(mov '3 a4)
(jmp mcons)
145
(eval ())
(push a1)
(push (@ 147))
(push 'mov)
(push (@ 148))
(push 'quote)
(mov (& 20) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
148
(eval ())
(push a1)
(push '(a3))
(mov '3 a4)
(jmp mcons)
147
(eval ())
(push a1)
(push '((jcall #:llcp:cbinds)))
(mov '4 a4)
(jmp mcons)
143
(eval ())
(push a1)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(bra #:llcp:compilefnt)
142
(eval ())
(bra 101)
140
(push (@ 150))
(push (@ 151))
(push '":COMPILEFNT ")
(push (& 16))
(push '" type ")
(mov '#:llcp:ftype a2)
(mov (& 18) a1)
(jcall getprop)
(push a1)
(mov '4 a4)
(jmp list)
151
(eval ())
(push a1)
(mov '1 a4)
(bra #:llcp:error)
150
(eval ())
101
(mov (& 1) dlink)
(mov (& 6) (cvalq aux1))
(mov (& 7) (cvalq aux2))
(mov (& 8) (cvalq aux3))
(adjstk '14)
(return)
))
(loader'((entry #:llcp:compilefnt nsubr)
(push (cvalq #:llcp:a4))
(mov (& 1) (cvalq #:llcp:a4))
(push (cvalq #:llcp:a3))
(mov (& 3) (cvalq #:llcp:a3))
(push (cvalq #:llcp:a2))
(mov (& 5) (cvalq #:llcp:a2))
(push (cvalq #:llcp:a1))
(mov (& 7) (cvalq #:llcp:a1))
(push (cvalq #:llcp:fnt))
(mov (& 12) (cvalq #:llcp:fnt))
(push '5)
(push '(#:llcp:a4 #:llcp:a3 #:llcp:a2 #:llcp:a1 #:llcp:fnt))
(push (@ #:llcp:compilefnt))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push '0)
(push nil)
(push nil)
(push '1000)
(push (cvalq #:llcp:gencount))
(mov (& 1) (cvalq #:llcp:gencount))
(push (cvalq #:llcp:lex))
(mov (& 3) (cvalq #:llcp:lex))
(push (cvalq #:llcp:lap))
(mov (& 5) (cvalq #:llcp:lap))
(push (cvalq #:llcp:deep))
(mov (& 7) (cvalq #:llcp:deep))
(push '4)
(push '(#:llcp:gencount #:llcp:lex #:llcp:lap #:llcp:deep))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (cvalq #:llcp:talkp) 102)
(push (@ 103))
(push 'de)
(push (cvalq #:llcp:fnt))
(push (& 34))
(push (& 34))
(mov '4 a4)
(jmp mcons)
103
(eval ())
(jcall pprint)
102
(mov nil a3)
(mov 'a1 a2)
(mov (& 30) a1)
(call #:llcp:progn-last)
(mov (cvalq #:llcp:lap) a1)
(jcall #:compiler:peephole)
(jcall nreverse)
(mov a1 (cvalq #:llcp:lap))
(push (@ 104))
(push (& 30))
(push a1)
(mov '2 a4)
(jmp append)
104
(eval ())
(mov a1 (cvalq #:llcp:lap))
(btnil (cvalq #:llcp:talkp) 106)
(bfnil (cvalq #:ld:talkp) 106)
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(mov (cvalq #:llcp:lap) a1)
(jcall pprint)
106
(cabeq (cvalq #:llcp:deep) '0 109)
(push (@ 110))
(push '"DEEP")
(mov '1 a4)
(bra #:llcp:error)
110
(eval ())
109
(mov (cvalq #:llcp:lap) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:deep))
(mov (& 7) (cvalq #:llcp:lap))
(mov (& 8) (cvalq #:llcp:lex))
(mov (& 9) (cvalq #:llcp:gencount))
(adjstk '14)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:llcp:fnt))
(mov (& 7) (cvalq #:llcp:a1))
(mov (& 8) (cvalq #:llcp:a2))
(mov (& 9) (cvalq #:llcp:a3))
(mov (& 10) (cvalq #:llcp:a4))
(adjstk '19)
(return)
))
(defvar #:llcp:fnt ())
(loader'((entry #:llcp:error nsubr)
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push nil)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(mov '() a1)
(jcall debug)
(btnil a1 105)
(push (@ 107))
(mov '0 a4)
(jmp print)
107
(eval ())
(push (@ 108))
(mov '#:llcp:error a1)
(jcall get-message)
(push a1)
(mov '1 a4)
(jmp print)
108
(eval ())
(push (@ 109))
(mov '0 a4)
(jmp print)
109
(eval ())
(push (@ 110))
(push '";      error type             ")
(push (& 7))
(mov '2 a4)
(jmp print)
110
(eval ())
(push (@ 111))
(push '";      bag arguments          ")
(push (& 6))
(mov '2 a4)
(jmp print)
111
(eval ())
(push (@ 112))
(push '";      in compiling           ")
(push (cvalq #:llcp:fnt))
(mov '2 a4)
(jmp print)
112
(eval ())
(push (@ 113))
(push '";      contents of registers  ")
(push (@ 114))
(push (cvalq #:llcp:a1))
(push (cvalq #:llcp:a2))
(push (cvalq #:llcp:a3))
(push (cvalq #:llcp:a4))
(mov '4 a4)
(jmp list)
114
(eval ())
(push a1)
(mov '2 a4)
(jmp print)
113
(eval ())
(push (@ 115))
(push '";      stack state            ")
(push (cvalq #:llcp:deep))
(mov '2 a4)
(jmp print)
115
(eval ())
(push (@ 116))
(push '";      lexical environment    ")
(push (cvalq #:llcp:lex))
(mov '2 a4)
(jmp print)
116
(eval ())
(push (@ 117))
(push '";      end of instructions    ")
(mov (cvalq #:llcp:lap) a2)
(mov '20 a1)
(jcall firstn)
(jcall reverse)
(push a1)
(mov '2 a4)
(jmp print)
117
(eval ())
(bra 106)
105
(mov nil a1)
106
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp outchan)
118
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:llcp:rerror subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push nil)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push (@ 105))
(mov '#:llcp:rerror a1)
(jcall get-message)
(push a1)
(push (& 6))
(mov '2 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(mov '#:llcp:rerror2 a1)
(jcall get-message)
(push a1)
(push (cvalq #:llcp:fnt))
(mov '2 a4)
(jmp print)
106
(eval ())
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 107))
(push (& 4))
(mov '1 a4)
(jmp outchan)
107
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:compiler:macro-expand-error subr1)
(entry #:compiler:macro-expand-error subr1)
(bra #:llcp:rerror)
))
(loader'((entry #:llcp:warning subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push nil)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(mov '() a1)
(jcall debug)
(btnil a1 105)
(push (@ 107))
(push '59)
(mov '1 a4)
(jmp princn)
107
(eval ())
(push (@ 108))
(push (& 5))
(mov '#:llcp:in a1)
(jcall get-message)
(push a1)
(push (cvalq #:llcp:fnt))
(push '" : ")
(push (& 10))
(push '" : ")
(push (& 13))
(mov '7 a4)
(jmp print)
108
(eval ())
(bra 106)
105
(mov nil a1)
106
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 109))
(push (& 4))
(mov '1 a4)
(jmp outchan)
109
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:llcp:add-code subr1)
(mov (cvalq #:llcp:lap) a2)
(jcall cons)
(mov a1 (cvalq #:llcp:lap))
(return)
))
(loader'((entry #:llcp:call subr1)
(push (@ 101))
(push 'jcall)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov (cvalq #:llcp:lap) a2)
(jcall cons)
(mov a1 (cvalq #:llcp:lap))
(return)
))
(loader'((entry #:llcp:mov subr2)
(push (@ 101))
(push 'mov)
(push a1)
(push a2)
(mov '3 a4)
(jmp list)
101
(eval ())
(mov (cvalq #:llcp:lap) a2)
(jcall cons)
(mov a1 (cvalq #:llcp:lap))
(return)
))
(loader'((entry #:llcp:movq subr2)
(push a2)
(push (@ 101))
(push 'mov)
(jcall kwote)
(push a1)
(push (& 3))
(mov '3 a4)
(jmp list)
101
(eval ())
(mov (cvalq #:llcp:lap) a2)
(jcall cons)
(mov a1 (cvalq #:llcp:lap))
(adjstk '1)
(return)
))
(loader'((entry #:llcp:cr subr2)
(cabne a1 'a1 102)
(mov a2 (cvalq #:llcp:a1))
(mov a2 a1)
(return)
102
(cabne a1 'a2 103)
(mov a2 (cvalq #:llcp:a2))
(mov a2 a1)
(return)
103
(cabne a1 'a3 104)
(mov a2 (cvalq #:llcp:a3))
(mov a2 a1)
(return)
104
(cabne a1 'a4 105)
(mov a2 (cvalq #:llcp:a4))
(mov a2 a1)
(return)
105
(push (@ 107))
(push '":CR")
(push a1)
(push a2)
(mov '3 a4)
(bra #:llcp:error)
107
(eval ())
(return)
))
(loader'((entry #:llcp:cr-all-nil subr0)
(mov nil (cvalq #:llcp:a1))
(mov nil (cvalq #:llcp:a2))
(mov nil (cvalq #:llcp:a3))
(mov nil (cvalq #:llcp:a4))
(mov nil a1)
(return)
))
(loader'((entry #:llcp:sup-eq subr2)
(push a2)
(push a1)
(btcons a1 101)
(push a2)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp eq)
101
(push a2)
(mov a1 a2)
(pop a1)
(jcall memq)
(btnil a1 103)
(mov 't a1)
(adjstk '2)
(return)
103
(mov (& 0) a1)
(mov (car a1) a1)
(jcall listp)
(btnil a1 105)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (& 1) a1)
(call #:llcp:sup-eq)
(bfnil a1 107)
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:llcp:sup-eq)
107
(adjstk '2)
(return)
105
(mov (& 0) a2)
(mov (cdr a2) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:llcp:sup-eq)
))
(loader'((entry #:llcp:cr-forget subr1)
(push a1)
(mov a1 a2)
(mov (cvalq #:llcp:a1) a1)
(call #:llcp:sup-eq)
(btnil a1 102)
(mov nil (cvalq #:llcp:a1))
102
(mov (& 0) a2)
(mov (cvalq #:llcp:a2) a1)
(call #:llcp:sup-eq)
(btnil a1 104)
(mov nil (cvalq #:llcp:a2))
104
(mov (& 0) a2)
(mov (cvalq #:llcp:a3) a1)
(call #:llcp:sup-eq)
(btnil a1 106)
(mov nil (cvalq #:llcp:a3))
106
(mov (& 0) a2)
(mov (cvalq #:llcp:a4) a1)
(call #:llcp:sup-eq)
(btnil a1 107)
(mov nil (cvalq #:llcp:a4))
(mov nil a1)
(adjstk '1)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:llcp:cr-forget-cons subr0)
(bfcons (cvalq #:llcp:a1) 102)
(mov nil (cvalq #:llcp:a1))
102
(bfcons (cvalq #:llcp:a2) 104)
(mov nil (cvalq #:llcp:a2))
104
(bfcons (cvalq #:llcp:a3) 106)
(mov nil (cvalq #:llcp:a3))
106
(bfcons (cvalq #:llcp:a4) 107)
(mov nil (cvalq #:llcp:a4))
(mov nil a1)
(return)
107
(mov nil a1)
(return)
))
(loader'((entry #:llcp:cr-list subr0)
(mov (cvalq #:llcp:a2) a2)
(mov (cvalq #:llcp:a1) a1)
(jcall cons)
(push a1)
(mov (cvalq #:llcp:a4) a2)
(mov (cvalq #:llcp:a3) a1)
(jcall cons)
(mov a1 a2)
(pop a1)
(jmp cons)
))
(loader'((entry #:llcp:cr-intersect-list subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:llcp:cr-intersect)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:llcp:cr-intersect subr1)
(push a1)
(btnil (cvalq #:llcp:a1) 102)
(mov (car a1) a1)
(mov (cvalq #:llcp:a1) a2)
(mov (car a1) a1)
(jcall equal)
(bfnil a1 102)
(mov nil (cvalq #:llcp:a1))
102
(btnil (cvalq #:llcp:a2) 104)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cvalq #:llcp:a2) a2)
(mov (cdr a1) a1)
(jcall equal)
(bfnil a1 104)
(mov nil (cvalq #:llcp:a2))
104
(btnil (cvalq #:llcp:a3) 106)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cvalq #:llcp:a3) a2)
(mov (car a1) a1)
(jcall equal)
(bfnil a1 106)
(mov nil (cvalq #:llcp:a3))
106
(btnil (cvalq #:llcp:a4) 107)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cvalq #:llcp:a4) a2)
(mov (cdr a1) a1)
(jcall equal)
(bfnil a1 107)
(mov nil (cvalq #:llcp:a4))
(mov nil a1)
(adjstk '1)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:llcp:cr-any-reg subr1)
(cabne a1 'a1 102)
(bfnil (cvalq #:llcp:a2) 103)
(mov 'a2 a1)
(return)
103
(bfnil (cvalq #:llcp:a3) 105)
(mov 'a3 a1)
(return)
105
(mov 'a4 a1)
(return)
102
(cabne a1 'a2 107)
(bfnil (cvalq #:llcp:a3) 108)
(mov 'a3 a1)
(return)
108
(mov 'a4 a1)
(return)
107
(mov 'a4 a1)
(return)
))
(loader'((entry #:llcp:push subr1)
(push (@ 101))
(push 'push)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:llcp:add-code)
(mov (cvalq #:llcp:deep) a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:deep))
(mov a4 a1)
(return)
))
(loader'((entry #:llcp:pushq subr1)
(push (@ 101))
(push 'push)
(jcall kwote)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:llcp:add-code)
(mov (cvalq #:llcp:deep) a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:deep))
(mov a4 a1)
(return)
))
(loader'((entry #:llcp:pop subr1)
(push a1)
(cnbgt (cvalq #:llcp:deep) '0 102)
(push (@ 103))
(push '":POP")
(push a1)
(mov '2 a4)
(bra #:llcp:error)
103
(eval ())
102
(push (@ 104))
(push 'pop)
(push (& 2))
(mov '2 a4)
(jmp list)
104
(eval ())
(call #:llcp:add-code)
(mov (cvalq #:llcp:deep) a4)
(diff '1 a4)
(mov a4 (cvalq #:llcp:deep))
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((entry #:llcp:eqp subr1)
(btsymb a1 103)
(bffix a1 101)
103
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:llcp:quotep subr1)
(btcons a1 104)
(bfsymb a1 103)
104
(cabeq a1 't 103)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
103
(mov 't a1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:llcp:exp subr3)
(push (cvalq #:llcp:effectp))
(mov a3 (cvalq #:llcp:effectp))
(push (cvalq dest))
(mov a2 (cvalq dest))
(push (cvalq l))
(mov a1 (cvalq l))
(push '3)
(push '(#:llcp:effectp dest l))
(push (@ #:llcp:exp))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:llcp:dirop)
(mov a1 (cvalq aux1))
(btnil a1 101)
(btnil (cvalq #:llcp:effectp) 103)
(mov (cvalq l) a3)
(mov '"unused value" a2)
(mov '":EXPU" a1)
(call #:llcp:warning)
(bra 102)
103
(cabeq a1 (cvalq dest) 106)
(mov (cvalq dest) a2)
(call #:llcp:mov)
106
(mov (cvalq l) a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
(bra 102)
101
(mov (cvalq l) a4)
(btsymb (car a4) 107)
(cabeq (cvalq dest) 'a1 110)
(mov nil a1)
(mov 'not-in-a1 a2)
(jmp #:llcp:exit)
110
(bfcons (car a4) 111)
(mov (car a4) a3)
(cabne (car a3) 'lambda 111)
(mov (car a4) a1)
(mov (cdr a1) a1)
(mov (car a4) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a4) a2)
(mov (car a1) a1)
(call #:llcp:app-lambda)
(bra 102)
111
(push (@ 113))
(push '#:llcp:exp)
(push '"fonction calculee")
(push (car a4))
(push a4)
(mov '4 a4)
(bra #:llcp:parano)
113
(eval ())
(bra 102)
107
(cabne (car a4) 'if 114)
(mov (cvalq #:llcp:gencount) a3)
(plus '1 a3)
(mov a3 (cvalq #:llcp:gencount))
(push a3)
(plus '1 a3)
(mov a3 (cvalq #:llcp:gencount))
(push nil)
(push nil)
(push a3)
(push (@ 116))
(mov (cdr a4) a2)
(push (car a2))
(push nil)
(push (& 6))
(push (cvalq dest))
(mov '4 a4)
(bra #:llcp:pred)
116
(eval ())
(push (cvalq #:llcp:a1))
(push (cvalq #:llcp:a2))
(push (cvalq #:llcp:a3))
(push (cvalq #:llcp:a4))
(push (cvalq #:llcp:deep))
(push (cvalq #:llcp:deep))
(mov (& 1) (cvalq #:llcp:deep))
(push (cvalq #:llcp:a4))
(mov (& 3) (cvalq #:llcp:a4))
(push (cvalq #:llcp:a3))
(mov (& 5) (cvalq #:llcp:a3))
(push (cvalq #:llcp:a2))
(mov (& 7) (cvalq #:llcp:a2))
(push (cvalq #:llcp:a1))
(mov (& 9) (cvalq #:llcp:a1))
(push '5)
(push '(#:llcp:deep #:llcp:a4 #:llcp:a3 #:llcp:a2 #:llcp:a1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:exp)
(push (@ 117))
(push 'bra)
(push (& 18))
(mov '2 a4)
(jmp list)
117
(eval ())
(call #:llcp:add-code)
(mov (& 19) a1)
(call #:llcp:add-code)
(call #:llcp:cr-list)
(mov a1 (& 18))
(mov (cvalq #:llcp:deep) (& 17))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:a1))
(mov (& 7) (cvalq #:llcp:a2))
(mov (& 8) (cvalq #:llcp:a3))
(mov (& 9) (cvalq #:llcp:a4))
(mov (& 10) (cvalq #:llcp:deep))
(adjstk '16)
(btnil (cvalq #:llcp:effectp) 120)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(btnil (cdr a4) 119)
120
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
119
(mov (& 0) a1)
(call #:llcp:add-code)
(cabeq (cvalq #:llcp:deep) (& 1) 122)
(push (@ 123))
(push 'if)
(push (cvalq #:llcp:deep))
(push (& 4))
(mov '3 a4)
(bra #:llcp:error)
123
(eval ())
122
(mov (& 2) a1)
(call #:llcp:cr-intersect)
(adjstk '4)
(bra 102)
114
(cabne (car a4) 'selectq 124)
(call #:llcp:selectq)
(bra 102)
124
(mov (car a4) a3)
(cabeq a3 'and 128)
(cabne a3 'or 126)
128
(mov (cvalq #:llcp:gencount) a2)
(plus '1 a2)
(mov a2 (cvalq #:llcp:gencount))
(push a2)
(mov 'and a2)
(mov (car a4) a1)
(jcall eq)
(push a1)
(mov (cvalq l) a4)
(push (cdr a4))
(push (@ 129))
(btnil a1 130)
(mov 'btnil a3)
(bra 131)
130
(mov 'bfnil a3)
131
(push a3)
(push (cvalq dest))
(push (& 5))
(mov '3 a4)
(jmp list)
129
(eval ())
(push nil)
(push a1)
132
(mov (& 2) a4)
(bfcons (cdr a4) 133)
(mov (cdr a4) (& 2))
(mov nil a3)
(mov (cvalq dest) a2)
(mov (car a4) a1)
(call #:llcp:exp)
(mov (& 0) a1)
(call #:llcp:add-code)
(call #:llcp:cr-list)
(mov (& 1) a2)
(jcall cons)
(mov a1 (& 1))
(bra 132)
133
(bfcons a4 134)
(mov nil a3)
(mov (cvalq dest) a2)
(mov (car a4) a1)
(call #:llcp:exp)
(bra 135)
134
(btnil (& 3) 136)
(mov ''t a1)
(bra 137)
136
(mov 'nil a1)
137
(mov (cvalq dest) a2)
(call #:llcp:mov)
(mov nil a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
135
(mov (& 1) a1)
(call #:llcp:cr-intersect-list)
(mov (& 4) a1)
(call #:llcp:add-code)
(adjstk '5)
(bra 102)
126
(mov (car a4) a2)
(cabeq a2 'while 140)
(cabne a2 'until 138)
140
(mov (cvalq #:llcp:gencount) a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(push a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(push a4)
(push (@ 141))
(push 'bra)
(push a4)
(mov '2 a4)
(jmp list)
141
(eval ())
(call #:llcp:add-code)
(mov (& 1) a1)
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov 't a3)
(mov (cvalq dest) a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
(mov (& 0) a1)
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(mov (cvalq l) a4)
(cabne (car a4) 'while 142)
(push (@ 144))
(mov (cdr a4) a3)
(push (car a3))
(push 't)
(push (& 4))
(push (cvalq dest))
(mov '4 a4)
(bra #:llcp:pred)
144
(eval ())
(bfnil (cvalq #:llcp:effectp) 143)
(mov (cvalq dest) a2)
(mov 'nil a1)
(call #:llcp:mov)
(mov nil a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
(bra 143)
142
(btnil (cvalq #:llcp:effectp) 147)
(push (@ 149))
(mov (cdr a4) a3)
(push (car a3))
(push nil)
(push (& 4))
(push (cvalq dest))
(mov '4 a4)
(bra #:llcp:pred)
149
(eval ())
(bra 143)
147
(mov (cdr a4) a1)
(mov nil a3)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:exp)
(push (@ 150))
(push 'btnil)
(push (cvalq dest))
(push (& 4))
(mov '3 a4)
(jmp list)
150
(eval ())
(call #:llcp:add-code)
143
(call #:llcp:cr-all-nil)
(adjstk '2)
(bra 102)
138
(cabne (car a4) 'repeat 151)
(mov (cvalq #:llcp:gencount) a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(push a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(push a4)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov nil a3)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:exp)
(push (@ 153))
(push 'bra)
(push (& 2))
(mov '2 a4)
(jmp list)
153
(eval ())
(call #:llcp:add-code)
(mov (& 1) a1)
(call #:llcp:add-code)
(mov (cvalq dest) a1)
(call #:llcp:push)
(call #:llcp:cr-all-nil)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov 't a3)
(mov (cvalq dest) a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
(mov (cvalq dest) a1)
(call #:llcp:pop)
(mov (& 0) a1)
(call #:llcp:add-code)
(push (@ 154))
(push 'sobgez)
(push (cvalq dest))
(push (& 4))
(mov '3 a4)
(jmp list)
154
(eval ())
(call #:llcp:add-code)
(bfnil (cvalq #:llcp:effectp) 156)
(mov (cvalq dest) a2)
(mov 't a1)
(call #:llcp:movq)
156
(mov nil a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
(adjstk '2)
(bra 102)
151
(cabne (car a4) 'prog1 157)
(mov (cdr a4) a1)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:expush)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov 't a3)
(mov (cvalq dest) a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
(mov (cvalq dest) a1)
(call #:llcp:pop)
(mov nil a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
(bra 102)
157
(cabne (car a4) 'progn 159)
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(mov (cdr a4) a1)
(call #:llcp:progn)
(bra 102)
159
(cabne (car a4) 'setq 161)
(bfnil (cvalq #:llcp:effectp) 165)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(btnil (cdr a4) 163)
165
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:diropordest)
(mov a1 (cvalq aux1))
(push a1)
(push (@ 166))
(push 'cvalq)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
166
(eval ())
(mov a1 a2)
(pop a1)
(call #:llcp:mov)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:llcp:cr-forget)
(bfsymb (cvalq aux1) 164)
(cabeq (cvalq aux1) 'nil 164)
(mov (cvalq l) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (cvalq aux1) a1)
(call #:llcp:cr)
(bra 164)
163
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov nil a3)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:exp)
(push (cvalq dest))
(push (@ 169))
(push 'cvalq)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
169
(eval ())
(mov a1 a2)
(pop a1)
(call #:llcp:mov)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:llcp:cr-forget)
(mov (cvalq l) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
164
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(btnil (cdr a4) 170)
(mov (cvalq l) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov 'setq a1)
(jcall cons)
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(call #:llcp:exp)
(bra 102)
170
(mov nil a1)
(bra 102)
161
(cabne (car a4) 'nextl 172)
(btnil (cvalq #:llcp:effectp) 174)
(push (@ 176))
(mov (cdr a4) a4)
(bfcons (cdr a4) 177)
(push (@ 179))
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(push (@ 180))
(push 'car)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
180
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
179
(eval ())
(mov a1 a4)
(bra 178)
177
(mov nil a4)
178
(push a4)
(push (@ 181))
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(push (car a4))
(push (@ 182))
(push 'cdr)
(mov (cvalq l) a3)
(mov (cdr a3) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
182
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
181
(eval ())
(push a1)
(mov '2 a4)
(jmp append)
176
(eval ())
(mov a1 a2)
(mov 'setq a1)
(jcall cons)
(bra 175)
174
(push (@ 183))
(push 'prog1)
(mov (cdr a4) a4)
(bfcons (cdr a4) 184)
(push (@ 186))
(push 'setq)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(push (@ 187))
(push 'car)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
187
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
186
(eval ())
(mov a1 a4)
(bra 185)
184
(push (@ 188))
(push 'car)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
188
(eval ())
(mov a1 a4)
185
(push a4)
(push (@ 189))
(push 'setq)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(push (car a4))
(push (@ 190))
(push 'cdr)
(mov (cvalq l) a3)
(mov (cdr a3) a3)
(push (car a3))
(mov '2 a4)
(jmp list)
190
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
189
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
183
(eval ())
175
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(call #:llcp:exp)
(bra 102)
172
(cabne (car a4) 'comment 191)
(bfnil (cvalq #:llcp:effectp) 193)
(mov (cvalq dest) a2)
(mov (car a4) a1)
(call #:llcp:movq)
(mov nil a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
(bra 102)
193
(mov nil a1)
(bra 102)
191
(cabne (car a4) 'lambda 195)
(mov (cvalq #:llcp:fnt) a1)
(push (pkgc a1))
(push (@ 197))
(push a1)
(push '"-lambda-")
(jcall gensym)
(push a1)
(mov '3 a4)
(jmp concat)
197
(eval ())
(mov a1 a2)
(pop a1)
(jcall symbol)
(push a1)
(mov (cvalq l) a3)
(mov (cdr a3) a3)
(mov 'expr a2)
(jcall setfn)
(mov (& 0) a1)
(call #:llcp:compilindic)
(btnil a1 199)
(mov (cvalq #:llcp:xrefnt) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:llcp:xrefnt))
199
(mov (cvalq dest) a2)
(mov (& 0) a1)
(call #:llcp:movq)
(mov nil a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
(adjstk '1)
(bra 102)
195
(cabne (car a4) 'precompile 200)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
202
(bfcons (& 0) 203)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:llcp:add-code)
(bra 202)
203
(adjstk '1)
(push (@ 204))
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp eval)
204
(eval ())
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
(btnil (& 0) 205)
(bfnil (cvalq #:llcp:effectp) 207)
(mov (& 0) a3)
(cabeq (car a3) (cvalq dest) 210)
(mov (cvalq dest) a2)
(mov (car a3) a1)
(call #:llcp:mov)
210
(mov nil a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
(bra 206)
207
(mov nil a1)
(bra 206)
205
(mov nil a1)
206
(adjstk '1)
(bra 102)
200
(push a4)
(mov a4 a1)
(jcall #:compiler:macroexpand)
(mov a1 (cvalq aux1))
(pop a4)
(cabeq a4 a1 211)
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(call #:llcp:exp)
(bra 102)
211
(btnil (cvalq #:compiler:open-p) 213)
(mov (cvalq l) a1)
(mov (cvalq #:llcp:list-subr-open) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (cvalq aux1))
(btnil a1 213)
(mov (cvalq l) a1)
(mov (cvalq aux1) a2)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (cdr a1) a1)
(call #:llcp:expsubr-open)
(bra 102)
213
(cabeq (cvalq dest) 'a1 215)
(mov nil a1)
(mov 'not-in-a1 a2)
(jmp #:llcp:exit)
215
(mov (cvalq l) a4)
(mov (car a4) a4)
(cabeq a4 'tag 219)
(cabne a4 'evtag 217)
219
(mov (cvalq l) a3)
(cabne (car a3) 'evtag 220)
(mov (cdr a3) a1)
(mov nil a3)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:exp)
(bra 221)
220
(mov (cdr a3) a1)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:movq)
(mov nil a2)
(mov 'a1 a1)
(call #:llcp:cr)
221
(mov 'tag a2)
(mov '#:llcp:tag a1)
(call #:llcp:specforminter)
(bra 102)
217
(mov (cvalq l) a3)
(cabne (car a3) 'exit 222)
(mov (cdr a3) a1)
(mov nil a3)
(mov 'a1 a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov 'a2 a2)
(mov (car a1) a1)
(call #:llcp:movq)
(mov '(jmp #:llcp:exit) a1)
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(bra 102)
222
(cabne (car a3) 'evexit 224)
(mov (cdr a3) a1)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:expush)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov nil a3)
(mov 'a1 a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
(mov 'a2 a1)
(call #:llcp:pop)
(mov '(jmp #:llcp:exit) a1)
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(bra 102)
224
(cabne (car a3) 'protect 226)
(mov (cvalq #:llcp:gencount) a2)
(plus '1 a2)
(mov a2 (cvalq #:llcp:gencount))
(push a2)
(plus '1 a2)
(mov a2 (cvalq #:llcp:gencount))
(push a2)
(push (cvalq #:llcp:deep))
(mov (cvalq #:llcp:lex) a2)
(mov 'protect a1)
(jcall cons)
(push (cvalq #:llcp:lex))
(mov a1 (cvalq #:llcp:lex))
(push (cvalq #:llcp:deep))
(mov (& 2) (cvalq #:llcp:deep))
(push '2)
(push '(#:llcp:lex #:llcp:deep))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 228))
(push '@)
(push (& 11))
(mov '2 a4)
(jmp list)
228
(eval ())
(call #:llcp:push)
(mov (cvalq #:llcp:deep) a4)
(plus '2 a4)
(mov a4 (cvalq #:llcp:deep))
(push (@ 229))
(push '@)
(push (& 12))
(mov '2 a4)
(jmp list)
229
(eval ())
(mov 'a3 a2)
(call #:llcp:mov)
(push (@ 230))
(push 'jcall)
(push '#:llcp:prot)
(mov '2 a4)
(jmp list)
230
(eval ())
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(mov 'a1 a1)
(call #:llcp:pop)
(mov 'a3 a1)
(call #:llcp:push)
(mov 'a1 a1)
(call #:llcp:push)
(mov 'a2 a1)
(call #:llcp:push)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov 't a3)
(mov 'a1 a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
(mov '(pop a2) a1)
(call #:llcp:add-code)
(mov '(pop a1) a1)
(call #:llcp:add-code)
(mov '(return) a1)
(call #:llcp:add-code)
(mov (& 10) a1)
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov nil a3)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:exp)
(mov '(return) a1)
(call #:llcp:add-code)
(mov (& 9) a1)
(call #:llcp:add-code)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:deep))
(mov (& 7) (cvalq #:llcp:lex))
(adjstk '11)
(bra 102)
226
(cabne (car a3) 'lock 231)
(mov (cdr a3) a1)
(mov nil a3)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:exp)
(mov 'lock a2)
(mov '#:llcp:lock a1)
(call #:llcp:specforminter)
(bra 102)
231
(cabne (car a3) 'schedule 233)
(mov (cdr a3) a1)
(mov nil a3)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:exp)
(mov 'schedule a2)
(mov '#:llcp:schedule a1)
(call #:llcp:specforminter)
(bra 102)
233
(cabne (car a3) 'block 235)
(mov (cdr a3) a1)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:movq)
(mov 'block a2)
(mov '#:llcp:block a1)
(call #:llcp:specforminter)
(bra 102)
235
(cabne (car a3) 'return-from 237)
(mov (cvalq #:llcp:lex) a2)
(mov 'block a1)
(jcall memq)
(bfnil a1 240)
(mov (cvalq l) a3)
(mov '"not in a lexical scope" a2)
(mov '":RETURN-FROM" a1)
(call #:llcp:warning)
240
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov nil a3)
(mov 'a1 a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov 'a2 a2)
(mov (car a1) a1)
(call #:llcp:movq)
(mov '(jmp #:llcp:retfrom) a1)
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(bra 102)
237
(cabne (car a3) 'tagbody 241)
(push (cvalq #:llcp:deep))
(mov (cvalq #:llcp:gencount) a2)
(plus '1 a2)
(mov a2 (cvalq #:llcp:gencount))
(push nil)
(push a2)
(push (cvalq #:llcp:deep))
(mov (& 3) (cvalq #:llcp:deep))
(push '1)
(push '(#:llcp:deep))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 243))
(push '@)
(push a2)
(mov '2 a4)
(jmp list)
243
(eval ())
(call #:llcp:push)
(mov (cvalq l) a4)
(push (cdr a4))
(push '0)
(push nil)
244
(bfcons (& 2) 245)
(mov (& 2) a4)
(btcons (car a4) 247)
(mov (cvalq #:llcp:gencount) a3)
(plus '1 a3)
(mov a3 (cvalq #:llcp:gencount))
(mov a3 (& 0))
(mov a3 a2)
(mov (car a4) a1)
(jcall cons)
(mov (& 11) a2)
(jcall cons)
(mov a1 (& 11))
(push (@ 248))
(push '@)
(push (& 2))
(mov '2 a4)
(jmp list)
248
(eval ())
(call #:llcp:push)
(mov (& 2) a1)
(mov (car a1) a1)
(call #:llcp:pushq)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
247
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(bra 244)
245
(mov (& 1) a1)
(call #:llcp:pushq)
(adjstk '3)
(push (@ 249))
(push 'jcall)
(push '#:llcp:tagbody)
(mov '2 a4)
(jmp list)
249
(eval ())
(call #:llcp:add-code)
(push (@ 250))
(push 'tagbody)
(push (cvalq #:llcp:deep))
(push (& 11))
(mov '3 a4)
(jmp list)
250
(eval ())
(mov (cvalq #:llcp:lex) a2)
(jcall cons)
(mov (cvalq l) a4)
(push (cdr a4))
(push (cvalq #:llcp:lex))
(mov a1 (cvalq #:llcp:lex))
(push '1)
(push '(#:llcp:lex))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
251
(bfcons (& 7) 252)
(mov (& 7) a4)
(bfcons (car a4) 253)
(mov 't a3)
(mov (cvalq dest) a2)
(mov (car a4) a1)
(call #:llcp:exp)
(bra 254)
253
(mov (& 16) a2)
(mov (car a4) a1)
(jcall cassq)
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
254
(mov (& 7) a4)
(mov (cdr a4) (& 7))
(bra 251)
252
(btnil (cvalq #:llcp:effectp) 255)
(mov '(eval 'peephole) a1)
(call #:llcp:add-code)
(bra 256)
255
(mov (cvalq dest) a2)
(mov 'nil a1)
(call #:llcp:mov)
256
(call #:llcp:cr-all-nil)
(mov '(return) a1)
(call #:llcp:add-code)
(mov (& 15) a1)
(call #:llcp:add-code)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:lex))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:deep))
(adjstk '10)
(bra 102)
241
(cabne (car a3) 'go 257)
(mov (cvalq #:llcp:lex) a2)
(bfcons (car a2) 259)
(mov (car a2) a4)
(cabne (car a4) 'tagbody 259)
(mov (cdr a3) a1)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall assq)
(btnil a1 259)
(mov (cvalq #:llcp:lex) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (cvalq #:llcp:deep) a3)
(diff (car a4) a3)
(cabeq a3 '0 262)
(mov '(adjstk (kwote (sub #:llcp:deep (cadar #:llcp:lex)))) a1)
(call #:llcp:add-code)
(mov (cvalq #:llcp:lex) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) (cvalq #:llcp:deep))
262
(push (@ 263))
(push 'bra)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cvalq #:llcp:lex) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall cassq)
(push a1)
(mov '2 a4)
(jmp list)
263
(eval ())
(call #:llcp:add-code)
(bra 260)
259
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:movq)
(call #:llcp:cr-all-nil)
(mov '(jmp #:llcp:go) a1)
(call #:llcp:add-code)
260
(call #:llcp:cr-all-nil)
(bra 102)
257
(call #:llcp:expsubr)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq l))
(mov (& 7) (cvalq dest))
(mov (& 8) (cvalq #:llcp:effectp))
(adjstk '9)
(return)
))
(loader'((entry #:llcp:expsubr-open subr3)
(push a3)
(push a1)
(mov a2 a1)
(cabne a1 '0 102)
(mov (& 0) a1)
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(adjstk '2)
(bra #:llcp:exp)
102
(cabne a1 '1 103)
(mov (& 0) a1)
(mov (car a1) a1)
(call #:llcp:diropreg)
(push a1)
(bfnil a1 105)
(mov (& 1) a1)
(mov nil a3)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:exp-any)
(mov a1 (& 0))
105
(push (@ 106))
(push (& 3))
(push a1)
(mov '2 a4)
(jmp list)
106
(eval ())
(mov (cvalq dest) a2)
(call #:llcp:mov)
(push (cvalq dest))
(mov (& 2) a4)
(btsymb (car a4) 109)
(bfcons (car a4) 107)
(mov (car a4) a3)
(mov (car a3) a3)
(cabeq a3 'car 110)
(cabne a3 'cdr 107)
110
(mov (car a4) a2)
(mov (cdr a2) a2)
(btsymb (car a2) 109)
(mov (car a4) a1)
(mov (cdr a1) a1)
(bfcons (car a1) 107)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (car a4) a4)
(cabeq a4 'car 112)
(cabne a4 'cdr 107)
112
(mov (& 2) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bfsymb (car a4) 107)
109
(push (@ 113))
(push (& 4))
(mov (& 4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
113
(eval ())
(mov a1 a2)
(bra 108)
107
(mov nil a2)
108
(pop a1)
(adjstk '3)
(bra #:llcp:cr)
103
(cabne a1 '2 114)
(push (@ 115))
(push a3)
(mov (& 2) a1)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:diroporany)
(push a1)
(push (cvalq dest))
(mov '3 a4)
(jmp list)
115
(eval ())
(call #:llcp:add-code)
(mov nil a2)
(mov (cvalq dest) a1)
(adjstk '2)
(bra #:llcp:cr)
114
(cabne a1 '3 116)
(mov (& 0) a4)
(mov (cdr a4) a4)
(btcons (car a4) 117)
(mov (& 0) a1)
(mov nil a3)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:exp)
(push (@ 119))
(push (& 2))
(mov (& 2) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(push a1)
(push (cvalq dest))
(mov '3 a4)
(jmp list)
119
(eval ())
(call #:llcp:add-code)
(mov nil a2)
(mov (cvalq dest) a1)
(adjstk '2)
(bra #:llcp:cr)
117
(cabeq (cvalq dest) 'a1 120)
(mov nil a1)
(mov 'not-in-a1 a2)
(jmp #:llcp:exit)
(adjstk '2)
(return)
120
(mov (cvalq l) a1)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:llcp:exp-2)
(mov '(a2 a1) a2)
(mov (& 1) a1)
(jcall cons)
(call #:llcp:add-code)
(mov nil a2)
(mov (cvalq dest) a1)
(adjstk '2)
(bra #:llcp:cr)
116
(cabne a1 '4 122)
(mov (& 0) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(mov a1 (cvalq aux1))
(btnil a1 123)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(mov a1 (cvalq aux2))
(btnil a1 123)
(push (@ 125))
(push (& 2))
(push (cvalq aux1))
(push (cvalq aux2))
(push (cvalq dest))
(mov '4 a4)
(jmp list)
125
(eval ())
(call #:llcp:add-code)
(mov nil a2)
(mov (cvalq dest) a1)
(adjstk '2)
(bra #:llcp:cr)
123
(cabeq (cvalq dest) 'a1 126)
(mov nil a1)
(mov 'not-in-a1 a2)
(jmp #:llcp:exit)
(adjstk '2)
(return)
126
(mov (cvalq l) a1)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:llcp:exp-2)
(mov '(a1 a2 a1) a2)
(mov (& 1) a1)
(jcall cons)
(call #:llcp:add-code)
(mov nil a2)
(mov (cvalq dest) a1)
(adjstk '2)
(bra #:llcp:cr)
122
(cabne a1 '5 128)
(mov (& 0) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(mov a1 (cvalq aux1))
(bfsymb a1 129)
(btnil a1 129)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(mov a1 (cvalq aux2))
(btnil a1 129)
(push (cvalq aux2))
(push (@ 131))
(push (& 3))
(push (cvalq aux1))
(mov '2 a4)
(jmp list)
131
(eval ())
(mov a1 a2)
(pop a1)
(call #:llcp:mov)
(bfnil (cvalq #:llcp:effectp) 130)
(cabeq (cvalq aux1) (cvalq dest) 130)
(mov (cvalq dest) a2)
(mov (cvalq aux1) a1)
(call #:llcp:mov)
(mov (cvalq aux1) a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
(bra 130)
129
(cabeq (cvalq dest) 'a1 136)
(mov nil a1)
(mov 'not-in-a1 a2)
(jmp #:llcp:exit)
136
(mov (cvalq l) a1)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:llcp:exp-2)
(push (@ 138))
(push (& 2))
(push 'a1)
(mov '2 a4)
(jmp list)
138
(eval ())
(mov a1 a2)
(mov 'a2 a1)
(call #:llcp:mov)
130
(adjstk '2)
(bra #:llcp:cr-forget-cons)
128
(cabne a1 '6 139)
(mov (& 0) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(mov a1 (cvalq aux1))
(btnil a1 140)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(mov a1 (cvalq aux2))
(btnil a1 140)
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(mov a1 (cvalq aux3))
(btnil a1 140)
(push (@ 142))
(push (& 2))
(push (cvalq aux3))
(push (cvalq aux1))
(push (cvalq aux2))
(mov '4 a4)
(jmp list)
142
(eval ())
(call #:llcp:add-code)
(bfsymb (cvalq aux3) 144)
(cabeq (cvalq aux3) 'nil 144)
(mov nil a2)
(mov (cvalq aux3) a1)
(call #:llcp:cr)
144
(bfnil (cvalq #:llcp:effectp) 145)
(cabeq (cvalq aux3) (cvalq dest) 147)
(mov (cvalq dest) a2)
(mov (cvalq aux3) a1)
(call #:llcp:mov)
(mov nil a2)
(mov (cvalq dest) a1)
(adjstk '2)
(bra #:llcp:cr)
147
(mov nil a1)
(adjstk '2)
(return)
145
(mov nil a1)
(adjstk '2)
(return)
140
(cabeq (cvalq dest) 'a1 149)
(mov nil a1)
(mov 'not-in-a1 a2)
(jmp #:llcp:exit)
(adjstk '2)
(return)
149
(mov (& 0) a1)
(mov (cdr a1) a2)
(mov (cdr a1) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:llcp:exp-3)
(mov '(a3 a1 a2) a2)
(mov (& 1) a1)
(jcall cons)
(call #:llcp:add-code)
(bfnil (cvalq #:llcp:effectp) 151)
(mov 'a1 a2)
(mov 'a3 a1)
(call #:llcp:mov)
(mov (cvalq #:llcp:a3) a2)
(mov 'a1 a1)
(adjstk '2)
(bra #:llcp:cr)
151
(mov nil a1)
(adjstk '2)
(return)
139
(push (@ 154))
(push '":EXPSUBR-OPEN")
(push (@ 155))
(push (cvalq l))
(push a3)
(push a1)
(mov '3 a4)
(jmp list)
155
(eval ())
(push a1)
(mov '2 a4)
(bra #:llcp:error)
154
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:llcp:expsubr subr0)
(mov (cvalq l) a1)
(mov '#:llcp:ftype a2)
(mov (car a1) a1)
(jcall getprop)
(bfnil a1 102)
(mov (cvalq l) a1)
(mov (car a1) a1)
(jcall typefn)
102
(cabne a1 'subr0 103)
(mov (cvalq l) a1)
(mov (car a1) a1)
(call #:llcp:call)
(bra #:llcp:cr-all-nil)
103
(cabne a1 'subr1 104)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov nil a3)
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:exp)
(mov (cvalq l) a1)
(mov (car a1) a1)
(call #:llcp:call)
(bra #:llcp:cr-all-nil)
104
(cabne a1 'subr2 105)
(mov (cvalq l) a1)
(mov (cdr a1) a2)
(mov (cdr a1) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:llcp:exp-2)
(mov (cvalq l) a1)
(mov (car a1) a1)
(call #:llcp:call)
(bra #:llcp:cr-all-nil)
105
(cabne a1 'subr3 106)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cvalq l) a2)
(mov (cdr a2) a2)
(mov (cdr a2) a2)
(mov (cvalq l) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (cdr a3) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (car a1) a1)
(call #:llcp:exp-3)
(mov (cvalq l) a1)
(mov (car a1) a1)
(call #:llcp:call)
(bra #:llcp:cr-all-nil)
106
(cabne a1 'nsubr 107)
(mov (cvalq l) a4)
(bfcons (cdr a4) 108)
(push (cvalq #:llcp:deep))
(mov (cvalq #:llcp:gencount) a3)
(plus '1 a3)
(mov a3 (cvalq #:llcp:gencount))
(push '0)
(push (car a4))
(push (cdr a4))
(push a3)
(push (cvalq #:llcp:deep))
(mov (& 5) (cvalq #:llcp:deep))
(push '1)
(push '(#:llcp:deep))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 110))
(push '@)
(push a3)
(mov '2 a4)
(jmp list)
110
(eval ())
(call #:llcp:push)
111
(bfcons (& 8) 112)
(mov (& 8) a1)
(mov (cdr a1) (& 8))
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:expush)
(mov (& 10) a4)
(plus '1 a4)
(mov a4 (& 10))
(bra 111)
112
(mov 'a4 a2)
(mov (& 10) a1)
(call #:llcp:movq)
(push (@ 113))
(push 'jmp)
(push (& 11))
(mov '2 a4)
(jmp list)
113
(eval ())
(call #:llcp:add-code)
(mov (& 7) a1)
(call #:llcp:add-code)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:deep))
(adjstk '12)
(bra #:llcp:cr-all-nil)
108
(mov '(mov '0 a4) a1)
(call #:llcp:add-code)
(mov (cvalq l) a1)
(mov (car a1) a1)
(call #:llcp:call)
(bra #:llcp:cr-all-nil)
107
(cabne a1 'fsubr 114)
(mov (cvalq l) a1)
(mov 'a1 a2)
(mov (cdr a1) a1)
(call #:llcp:movq)
(mov (cvalq l) a3)
(mov (car a3) a3)
(mov '"FSUBR call" a2)
(mov '":EXPSUBR" a1)
(call #:llcp:warning)
(mov (cvalq l) a1)
(mov (car a1) a1)
(call #:llcp:call)
(bra #:llcp:cr-all-nil)
114
(mov (cvalq l) a1)
(jcall numberp)
(btnil a1 116)
(mov 'a1 a2)
(mov (cvalq l) a1)
(call #:llcp:movq)
(bra #:llcp:cr-all-nil)
116
(push (@ 118))
(push '#:llcp:expsubr)
(push '"unknow function")
(mov (cvalq l) a4)
(push (car a4))
(push a4)
(mov '4 a4)
(bra #:llcp:parano)
118
(eval ())
(bra #:llcp:cr-all-nil)
))
(loader'((entry #:llcp:exp-any subr3)
(push a3)
(push a2)
(push a1)
(mov a2 a1)
(call #:llcp:cr-any-reg)
(push a1)
(push (@ 102))
(push 'backtrack)
(push dlink)
(push tag)
(stack dlink)
(push (cvalq #:llcp:lap))
(push (cvalq #:llcp:a1))
(push (cvalq #:llcp:a2))
(push (cvalq #:llcp:a3))
(push (cvalq #:llcp:a4))
(push (cvalq #:llcp:deep))
(push (@ 103))
(push 'not-in-a1)
(push dlink)
(push tag)
(stack dlink)
(mov (& 17) a3)
(mov a1 a2)
(mov (& 15) a1)
(call #:llcp:exp)
(mov (& 14) a1)
(mov 'backtrack a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 5) (cvalq #:llcp:lap))
(mov (& 4) (cvalq #:llcp:a1))
(mov (& 3) (cvalq #:llcp:a2))
(mov (& 2) (cvalq #:llcp:a3))
(mov (& 1) (cvalq #:llcp:a4))
(mov (& 0) (cvalq #:llcp:deep))
(push (@ 104))
(push 'not-in-a1)
(push dlink)
(push tag)
(stack dlink)
(mov nil a1)
(mov 'backtrack a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
104
(eval ())
(mov (& 5) (cvalq #:llcp:lap))
(mov (& 4) (cvalq #:llcp:a1))
(mov (& 3) (cvalq #:llcp:a2))
(mov (& 2) (cvalq #:llcp:a3))
(mov (& 1) (cvalq #:llcp:a4))
(mov (& 0) (cvalq #:llcp:deep))
(mov (& 0) a1)
(adjstk '6)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(bfnil a1 101)
(mov (& 3) a3)
(mov (& 2) a2)
(mov (& 1) a1)
(call #:llcp:exp)
(mov (& 2) a1)
101
(adjstk '4)
(return)
))
(loader'((entry #:llcp:exp-2 subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(push 'backtrack)
(push dlink)
(push tag)
(stack dlink)
(push (cvalq #:llcp:lap))
(push (cvalq #:llcp:a1))
(push (cvalq #:llcp:a2))
(push (cvalq #:llcp:a3))
(push (cvalq #:llcp:a4))
(push (cvalq #:llcp:deep))
(push (@ 102))
(push 'not-in-a1)
(push dlink)
(push tag)
(stack dlink)
(push a2)
(mov nil a3)
(mov 'a1 a2)
(pop a1)
(call #:llcp:exp)
(mov nil a3)
(mov 'a2 a2)
(mov (& 16) a1)
(call #:llcp:exp)
(mov 'backtrack a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(mov (& 5) (cvalq #:llcp:lap))
(mov (& 4) (cvalq #:llcp:a1))
(mov (& 3) (cvalq #:llcp:a2))
(mov (& 2) (cvalq #:llcp:a3))
(mov (& 1) (cvalq #:llcp:a4))
(mov (& 0) (cvalq #:llcp:deep))
(push (@ 103))
(push 'not-in-a1)
(push dlink)
(push tag)
(stack dlink)
(mov 'a1 a2)
(mov (& 15) a1)
(call #:llcp:expush)
(mov nil a3)
(mov 'a1 a2)
(mov (& 16) a1)
(call #:llcp:exp)
(mov (cvalq #:llcp:list-commutp) a2)
(mov (& 14) a1)
(jcall memq)
(btnil a1 104)
(mov 'a2 a1)
(call #:llcp:pop)
(mov nil a2)
(mov 'a2 a1)
(call #:llcp:cr)
(bra 105)
104
(mov 'a2 a2)
(mov 'a1 a1)
(call #:llcp:mov)
(mov (cvalq #:llcp:a1) a2)
(mov 'a2 a1)
(call #:llcp:cr)
(mov 'a1 a1)
(call #:llcp:pop)
(mov nil a2)
(mov 'a1 a1)
(call #:llcp:cr)
105
(mov 'backtrack a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 5) (cvalq #:llcp:lap))
(mov (& 4) (cvalq #:llcp:a1))
(mov (& 3) (cvalq #:llcp:a2))
(mov (& 2) (cvalq #:llcp:a3))
(mov (& 1) (cvalq #:llcp:a4))
(mov (& 0) (cvalq #:llcp:deep))
(mov (& 0) a1)
(adjstk '6)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:llcp:exp-3 subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(push 'backtrack)
(push dlink)
(push tag)
(stack dlink)
(push (cvalq #:llcp:lap))
(push (cvalq #:llcp:a1))
(push (cvalq #:llcp:a2))
(push (cvalq #:llcp:a3))
(push (cvalq #:llcp:a4))
(push (cvalq #:llcp:deep))
(push (@ 102))
(push 'not-in-a1)
(push dlink)
(push tag)
(stack dlink)
(mov nil a3)
(mov 'a1 a2)
(call #:llcp:exp)
(mov nil a3)
(mov 'a2 a2)
(mov (& 15) a1)
(call #:llcp:exp)
(mov nil a3)
(mov 'a3 a2)
(mov (& 16) a1)
(call #:llcp:exp)
(mov 'backtrack a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(mov (& 5) (cvalq #:llcp:lap))
(mov (& 4) (cvalq #:llcp:a1))
(mov (& 3) (cvalq #:llcp:a2))
(mov (& 2) (cvalq #:llcp:a3))
(mov (& 1) (cvalq #:llcp:a4))
(mov (& 0) (cvalq #:llcp:deep))
(push (@ 103))
(push 'not-in-a1)
(push dlink)
(push tag)
(stack dlink)
(mov 'a1 a2)
(mov (& 14) a1)
(call #:llcp:expush)
(mov 'a1 a2)
(mov (& 15) a1)
(call #:llcp:expush)
(mov nil a3)
(mov 'a1 a2)
(mov (& 16) a1)
(call #:llcp:exp)
(mov 'a3 a2)
(mov 'a1 a1)
(call #:llcp:mov)
(mov (cvalq #:llcp:a1) a2)
(mov 'a3 a1)
(call #:llcp:cr)
(mov 'a2 a1)
(call #:llcp:pop)
(mov nil a2)
(mov 'a2 a1)
(call #:llcp:cr)
(mov 'a1 a1)
(call #:llcp:pop)
(mov nil a2)
(mov 'a1 a1)
(call #:llcp:cr)
(mov 'backtrack a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 5) (cvalq #:llcp:lap))
(mov (& 4) (cvalq #:llcp:a1))
(mov (& 3) (cvalq #:llcp:a2))
(mov (& 2) (cvalq #:llcp:a3))
(mov (& 1) (cvalq #:llcp:a4))
(mov (& 0) (cvalq #:llcp:deep))
(mov (& 0) a1)
(adjstk '6)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:llcp:specforminter subr2)
(push a1)
(push a2)
(mov (cvalq #:llcp:lex) a2)
(pop a1)
(jcall cons)
(push (cvalq #:llcp:deep))
(mov (cvalq #:llcp:gencount) a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(push a4)
(push (cvalq #:llcp:lex))
(mov a1 (cvalq #:llcp:lex))
(push (cvalq #:llcp:deep))
(mov (& 3) (cvalq #:llcp:deep))
(push '2)
(push '(#:llcp:lex #:llcp:deep))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '@)
(push a4)
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:llcp:push)
(push (@ 102))
(push 'jcall)
(push (& 12))
(mov '2 a4)
(jmp list)
102
(eval ())
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(mov (cvalq l) a1)
(mov (cdr a1) a1)
(mov (cvalq #:llcp:effectp) a3)
(mov 'a1 a2)
(mov (cdr a1) a1)
(call #:llcp:progn-last)
(call #:llcp:cr-all-nil)
(mov (& 8) a1)
(call #:llcp:add-code)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:deep))
(mov (& 7) (cvalq #:llcp:lex))
(adjstk '11)
(return)
))
(loader'((entry #:llcp:parano nsubr)
(btnil (cvalq #:llcp:all-p) 101)
(mov (& 0) a4)
(bfsymb (car a4) 101)
(mov 'dont-compile a2)
(mov (car a4) a1)
(jcall getprop)
(bfnil a1 101)
(mov (& 0) a1)
(mov (car a1) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'expr 103)
(cabeq a4 'fexpr 103)
(cabeq a4 'macro 103)
(cabne a4 'dmacro 101)
103
(mov (& 0) a1)
(mov (car a1) a1)
(call #:llcp:compilindic)
(btnil a1 105)
(mov (& 0) a1)
(mov (cvalq #:llcp:xrefnt) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq #:llcp:xrefnt))
105
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(mov (& 0) a1)
(call #:llcp:exp)
(bra 102)
101
(mov (& 0) a4)
(bfsymb (car a4) 108)
(mov 'dont-compile a2)
(mov (car a4) a1)
(jcall getprop)
(bfnil a1 107)
108
(push (@ 109))
(push '"PARANO : ")
(push (& 4))
(mov '2 a4)
(jmp catenate)
109
(eval ())
(mov (& 1) a3)
(mov a1 a2)
(mov (& 3) a1)
(call #:llcp:warning)
107
(mov (cvalq #:llcp:gencount) a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(push (cvalq #:llcp:deep))
(push a4)
(push (cvalq #:llcp:deep))
(mov (& 2) (cvalq #:llcp:deep))
(push '1)
(push '(#:llcp:deep))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 110))
(push '@)
(push a4)
(mov '2 a4)
(jmp list)
110
(eval ())
(call #:llcp:push)
(mov (& 9) a1)
(call #:llcp:pushq)
(mov 'a4 a2)
(mov '1 a1)
(call #:llcp:movq)
(mov '(jmp eval) a1)
(call #:llcp:add-code)
(mov (& 7) a1)
(call #:llcp:add-code)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:deep))
(adjstk '9)
102
(adjstk '4)
(bra #:llcp:cr-all-nil)
))
(loader'((entry #:llcp:app-lambda subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:llcp:deep))
(mov (cvalq #:llcp:lex) a2)
(mov 'lambda a1)
(jcall cons)
(mov (cvalq #:llcp:gencount) a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(push a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(push '0)
(push a4)
(push (cvalq #:llcp:lex))
(mov a1 (cvalq #:llcp:lex))
(push (cvalq #:llcp:deep))
(mov (& 5) (cvalq #:llcp:deep))
(push '2)
(push '(#:llcp:lex #:llcp:deep))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 10) a1)
(call #:llcp:add-code)
(push (@ 101))
(push '@)
(push (& 10))
(mov '2 a4)
(jmp list)
101
(eval ())
(call #:llcp:push)
102
(bfcons (& 13) 103)
(mov (& 13) a1)
(mov (cdr a1) (& 13))
(mov 'a1 a2)
(mov (car a1) a1)
(call #:llcp:expush)
(mov (& 9) a4)
(plus '1 a4)
(mov a4 (& 9))
(bra 102)
103
(mov 'a4 a2)
(mov (& 9) a1)
(call #:llcp:movq)
(push (@ 104))
(push '@)
(push (& 12))
(mov '2 a4)
(jmp list)
104
(eval ())
(mov 'a2 a2)
(call #:llcp:mov)
(mov 'a3 a2)
(mov (& 12) a1)
(call #:llcp:movq)
(push (@ 105))
(push 'jcall)
(push '#:llcp:cbindl)
(mov '2 a4)
(jmp list)
105
(eval ())
(call #:llcp:add-code)
(call #:llcp:cr-all-nil)
(mov nil a3)
(mov 'a1 a2)
(mov (& 14) a1)
(call #:llcp:progn-last)
(call #:llcp:cr-all-nil)
(mov (& 8) a1)
(call #:llcp:add-code)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:deep))
(mov (& 7) (cvalq #:llcp:lex))
(adjstk '15)
(return)
))
(loader'((entry #:llcp:selectq subr0)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(mov (cvalq #:llcp:gencount) a3)
(plus '1 a3)
(mov a3 (cvalq #:llcp:gencount))
(push (car a4))
(push nil)
(push nil)
(push nil)
(push a3)
(mov nil a3)
(mov (cvalq dest) a2)
(mov (& 4) a1)
(call #:llcp:exp)
(mov (cvalq l) a4)
(mov (cdr a4) a4)
(mov (cdr a4) (cvalq l))
101
(bfcons (cvalq l) 102)
(push (@ 103))
(push '#:llcp:selectq)
(push dlink)
(push tag)
(stack dlink)
(mov (cvalq #:llcp:gencount) a4)
(plus '1 a4)
(mov a4 (cvalq #:llcp:gencount))
(mov a4 (& 6))
(mov (cvalq l) a3)
(btcons (car a3) 104)
(mov '"bad clause" a2)
(mov 'selectq a1)
(call #:llcp:warning)
(mov nil a1)
(mov '#:llcp:selectq a2)
(jmp #:llcp:exit)
104
(mov (car a3) a2)
(cabne (car a2) 't 106)
(mov 't (& 7))
(bra 105)
106
(mov (car a3) a1)
(mov (car a1) a1)
(call #:llcp:eqp)
(btnil a1 108)
(push (@ 110))
(push 'cabne)
(push (cvalq dest))
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (car a1) a1)
(jcall kwote)
(push a1)
(push (& 10))
(mov '4 a4)
(jmp list)
110
(eval ())
(call #:llcp:add-code)
(bra 105)
108
(mov (cvalq l) a4)
(mov (car a4) a4)
(bfcons (car a4) 111)
(mov (cvalq l) a3)
(mov (car a3) a3)
(push (car a3))
(push 't)
113
(bfcons (& 1) 114)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(call #:llcp:eqp)
(mov a1 (& 0))
(btnil a1 114)
(bra 113)
114
(mov (& 0) a3)
(adjstk '2)
(btnil a3 111)
(mov (cvalq l) a4)
(mov (car a4) a4)
(mov (cvalq #:llcp:gencount) a3)
(plus '1 a3)
(mov a3 (cvalq #:llcp:gencount))
(push (car a4))
(push a3)
115
(mov (& 1) a4)
(bfcons (cdr a4) 116)
(push (@ 117))
(push 'cabeq)
(push (cvalq dest))
(mov (cdr a4) (& 4))
(mov (car a4) a1)
(jcall kwote)
(push a1)
(push (& 4))
(mov '4 a4)
(jmp list)
117
(eval ())
(call #:llcp:add-code)
(bra 115)
116
(push (@ 118))
(push 'cabne)
(push (cvalq dest))
(mov (car a4) a1)
(jcall kwote)
(push a1)
(push (& 12))
(mov '4 a4)
(jmp list)
118
(eval ())
(call #:llcp:add-code)
(mov (& 0) a1)
(call #:llcp:add-code)
(adjstk '2)
(bra 105)
111
(cabeq (cvalq dest) 'a1 120)
(mov nil a1)
(mov 'not-in-a1 a2)
(jmp #:llcp:exit)
120
(mov 'a1 a1)
(call #:llcp:push)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov 'a2 a2)
(mov (car a1) a1)
(call #:llcp:movq)
(push (@ 121))
(push 'jcall)
(mov (cvalq l) a4)
(mov (car a4) a4)
(btcons (car a4) 122)
(mov 'equal a4)
(bra 123)
122
(mov 'member a4)
123
(push a4)
(mov '2 a4)
(jmp list)
121
(eval ())
(call #:llcp:add-code)
(mov 'a2 a2)
(mov 'a1 a1)
(call #:llcp:mov)
(mov 'a1 a1)
(call #:llcp:pop)
(call #:llcp:cr-all-nil)
(push (@ 124))
(push 'btnil)
(push 'a2)
(push (& 9))
(mov '3 a4)
(jmp list)
124
(eval ())
(call #:llcp:add-code)
105
(push (cvalq #:llcp:a1))
(push (cvalq #:llcp:a2))
(push (cvalq #:llcp:a3))
(push (cvalq #:llcp:a4))
(push (cvalq #:llcp:a4))
(mov (& 1) (cvalq #:llcp:a4))
(push (cvalq #:llcp:a3))
(mov (& 3) (cvalq #:llcp:a3))
(push (cvalq #:llcp:a2))
(mov (& 5) (cvalq #:llcp:a2))
(push (cvalq #:llcp:a1))
(mov (& 7) (cvalq #:llcp:a1))
(push '4)
(push '(#:llcp:a4 #:llcp:a3 #:llcp:a2 #:llcp:a1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq l) a1)
(mov (car a1) a1)
(mov (cvalq #:llcp:effectp) a3)
(mov (cvalq dest) a2)
(mov (cdr a1) a1)
(call #:llcp:progn)
(mov (cvalq l) a4)
(bfnil (cdr a4) 127)
(bfnil (& 21) 126)
(bfnil (cvalq #:llcp:effectp) 126)
127
(push (@ 128))
(push 'bra)
(push (& 20))
(mov '2 a4)
(jmp list)
128
(eval ())
(call #:llcp:add-code)
126
(call #:llcp:cr-list)
(mov (& 19) a2)
(jcall cons)
(mov a1 (& 19))
(mov (& 1) dlink)
(mov (& 6) (cvalq #:llcp:a1))
(mov (& 7) (cvalq #:llcp:a2))
(mov (& 8) (cvalq #:llcp:a3))
(mov (& 9) (cvalq #:llcp:a4))
(adjstk '14)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (cvalq l) a4)
(mov (cdr a4) (cvalq l))
(mov (& 2) a1)
(call #:llcp:add-code)
(bra 101)
102
(mov (& 1) a1)
(call #:llcp:cr-intersect-list)
(bfnil (& 3) 130)
(bfnil (cvalq #:llcp:effectp) 130)
(mov (cvalq dest) a2)
(mov 'nil a1)
(call #:llcp:mov)
(mov nil a2)
(mov (cvalq dest) a1)
(call #:llcp:cr)
130
(mov (& 0) a1)
(adjstk '5)
(bra #:llcp:add-code)
))
(loader'((entry #:llcp:expush subr2)
(call #:llcp:diroporany)
(bra #:llcp:push)
))
(loader'((entry #:llcp:progn subr3)
(push a3)
(push a2)
(push a1)
101
(mov (& 0) a4)
(bfcons (cdr a4) 102)
(mov (cdr a4) (& 0))
(mov 't a3)
(mov (& 1) a2)
(mov (car a4) a1)
(call #:llcp:exp)
(bra 101)
102
(mov (& 2) a3)
(mov (& 1) a2)
(mov (car a4) a1)
(adjstk '3)
(bra #:llcp:exp)
))
(loader'((entry #:llcp:progn-last subr3)
(call #:llcp:progn)
(mov '(return) a1)
(bra #:llcp:add-code)
))
(loader'((entry #:llcp:pred nsubr)
(push (cvalq dest))
(mov (& 1) (cvalq dest))
(push (cvalq etiq))
(mov (& 3) (cvalq etiq))
(push (cvalq ind))
(mov (& 5) (cvalq ind))
(push (cvalq l))
(mov (& 7) (cvalq l))
(push '4)
(push '(dest etiq ind l))
(push (@ #:llcp:pred))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil (cvalq l) 101)
(btnil (cvalq ind) 103)
(mov nil a1)
(bra 102)
103
(push (@ 105))
(push 'bra)
(push (cvalq etiq))
(mov '2 a4)
(jmp list)
105
(eval ())
(call #:llcp:add-code)
(bra 102)
101
(mov (cvalq l) a1)
(call #:llcp:quotep)
(btnil a1 106)
(btnil (cvalq ind) 108)
(push (@ 110))
(push 'bra)
(push (cvalq etiq))
(mov '2 a4)
(jmp list)
110
(eval ())
(call #:llcp:add-code)
(bra 102)
108
(mov nil a1)
(bra 102)
106
(mov (cvalq l) a1)
(call #:llcp:dirop)
(mov a1 (cvalq aux1))
(btnil a1 111)
(push (@ 113))
(btnil (cvalq ind) 114)
(mov 'bfnil a4)
(bra 115)
114
(mov 'btnil a4)
115
(push a4)
(push a1)
(push (cvalq etiq))
(mov '3 a4)
(jmp list)
113
(eval ())
(call #:llcp:add-code)
(bra 102)
111
(push (cvalq l))
(mov (cvalq l) a1)
(jcall #:compiler:macroexpand)
(mov a1 (cvalq aux1))
(pop a4)
(cabeq a4 a1 116)
(push (@ 118))
(push a1)
(push (cvalq ind))
(push (cvalq etiq))
(push (cvalq dest))
(mov '4 a4)
(bra #:llcp:pred)
118
(eval ())
(bra 102)
116
(btcons (cvalq l) 119)
(push (@ 121))
(push (cvalq l))
(mov '1 a4)
(bra #:llcp:error)
121
(eval ())
(bra 102)
119
(mov (cvalq l) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(call #:llcp:pred-list)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq l))
(mov (& 7) (cvalq ind))
(mov (& 8) (cvalq etiq))
(mov (& 9) (cvalq dest))
(adjstk '14)
(return)
))
(loader'((entry #:llcp:pred-list subr2)
(push (cvalq larg))
(mov a2 (cvalq larg))
(push (cvalq fnt))
(mov a1 (cvalq fnt))
(push '2)
(push '(larg fnt))
(push (@ #:llcp:pred-list))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(cabne a1 'not 101)
(push (@ 103))
(push (car a2))
(btnil (cvalq ind) 104)
(mov nil a4)
(bra 105)
104
(mov 't a4)
105
(push a4)
(push (cvalq etiq))
(push (cvalq dest))
(mov '4 a4)
(bra #:llcp:pred)
103
(eval ())
(bra 102)
101
(mov a1 a4)
(cabeq a4 'and 108)
(cabne a4 'or 106)
108
(push nil)
(cabne a1 'and 111)
(btnil (cvalq ind) 113)
(mov nil a3)
(bra 112)
113
(mov 't a3)
(bra 112)
111
(mov (cvalq ind) a3)
112
(btnil a3 109)
115
(bfcons (cvalq larg) 110)
(push (@ 117))
(mov (cvalq larg) a4)
(mov (cdr a4) (cvalq larg))
(push (car a4))
(push (cvalq ind))
(push (cvalq etiq))
(push (cvalq dest))
(mov '4 a4)
(bra #:llcp:pred)
117
(eval ())
(call #:llcp:cr-list)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 115)
109
(mov (cvalq #:llcp:gencount) a3)
(plus '1 a3)
(mov a3 (cvalq #:llcp:gencount))
(push a3)
118
(mov (cvalq larg) a4)
(bfcons (cdr a4) 119)
(push (@ 120))
(mov (cdr a4) (cvalq larg))
(push (car a4))
(btnil (cvalq ind) 121)
(mov nil a3)
(bra 122)
121
(mov 't a3)
122
(push a3)
(push (& 3))
(push (cvalq dest))
(mov '4 a4)
(bra #:llcp:pred)
120
(eval ())
(call #:llcp:cr-list)
(mov (& 1) a2)
(jcall cons)
(mov a1 (& 1))
(bra 118)
119
(push (@ 123))
(push (car a4))
(push (cvalq ind))
(push (cvalq etiq))
(push (cvalq dest))
(mov '4 a4)
(bra #:llcp:pred)
123
(eval ())
(mov (& 0) a1)
(call #:llcp:add-code)
(adjstk '1)
110
(mov (& 0) a1)
(call #:llcp:cr-intersect-list)
(adjstk '1)
(bra 102)
106
(cabne a1 'fixp 124)
(mov 'bffix a2)
(mov 'btfix a1)
(call #:llcp:pred-list-aux2)
(bra 102)
124
(cabne a1 'floatp 126)
(mov 'bffloat a2)
(mov 'btfloat a1)
(call #:llcp:pred-list-aux2)
(bra 102)
126
(cabne a1 'stringp 128)
(mov 'bfstrg a2)
(mov 'btstrg a1)
(call #:llcp:pred-list-aux2)
(bra 102)
128
(cabne a1 'vectorp 130)
(mov 'bfvect a2)
(mov 'btvect a1)
(call #:llcp:pred-list-aux2)
(bra 102)
130
(cabne a1 'variablep 132)
(mov 'bfvar a2)
(mov 'btvar a1)
(call #:llcp:pred-list-aux2)
(bra 102)
132
(cabne a1 'symbolp 134)
(mov 'bfsymb a2)
(mov 'btsymb a1)
(call #:llcp:pred-list-aux2)
(bra 102)
134
(cabne a1 'atom 136)
(mov 'btcons a2)
(mov 'bfcons a1)
(call #:llcp:pred-list-aux2)
(bra 102)
136
(cabne a1 'consp 138)
(mov 'bfcons a2)
(mov 'btcons a1)
(call #:llcp:pred-list-aux2)
(bra 102)
138
(cabne a1 'eq 140)
(mov 'cabne a2)
(mov 'cabeq a1)
(call #:llcp:pred-list-aux3)
(bra 102)
140
(cabne a1 'eqn 142)
(mov 'cnbne a2)
(mov 'cnbeq a1)
(call #:llcp:pred-list-aux3)
(bra 102)
142
(cabne a1 'neqn 144)
(mov 'cnbeq a2)
(mov 'cnbne a1)
(call #:llcp:pred-list-aux3)
(bra 102)
144
(cabne a1 'lt 146)
(mov 'cnbge a2)
(mov 'cnblt a1)
(call #:llcp:pred-list-aux3)
(bra 102)
146
(cabne a1 'le 148)
(mov 'cnbgt a2)
(mov 'cnble a1)
(call #:llcp:pred-list-aux3)
(bra 102)
148
(cabne a1 'gt 150)
(mov 'cnble a2)
(mov 'cnbgt a1)
(call #:llcp:pred-list-aux3)
(bra 102)
150
(cabne a1 'ge 152)
(mov 'cnblt a2)
(mov 'cnbge a1)
(call #:llcp:pred-list-aux3)
(bra 102)
152
(cabne a1 'feqn 154)
(mov 'cfbne a2)
(mov 'cfbeq a1)
(call #:llcp:pred-list-aux3)
(bra 102)
154
(cabne a1 'fneqn 156)
(mov 'cfbeq a2)
(mov 'cfbne a1)
(call #:llcp:pred-list-aux3)
(bra 102)
156
(cabne a1 'flt 158)
(mov 'cfbge a2)
(mov 'cfblt a1)
(call #:llcp:pred-list-aux3)
(bra 102)
158
(cabne a1 'fle 160)
(mov 'cfbgt a2)
(mov 'cfble a1)
(call #:llcp:pred-list-aux3)
(bra 102)
160
(cabne a1 'fgt 162)
(mov 'cfble a2)
(mov 'cfbgt a1)
(call #:llcp:pred-list-aux3)
(bra 102)
162
(cabne a1 'fge 164)
(mov 'cfblt a2)
(mov 'cfbge a1)
(call #:llcp:pred-list-aux3)
(bra 102)
164
(cabne a1 'memq 166)
(mov (cdr a2) a1)
(mov (car a1) a1)
(call #:llcp:quotep)
(btnil a1 166)
(mov (cvalq larg) a1)
(mov nil a3)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:exp)
(mov (cvalq larg) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) (cvalq larg))
(btnil (cvalq ind) 168)
170
(bfcons (cvalq larg) 171)
(push (@ 172))
(push 'cabeq)
(push (cvalq dest))
(mov (cvalq larg) a1)
(mov (cdr a1) (cvalq larg))
(mov (car a1) a1)
(jcall kwote)
(push a1)
(push (cvalq etiq))
(mov '4 a4)
(jmp list)
172
(eval ())
(call #:llcp:add-code)
(bra 170)
171
(mov nil a1)
(bra 102)
168
(mov (cvalq #:llcp:gencount) a3)
(plus '1 a3)
(mov a3 (cvalq #:llcp:gencount))
(push a3)
173
(mov (cvalq larg) a4)
(bfcons (cdr a4) 174)
(push (@ 175))
(push 'cabeq)
(push (cvalq dest))
(mov (cdr a4) (cvalq larg))
(mov (car a4) a1)
(jcall kwote)
(push a1)
(push (& 4))
(mov '4 a4)
(jmp list)
175
(eval ())
(call #:llcp:add-code)
(bra 173)
174
(push (@ 176))
(push 'cabne)
(push (cvalq dest))
(mov (car a4) a1)
(jcall kwote)
(push a1)
(push (cvalq etiq))
(mov '4 a4)
(jmp list)
176
(eval ())
(call #:llcp:add-code)
(mov (& 0) a1)
(call #:llcp:add-code)
(adjstk '1)
(bra 102)
166
(mov nil a3)
(mov (cvalq dest) a2)
(mov (cvalq l) a1)
(call #:llcp:exp)
(push (@ 177))
(btnil (cvalq ind) 178)
(mov 'bfnil a4)
(bra 179)
178
(mov 'btnil a4)
179
(push a4)
(push (cvalq dest))
(push (cvalq etiq))
(mov '3 a4)
(jmp list)
177
(eval ())
(call #:llcp:add-code)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq fnt))
(mov (& 7) (cvalq larg))
(adjstk '8)
(return)
))
(loader'((entry #:llcp:pred-list-aux2 subr2)
(push (@ 101))
(btnil (cvalq ind) 102)
(mov a1 a4)
(bra 103)
102
(mov a2 a4)
103
(push a4)
(mov (cvalq larg) a1)
(mov (cvalq dest) a2)
(mov (car a1) a1)
(call #:llcp:diroporany)
(push a1)
(push (cvalq etiq))
(mov '3 a4)
(jmp list)
101
(eval ())
(bra #:llcp:add-code)
))
(loader'((entry #:llcp:pred-list-aux3 subr2)
(push a2)
(push a1)
(mov (cvalq larg) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(push a1)
(mov (cvalq larg) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:llcp:dirop)
(push a1)
(btnil (& 1) 103)
(bfnil a1 102)
103
(cabeq (cvalq dest) 'a1 105)
(mov nil a1)
(mov 'not-in-a1 a2)
(jmp #:llcp:exit)
105
(mov (cvalq larg) a2)
(mov (cdr a2) a3)
(mov (car a3) a3)
(mov (car a2) a2)
(mov (cvalq fnt) a1)
(call #:llcp:exp-2)
(mov 'a1 (& 1))
(mov 'a2 (& 0))
(call #:llcp:cr-all-nil)
102
(push (@ 106))
(btnil (cvalq ind) 107)
(mov (& 3) a4)
(bra 108)
107
(mov (& 4) a4)
108
(push a4)
(push (& 3))
(push (& 3))
(push (cvalq etiq))
(mov '4 a4)
(jmp list)
106
(eval ())
(adjstk '4)
(bra #:llcp:add-code)
))
(loader'((entry #:llcp:diropreg subr1)
(push a1)
(mov (cvalq #:llcp:a1) a2)
(jcall equal)
(btnil a1 101)
(mov 'a1 a1)
(adjstk '1)
(return)
101
(mov (cvalq #:llcp:a2) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 103)
(mov 'a2 a1)
(adjstk '1)
(return)
103
(mov (cvalq #:llcp:a3) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 105)
(mov 'a3 a1)
(adjstk '1)
(return)
105
(mov (cvalq #:llcp:a4) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 107)
(mov 'a4 a1)
(adjstk '1)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:llcp:dirop subr1)
(push a1)
(btcons a1 101)
(bfnil a1 103)
(mov 'nil a1)
(adjstk '1)
(return)
103
(cabne a1 (cvalq #:llcp:a1) 105)
(mov 'a1 a1)
(adjstk '1)
(return)
105
(cabne a1 (cvalq #:llcp:a2) 107)
(mov 'a2 a1)
(adjstk '1)
(return)
107
(cabne a1 (cvalq #:llcp:a3) 109)
(mov 'a3 a1)
(adjstk '1)
(return)
109
(cabne a1 (cvalq #:llcp:a4) 111)
(mov 'a4 a1)
(adjstk '1)
(return)
111
(cabne a1 't 113)
(mov ''t a1)
(adjstk '1)
(return)
113
(bfsymb a1 115)
(push (@ 117))
(push 'cvalq)
(push a1)
(mov '2 a4)
(jmp list)
117
(eval ())
(adjstk '1)
(return)
115
(push (@ 118))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
118
(eval ())
(adjstk '1)
(return)
101
(mov (cvalq #:llcp:a1) a2)
(jcall equal)
(btnil a1 119)
(mov 'a1 a1)
(adjstk '1)
(return)
119
(mov (cvalq #:llcp:a2) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 121)
(mov 'a2 a1)
(adjstk '1)
(return)
121
(mov (cvalq #:llcp:a3) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 123)
(mov 'a3 a1)
(adjstk '1)
(return)
123
(mov (cvalq #:llcp:a4) a2)
(mov (& 0) a1)
(jcall equal)
(btnil a1 125)
(mov 'a4 a1)
(adjstk '1)
(return)
125
(mov (& 0) a4)
(cabne (car a4) 'quote 127)
(mov (cdr a4) a1)
(mov (car a1) a1)
(adjstk '1)
(jmp kwote)
127
(btnil (cvalq #:compiler:open-p) 129)
(mov (car a4) a3)
(cabeq a3 'car 131)
(cabne a3 'cdr 129)
131
(mov (cdr a4) a1)
(mov (car a1) a1)
(call #:llcp:diropreg)
(btnil a1 132)
(push (@ 134))
(mov (& 1) a4)
(cabne (car a4) 'car 135)
(mov 'car a4)
(bra 136)
135
(mov 'cdr a4)
136
(push a4)
(push a1)
(mov '2 a4)
(jmp list)
134
(eval ())
(adjstk '1)
(return)
132
(mov nil a1)
(adjstk '1)
(return)
129
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:llcp:diropordest subr2)
(push a2)
(push a1)
(jcall #:compiler:macroexpand)
(mov a1 (& 0))
(call #:llcp:dirop)
(bfnil a1 101)
(btnil (cvalq #:compiler:open-p) 102)
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (car a4) a4)
(cabeq a4 'car 104)
(cabne a4 'cdr 102)
104
(mov (& 0) a1)
(mov (cdr a1) a1)
(mov nil a3)
(mov (& 1) a2)
(mov (car a1) a1)
(call #:llcp:exp)
(push (@ 105))
(mov (& 1) a4)
(cabne (car a4) 'car 106)
(mov 'car a4)
(bra 107)
106
(mov 'cdr a4)
107
(push a4)
(push (& 3))
(mov '2 a4)
(jmp list)
105
(eval ())
(adjstk '2)
(return)
102
(mov nil a3)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:llcp:exp)
(mov (& 1) a1)
(adjstk '2)
(return)
101
(adjstk '2)
(return)
))
(loader'((entry #:llcp:diroporany subr2)
(push a2)
(push a1)
(jcall #:compiler:macroexpand)
(mov a1 (& 0))
(call #:llcp:dirop)
(bfnil a1 101)
(mov (& 1) a1)
(call #:llcp:cr-any-reg)
(push a1)
(push (@ 102))
(push 'backtrack)
(push dlink)
(push tag)
(stack dlink)
(push (cvalq #:llcp:lap))
(push (cvalq #:llcp:a1))
(push (cvalq #:llcp:a2))
(push (cvalq #:llcp:a3))
(push (cvalq #:llcp:a4))
(push (cvalq #:llcp:deep))
(push (@ 103))
(push 'not-in-a1)
(push dlink)
(push tag)
(stack dlink)
(btnil (cvalq #:compiler:open-p) 104)
(bfcons (& 15) 104)
(mov (& 15) a4)
(mov (car a4) a4)
(cabeq a4 'car 106)
(cabne a4 'cdr 104)
106
(mov (& 15) a1)
(mov (cdr a1) a1)
(mov nil a3)
(mov (& 14) a2)
(mov (car a1) a1)
(call #:llcp:exp)
(push (@ 107))
(mov (& 16) a4)
(cabne (car a4) 'car 108)
(mov 'car a4)
(bra 109)
108
(mov 'cdr a4)
109
(push a4)
(push (& 16))
(mov '2 a4)
(jmp list)
107
(eval ())
(bra 105)
104
(mov nil a3)
(mov a1 a2)
(mov (& 15) a1)
(call #:llcp:exp)
(mov (& 14) a1)
105
(mov 'backtrack a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 5) (cvalq #:llcp:lap))
(mov (& 4) (cvalq #:llcp:a1))
(mov (& 3) (cvalq #:llcp:a2))
(mov (& 2) (cvalq #:llcp:a3))
(mov (& 1) (cvalq #:llcp:a4))
(mov (& 0) (cvalq #:llcp:deep))
(push (@ 110))
(push 'not-in-a1)
(push dlink)
(push tag)
(stack dlink)
(mov nil a1)
(mov 'backtrack a2)
(jmp #:llcp:exit)
(mov (& 1) dlink)
(adjstk '4)
110
(eval ())
(mov (& 5) (cvalq #:llcp:lap))
(mov (& 4) (cvalq #:llcp:a1))
(mov (& 3) (cvalq #:llcp:a2))
(mov (& 2) (cvalq #:llcp:a3))
(mov (& 1) (cvalq #:llcp:a4))
(mov (& 0) (cvalq #:llcp:deep))
(mov (& 0) a1)
(adjstk '6)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(adjstk '1)
(bfnil a1 101)
(mov nil a3)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:llcp:exp)
(mov (& 1) a1)
101
(adjstk '2)
(return)
))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'peephole)))
(defvar #:sys-package:colon 'compiler)
(if (not (boundp '#:compiler:ph-debug)) (progn (defvar #:compiler:ph-debug ())))
(if (not (boundp '#:compiler:ph-stat)) (progn (defvar #:compiler:ph-stat ())))
(defvar #:compiler:no-jrst-hack '(#:llcp:nlist #:llcp:cbindl #:llcp:cbinds #:llcp:tagbody #:llcp:with-interrupts #:llcp:without-interrupts #:llcp:schedule #:llcp:block #:llcp:protect #:llcp:tag))
(loader'((fentry #:compiler:peephole subr1)
(entry #:compiler:peephole subr1)
(push a1)
(push nil)
(push '29999)
(push nil)
(push '29998)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov a1 (& 2))
101
(bfcons (& 2) 102)
(mov (& 2) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (& 0))
(bfcons (& 0) 103)
(mov (& 0) a3)
(bfnil (car a3) 103)
(mov (& 0) a3)
(mov (cdr a3) (cdr a4))
(bra 101)
103
(bfnil (& 1) 105)
(bfcons (& 0) 107)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov a4 a1)
(jcall rplac)
(bra 101)
107
(mov nil (& 2))
(bra 101)
105
(btcons (& 1) 109)
(mov (& 0) a3)
(btnil (car a3) 113)
(bfcons (car a3) 111)
113
(mov (& 0) (& 2))
(bra 101)
111
(mov (& 0) a1)
(mov (& 9) a3)
(mov (& 1) a2)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
109
(mov (& 1) a3)
(cabne (car a3) 'return 114)
(mov (& 0) a2)
(btnil (car a2) 118)
(bfcons (car a2) 116)
118
(mov (& 0) (& 2))
(bra 101)
116
(mov (& 0) a1)
(mov (& 9) a3)
(mov (& 8) a2)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
114
(cabne (car a3) 'bra 119)
(mov (& 0) a2)
(btnil (car a2) 123)
(bfcons (car a2) 121)
123
(mov (& 0) (& 2))
(bra 101)
121
(mov (& 0) a1)
(mov (cdr a3) a2)
(cabne (car a1) (car a2) 124)
(mov (& 6) a2)
(bra 125)
124
(mov (cdr a3) a2)
(mov (car a2) a2)
125
(mov (& 9) a3)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
119
(mov (& 0) (& 2))
(bra 101)
102
(push (& 9))
126
(bfcons (& 0) 127)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (& 10) a2)
(mov (cdr a1) a1)
(jcall cassq)
(mov a1 (& 4))
(btnil a1 128)
(mov (& 0) a4)
(mov (car a4) a3)
(cabeq a1 (car a3) 130)
(mov a1 a3)
(bra 131)
130
(mov (& 7) a3)
131
(mov (car a4) a2)
(mov a3 (cdr a2))
(bra 126)
128
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 126)
127
(adjstk '1)
(mov (& 10) (& 2))
132
(bfcons (& 2) 133)
(mov (& 2) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (& 0))
(btcons (& 1) 134)
(mov (& 0) a3)
(bfcons (car a3) 136)
(mov (car a3) a2)
(cabne (car a2) 'bra 136)
(mov (car a3) a1)
(mov (cdr a1) a1)
(cabeq (car a1) (& 1) 138)
(mov (car a3) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(cabne a1 (& 1) 136)
138
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 132)
136
(mov (& 0) (& 2))
(bra 132)
134
(mov (& 1) a3)
(cabne (car a3) 'bra 139)
(mov (cdr a3) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 3))
(cabne a1 (& 8) 141)
(mov (& 2) a4)
(mov '(return) (car a4))
(bra 132)
141
(mov (& 0) a4)
(bfcons (car a4) 143)
(mov (car a4) a3)
(mov (car a3) a3)
(cabeq a3 'bra 145)
(cabeq a3 'jmp 145)
(cabne a3 'return 143)
145
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
143
(btnil a1 146)
(mov (& 1) a1)
(jcall last)
(mov (& 3) (car a1))
(cabne (& 3) (& 6) 149)
(mov 't (& 5))
149
(mov (& 0) (& 2))
(bra 132)
146
(mov (& 0) (& 2))
(bra 132)
139
(cabne (car a3) 'push 150)
(mov (cdr a3) a2)
(bfcons (car a2) 150)
(mov (cdr a3) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 150)
(mov (cdr a3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 4))
(cabne a1 (& 8) 152)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
152
(btnil a1 154)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov a1 (car a3))
(mov (& 0) (& 2))
(bra 132)
154
(mov (& 0) (& 2))
(bra 132)
150
(cabne (car a3) 'mov 156)
(mov (cdr a3) a2)
(bfcons (car a2) 156)
(mov (cdr a3) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 156)
(mov (cdr a3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 4))
(btnil a1 159)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov a1 (car a3))
(cabne a1 (& 8) 159)
(mov 't (& 7))
159
(mov (& 0) (& 2))
(bra 132)
156
(cabne (car a3) 'return 162)
(mov (& 0) a2)
(bfcons (car a2) 162)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(cabeq a2 'bra 166)
(cabeq a2 'jmp 166)
(cabne a2 'return 164)
166
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov a4 a1)
(jcall rplac)
(bra 132)
164
(mov (& 0) a1)
(mov (car a1) a1)
(cabne (car a1) 'jcall 167)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:compiler:no-jrst-hack) a2)
(mov (car a1) a1)
(jcall memq)
(bfnil a1 167)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 2) a4)
(mov (car a4) a3)
(mov 'jmp (car a3))
(bra 132)
167
(mov (& 0) a4)
(mov (car a4) a4)
(cabne (car a4) 'call 169)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 2) a4)
(mov (car a4) a3)
(mov 'bra (car a3))
(bra 132)
169
(mov (& 0) (& 2))
(bra 132)
162
(cabne (car a3) 'adjstk 171)
(mov (& 0) a2)
(bfcons (car a2) 171)
(mov (car a2) a1)
(cabne (car a1) 'adjstk 171)
(mov (cdr a3) a4)
(bfcons (car a4) 171)
(mov (cdr a3) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 171)
(mov (cdr a3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 171)
(mov (& 0) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a3) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a2) a2)
(plus (car a1) a2)
(mov (cdr a4) a4)
(mov a2 (car a4))
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
171
(mov (cdr a3) a1)
(jcall last)
(mov (car a1) (& 4))
(bffix (car a1) 173)
(cabeq (& 4) (& 8) 173)
(mov (& 9) a2)
(mov (& 4) a1)
(jcall cassq)
(mov a1 (& 3))
(btnil a1 173)
(mov (& 1) a1)
(jcall last)
(cabne (& 3) (& 8) 175)
(mov 't (& 7))
(mov (& 8) a4)
(bra 176)
175
(cabne (& 3) (& 6) 177)
(mov 't (& 5))
(mov (& 6) a4)
(bra 176)
177
(mov (& 3) a4)
176
(mov a4 (car a1))
(bra 132)
173
(mov (& 0) (& 2))
(bra 132)
133
(btnil (& 7) 180)
(push (@ 181))
(push '(return))
(push (& 10))
(push (& 13))
(mov '3 a4)
(jmp mcons)
181
(eval ())
(mov a1 (& 10))
180
(btnil (& 5) 183)
(push (@ 184))
(push (@ 185))
(push 'bra)
(push (& 9))
(mov '2 a4)
(jmp list)
185
(eval ())
(push a1)
(push (& 8))
(push (& 13))
(mov '3 a4)
(jmp mcons)
184
(eval ())
(mov a1 (& 10))
183
(mov (& 10) a1)
(adjstk '11)
(return)
))
(loader '((end)))
