(loader '((title |croch.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'croch)))
(dmc |]| () (error '|]| 'errsxt "pas dans un [ ]"))
(dmc |[| () (flet ((|!| () '|!|) (|]| () '|]|)) (let ((begin (list 'list))) (readbracket begin begin (read)) begin)))
(loader'((fentry readbracket subr3)
(entry readbracket subr3)
(push a3)
(push a2)
(push a1)
(mov '|]| a2)
(mov a3 a1)
(jcall eq)
(bfnil a1 101)
(cabeq (& 2) '|!| 102)
(push (@ 104))
(push (& 3))
(mov '1 a4)
(jmp list)
104
(eval ())
(mov (& 1) a4)
(mov a1 (cdr a4))
(push (cdr a4))
(jcall read)
(mov a1 a3)
(pop a2)
(mov (& 0) a1)
(adjstk '3)
(jmp readbracket)
102
(push (@ 105))
(jcall read)
(push a1)
(mov '1 a4)
(jmp list)
105
(eval ())
(push a1)
(mov a1 a4)
(cabeq a4 '|!| 108)
(cabne a4 '|]| 106)
108
(mov a1 a3)
(mov 'errsxt a2)
(mov '|!| a1)
(adjstk '4)
(jmp error)
106
(cabne (& 1) (& 2) 109)
(mov a1 a3)
(mov 'append a2)
(mov (& 1) a1)
(jcall rplac)
(push (cdr a1))
(jcall read)
(mov a1 a2)
(pop a1)
(adjstk '4)
(jmp sequence)
109
(mov (& 1) a3)
(cabne (& 2) (cdr a3) 111)
(mov 'cons a3)
(bra 112)
111
(mov 'mcons a3)
112
(mov (& 1) a2)
(mov a3 (car a2))
(jcall read)
(push a1)
(cabne a1 '|]| 113)
(mov (& 3) a4)
(mov (& 1) (cdr a4))
(mov a4 a1)
(adjstk '5)
(return)
113
(push (@ 115))
(mov (& 2) a2)
(mov 'append a1)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp list)
115
(eval ())
(mov (& 3) a4)
(mov a1 (cdr a4))
(mov (cdr a4) a1)
(mov (car a1) a1)
(mov (& 0) a2)
(mov (cdr a1) a1)
(adjstk '5)
(jmp sequence)
101
(adjstk '3)
(return)
))
(loader'((fentry sequence subr2)
(entry sequence subr2)
(push a1)
(cabne a2 '|!| 101)
(push a1)
(push (@ 103))
(jcall read)
(push a1)
(mov '1 a4)
(jmp list)
103
(eval ())
(pop a4)
(mov a1 (cdr a4))
(push (cdr a4))
(jcall read)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp sequence)
101
(cabeq a2 '|]| 104)
(push (@ 106))
(push 'list)
(push a2)
(mov '2 a4)
(jmp list)
106
(eval ())
(push a1)
(push (@ 107))
(push a1)
(mov '1 a4)
(jmp list)
107
(eval ())
(mov (& 1) a4)
(mov a1 (cdr a4))
(mov (& 0) a2)
(push (cdr a2))
(jcall read)
(mov a1 a3)
(pop a2)
(mov (& 0) a1)
(adjstk '2)
(jmp readbracket)
104
(mov nil a1)
(adjstk '1)
(return)
))
(loader '((end)))
