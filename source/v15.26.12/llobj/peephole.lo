(loader '((title |peephole.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'peephole)))
(defvar #:sys-package:colon 'compiler)
(if (not (boundp '#:compiler:ph-debug)) (progn (defvar #:compiler:ph-debug ())))
(if (not (boundp '#:compiler:ph-stat)) (progn (defvar #:compiler:ph-stat ())))
(defvar #:compiler:no-jrst-hack '(#:llcp:nlist #:llcp:cbindl #:llcp:cbinds #:llcp:tagbody #:llcp:with-interrupts #:llcp:without-interrupts #:llcp:schedule #:llcp:block #:llcp:protect #:llcp:tag))
(loader'((fentry #:compiler:peephole subr1)
(entry #:compiler:peephole subr1)
(push a1)
(push nil)
(push '29999)
(push nil)
(push '29998)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov a1 (& 2))
101
(bfcons (& 2) 102)
(mov (& 2) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (& 0))
(bfcons (& 0) 103)
(mov (& 0) a3)
(bfnil (car a3) 103)
(mov (& 0) a3)
(mov (cdr a3) (cdr a4))
(bra 101)
103
(bfnil (& 1) 105)
(bfcons (& 0) 107)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov a4 a1)
(jcall rplac)
(bra 101)
107
(mov nil (& 2))
(bra 101)
105
(btcons (& 1) 109)
(mov (& 0) a3)
(btnil (car a3) 113)
(bfcons (car a3) 111)
113
(mov (& 0) (& 2))
(bra 101)
111
(mov (& 0) a1)
(mov (& 9) a3)
(mov (& 1) a2)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
109
(mov (& 1) a3)
(cabne (car a3) 'return 114)
(mov (& 0) a2)
(btnil (car a2) 118)
(bfcons (car a2) 116)
118
(mov (& 0) (& 2))
(bra 101)
116
(mov (& 0) a1)
(mov (& 9) a3)
(mov (& 8) a2)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
114
(cabne (car a3) 'bra 119)
(mov (& 0) a2)
(btnil (car a2) 123)
(bfcons (car a2) 121)
123
(mov (& 0) (& 2))
(bra 101)
121
(mov (& 0) a1)
(mov (cdr a3) a2)
(cabne (car a1) (car a2) 124)
(mov (& 6) a2)
(bra 125)
124
(mov (cdr a3) a2)
(mov (car a2) a2)
125
(mov (& 9) a3)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
119
(mov (& 0) (& 2))
(bra 101)
102
(push (& 9))
126
(bfcons (& 0) 127)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (& 10) a2)
(mov (cdr a1) a1)
(jcall cassq)
(mov a1 (& 4))
(btnil a1 128)
(mov (& 0) a4)
(mov (car a4) a3)
(cabeq a1 (car a3) 130)
(mov a1 a3)
(bra 131)
130
(mov (& 7) a3)
131
(mov (car a4) a2)
(mov a3 (cdr a2))
(bra 126)
128
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 126)
127
(adjstk '1)
(mov (& 10) (& 2))
132
(bfcons (& 2) 133)
(mov (& 2) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (& 0))
(btcons (& 1) 134)
(mov (& 0) a3)
(bfcons (car a3) 136)
(mov (car a3) a2)
(cabne (car a2) 'bra 136)
(mov (car a3) a1)
(mov (cdr a1) a1)
(cabeq (car a1) (& 1) 138)
(mov (car a3) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(cabne a1 (& 1) 136)
138
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 132)
136
(mov (& 0) (& 2))
(bra 132)
134
(mov (& 1) a3)
(cabne (car a3) 'bra 139)
(mov (cdr a3) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 3))
(cabne a1 (& 8) 141)
(mov (& 2) a4)
(mov '(return) (car a4))
(bra 132)
141
(mov (& 0) a4)
(bfcons (car a4) 143)
(mov (car a4) a3)
(mov (car a3) a3)
(cabeq a3 'bra 145)
(cabeq a3 'jmp 145)
(cabne a3 'return 143)
145
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
143
(btnil a1 146)
(mov (& 1) a1)
(jcall last)
(mov (& 3) (car a1))
(cabne (& 3) (& 6) 149)
(mov 't (& 5))
149
(mov (& 0) (& 2))
(bra 132)
146
(mov (& 0) (& 2))
(bra 132)
139
(cabne (car a3) 'push 150)
(mov (cdr a3) a2)
(bfcons (car a2) 150)
(mov (cdr a3) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 150)
(mov (cdr a3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 4))
(cabne a1 (& 8) 152)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
152
(btnil a1 154)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov a1 (car a3))
(mov (& 0) (& 2))
(bra 132)
154
(mov (& 0) (& 2))
(bra 132)
150
(cabne (car a3) 'mov 156)
(mov (cdr a3) a2)
(bfcons (car a2) 156)
(mov (cdr a3) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 156)
(mov (cdr a3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 4))
(btnil a1 159)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov a1 (car a3))
(cabne a1 (& 8) 159)
(mov 't (& 7))
159
(mov (& 0) (& 2))
(bra 132)
156
(cabne (car a3) 'return 162)
(mov (& 0) a2)
(bfcons (car a2) 162)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(cabeq a2 'bra 166)
(cabeq a2 'jmp 166)
(cabne a2 'return 164)
166
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov a4 a1)
(jcall rplac)
(bra 132)
164
(mov (& 0) a1)
(mov (car a1) a1)
(cabne (car a1) 'jcall 167)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:compiler:no-jrst-hack) a2)
(mov (car a1) a1)
(jcall memq)
(bfnil a1 167)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 2) a4)
(mov (car a4) a3)
(mov 'jmp (car a3))
(bra 132)
167
(mov (& 0) a4)
(mov (car a4) a4)
(cabne (car a4) 'call 169)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 2) a4)
(mov (car a4) a3)
(mov 'bra (car a3))
(bra 132)
169
(mov (& 0) (& 2))
(bra 132)
162
(cabne (car a3) 'adjstk 171)
(mov (& 0) a2)
(bfcons (car a2) 171)
(mov (car a2) a1)
(cabne (car a1) 'adjstk 171)
(mov (cdr a3) a4)
(bfcons (car a4) 171)
(mov (cdr a3) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 171)
(mov (cdr a3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 171)
(mov (& 0) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a3) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a2) a2)
(plus (car a1) a2)
(mov (cdr a4) a4)
(mov a2 (car a4))
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
171
(mov (cdr a3) a1)
(jcall last)
(mov (car a1) (& 4))
(bffix (car a1) 173)
(cabeq (& 4) (& 8) 173)
(mov (& 9) a2)
(mov (& 4) a1)
(jcall cassq)
(mov a1 (& 3))
(btnil a1 173)
(mov (& 1) a1)
(jcall last)
(cabne (& 3) (& 8) 175)
(mov 't (& 7))
(mov (& 8) a4)
(bra 176)
175
(cabne (& 3) (& 6) 177)
(mov 't (& 5))
(mov (& 6) a4)
(bra 176)
177
(mov (& 3) a4)
176
(mov a4 (car a1))
(bra 132)
173
(mov (& 0) (& 2))
(bra 132)
133
(btnil (& 7) 180)
(push (@ 181))
(push '(return))
(push (& 10))
(push (& 13))
(mov '3 a4)
(jmp mcons)
181
(eval ())
(mov a1 (& 10))
180
(btnil (& 5) 183)
(push (@ 184))
(push (@ 185))
(push 'bra)
(push (& 9))
(mov '2 a4)
(jmp list)
185
(eval ())
(push a1)
(push (& 8))
(push (& 13))
(mov '3 a4)
(jmp mcons)
184
(eval ())
(mov a1 (& 10))
183
(mov (& 10) a1)
(adjstk '11)
(return)
))
(loader '((end)))
