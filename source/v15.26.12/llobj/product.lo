(loader '((title |product.lo|)))
(setq #:sys-package:colon 'product)
(if (not (featurep 'product)) (progn (add-feature 'product)))
(defvar #:product:*product-database-holder*)
(loader'((fentry product-build-info nsubr)
(entry product-build-info nsubr)
(cnbge a4 '1 101)
(mov 'product-build-info a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(bfnil (cvalq #:product:*product-database-holder*) 103)
(push (@ 104))
(mov '0 a4)
(jmp make-hash-table-eq)
104
(eval ())
(mov a1 (cvalq #:product:*product-database-holder*))
103
(push (@ 105))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '6 a4)
(jmp vector)
105
(eval ())
(mov '#:product:product (cdr a1))
(push a1)
(btsymb (& 2) 107)
(mov (& 2) a3)
(mov 'errsym a2)
(mov 'product-build-info a1)
(jcall error)
107
(mov (& 0) a3)
(mov (cvalq #:product:*product-database-holder*) a2)
(mov (& 2) a1)
(jcall puthash)
(hpmovx (& 2) (& 0) '0)
(push (& 1))
108
(btnil (& 0) 109)
(mov (& 0) a4)
(mov (cdr a4) a3)
(push (car a4))
(push (car a3))
(mov (& 1) a1)
(cabne a1 'name 111)
(hpmovx (& 0) (& 3) '0)
(bra 110)
111
(cabne a1 'id 112)
(hpmovx (& 0) (& 3) '1)
(bra 110)
112
(cabne a1 'date 113)
(mov (& 0) a1)
(jcall datep)
(bfnil a1 115)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'name a1)
(jcall error)
115
(hpmovx (& 0) (& 3) '2)
(bra 110)
113
(cabne a1 'version 116)
(mov (& 0) a1)
(jcall string)
(hpmovx a1 (& 3) '3)
(bra 110)
116
(cabne a1 'subversion 117)
(hpmovx (& 0) (& 3) '4)
(bra 110)
117
(cabne a1 'comment 118)
(btstrg (& 0) 120)
(mov (& 0) a1)
(jcall listp)
(btnil a1 121)
(push (& 0))
(push 't)
122
(bfcons (& 1) 123)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall stringp)
(mov a1 (& 0))
(btnil a1 123)
(bra 122)
123
(mov (& 0) a4)
(adjstk '2)
(bfnil a4 120)
121
(mov (& 0) a3)
(mov 'errnsa a2)
(mov 'name a1)
(jcall error)
120
(hpmovx (& 0) (& 3) '5)
(bra 110)
118
(mov a1 a3)
(mov 'errbpa a2)
(mov 'product-build-info a1)
(jcall error)
110
(adjstk '2)
(mov (& 0) a4)
(mov (cdr a4) a4)
(mov (cdr a4) (& 0))
(bra 108)
109
(adjstk '2)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:product:gethash subr2)
(bfnil a2 101)
(mov a1 a3)
(mov 'unknown-product a2)
(mov 'product-access a1)
(jmp error)
101
(push (@ 103))
(push a1)
(push (cvalq #:product:*product-database-holder*))
(mov '2 a4)
(jmp gethash)
103
(eval ())
(return)
))
(loader'((fentry product-id subr1)
(entry product-id subr1)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(btnil a1 101)
(hpxmov a1 '1 a1)
(adjstk '1)
(return)
101
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'product-id a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry set-product-id subr2)
(entry set-product-id subr2)
(push a2)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(btnil a1 101)
(hpmovx (& 1) a1 '1)
(mov (& 1) a1)
(adjstk '2)
(return)
101
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'set-product-id a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry product-date subr1)
(entry product-date subr1)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(btnil a1 101)
(hpxmov a1 '2 a1)
(adjstk '1)
(return)
101
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'product-date a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry set-product-date subr2)
(entry set-product-date subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall datep)
(bfnil a1 102)
(mov (& 1) a3)
(mov 'errbpa a2)
(mov 'set-product-date a1)
(jcall error)
102
(mov (cvalq #:product:*product-database-holder*) a2)
(mov (& 0) a1)
(call #:product:gethash)
(btnil a1 103)
(hpmovx (& 1) a1 '2)
(mov (& 1) a1)
(adjstk '2)
(return)
103
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'set-product-date a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry product-version subr1)
(entry product-version subr1)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(btnil a1 101)
(hpxmov a1 '3 a1)
(adjstk '1)
(return)
101
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'product-version a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry set-product-version subr2)
(entry set-product-version subr2)
(push a2)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(btnil a1 101)
(hpmovx (& 1) a1 '3)
(mov (& 1) a1)
(adjstk '2)
(return)
101
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'set-product-version a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry product-subversion subr1)
(entry product-subversion subr1)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(btnil a1 101)
(hpxmov a1 '4 a1)
(adjstk '1)
(return)
101
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'product-subversion a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry set-product-subversion subr2)
(entry set-product-subversion subr2)
(push a2)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(btnil a1 101)
(hpmovx (& 1) a1 '4)
(mov (& 1) a1)
(adjstk '2)
(return)
101
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'set-product-subversion a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry product-comment subr1)
(entry product-comment subr1)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(btnil a1 101)
(hpxmov a1 '5 a1)
(adjstk '1)
(return)
101
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'product-comment a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry set-product-comment subr2)
(entry set-product-comment subr2)
(push a2)
(push a1)
(btstrg a2 102)
(mov a2 a1)
(jcall listp)
(btnil a1 103)
(push (& 1))
(push 't)
104
(bfcons (& 1) 105)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(jcall stringp)
(mov a1 (& 0))
(btnil a1 105)
(bra 104)
105
(mov (& 0) a4)
(adjstk '2)
(bfnil a4 102)
103
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'set-product-comment a1)
(jcall error)
102
(mov (cvalq #:product:*product-database-holder*) a2)
(mov (& 0) a1)
(call #:product:gethash)
(btnil a1 106)
(hpmovx (& 1) a1 '5)
(mov (& 1) a1)
(adjstk '2)
(return)
106
(mov (& 0) a3)
(mov 'unknown-product a2)
(mov 'set-product-comment a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry product-all-names subr0)
(entry product-all-names subr0)
(push nil)
(push '0)
(hpxmov (cvalq #:product:*product-database-holder*) '1 a4)
(push a4)
(hgsize a4 a3)
(push a3)
101
(cnbge (& 2) (& 0) 102)
(hpxmov (& 1) (& 2) a4)
(bfcons a4 104)
(push a4)
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(push (car a4))
(push (cdr a4))
(push (& 1))
(push (@ 107))
(push (& 9))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
107
(eval ())
(adjstk '1)
(mov a1 (& 7))
(adjstk '3)
(bra 105)
106
(adjstk '1)
104
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(bra 101)
102
(adjstk '3)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry product-print subr1)
(entry product-print subr1)
(push a1)
(mov (cvalq #:product:*product-database-holder*) a2)
(call #:product:gethash)
(push a1)
(bfnil a1 101)
(mov (& 1) a3)
(mov 'unknown-product a2)
(mov 'product-print a1)
(adjstk '2)
(jmp error)
101
(push (@ 103))
(push '"name       : ")
(hpxmov a1 '0 a4)
(push a4)
(mov '2 a4)
(jmp print)
103
(eval ())
(push (@ 104))
(push '"date       : ")
(hpxmov (& 2) '2 a4)
(push a4)
(mov '2 a4)
(jmp print)
104
(eval ())
(push (@ 105))
(push '"version    : ")
(hpxmov (& 2) '3 a4)
(push a4)
(mov '2 a4)
(jmp print)
105
(eval ())
(push (@ 106))
(push '"subversion : ")
(hpxmov (& 2) '4 a4)
(push a4)
(mov '2 a4)
(jmp print)
106
(eval ())
(push (@ 107))
(push '"comment    : ")
(hpxmov (& 2) '5 a4)
(push a4)
(mov '2 a4)
(jmp print)
107
(eval ())
(mov 't a1)
(adjstk '2)
(return)
))
(#:messages:put-message 'unknown-product 'french '"nom de produit inconnu" 'defmessage)
(#:messages:put-message 'unknown-product 'english '"unknown product name" 'defmessage)
'unknown-product
(product-build-info 'lelisp 'version (version) 'subversion (eval '(subversion)) 'id 0 'date #:date:#[93 12 1 10 50 27 0 3])
(loader '((end)))
