(loader '((title |virinit.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'virbitmap)))
(add-feature 'virbitmap)
(setq #:sys-package:colon 'display)
(#:messages:put-message '#:display:errnotadisplay 'french '"n'est pas un dispositif d'affichage" 'defmessage)
(#:messages:put-message '#:display:errnotadisplay 'english '"not a display" 'defmessage)
'#:display:errnotadisplay
(#:messages:put-message '#:display:not-a-color-display 'french '"ce n'est pas un dispositif d'affichage couleur" 'defmessage)
(#:messages:put-message '#:display:not-a-color-display 'english '"not a color display" 'defmessage)
'#:display:not-a-color-display
(#:messages:put-message '#:display:errnotawindow 'french '"l'argument n'est pas une fene^tre" 'defmessage)
(#:messages:put-message '#:display:errnotawindow 'english '"not a window" 'defmessage)
'#:display:errnotawindow
(#:messages:put-message '#:display:errnotawindowtype 'french '"l'argument n'est pas un type de fene^tre" 'defmessage)
(#:messages:put-message '#:display:errnotawindowtype 'english '"not a window type" 'defmessage)
'#:display:errnotawindowtype
(#:messages:put-message '#:display:errnotabitmap 'french '"l'argument n'est pas un bitmap" 'defmessage)
(#:messages:put-message '#:display:errnotabitmap 'english '"not a bitmap" 'defmessage)
'#:display:errnotabitmap
(#:messages:put-message '#:display:errnotamenu 'french '"l'argument n'est pas un menu" 'defmessage)
(#:messages:put-message '#:display:errnotamenu 'english '"not a menu" 'defmessage)
'#:display:errnotamenu
(#:messages:put-message '#:display:errnotacolor 'french '"l'argument n'est pas une couleur" 'defmessage)
(#:messages:put-message '#:display:errnotacolor 'english '"not a color" 'defmessage)
'#:display:errnotacolor
(#:messages:put-message '#:display:err-not-a-valid-pattern 'french '"l'argument n'est pas un motif" 'defmessage)
(#:messages:put-message '#:display:err-not-a-valid-pattern 'english '"not a pattern" 'defmessage)
'#:display:err-not-a-valid-pattern
(#:messages:put-message '#:display:err-not-a-valid-mode 'french '"l'argument n'est pas un mode valide" 'defmessage)
(#:messages:put-message '#:display:err-not-a-valid-mode 'english '"not a valid function" 'defmessage)
'#:display:err-not-a-valid-mode
(#:messages:put-message '#:display:err-not-a-line-style 'french '"l'argument n'est pas un style de ligne valide" 'defmessage)
(#:messages:put-message '#:display:err-not-a-line-style 'english '"not a valid line style" 'defmessage)
'#:display:err-not-a-line-style
(#:messages:put-message '#:display:err-not-a-valid-cursor 'french '"l'argument n'est pas un curseur valide" 'defmessage)
(#:messages:put-message '#:display:err-not-a-valid-cursor 'english '"not a valid cursor" 'defmessage)
'#:display:err-not-a-valid-cursor
(#:messages:put-message '#:display:err-not-a-valid-graph-env 'french '"l'argument n'est pas un environnement graphique valide" 'defmessage)
(#:messages:put-message '#:display:err-not-a-valid-graph-env 'english '"not a valid graphic environment" 'defmessage)
'#:display:err-not-a-valid-graph-env
(#:messages:put-message '#:display:errnotafont 'french '"l'argument n'est pas un nume'ro de police de caracte`res" 'defmessage)
(#:messages:put-message '#:display:errnotafont 'english '"not a valid font number" 'defmessage)
'#:display:errnotafont
(#:messages:put-message '#:display:err-not-a-font-name 'french '"l'argument n'est pas un nom de police de caracte`res" 'defmessage)
(#:messages:put-message '#:display:err-not-a-font-name 'english '"not a valid font name" 'defmessage)
'#:display:err-not-a-font-name
(#:messages:put-message '#:display:errnotamutable 'french '"l'argument n'est pas une couleur modifiable" 'defmessage)
(#:messages:put-message '#:display:errnotamutable 'english '"not a mutable color" 'defmessage)
'#:display:errnotamutable
(#:messages:put-message '#:display:errbitmapinuse 'french '"pattern utilise' comme motif ou curseur" 'defmessage)
(#:messages:put-message '#:display:errbitmapinuse 'english '"bitmap used as a pattern or a cursor" 'defmessage)
'#:display:errbitmapinuse
(#:messages:put-message '#:display:errnotasaveddisplay 'french '"pas un display sauve' par BITMAP-SAVE" 'defmessage)
(#:messages:put-message '#:display:errnotasaveddisplay 'english '"not a display saved by BITMAP-SAVE" 'defmessage)
'#:display:errnotasaveddisplay
(#:messages:put-message '#:display:not-yet-implemented 'french '"fonction non implemente'e" 'defmessage)
(#:messages:put-message '#:display:not-yet-implemented 'english '"not implemented" 'defmessage)
'#:display:not-yet-implemented
(#:messages:put-message '#:display:not-a-valid-argument 'french '"parame`tre incorrect" 'defmessage)
(#:messages:put-message '#:display:not-a-valid-argument 'english '"not a valid argument" 'defmessage)
'#:display:not-a-valid-argument
(#:messages:put-message '#:display:no-current-display 'french '"pas de dispositif d'affichage courant" 'defmessage)
(#:messages:put-message '#:display:no-current-display 'english '"no current display" 'defmessage)
'#:display:no-current-display
(#:messages:put-message '#:display:no-current-window 'french '"pas de fene^tre courante" 'defmessage)
(#:messages:put-message '#:display:no-current-window 'english '"no current window" 'defmessage)
'#:display:no-current-window
(#:messages:put-message '#:display:err-diff-display 'french '"les dispositifs d'affichage sont diffe'rents" 'defmessage)
(#:messages:put-message '#:display:err-diff-display 'english '"displays are different" 'defmessage)
'#:display:err-diff-display
(#:messages:put-message '#:display:err-not-a-cursor-name 'french '"l'argument n'est pas un nom de curseur" 'defmessage)
(#:messages:put-message '#:display:err-not-a-cursor-name 'english '"not a cursor name" 'defmessage)
'#:display:err-not-a-cursor-name
(defvar #:sys-package:bitmap (when (boundp '#:sys-package:bitmap) #:sys-package:bitmap))
(defvar #:bitmap:name (when (boundp '#:bitmap:name) #:bitmap:name))
(defvar #:display:default-bitmap 'bvtty)
(defvar #:display:all-bitmaps (when (boundp '#:display:all-bitmaps) #:display:all-bitmaps))
(defvar #:display:all-displays (when (boundp '#:display:all-displays) #:display:all-displays))
(defvar #:window:prologuep (when (boundp '#:window:prologuep) #:window:prologuep))
(defvar #:graph-env:main-graph-env (when (boundp '#:graph-env:main-graph-env) #:graph-env:main-graph-env))
(defvar #:mode:set 3)
(defvar #:mode:or 7)
(defvar #:mode:xor 6)
(defvar #:mode:not 12)
(loader'((fentry inibitmap nsubr)
(entry inibitmap nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a2)
(bra 102)
101
(mov '"BITMAP" a1)
(jcall getenv)
(mov a1 a2)
(bfnil a2 102)
(mov (cvalq #:display:default-bitmap) a2)
102
(mov nil a1)
(jcall symbol)
(mov a1 (cvalq #:bitmap:name))
(mov (cvalq #:display:all-bitmaps) a2)
(jcall cassq)
(bfnil a1 105)
(push (@ 106))
(push (cvalq #:system:virbitmap-directory))
(push (cvalq #:bitmap:name))
(push (cvalq #:system:lelisp-extension))
(mov '3 a4)
(jmp catenate)
106
(eval ())
(push a1)
(jcall probefile)
(btnil a1 107)
(mov 't a2)
(mov (& 0) a1)
(jcall loadfile)
(bra 108)
107
(mov (& 0) a3)
(mov 'errfile a2)
(mov 'inibitmap a1)
(jcall error)
108
(adjstk '1)
(mov (cvalq #:display:all-bitmaps) a2)
(mov (cvalq #:bitmap:name) a1)
(jcall cassq)
(bfnil a1 105)
(mov (cvalq #:display:all-bitmaps) a3)
(mov (cvalq #:sys-package:bitmap) a2)
(mov (cvalq #:bitmap:name) a1)
(jcall acons)
(mov a1 (cvalq #:display:all-bitmaps))
105
(mov (cvalq #:bitmap:name) a1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry bitprologue nsubr)
(entry bitprologue nsubr)
(jcall #:llcp:nlist)
(push a1)
(btnil a1 101)
(mov (cdr a1) (& 0))
(mov (car a1) a4)
(bra 102)
101
(mov nil a4)
102
(btnil (& 0) 103)
(mov (& 0) a3)
(mov (cdr a3) (& 0))
(mov (car a3) a3)
(bra 104)
103
(mov nil a3)
104
(push a3)
(push a4)
(btnil (cvalq #:display:all-bitmaps) 105)
(bfnil a4 108)
(mov (cvalq #:display:all-bitmaps) a2)
(mov (car a2) a2)
(mov (car a2) (& 0))
108
(mov (cvalq #:display:all-bitmaps) a2)
(mov (& 0) a1)
(jcall cassq)
(push a1)
(btnil a1 109)
(mov 'make a2)
(jcall getfn1)
(btnil a1 109)
(mov 'display a2)
(mov (& 0) a1)
(jcall subtypep)
(btnil a1 109)
(mov (& 0) a1)
(jcall new)
(mov a1 a4)
(bra 110)
109
(mov 'display a1)
(jcall new)
(mov a1 a4)
110
(push a4)
(hpmovx (& 2) a4 '0)
(hpmovx (& 1) a4 '1)
(hpmovx (& 3) a4 '2)
(push (@ 111))
(push 'bitprologue)
(push a4)
(mov '2 a4)
(jmp send)
111
(eval ())
(mov (cvalq #:display:all-displays) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:display:all-displays))
(hpmovx 't (& 0) '6)
(bfnil (cvalq #:display:current-display) 113)
(push (@ 114))
(push (& 1))
(mov '1 a4)
(jmp current-display)
114
(eval ())
113
(mov (& 0) a1)
(adjstk '5)
(return)
105
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry #:display:bitprologue nsubr)
(entry #:display:bitprologue nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'bitprologue a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry bitmap-save nsubr)
(entry bitmap-save nsubr)
(push a4)
(cabne (& 0) '0 101)
(push (@ 103))
(push (cvalq #:display:current-display))
(mov '1 a4)
(jmp list)
103
(eval ())
(mov a1 a4)
(bra 102)
101
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(cabne a4 't 104)
(mov (cvalq #:display:all-displays) a4)
(bra 102)
104
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'bitmap-save a1)
(jcall error)
107
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
102
(push a4)
(push a4)
108
(bfcons (& 0) 109)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:display:save-a-display)
(bra 108)
109
(adjstk '1)
(bfnil (cvalq #:display:current-display) 111)
(push (@ 112))
(mov (cvalq #:display:all-displays) a4)
(push (car a4))
(mov '1 a4)
(jmp current-display)
112
(eval ())
111
(mov (& 0) a1)
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:display:save-a-display subr1)
(push a1)
(mov 'display a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitmap-save a1)
(jcall error)
102
(push (@ 103))
(hpxmov (& 1) '14 a4)
(push a4)
(push nil)
(mov '2 a4)
(jmp append)
103
(eval ())
(push a1)
(hpxmov (& 1) '15 a4)
(push a4)
(push nil)
104
(bfcons (& 1) 105)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 106))
(push (& 1))
(hpxmov (& 2) '0 a4)
(push a4)
(hpxmov (& 3) '1 a4)
(push a4)
(push (@ 107))
(push (& 5))
(mov '1 a4)
(jmp #:bitmap:bytes)
107
(eval ())
(push a1)
(mov '4 a4)
(jmp list)
106
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 104)
105
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (@ 108))
(hpxmov (& 3) '16 a4)
(push a4)
(push nil)
(mov '2 a4)
(jmp append)
108
(eval ())
(push a1)
(push (@ 109))
(hpxmov (& 4) '17 a4)
(push a4)
(push nil)
(mov '2 a4)
(jmp append)
109
(eval ())
(push a1)
(hpxmov (& 4) '18 a4)
(push a4)
(push nil)
110
(bfcons (& 1) 111)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 110)
111
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (@ 112))
(hpxmov (& 6) '19 a4)
(push a4)
(push nil)
(mov '2 a4)
(jmp append)
112
(eval ())
(push a1)
(push (@ 113))
(hpxmov (& 7) '20 a4)
(push a4)
(push nil)
(mov '2 a4)
(jmp append)
113
(eval ())
(push a1)
(hpxmov (& 7) '26 a4)
(push a4)
(push nil)
114
(bfcons (& 1) 115)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 116))
(push (& 1))
(hpxmov (& 2) '0 a4)
(push a4)
(hpxmov (& 3) '1 a4)
(push a4)
(hpxmov (& 4) '4 a4)
(push a4)
(mov '4 a4)
(jmp list)
116
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 114)
115
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(hpxmov (& 8) '8 a4)
(push a4)
(hpxmov (& 9) '7 a3)
(push a3)
(hpxmov (& 10) '5 a2)
(push a2)
(push (@ 117))
(push 'saved-display)
(hpxmov (& 13) '10 a4)
(push a4)
(hpxmov (& 14) '13 a4)
(push a4)
(hpxmov (& 15) '12 a4)
(push a4)
(cabne (& 16) (cvalq #:display:current-display) 118)
(mov 't a4)
(bra 119)
118
(mov nil a4)
119
(push a4)
(mov '5 a4)
(jmp list)
117
(eval ())
(push a1)
(mov (& 8) a1)
(call #:display:save-colortable)
(mov (& 10) a2)
(jcall cons)
(mov a1 (& 10))
(hpxmov (& 12) '10 a1)
(mov (& 11) a2)
(jcall delq)
(mov a1 (& 11))
(push a1)
120
(bfcons (& 0) 121)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(hpxmov (& 0) '9 a4)
(bfnil a4 123)
(mov (& 0) a1)
(jcall check-window-position)
123
(adjstk '1)
(bra 120)
121
(adjstk '1)
(hpxmov (& 12) '13 a1)
(mov (& 8) a2)
(jcall delq)
(mov a1 (& 8))
(hpxmov (& 12) '12 a1)
(mov (& 8) a2)
(jcall delq)
(mov a1 (& 8))
(push (@ 124))
(mov '0 a4)
(jmp current-display)
124
(eval ())
(push a1)
(push (@ 125))
(push dlink)
(push prot)
(stack dlink)
(push (@ 127))
(push (& 17))
(mov '1 a4)
(jmp current-display)
127
(eval ())
(push (@ 128))
(mov '0 a4)
(jmp standard-roman-font)
128
(eval ())
(jcall font-name)
(mov (& 11) a2)
(jcall delq)
(mov a1 (& 11))
(push (@ 129))
(mov '0 a4)
(jmp standard-bold-font)
129
(eval ())
(jcall font-name)
(mov (& 11) a2)
(jcall delq)
(mov a1 (& 11))
(push (@ 130))
(mov '0 a4)
(jmp large-roman-font)
130
(eval ())
(jcall font-name)
(mov (& 11) a2)
(jcall delq)
(mov a1 (& 11))
(push (@ 131))
(mov '0 a4)
(jmp small-roman-font)
131
(eval ())
(jcall font-name)
(mov (& 11) a2)
(jcall delq)
(mov a1 (& 11))
(push (@ 132))
(push nil)
(mov '1 a4)
(jmp current-window)
132
(eval ())
(jcall flush-event)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 126) a3)
125
(push a3)
(push a2)
(push (@ 133))
(push (& 4))
(mov '1 a4)
(jmp current-display)
133
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
126
(eval ())
(adjstk '1)
(hpxmov (& 12) '6 a4)
(btnil a4 135)
(push (@ 136))
(push 'bitmap-save)
(push (& 14))
(mov '2 a4)
(jmp send)
136
(eval ())
(mov (& 12) a1)
(call #:display:do-close)
135
(push (& 11))
137
(bfcons (& 0) 138)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(hpmovx nil (& 0) '8)
(adjstk '1)
(bra 137)
138
(adjstk '1)
(hpmovx (& 1) (& 12) '5)
(hpmovx (& 3) (& 12) '8)
(hpmovx (& 2) (& 12) '7)
(hpmovx (& 11) (& 12) '14)
(hpmovx (& 9) (& 12) '16)
(hpmovx (& 10) (& 12) '15)
(hpmovx (& 9) (& 12) '16)
(hpmovx (& 8) (& 12) '17)
(hpmovx (& 7) (& 12) '18)
(hpmovx (& 6) (& 12) '19)
(hpmovx (& 5) (& 12) '20)
(hpmovx (& 4) (& 12) '26)
(hpmovx (& 0) (& 12) '21)
(mov (& 12) a1)
(adjstk '13)
(return)
))
(loader'((entry #:display:save-colortable subr1)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 103))
(hpxmov (& 1) '6 a4)
(push a4)
(hpxmov (& 2) '1 a4)
(push a4)
(hpxmov (& 3) '2 a4)
(push a4)
(hpxmov (& 4) '3 a4)
(push a4)
(hpxmov (& 5) '4 a4)
(push a4)
(mov '5 a4)
(jmp vector)
103
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '2)
(jmp nreverse)
))
(loader'((fentry bitmap-restore subr1)
(entry bitmap-restore subr1)
(push a1)
(jcall listp)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errnla a2)
(mov 'bitmap-restore a1)
(jcall error)
102
(push 'tty)
(push (cvalq #:sys-package:tty))
(mov (& 1) (cvalq #:sys-package:tty))
(push '1)
(push '(#:sys-package:tty))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (& 8))
103
(bfcons (& 0) 104)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:display:restore-a-display)
(bra 103)
104
(adjstk '1)
(mov (& 8) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:tty))
(adjstk '9)
(return)
))
(loader'((entry #:display:restore-a-display subr1)
(push a1)
(mov 'display a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitmap-restore a1)
(jcall error)
102
(hpxmov (& 0) '21 a4)
(bfcons a4 105)
(hpxmov (& 0) '21 a4)
(cabeq 'saved-display (car a4) 104)
105
(mov (& 0) a3)
(mov '#:display:errnotasaveddisplay a2)
(mov 'bitmap-restore a1)
(jcall error)
104
(hpxmov (& 0) '14 a4)
(push a4)
(hpxmov (& 1) '15 a3)
(push (cdr a3))
(hpxmov (& 2) '15 a2)
(push (car a2))
(hpxmov (& 3) '16 a1)
(push a1)
(hpxmov (& 4) '17 a4)
(push a4)
(hpxmov (& 5) '18 a4)
(push a4)
(hpxmov (& 6) '19 a4)
(push a4)
(hpxmov (& 7) '20 a4)
(push a4)
(hpxmov (& 8) '26 a4)
(push a4)
(hpxmov (& 9) '25 a1)
(jcall nreverse)
(hpxmov (& 9) '10 a4)
(push a4)
(hpxmov (& 10) '8 a3)
(hpxmov (& 10) '7 a2)
(hpxmov (& 10) '5 a4)
(push a4)
(hpxmov (& 11) '21 a4)
(push nil)
(push a4)
(push a2)
(push a3)
(push a1)
(hpmovx nil (& 16) '14)
(hpmovx nil (& 16) '15)
(hpmovx nil (& 16) '26)
(hpmovx nil (& 16) '16)
(hpmovx nil (& 16) '17)
(hpmovx nil (& 16) '18)
(hpmovx nil (& 16) '19)
(hpmovx nil (& 16) '20)
(hpmovx nil (& 16) '25)
(hpmovx nil (& 16) '21)
(push (@ 106))
(push 'bitmap-restore)
(push (& 18))
(mov '2 a4)
(jmp send)
106
(eval ())
(mov (cvalq #:display:all-displays) a2)
(mov (& 16) a1)
(jcall cons)
(mov a1 (cvalq #:display:all-displays))
(hpmovx 't (& 16) '6)
(push (@ 107))
(mov '0 a4)
(jmp current-display)
107
(eval ())
(push a1)
(push (@ 108))
(push dlink)
(push prot)
(stack dlink)
(push (@ 110))
(push (& 21))
(mov '1 a4)
(jmp current-display)
110
(eval ())
(mov (& 7) a4)
(mov (cdr a4) a4)
(mov (car a4) (& 8))
(push (@ 111))
(mov '0 a4)
(jmp root-window)
111
(eval ())
(hpxmov (& 20) '14 a3)
(mov (& 8) a2)
(call #:display:exchange-and-subst)
(hpmovx (& 8) (& 20) '10)
(mov (& 7) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (car a4) (& 8))
(jcall standard-foreground)
(hpxmov (& 20) '17 a3)
(mov (& 8) a2)
(call #:display:exchange-and-subst)
(hpmovx (& 8) (& 20) '13)
(hpxmov (& 20) '11 a4)
(hpmovx (& 8) a4 '4)
(mov (& 7) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (car a4) (& 8))
(jcall standard-background)
(hpxmov (& 20) '17 a3)
(mov (& 8) a2)
(call #:display:exchange-and-subst)
(hpmovx (& 8) (& 20) '12)
(hpxmov (& 20) '11 a4)
(hpmovx (& 8) a4 '5)
(push (& 15))
112
(bfcons (& 0) 113)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 116))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(hpxmov (& 12) '0 a4)
(btnil a4 117)
(hpxmov (& 12) '0 a1)
(jcall make-named-color)
(bra 118)
117
(hpxmov (& 12) '4 a4)
(btnil a4 119)
(hpxmov (& 12) '1 a1)
(hpxmov (& 12) '2 a2)
(hpxmov (& 12) '3 a3)
(jcall make-mutable-color)
(bra 118)
119
(hpxmov (& 12) '1 a1)
(hpxmov (& 12) '2 a2)
(hpxmov (& 12) '3 a3)
(jcall make-color)
118
(hpxmov (& 34) '17 a3)
(mov (& 12) a2)
(call #:display:exchange-and-subst)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
116
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 115)
(mov (& 0) a3)
(mov '"Error for color" a2)
(mov 'restore-core a1)
(jcall error)
115
(adjstk '1)
(bra 112)
113
(adjstk '1)
(push (& 18))
121
(bfcons (& 0) 122)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push a3)
(mov (car a2) a2)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 125))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 126))
(push a4)
(push a3)
(push a2)
(push (& 37))
(mov '4 a4)
(jmp create-bytemap)
126
(eval ())
(push nil)
(push a1)
(mov (& 16) a1)
(jcall type-of)
(cabne a1 '#:bitmap:bytemap 127)
(mov (& 0) a1)
(bra 128)
127
(push (@ 129))
(push (& 16))
(push (& 16))
(mov '2 a4)
(jmp create-bitmap)
129
(eval ())
(mov a1 (& 1))
(push (@ 130))
(push a1)
(push (& 2))
(push '0)
(push '0)
(push '0)
(push '0)
(push (& 22))
(push (& 22))
(mov '8 a4)
(jmp bitblit)
130
(eval ())
(mov (& 0) a1)
(jcall kill-bitmap)
(mov (& 1) a1)
128
(adjstk '2)
(hpxmov (& 36) '15 a3)
(mov (& 14) a2)
(call #:display:exchange-and-subst)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
125
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 124)
(mov (& 2) a3)
(mov '"Error for bitmap" a2)
(mov 'restore-core a1)
(jcall error)
124
(adjstk '3)
(bra 121)
122
(adjstk '1)
(push (& 11))
131
(bfcons (& 0) 132)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(mov (car a2) a2)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 135))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push a3)
(mov a2 a3)
(pop a2)
(mov a4 a1)
(jcall create-stipple)
(hpxmov (& 34) '26 a3)
(mov (& 12) a2)
(call #:display:exchange-and-subst)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
135
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 134)
(mov (& 0) a3)
(mov '"Error for stipple" a2)
(mov 'restore-core a1)
(jcall error)
134
(adjstk '1)
(bra 131)
132
(adjstk '1)
(push (& 14))
136
(bfcons (& 0) 137)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 140))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 12) a1)
(jcall load-font)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
140
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 139)
(mov (& 0) a3)
(mov '"Error for font" a2)
(mov 'restore-core a1)
(jcall error)
139
(adjstk '1)
(bra 136)
137
(adjstk '1)
(push (& 13))
141
(bfcons (& 0) 142)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 145))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 12) a1)
(jcall make-pattern)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
145
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 144)
(mov (& 0) a3)
(mov '"Error for pattern" a2)
(mov 'restore-core a1)
(jcall error)
144
(adjstk '1)
(bra 141)
142
(adjstk '1)
(push (& 12))
146
(bfcons (& 0) 147)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(mov (car a2) a2)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 150))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 151))
(push (& 13))
(push a4)
(push a3)
(push a2)
(mov '4 a4)
(jmp make-cursor)
151
(eval ())
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
150
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 149)
(mov (& 0) a3)
(mov '"Error for cursor" a2)
(mov 'restore-core a1)
(jcall error)
149
(adjstk '1)
(bra 146)
147
(adjstk '1)
(push (& 4))
152
(bfcons (& 0) 153)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 156))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 12) a1)
(jcall make-named-cursor)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
156
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 155)
(mov (& 0) a3)
(mov '"Error for named cursor" a2)
(mov 'restore-core a1)
(jcall error)
155
(adjstk '1)
(bra 152)
153
(adjstk '1)
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 159))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 31) a2)
(mov (& 32) a1)
(call #:display:recreate-windows)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
159
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 158)
(mov (& 19) a3)
(mov '"Error for one window of " a2)
(mov 'restore-core a1)
(jcall error)
158
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 162))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (& 28) a2)
(mov (& 32) a1)
(call #:display:recreate-menus)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
162
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(bfnil a1 161)
(mov (& 16) a3)
(mov '"Error for one menu of " a2)
(mov 'restore-core a1)
(jcall error)
161
(push (@ 163))
(push (& 6))
(mov '1 a4)
(jmp current-window)
163
(eval ())
(push (@ 164))
(push (& 7))
(mov '1 a4)
(jmp current-keyboard-focus-window)
164
(eval ())
(push (@ 165))
(push (& 10))
(mov '1 a4)
(jmp event-mode)
165
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 109) a3)
108
(push a3)
(push a2)
(push (@ 166))
(push (& 4))
(mov '1 a4)
(jmp current-display)
166
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
109
(eval ())
(adjstk '1)
(mov (& 3) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(btnil (car a4) 168)
(push (@ 169))
(push (& 17))
(mov '1 a4)
(jmp current-display)
169
(eval ())
168
(mov (& 16) a1)
(adjstk '17)
(return)
))
(loader'((entry #:display:recreate-windows subr2)
(push a2)
(push a1)
(btnil a2 101)
(push (car a2))
(push nil)
(hpxmov (& 1) '9 a4)
(btnil a4 103)
(hpxmov (& 1) '9 a1)
(jcall windowp)
(bfnil a1 103)
(mov (& 3) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(jcall append1)
(mov a1 a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:display:recreate-windows)
103
(hpxmov (& 1) '7 a4)
(mov a4 (& 0))
(bfnil a4 106)
(mov (& 1) a3)
(mov '"impossible error 1" a2)
(mov '#:display:recreate-windows a1)
(jcall error)
106
(hpxmov (& 0) '10 a4)
(push a4)
(hpxmov (& 1) '0 a3)
(hpxmov (& 1) '1 a2)
(hpxmov (& 1) '2 a1)
(hpxmov (& 1) '3 a4)
(push a4)
(hpxmov (& 2) '4 a4)
(push a4)
(hpxmov (& 3) '5 a4)
(push a4)
(hpxmov (& 4) '6 a4)
(push a4)
(hpxmov (& 5) '7 a4)
(push a4)
(hpxmov (& 6) '8 a4)
(push a4)
(hpxmov (& 7) '9 a4)
(push a4)
(hpxmov (& 9) '11 a4)
(push a4)
(push a1)
(push a2)
(push a3)
(mov (& 13) a1)
(jcall make-window)
(push (@ 107))
(mov '0 a4)
(jmp current-window)
107
(eval ())
(push a1)
(push (@ 108))
(push dlink)
(push prot)
(stack dlink)
(push (@ 110))
(push (& 18))
(mov '1 a4)
(jmp current-window)
110
(eval ())
(push (@ 111))
(push (& 5))
(mov '1 a4)
(jmp current-font)
111
(eval ())
(push (@ 112))
(push (& 6))
(mov '1 a4)
(jmp current-line-style)
112
(eval ())
(push (@ 113))
(push (& 7))
(mov '1 a4)
(jmp current-pattern)
113
(eval ())
(push (@ 114))
(push (& 15))
(mov '1 a4)
(jmp current-mode)
114
(eval ())
(push (@ 115))
(push (& 14))
(mov '1 a4)
(jmp current-foreground)
115
(eval ())
(push (@ 116))
(push (& 13))
(mov '1 a4)
(jmp current-background)
116
(eval ())
(push (@ 117))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(mov '4 a4)
(jmp current-clip)
117
(eval ())
(push (@ 118))
(push (& 8))
(mov '1 a4)
(jmp current-cursor)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 109) a3)
108
(push a3)
(push a2)
(push (@ 119))
(push (& 4))
(mov '1 a4)
(jmp current-window)
119
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
109
(eval ())
(adjstk '1)
(btnil (& 11) 121)
(hpxmov (& 13) '7 a4)
(hpmovx nil a4 '10)
(mov (& 13) a1)
(jcall window-bitmap)
(mov (& 11) a2)
(jcall exchvector)
(hpxmov (& 13) '7 a4)
(hpmovx (& 11) a4 '10)
121
(adjstk '12)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (& 2) a1)
(adjstk '4)
(bra #:display:recreate-windows)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:recreate-menus subr2)
(push a1)
(push a2)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 103))
(hpxmov (& 1) '0 a4)
(push a4)
(mov '1 a4)
(jmp create-menu)
103
(eval ())
(push a1)
(hpxmov (& 1) '1 a1)
(jcall reverse)
(push a1)
104
(bfcons (& 0) 105)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 106))
(push (& 3))
(push '0)
(hpxmov (& 3) '4 a4)
(push a4)
(hpxmov (& 4) '5 a4)
(push a4)
(mov '4 a4)
(jmp menu-insert-item-list)
106
(eval ())
(hpxmov (& 0) '6 a1)
(jcall reverse)
(push a1)
107
(bfcons (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 109))
(push (& 5))
(push '0)
(push '0)
(hpxmov (& 4) '4 a4)
(push a4)
(hpxmov (& 5) '5 a4)
(push a4)
(hpxmov (& 6) '6 a4)
(push a4)
(mov '6 a4)
(jmp menu-insert-item)
109
(eval ())
(adjstk '1)
(bra 107)
108
(adjstk '2)
(bra 104)
105
(adjstk '1)
(hpxmov (& 3) '16 a3)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:display:exchange-and-subst)
(adjstk '2)
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:display:exchange-and-subst subr3)
(push a3)
(push a2)
(push a1)
(btnil a2 101)
(jcall exchvector)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall memq)
(mov (& 1) (car a1))
(adjstk '3)
(return)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry bitepilogue nsubr)
(entry bitepilogue nsubr)
(jcall #:llcp:nlist)
(push a1)
(cabne a1 nil 101)
(push (@ 103))
(push (cvalq #:display:current-display))
(mov '1 a4)
(jmp list)
103
(eval ())
(mov a1 (& 0))
(bra 102)
101
(cabne (car a1) 't 102)
(mov (cvalq #:display:all-displays) (& 0))
102
(push (& 0))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfnil (& 0) 109)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'bitepilogue a1)
(jcall error)
109
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 112)
(hpxmov (& 0) '6 a4)
(bfnil a4 111)
112
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitepilogue a1)
(jcall error)
111
(hpxmov (& 0) '6 a4)
(btnil a4 114)
(push (@ 115))
(push 'bitepilogue)
(push (& 2))
(mov '2 a4)
(jmp send)
115
(eval ())
(mov (& 0) a1)
(call #:display:do-close)
114
(adjstk '1)
(bra 106)
107
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:bitepilogue nsubr)
(entry #:display:bitepilogue nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'bitepilogue a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:display:do-close subr1)
(push a1)
(hpmovx nil a1 '2)
(hpmovx nil a1 '6)
(hpmovx nil a1 '5)
(hpmovx nil a1 '3)
(hpmovx nil a1 '4)
(hpmovx nil a1 '7)
(hpmovx nil a1 '8)
(hpmovx nil a1 '9)
(hpmovx nil a1 '10)
(hpmovx nil a1 '11)
(hpmovx nil a1 '14)
(hpmovx nil a1 '15)
(hpmovx nil a1 '16)
(hpmovx nil a1 '17)
(hpmovx nil a1 '18)
(hpmovx nil a1 '19)
(hpmovx nil a1 '20)
(hpmovx nil a1 '21)
(mov (cvalq #:display:all-displays) a2)
(jcall delq)
(mov a1 (cvalq #:display:all-displays))
(cabne (& 0) (cvalq #:display:current-display) 101)
(push (@ 103))
(push nil)
(mov '1 a4)
(jmp current-display)
103
(eval ())
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry bitmap-refresh nsubr)
(entry bitmap-refresh nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'bitmap-refresh a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitmap-refresh a1)
(jcall error)
106
(push (@ 108))
(push 'bitmap-refresh)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:bitmap-refresh nsubr)
(entry #:display:bitmap-refresh nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'bitmap-refresh a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry bitmap-flush nsubr)
(entry bitmap-flush nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'bitmap-flush a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitmap-flush a1)
(jcall error)
106
(push (@ 108))
(push 'bitmap-flush)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:bitmap-flush nsubr)
(entry #:display:bitmap-flush nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'bitmap-flush a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry bitmap-sync nsubr)
(entry bitmap-sync nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'bitmap-sync a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitmap-sync a1)
(jcall error)
106
(push (@ 108))
(push 'bitmap-sync)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:bitmap-sync nsubr)
(entry #:display:bitmap-sync nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'bitmap-sync a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-roman-font nsubr)
(entry standard-roman-font nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-roman-font a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-roman-font a1)
(jcall error)
106
(push (@ 108))
(push 'standard-roman-font)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-roman-font nsubr)
(entry #:display:standard-roman-font nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-roman-font a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-bold-font nsubr)
(entry standard-bold-font nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-bold-font a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-bold-font a1)
(jcall error)
106
(push (@ 108))
(push 'standard-bold-font)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-bold-font nsubr)
(entry #:display:standard-bold-font nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-bold-font a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry large-roman-font nsubr)
(entry large-roman-font nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'large-roman-font a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'large-roman-font a1)
(jcall error)
106
(push (@ 108))
(push 'large-roman-font)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:large-roman-font nsubr)
(entry #:display:large-roman-font nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'large-roman-font a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry small-roman-font nsubr)
(entry small-roman-font nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'small-roman-font a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'small-roman-font a1)
(jcall error)
106
(push (@ 108))
(push 'small-roman-font)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:small-roman-font nsubr)
(entry #:display:small-roman-font nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'small-roman-font a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-foreground-pattern nsubr)
(entry standard-foreground-pattern nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-foreground-pattern a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-foreground-pattern a1)
(jcall error)
106
(push (@ 108))
(push 'standard-foreground-pattern)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-foreground-pattern nsubr)
(entry #:display:standard-foreground-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-foreground-pattern a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-background-pattern nsubr)
(entry standard-background-pattern nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-background-pattern a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-background-pattern a1)
(jcall error)
106
(push (@ 108))
(push 'standard-background-pattern)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-background-pattern nsubr)
(entry #:display:standard-background-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-background-pattern a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-medium-gray-pattern nsubr)
(entry standard-medium-gray-pattern nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-medium-gray-pattern a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-medium-gray-pattern a1)
(jcall error)
106
(push (@ 108))
(push 'standard-medium-gray-pattern)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-medium-gray-pattern nsubr)
(entry #:display:standard-medium-gray-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-medium-gray-pattern a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-light-gray-pattern nsubr)
(entry standard-light-gray-pattern nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-light-gray-pattern a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-light-gray-pattern a1)
(jcall error)
106
(push (@ 108))
(push 'standard-light-gray-pattern)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-light-gray-pattern nsubr)
(entry #:display:standard-light-gray-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-light-gray-pattern a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-dark-gray-pattern nsubr)
(entry standard-dark-gray-pattern nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-dark-gray-pattern a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-dark-gray-pattern a1)
(jcall error)
106
(push (@ 108))
(push 'standard-dark-gray-pattern)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-dark-gray-pattern nsubr)
(entry #:display:standard-dark-gray-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-dark-gray-pattern a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-lelisp-cursor nsubr)
(entry standard-lelisp-cursor nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-lelisp-cursor a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-lelisp-cursor a1)
(jcall error)
106
(push (@ 108))
(push 'standard-lelisp-cursor)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-lelisp-cursor nsubr)
(entry #:display:standard-lelisp-cursor nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-lelisp-cursor a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-gc-cursor nsubr)
(entry standard-gc-cursor nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-gc-cursor a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-gc-cursor a1)
(jcall error)
106
(push (@ 108))
(push 'standard-gc-cursor)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-gc-cursor nsubr)
(entry #:display:standard-gc-cursor nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-gc-cursor a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-busy-cursor nsubr)
(entry standard-busy-cursor nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'standard-busy-cursor a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-busy-cursor a1)
(jcall error)
106
(push (@ 108))
(push 'standard-busy-cursor)
(push (& 2))
(mov '2 a4)
(jmp send)
108
(eval ())
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:standard-busy-cursor nsubr)
(entry #:display:standard-busy-cursor nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'standard-busy-cursor a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry bitxmax nsubr)
(entry bitxmax nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'bitxmax a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitxmax a1)
(jcall error)
106
(hpxmov (& 0) '3 a1)
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry bitymax nsubr)
(entry bitymax nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'bitymax a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitymax a1)
(jcall error)
106
(hpxmov (& 0) '4 a1)
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry root-window nsubr)
(entry root-window nsubr)
(push a4)
(cabne (& 0) '1 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov (cvalq #:display:current-display) a4)
102
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'root-window a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'root-window a1)
(jcall error)
106
(hpxmov (& 0) '10 a1)
(adjstk '1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry standard-foreground subr0)
(entry standard-foreground subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'standard-foreground a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-foreground a1)
(jcall error)
104
(hpxmov (& 0) '13 a1)
(adjstk '1)
(return)
))
(loader'((fentry standard-background subr0)
(entry standard-background subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'standard-background a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'standard-background a1)
(jcall error)
104
(hpxmov (& 0) '12 a1)
(adjstk '1)
(return)
))
(defvar #:graph-env:current-graph-env (when (boundp '#:graph-env:current-graph-env) #:graph-env:current-graph-env))
(defvar #:graph-env:main-graph-env (when (boundp '#:graph-env:main-graph-env) #:graph-env:main-graph-env))
(defvar #:window:prologuep (when (boundp '#:window:prologuep) #:window:prologuep))
(loader'((fentry #:display:bitmap-save subr1)
(entry #:display:bitmap-save subr1)
(push (@ 101))
(push 'bitepilogue)
(push a1)
(mov '2 a4)
(jmp send)
101
(eval ())
(return)
))
(loader'((fentry #:display:bitmap-restore subr1)
(entry #:display:bitmap-restore subr1)
(push (@ 101))
(push 'bitprologue)
(push a1)
(mov '2 a4)
(jmp send)
101
(eval ())
(return)
))
(loader'((fentry #:display:prin subr1)
(entry #:display:prin subr1)
(push a1)
(push (@ 101))
(push '35)
(mov '1 a4)
(jmp princn)
101
(eval ())
(push (@ 102))
(push '60)
(mov '1 a4)
(jmp princn)
102
(eval ())
(push (@ 103))
(hpxmov (& 1) '1 a4)
(push a4)
(mov '1 a4)
(jmp prin)
103
(eval ())
(push (@ 104))
(push '32)
(mov '1 a4)
(jmp princn)
104
(eval ())
(push (@ 105))
(hpxmov (& 1) '0 a4)
(push a4)
(mov '1 a4)
(jmp prin)
105
(eval ())
(push (@ 106))
(push '32)
(mov '1 a4)
(jmp princn)
106
(eval ())
(push (@ 107))
(hpxmov (& 1) '2 a4)
(push a4)
(mov '1 a4)
(jmp prin)
107
(eval ())
(push (@ 108))
(push '32)
(mov '1 a4)
(jmp princn)
108
(eval ())
(push (@ 109))
(hpxmov (& 1) '21 a4)
(push a4)
(mov '1 a4)
(jmp prin)
109
(eval ())
(push (@ 110))
(push '62)
(mov '1 a4)
(jmp princn)
110
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:current-display subr1)
(entry #:display:current-display subr1)
(push a1)
(hpxmov a1 '0 a4)
(mov a4 (cvalq #:bitmap:name))
(hpxmov a1 '1 a3)
(mov a3 (cvalq #:sys-package:bitmap))
(push (@ 101))
(push a3)
(push 'xmax)
(mov '2 a4)
(jmp getsymb)
101
(eval ())
(hpxmov (& 0) '3 a4)
(mov a4 (cval a1))
(push (@ 102))
(push (cvalq #:sys-package:bitmap))
(push 'ymax)
(mov '2 a4)
(jmp getsymb)
102
(eval ())
(hpxmov (& 0) '4 a4)
(mov a4 (cval a1))
(hpxmov (& 0) '6 a4)
(mov a4 (cvalq #:window:prologuep))
(hpxmov (& 0) '14 a3)
(mov a3 (cvalq #:window:all-windows))
(hpxmov (& 0) '8 a2)
(mov a2 (cvalq #:window:current-window))
(hpxmov (& 0) '11 a1)
(mov a1 (cvalq #:graph-env:main-graph-env))
(hpxmov (& 0) '9 a4)
(mov a4 (cvalq #:graph-env:current-graph-env))
(hpxmov (& 0) '7 a4)
(mov a4 (cvalq #:window:current-keyboard-focus-window))
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((fentry display-store-selection subr2)
(entry display-store-selection subr2)
(push a2)
(push a1)
(bfnil a1 102)
(mov a1 a3)
(mov '#:display:no-current-display a2)
(mov 'display-store-selection a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'display-store-selection a1)
(jcall error)
104
(btstrg (& 1) 107)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'display-store-selection a1)
(jcall error)
107
(push (@ 108))
(push 'store-selection)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
108
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry display-get-selection subr1)
(entry display-get-selection subr1)
(push a1)
(bfnil a1 102)
(mov a1 a3)
(mov '#:display:no-current-display a2)
(mov 'display-get-selection a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'display-get-selection a1)
(jcall error)
104
(push (@ 106))
(push 'get-selection)
(push (& 2))
(mov '2 a4)
(jmp send)
106
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:store-selection subr2)
(entry #:display:store-selection subr2)
(hpmovx a2 a1 '23)
(mov a2 a1)
(return)
))
(loader'((fentry #:display:get-selection subr1)
(entry #:display:get-selection subr1)
(hpxmov a1 '23 a1)
(return)
))
(loader'((fentry display-depth subr1)
(entry display-depth subr1)
(push a1)
(bfnil a1 102)
(mov a1 a3)
(mov '#:display:no-current-display a2)
(mov 'display-depth a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'display-depth a1)
(jcall error)
104
(push (@ 106))
(push 'display-depth)
(push (& 2))
(mov '2 a4)
(jmp send)
106
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:display-depth nsubr)
(entry #:display:display-depth nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'display-depth a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry display-synchronize nsubr)
(entry display-synchronize nsubr)
(cnbge a4 '1 101)
(mov 'display-synchronize a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(bfnil (& 1) 103)
(mov (& 1) a3)
(mov '#:display:no-current-display a2)
(mov 'display-synchronize a1)
(jcall error)
103
(mov 'display a2)
(mov (& 1) a1)
(jcall typep)
(btnil a1 106)
(hpxmov (& 1) '6 a4)
(bfnil a4 105)
106
(mov (& 1) a3)
(mov '#:display:errnotadisplay a2)
(mov 'display-synchronize a1)
(jcall error)
105
(btnil (& 0) 107)
(push (@ 109))
(push 'synchronize)
(push (& 3))
(mov (& 3) a4)
(push (car a4))
(mov '3 a4)
(jmp send)
109
(eval ())
(adjstk '2)
(return)
107
(push (@ 110))
(push 'synchronize)
(push (& 3))
(mov '2 a4)
(jmp send)
110
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:display:synchronize nsubr)
(entry #:display:synchronize nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'synchronize a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry default-window-type nsubr)
(entry default-window-type nsubr)
(cnbge a4 '1 101)
(mov 'default-window-type a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(bfnil (& 1) 103)
(mov (& 1) a3)
(mov '#:display:no-current-display a2)
(mov 'default-window-type a1)
(jcall error)
103
(mov 'display a2)
(mov (& 1) a1)
(jcall typep)
(btnil a1 106)
(hpxmov (& 1) '6 a4)
(bfnil a4 105)
106
(mov (& 1) a3)
(mov '#:display:errnotadisplay a2)
(mov 'default-window-type a1)
(jcall error)
105
(btnil (& 0) 107)
(push (@ 109))
(push 'default-window-type)
(push (& 3))
(mov (& 3) a4)
(push (car a4))
(mov '3 a4)
(jmp send)
109
(eval ())
(adjstk '2)
(return)
107
(push (@ 110))
(push 'default-window-type)
(push (& 3))
(mov '2 a4)
(jmp send)
110
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:display:default-window-type nsubr)
(entry #:display:default-window-type nsubr)
(push a4)
(mov 'transparent a1)
(pop a4)
(adjstk a4)
(return)
))
(loader '((end)))
