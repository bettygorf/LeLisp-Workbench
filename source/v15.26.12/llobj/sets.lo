(loader '((title |sets.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'sets)))
(defvar #:sys-package:colon 'sets)
(add-feature 'sets)
(loader'((fentry adjoin nsubr)
(entry adjoin nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'adjoin a1)
(jcall error)
102
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'adjoin a1)
(jcall error)
105
(cnble (& 0) '2 106)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:adjoin)
(bra 107)
106
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:adjoinq)
107
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:adjoinq subr2)
(push a2)
(push a1)
(jcall memq)
(btnil a1 101)
(mov (& 1) a1)
(adjstk '2)
(return)
101
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(jmp cons)
))
(loader'((entry #:sets:adjoin subr3)
(push a2)
(push a1)
(call #:sets:member)
(btnil a1 101)
(mov (& 1) a1)
(adjstk '2)
(return)
101
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(jmp cons)
))
(loader'((fentry union nsubr)
(entry union nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'union a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'union a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'union a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:union)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:unionq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:unionq subr2)
(push a2)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 2) a2)
(mov (& 0) a1)
(call #:sets:adjoinq)
(mov a1 (& 2))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:sets:union subr3)
(push a3)
(push a2)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 3) a3)
(mov (& 2) a2)
(mov (& 0) a1)
(call #:sets:adjoin)
(mov a1 (& 2))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry nunion nsubr)
(entry nunion nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'nunion a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'nunion a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'nunion a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:nunion)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:nunionq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:nunionq subr2)
(push a1)
(bfnil a1 101)
(mov a2 a1)
(adjstk '1)
(return)
101
(call #:sets:nunion2q)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:sets:nunion subr3)
(push a1)
(bfnil a1 101)
(mov a2 a1)
(adjstk '1)
(return)
101
(call #:sets:nunion2)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:sets:nunion2q subr2)
(btnil (cdr a1) 101)
(push (cdr a1))
(mov (car a1) a1)
(jcall delq)
(mov a1 a2)
(pop a1)
(bra #:sets:nunion2q)
101
(push a1)
(mov (car a1) a1)
(jcall delq)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(return)
))
(loader'((entry #:sets:nunion2 subr3)
(push a3)
(btnil (cdr a1) 101)
(push (cdr a1))
(mov (car a1) a1)
(call #:sets:delete)
(mov (& 1) a3)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra #:sets:nunion2)
101
(push a1)
(mov (car a1) a1)
(call #:sets:delete)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((fentry intersection nsubr)
(entry intersection nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'intersection a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'intersection a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'intersection a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:intersection)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:intersectionq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:intersectionq subr2)
(push a2)
(push nil)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 3) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 104)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 2))
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:sets:intersection subr3)
(push a3)
(push a2)
(push nil)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 4) a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:sets:member)
(btnil a1 104)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 2))
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry nintersection nsubr)
(entry nintersection nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'nintersection a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'nintersection a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'nintersection a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:nintersection)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:nintersectionq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:nintersectionq subr2)
(push a2)
(push a1)
(btnil a1 101)
(mov (car a1) a1)
(jcall memq)
(bfnil a1 103)
(mov (& 0) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '2)
(bra #:sets:nintersectionq)
103
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:sets:nintersection2q)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:sets:nintersection subr3)
(push a3)
(push a2)
(push a1)
(btnil a1 101)
(mov (car a1) a1)
(call #:sets:member)
(bfnil a1 103)
(mov (& 0) a1)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '3)
(bra #:sets:nintersection)
103
(mov (& 2) a3)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:sets:nintersection2)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:sets:nintersection2q subr2)
(push a2)
(push a1)
(btnil (cdr a1) 101)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall memq)
(bfnil a1 103)
(mov (& 0) a4)
(mov (cdr a4) a4)
(mov (& 0) a3)
(mov (cdr a4) (cdr a3))
(mov (& 1) a2)
(mov a3 a1)
(adjstk '2)
(bra #:sets:nintersection2q)
103
(mov (& 0) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(call #:sets:nintersection2q)
(mov (& 0) a1)
(adjstk '2)
(return)
101
(adjstk '2)
(return)
))
(loader'((entry #:sets:nintersection2 subr3)
(push a3)
(push a2)
(push a1)
(btnil (cdr a1) 101)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:sets:member)
(bfnil a1 103)
(mov (& 0) a4)
(mov (cdr a4) a4)
(mov (& 0) a3)
(mov (cdr a4) (cdr a3))
(push a3)
(mov (& 3) a3)
(mov (& 2) a2)
(pop a1)
(adjstk '3)
(bra #:sets:nintersection2)
103
(mov (& 0) a1)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(call #:sets:nintersection2)
(mov (& 0) a1)
(adjstk '3)
(return)
101
(adjstk '3)
(return)
))
(loader'((fentry set-difference nsubr)
(entry set-difference nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'set-difference a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'set-difference a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'set-difference a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:set-difference)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:set-differenceq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:set-differenceq subr2)
(push a2)
(push nil)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 3) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 104)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 2))
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((entry #:sets:set-difference subr3)
(push a3)
(push a2)
(push nil)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 4) a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:sets:member)
(bfnil a1 104)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 2))
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry nset-difference nsubr)
(entry nset-difference nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'nset-difference a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'nset-difference a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'nset-difference a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:nset-difference)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:nset-differenceq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:nset-differenceq subr2)
(push a2)
(push a1)
(btnil a1 101)
(mov (car a1) a1)
(jcall memq)
(btnil a1 103)
(mov (& 0) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '2)
(bra #:sets:nset-differenceq)
103
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:sets:nset-difference2q)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:sets:nset-difference subr3)
(push a3)
(push a2)
(push a1)
(btnil a1 101)
(mov (car a1) a1)
(call #:sets:member)
(btnil a1 103)
(mov (& 0) a1)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '3)
(bra #:sets:nset-difference)
103
(mov (& 2) a3)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:sets:nset-difference2)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:sets:nset-difference2q subr2)
(push a2)
(push a1)
(btnil (cdr a1) 101)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall memq)
(btnil a1 103)
(mov (& 0) a4)
(mov (cdr a4) a4)
(mov (& 0) a3)
(mov (cdr a4) (cdr a3))
(mov (& 1) a2)
(mov a3 a1)
(adjstk '2)
(bra #:sets:nset-difference2q)
103
(mov (& 0) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(call #:sets:nset-difference2q)
(mov (& 0) a1)
(adjstk '2)
(return)
101
(adjstk '2)
(return)
))
(loader'((entry #:sets:nset-difference2 subr3)
(push a3)
(push a2)
(push a1)
(btnil (cdr a1) 101)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:sets:member)
(btnil a1 103)
(mov (& 0) a4)
(mov (cdr a4) a4)
(mov (& 0) a3)
(mov (cdr a4) (cdr a3))
(push a3)
(mov (& 3) a3)
(mov (& 2) a2)
(pop a1)
(adjstk '3)
(bra #:sets:nset-difference2)
103
(mov (& 0) a1)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(call #:sets:nset-difference2)
(mov (& 0) a1)
(adjstk '3)
(return)
101
(adjstk '3)
(return)
))
(loader'((fentry set-exclusive-or nsubr)
(entry set-exclusive-or nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'set-exclusive-or a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'set-exclusive-or a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'set-exclusive-or a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:set-exclusive-or)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:set-exclusive-orq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:set-exclusive-orq subr2)
(push a2)
(push a1)
(call #:sets:unionq)
(push a1)
(mov (& 2) a2)
(mov (& 1) a1)
(call #:sets:intersectionq)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:sets:set-differenceq)
))
(loader'((entry #:sets:set-exclusive-or subr3)
(push a3)
(push a2)
(push a1)
(call #:sets:union)
(push a1)
(mov (& 3) a3)
(mov (& 2) a2)
(mov (& 1) a1)
(call #:sets:intersection)
(mov (& 3) a3)
(mov a1 a2)
(pop a1)
(adjstk '3)
(bra #:sets:set-difference)
))
(loader'((fentry nset-exclusive-or nsubr)
(entry nset-exclusive-or nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'nset-exclusive-or a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'nset-exclusive-or a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'nset-exclusive-or a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:nset-exclusive-or)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:nset-exclusive-orq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:nset-exclusive-orq subr2)
(push nil)
(push (cvalq #:sets:found))
(mov (& 1) (cvalq #:sets:found))
(push '1)
(push '(#:sets:found))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:sets:nset-exclusive-or2q)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sets:found))
(adjstk '8)
(return)
))
(loader'((entry #:sets:nset-exclusive-or subr3)
(push nil)
(push (cvalq #:sets:found))
(mov (& 1) (cvalq #:sets:found))
(push '1)
(push '(#:sets:found))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:sets:nset-exclusive-or2)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sets:found))
(adjstk '8)
(return)
))
(loader'((entry #:sets:nset-exclusive-or2q subr2)
(push a2)
(push a1)
(bfnil a1 101)
(mov a2 a1)
(adjstk '2)
(return)
101
(mov (car a1) a1)
(call #:sets:nset-removeq)
(mov a1 (& 1))
(btnil (cvalq #:sets:found) 103)
(mov (& 0) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '2)
(bra #:sets:nset-exclusive-or2q)
103
(mov (& 0) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(call #:sets:nset-exclusive-or2q)
(mov (& 0) a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((entry #:sets:nset-exclusive-or2 subr3)
(push a3)
(push a2)
(push a1)
(bfnil a1 101)
(mov a2 a1)
(adjstk '3)
(return)
101
(mov (car a1) a1)
(call #:sets:nset-remove)
(mov a1 (& 1))
(btnil (cvalq #:sets:found) 103)
(mov (& 0) a1)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '3)
(bra #:sets:nset-exclusive-or2)
103
(mov (& 0) a1)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(call #:sets:nset-exclusive-or2)
(mov (& 0) a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '3)
(return)
))
(loader'((entry #:sets:nset-removeq subr2)
(push a2)
(btcons a2 101)
(mov nil (cvalq #:sets:found))
(mov a2 a1)
(adjstk '1)
(return)
101
(cabne a1 (car a2) 103)
(mov a2 (cvalq #:sets:found))
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(return)
103
(push a2)
(mov (cdr a2) a2)
(call #:sets:nset-removeq)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((entry #:sets:nset-remove subr3)
(push a3)
(push a2)
(push a1)
(btcons a2 101)
(mov nil (cvalq #:sets:found))
(mov a2 a1)
(adjstk '3)
(return)
101
(push (@ 105))
(push a3)
(push a1)
(push (car a2))
(mov '3 a4)
(jmp funcall)
105
(eval ())
(btnil a1 103)
(mov (& 1) (cvalq #:sets:found))
(mov (& 1) a1)
(mov (cdr a1) a1)
(adjstk '3)
(return)
103
(mov (& 1) a2)
(mov (& 2) a3)
(mov (cdr a2) a2)
(mov (& 0) a1)
(call #:sets:nset-remove)
(mov (& 1) a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '3)
(return)
))
(loader'((fentry subsetp nsubr)
(entry subsetp nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'subsetp a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'subsetp a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'subsetp a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:subsetp)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:subsetpq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:subsetpq subr2)
(push a2)
(push a1)
(btnil a1 102)
(mov nil a1)
(bra 103)
102
(mov 't a1)
103
(bfnil a1 101)
(mov (& 0) a1)
(mov (car a1) a1)
(jcall memq)
(btnil a1 101)
(mov (& 0) a1)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '2)
(bra #:sets:subsetpq)
101
(adjstk '2)
(return)
))
(loader'((entry #:sets:subsetp subr3)
(push a3)
(push a2)
(push a1)
(btnil a1 102)
(mov nil a1)
(bra 103)
102
(mov 't a1)
103
(bfnil a1 101)
(mov (& 0) a1)
(mov (car a1) a1)
(call #:sets:member)
(btnil a1 101)
(mov (& 0) a1)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (cdr a1) a1)
(adjstk '3)
(bra #:sets:subsetp)
101
(adjstk '3)
(return)
))
(loader'((fentry set-equal nsubr)
(entry set-equal nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'set-equal a1)
(jcall error)
102
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'set-equal a1)
(jcall error)
105
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 107)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'set-equal a1)
(jcall error)
107
(cnble (& 0) '2 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:set-equal)
(bra 109)
108
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:set-equalq)
109
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:set-equalq subr2)
(push a2)
(push a1)
(push (@ 102))
(jcall length)
(push a1)
(mov (& 3) a1)
(jcall length)
(push a1)
(mov '2 a4)
(jmp =)
102
(eval ())
(btnil a1 101)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:sets:subsetpq)
(btnil a1 101)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(bra #:sets:subsetpq)
101
(adjstk '2)
(return)
))
(loader'((entry #:sets:set-equal subr3)
(push a3)
(push a2)
(push a1)
(push (@ 102))
(jcall length)
(push a1)
(mov (& 3) a1)
(jcall length)
(push a1)
(mov '2 a4)
(jmp =)
102
(eval ())
(btnil a1 101)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:sets:subsetp)
(btnil a1 101)
(mov (& 2) a3)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:sets:subsetp)
101
(adjstk '3)
(return)
))
(loader'((fentry transitive-closure nsubr)
(entry transitive-closure nsubr)
(push a4)
(cnblt (& 0) '2 103)
(cnble (& 0) '3 102)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'transitive-closure a1)
(jcall error)
102
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a1)
(jcall listp)
(bfnil a1 105)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a3)
(mov 'errnla a2)
(mov 'transitive-closure a1)
(jcall error)
105
(cnble (& 0) '2 106)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a3)
(call #:sets:transitive-closure)
(bra 107)
106
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a2)
(call #:sets:transitive-closureq)
107
(pop a4)
(adjstk a4)
(return)
))
(loader'((entry #:sets:transitive-closureq subr2)
(push a2)
(push a1)
(push nil)
(push nil)
(push nil)
101
(btnil (& 4) 102)
(mov (& 4) a4)
(mov (car a4) (& 2))
(push (@ 103))
(push (& 4))
(push (& 4))
(mov '2 a4)
(jmp funcall)
103
(eval ())
(mov a1 (& 0))
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(mov (& 1) a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (& 1))
(push (& 0))
104
(bfcons (& 0) 105)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 3) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 107)
(mov (& 6) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 107)
(mov (& 6) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 6))
107
(adjstk '1)
(bra 104)
105
(adjstk '1)
(bra 101)
102
(mov (& 1) a1)
(adjstk '5)
(return)
))
(loader'((entry #:sets:transitive-closure subr3)
(push a3)
(push a2)
(push a1)
(push nil)
(push nil)
(push nil)
101
(btnil (& 4) 102)
(mov (& 4) a4)
(mov (car a4) (& 2))
(push (@ 103))
(push (& 4))
(push (& 4))
(mov '2 a4)
(jmp funcall)
103
(eval ())
(mov a1 (& 0))
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(mov (& 1) a2)
(mov (& 2) a1)
(jcall cons)
(mov a1 (& 1))
(push (& 0))
104
(bfcons (& 0) 105)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 7) a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:sets:member)
(bfnil a1 107)
(mov (& 7) a3)
(mov (& 6) a2)
(mov (& 0) a1)
(call #:sets:member)
(bfnil a1 107)
(mov (& 6) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 6))
107
(adjstk '1)
(bra 104)
105
(adjstk '1)
(bra 101)
102
(mov (& 1) a1)
(adjstk '6)
(return)
))
(loader'((entry #:sets:member subr3)
(push a1)
(mov a3 a1)
(cabne a1 'equal 102)
(mov (& 0) a1)
(adjstk '1)
(jmp member)
102
(cabne a1 'eq 103)
(mov (& 0) a1)
(adjstk '1)
(jmp memq)
103
(mov a1 a3)
(mov (& 0) a1)
(adjstk '1)
(bra #:sets:member2)
))
(loader'((entry #:sets:member2 subr3)
(push a3)
(push a2)
(push a1)
(btcons a2 101)
(mov nil a1)
(adjstk '3)
(return)
101
(push (@ 105))
(push a3)
(push a1)
(push (car a2))
(mov '3 a4)
(jmp funcall)
105
(eval ())
(btnil a1 103)
(mov (& 1) a1)
(adjstk '3)
(return)
103
(mov (& 1) a2)
(mov (& 2) a3)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:sets:member2)
))
(loader'((entry #:sets:delete subr3)
(push a1)
(mov a3 a1)
(cabne a1 'equal 102)
(mov (& 0) a1)
(adjstk '1)
(jmp delete)
102
(cabne a1 'eq 103)
(mov (& 0) a1)
(adjstk '1)
(jmp delq)
103
(mov a1 a3)
(mov (& 0) a1)
(adjstk '1)
(bra #:sets:delete2)
))
(loader'((entry #:sets:delete2 subr3)
(push a3)
(push a2)
(push a1)
(btcons a2 101)
(mov a2 a1)
(adjstk '3)
(return)
101
(push (@ 105))
(push a3)
(push a1)
(push (car a2))
(mov '3 a4)
(jmp funcall)
105
(eval ())
(btnil a1 103)
(mov (& 1) a2)
(mov (& 2) a3)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:sets:delete2)
103
(mov (& 1) a2)
(mov (& 2) a3)
(mov (cdr a2) a2)
(mov (& 0) a1)
(call #:sets:delete2)
(mov (& 1) a4)
(mov a1 (cdr a4))
(mov a4 a1)
(adjstk '3)
(return)
))
(loader'((fentry power-set subr1)
(entry power-set subr1)
(push a1)
(bfnil a1 101)
(mov nil a2)
(mov nil a1)
(adjstk '1)
(jmp cons)
101
(mov (cdr a1) a1)
(jcall power-set)
(push (@ 103))
(push a1)
(push a1)
(push nil)
104
(bfcons (& 1) 105)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 5) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 104)
105
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp nconc)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry cartesian-product subr2)
(entry cartesian-product subr2)
(push a2)
(push a1)
(btnil a1 103)
(bfnil a2 101)
103
(mov nil a1)
(adjstk '2)
(return)
101
(bfnil (cdr a1) 104)
(push a2)
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 3) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 106)
107
(mov (& 0) a1)
(adjstk '4)
(jmp nreverse)
104
(push (@ 108))
(mov nil a2)
(mov (car a1) a1)
(jcall cons)
(mov (& 2) a2)
(jcall cartesian-product)
(push a1)
(mov (& 2) a1)
(mov (& 3) a2)
(mov (cdr a1) a1)
(jcall cartesian-product)
(push a1)
(mov '2 a4)
(jmp nconc)
108
(eval ())
(adjstk '2)
(return)
))
(loader '((end)))
