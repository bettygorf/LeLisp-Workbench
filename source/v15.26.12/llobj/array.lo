(loader '((title |array.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'array)))
(loader'((fentry makearray nsubr)
(entry makearray nsubr)
(cnbge a4 '1 101)
(mov 'makearray a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push (cvalq #:system:larg))
(mov a1 (cvalq #:system:larg))
(push '1)
(push '(#:system:larg))
(push (@ makearray))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil a1 102)
(mov nil a2)
(mov (& 7) a1)
(jcall makevector)
(push a1)
(mov (& 8) a1)
(jcall |1-|)
(push '0)
(push a1)
(jcall numberp)
(bfnil a1 106)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
106
(push (@ 108))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
108
(eval ())
(bfnil a1 107)
(push (@ 109))
(push 'makearray)
(push (cvalq #:system:larg))
(mov '2 a4)
(jmp apply)
109
(eval ())
(hpmovx a1 (& 2) (& 1))
(push (@ 110))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
110
(eval ())
(mov a1 (& 1))
(bra 106)
107
(adjstk '2)
(mov (& 0) a1)
(adjstk '1)
(bra 103)
102
(mov (& 7) a1)
103
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:larg))
(adjstk '8)
(return)
))
(loader'((fentry aref dmsubr)
(entry aref dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push (cvalq #:system:larg))
(mov a4 (cvalq #:system:larg))
(push '1)
(push '(#:system:larg))
(push (@ aref))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil a4 101)
(bra 102)
101
(btcons a4 103)
(mov a4 a3)
(mov 'errwna a2)
(mov 'aref a1)
(jcall error)
(bra 102)
103
(push (@ 105))
(push 'vref)
(push (@ 106))
(push 'aref)
(push a1)
(mov a4 a1)
(jcall reverse)
(mov (cdr a1) a1)
(jcall nreverse)
(push a1)
(mov '3 a4)
(jmp mcons)
106
(eval ())
(push a1)
(mov (cvalq #:system:larg) a1)
(jcall last)
(push (car a1))
(mov '3 a4)
(jmp list)
105
(eval ())
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:larg))
(adjstk '7)
(return)
))
(loader'((fentry aset dmsubr)
(entry aset dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push (cvalq #:system:larg))
(mov a4 (cvalq #:system:larg))
(push '1)
(push '(#:system:larg))
(push (@ aset))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btcons a4 101)
(mov a4 a3)
(mov 'errwna a2)
(mov 'aset a1)
(jcall error)
(bra 102)
101
(bfcons (cdr a4) 102)
(push (@ 105))
(push 'vset)
(push (@ 106))
(push 'aref)
(push a1)
(mov a4 a1)
(jcall reverse)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(jcall nreverse)
(push a1)
(mov '3 a4)
(jmp mcons)
106
(eval ())
(push a1)
(mov (cvalq #:system:larg) a1)
(jcall reverse)
(mov (cdr a1) a3)
(push (car a3))
(mov (cvalq #:system:larg) a1)
(jcall last)
(push (car a1))
(mov '4 a4)
(jmp list)
105
(eval ())
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:larg))
(adjstk '7)
(return)
))
(loader '((end)))
