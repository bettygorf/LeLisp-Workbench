(loader '((title |virgraph.lo|)))
(setq #:sys-package:colon 'display)
(loader'((fentry graph-env-font nsubr)
(entry graph-env-font nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-font a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-font a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '0 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(bffix (& 1) 108)
(cnblt (& 1) '0 108)
(jcall font-max)
(cnble (& 1) a1 107)
108
(mov (& 1) a3)
(mov '#:display:errnotafont a2)
(mov 'graph-env-font a1)
(jcall error)
107
(push (@ 109))
(push 'current-font)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
109
(eval ())
(hpmovx (& 1) (& 3) '0)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-font nsubr)
(entry current-font nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-font a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-font a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '0 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(bffix (& 0) 110)
(cnblt (& 0) '0 110)
(jcall font-max)
(cnble (& 0) a1 109)
110
(mov (& 0) a3)
(mov '#:display:errnotafont a2)
(mov 'current-font a1)
(jcall error)
109
(push (@ 111))
(push 'current-font)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
111
(eval ())
(hpmovx (& 0) (& 2) '0)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-font nsubr)
(entry #:display:graph-env-font nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-font a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-font nsubr)
(entry #:display:current-font nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-font a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-mode nsubr)
(entry graph-env-mode nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-mode a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-mode a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '3 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(bffix (& 1) 108)
(cnblt (& 1) '0 108)
(cnble (& 1) '16 107)
108
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-mode a2)
(mov 'graph-env-mode a1)
(jcall error)
107
(push (@ 109))
(push 'current-mode)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
109
(eval ())
(hpmovx (& 1) (& 3) '3)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-mode nsubr)
(entry current-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-mode a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-mode a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '3 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(bffix (& 0) 110)
(cnblt (& 0) '0 110)
(cnble (& 0) '16 109)
110
(mov (& 0) a3)
(mov '#:display:err-not-a-valid-mode a2)
(mov 'current-mode a1)
(jcall error)
109
(push (@ 111))
(push 'current-mode)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
111
(eval ())
(hpmovx (& 0) (& 2) '3)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-mode nsubr)
(entry #:display:graph-env-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-mode a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-mode nsubr)
(entry #:display:current-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-mode a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-arc-mode nsubr)
(entry graph-env-arc-mode nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-arc-mode a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-arc-mode a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '17 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'graph-env-arc-mode a1)
(jcall error)
107
(push (@ 108))
(push 'current-arc-mode)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
108
(eval ())
(hpmovx (& 1) (& 3) '17)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-arc-mode nsubr)
(entry current-arc-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-arc-mode a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-arc-mode a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '17 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'current-arc-mode a1)
(jcall error)
109
(push (@ 110))
(push 'current-arc-mode)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
110
(eval ())
(hpmovx (& 0) (& 2) '17)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-arc-mode nsubr)
(entry #:display:graph-env-arc-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-arc-mode a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-arc-mode nsubr)
(entry #:display:current-arc-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-arc-mode a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-pattern nsubr)
(entry graph-env-pattern nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-pattern a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-pattern a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '2 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(bffix (& 1) 108)
(cnblt (& 1) '0 108)
(jcall pattern-max)
(cnble (& 1) a1 107)
108
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-pattern a2)
(mov 'graph-env-pattern a1)
(jcall error)
107
(push (@ 109))
(push 'current-pattern)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
109
(eval ())
(hpmovx (& 1) (& 3) '2)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-pattern nsubr)
(entry current-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-pattern a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-pattern a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '2 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(bffix (& 0) 110)
(cnblt (& 0) '0 110)
(jcall pattern-max)
(cnble (& 0) a1 109)
110
(mov (& 0) a3)
(mov '#:display:err-not-a-valid-pattern a2)
(mov 'current-pattern a1)
(jcall error)
109
(push (@ 111))
(push 'current-pattern)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
111
(eval ())
(hpmovx (& 0) (& 2) '2)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-pattern nsubr)
(entry #:display:graph-env-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-pattern a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-pattern nsubr)
(entry #:display:current-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-pattern a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-stipple nsubr)
(entry graph-env-stipple nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-stipple a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-stipple a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '15 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(btnil (& 1) 107)
(mov '#:bitmap:stipple a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 107)
(mov (& 1) a3)
(mov '#:display:errnotastipple a2)
(mov 'graph-env-stipple a1)
(jcall error)
107
(push (@ 108))
(push 'current-stipple)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
108
(eval ())
(hpmovx (& 1) (& 3) '15)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-stipple nsubr)
(entry current-stipple nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-stipple a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-stipple a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '15 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(btnil (& 0) 109)
(mov '#:bitmap:stipple a2)
(mov (& 0) a1)
(jcall typep)
(bfnil a1 109)
(mov (& 0) a3)
(mov '#:display:errnotastipple a2)
(mov 'current-stipple a1)
(jcall error)
109
(push (@ 110))
(push 'current-stipple)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
110
(eval ())
(hpmovx (& 0) (& 2) '15)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-stipple nsubr)
(entry #:display:graph-env-stipple nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-stipple a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-stipple nsubr)
(entry #:display:current-stipple nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-stipple a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-fill-mode nsubr)
(entry graph-env-fill-mode nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-fill-mode a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-fill-mode a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '16 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(mov (& 1) a2)
(cabeq a2 'foreground 107)
(cabeq a2 'transparentstipple 107)
(cabeq a2 'opaquestipple 107)
(cabeq a2 'pattern 107)
(mov a2 a3)
(mov '#:display:errnotafillmod a2)
(mov 'graph-env-fill-mode a1)
(jcall error)
107
(push (@ 108))
(push 'current-fill-mode)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
108
(eval ())
(hpmovx (& 1) (& 3) '16)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-fill-mode nsubr)
(entry current-fill-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-fill-mode a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-fill-mode a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '16 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(mov (& 0) a3)
(cabeq a3 'foreground 109)
(cabeq a3 'transparentstipple 109)
(cabeq a3 'opaquestipple 109)
(cabeq a3 'pattern 109)
(mov '#:display:errnotafillmod a2)
(mov 'current-fill-mode a1)
(jcall error)
109
(push (@ 110))
(push 'current-fill-mode)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
110
(eval ())
(hpmovx (& 0) (& 2) '16)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-fill-mode nsubr)
(entry #:display:graph-env-fill-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-fill-mode a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-fill-mode nsubr)
(entry #:display:current-fill-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-fill-mode a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-line-style nsubr)
(entry graph-env-line-style nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-line-style a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-line-style a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '1 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(bffix (& 1) 108)
(cnblt (& 1) '0 108)
(jcall line-style-max)
(cnble (& 1) a1 107)
108
(mov (& 1) a3)
(mov 'erroob a2)
(mov 'graph-env-line-style a1)
(jcall error)
107
(push (@ 109))
(push 'current-line-style)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
109
(eval ())
(hpmovx (& 1) (& 3) '1)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-line-style nsubr)
(entry current-line-style nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-line-style a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-line-style a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '1 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(bffix (& 0) 110)
(cnblt (& 0) '0 110)
(jcall line-style-max)
(cnble (& 0) a1 109)
110
(mov (& 0) a3)
(mov 'erroob a2)
(mov 'current-line-style a1)
(jcall error)
109
(push (@ 111))
(push 'current-line-style)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
111
(eval ())
(hpmovx (& 0) (& 2) '1)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-line-style nsubr)
(entry #:display:graph-env-line-style nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-line-style a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-line-style nsubr)
(entry #:display:current-line-style nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-line-style a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-foreground nsubr)
(entry graph-env-foreground nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-foreground a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-foreground a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '4 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(mov 'color a2)
(mov (& 1) a1)
(jcall typep)
(btnil a1 108)
(hpxmov (& 1) '5 a4)
(bfnil a4 107)
108
(mov (& 1) a3)
(mov '#:display:errnotacolor a2)
(mov 'graph-env-foreground a1)
(jcall error)
107
(push (@ 109))
(push 'current-foreground)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
109
(eval ())
(hpmovx (& 1) (& 3) '4)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-foreground nsubr)
(entry current-foreground nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-foreground a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-foreground a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '4 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(mov 'color a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 110)
(hpxmov (& 0) '5 a4)
(bfnil a4 109)
110
(mov (& 0) a3)
(mov '#:display:errnotacolor a2)
(mov 'current-foreground a1)
(jcall error)
109
(push (@ 111))
(push 'current-foreground)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
111
(eval ())
(hpmovx (& 0) (& 2) '4)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-foreground nsubr)
(entry #:display:graph-env-foreground nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-foreground a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-foreground nsubr)
(entry #:display:current-foreground nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-foreground a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-background nsubr)
(entry graph-env-background nsubr)
(cnbge a4 '1 101)
(mov 'graph-env-background a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'graph-env a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 1) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-background a1)
(jcall error)
103
(hpxmov (& 1) '11 a4)
(push nil)
(push a4)
(bfnil (& 2) 104)
(hpxmov (& 3) '5 a1)
(adjstk '4)
(return)
104
(mov (& 2) a3)
(mov (car a3) (& 1))
(mov 'color a2)
(mov (& 1) a1)
(jcall typep)
(btnil a1 108)
(hpxmov (& 1) '5 a4)
(bfnil a4 107)
108
(mov (& 1) a3)
(mov '#:display:errnotacolor a2)
(mov 'graph-env-background a1)
(jcall error)
107
(push (@ 109))
(push 'current-background)
(push (& 2))
(push (& 6))
(push (& 5))
(mov '4 a4)
(jmp send)
109
(eval ())
(hpmovx (& 1) (& 3) '5)
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((fentry current-background nsubr)
(entry current-background nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 102)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-background a1)
(jcall error)
102
(bfnil (& 3) 104)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-background a1)
(jcall error)
104
(hpxmov (& 3) '9 a4)
(mov a4 (& 2))
(hpxmov a4 '5 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 107)
(cabne a4 (& 0) 105)
107
(mov a4 a1)
(bra 106)
105
(mov 'color a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 110)
(hpxmov (& 0) '5 a4)
(bfnil a4 109)
110
(mov (& 0) a3)
(mov '#:display:errnotacolor a2)
(mov 'current-background a1)
(jcall error)
109
(push (@ 111))
(push 'current-background)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
111
(eval ())
(hpmovx (& 0) (& 2) '5)
(mov (& 0) a1)
106
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-background nsubr)
(entry #:display:graph-env-background nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-background a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-background nsubr)
(entry #:display:current-background nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-background a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry clear-graph-env subr0)
(entry clear-graph-env subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'clear-graph-env a1)
(jcall error)
102
(push (@ 103))
(push 'clear-graph-env)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(mov '3 a4)
(jmp send)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:clear-graph-env nsubr)
(entry #:display:clear-graph-env nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'clear-graph-env a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry font-height subr0)
(entry font-height subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'font-height a1)
(jcall error)
102
(push (@ 103))
(push 'font-height)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(mov '3 a4)
(jmp send)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:font-height nsubr)
(entry #:display:font-height nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'font-height a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry font-ascent subr0)
(entry font-ascent subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'font-ascent a1)
(jcall error)
102
(push (@ 103))
(push 'font-ascent)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(mov '3 a4)
(jmp send)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:font-ascent nsubr)
(entry #:display:font-ascent nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'font-ascent a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry font-max subr0)
(entry font-max subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'font-max a1)
(jcall error)
102
(push (@ 103))
(push 'font-max)
(push (& 2))
(mov '2 a4)
(jmp send)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:font-max nsubr)
(entry #:display:font-max nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'font-max a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry line-style-max subr0)
(entry line-style-max subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'line-style-max a1)
(jcall error)
102
(push (@ 103))
(push 'line-style-max)
(push (& 2))
(mov '2 a4)
(jmp send)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:line-style-max nsubr)
(entry #:display:line-style-max nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'line-style-max a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry pattern-max subr0)
(entry pattern-max subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'pattern-max a1)
(jcall error)
102
(push (@ 103))
(push 'pattern-max)
(push (& 2))
(mov '2 a4)
(jmp send)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:pattern-max nsubr)
(entry #:display:pattern-max nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'pattern-max a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry cursor-max subr0)
(entry cursor-max subr0)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'cursor-max a1)
(jcall error)
102
(push (@ 103))
(push 'cursor-max)
(push (& 2))
(mov '2 a4)
(jmp send)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:display:cursor-max nsubr)
(entry #:display:cursor-max nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'cursor-max a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry width-substring subr3)
(entry width-substring subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'width-substring a1)
(jcall error)
102
(push (@ 103))
(push 'width-substring)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:width-substring nsubr)
(entry #:display:width-substring nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'width-substring a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry height-substring subr3)
(entry height-substring subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'height-substring a1)
(jcall error)
102
(push (@ 103))
(push 'height-substring)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:height-substring nsubr)
(entry #:display:height-substring nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'height-substring a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry x-base-substring subr3)
(entry x-base-substring subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'x-base-substring a1)
(jcall error)
102
(push (@ 103))
(push 'x-base-substring)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:x-base-substring nsubr)
(entry #:display:x-base-substring nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'x-base-substring a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry y-base-substring subr3)
(entry y-base-substring subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'y-base-substring a1)
(jcall error)
102
(push (@ 103))
(push 'y-base-substring)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:y-base-substring nsubr)
(entry #:display:y-base-substring nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'y-base-substring a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry x-inc-substring subr3)
(entry x-inc-substring subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'x-inc-substring a1)
(jcall error)
102
(push (@ 103))
(push 'x-inc-substring)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:x-inc-substring nsubr)
(entry #:display:x-inc-substring nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'x-inc-substring a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry y-inc-substring subr3)
(entry y-inc-substring subr3)
(push a3)
(push a2)
(push a1)
(push (cvalq #:display:current-display))
(bfnil (& 0) 102)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'y-inc-substring a1)
(jcall error)
102
(push (@ 103))
(push 'y-inc-substring)
(push (& 2))
(hpxmov (& 3) '9 a4)
(push a4)
(push (& 5))
(push (& 7))
(push (& 9))
(mov '6 a4)
(jmp send)
103
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:y-inc-substring nsubr)
(entry #:display:y-inc-substring nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'y-inc-substring a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:load-font nsubr)
(entry #:display:load-font nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'load-font a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:get-font-names nsubr)
(entry #:display:get-font-names nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'get-font-names a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:get-font-info nsubr)
(entry #:display:get-font-info nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'get-font-info a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-set-clip nsubr)
(entry #:display:graph-env-set-clip nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-set-clip a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-set-clips nsubr)
(entry #:display:graph-env-set-clips nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-set-clips a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-change-values nsubr)
(entry #:display:graph-env-change-values nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-change-values a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:graph-env-subwindow-mode nsubr)
(entry #:display:graph-env-subwindow-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'graph-env-subwindow-mode a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:make-graph-env nsubr)
(entry #:display:make-graph-env nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'make-graph-env a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:kill-graph-env nsubr)
(entry #:display:kill-graph-env nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'kill-graph-env a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:kill-stipple nsubr)
(entry #:display:kill-stipple nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'kill-stipple a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:create-stipple nsubr)
(entry #:display:create-stipple nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'create-stipple a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:make-line-style nsubr)
(entry #:display:make-line-style nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'make-line-style a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:make-pattern nsubr)
(entry #:display:make-pattern nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'make-pattern a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:make-cursor nsubr)
(entry #:display:make-cursor nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'make-cursor a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:make-named-cursor nsubr)
(entry #:display:make-named-cursor nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'make-named-cursor a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:cursor-name nsubr)
(entry #:display:cursor-name nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'cursor-name a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:move-cursor nsubr)
(entry #:display:move-cursor nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'move-cursor a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-clip nsubr)
(entry #:display:current-clip nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-clip a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:current-cursor nsubr)
(entry #:display:current-cursor nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'current-cursor a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(defvar #:clip:x 0)
(defvar #:clip:y 0)
(defvar #:clip:w 0)
(defvar #:clip:h 0)
(#:messages:put-message '#:display:err-current-clip 'french '"Cette fonction prend 0 ou 4 arguments" 'defmessage)
(#:messages:put-message '#:display:err-current-clip 'english '"This function takes 0 or 4 arguments" 'defmessage)
'#:display:err-current-clip
(loader'((fentry current-clip nsubr)
(entry current-clip nsubr)
(push a4)
(bfnil (cvalq #:display:current-display) 102)
(mov (cvalq #:display:current-display) a3)
(mov '#:display:no-current-display a2)
(mov 'current-clip a1)
(jcall error)
102
(mov (& 0) a1)
(cabne a1 '0 104)
(hpxmov (cvalq #:display:current-display) '9 a4)
(push a4)
(hpxmov a4 '6 a3)
(mov a3 (cvalq #:clip:x))
(hpxmov a4 '7 a2)
(mov a2 (cvalq #:clip:y))
(hpxmov a4 '8 a4)
(mov a4 (cvalq #:clip:w))
(hpxmov (& 0) '9 a4)
(mov a4 (cvalq #:clip:h))
(adjstk '1)
(bra 103)
104
(cabne a1 '4 105)
(hpxmov (cvalq #:display:current-display) '9 a4)
(push a4)
(mov (& 1) a4)
(plus '1 a4)
(xspmov a4 a3)
(mov (& 1) a4)
(plus '0 a4)
(xspmov a4 a4)
(push a4)
(mov (& 2) a4)
(plus '0 a4)
(xspmov a4 a2)
(mov (& 2) a4)
(plus '-1 a4)
(xspmov a4 a4)
(push a4)
(push a2)
(push a3)
(btfix a3 107)
(mov 'errnia a2)
(mov 'current-clip a1)
(jcall error)
107
(btfix (& 3) 109)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'current-clip a1)
(jcall error)
109
(btfix (& 1) 111)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'current-clip a1)
(jcall error)
111
(btfix (& 2) 113)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'current-clip a1)
(jcall error)
113
(hpmovx (& 0) (& 4) '6)
(hpmovx (& 3) (& 4) '7)
(hpmovx (& 1) (& 4) '8)
(hpmovx (& 2) (& 4) '9)
(push (@ 114))
(push 'current-clip)
(push (cvalq #:display:current-display))
(push (& 7))
(push (& 4))
(push (& 8))
(push (& 7))
(push (& 9))
(mov '7 a4)
(jmp send)
114
(eval ())
(adjstk '5)
(bra 103)
105
(mov (& 0) a3)
(mov '#:display:err-current-clip a2)
(mov 'current-clip a1)
(jcall error)
103
(mov nil a1)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry load-font subr1)
(entry load-font subr1)
(push a1)
(btstrg a1 102)
(mov a1 a3)
(mov 'errnsa a2)
(mov 'load-font a1)
(jcall error)
102
(push (cvalq #:display:current-display))
(push nil)
(bfnil (& 1) 104)
(mov (& 1) a3)
(mov '#:display:no-current-display a2)
(mov 'load-font a1)
(jcall error)
104
(push (@ 106))
(push 'get-font-names)
(push (& 3))
(push '1)
(push (& 6))
(mov '4 a4)
(jmp send)
106
(eval ())
(mov (car a1) a4)
(bfnil a4 105)
(mov (& 2) a4)
105
(mov a4 (& 2))
(hpxmov (& 1) '18 a2)
(mov a4 a1)
(jcall cassoc)
(bfnil a1 107)
(push (@ 108))
(push 'load-font)
(push (& 3))
(push (& 5))
(mov '3 a4)
(jmp send)
108
(eval ())
(mov a1 (& 0))
(hpxmov (& 1) '18 a1)
(push a1)
(mov (& 1) a2)
(mov (& 3) a1)
(jcall cons)
(mov a1 a2)
(pop a1)
(jcall nconc1)
(hpmovx a1 (& 1) '18)
(mov (& 0) a1)
107
(adjstk '3)
(return)
))
(loader'((fentry font-name subr1)
(entry font-name subr1)
(push a1)
(bffix a1 103)
(cnblt a1 '0 103)
(push a1)
(jcall font-max)
(pop a4)
(cnble a4 a1 102)
103
(mov (& 0) a3)
(mov '#:display:errnotafont a2)
(mov 'font-name a1)
(jcall error)
102
(push (cvalq #:display:current-display))
(push nil)
(bfnil (& 1) 105)
(mov (& 1) a3)
(mov '#:display:no-current-display a2)
(mov 'font-name a1)
(jcall error)
105
(hpxmov (& 1) '18 a2)
(mov (& 2) a1)
(jcall rassoc)
(mov a1 (& 0))
(bfnil a1 107)
(mov (& 2) a3)
(mov '#:display:errnotafont a2)
(mov 'font-name a1)
(jcall error)
107
(mov (& 0) a1)
(mov (car a1) a1)
(adjstk '3)
(return)
))
(loader'((fentry make-pattern subr1)
(entry make-pattern subr1)
(push a1)
(mov 'bitmap a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotabitmap a2)
(mov 'make-pattern a1)
(jcall error)
102
(hpxmov (& 0) '3 a4)
(push nil)
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'make-pattern a1)
(jcall error)
104
(push (@ 105))
(push 'make-pattern)
(push (& 2))
(push (& 5))
(mov '3 a4)
(jmp send)
105
(eval ())
(mov a1 (& 1))
(hpxmov (& 0) '19 a1)
(mov (& 2) a2)
(jcall nconc1)
(hpmovx a1 (& 0) '19)
(mov (& 1) a1)
(adjstk '3)
(return)
))
(loader'((fentry create-stipple subr3)
(entry create-stipple subr3)
(push a3)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'create-stipple a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'create-stipple a1)
(jcall error)
104
(btstrg (& 2) 106)
(mov (& 2) a3)
(mov 'errnsa a2)
(mov 'create-stipple a1)
(jcall error)
106
(push (cvalq #:display:current-display))
(bfnil (& 0) 108)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'create-stipple a1)
(jcall error)
108
(jcall #:bitmap:stipple:make)
(push a1)
(hpmovx (& 2) a1 '0)
(hpmovx (& 3) a1 '1)
(hpmovx (& 1) a1 '3)
(hpmovx (& 4) a1 '4)
(push (@ 109))
(push 'create-stipple)
(push (& 3))
(push a1)
(push (& 8))
(mov '4 a4)
(jmp send)
109
(eval ())
(hpxmov (& 1) '26 a1)
(mov (& 0) a2)
(jcall nconc1)
(hpmovx a1 (& 1) '26)
(mov (& 0) a1)
(adjstk '5)
(return)
))
(#:messages:put-message '#:display:errnotfixorstring 'french '"ni un entier, ni une chaine" 'defmessage)
(#:messages:put-message '#:display:errnotfixorstring 'english '"not a fix or a string" 'defmessage)
'#:display:errnotfixorstring
(defvar #:stipple:width 16)
(defvar #:stipple:height 16)
(loader'((fentry make-stipple-bitmap subr1)
(entry make-stipple-bitmap subr1)
(push a1)
(jcall type-of)
(cabne a1 'bitmap 103)
(hpxmov (& 0) '0 a4)
(cnbne a4 '16 103)
(hpxmov (& 0) '1 a4)
(cnbeq a4 '16 102)
103
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'make-stipple-bitmap a1)
(jcall error)
102
(push (@ 104))
(push 'bits)
(push (& 2))
(mov '2 a4)
(jmp send)
104
(eval ())
(push '"")
(push a1)
(hgsize a1 a4)
(diff '1 a4)
(push '0)
(push a4)
(mov a4 a1)
(jcall numberp)
(bfnil a1 107)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
107
(push (@ 109))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
109
(eval ())
(bfnil a1 108)
(push (@ 110))
(push (& 4))
(hpxmov (& 4) (& 3) a4)
(push a4)
(mov '2 a4)
(jmp catenate)
110
(eval ())
(mov a1 (& 3))
(push (@ 111))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
111
(eval ())
(mov a1 (& 1))
(bra 107)
108
(adjstk '2)
(mov (& 1) a3)
(mov '16 a2)
(mov '16 a1)
(adjstk '3)
(jmp create-stipple)
))
(loader'((fentry make-stipple subr1)
(entry make-stipple subr1)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errbpa a2)
(mov 'make-stipple a1)
(jcall error)
102
(mov (& 0) a4)
(lshift '-8 a4)
(land '255 a4)
(push a4)
(mov (& 1) a3)
(land '255 a3)
(push a3)
(mov (cvalq #:stipple:width) a2)
(quo '16 a2)
(push a2)
(push (cvalq #:stipple:height))
(times '2 a2)
(times (& 0) a2)
(push a2)
(mov '0 a2)
(pop a1)
(jcall makestring)
(push a1)
(push '0)
(push '0)
(push '0)
103
(cnbge (& 1) (& 4) 104)
105
(cnbge (& 2) (& 5) 106)
(hbmovx (& 7) (& 3) (& 0))
(mov (& 0) a4)
(plus '1 a4)
(mov a4 (& 0))
(hbmovx (& 6) (& 3) a4)
(plus '1 a4)
(mov a4 (& 0))
(mov (& 2) a3)
(plus '1 a3)
(mov a3 (& 2))
(bra 105)
106
(mov '0 (& 2))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 103)
104
(mov (& 3) a4)
(mov 'bitvector (cdr a4))
(mov a4 a3)
(mov (cvalq #:stipple:height) a2)
(mov (cvalq #:stipple:width) a1)
(adjstk '9)
(jmp create-stipple)
))
(loader'((fentry make-stipple-2 subr2)
(entry make-stipple-2 subr2)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errbpa a2)
(mov 'make-stipple a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errbpa a2)
(mov 'make-stipple a1)
(jcall error)
104
(mov (cvalq #:stipple:width) a4)
(quo '4 a4)
(push a4)
(push (cvalq #:stipple:height))
(times (& 0) a4)
(mov '0 a2)
(mov a4 a1)
(jcall makestring)
(push a1)
(push (& 2))
(mov 'bitvector (cdr a1))
(mov (& 4) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 a1 '0)
(mov (& 4) a4)
(land '255 a4)
(hbmovx a4 a1 '1)
(mov (& 5) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 a1 '2)
(mov (& 5) a4)
(land '255 a4)
(hbmovx a4 a1 '3)
105
(mov (& 2) a4)
(times (& 3) a4)
(cnbge (& 0) a4 106)
(push (@ 107))
(push (& 2))
(push (& 2))
(push (& 4))
(push '0)
(push (& 8))
(mov '5 a4)
(jmp bltstring)
107
(eval ())
(mov (& 3) a4)
(plus (& 0) a4)
(mov a4 (& 0))
(bra 105)
106
(mov (& 1) a3)
(mov (cvalq #:stipple:height) a2)
(mov (cvalq #:stipple:width) a1)
(adjstk '6)
(jmp create-stipple)
))
(loader'((fentry create-stipple16 nsubr)
(entry create-stipple16 nsubr)
(jcall #:llcp:nlist)
(push a1)
(jcall length)
(cabne a1 '1 102)
(mov (& 0) a4)
(bfstrg (car a4) 103)
(mov (car a4) a3)
(mov '16 a2)
(mov '16 a1)
(adjstk '1)
(jmp create-stipple)
103
(btfix (car a4) 105)
(mov (car a4) a3)
(mov '#:display:errnotfixorstring a2)
(mov '#:display:create-stipple16 a1)
(adjstk '1)
(jmp error)
105
(mov '0 a2)
(mov '32 a1)
(jcall makestring)
(push '4)
(push a1)
(mov (& 2) a4)
(mov (car a4) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 a1 '0)
(hbxmov a1 '0 a4)
(hbmovx a4 a1 '1)
(mov (& 2) a4)
(mov (car a4) a4)
(land '255 a4)
(hbmovx a4 a1 '2)
(hbxmov a1 '2 a4)
(hbmovx a4 a1 '3)
107
(cnbge (& 1) '32 108)
(push (@ 109))
(push (& 1))
(push (& 3))
(push (& 3))
(push '0)
(push '4)
(mov '5 a4)
(jmp bltstring)
109
(eval ())
(mov (& 1) a4)
(plus '4 a4)
(mov a4 (& 1))
(bra 107)
108
(mov (& 0) a3)
(mov '16 a2)
(mov '16 a1)
(adjstk '3)
(jmp create-stipple)
102
(cabne a1 '2 110)
(mov '0 a2)
(mov '32 a1)
(jcall makestring)
(push a1)
(mov (& 1) a4)
(push (car a4))
(mov (cdr a4) a3)
(push (car a3))
(push '8)
(btfix (& 2) 112)
(mov (& 2) a3)
(mov 'errnia a2)
(mov '#:display:create-stipple a1)
(jcall error)
112
(btfix (& 1) 114)
(mov (& 1) a3)
(mov 'errnia a2)
(mov '#:display:create-stipple a1)
(jcall error)
114
(mov (& 2) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 (& 3) '0)
(hbxmov (& 3) '0 a4)
(hbmovx a4 (& 3) '1)
(mov (& 2) a4)
(land '255 a4)
(hbmovx a4 (& 3) '2)
(hbxmov (& 3) '2 a4)
(hbmovx a4 (& 3) '3)
(mov (& 1) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 (& 3) '4)
(hbxmov (& 3) '4 a4)
(hbmovx a4 (& 3) '5)
(mov (& 1) a4)
(land '255 a4)
(hbmovx a4 (& 3) '6)
(hbxmov (& 3) '6 a4)
(hbmovx a4 (& 3) '7)
115
(cnbge (& 0) '32 116)
(push (@ 117))
(push (& 4))
(push (& 2))
(push (& 6))
(push '0)
(push '8)
(mov '5 a4)
(jmp bltstring)
117
(eval ())
(mov '8 a4)
(plus (& 0) a4)
(mov a4 (& 0))
(bra 115)
116
(mov (& 3) a3)
(mov '16 a2)
(mov '16 a1)
(adjstk '5)
(jmp create-stipple)
110
(cabne a1 '4 118)
(mov '0 a2)
(mov '32 a1)
(jcall makestring)
(push a1)
(mov (& 1) a4)
(push (car a4))
(mov (cdr a4) a3)
(push (car a3))
(mov (cdr a4) a2)
(mov (cdr a2) a2)
(push (car a2))
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(btfix (& 3) 120)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'create-stipple16 a1)
(jcall error)
120
(btfix (& 2) 122)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'create-stipple16 a1)
(jcall error)
122
(btfix (& 1) 124)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'create-stipple16 a1)
(jcall error)
124
(btfix (& 0) 126)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'create-stipple16 a1)
(jcall error)
126
(mov (& 3) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 (& 4) '0)
(hbxmov (& 4) '0 a4)
(hbmovx a4 (& 4) '1)
(mov (& 3) a4)
(land '255 a4)
(hbmovx a4 (& 4) '2)
(hbxmov (& 4) '2 a4)
(hbmovx a4 (& 4) '3)
(mov (& 2) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 (& 4) '4)
(hbxmov (& 4) '4 a4)
(hbmovx a4 (& 4) '5)
(mov (& 2) a4)
(land '255 a4)
(hbmovx a4 (& 4) '6)
(hbxmov (& 4) '6 a4)
(hbmovx a4 (& 4) '7)
(mov (& 1) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 (& 4) '8)
(hbxmov (& 4) '8 a4)
(hbmovx a4 (& 4) '9)
(mov (& 1) a4)
(land '255 a4)
(hbmovx a4 (& 4) '10)
(hbxmov (& 4) '10 a4)
(hbmovx a4 (& 4) '11)
(mov (& 0) a4)
(lshift '-8 a4)
(land '255 a4)
(hbmovx a4 (& 4) '12)
(hbxmov (& 4) '12 a4)
(hbmovx a4 (& 4) '13)
(mov (& 0) a4)
(land '255 a4)
(hbmovx a4 (& 4) '14)
(hbxmov (& 4) '14 a4)
(hbmovx a4 (& 4) '15)
(push (@ 127))
(push (& 5))
(push '16)
(push (& 7))
(push '0)
(push '16)
(mov '5 a4)
(jmp bltstring)
127
(eval ())
(mov (& 4) a3)
(mov '16 a2)
(mov '16 a1)
(adjstk '6)
(jmp create-stipple)
118
(mov (& 0) a1)
(jcall length)
(mov a1 a3)
(mov 'errwna a2)
(mov '#:display:create-stipple16 a1)
(adjstk '1)
(jmp error)
))
(defvar #:display:space "M")
(loader'((fentry width-space subr0)
(entry width-space subr0)
(mov '1 a3)
(mov '0 a2)
(mov (cvalq #:display:space) a1)
(jmp width-substring)
))
(loader'((fentry height-space subr0)
(entry height-space subr0)
(jmp font-height)
))
(loader'((fentry x-base-space subr0)
(entry x-base-space subr0)
(mov '1 a3)
(mov '0 a2)
(mov (cvalq #:display:space) a1)
(jmp x-base-substring)
))
(loader'((fentry y-base-space subr0)
(entry y-base-space subr0)
(jmp font-ascent)
))
(loader'((fentry make-cursor nsubr)
(entry make-cursor nsubr)
(cnbeq a4 '4 101)
(mov 'make-cursor a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov 'bitmap a2)
(mov (& 3) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 3) a3)
(mov '#:display:errnotabitmap a2)
(mov 'make-cursor a1)
(jcall error)
103
(mov 'bitmap a2)
(mov (& 2) a1)
(jcall typep)
(bfnil a1 105)
(mov (& 2) a3)
(mov '#:display:errnotabitmap a2)
(mov 'make-cursor a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'make-cursor a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'make-cursor a1)
(jcall error)
109
(hpxmov (& 3) '3 a4)
(hpxmov (& 2) '3 a3)
(cabeq a4 a3 111)
(push (@ 112))
(push a4)
(push a3)
(mov '2 a4)
(jmp list)
112
(eval ())
(mov a1 a3)
(mov '#:display:err-diff-display a2)
(mov 'make-cursor a1)
(jcall error)
111
(cnblt (& 1) '0 115)
(hpxmov (& 2) '0 a4)
(cnblt (& 1) a4 114)
115
(mov (& 1) a3)
(mov 'erroob a2)
(mov 'make-cursor a1)
(jcall error)
114
(cnblt (& 0) '0 118)
(hpxmov (& 2) '1 a4)
(cnblt (& 0) a4 117)
118
(mov (& 0) a3)
(mov 'erroob a2)
(mov 'make-cursor a1)
(jcall error)
117
(hpxmov (& 3) '3 a4)
(push a4)
(bfnil a4 120)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'make-cursor a1)
(jcall error)
120
(push (@ 121))
(push 'make-cursor)
(push (& 2))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '6 a4)
(jmp send)
121
(eval ())
(push a1)
(hpxmov (& 1) '20 a1)
(push a1)
(push (@ 122))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '4 a4)
(jmp list)
122
(eval ())
(mov a1 a2)
(pop a1)
(jcall nconc1)
(hpmovx a1 (& 1) '20)
(pop a1)
(adjstk '5)
(return)
))
(defvar #:display:cursor-names #["circle" "cross" "crosshair" "diamond-cross" "dot" "exchange" "fleur" "left-hand" "heart" "iron-cross" "left-ptr" "mouse" "pencil" "pirate" "plus" "question" "sizing" "spray" "watch" "i-beam"])
(defvar #:display:cursor-names-length (vlength #:display:cursor-names))
(loader'((fentry make-named-cursor subr1)
(entry make-named-cursor subr1)
(push a1)
(btstrg a1 102)
(mov a1 a3)
(mov 'errnsa a2)
(mov 'make-named-cursor a1)
(jcall error)
102
(push (cvalq #:display:current-display))
(push '0)
(push nil)
(bfnil (& 2) 105)
(mov (& 2) a3)
(mov '#:display:no-current-display a2)
(mov 'make-named-cursor a1)
(jcall error)
105
(hpxmov (cvalq #:display:cursor-names) (& 1) a2)
(mov (& 3) a1)
(jcall eqstring)
(bfnil a1 106)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(cabne a4 (cvalq #:display:cursor-names-length) 105)
(mov (& 3) a3)
(mov '#:display:err-not-a-cursor-name a2)
(mov 'make-named-cursor a1)
(jcall error)
(bra 105)
106
(push (@ 109))
(push 'make-named-cursor)
(push (& 4))
(push (& 4))
(mov '3 a4)
(jmp send)
109
(eval ())
(mov a1 (& 0))
(bfnil a1 111)
(mov (& 3) a3)
(mov '#:display:not-a-valid-cursor a2)
(mov 'make-named-cursor a1)
(jcall error)
111
(hpxmov (& 2) '25 a2)
(mov (& 3) a1)
(jcall member)
(bfnil a1 113)
(hpxmov (& 2) '25 a2)
(mov (& 3) a1)
(jcall cons)
(hpmovx a1 (& 2) '25)
113
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((fentry cursor-name subr1)
(entry cursor-name subr1)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'cursor-name a1)
(jcall error)
102
(cnblt (& 0) '0 105)
(jcall cursor-max)
(cnble (& 0) a1 104)
105
(mov (& 0) a3)
(mov '#:display:err-not-a-valid-cursor a2)
(mov 'cursor-name a1)
(jcall error)
104
(push (cvalq #:display:current-display))
(bfnil (& 0) 107)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'cursor-name a1)
(jcall error)
107
(push (@ 108))
(push 'cursor-name)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
108
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry current-cursor nsubr)
(entry current-cursor nsubr)
(push a4)
(cnble (& 0) '0 101)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 102)
101
(mov nil a4)
102
(push (& 0))
(push (cvalq #:display:current-display))
(push nil)
(push nil)
(push a4)
(cnble (& 4) '1 104)
(mov (& 4) a3)
(mov 'errwna a2)
(mov 'current-cursor a1)
(jcall error)
104
(bfnil (& 3) 106)
(mov (& 3) a3)
(mov '#:display:no-current-display a2)
(mov 'current-cursor a1)
(jcall error)
106
(cnble (& 4) '0 108)
(btfix (& 0) 110)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'current-cursor a1)
(jcall error)
110
(cnblt (& 0) '0 113)
(jcall cursor-max)
(cnble (& 0) a1 108)
113
(mov (& 0) a3)
(mov '#:display:err-not-a-valid-cursor a2)
(mov 'current-cursor a1)
(jcall error)
108
(hpxmov (& 3) '8 a4)
(mov a4 (& 2))
(btnil a4 114)
(mov '#:image:rectangle:window a2)
(mov a4 a1)
(jcall typep)
(bfnil a1 117)
(mov (& 2) a3)
(mov '#:display:errnotawindow a2)
(mov 'current-cursor a1)
(jcall error)
117
(hpxmov (& 2) '11 a4)
(mov a4 (& 1))
(cabeq '0 (& 4) 120)
(cabne a4 (& 0) 118)
120
(mov a4 a1)
(bra 115)
118
(push (@ 121))
(push 'current-cursor)
(push (& 5))
(push (& 3))
(mov '3 a4)
(jmp send)
121
(eval ())
(hpmovx (& 0) (& 2) '11)
(mov (& 0) a1)
(bra 115)
114
(mov nil a1)
115
(adjstk '5)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry move-cursor subr2)
(entry move-cursor subr2)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'move-cursor a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'move-cursor a1)
(jcall error)
104
(push (cvalq #:display:current-display))
(bfnil (& 0) 106)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'move-cursor a1)
(jcall error)
106
(push (@ 107))
(push 'move-cursor)
(push (& 2))
(push (& 4))
(push (& 6))
(mov '4 a4)
(jmp send)
107
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry make-line-style subr2)
(entry make-line-style subr2)
(push a2)
(push a1)
(btfix a1 102)
(mov a1 a3)
(mov 'errnia a2)
(mov 'make-line-style a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'make-line-style a1)
(jcall error)
104
(push (cvalq #:display:current-display))
(bfnil (& 0) 106)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'max-line-style a1)
(jcall error)
106
(push (@ 107))
(push 'make-line-style)
(push (& 2))
(push (& 4))
(push (& 6))
(mov '4 a4)
(jmp send)
107
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry make-graph-env nsubr)
(entry make-graph-env nsubr)
(cnbge a4 '7 101)
(mov 'make-graph-env a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(diff '7 a4)
(jcall #:llcp:nlist)
(push a1)
(bfnil (& 7) 103)
(mov (& 7) a3)
(mov '#:display:no-current-display a2)
(mov 'make-graph-env a1)
(jcall error)
103
(mov 'display a2)
(mov (& 7) a1)
(jcall typep)
(btnil a1 106)
(hpxmov (& 7) '6 a4)
(bfnil a4 105)
106
(mov (& 7) a3)
(mov '#:display:errnotadisplay a2)
(mov 'make-graph-env a1)
(jcall error)
105
(bffix (& 6) 109)
(cnblt (& 6) '0 109)
(jcall font-max)
(cnble (& 6) a1 108)
109
(mov (& 6) a3)
(mov '#:display:errnotafont a2)
(mov 'make-graph-env a1)
(jcall error)
108
(bffix (& 5) 112)
(cnblt (& 5) '0 112)
(jcall line-style-max)
(cnble (& 5) a1 111)
112
(mov (& 5) a3)
(mov 'erroob a2)
(mov 'make-graph-env a1)
(jcall error)
111
(bffix (& 4) 115)
(cnblt (& 4) '0 115)
(jcall pattern-max)
(cnble (& 4) a1 114)
115
(mov (& 4) a3)
(mov '#:display:err-not-a-valid-pattern a2)
(mov 'make-graph-env a1)
(jcall error)
114
(bffix (& 3) 118)
(cnblt (& 3) '0 118)
(cnble (& 3) '16 117)
118
(mov (& 3) a3)
(mov '#:display:err-not-a-valid-mode a2)
(mov 'make-graph-env a1)
(jcall error)
117
(mov 'color a2)
(mov (& 2) a1)
(jcall typep)
(btnil a1 121)
(hpxmov (& 2) '5 a4)
(bfnil a4 120)
121
(mov (& 2) a3)
(mov '#:display:errnotacolor a2)
(mov 'make-graph-env a1)
(jcall error)
120
(mov 'color a2)
(mov (& 1) a1)
(jcall typep)
(btnil a1 124)
(hpxmov (& 1) '5 a4)
(bfnil a4 123)
124
(mov (& 1) a3)
(mov '#:display:errnotacolor a2)
(mov 'make-graph-env a1)
(jcall error)
123
(jcall #:graph-env:make)
(push a1)
(hpmovx (& 7) a1 '0)
(hpmovx (& 6) a1 '1)
(hpmovx (& 5) a1 '2)
(hpmovx (& 4) a1 '3)
(hpmovx (& 3) a1 '4)
(hpmovx (& 2) a1 '5)
(btnil (& 1) 125)
(push (@ 127))
(push 'make-graph-env)
(push (& 10))
(push a1)
(mov (& 5) a4)
(push (car a4))
(mov '4 a4)
(jmp send)
127
(eval ())
(bra 126)
125
(push (@ 128))
(push 'make-graph-env)
(push (& 10))
(push a1)
(mov '3 a4)
(jmp send)
128
(eval ())
126
(hpxmov (& 8) '22 a1)
(mov (& 0) a2)
(jcall nconc1)
(hpmovx a1 (& 8) '22)
(mov (& 0) a1)
(adjstk '9)
(return)
))
(loader'((fentry kill-graph-env subr1)
(entry kill-graph-env subr1)
(push a1)
(mov 'graph-env a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'kill-graph-env a1)
(jcall error)
102
(hpxmov (& 0) '11 a4)
(push a4)
(push a4)
(hpxmov a4 '22 a2)
(mov (& 2) a1)
(jcall delq)
(pop a4)
(hpmovx a1 a4 '22)
(push (@ 103))
(push 'kill-graph-env)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
103
(eval ())
(mov 't a1)
(adjstk '2)
(return)
))
(loader'((fentry kill-stipple subr1)
(entry kill-stipple subr1)
(push a1)
(btnil a1 102)
(mov '#:bitmap:stipple a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotastipple a2)
(mov 'kill-stipple a1)
(jcall error)
102
(push (cvalq #:display:current-display))
(btnil (& 1) 104)
(mov '#:bitmap:stipple a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 104)
(mov (& 1) a3)
(mov '#:display:errnotastipple a2)
(mov 'kill-stipple a1)
(jcall error)
104
(bfnil (& 0) 106)
(mov (& 0) a3)
(mov '#:display:no-current-display a2)
(mov 'kill-stipple a1)
(jcall error)
106
(push (@ 107))
(push 'kill-stipple)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
107
(eval ())
(hpxmov (& 0) '26 a2)
(mov (& 1) a1)
(jcall delq)
(hpmovx a1 (& 0) '26)
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry graph-env-set-clip nsubr)
(entry graph-env-set-clip nsubr)
(cnbeq a4 '5 101)
(mov 'graph-env-set-clip a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(mov 'graph-env a2)
(mov (& 4) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 4) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-set-clip a1)
(jcall error)
103
(btfix (& 3) 105)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'graph-env-set-clip a1)
(jcall error)
105
(btfix (& 2) 107)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'graph-env-set-clip a1)
(jcall error)
107
(btfix (& 1) 109)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'graph-env-set-clip a1)
(jcall error)
109
(btfix (& 0) 111)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'graph-env-set-clip a1)
(jcall error)
111
(hpxmov (& 4) '11 a4)
(push (@ 112))
(push 'graph-env-set-clip)
(push a4)
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '7 a4)
(jmp send)
112
(eval ())
(hpmovx (& 3) (& 4) '6)
(hpmovx (& 2) (& 4) '7)
(hpmovx (& 1) (& 4) '8)
(hpmovx (& 0) (& 4) '9)
(mov 't a1)
(adjstk '5)
(return)
))
(loader'((fentry graph-env-set-clips nsubr)
(entry graph-env-set-clips nsubr)
(cnbeq a4 '6 101)
(mov 'graph-env-set-clips a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov 'graph-env a2)
(mov (& 5) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 5) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-set-clips a1)
(jcall error)
103
(btfix (& 4) 105)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'graph-env-set-clips a1)
(jcall error)
105
(btvect (& 3) 107)
(mov (& 3) a3)
(mov 'errvec a2)
(mov 'graph-env-set-clips a1)
(jcall error)
107
(btvect (& 2) 109)
(mov (& 2) a3)
(mov 'errvec a2)
(mov 'graph-env-set-clips a1)
(jcall error)
109
(btvect (& 1) 111)
(mov (& 1) a3)
(mov 'errvec a2)
(mov 'graph-env-set-clips a1)
(jcall error)
111
(btvect (& 0) 113)
(mov (& 0) a3)
(mov 'errvec a2)
(mov 'graph-env-set-clips a1)
(jcall error)
113
(hpxmov (& 5) '11 a4)
(push (@ 114))
(push 'graph-env-set-clips)
(push a4)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '8 a4)
(jmp send)
114
(eval ())
(mov 't a1)
(adjstk '6)
(return)
))
(loader'((fentry current-graph-env nsubr)
(entry current-graph-env nsubr)
(push a4)
(mov (& 0) a1)
(cabne a1 '0 102)
(bfnil (cvalq #:display:current-display) 104)
(mov (cvalq #:display:current-display) a3)
(mov '#:display:no-current-display a2)
(mov 'current-graph-env a1)
(jcall error)
104
(mov 'display a2)
(mov (cvalq #:display:current-display) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (cvalq #:display:current-display) '6 a4)
(bfnil a4 106)
107
(mov (cvalq #:display:current-display) a3)
(mov '#:display:errnotadisplay a2)
(mov 'current-graph-env a1)
(jcall error)
106
(hpxmov (cvalq #:display:current-display) '9 a1)
(bra 101)
102
(cabne a1 '1 108)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov 'graph-env a2)
(jcall typep)
(bfnil a1 110)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'current-graph-env a1)
(jcall error)
110
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpxmov a4 '11 a4)
(push a4)
(mov (& 1) a4)
(plus '1 a4)
(xspmov a4 a3)
(pop a4)
(hpmovx a3 a4 '9)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(mov a4 (cvalq #:graph-env:current-graph-env))
(mov a4 a1)
(bra 101)
108
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'current-graph-env a1)
(jcall error)
101
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry graph-env-change-values nsubr)
(entry graph-env-change-values nsubr)
(cnbeq a4 '7 101)
(mov 'graph-env-change-values a1)
(mov '7 a2)
(jmp #:llcp:errwna)
101
(mov 'graph-env a2)
(mov (& 6) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 6) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-change-values a1)
(jcall error)
103
(hpxmov (& 6) '11 a4)
(push (@ 104))
(push 'graph-env-change-values)
(push a4)
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '9 a4)
(jmp send)
104
(eval ())
(adjstk '7)
(return)
))
(loader'((fentry graph-env-subwindow-mode subr2)
(entry graph-env-subwindow-mode subr2)
(push a2)
(push a1)
(mov 'graph-env a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:err-not-a-valid-graph-env a2)
(mov 'graph-env-subwindow-mode a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'graph-env-subwindow-mode a1)
(jcall error)
104
(hpxmov (& 0) '11 a4)
(push a4)
(bfnil a4 106)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'graph-env-subwindow-mode a1)
(jcall error)
106
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 109)
(hpxmov (& 0) '6 a4)
(bfnil a4 108)
109
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'graph-env-subwindow-mode a1)
(jcall error)
108
(push (@ 110))
(push 'graph-env-subwindow-mode)
(push (& 2))
(push (& 4))
(push (& 6))
(mov '4 a4)
(jmp send)
110
(eval ())
(mov 't a1)
(adjstk '3)
(return)
))
(loader'((fentry display-get-font-names nsubr)
(entry display-get-font-names nsubr)
(cnbge a4 '2 101)
(mov 'display-get-font-names a1)
(mov '2 a2)
(jmp #:llcp:errwna)
101
(diff '2 a4)
(jcall #:llcp:nlist)
(push a1)
(bfnil (& 2) 103)
(mov (& 2) a3)
(mov '#:display:no-current-display a2)
(mov 'display-get-font-names a1)
(jcall error)
103
(mov 'display a2)
(mov (& 2) a1)
(jcall typep)
(btnil a1 106)
(hpxmov (& 2) '6 a4)
(bfnil a4 105)
106
(mov (& 2) a3)
(mov '#:display:errnotadisplay a2)
(mov 'display-get-font-names a1)
(jcall error)
105
(btfix (& 1) 108)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'display-get-font-names a1)
(jcall error)
108
(btnil (& 0) 109)
(mov (& 0) a4)
(mov (car a4) a4)
(bra 110)
109
(mov '"*" a4)
110
(push a4)
(btstrg a4 112)
(mov a4 a3)
(mov 'errnsa a2)
(mov 'display-get-font-names a1)
(jcall error)
112
(push (@ 113))
(push 'get-font-names)
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(jmp send)
113
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry display-get-font-info nsubr)
(entry display-get-font-info nsubr)
(cnbge a4 '2 101)
(mov 'display-get-font-info a1)
(mov '2 a2)
(jmp #:llcp:errwna)
101
(diff '2 a4)
(jcall #:llcp:nlist)
(push a1)
(bfnil (& 2) 103)
(mov (& 2) a3)
(mov '#:display:no-current-display a2)
(mov 'display-get-font-info a1)
(jcall error)
103
(mov 'display a2)
(mov (& 2) a1)
(jcall typep)
(btnil a1 106)
(hpxmov (& 2) '6 a4)
(bfnil a4 105)
106
(mov (& 2) a3)
(mov '#:display:errnotadisplay a2)
(mov 'display-get-font-info a1)
(jcall error)
105
(btstrg (& 1) 108)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'display-get-font-info a1)
(jcall error)
108
(mov (& 0) a4)
(mov (car a4) a4)
(bfnil a4 109)
(jcall #:font-info:make)
(mov a1 a4)
109
(mov a4 (& 0))
(mov 'font-info a2)
(mov a4 a1)
(jcall typep)
(bfnil a1 111)
(mov (& 0) a3)
(mov '#:display:not-a-valid-argument a2)
(mov 'display-get-font-info a1)
(jcall error)
111
(push (@ 112))
(push (& 1))
(push '0)
(push nil)
(hgsize (& 4) a4)
(push a4)
(mov '4 a4)
(jmp fillvector)
112
(eval ())
(push (@ 113))
(push 'get-font-info)
(push (& 4))
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp send)
113
(eval ())
(adjstk '3)
(return)
))
(loader '((end)))
