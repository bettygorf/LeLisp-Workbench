(loader '((title |virmenu.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'virbitmap)))
(setq #:sys-package:colon 'menu)
(loader'((entry #:menu:itemlist subr3)
(push a3)
(push a2)
(push a1)
(jcall #:menu:itemlist:make)
(hpmovx (& 0) a1 '4)
(hpmovx (& 1) a1 '5)
(hpmovx (& 2) a1 '6)
(adjstk '3)
(return)
))
(loader'((entry #:menu:item subr3)
(push a3)
(push a2)
(push a1)
(jcall #:menu:item:make)
(hpmovx (& 0) a1 '4)
(hpmovx (& 1) a1 '5)
(hpmovx (& 2) a1 '6)
(adjstk '3)
(return)
))
(loader'((fentry create-menu nsubr)
(entry create-menu nsubr)
(cnbge a4 '1 101)
(mov 'create-menu a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(btnil (& 1) 103)
(mov (& 1) a1)
(jcall string)
(mov a1 (& 1))
103
(bfnil (cvalq #:display:current-display) 105)
(mov (cvalq #:display:current-display) a3)
(mov '#:display:no-current-display a2)
(mov 'create-menu a1)
(jcall error)
105
(jcall #:menu:make)
(push '-1)
(push a1)
(hpmovx (cvalq #:display:current-display) a1 '2)
(hpmovx (& 3) a1 '0)
(push (@ 106))
(push 'create-menu)
(hpxmov a1 '2 a4)
(push a4)
(push a1)
(mov '3 a4)
(jmp send)
106
(eval ())
(mov a1 (& 0))
(hpmovx (cvalq #:display:current-display) a1 '2)
(hpmovx (& 3) a1 '0)
(push (cvalq #:display:current-display))
(hpxmov (cvalq #:display:current-display) '16 a1)
(mov (& 1) a2)
(jcall nconc1)
(pop a4)
(hpmovx a1 a4 '16)
(push (@ 107))
(push (& 1))
(push '0)
(push (& 6))
(push '1)
(mov '4 a4)
(jmp menu-insert-item-list)
107
(eval ())
108
(btnil (& 2) 109)
(push (@ 110))
(push (& 1))
(push '0)
(mov (& 4) a1)
(jcall |1+|)
(mov a1 (& 4))
(push a1)
(mov (& 6) a4)
(mov (cdr a4) (& 6))
(push (car a4))
(push '1)
(mov (& 8) a4)
(mov (cdr a4) (& 8))
(push (car a4))
(mov '6 a4)
(jmp menu-insert-item)
110
(eval ())
(bra 108)
109
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((fentry kill-menu subr1)
(entry kill-menu subr1)
(push a1)
(mov 'menu a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotamenu a2)
(mov 'kill-menu a1)
(jcall error)
102
(hpxmov (& 0) '2 a4)
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'kill-menu a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'kill-menu a1)
(jcall error)
106
(push (@ 108))
(push 'kill-menu)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
108
(eval ())
(hpxmov (& 0) '16 a2)
(mov (& 1) a1)
(jcall delq)
(hpmovx a1 (& 0) '16)
(hpmovx nil (& 1) '3)
(hpmovx nil (& 1) '2)
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry activate-menu subr3)
(entry activate-menu subr3)
(push a3)
(push a2)
(push a1)
(mov 'menu a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotamenu a2)
(mov 'activate-menu a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'activate-menu a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'activate-menu a1)
(jcall error)
106
(hpxmov (& 0) '2 a4)
(push a4)
(bfnil a4 108)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'activate-menu a1)
(jcall error)
108
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 111)
(hpxmov (& 0) '6 a4)
(bfnil a4 110)
111
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'activate-menu a1)
(jcall error)
110
(push (@ 112))
(mov '0 a4)
(jmp current-display)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push (& 5))
(mov '1 a4)
(jmp current-display)
115
(eval ())
(push (@ 116))
(push 'activate-menu)
(push (& 6))
(push (& 8))
(push (& 10))
(push (& 12))
(mov '5 a4)
(jmp send)
116
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 117))
(push (& 4))
(mov '1 a4)
(jmp current-display)
117
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry menu-insert-item-list nsubr)
(entry menu-insert-item-list nsubr)
(cnbeq a4 '4 101)
(mov 'menu-insert-item-list a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov 'menu a2)
(mov (& 3) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 3) a3)
(mov '#:display:errnotamenu a2)
(mov 'menu-insert-item-list a1)
(jcall error)
103
(hpxmov (& 3) '2 a4)
(push a4)
(bfnil a4 105)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'menu-insert-item-list a1)
(jcall error)
105
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 108)
(hpxmov (& 0) '6 a4)
(bfnil a4 107)
108
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'menu-insert-item-list a1)
(jcall error)
107
(hpxmov (& 4) '1 a2)
(push a2)
(mov nil a3)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:menu:itemlist)
(mov a1 a3)
(pop a2)
(mov (& 3) a1)
(call insertnth)
(hpmovx a1 (& 4) '1)
(push (@ 109))
(push 'menu-insert-item-list)
(push (& 2))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '6 a4)
(jmp send)
109
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry menu-insert-item nsubr)
(entry menu-insert-item nsubr)
(cnbeq a4 '6 101)
(mov 'menu-insert-item a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov 'menu a2)
(mov (& 5) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 5) a3)
(mov '#:display:errnotamenu a2)
(mov 'menu-insert-item a1)
(jcall error)
103
(hpxmov (& 5) '2 a4)
(push a4)
(bfnil a4 105)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'menu-insert-item a1)
(jcall error)
105
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 108)
(hpxmov (& 0) '6 a4)
(bfnil a4 107)
108
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'menu-insert-item a1)
(jcall error)
107
(hpxmov (& 6) '1 a2)
(mov (& 5) a1)
(jcall nth)
(btnil a1 110)
(push a1)
(hpxmov a1 '6 a2)
(push a2)
(mov (& 3) a3)
(mov (& 4) a2)
(mov (& 5) a1)
(call #:menu:item)
(mov a1 a3)
(pop a2)
(mov (& 5) a1)
(call insertnth)
(pop a4)
(hpmovx a1 a4 '6)
110
(push (@ 111))
(push 'menu-insert-item)
(push (& 2))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp send)
111
(eval ())
(adjstk '7)
(return)
))
(loader'((fentry menu-delete-item-list subr2)
(entry menu-delete-item-list subr2)
(push a2)
(push a1)
(mov 'menu a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotamenu a2)
(mov 'menu-delete-item-list a1)
(jcall error)
102
(hpxmov (& 0) '2 a4)
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'menu-delete-item-list a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'menu-delete-item-list a1)
(jcall error)
106
(hpxmov (& 1) '1 a2)
(mov (& 2) a1)
(call deletenth)
(hpmovx a1 (& 1) '1)
(push (@ 108))
(push 'menu-delete-item-list)
(push (& 2))
(push (& 4))
(push (& 6))
(mov '4 a4)
(jmp send)
108
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry menu-delete-item subr3)
(entry menu-delete-item subr3)
(push a3)
(push a2)
(push a1)
(mov 'menu a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotamenu a2)
(mov 'menu-delete-item a1)
(jcall error)
102
(hpxmov (& 0) '2 a4)
(push a4)
(bfnil a4 104)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'menu-delete-item a1)
(jcall error)
104
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 107)
(hpxmov (& 0) '6 a4)
(bfnil a4 106)
107
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'menu-delete-item a1)
(jcall error)
106
(hpxmov (& 1) '1 a2)
(mov (& 2) a1)
(jcall nth)
(btnil a1 109)
(push a1)
(hpxmov a1 '6 a2)
(mov (& 4) a1)
(call deletenth)
(pop a4)
(hpmovx a1 a4 '6)
109
(push (@ 110))
(push 'menu-delete-item)
(push (& 2))
(push (& 4))
(push (& 6))
(push (& 8))
(mov '5 a4)
(jmp send)
110
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry menu-modify-item-list nsubr)
(entry menu-modify-item-list nsubr)
(cnbeq a4 '4 101)
(mov 'menu-modify-item-list a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov 'menu a2)
(mov (& 3) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 3) a3)
(mov '#:display:errnotamenu a2)
(mov 'menu-modify-item-list a1)
(jcall error)
103
(hpxmov (& 3) '2 a4)
(push a4)
(bfnil a4 105)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'menu-modify-item-list a1)
(jcall error)
105
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 108)
(hpxmov (& 0) '6 a4)
(bfnil a4 107)
108
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'menu-modify-item-list a1)
(jcall error)
107
(hpxmov (& 4) '1 a2)
(mov (& 3) a1)
(jcall nth)
(push a1)
(btnil a1 110)
(btnil (& 3) 112)
(push a1)
(mov (& 4) a1)
(jcall string)
(pop a4)
(hpmovx a1 a4 '4)
112
(btnil (& 2) 110)
(hpmovx (& 2) (& 0) '5)
110
(adjstk '1)
(push (@ 115))
(push 'menu-modify-item-list)
(push (& 2))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '6 a4)
(jmp send)
115
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry menu-modify-item nsubr)
(entry menu-modify-item nsubr)
(cnbeq a4 '6 101)
(mov 'menu-modify-item a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(mov 'menu a2)
(mov (& 5) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 5) a3)
(mov '#:display:errnotamenu a2)
(mov 'menu-modify-item a1)
(jcall error)
103
(hpxmov (& 5) '2 a4)
(push a4)
(bfnil a4 105)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'menu-modify-item a1)
(jcall error)
105
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 108)
(hpxmov (& 0) '6 a4)
(bfnil a4 107)
108
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'menu-modify-item a1)
(jcall error)
107
(hpxmov (& 6) '1 a2)
(mov (& 5) a1)
(jcall nth)
(push nil)
(btnil a1 110)
(hpxmov a1 '6 a2)
(mov (& 5) a1)
(jcall nth)
(mov a1 (& 0))
(btnil (& 4) 112)
(push a1)
(mov (& 5) a1)
(jcall string)
(pop a4)
(hpmovx a1 a4 '4)
112
(btnil (& 3) 114)
(hpmovx (& 3) (& 0) '5)
114
(btnil (& 2) 110)
(hpmovx (& 2) (& 0) '6)
110
(adjstk '1)
(push (@ 117))
(push 'menu-modify-item)
(push (& 2))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(push (& 9))
(mov '8 a4)
(jmp send)
117
(eval ())
(adjstk '7)
(return)
))
(loader'((entry deletenth subr2)
(btcons a2 101)
(mov a2 a1)
(return)
101
(cabne a1 '0 103)
(mov (cdr a2) a1)
(return)
103
(push a2)
(diff '1 a1)
(mov (cdr a2) a2)
(call deletenth)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(return)
))
(loader'((entry insertnth subr3)
(btcons a2 101)
(mov a3 a1)
(jmp cons)
101
(cabne a1 '0 103)
(mov a3 a1)
(jmp cons)
103
(push a2)
(diff '1 a1)
(mov (cdr a2) a2)
(call insertnth)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(return)
))
(loader '((end)))
