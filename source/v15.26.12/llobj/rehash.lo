(loader '((title |rehash.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'rehash)))
(defvar #:sys-package:colon 'rehash)
(add-feature 'rehash)
(defvar #:rehash:all-modules ())
(defvar #:rehash:compiling-module ())
(defvar #:rehash:imported-modules ())
(defvar #:rehash:verbose (when (boundp '#:rehash:verbose) #:rehash:verbose))
(loader'((fentry #:rehash:pr dmsubr)
(entry #:rehash:pr dmsubr)
(push (@ 101))
(push 'when)
(push '#:rehash:verbose)
(mov a1 a2)
(mov 'print a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(return)
))
(loader'((fentry #:rehash:|rehash.lm| subr1)
(entry #:rehash:|rehash.lm| subr1)
(push a1)
(jcall directoryp)
(mov a1 (& 0))
(bfnil a1 102)
(mov a1 a3)
(mov 'errunk a2)
(mov 'rehash a1)
(jcall error)
102
(btnil (cvalq #:rehash:verbose) 104)
(push (@ 105))
(push '";   rehash: adding directory ")
(push (& 2))
(mov '2 a4)
(jmp print)
105
(eval ())
104
(mov '"*" a2)
(mov (& 0) a1)
(jcall set-pathname-name)
(mov '"lm" a2)
(mov (& 0) a1)
(jcall set-pathname-type)
(mov (& 0) a1)
(jcall expand-pathname)
(push a1)
(push nil)
106
(bfcons (& 1) 107)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 0) a1)
(jcall pathname-name)
(mov (& 0) a2)
(jcall cons)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 106)
107
(mov (& 0) a1)
(adjstk '3)
(jmp nreverse)
))
(defvar #:rehash:|path.lm| (if (boundp '#:rehash:|path.lm|) #:rehash:|path.lm| (#:rehash:|rehash.lm| (pathname #:system:llmod-directory))))
(if (not (typefn 'oldprobepathm)) (progn (synonymq oldprobepathm probepathm)))
(loader'((fentry #:rehash:probepathm subr1)
(entry #:rehash:probepathm subr1)
(push a1)
(jcall pathname-name)
(push a1)
(mov (cvalq #:rehash:all-modules) a2)
(jcall assoc)
(btnil a1 101)
(mov (cdr a1) a4)
(plus '1 a4)
(mov a4 (cdr a1))
(bra 102)
101
(mov '1 a2)
(mov (& 0) a1)
(jcall cons)
(mov (cvalq #:rehash:all-modules) a2)
(jcall cons)
(mov a1 (cvalq #:rehash:all-modules))
102
(mov (cvalq #:rehash:|path.lm|) a2)
(mov (& 0) a1)
(jcall cassoc)
(push a1)
(bfnil a1 103)
(mov (& 2) a1)
(jcall oldprobepathm)
(mov a1 (& 0))
(btnil a1 104)
(jcall pathname)
(push (@ 106))
(push nil)
(push nil)
(jcall pathname-directory)
(push a1)
(push nil)
(push nil)
(mov '5 a4)
(jmp make-pathname)
106
(eval ())
(push (@ 107))
(push (cvalq #:rehash:|path.lm|))
(jcall #:rehash:|rehash.lm|)
(push a1)
(mov '2 a4)
(jmp nconc)
107
(eval ())
(mov a1 (cvalq #:rehash:|path.lm|))
(mov (& 0) a1)
(adjstk '3)
(return)
104
(mov nil a1)
(adjstk '3)
(return)
103
(adjstk '3)
(return)
))
(loader'((fentry rehashinit subr0)
(entry rehashinit subr0)
(mov '#:rehash:probepathm a2)
(mov 'probepathm a1)
(jcall synonym)
(mov '((compilemodule (entry (setq #:rehash:compiling-module (car #:trace:arg1)) (setq #:rehash:all-modules ()) (setq #:rehash:imported-modules (mapcar 'string (cons #:rehash:compiling-module (getdefmodule (readdefmodule #:rehash:compiling-module) 'import))))) (exit (#:rehash:stats #:rehash:compiling-module)))) a1)
(jcall trace)
(mov 't a1)
(return)
))
(loader'((fentry #:rehash:stats subr1)
(entry #:rehash:stats subr1)
(btnil (cvalq #:rehash:verbose) 102)
(push (@ 103))
(push '";;; rehash: ")
(mov (cvalq #:rehash:all-modules) a1)
(jcall length)
(push a1)
(push '" modules were search in path.")
(mov '3 a4)
(jmp print)
103
(eval ())
102
(btnil (cvalq #:rehash:compiling-module) 104)
(push (cvalq #:rehash:all-modules))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push a4)
(mov (cvalq #:rehash:imported-modules) a2)
(mov (& 1) a1)
(jcall member)
(bfnil a1 109)
(cnble (& 0) '1 109)
(btnil (cvalq #:rehash:verbose) 109)
(push (@ 114))
(push '";;; rehash: ** Warning: I don't know why ")
(push (& 3))
(push '" was seen ")
(push (& 4))
(push '" times?")
(mov '5 a4)
(jmp print)
114
(eval ())
109
(adjstk '2)
(bra 106)
107
(mov nil a1)
(adjstk '1)
(return)
104
(mov nil a1)
(return)
))
(loader'((fentry rehashend subr0)
(entry rehashend subr0)
(mov '(compilemodule) a1)
(jcall untrace)
(mov 'oldprobepathm a2)
(mov 'probepathm a1)
(jcall synonym)
(mov nil a1)
(return)
))
(loader '((end)))
