(loader '((title |nformat.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'format)))
(defvar #:sys-package:colon 'format)
(add-feature 'format)
(defvar #:format:glb-fnt-name)
(loader'((entry #:format:error subr2)
(mov a2 a3)
(mov a1 a2)
(mov (cvalq #:format:glb-fnt-name) a1)
(jmp error)
))
(#:messages:put-message '#:format:errfermant 'french '"hors contexte" 'defmessage)
(#:messages:put-message '#:format:errfermant 'english '"out of context" 'defmessage)
'#:format:errfermant
(#:messages:put-message '#:format:errbaddest 'french '"mauvaise destination" 'defmessage)
(#:messages:put-message '#:format:errbaddest 'english '"bad destination" 'defmessage)
'#:format:errbaddest
(#:messages:put-message '#:format:error-parameter-nn 'french '"parame`tre non nume'rique" 'defmessage)
(#:messages:put-message '#:format:error-parameter-nn 'english '"non numerical parameter" 'defmessage)
'#:format:error-parameter-nn
(#:messages:put-message '#:format:error-too-many-parameters 'french '"trop de parame`tres" 'defmessage)
(#:messages:put-message '#:format:error-too-many-parameters 'english '"too many parameters" 'defmessage)
'#:format:error-too-many-parameters
(loader'((fentry prinf nsubr)
(entry prinf nsubr)
(cnbge a4 '1 101)
(mov 'prinf a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'prinf (cvalq #:format:glb-fnt-name))
(btstrg (& 1) 103)
(mov (& 1) a2)
(mov 'errnsa a1)
(call #:format:error)
103
(mov (& 1) a1)
(jcall pname)
(mov (& 0) a2)
(call #:format:format)
(push a1)
104
(bfcons (& 0) 105)
(push (@ 106))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp princn)
106
(eval ())
(bra 104)
105
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry printf nsubr)
(entry printf nsubr)
(cnbge a4 '1 101)
(mov 'printf a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'printf (cvalq #:format:glb-fnt-name))
(btstrg (& 1) 103)
(mov (& 1) a2)
(mov 'errnsa a1)
(call #:format:error)
103
(mov (& 1) a1)
(jcall pname)
(mov (& 0) a2)
(call #:format:format)
(push a1)
104
(bfcons (& 0) 105)
(push (@ 106))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp princn)
106
(eval ())
(bra 104)
105
(adjstk '1)
(push (@ 107))
(mov '0 a4)
(jmp print)
107
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry format nsubr)
(entry format nsubr)
(cnbge a4 '2 101)
(mov 'format a1)
(mov '2 a2)
(jmp #:llcp:errwna)
101
(diff '2 a4)
(jcall #:llcp:nlist)
(push a1)
(mov 'format (cvalq #:format:glb-fnt-name))
(btstrg (& 1) 103)
(mov (& 1) a2)
(mov 'errnsa a1)
(call #:format:error)
103
(mov (& 1) a1)
(jcall pname)
(mov (& 0) a2)
(call #:format:format)
(push a1)
(bfnil (& 3) 104)
(adjstk '4)
(bra #:format:string)
104
(btfix (& 3) 108)
(cabne (& 3) 't 106)
108
(cabne (& 3) 't 110)
(mov nil (& 3))
110
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(push dlink)
(push prot)
(stack dlink)
(push (@ 114))
(push (& 8))
(mov '1 a4)
(jmp outchan)
114
(eval ())
(push (& 4))
115
(bfcons (& 0) 116)
(push (@ 117))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp princn)
117
(eval ())
(bra 115)
116
(adjstk '1)
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 113) a3)
112
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp outchan)
118
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
113
(eval ())
(adjstk '5)
(return)
106
(mov (& 3) a2)
(mov '#:format:errbaddest a1)
(adjstk '4)
(bra #:format:error)
))
(defvar #:format:glb-res)
(loader'((entry #:format:emit-char subr1)
(mov (cvalq #:format:glb-res) a2)
(jcall cons)
(mov a1 (cvalq #:format:glb-res))
(return)
))
(loader'((entry #:format:emit-n-chars subr2)
(push a2)
(bra 102)
101
(push a1)
(mov (cvalq #:format:glb-res) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:format:glb-res))
(pop a1)
102
(sobgez a1 101)
(mov 't a1)
(adjstk '1)
(return)
))
(loader'((entry #:format:emit-l-chars subr1)
(push a1)
101
(btnil (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (cvalq #:format:glb-res) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (cvalq #:format:glb-res))
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:format:string subr1)
(push a1)
(jcall length)
(mov '32 a2)
(jcall makestring)
(push '0)
(push a1)
(mov (& 2) a1)
(jcall nreverse)
(mov a1 (& 2))
101
(btnil (& 2) 102)
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(hbmovx (car a4) (& 0) (& 1))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 101)
102
(mov (& 0) a1)
(adjstk '3)
(return)
))
(defvar #:format:glb-format)
(defvar #:format:glb-args)
(defvar #:format:glb-cf)
(defvar #:format:glb-ca)
(loader'((entry #:format:format subr2)
(push a1)
(push a2)
(push nil)
(push (cvalq #:format:glb-ca))
(mov a2 (cvalq #:format:glb-ca))
(push (cvalq #:format:glb-cf))
(mov a1 (cvalq #:format:glb-cf))
(push (cvalq #:format:glb-res))
(mov (& 3) (cvalq #:format:glb-res))
(push (cvalq #:format:glb-args))
(mov (& 5) (cvalq #:format:glb-args))
(push (cvalq #:format:glb-format))
(mov (& 7) (cvalq #:format:glb-format))
(push '5)
(push '(#:format:glb-ca #:format:glb-cf #:format:glb-res #:format:glb-args #:format:glb-format))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:tag-format-scan)
(mov (cvalq #:format:glb-res) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-format))
(mov (& 7) (cvalq #:format:glb-args))
(mov (& 8) (cvalq #:format:glb-res))
(mov (& 9) (cvalq #:format:glb-cf))
(mov (& 10) (cvalq #:format:glb-ca))
(adjstk '14)
(return)
))
(loader'((entry #:format:tag-format-scan subr0)
(push (@ 101))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(call #:format:format-scan)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(loader'((entry #:format:format-scan subr0)
(push nil)
(push (@ 101))
(push 'end-format)
(push dlink)
(push tag)
(stack dlink)
102
(mov (cvalq #:format:glb-cf) a4)
(mov (cdr a4) (cvalq #:format:glb-cf))
(mov (car a4) (& 4))
(bfnil (& 4) 104)
(mov nil a1)
(mov 'end-format a2)
(jmp #:llcp:exit)
104
(cabne (& 4) '126 106)
(call #:format:tilde-decode)
(bra 102)
106
(mov (& 4) a1)
(call #:format:emit-char)
(bra 102)
103
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(adjstk '1)
(return)
))
(defvar #:format:glb-par-1 ())
(defvar #:format:glb-par-2 ())
(defvar #:format:glb-par-3 ())
(defvar #:format:glb-par-4 ())
(defvar #:format:glb-par-5 ())
(defvar #:format:glb-par-6 ())
(defvar #:format:glb-par-7 ())
(defvar #:format:glb-atsgn ())
(defvar #:format:glb-colon ())
(loader'((entry #:format:set-parameter subr2)
(cabne a1 '1 102)
(mov a2 (cvalq #:format:glb-par-1))
(mov a2 a1)
(return)
102
(cabne a1 '2 103)
(mov a2 (cvalq #:format:glb-par-2))
(mov a2 a1)
(return)
103
(cabne a1 '3 104)
(mov a2 (cvalq #:format:glb-par-3))
(mov a2 a1)
(return)
104
(cabne a1 '4 105)
(mov a2 (cvalq #:format:glb-par-4))
(mov a2 a1)
(return)
105
(cabne a1 '5 106)
(mov a2 (cvalq #:format:glb-par-5))
(mov a2 a1)
(return)
106
(cabne a1 '6 107)
(mov a2 (cvalq #:format:glb-par-6))
(mov a2 a1)
(return)
107
(cabne a1 '7 108)
(mov a2 (cvalq #:format:glb-par-7))
(mov a2 a1)
(return)
108
(mov a1 a2)
(mov '#:format:error-too-many-parameters a1)
(bra #:format:error)
))
(loader'((entry #:format:tilde-decode subr0)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:format:glb-colon))
(mov (& 1) (cvalq #:format:glb-colon))
(push (cvalq #:format:glb-atsgn))
(mov (& 3) (cvalq #:format:glb-atsgn))
(push (cvalq #:format:glb-par-7))
(mov (& 5) (cvalq #:format:glb-par-7))
(push (cvalq #:format:glb-par-6))
(mov (& 7) (cvalq #:format:glb-par-6))
(push (cvalq #:format:glb-par-5))
(mov (& 9) (cvalq #:format:glb-par-5))
(push (cvalq #:format:glb-par-4))
(mov (& 11) (cvalq #:format:glb-par-4))
(push (cvalq #:format:glb-par-3))
(mov (& 13) (cvalq #:format:glb-par-3))
(push (cvalq #:format:glb-par-2))
(mov (& 15) (cvalq #:format:glb-par-2))
(push (cvalq #:format:glb-par-1))
(mov (& 17) (cvalq #:format:glb-par-1))
(push '9)
(push '(#:format:glb-colon #:format:glb-atsgn #:format:glb-par-7 #:format:glb-par-6 #:format:glb-par-5 #:format:glb-par-4 #:format:glb-par-3 #:format:glb-par-2 #:format:glb-par-1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push nil)
(push '1)
(push (@ 101))
(push 'end-decode-parameter)
(push dlink)
(push tag)
(stack dlink)
102
(mov (cvalq #:format:glb-cf) a4)
(mov (cdr a4) (cvalq #:format:glb-cf))
(mov (car a4) (& 5))
(mov (& 5) a1)
(cabeq a1 '43 106)
(cabeq a1 '45 106)
(cabeq a1 '48 106)
(cabeq a1 '49 106)
(cabeq a1 '50 106)
(cabeq a1 '51 106)
(cabeq a1 '52 106)
(cabeq a1 '53 106)
(cabeq a1 '54 106)
(cabeq a1 '55 106)
(cabeq a1 '56 106)
(cabne a1 '57 105)
106
(jcall ncons)
(call #:format:read-n)
(mov a1 a2)
(mov (& 4) a1)
(call #:format:set-parameter)
(bra 102)
105
(cabne a1 '39 107)
(mov (cvalq #:format:glb-cf) a2)
(mov (cdr a2) (cvalq #:format:glb-cf))
(mov (car a2) a2)
(mov (& 4) a1)
(call #:format:set-parameter)
(bra 102)
107
(cabeq a1 '118 109)
(cabne a1 '86 108)
109
(mov (cvalq #:format:glb-ca) a4)
(mov (cdr a4) (cvalq #:format:glb-ca))
(push (car a4))
(btfix (& 0) 111)
(mov (& 0) a2)
(mov '#:format:error-parameter-nn a1)
(call #:format:error)
111
(mov (& 0) a2)
(mov (& 5) a1)
(call #:format:set-parameter)
(adjstk '1)
(bra 102)
108
(cabne a1 '35 112)
(mov (cvalq #:format:glb-ca) a1)
(jcall length)
(mov a1 a2)
(mov (& 4) a1)
(call #:format:set-parameter)
(bra 102)
112
(cabne a1 '44 113)
(mov (& 4) a4)
(plus '1 a4)
(mov a4 (& 4))
(bra 102)
113
(cabne a1 '64 114)
(mov 't (cvalq #:format:glb-atsgn))
(bra 102)
114
(cabne a1 '58 115)
(mov 't (cvalq #:format:glb-colon))
(bra 102)
115
(mov nil a1)
(mov 'end-decode-parameter a2)
(jmp #:llcp:exit)
103
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (& 1) a1)
(cabeq a1 '97 119)
(cabne a1 '65 118)
119
(call #:format:format-ascii)
(bra 117)
118
(cabeq a1 '115 121)
(cabne a1 '83 120)
121
(call #:format:format-sexpr)
(bra 117)
120
(cabeq a1 '100 123)
(cabne a1 '68 122)
123
(mov '10 a1)
(call #:format:format-integer)
(bra 117)
122
(cabeq a1 '98 125)
(cabne a1 '66 124)
125
(mov '2 a1)
(call #:format:format-integer)
(bra 117)
124
(cabeq a1 '111 127)
(cabne a1 '79 126)
127
(mov '8 a1)
(call #:format:format-integer)
(bra 117)
126
(cabeq a1 '120 129)
(cabne a1 '88 128)
129
(mov '16 a1)
(call #:format:format-integer)
(bra 117)
128
(cabeq a1 '114 131)
(cabne a1 '82 130)
131
(call #:format:format-radix)
(bra 117)
130
(cabeq a1 '112 133)
(cabne a1 '80 132)
133
(call #:format:format-plural)
(bra 117)
132
(cabeq a1 '99 135)
(cabne a1 '67 134)
135
(call #:format:format-char)
(bra 117)
134
(cabeq a1 '101 137)
(cabne a1 '69 136)
137
(mov (cvalq #:format:glb-ca) a1)
(mov (cdr a1) (cvalq #:format:glb-ca))
(mov (car a1) a1)
(call #:format:format-e-float)
(bra 117)
136
(cabeq a1 '102 139)
(cabne a1 '70 138)
139
(mov (cvalq #:format:glb-ca) a1)
(mov (cdr a1) (cvalq #:format:glb-ca))
(mov (car a1) a1)
(call #:format:format-f-float)
(bra 117)
138
(cabeq a1 '103 141)
(cabne a1 '71 140)
141
(mov (cvalq #:format:glb-ca) a1)
(mov (cdr a1) (cvalq #:format:glb-ca))
(mov (car a1) a1)
(call #:format:format-g-float)
(bra 117)
140
(cabne a1 '37 142)
(call #:format:format-nl)
(bra 117)
142
(cabne a1 '10 143)
(call #:format:format-eol)
(bra 117)
143
(cabne a1 '126 144)
(call #:format:format-tilde)
(bra 117)
144
(cabeq a1 '116 146)
(cabne a1 '84 145)
146
(call #:format:format-tab)
(bra 117)
145
(cabne a1 '42 147)
(call #:format:format-ignore)
(bra 117)
147
(cabne a1 '63 148)
(call #:format:format-indirect)
(bra 117)
148
(cabne a1 '91 149)
(call #:format:format-cond)
(bra 117)
149
(cabne a1 '123 150)
(mov nil a1)
(call #:format:format-iter)
(bra 117)
150
(cabne a1 '94 151)
(call #:format:format-hat)
(bra 117)
151
(cabne a1 '93 152)
(mov '"]" a2)
(mov '#:format:errfermant a1)
(call #:format:error)
(bra 117)
152
(cabne a1 '59 153)
(mov '";" a2)
(mov '#:format:errfermant a1)
(call #:format:error)
(bra 117)
153
(cabne a1 '125 154)
(mov '"}" a2)
(mov '#:format:errfermant a1)
(call #:format:error)
(bra 117)
154
(cabne a1 '41 155)
(mov '")" a2)
(mov '#:format:errfermant a1)
(call #:format:error)
(bra 117)
155
(cabne a1 '62 156)
(mov '">" a2)
(mov '#:format:errfermant a1)
(call #:format:error)
(bra 117)
156
(push (@ 158))
(push '126)
(push a1)
(mov '2 a4)
(jmp list)
158
(eval ())
(jcall string)
(mov a1 a2)
(mov 'format a1)
(call #:format:error)
117
(adjstk '2)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-par-1))
(mov (& 7) (cvalq #:format:glb-par-2))
(mov (& 8) (cvalq #:format:glb-par-3))
(mov (& 9) (cvalq #:format:glb-par-4))
(mov (& 10) (cvalq #:format:glb-par-5))
(mov (& 11) (cvalq #:format:glb-par-6))
(mov (& 12) (cvalq #:format:glb-par-7))
(mov (& 13) (cvalq #:format:glb-atsgn))
(mov (& 14) (cvalq #:format:glb-colon))
(adjstk '24)
(return)
))
(loader'((entry #:format:read-n subr1)
(push a1)
(mov (cvalq #:format:glb-cf) a4)
(push (car a4))
(mov (& 0) a1)
(jcall digitp)
(btnil a1 101)
(mov (cvalq #:format:glb-cf) a4)
(mov (cdr a4) (cvalq #:format:glb-cf))
(mov (& 1) a2)
(mov (& 0) a1)
(jcall cons)
(adjstk '2)
(bra #:format:read-n)
101
(mov (& 1) a1)
(jcall nreverse)
(jcall implode)
(bffix a1 103)
(adjstk '2)
(return)
103
(mov a1 a2)
(mov '#:format:error-parameter-nn a1)
(adjstk '2)
(bra #:format:error)
))
(loader'((entry #:format:format-pad subr3)
(push a3)
(push a2)
(push a1)
(mov a2 a4)
(bfnil a4 101)
(mov '0 a4)
101
(mov a4 (& 1))
(mov a3 a2)
(bfnil a2 102)
(mov '32 a2)
102
(mov a2 (& 2))
(jcall length)
(push a1)
(btnil (cvalq #:format:glb-atsgn) 103)
(mov (& 1) a1)
(call #:format:emit-l-chars)
(mov (& 2) a4)
(diff (& 0) a4)
(mov (& 3) a2)
(mov a4 a1)
(adjstk '4)
(bra #:format:emit-n-chars)
103
(mov (& 2) a4)
(diff a1 a4)
(mov (& 3) a2)
(mov a4 a1)
(call #:format:emit-n-chars)
(mov (& 1) a1)
(adjstk '4)
(bra #:format:emit-l-chars)
))
(loader'((entry #:format:format-pad4 subr1)
(push a1)
(mov (cvalq #:format:glb-par-1) a4)
(bfnil a4 101)
(mov '0 a4)
101
(push a4)
(mov (cvalq #:format:glb-par-2) a3)
(bfnil a3 102)
(mov '1 a3)
102
(push a3)
(mov (cvalq #:format:glb-par-3) a2)
(bfnil a2 103)
(mov '0 a2)
103
(push a2)
(mov (cvalq #:format:glb-par-4) a4)
(bfnil a4 104)
(mov '32 a4)
104
(push a4)
(jcall length)
(push a1)
(plus (& 2) a1)
(mov a1 (& 0))
(btnil (cvalq #:format:glb-atsgn) 109)
(mov (& 5) a1)
(call #:format:emit-l-chars)
(mov (& 1) a2)
(mov (& 2) a1)
(call #:format:emit-n-chars)
107
(cnbge (& 0) (& 4) 108)
(mov (& 1) a2)
(mov (& 3) a1)
(call #:format:emit-n-chars)
(mov (& 0) a4)
(plus (& 3) a4)
(mov a4 (& 0))
(bra 107)
108
(mov nil a1)
(adjstk '6)
(return)
109
(cnbge (& 0) (& 4) 110)
(mov (& 1) a2)
(mov (& 3) a1)
(call #:format:emit-n-chars)
(mov (& 0) a4)
(plus (& 3) a4)
(mov a4 (& 0))
(bra 109)
110
(mov (& 1) a2)
(mov (& 2) a1)
(call #:format:emit-n-chars)
(mov (& 5) a1)
(adjstk '6)
(bra #:format:emit-l-chars)
))
(loader'((entry #:format:float-pad nsubr)
(mov (& 0) a1)
(jcall nreverse)
(mov a1 (& 0))
(mov (& 1) a4)
(bfnil a4 101)
(mov '32 a4)
101
(mov a4 (& 1))
(jcall length)
(bfnil (& 3) 102)
(mov (& 0) a1)
(adjstk '4)
(bra #:format:emit-l-chars)
102
(btnil (& 2) 104)
(cnbge (& 3) a1 104)
(mov (& 2) a2)
(mov (& 3) a1)
(adjstk '4)
(bra #:format:emit-n-chars)
104
(mov (& 3) a4)
(diff a1 a4)
(mov (& 1) a2)
(mov a4 a1)
(call #:format:emit-n-chars)
(mov (& 0) a1)
(adjstk '4)
(bra #:format:emit-l-chars)
))
(loader'((entry #:format:format-ascii subr0)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:format-as-aux)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(return)
))
(loader'((entry #:format:format-sexpr subr0)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:format-as-aux)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(return)
))
(loader'((entry #:format:format-as-aux subr0)
(bfnil (cvalq #:format:glb-par-3) 103)
(btnil (cvalq #:format:glb-par-4) 101)
103
(mov (cvalq #:format:glb-ca) a1)
(mov (cdr a1) (cvalq #:format:glb-ca))
(mov (car a1) a1)
(jcall explode)
(bra #:format:format-pad4)
101
(mov (cvalq #:format:glb-ca) a1)
(mov (cdr a1) (cvalq #:format:glb-ca))
(mov (car a1) a1)
(jcall explode)
(mov (cvalq #:format:glb-par-2) a3)
(mov (cvalq #:format:glb-par-1) a2)
(bra #:format:format-pad)
))
(loader'((entry #:format:format-integer subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push (& 5))
(mov '1 a4)
(jmp obase)
104
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:glb-ca) a1)
(mov (cdr a1) (cvalq #:format:glb-ca))
(mov (car a1) a1)
(jcall explode)
(mov (cvalq #:format:glb-par-2) a3)
(mov (cvalq #:format:glb-par-1) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 105))
(push (& 4))
(mov '1 a4)
(jmp obase)
105
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:format:format-radix subr0)
(mov (cvalq #:format:glb-ca) a4)
(mov (cdr a4) (cvalq #:format:glb-ca))
(push (car a4))
(push (cvalq #:format:glb-par-1))
(btfix (& 0) 102)
(push (@ 103))
(push '"~")
(push (& 2))
(push '"R")
(mov '3 a4)
(jmp catenate)
103
(eval ())
(mov a1 a2)
(mov 'errsxt a1)
(call #:format:error)
102
(push (@ 104))
(mov '0 a4)
(jmp obase)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(push (& 5))
(mov '1 a4)
(jmp obase)
107
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 13) a1)
(jcall explode)
(mov (cvalq #:format:glb-par-3) a3)
(mov (cvalq #:format:glb-par-2) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp obase)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:format:format-plural subr0)
(btnil (cvalq #:format:glb-colon) 101)
(mov (cvalq #:format:glb-args) a1)
(jcall length)
(push a1)
(mov (cvalq #:format:glb-ca) a1)
(jcall length)
(plus '1 a1)
(pop a4)
(diff a1 a4)
(mov (cvalq #:format:glb-args) a2)
(mov a4 a1)
(jcall nth)
(mov a1 a4)
(bra 102)
101
(mov (cvalq #:format:glb-ca) a4)
(mov (cdr a4) (cvalq #:format:glb-ca))
(mov (car a4) a4)
102
(cabne a4 '1 103)
(btnil (cvalq #:format:glb-atsgn) 105)
(mov '121 a1)
(bra #:format:emit-char)
105
(mov nil a1)
(return)
103
(btnil (cvalq #:format:glb-atsgn) 107)
(mov '(105 101 115) a1)
(bra #:format:emit-l-chars)
107
(mov '115 a1)
(bra #:format:emit-char)
))
(loader'((entry #:format:format-char subr0)
(mov (cvalq #:format:glb-ca) a4)
(mov (cdr a4) (cvalq #:format:glb-ca))
(push (car a4))
(mov (& 0) a1)
(jcall asciip)
(bfnil a1 102)
(mov (& 0) a2)
(mov 'erroob a1)
(call #:format:error)
102
(btnil (cvalq #:format:glb-atsgn) 103)
(btnil (cvalq #:format:glb-colon) 103)
(mov '"~@:C" a2)
(mov 'errsxt a1)
(adjstk '1)
(bra #:format:error)
103
(btnil (cvalq #:format:glb-atsgn) 105)
(cabne (& 0) '127 107)
(mov '(35 92 100 101 108) a1)
(bra 108)
107
(cnble (& 0) '32 109)
(push (@ 111))
(push '35)
(push '47)
(push (& 3))
(mov '3 a4)
(jmp list)
111
(eval ())
(bra 108)
109
(cabne (& 0) '32 112)
(mov '(35 92 115 112) a1)
(bra 108)
112
(push (@ 114))
(push '35)
(push '94)
(mov '64 a4)
(lor (& 3) a4)
(push a4)
(mov '3 a4)
(jmp list)
114
(eval ())
108
(adjstk '1)
(bra #:format:emit-l-chars)
105
(btnil (cvalq #:format:glb-colon) 115)
(mov (cvalq #:format:char-names) a2)
(mov (& 0) a1)
(jcall cassq)
(btnil a1 117)
(jcall pname)
(adjstk '1)
(bra #:format:emit-l-chars)
117
(mov (& 0) a1)
(adjstk '1)
(bra #:format:emit-char)
115
(mov (& 0) a1)
(adjstk '1)
(bra #:format:emit-char)
))
(defvar #:format:char-names ())
(loader'((fentry #:format:set-char-names subr0)
(entry #:format:set-char-names subr0)
(push '0)
101
(push (@ 103))
(push (& 1))
(push '31)
(mov '2 a4)
(jmp <=)
103
(eval ())
(btnil a1 102)
(push (@ 104))
(push 'control-)
(mov '64 a4)
(lor (& 2) a4)
(mov a4 a1)
(jcall ascii)
(push a1)
(mov '2 a4)
(jmp concat)
104
(eval ())
(mov a1 a2)
(mov (& 0) a1)
(jcall cons)
(mov (cvalq #:format:char-names) a2)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(push (@ 105))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp |+|)
105
(eval ())
(mov a1 (& 0))
(bra 101)
102
(adjstk '1)
(mov (cvalq #:format:char-names) a2)
(mov '(0 . null) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(mov a1 a2)
(mov '(7 . bell) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(mov a1 a2)
(mov '(8 . back-space) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(mov a1 a2)
(mov '(9 . tab) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(mov a1 a2)
(mov '(10 . line-feed) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(mov a1 a2)
(mov '(13 . return) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(mov a1 a2)
(mov '(27 . escape) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(mov a1 a2)
(mov '(32 . space) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(mov a1 a2)
(mov '(127 . delete) a1)
(jcall cons)
(mov a1 (cvalq #:format:char-names))
(return)
))
(#:format:set-char-names)
(loader'((entry #:format:format-nl subr0)
(mov (cvalq #:format:glb-par-1) a4)
(bfnil a4 102)
(mov '1 a4)
(bra 102)
101
(push a4)
(mov '13 a1)
(call #:format:emit-char)
(mov '10 a1)
(call #:format:emit-char)
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(return)
))
(loader'((entry #:format:format-eol subr0)
(btnil (cvalq #:format:glb-atsgn) 101)
(btnil (cvalq #:format:glb-colon) 101)
(mov '"~@:#\LF" a2)
(mov 'errsxt a1)
(bra #:format:error)
101
(btnil (cvalq #:format:glb-atsgn) 103)
(mov '10 a1)
(call #:format:emit-char)
105
(push (@ 107))
(mov (cvalq #:format:glb-cf) a4)
(push (car a4))
(mov '1 a4)
(jmp typecn)
107
(eval ())
(cabne a1 'csep 106)
(mov (cvalq #:format:glb-cf) a4)
(mov (cdr a4) (cvalq #:format:glb-cf))
(bra 105)
106
(mov nil a1)
(return)
103
(mov (cvalq #:format:glb-colon) a1)
(bfnil a1 29999)
109
(push (@ 111))
(mov (cvalq #:format:glb-cf) a4)
(push (car a4))
(mov '1 a4)
(jmp typecn)
111
(eval ())
(cabne a1 'csep 110)
(mov (cvalq #:format:glb-cf) a4)
(mov (cdr a4) (cvalq #:format:glb-cf))
(bra 109)
110
(mov nil a1)
(return)
29999
(return)
))
(loader'((entry #:format:format-tilde subr0)
(mov (cvalq #:format:glb-par-1) a1)
(bfnil a1 101)
(mov '1 a1)
101
(mov '126 a2)
(bra #:format:emit-n-chars)
))
(loader'((entry #:format:format-tab subr0)
(mov (cvalq #:format:glb-par-1) a4)
(bfnil a4 101)
(mov '1 a4)
101
(push a4)
(mov (cvalq #:format:glb-par-2) a3)
(bfnil a3 102)
(mov '1 a3)
102
(push a3)
(mov '10 a2)
(mov (cvalq #:format:glb-res) a1)
(jcall memq)
(bfnil a1 103)
(mov (cvalq #:format:glb-res) a1)
(jcall length)
(mov a1 a2)
(bra 104)
103
(mov (cvalq #:format:glb-res) a1)
(jcall length)
(push a1)
(mov '10 a2)
(mov (cvalq #:format:glb-res) a1)
(jcall memq)
(jcall length)
(pop a4)
(diff a1 a4)
(mov a4 a2)
104
(push nil)
(push nil)
(push nil)
(btnil (cvalq #:format:glb-atsgn) 105)
(mov (& 4) (& 2))
(plus (& 4) a2)
(mov a2 (& 1))
(bra 106)
105
(cnbge a2 (& 4) 107)
(mov (& 4) a4)
(diff a2 a4)
(mov a4 (& 2))
(mov (& 4) (& 1))
(bra 106)
107
(mov '0 (& 2))
(mov a2 (& 1))
106
(btnil (cvalq #:format:glb-atsgn) 109)
(mov '0 a4)
(bra 110)
109
(mov (& 4) a4)
110
(mov (& 1) a3)
(diff a4 a3)
(rem (& 3) a3)
(mov a3 (& 0))
(cabeq a3 '0 112)
(mov (& 3) a4)
(diff a3 a4)
(mov (& 2) a2)
(plus a4 a2)
(mov a2 (& 2))
112
(mov '32 a2)
(mov (& 2) a1)
(adjstk '5)
(bra #:format:emit-n-chars)
))
(loader'((entry #:format:format-ignore subr0)
(mov (cvalq #:format:glb-par-1) a4)
(bfnil a4 101)
(btnil (cvalq #:format:glb-atsgn) 102)
(mov '0 a4)
(bra 101)
102
(mov '1 a4)
101
(push a4)
(btnil (cvalq #:format:glb-atsgn) 104)
(btnil (cvalq #:format:glb-colon) 104)
(mov '"~@:*" a2)
(mov 'errsxt a1)
(adjstk '1)
(bra #:format:error)
104
(btnil (cvalq #:format:glb-atsgn) 106)
(mov (cvalq #:format:glb-args) a2)
(mov a4 a1)
(jcall nthcdr)
(mov a1 a3)
(bra 107)
106
(btnil (cvalq #:format:glb-colon) 108)
(mov (cvalq #:format:glb-args) a1)
(jcall length)
(push a1)
(mov (cvalq #:format:glb-ca) a1)
(jcall length)
(pop a4)
(diff a1 a4)
(diff (& 0) a4)
(mov (cvalq #:format:glb-args) a2)
(mov a4 a1)
(jcall nthcdr)
(mov a1 a3)
(bra 107)
108
(mov (cvalq #:format:glb-ca) a2)
(mov a4 a1)
(jcall nthcdr)
(mov a1 a3)
107
(mov a3 (cvalq #:format:glb-ca))
(mov a3 a1)
(adjstk '1)
(return)
))
(loader'((entry #:format:format-indirect subr0)
(mov (cvalq #:format:glb-ca) a4)
(mov (cdr a4) (cvalq #:format:glb-ca))
(push (car a4))
(bfstrg (& 0) 101)
(mov (& 0) a1)
(jcall pname)
(mov a1 (& 0))
(bra 102)
101
(mov (& 0) a2)
(mov 'errnsa a1)
(call #:format:error)
102
(push (& 0))
(push (& 1))
(push (cvalq #:format:glb-cf))
(mov (& 1) (cvalq #:format:glb-cf))
(push (cvalq #:format:glb-format))
(mov (& 3) (cvalq #:format:glb-format))
(push '2)
(push '(#:format:glb-cf #:format:glb-format))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (cvalq #:format:glb-atsgn) 103)
(call #:format:tag-format-scan)
(bra 104)
103
(mov (cvalq #:format:glb-ca) a4)
(mov (cdr a4) (cvalq #:format:glb-ca))
(push (car a4))
(push (cvalq #:format:glb-ca))
(mov (& 1) (cvalq #:format:glb-ca))
(push '1)
(push '(#:format:glb-ca))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:format:glb-ca))
(push (cvalq #:format:glb-args))
(mov (& 1) (cvalq #:format:glb-args))
(push '1)
(push '(#:format:glb-args))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:glb-ca) a1)
(jcall listp)
(bfnil a1 106)
(mov (cvalq #:format:glb-ca) a2)
(mov 'errnla a1)
(call #:format:error)
106
(call #:format:tag-format-scan)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-args))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-ca))
(adjstk '8)
104
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-format))
(mov (& 7) (cvalq #:format:glb-cf))
(adjstk '11)
(return)
))
(loader'((entry #:format:format-cond subr0)
(btnil (cvalq #:format:glb-atsgn) 101)
(btnil (cvalq #:format:glb-colon) 101)
(mov '"~@:[" a2)
(mov 'errsxt a1)
(bra #:format:error)
101
(btnil (cvalq #:format:glb-atsgn) 103)
(mov (cvalq #:format:glb-ca) a4)
(mov (car a4) (cvalq #:format:glb-par-1))
(bfnil (cvalq #:format:glb-par-1) 105)
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov nil a3)
(mov '0 a2)
(mov (car a1) a1)
(call #:format:search-cond)
(mov (cvalq #:format:glb-ca) a1)
(mov (cdr a1) (cvalq #:format:glb-ca))
(mov (car a1) a1)
(return)
105
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov nil a3)
(mov '0 a2)
(mov (car a1) a1)
(call #:format:search-cond)
(push (cvalq #:format:glb-format))
(mov a1 (cvalq #:format:glb-format))
(push '1)
(push '(#:format:glb-format))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:format:glb-cf))
(mov a1 (cvalq #:format:glb-cf))
(push '1)
(push '(#:format:glb-cf))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:format-scan)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-cf))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-format))
(adjstk '7)
(return)
103
(btnil (cvalq #:format:glb-colon) 107)
(mov (cvalq #:format:glb-ca) a4)
(mov (car a4) (cvalq #:format:glb-par-1))
(mov (cdr a4) (cvalq #:format:glb-ca))
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(btnil (cvalq #:format:glb-par-1) 109)
(mov '1 a2)
(bra 110)
109
(mov '0 a2)
110
(mov nil a3)
(mov (car a1) a1)
(call #:format:search-cond)
(push (cvalq #:format:glb-format))
(mov a1 (cvalq #:format:glb-format))
(push '1)
(push '(#:format:glb-format))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:format:glb-cf))
(mov a1 (cvalq #:format:glb-cf))
(push '1)
(push '(#:format:glb-cf))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:format-scan)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-cf))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-format))
(adjstk '7)
(return)
107
(bfnil (cvalq #:format:glb-par-1) 112)
(mov (cvalq #:format:glb-ca) a4)
(mov (car a4) (cvalq #:format:glb-par-1))
(mov (cdr a4) (cvalq #:format:glb-ca))
112
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov nil a3)
(mov (cvalq #:format:glb-par-1) a2)
(mov (car a1) a1)
(call #:format:search-cond)
(push (cvalq #:format:glb-format))
(mov a1 (cvalq #:format:glb-format))
(push '1)
(push '(#:format:glb-format))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:format:glb-cf))
(mov a1 (cvalq #:format:glb-cf))
(push '1)
(push '(#:format:glb-cf))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:format-scan)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-cf))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-format))
(adjstk '7)
(return)
))
(loader'((entry #:format:search-cond subr3)
(push a3)
(push a2)
(push a1)
(bfnil a1 102)
(mov '"~[..." a2)
(mov 'errsxt a1)
(call #:format:error)
102
(mov (& 1) a1)
(jcall zerop)
(btnil a1 103)
(mov (& 0) a1)
(cabne a1 '126 106)
(mov (cvalq #:format:glb-cf) a4)
(mov (cdr a4) (cvalq #:format:glb-cf))
(push (car a4))
(mov (& 0) a1)
(cabne a1 '() 108)
(mov (cvalq #:format:glb-cf) a2)
(mov '#:format:format-cond a1)
(adjstk '4)
(bra #:format:error)
108
(cabne a1 '93 109)
(mov (& 3) a1)
(adjstk '4)
(return)
109
(cabne a1 '59 110)
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov nil a3)
(mov '-1 a2)
(mov (car a1) a1)
(call #:format:search-cond)
(mov (& 3) a1)
(adjstk '4)
(return)
110
(cabne a1 '58 111)
(mov (cvalq #:format:glb-cf) a4)
(cabne (car a4) '59 112)
(mov (cdr a4) (cvalq #:format:glb-cf))
(mov nil a3)
(mov '-1 a2)
(mov (car a4) a1)
(call #:format:search-cond)
(mov (& 3) a1)
(adjstk '4)
(return)
112
(mov (cdr a4) (cvalq #:format:glb-cf))
(push (car a4))
(push (@ 114))
(push (& 5))
(push (@ 115))
(push (& 5))
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
114
(eval ())
(mov a1 a3)
(mov (& 3) a2)
(pop a1)
(adjstk '4)
(bra #:format:search-cond)
111
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(push (car a1))
(push (@ 117))
(push (& 5))
(push (@ 118))
(push (& 5))
(push (& 5))
(mov '2 a4)
(jmp list)
118
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
117
(eval ())
(mov a1 a3)
(mov (& 3) a2)
(pop a1)
(adjstk '4)
(bra #:format:search-cond)
106
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(push (car a1))
(mov (& 1) a2)
(mov (& 3) a1)
(jcall nconc1)
(mov a1 a3)
(mov (& 2) a2)
(pop a1)
(adjstk '3)
(bra #:format:search-cond)
103
(cabeq (& 0) '126 120)
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov nil a3)
(mov (& 1) a2)
(mov (car a1) a1)
(adjstk '3)
(bra #:format:search-cond)
120
(mov (cvalq #:format:glb-cf) a4)
(mov (car a4) (& 0))
(mov (cdr a4) (cvalq #:format:glb-cf))
(mov (& 0) a1)
(cabne a1 '() 123)
(mov '"~[..." a2)
(mov 'errsxt a1)
(adjstk '3)
(bra #:format:error)
123
(cabne a1 '93 124)
(mov nil a1)
(adjstk '3)
(return)
124
(cabne a1 '59 125)
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(push (car a1))
(mov (& 2) a1)
(jcall |1-|)
(mov nil a3)
(mov a1 a2)
(pop a1)
(adjstk '3)
(bra #:format:search-cond)
125
(cabne a1 '58 126)
(mov (cvalq #:format:glb-cf) a4)
(mov (car a4) (& 0))
(mov (cdr a4) (cvalq #:format:glb-cf))
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(cabne (& 0) '59 127)
(mov '0 a2)
(bra 128)
127
(mov (& 1) a2)
128
(mov nil a3)
(mov (car a1) a1)
(adjstk '3)
(bra #:format:search-cond)
126
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov nil a3)
(mov (& 1) a2)
(mov (car a1) a1)
(adjstk '3)
(bra #:format:search-cond)
))
(loader'((entry #:format:format-iter subr1)
(push (cvalq #:format:iter-colon))
(mov a1 (cvalq #:format:iter-colon))
(push '1)
(push '(#:format:iter-colon))
(push (@ #:format:format-iter))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:glb-par-1) a4)
(bfnil a4 101)
(mov '-1 a4)
101
(push a4)
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov nil a3)
(mov nil a2)
(mov (car a1) a1)
(call #:format:search-iter)
(push nil)
(push nil)
(push (cvalq #:format:glb-format))
(mov a1 (cvalq #:format:glb-format))
(push (cvalq #:format:glb-cf))
(mov (& 2) (cvalq #:format:glb-cf))
(push (cvalq #:format:iter-n-first))
(mov (& 4) (cvalq #:format:iter-n-first))
(push (cvalq #:format:iter-n))
(mov (& 6) (cvalq #:format:iter-n))
(push '4)
(push '(#:format:glb-format #:format:glb-cf #:format:iter-n-first #:format:iter-n))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(cabeq (cvalq #:format:iter-n) '0 102)
(bfnil a1 105)
(mov (cvalq #:format:glb-ca) a4)
(mov (cdr a4) (cvalq #:format:glb-ca))
(mov (car a4) (cvalq #:format:glb-format))
(btstrg (cvalq #:format:glb-format) 107)
(mov (cvalq #:format:glb-format) a2)
(mov 'errnsa a1)
(call #:format:error)
107
(mov (cvalq #:format:glb-format) a1)
(jcall pname)
(mov a1 (cvalq #:format:glb-format))
105
(mov (cvalq #:format:iter-n) (cvalq #:format:iter-n-first))
(mov a1 (cvalq #:format:glb-cf))
(btnil (cvalq #:format:glb-atsgn) 108)
(btnil (cvalq #:format:glb-colon) 108)
(push (@ 110))
(push 'colon-hat)
(push dlink)
(push tag)
(stack dlink)
(mov (cvalq #:format:glb-ca) a1)
(call #:format:iter-colon)
(mov (& 1) dlink)
(adjstk '4)
110
(eval ())
(bra 103)
108
(btnil (cvalq #:format:glb-atsgn) 111)
(push (@ 113))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(call #:format:iter)
(mov (& 1) dlink)
(adjstk '4)
113
(eval ())
(bra 103)
111
(btnil (cvalq #:format:glb-colon) 114)
(push (@ 116))
(push 'colon-hat)
(push dlink)
(push tag)
(stack dlink)
(mov (cvalq #:format:glb-ca) a1)
(mov (cdr a1) (cvalq #:format:glb-ca))
(mov (car a1) a1)
(call #:format:iter-colon)
(mov (& 1) dlink)
(adjstk '4)
116
(eval ())
(bra 103)
114
(mov (cvalq #:format:glb-ca) a4)
(mov (cdr a4) (cvalq #:format:glb-ca))
(push (car a4))
(push (car a4))
(push (cvalq #:format:glb-ca))
(mov (& 1) (cvalq #:format:glb-ca))
(push (cvalq #:format:glb-args))
(mov (& 3) (cvalq #:format:glb-args))
(push '2)
(push '(#:format:glb-ca #:format:glb-args))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 117))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(call #:format:iter)
(mov (& 1) dlink)
(adjstk '4)
117
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-args))
(mov (& 7) (cvalq #:format:glb-ca))
(adjstk '10)
(bra 103)
102
(mov nil a1)
103
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:iter-n))
(mov (& 7) (cvalq #:format:iter-n-first))
(mov (& 8) (cvalq #:format:glb-cf))
(mov (& 9) (cvalq #:format:glb-format))
(adjstk '13)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:iter-colon))
(adjstk '7)
(return)
))
(loader'((entry #:format:search-iter subr3)
(push a3)
(push a1)
(bfnil a1 101)
(mov '"~}" a2)
(mov 'errsxt a1)
(adjstk '2)
(bra #:format:error)
101
(cabne a1 '126 103)
(mov (cvalq #:format:glb-cf) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (cvalq #:format:glb-cf))
(cabne (& 1) '125 105)
(mov a2 a1)
(adjstk '2)
(return)
105
(cabne (& 1) '58 107)
(mov (cvalq #:format:glb-cf) a4)
(cabne (car a4) '125 107)
(mov 't (cvalq #:format:iter-colon))
(mov (cvalq #:format:glb-cf) a4)
(mov (cdr a4) (cvalq #:format:glb-cf))
(mov a2 a1)
(adjstk '2)
(return)
107
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(push (car a1))
(push (@ 109))
(push a2)
(push (@ 110))
(push (& 4))
(push (& 6))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
109
(eval ())
(mov nil a3)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:format:search-iter)
103
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(push (car a1))
(push a2)
(mov (& 2) a2)
(pop a1)
(jcall nconc1)
(mov nil a3)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:format:search-iter)
))
(loader'((entry #:format:iter subr0)
(bfnil (cvalq #:format:glb-format) 102)
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
102
(bfnil (cvalq #:format:glb-ca) 104)
(bfnil (cvalq #:format:iter-colon) 104)
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
104
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov (car a1) a1)
(bra #:format:iter-loop)
))
(loader'((entry #:format:iter-loop subr1)
(cabne (cvalq #:format:iter-n) '0 101)
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
101
(bfnil a1 103)
(bfnil (cvalq #:format:glb-ca) 106)
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
106
(mov (cvalq #:format:iter-n) a4)
(diff '1 a4)
(mov a4 (cvalq #:format:iter-n))
(mov (cvalq #:format:glb-format) (cvalq #:format:glb-cf))
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov (car a1) a1)
(call #:format:iter-loop)
(bra 102)
103
(cabne a1 '126 107)
(call #:format:tilde-decode)
(bra 102)
107
(call #:format:emit-char)
102
(mov (cvalq #:format:glb-cf) a1)
(mov (cdr a1) (cvalq #:format:glb-cf))
(mov (car a1) a1)
(bra #:format:iter-loop)
))
(loader'((entry #:format:iter-colon subr1)
(push (cvalq sub-args))
(mov a1 (cvalq sub-args))
(push '1)
(push '(sub-args))
(push (@ #:format:iter-colon))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil (cvalq #:format:glb-format) 102)
(mov nil a1)
(mov 'colon-hat a2)
(jmp #:llcp:exit)
102
(mov (cvalq sub-args) a1)
(mov (cdr a1) (cvalq sub-args))
(mov (car a1) a2)
(mov (car a1) a1)
(call #:format:iter-colon-loop)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq sub-args))
(adjstk '7)
(return)
))
(loader'((entry #:format:iter-colon-loop subr2)
(push (cvalq #:format:glb-ca))
(mov a2 (cvalq #:format:glb-ca))
(push (cvalq #:format:glb-args))
(mov a1 (cvalq #:format:glb-args))
(push '2)
(push '(#:format:glb-ca #:format:glb-args))
(push (@ #:format:iter-colon-loop))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil a2 102)
(bfnil (cvalq sub-args) 102)
(cabne (cvalq #:format:iter-n) (cvalq #:format:iter-n-first) 103)
(bfnil (cvalq #:format:iter-colon) 102)
103
(mov nil a1)
(mov 'colon-hat a2)
(jmp #:llcp:exit)
102
(cabne (cvalq #:format:iter-n) '0 105)
(mov nil a1)
(mov 'colon-hat a2)
(jmp #:llcp:exit)
105
(mov (cvalq #:format:iter-n) a4)
(diff '1 a4)
(mov a4 (cvalq #:format:iter-n))
(push (cvalq #:format:glb-format))
(push (cvalq #:format:glb-cf))
(mov (& 1) (cvalq #:format:glb-cf))
(push '1)
(push '(#:format:glb-cf))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:tag-format-scan)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-cf))
(adjstk '8)
(mov (cvalq sub-args) a1)
(mov (cdr a1) (cvalq sub-args))
(mov (car a1) a2)
(mov (car a1) a1)
(call #:format:iter-colon-loop)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:glb-args))
(mov (& 7) (cvalq #:format:glb-ca))
(adjstk '8)
(return)
))
(loader'((entry #:format:format-hat subr0)
(bfnil (cvalq #:format:glb-par-1) 102)
(mov (cvalq #:format:glb-ca) a1)
(jcall length)
(mov a1 (cvalq #:format:glb-par-1))
102
(bfnil (cvalq #:format:glb-par-2) 106)
(bfnil (cvalq #:format:glb-par-3) 106)
(cabeq (cvalq #:format:glb-par-1) '0 105)
106
(btnil (cvalq #:format:glb-par-2) 107)
(bfnil (cvalq #:format:glb-par-3) 107)
(cabeq (cvalq #:format:glb-par-1) (cvalq #:format:glb-par-2) 105)
107
(btnil (cvalq #:format:glb-par-2) 103)
(btnil (cvalq #:format:glb-par-3) 103)
(cnble (cvalq #:format:glb-par-1) (cvalq #:format:glb-par-2) 105)
(cnbgt (cvalq #:format:glb-par-2) (cvalq #:format:glb-par-3) 103)
105
(btnil (cvalq #:format:glb-colon) 109)
(mov nil a1)
(mov 'colon-hat a2)
(jmp #:llcp:exit)
109
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
103
(mov nil a1)
(return)
))
(loader'((entry #:format:imin subr2)
(cnbge a1 a2 101)
(return)
101
(mov a2 a1)
(return)
))
(loader'((entry #:format:imax subr2)
(cnble a1 a2 101)
(return)
101
(mov a2 a1)
(return)
))
(loader'((entry #:format:float-digits subr3)
(push a2)
(push a1)
(plus '1 a3)
(mov '0 a4)
(diff a3 a4)
(mov a4 a2)
(mov '10 a1)
(jcall power)
(pop a4)
(ftimes a1 a4)
(push a4)
(mov '0 a3)
(diff (& 1) a3)
(mov a3 a2)
(mov '10 a1)
(jcall power)
(mov '.5 a4)
(ftimes a1 a4)
(mov (& 0) a3)
(fplus a4 a3)
(push a3)
(push nil)
(push nil)
(mov a3 a1)
(jcall fix)
(push a1)
(mov (& 4) a1)
(jcall fix)
(pop a4)
(cnble a4 a1 103)
(mov (& 3) (& 2))
103
(cnble (& 4) '0 104)
(mov (& 2) a4)
(ftimes '10. a4)
(mov a4 a1)
(jcall fix)
(mov a1 (& 0))
(mov '48 a4)
(plus a1 a4)
(mov (& 1) a2)
(mov a4 a1)
(jcall cons)
(mov a1 (& 1))
(push (@ 105))
(mov (& 3) a4)
(ftimes '10. a4)
(push a4)
(push (& 2))
(mov '2 a4)
(jmp |-|)
105
(eval ())
(mov a1 (& 2))
(mov (& 4) a4)
(diff '1 a4)
(mov a4 (& 4))
(bra 103)
104
(mov (& 1) a1)
(adjstk '5)
(jmp nreverse)
))
(loader'((entry #:format:format-f-float subr1)
(push a1)
(jcall numberp)
(bfnil a1 101)
(push (@ 103))
(mov '0 a4)
(jmp obase)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push '10)
(mov '1 a4)
(jmp obase)
106
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(jcall explode)
(mov (cvalq #:format:glb-par-5) a3)
(mov (cvalq #:format:glb-par-1) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 107))
(push (& 4))
(mov '1 a4)
(jmp obase)
107
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '2)
(return)
101
(btfloat (& 0) 109)
(mov (& 0) a1)
(jcall float)
(mov a1 (& 0))
109
(btnil (cvalq #:format:glb-par-3) 111)
(push (@ 112))
(push (& 1))
(mov (cvalq #:format:glb-par-3) a2)
(mov '10 a1)
(jcall power)
(push a1)
(mov '2 a4)
(jmp *)
112
(eval ())
(mov a1 (& 0))
111
(cfbge (& 0) '0. 113)
(mov '45 a1)
(jcall ncons)
(mov a1 a4)
(bra 114)
113
(btnil (cvalq #:format:glb-atsgn) 115)
(mov '43 a1)
(jcall ncons)
(mov a1 a4)
(bra 114)
115
(mov nil a4)
114
(push a4)
(cfbge (& 1) '0. 118)
(mov '0. a3)
(fdiff (& 1) a3)
(mov a3 (& 1))
118
(bfnil (cvalq #:format:glb-par-1) 121)
(btnil (cvalq #:format:glb-par-2) 119)
121
(cfbne (& 1) '0. 122)
(mov '0 a3)
(bra 123)
122
(mov (& 1) a1)
(jcall log10)
(jcall fix)
(mov a1 a3)
123
(push a3)
(mov (cvalq #:format:glb-par-1) a4)
(bfnil a4 124)
(mov '100 a4)
124
(push a4)
(mov (cvalq #:format:glb-par-2) a2)
(bfnil a2 125)
(push (@ 126))
(push a4)
(push '2)
(push (@ 127))
(push a3)
(push '0)
(mov '2 a4)
(jmp max)
127
(eval ())
(push a1)
(mov (& 6) a1)
(jcall length)
(push a1)
(mov '4 a4)
(jmp |-|)
126
(eval ())
(mov a1 a2)
(mov '0 a1)
(call #:format:imax)
(mov a1 a2)
125
(push a2)
(mov (& 2) a4)
(plus '1 a4)
(plus a4 a2)
(mov (& 2) a3)
(mov (& 4) a1)
(call #:format:float-digits)
(push a1)
(cnbge (& 3) '0 128)
(mov '-1 a4)
(diff (& 3) a4)
(mov (& 1) a2)
(mov a4 a1)
(call #:format:imin)
(push a1)
(mov (& 3) a4)
(diff (& 2) a4)
(cabne a4 '1 132)
(bfnil (cvalq #:format:glb-atsgn) 132)
(cfbgt (& 6) '0. 131)
132
(mov (& 5) a2)
(mov '48 a1)
(jcall cons)
(mov a1 (& 5))
131
(mov (& 5) a2)
(mov '46 a1)
(jcall cons)
(mov a1 (& 5))
(cfbne (& 6) '0. 133)
(mov (& 0) a4)
(bra 136)
135
(push a4)
(mov (& 6) a2)
(mov '48 a1)
(jcall cons)
(mov a1 (& 6))
(pop a4)
136
(sobgez a4 135)
(bra 134)
133
(cabeq (& 0) (& 2) 137)
(mov (& 0) a4)
(bra 140)
139
(push a4)
(mov (& 6) a2)
(mov '48 a1)
(jcall cons)
(mov a1 (& 6))
(pop a4)
140
(sobgez a4 139)
(mov (& 2) a4)
(diff (& 0) a4)
(bra 142)
141
(push a4)
(mov (& 2) a1)
(mov (cdr a1) (& 2))
(mov (& 6) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 6))
(pop a4)
142
(sobgez a4 141)
(bra 134)
137
(mov (& 0) a4)
(bra 144)
143
(push a4)
(mov (& 6) a2)
(mov '48 a1)
(jcall cons)
(mov a1 (& 6))
(pop a4)
144
(sobgez a4 143)
134
(adjstk '1)
(bra 129)
128
(mov (& 3) a4)
(plus '1 a4)
(bra 146)
145
(push a4)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (& 5) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 5))
(pop a4)
146
(sobgez a4 145)
(mov (& 4) a2)
(mov '46 a1)
(jcall cons)
(mov a1 (& 4))
(mov (& 1) a4)
(bra 148)
147
(push a4)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (& 5) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 5))
(pop a4)
148
(sobgez a4 147)
129
(adjstk '4)
(bra 120)
119
(mov (& 1) a1)
(jcall explode)
120
(push (@ 149))
(push (cvalq #:format:glb-par-1))
(push (cvalq #:format:glb-par-4))
(push (cvalq #:format:glb-par-5))
(push (& 4))
(mov '4 a4)
(bra #:format:float-pad)
149
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:format:format-e-float subr1)
(push a1)
(jcall numberp)
(bfnil a1 101)
(push (@ 103))
(mov '0 a4)
(jmp obase)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push '10)
(mov '1 a4)
(jmp obase)
106
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(jcall explode)
(mov (cvalq #:format:glb-par-6) a3)
(mov (cvalq #:format:glb-par-1) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 107))
(push (& 4))
(mov '1 a4)
(jmp obase)
107
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '2)
(return)
101
(btfloat (& 0) 109)
(mov (& 0) a1)
(jcall float)
(mov a1 (& 0))
109
(bfnil (cvalq #:format:glb-par-4) 111)
(mov '1 (cvalq #:format:glb-par-4))
111
(cfbge (& 0) '0. 112)
(mov '45 a1)
(jcall ncons)
(mov a1 a4)
(bra 113)
112
(btnil (cvalq #:format:glb-atsgn) 114)
(mov '43 a1)
(jcall ncons)
(mov a1 a4)
(bra 113)
114
(mov nil a4)
113
(push a4)
(cfbge (& 1) '0. 117)
(mov '0. a3)
(fdiff (& 1) a3)
(mov a3 (& 1))
117
(bfnil (cvalq #:format:glb-par-1) 120)
(bfnil (cvalq #:format:glb-par-2) 120)
(btnil (cvalq #:format:glb-par-3) 118)
120
(cfbne (& 1) '0. 121)
(mov '0 a3)
(bra 122)
121
(mov (& 1) a1)
(jcall log10)
(jcall floor)
(mov a1 a3)
122
(mov (cvalq #:format:glb-par-1) a4)
(bfnil a4 123)
(mov '100 a4)
123
(push nil)
(push nil)
(push a3)
(push (cvalq #:format:glb-par-1))
(mov a4 (cvalq #:format:glb-par-1))
(push '1)
(push '(#:format:glb-par-1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 124))
(push a3)
(push (cvalq #:format:glb-par-4))
(push '-1)
(mov '3 a4)
(jmp |-|)
124
(eval ())
(call #:format:float-exp)
(mov a1 (& 9))
(jcall length)
(mov a1 (& 8))
(cabne a1 (cvalq #:format:glb-par-1) 125)
(mov (& 9) (& 10))
(bra 126)
125
(push (@ 127))
(push (& 12))
(push (cvalq #:format:glb-par-1))
(push a1)
(mov (& 14) a1)
(jcall length)
(pop a4)
(plus a1 a4)
(pop a3)
(diff a4 a3)
(push a3)
(push (& 10))
(push (& 14))
(mov '4 a4)
(bra #:format:float-e)
127
(eval ())
(mov a1 (& 10))
(push (@ 128))
(mov (& 10) a1)
(jcall nreverse)
(push a1)
(push (& 12))
(mov '2 a4)
(jmp append)
128
(eval ())
(mov a1 (& 10))
126
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-par-1))
(adjstk '10)
(bra 119)
118
(mov (& 1) a1)
(jcall explode)
119
(push (@ 129))
(push (cvalq #:format:glb-par-1))
(push (cvalq #:format:glb-par-5))
(push (cvalq #:format:glb-par-6))
(push (& 4))
(mov '4 a4)
(bra #:format:float-pad)
129
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:format:float-exp subr1)
(push a1)
(jcall abs)
(jcall pname)
(push a1)
(jcall length)
(push nil)
(btnil (cvalq #:format:glb-par-5) 101)
(btnil (cvalq #:format:glb-par-3) 101)
(cnbge (cvalq #:format:glb-par-3) a1 101)
(mov (cvalq #:format:glb-par-5) a2)
(mov (cvalq #:format:glb-par-1) a1)
(jcall makelist)
(mov a1 (& 0))
(bra 102)
101
(push (@ 103))
(push (& 1))
(btnil (cvalq #:format:glb-par-3) 104)
(mov (cvalq #:format:glb-par-3) a4)
(diff a1 a4)
(mov '48 a2)
(mov a4 a1)
(jcall makelist)
(mov a1 a4)
(bra 105)
104
(mov nil a4)
105
(push a4)
(push (& 4))
(mov '3 a4)
(jmp nconc)
103
(eval ())
(mov a1 (& 0))
102
(push (@ 108))
(push (& 3))
(push '0)
(mov '2 a4)
(jmp >=)
108
(eval ())
(btnil a1 106)
(mov '43 a1)
(bra 107)
106
(mov '45 a1)
107
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(mov (cvalq #:format:glb-par-7) a1)
(bfnil a1 109)
(mov '101 a1)
109
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(adjstk '3)
(return)
))
(loader'((entry #:format:float-e nsubr)
(bfnil (cvalq #:format:glb-par-2) 102)
(mov (& 2) a4)
(diff '2 a4)
(mov a4 (cvalq #:format:glb-par-2))
102
(cabne (cvalq #:format:glb-par-4) '0 103)
(mov '0 a2)
(mov (cvalq #:format:glb-par-2) a1)
(call #:format:imax)
(mov a1 (cvalq #:format:glb-par-2))
(push (@ 105))
(push '0)
(push '0)
(push a1)
(push (& 6))
(push (& 5))
(mov (& 7) a3)
(mov a1 a2)
(mov (& 9) a1)
(call #:format:float-digits)
(push a1)
(mov '6 a4)
(bra #:format:float-e-1)
105
(eval ())
(adjstk '4)
(return)
103
(cnble (cvalq #:format:glb-par-4) '0 106)
(mov (cvalq #:format:glb-par-4) a4)
(diff '1 a4)
(mov a4 a2)
(mov (cvalq #:format:glb-par-2) a1)
(call #:format:imax)
(mov a1 (cvalq #:format:glb-par-2))
(push (@ 108))
(push (cvalq #:format:glb-par-4))
(push '0)
(push (@ 109))
(push a1)
(push '-1)
(push (cvalq #:format:glb-par-4))
(mov '3 a4)
(jmp |-|)
109
(eval ())
(push a1)
(push (& 6))
(push (& 5))
(mov (cvalq #:format:glb-par-2) a4)
(plus '1 a4)
(mov (& 7) a3)
(mov a4 a2)
(mov (& 9) a1)
(call #:format:float-digits)
(push a1)
(mov '6 a4)
(bra #:format:float-e-1)
108
(eval ())
(adjstk '4)
(return)
106
(mov '1 a4)
(diff (cvalq #:format:glb-par-4) a4)
(mov a4 a2)
(mov (cvalq #:format:glb-par-2) a1)
(call #:format:imax)
(mov a1 (cvalq #:format:glb-par-2))
(push (@ 110))
(push '0)
(mov (cvalq #:format:glb-par-4) a1)
(jcall abs)
(push a1)
(mov (cvalq #:format:glb-par-2) a4)
(plus (cvalq #:format:glb-par-4) a4)
(push a4)
(push (& 6))
(push (& 5))
(mov (cvalq #:format:glb-par-2) a4)
(plus (cvalq #:format:glb-par-4) a4)
(mov (& 7) a3)
(mov a4 a2)
(mov (& 9) a1)
(call #:format:float-digits)
(push a1)
(mov '6 a4)
(bra #:format:float-e-1)
110
(eval ())
(adjstk '4)
(return)
))
(loader'((entry #:format:float-e-1 nsubr)
(mov (& 5) a4)
(bra 102)
101
(push a4)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (& 2) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 2))
(pop a4)
102
(sobgez a4 101)
(cabne (& 5) '0 104)
(mov (& 4) a4)
(plus (& 3) a4)
(plus '1 a4)
(cabeq (& 2) a4 104)
(mov (& 1) a2)
(mov '48 a1)
(jcall cons)
(mov a1 (& 1))
104
(mov (& 1) a2)
(mov '46 a1)
(jcall cons)
(mov a1 (& 1))
(mov (& 4) a4)
(bra 106)
105
(push a4)
(mov (& 2) a2)
(mov '48 a1)
(jcall cons)
(mov a1 (& 2))
(pop a4)
106
(sobgez a4 105)
(mov (& 3) a4)
(bra 108)
107
(push a4)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (& 2) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 2))
(pop a4)
108
(sobgez a4 107)
(adjstk '6)
(return)
))
(loader'((entry #:format:format-g-float subr1)
(push a1)
(jcall numberp)
(bfnil a1 101)
(push (@ 103))
(mov '0 a4)
(jmp obase)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(push '10)
(mov '1 a4)
(jmp obase)
106
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(jcall explode)
(mov (cvalq #:format:glb-par-6) a3)
(mov (cvalq #:format:glb-par-1) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 107))
(push (& 4))
(mov '1 a4)
(jmp obase)
107
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '2)
(return)
101
(btfloat (& 0) 109)
(mov (& 0) a1)
(jcall float)
(mov a1 (& 0))
109
(cfbne (& 0) '0. 110)
(mov '0 a4)
(bra 111)
110
(mov (& 0) a1)
(jcall abs)
(jcall log10)
(jcall floor)
(plus '1 a1)
(mov a1 a4)
111
(push a4)
(btnil (cvalq #:format:glb-par-3) 112)
(mov (cvalq #:format:glb-par-3) a3)
(plus '2 a3)
(bra 113)
112
(mov '4 a3)
113
(push a3)
(btnil (cvalq #:format:glb-par-1) 114)
(mov (cvalq #:format:glb-par-1) a2)
(diff a3 a2)
(bra 115)
114
(mov '0 a2)
115
(push a2)
(diff '2 a2)
(btnil (cvalq #:format:glb-par-2) 116)
(mov (cvalq #:format:glb-par-2) a1)
(bra 117)
116
(push a2)
(mov '7 a2)
(mov a4 a1)
(call #:format:imin)
(mov a1 a2)
(pop a1)
(call #:format:imax)
117
(push a1)
(diff (& 3) a1)
(cnblt a1 '0 120)
(cnble a1 (& 0) 118)
120
(mov (& 4) a1)
(adjstk '5)
(bra #:format:format-e-float)
118
(push (& 1))
(push nil)
(push (cvalq #:format:glb-par-5))
(push (cvalq #:format:glb-par-6))
(push (cvalq #:format:glb-par-2))
(mov a1 (cvalq #:format:glb-par-2))
(push (cvalq #:format:glb-par-5))
(mov (& 2) (cvalq #:format:glb-par-5))
(push (cvalq #:format:glb-par-4))
(mov (& 4) (cvalq #:format:glb-par-4))
(push (cvalq #:format:glb-par-3))
(mov (& 6) (cvalq #:format:glb-par-3))
(push (cvalq #:format:glb-par-1))
(mov (& 8) (cvalq #:format:glb-par-1))
(push '5)
(push '(#:format:glb-par-2 #:format:glb-par-5 #:format:glb-par-4 #:format:glb-par-3 #:format:glb-par-1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 19) a1)
(call #:format:format-f-float)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:glb-par-1))
(mov (& 7) (cvalq #:format:glb-par-3))
(mov (& 8) (cvalq #:format:glb-par-4))
(mov (& 9) (cvalq #:format:glb-par-5))
(mov (& 10) (cvalq #:format:glb-par-2))
(adjstk '15)
(mov '32 a2)
(mov (& 2) a1)
(adjstk '5)
(bra #:format:emit-n-chars)
))
(loader '((end)))
