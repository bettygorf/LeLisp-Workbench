(loader '((title |libdate.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'date)))
(defvar #:sys-package:colon 'date)
(if (not (featurep 'date)) (progn (loadmodule 'date)))
(#:messages:put-message '#:date:ljanv 'french '"janvier" 'defmessage)
(#:messages:put-message '#:date:ljanv 'english '"January" 'defmessage)
'#:date:ljanv
(#:messages:put-message '#:date:lfevr 'french '"fevrier" 'defmessage)
(#:messages:put-message '#:date:lfevr 'english '"February" 'defmessage)
'#:date:lfevr
(#:messages:put-message '#:date:lmars 'french '"mars" 'defmessage)
(#:messages:put-message '#:date:lmars 'english '"March" 'defmessage)
'#:date:lmars
(#:messages:put-message '#:date:lavr 'french '"avril" 'defmessage)
(#:messages:put-message '#:date:lavr 'english '"April" 'defmessage)
'#:date:lavr
(#:messages:put-message '#:date:lmai 'french '"mai" 'defmessage)
(#:messages:put-message '#:date:lmai 'english '"May" 'defmessage)
'#:date:lmai
(#:messages:put-message '#:date:ljuin 'french '"juin" 'defmessage)
(#:messages:put-message '#:date:ljuin 'english '"June" 'defmessage)
'#:date:ljuin
(#:messages:put-message '#:date:ljuil 'french '"juillet" 'defmessage)
(#:messages:put-message '#:date:ljuil 'english '"July" 'defmessage)
'#:date:ljuil
(#:messages:put-message '#:date:laout 'french '"aout" 'defmessage)
(#:messages:put-message '#:date:laout 'english '"August" 'defmessage)
'#:date:laout
(#:messages:put-message '#:date:lsept 'french '"septembre" 'defmessage)
(#:messages:put-message '#:date:lsept 'english '"September" 'defmessage)
'#:date:lsept
(#:messages:put-message '#:date:loct 'french '"octobre" 'defmessage)
(#:messages:put-message '#:date:loct 'english '"October" 'defmessage)
'#:date:loct
(#:messages:put-message '#:date:lnov 'french '"novembre" 'defmessage)
(#:messages:put-message '#:date:lnov 'english '"November" 'defmessage)
'#:date:lnov
(#:messages:put-message '#:date:ldec 'french '"decembre" 'defmessage)
(#:messages:put-message '#:date:ldec 'english '"December" 'defmessage)
'#:date:ldec
(defvar long-month-names '((1 . #:date:ljanv) (2 . #:date:lfevr) (3 . #:date:lmars) (4 . #:date:lavr) (5 . #:date:lmai) (6 . #:date:ljuin) (7 . #:date:ljuil) (8 . #:date:laout) (9 . #:date:lsept) (10 . #:date:loct) (11 . #:date:lnov) (12 . #:date:ldec)))
(#:messages:put-message '#:date:llun 'french '"lundi" 'defmessage)
(#:messages:put-message '#:date:llun 'english '"Monday" 'defmessage)
'#:date:llun
(#:messages:put-message '#:date:lmar 'french '"mardi" 'defmessage)
(#:messages:put-message '#:date:lmar 'english '"Tuesday" 'defmessage)
'#:date:lmar
(#:messages:put-message '#:date:lmer 'french '"mercredi" 'defmessage)
(#:messages:put-message '#:date:lmer 'english '"Wednesday" 'defmessage)
'#:date:lmer
(#:messages:put-message '#:date:ljeu 'french '"jeudi" 'defmessage)
(#:messages:put-message '#:date:ljeu 'english '"Thursday" 'defmessage)
'#:date:ljeu
(#:messages:put-message '#:date:lven 'french '"vendredi" 'defmessage)
(#:messages:put-message '#:date:lven 'english '"Friday" 'defmessage)
'#:date:lven
(#:messages:put-message '#:date:lsam 'french '"samedi" 'defmessage)
(#:messages:put-message '#:date:lsam 'english '"Saturday" 'defmessage)
'#:date:lsam
(#:messages:put-message '#:date:ldim 'french '"dimanche" 'defmessage)
(#:messages:put-message '#:date:ldim 'english '"Sunday" 'defmessage)
'#:date:ldim
(defvar long-day-names '((1 . #:date:llun) (2 . #:date:lmar) (3 . #:date:lmer) (4 . #:date:ljeu) (5 . #:date:lven) (6 . #:date:lsam) (7 . #:date:ldim)))
(loader'((fentry long-string-date subr1)
(entry long-string-date subr1)
(push a1)
(jcall datep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'long-string-date a1)
(jcall error)
102
(hpxmov (& 0) '0 a4)
(push a4)
(hpxmov (& 1) '1 a1)
(mov (cvalq long-month-names) a2)
(jcall cassq)
(jcall get-message)
(push a1)
(hpxmov (& 2) '2 a4)
(push a4)
(hpxmov (& 3) '3 a3)
(push a3)
(hpxmov (& 4) '4 a2)
(push a2)
(hpxmov (& 5) '5 a4)
(push a4)
(hpxmov (& 6) '6 a4)
(push a4)
(hpxmov (& 7) '7 a1)
(mov (cvalq long-day-names) a2)
(jcall cassq)
(jcall get-message)
(push a1)
(mov '32 a2)
(mov '48 a1)
(jcall makestring)
(push a1)
(push (@ 103))
(push a1)
(push (@ 104))
(push '3)
(mov (& 5) a1)
(jcall slength)
(quo '3 a1)
(push a1)
(mov '2 a4)
(jmp |-|)
104
(eval ())
(push a1)
(push (& 4))
(push '0)
(mov '4 a4)
(jmp bltstring)
103
(eval ())
(push (@ 105))
(push (& 1))
(push (@ 106))
(push '12)
(mov (& 10) a1)
(jcall slength)
(push a1)
(mov '2 a4)
(jmp |-|)
106
(eval ())
(push a1)
(push (& 9))
(push '0)
(mov '4 a4)
(jmp bltstring)
105
(eval ())
(push (@ 107))
(push (& 1))
(push (@ 108))
(push '16)
(mov (& 11) a1)
(jcall slength)
(quo '3 a1)
(push a1)
(mov '2 a4)
(jmp |-|)
108
(eval ())
(push a1)
(push (& 10))
(push '0)
(mov '4 a4)
(jmp bltstring)
107
(eval ())
(push (@ 109))
(push (& 1))
(push (@ 110))
(push '27)
(mov (& 12) a1)
(jcall slength)
(push a1)
(mov '2 a4)
(jmp |-|)
110
(eval ())
(push a1)
(push (& 11))
(push '0)
(mov '4 a4)
(jmp bltstring)
109
(eval ())
(push (@ 111))
(push (& 1))
(push '30)
(push '"00h 00mn 00s 000ms")
(push '0)
(mov '4 a4)
(jmp bltstring)
111
(eval ())
(push (@ 112))
(push (& 1))
(push (@ 113))
(push '32)
(mov (& 9) a1)
(jcall slength)
(push a1)
(mov '2 a4)
(jmp |-|)
113
(eval ())
(push a1)
(push (& 8))
(push '0)
(mov '4 a4)
(jmp bltstring)
112
(eval ())
(push (@ 114))
(push (& 1))
(push (@ 115))
(push '36)
(mov (& 8) a1)
(jcall slength)
(push a1)
(mov '2 a4)
(jmp |-|)
115
(eval ())
(push a1)
(push (& 7))
(push '0)
(mov '4 a4)
(jmp bltstring)
114
(eval ())
(push (@ 116))
(push (& 1))
(push (@ 117))
(push '41)
(mov (& 7) a1)
(jcall slength)
(push a1)
(mov '2 a4)
(jmp |-|)
117
(eval ())
(push a1)
(push (& 6))
(push '0)
(mov '4 a4)
(jmp bltstring)
116
(eval ())
(push (@ 118))
(push (& 1))
(push (@ 119))
(push '46)
(mov (& 6) a1)
(jcall slength)
(push a1)
(mov '2 a4)
(jmp |-|)
119
(eval ())
(push a1)
(push (& 5))
(push '0)
(mov '4 a4)
(jmp bltstring)
118
(eval ())
(mov (& 0) a1)
(adjstk '10)
(return)
))
(loader'((fentry eqdate subr2)
(entry eqdate subr2)
(push a2)
(push a1)
(jcall datep)
(btnil a1 101)
(mov (& 1) a1)
(jcall datep)
(btnil a1 101)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(jmp eqvector)
101
(adjstk '2)
(return)
))
(synonym '=date 'eqdate)
(loader'((fentry /=date subr2)
(entry /=date subr2)
(jcall eqdate)
(btnil a1 101)
(mov nil a1)
(return)
101
(mov 't a1)
(return)
))
(synonym '<>date '/=date)
(loader'((entry <?date subr3)
(push a3)
(push a2)
(push a1)
(jcall datep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov '<date a1)
(jcall error)
102
(mov (& 1) a1)
(jcall datep)
(bfnil a1 104)
(mov (& 1) a3)
(mov 'errbpa a2)
(mov '<date a1)
(jcall error)
104
(push (@ 105))
(push 'date-cmp)
(push dlink)
(push tag)
(stack dlink)
(push '0)
106
(push (@ 108))
(push (& 1))
(push '6)
(mov '2 a4)
(jmp >)
108
(eval ())
(bfnil a1 107)
(push (@ 111))
(hpxmov (& 6) (& 1) a4)
(bfnil a4 112)
(mov '0 a4)
112
(push a4)
(hpxmov (& 8) (& 2) a4)
(bfnil a4 113)
(mov '0 a4)
113
(push a4)
(mov '2 a4)
(jmp <)
111
(eval ())
(btnil a1 109)
(mov 't a1)
(mov 'date-cmp a2)
(jmp #:llcp:exit)
109
(push (@ 116))
(hpxmov (& 6) (& 1) a4)
(bfnil a4 117)
(mov '0 a4)
117
(push a4)
(hpxmov (& 8) (& 2) a4)
(bfnil a4 118)
(mov '0 a4)
118
(push a4)
(mov '2 a4)
(jmp >)
116
(eval ())
(btnil a1 110)
(mov nil a1)
(mov 'date-cmp a2)
(jmp #:llcp:exit)
110
(push (@ 119))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp |+|)
119
(eval ())
(mov a1 (& 0))
(bra 106)
107
(adjstk '1)
(mov (& 6) a1)
(mov (& 1) dlink)
(adjstk '4)
105
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry <date subr2)
(entry <date subr2)
(mov nil a3)
(bra <?date)
))
(loader'((fentry <=date subr2)
(entry <=date subr2)
(mov 't a3)
(bra <?date)
))
(loader'((fentry >date subr2)
(entry >date subr2)
(push a2)
(mov nil a3)
(mov a1 a2)
(pop a1)
(bra <?date)
))
(loader'((fentry >=date subr2)
(entry >=date subr2)
(push a2)
(mov 't a3)
(mov a1 a2)
(pop a1)
(bra <?date)
))
(defvar tropic-year-length 365.2421)
(defvar gregorian-year-length 365.2425)
(defvar tropic-month-length (/ tropic-year-length 12))
(defvar moon-month-length 29.53059)
(loader'((fentry date-to-number subr1)
(entry date-to-number subr1)
(push a1)
(jcall datep)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'date-to-number a1)
(jcall error)
102
(hpxmov (& 0) '0 a4)
(push a4)
(hpxmov (& 1) '1 a3)
(hpxmov (& 1) '2 a2)
(hpxmov (& 1) '3 a1)
(hpxmov (& 1) '4 a4)
(push a4)
(hpxmov (& 2) '5 a4)
(push a4)
(hpxmov (& 3) '6 a4)
(bfnil a4 103)
(mov '0 a4)
103
(push a4)
(push a1)
(push (@ 104))
(push (@ 105))
(push '365)
(push (& 7))
(mov '2 a4)
(jmp *)
105
(eval ())
(push a1)
(mov (& 6) a1)
(jcall leap-number)
(push a1)
(mov (& 8) a1)
(jcall year-day-number)
(push a1)
(push (@ 106))
(push (& 5))
(push '0.04166666)
(mov '2 a4)
(jmp *)
106
(eval ())
(push a1)
(push (@ 107))
(push (& 9))
(push '0.0006944444)
(mov '2 a4)
(jmp *)
107
(eval ())
(push a1)
(push (@ 108))
(push (& 9))
(push '1.157407e-05)
(mov '2 a4)
(jmp *)
108
(eval ())
(push a1)
(push (@ 109))
(push (& 9))
(push '1.157407e-08)
(mov '2 a4)
(jmp *)
109
(eval ())
(push a1)
(push '-1)
(mov '8 a4)
(jmp |+|)
104
(eval ())
(adjstk '6)
(return)
))
(loader'((fentry number-to-date subr1)
(entry number-to-date subr1)
(push (cvalq n))
(mov a1 (cvalq n))
(push '1)
(push '(n))
(push (@ number-to-date))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov '0 a2)
(mov '8 a1)
(jcall makevector)
(push (cvalq date))
(mov a1 (cvalq date))
(push '1)
(push '(date))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'date (cdr a1))
(push (@ 101))
(push (cvalq n))
(push (cvalq tropic-year-length))
(mov '2 a4)
(jmp /)
101
(eval ())
(jcall fix)
(push a1)
(hpmovx a1 (cvalq date) '0)
(push (@ 102))
(push (cvalq n))
(push (@ 103))
(push a1)
(push '365)
(mov '2 a4)
(jmp *)
103
(eval ())
(push a1)
(mov (& 3) a1)
(jcall leap-number)
(push a1)
(mov '3 a4)
(jmp |-|)
102
(eval ())
(mov a1 (cvalq n))
(adjstk '1)
(call adjust-year)
(push (@ 104))
(push (cvalq n))
(push (cvalq tropic-month-length))
(mov '2 a4)
(jmp /)
104
(eval ())
(jcall fix)
(jcall |1+|)
(hpmovx a1 (cvalq date) '1)
(push (@ 105))
(push (cvalq n))
(mov (cvalq date) a1)
(jcall year-day-number)
(push a1)
(mov '2 a4)
(jmp |-|)
105
(eval ())
(mov a1 (cvalq n))
(jcall fix)
(jcall |1+|)
(hpmovx a1 (cvalq date) '2)
(push (@ 106))
(push (cvalq n))
(push a1)
(mov '2 a4)
(jmp |-|)
106
(eval ())
(jcall |1+|)
(mov a1 (cvalq n))
(call adjust-day)
(push (cvalq date))
(mov (cvalq date) a1)
(jcall week-day-number)
(pop a4)
(hpmovx a1 a4 '7)
(push (@ 107))
(push '24)
(push (cvalq n))
(mov '2 a4)
(jmp *)
107
(eval ())
(jcall fix)
(hpmovx a1 (cvalq date) '3)
(push (@ 108))
(push (cvalq n))
(push (@ 109))
(push a1)
(push '0.04166666)
(mov '2 a4)
(jmp *)
109
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
108
(eval ())
(mov a1 (cvalq n))
(push (@ 110))
(push '1440)
(push a1)
(mov '2 a4)
(jmp *)
110
(eval ())
(jcall fix)
(hpmovx a1 (cvalq date) '4)
(push (@ 111))
(push (cvalq n))
(push (@ 112))
(push a1)
(push '0.0006944444)
(mov '2 a4)
(jmp *)
112
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
111
(eval ())
(mov a1 (cvalq n))
(push (@ 113))
(push '86400.)
(push a1)
(mov '2 a4)
(jmp *)
113
(eval ())
(jcall fix)
(hpmovx a1 (cvalq date) '5)
(push (@ 114))
(push (cvalq n))
(push (@ 115))
(push a1)
(push '1.157407e-05)
(mov '2 a4)
(jmp *)
115
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
114
(eval ())
(mov a1 (cvalq n))
(push (@ 116))
(push '8.64e+07)
(push a1)
(mov '2 a4)
(jmp *)
116
(eval ())
(jcall fix)
(hpmovx a1 (cvalq date) '6)
(push (@ 117))
(push (cvalq n))
(push (@ 118))
(push a1)
(push '1.157407e-08)
(mov '2 a4)
(jmp *)
118
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
117
(eval ())
(mov a1 (cvalq n))
(mov (cvalq date) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq date))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq n))
(adjstk '7)
(return)
))
(loader'((entry adjust-year subr0)
(push (@ 103))
(push (cvalq n))
(push '0)
(mov '2 a4)
(jmp <)
103
(eval ())
(btnil a1 101)
(push (cvalq date))
(hpxmov (cvalq date) '0 a1)
(jcall |1-|)
(pop a4)
(hpmovx a1 a4 '0)
(push (@ 104))
(push (cvalq n))
(hpxmov (cvalq date) '0 a1)
(jcall leap-year-p)
(btnil a1 105)
(mov '366 a4)
(bra 106)
105
(mov '365 a4)
106
(push a4)
(mov '2 a4)
(jmp |+|)
104
(eval ())
(mov a1 (cvalq n))
(bra adjust-year)
101
(push (@ 110))
(push (cvalq n))
(push '367)
(mov '2 a4)
(jmp >=)
110
(eval ())
(bfnil a1 109)
(push (@ 111))
(push (cvalq n))
(push '366)
(mov '2 a4)
(jmp >=)
111
(eval ())
(btnil a1 107)
(hpxmov (cvalq date) '0 a1)
(jcall leap-year-p)
(bfnil a1 107)
109
(push (@ 112))
(push (cvalq n))
(hpxmov (cvalq date) '0 a1)
(jcall leap-year-p)
(btnil a1 113)
(mov '366 a4)
(bra 114)
113
(mov '365 a4)
114
(push a4)
(mov '2 a4)
(jmp |-|)
112
(eval ())
(mov a1 (cvalq n))
(push (cvalq date))
(hpxmov (cvalq date) '0 a1)
(jcall |1+|)
(pop a4)
(hpmovx a1 a4 '0)
(bra adjust-year)
107
(mov nil a1)
(return)
))
(loader'((entry adjust-day subr0)
(push (@ 103))
(push (cvalq n))
(push '0)
(mov '2 a4)
(jmp <)
103
(eval ())
(btnil a1 101)
(mov (cvalq n) a1)
(jcall abs)
(jcall fix)
(jcall |1+|)
(push a1)
(push (cvalq date))
(push (@ 104))
(hpxmov (cvalq date) '2 a4)
(push a4)
(push a1)
(mov '2 a4)
(jmp |-|)
104
(eval ())
(pop a4)
(hpmovx a1 a4 '2)
(push (@ 105))
(push (cvalq n))
(push (& 2))
(mov '2 a4)
(jmp |+|)
105
(eval ())
(mov a1 (cvalq n))
(adjstk '1)
(bra adjust-month)
101
(push (@ 108))
(push (cvalq n))
(push '1)
(mov '2 a4)
(jmp >=)
108
(eval ())
(btnil a1 adjust-month)
(mov (cvalq n) a1)
(jcall fix)
(push a1)
(push (cvalq date))
(push (@ 109))
(hpxmov (cvalq date) '2 a4)
(push a4)
(push a1)
(mov '2 a4)
(jmp |+|)
109
(eval ())
(pop a4)
(hpmovx a1 a4 '2)
(push (@ 110))
(push (cvalq n))
(push (& 2))
(mov '2 a4)
(jmp |-|)
110
(eval ())
(mov a1 (cvalq n))
(adjstk '1)
(bra adjust-month)
))
(loader'((entry adjust-month subr0)
(push (@ 103))
(hpxmov (cvalq date) '2 a4)
(push a4)
(push '1)
(mov '2 a4)
(jmp <)
103
(eval ())
(btnil a1 101)
(push (cvalq date))
(hpxmov (cvalq date) '1 a1)
(call prev-month)
(pop a4)
(hpmovx a1 a4 '1)
(push (cvalq date))
(push (@ 104))
(hpxmov (cvalq date) '2 a4)
(push a4)
(hpxmov (cvalq date) '1 a1)
(hpxmov (cvalq date) '0 a2)
(jcall month-length)
(push a1)
(mov '2 a4)
(jmp |+|)
104
(eval ())
(pop a4)
(hpmovx a1 a4 '2)
(bra adjust-month)
101
(push (@ 107))
(hpxmov (cvalq date) '2 a4)
(push a4)
(hpxmov (cvalq date) '1 a1)
(hpxmov (cvalq date) '0 a2)
(jcall month-length)
(push a1)
(mov '2 a4)
(jmp >)
107
(eval ())
(btnil a1 105)
(push (cvalq date))
(push (@ 108))
(hpxmov (cvalq date) '2 a4)
(push a4)
(hpxmov (cvalq date) '1 a1)
(hpxmov (cvalq date) '0 a2)
(jcall month-length)
(push a1)
(mov '2 a4)
(jmp |-|)
108
(eval ())
(pop a4)
(hpmovx a1 a4 '2)
(push (cvalq date))
(hpxmov (cvalq date) '1 a1)
(call next-month)
(pop a4)
(hpmovx a1 a4 '1)
(bra adjust-month)
105
(mov nil a1)
(return)
))
(loader'((entry prev-month subr1)
(cnbne a1 '1 101)
(mov '12 a1)
(return)
101
(diff '1 a1)
(return)
))
(loader'((entry next-month subr1)
(cnbne a1 '12 101)
(mov '1 a1)
(return)
101
(plus '1 a1)
(return)
))
(loader'((entry getfdate subr2)
(push a2)
(push a1)
(btvect a1 102)
(mov a1 a3)
(mov 'errvec a2)
(mov 'getfdate a1)
(jcall error)
102
(btstrg (& 1) 104)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'getfdate a1)
(jcall error)
104
(push (@ 105))
(push (eval (kwote (#:system:cached-getglobal 'getfdate))))
(push '1)
(push (& 3))
(push '7)
(push (& 6))
(push '3)
(mov '6 a4)
(jmp callextern)
105
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry date-of-file subr1)
(entry date-of-file subr1)
(push a1)
(jcall pathnamep)
(bfnil a1 102)
(btstrg (& 0) 102)
(mov (& 0) a3)
(mov 'errpathnotpath a2)
(mov 'date-of-file a1)
(jcall error)
102
(mov (& 0) a1)
(jcall probefile)
(bfnil a1 104)
(mov (& 0) a3)
(mov 'errfile a2)
(mov 'date-of-file a1)
(jcall error)
104
(jcall create-date)
(push a1)
(push a1)
(mov (& 2) a1)
(jcall coerce-namestring)
(mov a1 a2)
(pop a1)
(call getfdate)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(defvar #:date:date-min (if (boundp '#:date:date-min) #:date:date-min (create-date)))
(if (not (boundp '#:date:date-min)) (progn (#:date:year #:date:date-min 0) (#:date:month #:date:date-min 0) (#:date:day #:date:date-min 0) (#:date:hour #:date:date-min 0) (#:date:minute #:date:date-min 0) (#:date:second #:date:date-min 0)))
(loader '((end)))
