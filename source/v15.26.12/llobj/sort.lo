(loader '((title |sort.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'sort)))
(setq #:sys-package:colon 'sort)
(loader'((entry #:sort:sort-aux subr3)
(push a3)
(push a2)
(push a1)
(cnbge a3 '2 101)
(mov a2 a1)
(adjstk '3)
(return)
101
(cabne a3 '2 103)
(push (@ 107))
(push a1)
(push (car a2))
(mov (cdr a2) a4)
(push (car a4))
(mov '3 a4)
(jmp funcall)
107
(eval ())
(btnil a1 105)
(mov (& 1) a1)
(adjstk '3)
(return)
105
(mov (& 1) a1)
(push (cdr a1))
(mov (cdr a1) a4)
(mov a1 (cdr a4))
(mov nil (cdr a1))
(pop a1)
(adjstk '3)
(return)
103
(land '1 a3)
(push nil)
(push a3)
(push a2)
(mov (& 5) a4)
(lshift '-1 a4)
(mov a4 (& 5))
(diff '1 a4)
(bra 109)
108
(push a4)
(mov (& 5) a4)
(mov (cdr a4) (& 5))
(pop a4)
109
(sobgez a4 108)
(mov (& 4) a4)
(mov (cdr a4) (& 2))
(mov nil (cdr a4))
(mov (& 5) a3)
(mov (& 0) a2)
(mov (& 3) a1)
(call #:sort:sort-aux)
(mov a1 (& 0))
(mov (& 1) a4)
(plus (& 5) a4)
(mov a4 a3)
(mov (& 2) a2)
(mov (& 3) a1)
(call #:sort:sort-aux)
(mov a1 (& 2))
(push (@ 112))
(push (& 4))
(mov (& 2) a4)
(push (car a4))
(push (car a1))
(mov '3 a4)
(jmp funcall)
112
(eval ())
(bfnil a1 111)
(push (& 2))
(mov (& 1) (& 3))
(pop a4)
(mov a4 (& 0))
111
(push (& 0))
113
(mov (& 1) a4)
(btnil (cdr a4) 114)
(btnil (& 3) 114)
(push (@ 117))
(push (& 5))
(mov (& 5) a4)
(push (car a4))
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '3 a4)
(jmp funcall)
117
(eval ())
(btnil a1 116)
(push (& 3))
(mov (& 2) a4)
(mov (cdr a4) (& 4))
(pop a4)
(mov (& 1) a3)
(mov a4 (cdr a3))
116
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 113)
114
(btnil (& 3) 119)
(mov (& 1) a4)
(mov (& 3) (cdr a4))
119
(pop a1)
(adjstk '6)
(return)
))
(loader'((fentry pkgcmp subr2)
(entry pkgcmp subr2)
(push a2)
(cabne (pkgc a1) (pkgc a2) 101)
(adjstk '1)
(jmp alphalessp)
101
(push (pkgc a1))
(mov (& 0) a1)
(jcall symbolp)
(btnil a1 104)
(mov nil a1)
(bra 105)
104
(mov 't a1)
105
(bfnil a1 103)
(mov (& 1) a4)
(push (pkgc a4))
(mov (& 0) a1)
(jcall symbolp)
(btnil a1 106)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '3)
(jmp pkgcmp)
106
(adjstk '1)
103
(adjstk '2)
(return)
))
(loader'((fentry sort subr2)
(entry sort subr2)
(bfcons a2 101)
(push a1)
(push a2)
(mov a2 a1)
(jcall length)
(mov a1 a3)
(pop a2)
(pop a1)
(bra #:sort:sort-aux)
101
(bfnil a2 103)
(mov nil a1)
(return)
103
(mov a2 a3)
(mov 'errnla a2)
(mov 'sort a1)
(jmp error)
))
(loader'((fentry sortl subr1)
(entry sortl subr1)
(push a1)
(jcall length)
(mov a1 a2)
(pop a1)
(bra #:sort:sortl-sort-aux)
))
(loader'((entry #:sort:sortl-sort-aux subr2)
(push a2)
(push a1)
(cnbge a2 '2 101)
(adjstk '2)
(return)
101
(cabne a2 '2 103)
(mov (cdr a1) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall alphalessp)
(btnil a1 105)
(mov (& 0) a1)
(adjstk '2)
(return)
105
(mov (& 0) a1)
(push (cdr a1))
(mov (cdr a1) a4)
(mov a1 (cdr a4))
(mov nil (cdr a1))
(pop a1)
(adjstk '2)
(return)
103
(land '1 a2)
(push nil)
(push a2)
(push a1)
(mov (& 4) a4)
(lshift '-1 a4)
(mov a4 (& 4))
(diff '1 a4)
(bra 108)
107
(push a4)
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(pop a4)
108
(sobgez a4 107)
(mov (& 3) a4)
(mov (cdr a4) (& 2))
(mov nil (cdr a4))
(mov (& 4) a2)
(mov (& 0) a1)
(call #:sort:sortl-sort-aux)
(mov a1 (& 0))
(mov (& 1) a4)
(plus (& 4) a4)
(mov a4 a2)
(mov (& 2) a1)
(call #:sort:sortl-sort-aux)
(mov a1 (& 2))
(mov (& 0) a1)
(mov (& 2) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall alphalessp)
(bfnil a1 110)
(push (& 2))
(mov (& 1) (& 3))
(pop a4)
(mov a4 (& 0))
110
(push (& 0))
111
(mov (& 1) a4)
(btnil (cdr a4) 112)
(btnil (& 3) 112)
(mov (& 3) a1)
(mov (& 1) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall alphalessp)
(btnil a1 114)
(push (& 3))
(mov (& 2) a4)
(mov (cdr a4) (& 4))
(pop a4)
(mov (& 1) a3)
(mov a4 (cdr a3))
114
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 111)
112
(btnil (& 3) 116)
(mov (& 1) a4)
(mov (& 3) (cdr a4))
116
(pop a1)
(adjstk '5)
(return)
))
(loader'((fentry sortn subr1)
(entry sortn subr1)
(push a1)
(jcall length)
(mov a1 a2)
(pop a1)
(bra #:sort:sortn-sort-aux)
))
(loader'((entry #:sort:sortn-sort-aux subr2)
(push a2)
(push a1)
(cnbge a2 '2 101)
(adjstk '2)
(return)
101
(cabne a2 '2 103)
(push (@ 107))
(push (car a1))
(mov (cdr a1) a4)
(push (car a4))
(mov '2 a4)
(jmp <)
107
(eval ())
(btnil a1 105)
(mov (& 0) a1)
(adjstk '2)
(return)
105
(mov (& 0) a1)
(push (cdr a1))
(mov (cdr a1) a4)
(mov a1 (cdr a4))
(mov nil (cdr a1))
(pop a1)
(adjstk '2)
(return)
103
(land '1 a2)
(push nil)
(push a2)
(push a1)
(mov (& 4) a4)
(lshift '-1 a4)
(mov a4 (& 4))
(diff '1 a4)
(bra 109)
108
(push a4)
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(pop a4)
109
(sobgez a4 108)
(mov (& 3) a4)
(mov (cdr a4) (& 2))
(mov nil (cdr a4))
(mov (& 4) a2)
(mov (& 0) a1)
(call #:sort:sortn-sort-aux)
(mov a1 (& 0))
(mov (& 1) a4)
(plus (& 4) a4)
(mov a4 a2)
(mov (& 2) a1)
(call #:sort:sortn-sort-aux)
(mov a1 (& 2))
(push (@ 112))
(mov (& 1) a4)
(push (car a4))
(push (car a1))
(mov '2 a4)
(jmp <)
112
(eval ())
(bfnil a1 111)
(push (& 2))
(mov (& 1) (& 3))
(pop a4)
(mov a4 (& 0))
111
(push (& 0))
113
(mov (& 1) a4)
(btnil (cdr a4) 114)
(btnil (& 3) 114)
(push (@ 117))
(mov (& 4) a4)
(push (car a4))
(mov (& 3) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp <)
117
(eval ())
(btnil a1 116)
(push (& 3))
(mov (& 2) a4)
(mov (cdr a4) (& 4))
(pop a4)
(mov (& 1) a3)
(mov a4 (cdr a3))
116
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 113)
114
(btnil (& 3) 119)
(mov (& 1) a4)
(mov (& 3) (cdr a4))
119
(pop a1)
(adjstk '5)
(return)
))
(loader'((fentry sortlt subr1)
(entry sortlt subr1)
(push a1)
(jcall length)
(mov a1 a2)
(pop a1)
(bra #:sort:sortlt-sort-aux)
))
(loader'((entry #:sort:sortlt-sort-aux subr2)
(push a2)
(push a1)
(cnbge a2 '2 101)
(adjstk '2)
(return)
101
(cabne a2 '2 103)
(mov (cdr a1) a4)
(cnbge (car a1) (car a4) 105)
(adjstk '2)
(return)
105
(push (cdr a1))
(mov (cdr a1) a3)
(mov a1 (cdr a3))
(mov nil (cdr a1))
(pop a1)
(adjstk '2)
(return)
103
(land '1 a2)
(push nil)
(push a2)
(push a1)
(mov (& 4) a4)
(lshift '-1 a4)
(mov a4 (& 4))
(diff '1 a4)
(bra 108)
107
(push a4)
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(pop a4)
108
(sobgez a4 107)
(mov (& 3) a4)
(mov (cdr a4) (& 2))
(mov nil (cdr a4))
(mov (& 4) a2)
(mov (& 0) a1)
(call #:sort:sortlt-sort-aux)
(mov a1 (& 0))
(mov (& 1) a4)
(plus (& 4) a4)
(mov a4 a2)
(mov (& 2) a1)
(call #:sort:sortlt-sort-aux)
(mov a1 (& 2))
(mov (& 0) a4)
(cnblt (car a4) (car a1) 110)
(mov a4 (& 2))
(mov a1 (& 0))
110
(push (& 0))
111
(mov (& 1) a4)
(btnil (cdr a4) 112)
(btnil (& 3) 112)
(mov (& 3) a4)
(mov (& 1) a3)
(mov (cdr a3) a3)
(cnbge (car a4) (car a3) 114)
(mov (& 1) a2)
(mov (cdr a2) (& 3))
(mov (& 1) a1)
(mov a4 (cdr a1))
114
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 111)
112
(btnil (& 3) 116)
(mov (& 1) a4)
(mov (& 3) (cdr a4))
116
(pop a1)
(adjstk '5)
(return)
))
(loader'((fentry sortp subr1)
(entry sortp subr1)
(push a1)
(jcall length)
(mov a1 a2)
(pop a1)
(bra #:sort:sortp-sort-aux)
))
(loader'((entry #:sort:sortp-sort-aux subr2)
(push a2)
(push a1)
(cnbge a2 '2 101)
(adjstk '2)
(return)
101
(cabne a2 '2 103)
(mov (cdr a1) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall pkgcmp)
(btnil a1 105)
(mov (& 0) a1)
(adjstk '2)
(return)
105
(mov (& 0) a1)
(push (cdr a1))
(mov (cdr a1) a4)
(mov a1 (cdr a4))
(mov nil (cdr a1))
(pop a1)
(adjstk '2)
(return)
103
(land '1 a2)
(push nil)
(push a2)
(push a1)
(mov (& 4) a4)
(lshift '-1 a4)
(mov a4 (& 4))
(diff '1 a4)
(bra 108)
107
(push a4)
(mov (& 4) a4)
(mov (cdr a4) (& 4))
(pop a4)
108
(sobgez a4 107)
(mov (& 3) a4)
(mov (cdr a4) (& 2))
(mov nil (cdr a4))
(mov (& 4) a2)
(mov (& 0) a1)
(call #:sort:sortp-sort-aux)
(mov a1 (& 0))
(mov (& 1) a4)
(plus (& 4) a4)
(mov a4 a2)
(mov (& 2) a1)
(call #:sort:sortp-sort-aux)
(mov a1 (& 2))
(mov (& 0) a1)
(mov (& 2) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall pkgcmp)
(bfnil a1 110)
(push (& 2))
(mov (& 1) (& 3))
(pop a4)
(mov a4 (& 0))
110
(push (& 0))
111
(mov (& 1) a4)
(btnil (cdr a4) 112)
(btnil (& 3) 112)
(mov (& 3) a1)
(mov (& 1) a2)
(mov (cdr a2) a2)
(mov (car a2) a2)
(mov (car a1) a1)
(jcall pkgcmp)
(btnil a1 114)
(push (& 3))
(mov (& 2) a4)
(mov (cdr a4) (& 4))
(pop a4)
(mov (& 1) a3)
(mov a4 (cdr a3))
114
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(bra 111)
112
(btnil (& 3) 116)
(mov (& 1) a4)
(mov (& 3) (cdr a4))
116
(pop a1)
(adjstk '5)
(return)
))
(loader '((end)))
