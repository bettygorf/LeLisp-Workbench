(loader '((title |pretty.lo|)))
(if (not (>= (version) 15.21)) (progn (error 'load 'erricf 'pretty)))
(defvar #:sys-package:colon 'pretty)
(add-feature 'pretty)
(defvar #:pretty:quotelevel 0)
(defvar #:pretty:quotelength 0)
(loader'((entry #:pretty:p subr1)
(push a1)
(push (@ 101))
(jcall type-of)
(push a1)
(push 'pretty)
(push nil)
(mov '3 a4)
(jmp getfn)
101
(eval ())
(btnil a1 102)
(cabeq a1 'pretty 102)
(push (@ 104))
(push a1)
(push (& 2))
(mov '2 a4)
(jmp funcall)
104
(eval ())
(adjstk '1)
(return)
102
(btcons (& 0) 105)
(push (@ 107))
(push (& 1))
(mov '1 a4)
(jmp prin)
107
(eval ())
(adjstk '1)
(return)
105
(mov (& 0) a4)
(cabne (car a4) 'quote 108)
(bfcons (cdr a4) 108)
(mov (cdr a4) a3)
(bfnil (cdr a3) 108)
(push (@ 110))
(push '39)
(mov '1 a4)
(jmp princn)
110
(eval ())
(push (@ 111))
(mov '0 a4)
(jmp printlevel)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp printlength)
112
(eval ())
(push a1)
(push (@ 113))
(push dlink)
(push prot)
(stack dlink)
(push (@ 115))
(push (cvalq #:pretty:quotelevel))
(mov '1 a4)
(jmp printlevel)
115
(eval ())
(push (@ 116))
(push (cvalq #:pretty:quotelength))
(mov '1 a4)
(jmp printlength)
116
(eval ())
(push (@ 117))
(mov (& 6) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
117
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 114) a3)
113
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp printlength)
118
(eval ())
(push (@ 119))
(push (& 5))
(mov '1 a4)
(jmp printlevel)
119
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
114
(eval ())
(adjstk '3)
(return)
108
(mov (& 0) a4)
(bfcons (car a4) 120)
(mov (car a4) a3)
(cabne (car a3) 'lambda 120)
(mov (car a4) a2)
(bfcons (cdr a2) 120)
(mov (car a4) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall listp)
(btnil a1 120)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(jcall listp)
(btnil a1 120)
(mov (& 0) a1)
(mov (cdr a1) a1)
(jcall listp)
(btnil a1 120)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall last)
(bfnil (cdr a1) 120)
(mov (& 0) a1)
(mov (cdr a1) a1)
(jcall last)
(bfnil (cdr a1) 120)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall length)
(push a1)
(mov (& 1) a1)
(mov (cdr a1) a1)
(jcall length)
(pop a4)
(cabne a4 a1 120)
(push (@ 122))
(push 'let)
(mov (& 2) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (& 2) a3)
(push (car a4))
(push (cdr a3))
(push nil)
123
(bfcons (& 2) 124)
(bfcons (& 1) 124)
(push (@ 125))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov '2 a4)
(jmp list)
125
(eval ())
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 123)
124
(mov (& 0) a1)
(jcall nreverse)
(adjstk '3)
(push a1)
(mov (& 3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
122
(eval ())
(adjstk '1)
(bra #:pretty:p)
120
(mov (& 0) a4)
(bfsymb (car a4) 128)
(push (@ 130))
(push (car a4))
(mov '1 a4)
(jmp ptype)
130
(eval ())
(mov '3 a2)
(jcall neqn)
(bra 129)
128
(mov 't a1)
129
(btnil a1 127)
(mov (& 0) a1)
(call #:pretty:inlinep)
127
(bfnil a1 126)
(mov (& 0) a4)
(push (car a4))
(push (cdr a4))
(push (cvalq l))
(mov (& 1) (cvalq l))
(push (cvalq f))
(mov (& 3) (cvalq f))
(push '2)
(push '(l f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 131))
(push '40)
(mov '1 a4)
(jmp princn)
131
(eval ())
(mov (cvalq f) a1)
(call #:pretty:p)
(bfsymb (cvalq f) 133)
(push (@ 135))
(push (cvalq f))
(mov '1 a4)
(jmp ptype)
135
(eval ())
(bra 134)
133
(mov 't a1)
134
(cabne a1 '1 136)
(call #:pretty:progn)
(bra 132)
136
(cabne a1 '2 137)
(call #:pretty:p1)
(call #:pretty:progn)
(bra 132)
137
(cabne a1 '3 138)
(call #:pretty:p1)
(call #:pretty:p1)
(call #:pretty:progn)
(bra 132)
138
(cabne a1 '4 139)
(call #:pretty:cond)
(bra 132)
139
(cabne a1 '5 140)
(call #:pretty:p1)
(call #:pretty:cond)
(bra 132)
140
(cabne a1 '6 141)
(push (@ 142))
(mov '0 a4)
(jmp lmargin)
142
(eval ())
(push a1)
(push (@ 143))
(push dlink)
(push prot)
(stack dlink)
(push (@ 145))
(push (@ 146))
(mov '0 a4)
(jmp lmargin)
146
(eval ())
(plus '5 a1)
(push a1)
(mov '1 a4)
(jmp lmargin)
145
(eval ())
147
(bfcons (cvalq l) 148)
(call #:pretty:p1)
(call #:pretty:p1)
(btnil (cvalq l) 147)
(push (@ 151))
(mov '0 a4)
(jmp terpri)
151
(eval ())
(bra 147)
148
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 144) a3)
143
(push a3)
(push a2)
(push (@ 152))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
152
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
144
(eval ())
(adjstk '1)
(bra 132)
141
(cabne a1 '7 153)
(call #:pretty:p1)
(call #:pretty:tagbody)
(bra 132)
153
(call #:pretty:progn)
132
(call #:pretty:pdot)
(mov (& 1) dlink)
(mov (& 6) (cvalq f))
(mov (& 7) (cvalq l))
(adjstk '10)
126
(adjstk '1)
(return)
))
(loader'((entry #:pretty:pdot subr0)
(btnil (cvalq l) 102)
(push (@ 103))
(push '32)
(mov '1 a4)
(jmp princn)
103
(eval ())
(push (@ 104))
(push '46)
(mov '1 a4)
(jmp princn)
104
(eval ())
(push (@ 105))
(push '32)
(mov '1 a4)
(jmp princn)
105
(eval ())
(push (@ 106))
(push (cvalq l))
(mov '1 a4)
(jmp prin)
106
(eval ())
102
(push (@ 107))
(push '41)
(mov '1 a4)
(jmp princn)
107
(eval ())
(return)
))
(loader'((entry #:pretty:p1 subr0)
(bfcons (cvalq l) 101)
(push (@ 103))
(mov '0 a4)
(jmp lmargin)
103
(eval ())
(push a1)
(push (@ 104))
(push dlink)
(push prot)
(stack dlink)
(push (@ 106))
(mov (cvalq f) a1)
(call #:pretty:lmargin)
(push a1)
(mov '1 a4)
(jmp lmargin)
106
(eval ())
(push (@ 107))
(push '32)
(mov '1 a4)
(jmp princn)
107
(eval ())
(mov (cvalq l) a1)
(mov (cdr a1) (cvalq l))
(mov (car a1) a1)
(call #:pretty:p)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 105) a3)
104
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
105
(eval ())
(adjstk '1)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:pretty:progn subr0)
(push (@ 101))
(mov '0 a4)
(jmp lmargin)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(mov (cvalq f) a1)
(call #:pretty:lmargin)
(push a1)
(mov '1 a4)
(jmp lmargin)
104
(eval ())
105
(bfcons (cvalq l) 106)
(mov (cvalq l) a1)
(mov (car a1) a1)
(jcall numberp)
(btnil a1 107)
(call #:pretty:p1)
(bra 105)
107
(push (@ 111))
(mov '0 a4)
(jmp outpos)
111
(eval ())
(push a1)
(push (@ 112))
(mov '0 a4)
(jmp lmargin)
112
(eval ())
(pop a4)
(cnbge a4 a1 109)
(push (@ 113))
(push (@ 114))
(mov '0 a4)
(jmp lmargin)
114
(eval ())
(push a1)
(mov '1 a4)
(jmp outpos)
113
(eval ())
(bra 110)
109
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
110
(mov (cvalq l) a1)
(mov (cdr a1) (cvalq l))
(mov (car a1) a1)
(call #:pretty:p)
(bra 105)
106
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 116))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
116
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:pretty:tagbody subr0)
(push (@ 101))
(mov '0 a4)
(jmp lmargin)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(mov (cvalq f) a1)
(call #:pretty:lmargin)
(push a1)
(mov '1 a4)
(jmp lmargin)
104
(eval ())
105
(bfcons (cvalq l) 106)
(mov (cvalq l) a4)
(btcons (car a4) 107)
(push (@ 109))
(mov '0 a4)
(jmp lmargin)
109
(eval ())
(push a1)
(push (@ 110))
(push dlink)
(push prot)
(stack dlink)
(push (@ 112))
(push (@ 113))
(mov '0 a4)
(jmp lmargin)
113
(eval ())
(push a1)
(push (@ 114))
(mov '0 a4)
(jmp lmargin)
114
(eval ())
(mov '7 a2)
(jcall imin)
(pop a4)
(diff a1 a4)
(push a4)
(mov '1 a4)
(jmp lmargin)
112
(eval ())
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
(call #:pretty:p1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 111) a3)
110
(push a3)
(push a2)
(push (@ 116))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
116
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
111
(eval ())
(adjstk '1)
(bra 105)
107
(push (@ 119))
(mov '0 a4)
(jmp outpos)
119
(eval ())
(push a1)
(push (@ 120))
(mov '0 a4)
(jmp lmargin)
120
(eval ())
(pop a4)
(cnbge a4 a1 117)
(push (@ 121))
(push (@ 122))
(mov '0 a4)
(jmp lmargin)
122
(eval ())
(push a1)
(mov '1 a4)
(jmp outpos)
121
(eval ())
(bra 118)
117
(push (@ 123))
(mov '0 a4)
(jmp terpri)
123
(eval ())
118
(mov (cvalq l) a1)
(mov (cdr a1) (cvalq l))
(mov (car a1) a1)
(call #:pretty:p)
(bra 105)
106
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 124))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
124
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:pretty:cond subr0)
(push (@ 101))
(mov '0 a4)
(jmp lmargin)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push (@ 105))
(mov '0 a4)
(jmp lmargin)
105
(eval ())
(plus '3 a1)
(push a1)
(mov '1 a4)
(jmp lmargin)
104
(eval ())
106
(bfcons (cvalq l) 107)
(push (@ 108))
(mov '0 a4)
(jmp terpri)
108
(eval ())
(mov (cvalq l) a1)
(mov (car a1) a1)
(call #:pretty:inlinep)
(btnil a1 109)
(mov (cvalq l) a4)
(mov (cdr a4) (cvalq l))
(bra 106)
109
(mov (cvalq l) a4)
(mov (cdr a4) (cvalq l))
(push (car a4))
(push 't)
(push (cvalq f))
(mov (& 1) (cvalq f))
(push (cvalq l))
(mov (& 3) (cvalq l))
(push '2)
(push '(f l))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 111))
(push '40)
(mov '1 a4)
(jmp princn)
111
(eval ())
(bfcons (cvalq l) 113)
(mov (cvalq l) a1)
(mov (cdr a1) (cvalq l))
(mov (car a1) a1)
(call #:pretty:p)
113
(btnil (cvalq l) 115)
(call #:pretty:progn)
115
(call #:pretty:pdot)
(mov (& 1) dlink)
(mov (& 6) (cvalq l))
(mov (& 7) (cvalq f))
(adjstk '10)
(bra 106)
107
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 116))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
116
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:pretty:lmargin subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp lmargin)
101
(eval ())
(push a1)
(mov (& 1) a1)
(jcall listp)
(btnil a1 102)
(mov '1 a4)
(bra 103)
102
(bfvect (& 1) 104)
(mov '1 a4)
(bra 103)
104
(push (@ 108))
(mov '0 a4)
(jmp lmargin)
108
(eval ())
(mov (cvalq #:pretty:sizeline) a4)
(quo '2 a4)
(cnbge a1 a4 106)
(mov (& 1) a1)
(jcall plength)
(cnbge a1 '8 109)
(mov (& 1) a1)
(jcall plength)
(plus '2 a1)
(mov a1 a4)
(bra 103)
109
(mov '4 a4)
(bra 103)
106
(push (@ 113))
(mov '0 a4)
(jmp lmargin)
113
(eval ())
(push a1)
(mov '4 a3)
(mov '3 a2)
(mov (cvalq #:pretty:sizeline) a1)
(jcall scale)
(pop a4)
(cnbge a4 a1 111)
(mov '2 a4)
(bra 103)
111
(mov '0 a4)
103
(pop a3)
(plus a4 a3)
(mov a3 a1)
(adjstk '1)
(return)
))
(loader'((entry #:pretty:inlinep subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outpos)
101
(eval ())
(push a1)
(push (@ 104))
(push '#:pretty:inlinep)
(push dlink)
(push tag)
(stack dlink)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'pretty a1)
(jcall cons)
(push (cvalq #:sys-package:itsoft))
(mov a1 (cvalq #:sys-package:itsoft))
(push '1)
(push '(#:sys-package:itsoft))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 105))
(push (& 13))
(mov '1 a4)
(jmp prin)
105
(eval ())
(mov 't a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:itsoft))
(adjstk '7)
(mov (& 1) dlink)
(adjstk '4)
104
(eval ())
(btnil a1 102)
(mov 't a1)
(adjstk '2)
(return)
102
(push (@ 106))
(push (@ 107))
(mov '0 a4)
(jmp outbuf)
107
(eval ())
(push a1)
(push (& 2))
(push '32)
(mov '3 a4)
(jmp fillstring)
106
(eval ())
(push (@ 108))
(push (& 1))
(mov '1 a4)
(jmp outpos)
108
(eval ())
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:pretty:eol subr0)
(entry #:pretty:eol subr0)
(mov nil a1)
(mov '#:pretty:inlinep a2)
(jmp #:llcp:exit)
))
(loader'((fentry pprint subr1)
(entry pprint subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp lmargin)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push (@ 105))
(mov '0 a4)
(jmp lmargin)
105
(eval ())
(push a1)
(mov '1 a4)
(jmp lmargin)
104
(eval ())
(mov (cvalq #:system:print-package-flag) a4)
(bfnil a4 106)
(mov 't a4)
106
(push a4)
(push (@ 107))
(mov '0 a4)
(jmp rmargin)
107
(eval ())
(push a1)
(push (@ 108))
(mov '0 a4)
(jmp lmargin)
108
(eval ())
(pop a4)
(diff a1 a4)
(push 't)
(push nil)
(push (cvalq #:pretty:sizeline))
(mov a4 (cvalq #:pretty:sizeline))
(push (cvalq #:system:print-for-read))
(mov (& 3) (cvalq #:system:print-for-read))
(push (cvalq #:system:print-package-flag))
(mov (& 5) (cvalq #:system:print-package-flag))
(push '3)
(push '(#:pretty:sizeline #:system:print-for-read #:system:print-package-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 16) a1)
(call #:pretty:p)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-package-flag))
(mov (& 7) (cvalq #:system:print-for-read))
(mov (& 8) (cvalq #:pretty:sizeline))
(adjstk '12)
(push (@ 109))
(mov '0 a4)
(jmp terpri)
109
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 110))
(push (& 4))
(mov '1 a4)
(jmp lmargin)
110
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry pprin subr1)
(entry pprin subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp rmargin)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp lmargin)
102
(eval ())
(pop a4)
(diff a1 a4)
(push (cvalq #:pretty:sizeline))
(mov a4 (cvalq #:pretty:sizeline))
(push '1)
(push '(#:pretty:sizeline))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 7) a1)
(call #:pretty:p)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:pretty:sizeline))
(adjstk '8)
(return)
))
(loader'((fentry pretty fsubr)
(entry pretty fsubr)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:trace:trace) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 103)
(push (@ 106))
(mov '0 a4)
(jmp current-language)
106
(eval ())
(cabeq a1 'quote 108)
(cabne a1 'english 107)
108
(push (@ 109))
(push '"; ")
(push (& 2))
(push '" is traced")
(mov '3 a4)
(jmp print)
109
(eval ())
(bra 105)
107
(cabeq a1 'quote 111)
(cabne a1 'french 105)
111
(push (@ 112))
(push '"; ")
(push (& 2))
(push '" est tracee")
(mov '3 a4)
(jmp print)
112
(eval ())
105
(push (@ 113))
(mov '0 a4)
(jmp terpri)
113
(eval ())
(mov 'trace a2)
(mov (& 0) a1)
(call #:pretty:get-plist-def)
(jcall pprint)
(bra 104)
103
(mov 'resetfn a2)
(mov (& 0) a1)
(jcall getprop)
(btnil a1 114)
(mov 'resetfn a2)
(mov (& 0) a1)
(call #:pretty:get-plist-def)
(jcall pprint)
(bra 104)
114
(mov (& 0) a1)
(jcall getdef)
(jcall pprint)
104
(push (@ 116))
(mov '0 a4)
(jmp terpri)
116
(eval ())
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:pretty:get-plist-def subr2)
(push a2)
(push a1)
(push a1)
(jcall getprop)
(push (car a1))
(mov (& 3) a2)
(mov (& 2) a1)
(jcall getprop)
(mov (cdr a1) a3)
(pop a2)
(pop a1)
(adjstk '2)
(jmp makedef)
))
(loader'((fentry prettyf fsubr)
(entry prettyf fsubr)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(mov (& 5) a1)
(mov (car a1) a1)
(jcall openo)
(push a1)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push (@ 105))
(push 'pretty)
(mov (& 6) a4)
(push (cdr a4))
(mov '2 a4)
(jmp apply)
105
(eval ())
(push (@ 106))
(push (@ 107))
(mov '0 a4)
(jmp outchan)
107
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
106
(eval ())
(mov (& 4) a1)
(mov (car a1) a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp outchan)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry prettyend subr0)
(entry prettyend subr0)
(push (@ 101))
(push 'pretty)
(mov '1 a4)
(jmp oblist)
101
(eval ())
(push a1)
102
(bfcons (& 0) 103)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(jcall remob)
(bra 102)
103
(adjstk '1)
(mov 'pretty a1)
(jcall rem-feature)
(mov '(pretty pprint pprin pretty prettyf prettyend) a1)
(jcall libautoload)
(mov 'prettyend a1)
(return)
))
((lambda (x) (while x (ptype (nextl x) (nextl x)))) '(|+| 1 |-| 1 * 1 append 1 and 1 calln 1 catenate 1 concat 1 list 1 max 1 mcons 1 min 1 or 1 plus 1 prin 1 print 1 prog1 1 progn 1 protect 1 times 1 any 2 block 2 call 2 catcherror 2 do 2 do* 2 every 2 evexit 2 evtag 2 exit 2 funcall 2 if 2 ifn 2 lambda 2 let 2 lets 2 let* 2 map 2 mapc 2 mapcar 2 maplist 2 mapcon 2 mapcan 2 repeat 2 slet 2 tag 2 unless 2 until 2 untilexit 2 when 2 while 2 with 2 de 3 defun 3 df 3 dm 3 dmc 3 dmd 3 dms 3 defmacro 3 defsharp 3 letn 3 backtrack 3 cond 4 selectq 5 setq 6 setqq 6 psetq 6 tagbody 7))
(loader '((end)))
