(loader '((title |virutil.lo|)))
(setq #:sys-package:colon 'display)
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'virbitmap)))
(putprop 'display '((() () () () () () () () () () () () () () () () () () () () () () () () () () ()) name package device xmax ymax eventmode prologuep keyboard-focus-window window graph-env root-window main-graph-env background foreground windows bitmaps menus colors font-names pattern-bitmaps cursor-bitmaps extend graph-envs current-selection resource named-cursors stipple-bitmaps) 'defstruct)
(if (featurep 'setf) (progn (progn (putprop '#:display:name '#:display:name 'setf-inverse) '#:display:name)))
(if (featurep 'compiler) (progn (defmacro-open #:display:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:package '#:display:package 'setf-inverse) '#:display:package)))
(if (featurep 'compiler) (progn (defmacro-open #:display:package (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:device '#:display:device 'setf-inverse) '#:display:device)))
(if (featurep 'compiler) (progn (defmacro-open #:display:device (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:xmax '#:display:xmax 'setf-inverse) '#:display:xmax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:xmax (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:ymax '#:display:ymax 'setf-inverse) '#:display:ymax)))
(if (featurep 'compiler) (progn (defmacro-open #:display:ymax (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:eventmode '#:display:eventmode 'setf-inverse) '#:display:eventmode)))
(if (featurep 'compiler) (progn (defmacro-open #:display:eventmode (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:prologuep '#:display:prologuep 'setf-inverse) '#:display:prologuep)))
(if (featurep 'compiler) (progn (defmacro-open #:display:prologuep (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:keyboard-focus-window '#:display:keyboard-focus-window 'setf-inverse) '#:display:keyboard-focus-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:keyboard-focus-window (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:window '#:display:window 'setf-inverse) '#:display:window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:window (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:graph-env '#:display:graph-env 'setf-inverse) '#:display:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:graph-env (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:root-window '#:display:root-window 'setf-inverse) '#:display:root-window)))
(if (featurep 'compiler) (progn (defmacro-open #:display:root-window (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:main-graph-env '#:display:main-graph-env 'setf-inverse) '#:display:main-graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:display:main-graph-env (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:background '#:display:background 'setf-inverse) '#:display:background)))
(if (featurep 'compiler) (progn (defmacro-open #:display:background (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:foreground '#:display:foreground 'setf-inverse) '#:display:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:display:foreground (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:windows '#:display:windows 'setf-inverse) '#:display:windows)))
(if (featurep 'compiler) (progn (defmacro-open #:display:windows (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:bitmaps '#:display:bitmaps 'setf-inverse) '#:display:bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:bitmaps (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:menus '#:display:menus 'setf-inverse) '#:display:menus)))
(if (featurep 'compiler) (progn (defmacro-open #:display:menus (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:colors '#:display:colors 'setf-inverse) '#:display:colors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:colors (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:font-names '#:display:font-names 'setf-inverse) '#:display:font-names)))
(if (featurep 'compiler) (progn (defmacro-open #:display:font-names (struct . valeur) (ifn valeur (list 'vref struct 18) (list 'vset struct 18 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:pattern-bitmaps '#:display:pattern-bitmaps 'setf-inverse) '#:display:pattern-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:pattern-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 19) (list 'vset struct 19 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:cursor-bitmaps '#:display:cursor-bitmaps 'setf-inverse) '#:display:cursor-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:cursor-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 20) (list 'vset struct 20 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:extend '#:display:extend 'setf-inverse) '#:display:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:display:extend (struct . valeur) (ifn valeur (list 'vref struct 21) (list 'vset struct 21 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:graph-envs '#:display:graph-envs 'setf-inverse) '#:display:graph-envs)))
(if (featurep 'compiler) (progn (defmacro-open #:display:graph-envs (struct . valeur) (ifn valeur (list 'vref struct 22) (list 'vset struct 22 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:current-selection '#:display:current-selection 'setf-inverse) '#:display:current-selection)))
(if (featurep 'compiler) (progn (defmacro-open #:display:current-selection (struct . valeur) (ifn valeur (list 'vref struct 23) (list 'vset struct 23 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:resource '#:display:resource 'setf-inverse) '#:display:resource)))
(if (featurep 'compiler) (progn (defmacro-open #:display:resource (struct . valeur) (ifn valeur (list 'vref struct 24) (list 'vset struct 24 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:named-cursors '#:display:named-cursors 'setf-inverse) '#:display:named-cursors)))
(if (featurep 'compiler) (progn (defmacro-open #:display:named-cursors (struct . valeur) (ifn valeur (list 'vref struct 25) (list 'vset struct 25 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:display:stipple-bitmaps '#:display:stipple-bitmaps 'setf-inverse) '#:display:stipple-bitmaps)))
(if (featurep 'compiler) (progn (defmacro-open #:display:stipple-bitmaps (struct . valeur) (ifn valeur (list 'vref struct 26) (list 'vset struct 26 (car valeur))))))
(putprop 'color '((() () () () () () ()) name red green blue mutable display extend) 'defstruct)
(loader'((fentry #:color:make subr0)
(entry #:color:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '7 a4)
(jmp vector)
101
(eval ())
(mov 'color (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:color:name '#:color:name 'setf-inverse) '#:color:name)))
(if (featurep 'compiler) (progn (defmacro-open #:color:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:color:red '#:color:red 'setf-inverse) '#:color:red)))
(if (featurep 'compiler) (progn (defmacro-open #:color:red (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:color:green '#:color:green 'setf-inverse) '#:color:green)))
(if (featurep 'compiler) (progn (defmacro-open #:color:green (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:color:blue '#:color:blue 'setf-inverse) '#:color:blue)))
(if (featurep 'compiler) (progn (defmacro-open #:color:blue (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:color:mutable '#:color:mutable 'setf-inverse) '#:color:mutable)))
(if (featurep 'compiler) (progn (defmacro-open #:color:mutable (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:color:display '#:color:display 'setf-inverse) '#:color:display)))
(if (featurep 'compiler) (progn (defmacro-open #:color:display (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:color:extend '#:color:extend 'setf-inverse) '#:color:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:color:extend (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop 'graph-env '((0 0 1 3 () () 0 0 0 0 () () () () () () 'pattern 0) font line-style pattern mode foreground background clip-x clip-y clip-w clip-h bitmap display extend font-y font-h stipple fill-mode arc-mode) 'defstruct)
(loader'((fentry #:graph-env:make subr0)
(entry #:graph-env:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '3)
(push nil)
(push nil)
(push '0)
(push '0)
(push '0)
(push '0)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push 'pattern)
(push '0)
(mov '18 a4)
(jmp vector)
101
(eval ())
(mov 'graph-env (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font '#:graph-env:font 'setf-inverse) '#:graph-env:font)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:line-style '#:graph-env:line-style 'setf-inverse) '#:graph-env:line-style)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:line-style (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:pattern '#:graph-env:pattern 'setf-inverse) '#:graph-env:pattern)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:pattern (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:mode '#:graph-env:mode 'setf-inverse) '#:graph-env:mode)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:mode (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:foreground '#:graph-env:foreground 'setf-inverse) '#:graph-env:foreground)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:foreground (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:background '#:graph-env:background 'setf-inverse) '#:graph-env:background)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:background (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-x '#:graph-env:clip-x 'setf-inverse) '#:graph-env:clip-x)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-x (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-y '#:graph-env:clip-y 'setf-inverse) '#:graph-env:clip-y)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-y (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-w '#:graph-env:clip-w 'setf-inverse) '#:graph-env:clip-w)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-w (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:clip-h '#:graph-env:clip-h 'setf-inverse) '#:graph-env:clip-h)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:clip-h (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:bitmap '#:graph-env:bitmap 'setf-inverse) '#:graph-env:bitmap)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:bitmap (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:display '#:graph-env:display 'setf-inverse) '#:graph-env:display)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:display (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:extend '#:graph-env:extend 'setf-inverse) '#:graph-env:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:extend (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font-y '#:graph-env:font-y 'setf-inverse) '#:graph-env:font-y)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font-y (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:font-h '#:graph-env:font-h 'setf-inverse) '#:graph-env:font-h)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:font-h (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:stipple '#:graph-env:stipple 'setf-inverse) '#:graph-env:stipple)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:stipple (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:fill-mode '#:graph-env:fill-mode 'setf-inverse) '#:graph-env:fill-mode)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:fill-mode (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:graph-env:arc-mode '#:graph-env:arc-mode 'setf-inverse) '#:graph-env:arc-mode)))
(if (featurep 'compiler) (progn (defmacro-open #:graph-env:arc-mode (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(putprop 'event '((() () () () () () () () () ()) code window detail gx gy x y w h b) 'defstruct)
(loader'((fentry #:event:make subr0)
(entry #:event:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '10 a4)
(jmp vector)
101
(eval ())
(mov 'event (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:event:code #:event:code)))
(if (featurep 'compiler) (progn (defmacro-open #:event:code (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:window #:event:window)))
(if (featurep 'compiler) (progn (defmacro-open #:event:window (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:detail #:event:detail)))
(if (featurep 'compiler) (progn (defmacro-open #:event:detail (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:gx #:event:gx)))
(if (featurep 'compiler) (progn (defmacro-open #:event:gx (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:gy #:event:gy)))
(if (featurep 'compiler) (progn (defmacro-open #:event:gy (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:x #:event:x)))
(if (featurep 'compiler) (progn (defmacro-open #:event:x (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:y #:event:y)))
(if (featurep 'compiler) (progn (defmacro-open #:event:y (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:w #:event:w)))
(if (featurep 'compiler) (progn (defmacro-open #:event:w (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:h #:event:h)))
(if (featurep 'compiler) (progn (defmacro-open #:event:h (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:event:b #:event:b)))
(if (featurep 'compiler) (progn (defmacro-open #:event:b (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(putprop 'bitmap '((() () () ()) w h extend display) 'defstruct)
(loader'((fentry #:bitmap:make subr0)
(entry #:bitmap:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(mov '4 a4)
(jmp vector)
101
(eval ())
(mov 'bitmap (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:w '#:bitmap:w 'setf-inverse) '#:bitmap:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:h '#:bitmap:h 'setf-inverse) '#:bitmap:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:extend '#:bitmap:extend 'setf-inverse) '#:bitmap:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:display '#:bitmap:display 'setf-inverse) '#:bitmap:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:bitmap:bytemap '(()) 'defstruct)
(loader'((fentry #:bitmap:bytemap:make subr0)
(entry #:bitmap:bytemap:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(mov '4 a4)
(jmp vector)
101
(eval ())
(mov '#:bitmap:bytemap (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:w '#:bitmap:bytemap:w 'setf-inverse) '#:bitmap:bytemap:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:h '#:bitmap:bytemap:h 'setf-inverse) '#:bitmap:bytemap:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:extend '#:bitmap:bytemap:extend 'setf-inverse) '#:bitmap:bytemap:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:bytemap:display '#:bitmap:bytemap:display 'setf-inverse) '#:bitmap:bytemap:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:bytemap:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:bitmap:stipple '((()) data) 'defstruct)
(loader'((fentry #:bitmap:stipple:make subr0)
(entry #:bitmap:stipple:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '5 a4)
(jmp vector)
101
(eval ())
(mov '#:bitmap:stipple (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:w '#:bitmap:stipple:w 'setf-inverse) '#:bitmap:stipple:w)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:w (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:h '#:bitmap:stipple:h 'setf-inverse) '#:bitmap:stipple:h)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:h (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:extend '#:bitmap:stipple:extend 'setf-inverse) '#:bitmap:stipple:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:extend (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:display '#:bitmap:stipple:display 'setf-inverse) '#:bitmap:stipple:display)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:display (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:bitmap:stipple:data '#:bitmap:stipple:data 'setf-inverse) '#:bitmap:stipple:data)))
(if (featurep 'compiler) (progn (defmacro-open #:bitmap:stipple:data (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(putprop '#:image:rectangle '((0 0 1 1) x y w h) 'defstruct)
(loader'((fentry #:image:rectangle:make subr0)
(entry #:image:rectangle:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '1)
(mov '4 a4)
(jmp vector)
101
(eval ())
(mov '#:image:rectangle (cdr a1))
(return)
))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:x #:image:rectangle:x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:x (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:y #:image:rectangle:y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:y (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:w #:image:rectangle:w)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:w (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (defsetf #:image:rectangle:h #:image:rectangle:h)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:h (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:image:rectangle:window '((() () () () () () () 0 () () () () () ()) title hilited visible graph-env extend father properties cursor display subwindows events-list window-type graphic-properties state) 'defstruct)
(loader'((fentry #:image:rectangle:window:make subr0)
(entry #:image:rectangle:window:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '0)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '18 a4)
(jmp vector)
101
(eval ())
(mov '#:image:rectangle:window (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:x '#:image:rectangle:window:x 'setf-inverse) '#:image:rectangle:window:x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:x (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:y '#:image:rectangle:window:y 'setf-inverse) '#:image:rectangle:window:y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:y (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:w '#:image:rectangle:window:w 'setf-inverse) '#:image:rectangle:window:w)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:w (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:h '#:image:rectangle:window:h 'setf-inverse) '#:image:rectangle:window:h)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:h (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:title '#:image:rectangle:window:title 'setf-inverse) '#:image:rectangle:window:title)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:title (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:hilited '#:image:rectangle:window:hilited 'setf-inverse) '#:image:rectangle:window:hilited)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:hilited (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:visible '#:image:rectangle:window:visible 'setf-inverse) '#:image:rectangle:window:visible)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:visible (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:graph-env '#:image:rectangle:window:graph-env 'setf-inverse) '#:image:rectangle:window:graph-env)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:graph-env (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:extend '#:image:rectangle:window:extend 'setf-inverse) '#:image:rectangle:window:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:extend (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:father '#:image:rectangle:window:father 'setf-inverse) '#:image:rectangle:window:father)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:father (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:properties '#:image:rectangle:window:properties 'setf-inverse) '#:image:rectangle:window:properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:properties (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:cursor '#:image:rectangle:window:cursor 'setf-inverse) '#:image:rectangle:window:cursor)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:cursor (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:display '#:image:rectangle:window:display 'setf-inverse) '#:image:rectangle:window:display)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:display (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:subwindows '#:image:rectangle:window:subwindows 'setf-inverse) '#:image:rectangle:window:subwindows)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:subwindows (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:events-list '#:image:rectangle:window:events-list 'setf-inverse) '#:image:rectangle:window:events-list)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:events-list (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:window-type '#:image:rectangle:window:window-type 'setf-inverse) '#:image:rectangle:window:window-type)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:window-type (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:graphic-properties '#:image:rectangle:window:graphic-properties 'setf-inverse) '#:image:rectangle:window:graphic-properties)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:graphic-properties (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:window:state '#:image:rectangle:window:state 'setf-inverse) '#:image:rectangle:window:state)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:window:state (struct . valeur) (ifn valeur (list 'vref struct 17) (list 'vset struct 17 (car valeur))))))
(putprop 'menu '((() () () ()) title itemlists display extend) 'defstruct)
(loader'((fentry #:menu:make subr0)
(entry #:menu:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(mov '4 a4)
(jmp vector)
101
(eval ())
(mov 'menu (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:title '#:menu:title 'setf-inverse) '#:menu:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlists '#:menu:itemlists 'setf-inverse) '#:menu:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:display '#:menu:display 'setf-inverse) '#:menu:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:extend '#:menu:extend 'setf-inverse) '#:menu:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(putprop '#:menu:itemlist '((() () ()) name active items) 'defstruct)
(loader'((fentry #:menu:itemlist:make subr0)
(entry #:menu:itemlist:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '7 a4)
(jmp vector)
101
(eval ())
(mov '#:menu:itemlist (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:title '#:menu:itemlist:title 'setf-inverse) '#:menu:itemlist:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:itemlists '#:menu:itemlist:itemlists 'setf-inverse) '#:menu:itemlist:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:display '#:menu:itemlist:display 'setf-inverse) '#:menu:itemlist:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:extend '#:menu:itemlist:extend 'setf-inverse) '#:menu:itemlist:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:name '#:menu:itemlist:name 'setf-inverse) '#:menu:itemlist:name)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:active '#:menu:itemlist:active 'setf-inverse) '#:menu:itemlist:active)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:active (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:itemlist:items '#:menu:itemlist:items 'setf-inverse) '#:menu:itemlist:items)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:itemlist:items (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop '#:menu:item '((() () ()) name active value) 'defstruct)
(loader'((fentry #:menu:item:make subr0)
(entry #:menu:item:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '7 a4)
(jmp vector)
101
(eval ())
(mov '#:menu:item (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:title '#:menu:item:title 'setf-inverse) '#:menu:item:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:itemlists '#:menu:item:itemlists 'setf-inverse) '#:menu:item:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:display '#:menu:item:display 'setf-inverse) '#:menu:item:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:extend '#:menu:item:extend 'setf-inverse) '#:menu:item:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:name '#:menu:item:name 'setf-inverse) '#:menu:item:name)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:active '#:menu:item:active 'setf-inverse) '#:menu:item:active)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:active (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:item:value '#:menu:item:value 'setf-inverse) '#:menu:item:value)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:item:value (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(putprop 'font-info '((() () () () () () () () () () () () () ()) ascent descent angle weight minrbearing minlbearing minascent mindescent minwidth maxrbearing maxlbearing maxascent maxdescent maxwidth) 'defstruct)
(loader'((fentry #:font-info:make subr0)
(entry #:font-info:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '14 a4)
(jmp vector)
101
(eval ())
(mov 'font-info (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:ascent '#:font-info:ascent 'setf-inverse) '#:font-info:ascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:ascent (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:descent '#:font-info:descent 'setf-inverse) '#:font-info:descent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:descent (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:angle '#:font-info:angle 'setf-inverse) '#:font-info:angle)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:angle (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:weight '#:font-info:weight 'setf-inverse) '#:font-info:weight)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:weight (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minrbearing '#:font-info:minrbearing 'setf-inverse) '#:font-info:minrbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minrbearing (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minlbearing '#:font-info:minlbearing 'setf-inverse) '#:font-info:minlbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minlbearing (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minascent '#:font-info:minascent 'setf-inverse) '#:font-info:minascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minascent (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:mindescent '#:font-info:mindescent 'setf-inverse) '#:font-info:mindescent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:mindescent (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:minwidth '#:font-info:minwidth 'setf-inverse) '#:font-info:minwidth)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:minwidth (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxrbearing '#:font-info:maxrbearing 'setf-inverse) '#:font-info:maxrbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxrbearing (struct . valeur) (ifn valeur (list 'vref struct 9) (list 'vset struct 9 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxlbearing '#:font-info:maxlbearing 'setf-inverse) '#:font-info:maxlbearing)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxlbearing (struct . valeur) (ifn valeur (list 'vref struct 10) (list 'vset struct 10 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxascent '#:font-info:maxascent 'setf-inverse) '#:font-info:maxascent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxascent (struct . valeur) (ifn valeur (list 'vref struct 11) (list 'vset struct 11 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxdescent '#:font-info:maxdescent 'setf-inverse) '#:font-info:maxdescent)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxdescent (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:font-info:maxwidth '#:font-info:maxwidth 'setf-inverse) '#:font-info:maxwidth)))
(if (featurep 'compiler) (progn (defmacro-open #:font-info:maxwidth (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(loader'((fentry #:window:background nsubr)
(entry #:window:background nsubr)
(cnbge a4 '1 101)
(mov '#:window:background a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(btnil a1 102)
(hpxmov (& 0) '7 a4)
(btnil a4 104)
(hpxmov (& 0) '7 a4)
(hpmovx (car a1) a4 '5)
(mov (car a1) a1)
(adjstk '1)
(return)
104
(mov nil a1)
(adjstk '1)
(return)
102
(hpxmov (& 0) '7 a4)
(btnil a4 106)
(hpxmov (& 0) '7 a1)
(hpxmov a1 '5 a1)
(adjstk '1)
(return)
106
(mov nil a1)
(adjstk '1)
(return)
))
(setq #:sys-package:colon 'display)
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'virbitmap)))
(if (boundp '#:display:current-display) (defvar #:display:current-display #:display:current-display) (defvar #:display:current-display))
(loader'((fentry current-display nsubr)
(entry current-display nsubr)
(push a4)
(mov (& 0) a1)
(cabne a1 '0 102)
(mov (cvalq #:display:current-display) a1)
(bra 101)
102
(cabne a1 '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bfnil a4 104)
(mov nil (cvalq #:display:current-display))
(mov nil a1)
(bra 101)
104
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bfnil a4 107)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'current-display a1)
(jcall error)
107
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a1)
(mov 'display a2)
(jcall typep)
(btnil a1 110)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpxmov a4 '6 a4)
(bfnil a4 109)
110
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:errnotadisplay a2)
(mov 'current-display a1)
(jcall error)
109
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(cabeq (cvalq #:display:current-display) a4 112)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(mov a4 (cvalq #:display:current-display))
(push (@ 113))
(push 'current-display)
(push a4)
(mov '2 a4)
(jmp send)
113
(eval ())
112
(mov (cvalq #:display:current-display) a1)
(bra 101)
103
(mov (& 0) a3)
(mov 'errwna a2)
(mov 'current-display a1)
(jcall error)
101
(pop a4)
(adjstk a4)
(return)
))
(loader '((end)))
