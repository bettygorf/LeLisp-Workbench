(loader '((title |lmcache.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'lmcache)))
(defvar #:sys-package:colon 'lmcache)
(add-feature 'lmcache)
(defvar #:lmcache:defmodule ())
(defvar #:lmcache:verbose ())
(if (not (typefn '#:lmcache:oldreaddefmodule)) (progn (synonymq #:lmcache:oldreaddefmodule readdefmodule)))
(loader'((fentry #:lmcache:readdefmodule subr1)
(entry #:lmcache:readdefmodule subr1)
(push a1)
(jcall pathname-name)
(mov a1 a2)
(mov nil a1)
(jcall symbol)
(push a1)
(mov (cvalq #:lmcache:defmodule) a2)
(jcall cassq)
(push a1)
(bfnil a1 101)
(mov (& 2) a1)
(jcall #:lmcache:oldreaddefmodule)
(mov a1 (& 0))
(btnil a1 102)
(mov (cvalq #:lmcache:defmodule) a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall acons)
(mov a1 (cvalq #:lmcache:defmodule))
(mov (& 0) a1)
(adjstk '3)
(return)
102
(mov nil a1)
(adjstk '3)
(return)
101
(adjstk '3)
(return)
))
(loader'((fentry #:lmcache:at-end nsubr)
(entry #:lmcache:at-end nsubr)
(jcall #:llcp:nlist)
(push a1)
(btnil (cvalq #:lmcache:verbose) 102)
(push (@ 103))
(push '"; lmcache: ")
(mov (cvalq #:lmcache:defmodule) a1)
(jcall length)
(push a1)
(push '" modules were cached in this session")
(mov '3 a4)
(jmp print)
103
(eval ())
102
(mov (& 0) a3)
(mov 'at-end a2)
(mov 'lmcache a1)
(adjstk '1)
(jmp super-itsoft)
))
(loader'((fentry lmcacheinit subr0)
(entry lmcacheinit subr0)
(mov '#:lmcache:readdefmodule a2)
(mov 'readdefmodule a1)
(jcall synonym)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'lmcache a1)
(jcall cons)
(mov a1 (cvalq #:sys-package:itsoft))
(return)
))
(loader'((fentry lmcacheend subr0)
(entry lmcacheend subr0)
(mov '#:lmcache:oldreaddefmodule a2)
(mov 'readdefmodule a1)
(jcall synonym)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'lmcache a1)
(jcall delete)
(mov a1 (cvalq #:sys-package:itsoft))
(return)
))
(loader '((end)))
