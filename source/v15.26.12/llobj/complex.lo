(loader '((title |complex.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'complex)))
(setq #:sys-package:colon 'r)
(add-feature 'complex)
(if (not (featurep 'genr)) (progn (loadmodule 'genr)))
(setq #:backup:majuscules #:system:read-case-flag #:system:read-case-flag ())
(putprop '#:r:c '((() ()) r i) 'defstruct)
(loader'((entry #:r:c:make subr0)
(push (@ 101))
(push nil)
(push nil)
(mov '2 a4)
(jmp vector)
101
(eval ())
(mov '#:r:c (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:r:c:r '#:r:c:r 'setf-inverse) '#:r:c:r)))
(if (featurep 'compiler) (progn (defmacro-open #:r:c:r (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:r:c:i '#:r:c:i 'setf-inverse) '#:r:c:i)))
(if (featurep 'compiler) (progn (defmacro-open #:r:c:i (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(setq #:sys-package:colon '#:r:c)
(loader'((fentry makecomplex subr2)
(entry makecomplex subr2)
(push a2)
(push a1)
(push (@ 103))
(push '0)
(push a2)
(mov '2 a4)
(jmp =)
103
(eval ())
(btnil a1 101)
(mov (& 0) a1)
(adjstk '2)
(return)
101
(call #:r:c:make)
(hpmovx (& 0) a1 '0)
(hpmovx (& 1) a1 '1)
(adjstk '2)
(return)
))
(defvar i (makecomplex 0 1))
(loader'((fentry complexp subr1)
(entry complexp subr1)
(push a1)
(jcall type-of)
(mov a1 a2)
(mov '#:r:c a1)
(jcall eq)
(btnil a1 101)
(mov (& 0) a1)
101
(adjstk '1)
(return)
))
(loader'((fentry realp subr1)
(entry realp subr1)
(push a1)
(jcall rationalp)
(bfnil a1 101)
(mov (& 0) a1)
(jcall floatp)
(bfnil a1 101)
(mov (& 0) a1)
(jcall numberp)
(btnil a1 101)
(push (@ 103))
(push 'realp)
(push (& 2))
(mov '2 a4)
(jmp send)
103
(eval ())
101
(adjstk '1)
(return)
))
(loader'((fentry #:r:c:realp subr1)
(entry #:r:c:realp subr1)
(mov nil a1)
(return)
))
(loader'((fentry realpart subr1)
(entry realpart subr1)
(push a1)
(jcall type-of)
(cabne '#:r:c a1 101)
(hpxmov (& 0) '0 a1)
(adjstk '1)
(return)
101
(mov (& 0) a1)
(jcall numberp)
(btnil a1 103)
(mov (& 0) a1)
(adjstk '1)
(return)
103
(push (@ 105))
(push 'realpart)
(push (& 2))
(mov '2 a4)
(jmp list)
105
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'realpart a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry imagpart subr1)
(entry imagpart subr1)
(push a1)
(jcall type-of)
(cabne '#:r:c a1 101)
(hpxmov (& 0) '1 a1)
(adjstk '1)
(return)
101
(mov (& 0) a1)
(jcall numberp)
(btnil a1 103)
(mov '0 a1)
(adjstk '1)
(return)
103
(push (@ 105))
(push 'imagpart)
(push (& 2))
(mov '2 a4)
(jmp list)
105
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'imagpart a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry conjugate subr1)
(entry conjugate subr1)
(push a1)
(jcall numberp)
(btnil a1 101)
(mov (& 0) a1)
(jcall type-of)
(cabne '#:r:c a1 103)
(call #:r:c:make)
(push a1)
(hpxmov (& 1) '0 a4)
(hpmovx a4 a1 '0)
(push a1)
(push (@ 105))
(hpxmov (& 3) '1 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
105
(eval ())
(pop a4)
(hpmovx a1 a4 '1)
(mov (& 0) a1)
(adjstk '2)
(return)
103
(mov (& 0) a1)
(adjstk '1)
(return)
101
(push (@ 106))
(push 'conjugate)
(push (& 2))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'conjugate a1)
(adjstk '1)
(jmp error)
))
(loader'((entry #:r:c:module2 subr1)
(push a1)
(push (@ 101))
(push (@ 102))
(hpxmov a1 '0 a4)
(push a4)
(hpxmov a1 '0 a4)
(push a4)
(mov '2 a4)
(jmp *)
102
(eval ())
(push a1)
(push (@ 103))
(hpxmov (& 3) '1 a4)
(push a4)
(hpxmov (& 4) '1 a4)
(push a4)
(mov '2 a4)
(jmp *)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:r:c:float subr1)
(entry #:r:c:float subr1)
(push a1)
(call #:r:c:make)
(push a1)
(push a1)
(hpxmov (& 2) '0 a1)
(jcall float)
(pop a4)
(hpmovx a1 a4 '0)
(hpxmov (& 1) '1 a1)
(jcall float)
(hpmovx a1 (& 0) '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:r:c:truncate subr1)
(entry #:r:c:truncate subr1)
(push (@ 101))
(push 'fix)
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov a1 a3)
(mov 'rinc a2)
(mov 'truncate a1)
(jmp error)
))
(loader'((fentry #:r:c:<?> subr2)
(entry #:r:c:<?> subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall type-of)
(cabne '#:r:c a1 101)
(hpxmov (& 0) '0 a1)
(hpxmov (& 1) '0 a2)
(jcall <?>)
(push a1)
(hpxmov (& 1) '1 a1)
(hpxmov (& 2) '1 a2)
(jcall <?>)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp makecomplex)
101
(call #:r:c:make)
(push a1)
(push a1)
(hpxmov (& 2) '0 a1)
(mov (& 3) a2)
(jcall <?>)
(pop a4)
(hpmovx a1 a4 '0)
(hpxmov (& 1) '1 a1)
(mov '0 a2)
(jcall <?>)
(hpmovx a1 (& 0) '1)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry #:r:c:|+| subr2)
(entry #:r:c:|+| subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall type-of)
(cabne '#:r:c a1 101)
(push (@ 103))
(hpxmov (& 1) '0 a4)
(push a4)
(hpxmov (& 3) '0 a4)
(push a4)
(mov '2 a4)
(jmp |+|)
103
(eval ())
(push a1)
(push (@ 104))
(hpxmov (& 2) '1 a4)
(push a4)
(hpxmov (& 4) '1 a4)
(push a4)
(mov '2 a4)
(jmp |+|)
104
(eval ())
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp makecomplex)
101
(call #:r:c:make)
(push a1)
(push a1)
(push (@ 105))
(push (& 4))
(hpxmov (& 4) '0 a4)
(push a4)
(mov '2 a4)
(jmp |+|)
105
(eval ())
(pop a4)
(hpmovx a1 a4 '0)
(hpxmov (& 1) '1 a4)
(hpmovx a4 (& 0) '1)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry #:r:c:|0-| subr1)
(entry #:r:c:|0-| subr1)
(push a1)
(call #:r:c:make)
(push a1)
(push a1)
(push (@ 101))
(hpxmov (& 3) '0 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
101
(eval ())
(pop a4)
(hpmovx a1 a4 '0)
(push (@ 102))
(hpxmov (& 2) '1 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
102
(eval ())
(hpmovx a1 (& 0) '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:r:c:* subr2)
(entry #:r:c:* subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall type-of)
(cabne '#:r:c a1 101)
(push (@ 103))
(push (@ 104))
(hpxmov (& 2) '0 a4)
(push a4)
(hpxmov (& 4) '0 a4)
(push a4)
(mov '2 a4)
(jmp *)
104
(eval ())
(push a1)
(push (@ 105))
(hpxmov (& 3) '1 a4)
(push a4)
(hpxmov (& 5) '1 a4)
(push a4)
(mov '2 a4)
(jmp *)
105
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
103
(eval ())
(push a1)
(push (@ 106))
(push (@ 107))
(hpxmov (& 3) '0 a4)
(push a4)
(hpxmov (& 5) '1 a4)
(push a4)
(mov '2 a4)
(jmp *)
107
(eval ())
(push a1)
(push (@ 108))
(hpxmov (& 4) '1 a4)
(push a4)
(hpxmov (& 6) '0 a4)
(push a4)
(mov '2 a4)
(jmp *)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp makecomplex)
101
(push (@ 109))
(push (& 2))
(hpxmov (& 2) '0 a4)
(push a4)
(mov '2 a4)
(jmp *)
109
(eval ())
(push a1)
(push (@ 110))
(push (& 3))
(hpxmov (& 3) '1 a4)
(push a4)
(mov '2 a4)
(jmp *)
110
(eval ())
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp makecomplex)
))
(loader'((fentry #:r:c:1/ subr1)
(entry #:r:c:1/ subr1)
(push a1)
(call #:r:c:module2)
(push a1)
(call #:r:c:make)
(push a1)
(push a1)
(push (@ 101))
(hpxmov (& 4) '0 a4)
(push a4)
(push (& 4))
(mov '2 a4)
(jmp /)
101
(eval ())
(pop a4)
(hpmovx a1 a4 '0)
(push (@ 102))
(push (@ 103))
(hpxmov (& 4) '1 a4)
(push a4)
(push (& 4))
(mov '2 a4)
(jmp /)
103
(eval ())
(push a1)
(mov '1 a4)
(jmp |-|)
102
(eval ())
(hpmovx a1 (& 0) '1)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(loader'((fentry #:r:c:prin subr1)
(entry #:r:c:prin subr1)
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp precision)
103
(eval ())
(cabne a1 'cl 101)
(push (@ 104))
(push '35)
(mov '1 a4)
(jmp princn)
104
(eval ())
(push (@ 105))
(push '67)
(mov '1 a4)
(jmp princn)
105
(eval ())
(push (@ 106))
(push '40)
(mov '1 a4)
(jmp princn)
106
(eval ())
(push (@ 107))
(hpxmov (& 1) '0 a4)
(push a4)
(mov '1 a4)
(jmp prin)
107
(eval ())
(push (@ 108))
(push '32)
(mov '1 a4)
(jmp princn)
108
(eval ())
(push (@ 109))
(hpxmov (& 1) '1 a4)
(push a4)
(mov '1 a4)
(jmp prin)
109
(eval ())
(push (@ 110))
(push '41)
(mov '1 a4)
(jmp princn)
110
(eval ())
(bra 102)
101
(push (@ 111))
(push '91)
(mov '1 a4)
(jmp princn)
111
(eval ())
(push (@ 114))
(push '1)
(hpxmov (& 2) '1 a4)
(push a4)
(mov '2 a4)
(jmp =)
114
(eval ())
(bfnil a1 113)
(push (@ 115))
(push '1.)
(hpxmov (& 2) '1 a4)
(push a4)
(mov '2 a4)
(jmp =)
115
(eval ())
(bfnil a1 113)
(push (@ 119))
(push '-1)
(hpxmov (cvalq i) '1 a4)
(push a4)
(mov '2 a4)
(jmp =)
119
(eval ())
(bfnil a1 118)
(push (@ 120))
(push '-1.)
(hpxmov (& 2) '1 a4)
(push a4)
(mov '2 a4)
(jmp =)
120
(eval ())
(btnil a1 116)
118
(push (@ 121))
(push '45)
(mov '1 a4)
(jmp princn)
121
(eval ())
(bra 113)
116
(push (@ 122))
(hpxmov (& 1) '1 a4)
(push a4)
(mov '1 a4)
(jmp prin)
122
(eval ())
113
(push (@ 123))
(push '105)
(mov '1 a4)
(jmp princn)
123
(eval ())
(push (@ 126))
(push '0)
(hpxmov (& 2) '0 a4)
(push a4)
(mov '2 a4)
(jmp =)
126
(eval ())
(bfnil a1 125)
(push (@ 129))
(hpxmov (& 1) '0 a4)
(push a4)
(push '0)
(mov '2 a4)
(jmp >)
129
(eval ())
(btnil a1 127)
(push (@ 130))
(push '43)
(mov '1 a4)
(jmp princn)
130
(eval ())
(push (@ 131))
(hpxmov (& 1) '0 a4)
(push a4)
(mov '1 a4)
(jmp prin)
131
(eval ())
(bra 125)
127
(push (@ 132))
(push '45)
(mov '1 a4)
(jmp princn)
132
(eval ())
(push (@ 133))
(push (@ 134))
(hpxmov (& 2) '0 a4)
(push a4)
(mov '1 a4)
(jmp |-|)
134
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
133
(eval ())
125
(push (@ 135))
(push '93)
(mov '1 a4)
(jmp princn)
135
(eval ())
102
(mov (& 0) a1)
(adjstk '1)
(return)
))
(dmc |[| () ((lambda (r j) (setq j ((lambda (#:with:arg0) (protect (progn (typecn 105 'csep) (selectq (peekcn) (105 1) (45 (readcn) (if (eq (peekcn) 105) -1 (|-| (read)))) (t (read)))) (typecn 105 #:with:arg0))) (typecn 105)) r (readcn)) (selectq r (105 (selectq (readcn) (93 (setq r 0)) (43 (setq r (read)) (if (eq (peekcn) 93) (readcn) (#:r:error 'read 'rnotc r))) (45 (setq r (|-| (read))) (if (eq (peekcn) 93) (readcn) (#:r:error 'read 'rnotc r))) (t (#:r:error 'read 'rnotc r)))) (93 (setq r j j 0)) (t (#:r:error 'read 'rnotc r))) (makecomplex r j)) () ()))
(defsharp C () (setq n (read)) (list (#:r:c:x (car n) (cadr n))))
(defvar pi (if (boundp 'pi) pi (* 4 (atan 1.))))
(defvar pi/2 (/ pi 2))
(loader'((fentry #:r:c:abs subr1)
(entry #:r:c:abs subr1)
(push a1)
(hpxmov a1 '0 a1)
(jcall zerop)
(btnil a1 101)
(hpxmov (& 0) '1 a1)
(adjstk '1)
(jmp abs)
101
(mov (& 0) a1)
(call #:r:c:module2)
(adjstk '1)
(jmp sqrt)
))
(loader'((fentry phase subr1)
(entry phase subr1)
(push a1)
(jcall type-of)
(cabne '#:r:c a1 101)
(hpxmov (& 0) '1 a1)
(hpxmov (& 0) '0 a2)
(adjstk '1)
(bra #:r:c:arctan)
101
(mov (& 0) a1)
(jcall numberp)
(btnil a1 103)
(push (@ 107))
(push (& 1))
(push '0)
(mov '2 a4)
(jmp <)
107
(eval ())
(btnil a1 105)
(mov (cvalq pi) a1)
(adjstk '1)
(return)
105
(mov '0 a1)
(adjstk '1)
(return)
103
(push (@ 108))
(push 'phase)
(push (& 2))
(mov '2 a4)
(jmp list)
108
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'phase a1)
(adjstk '1)
(jmp error)
))
(loader'((entry #:r:c:arctan subr2)
(push a2)
(push a1)
(mov '0 a2)
(jcall <?>)
(cabne a1 '1 102)
(mov '0 a2)
(mov (& 1) a1)
(jcall <?>)
(cabne a1 '1 104)
(push (@ 105))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp /)
105
(eval ())
(adjstk '2)
(jmp atan)
104
(cabne a1 '0 106)
(mov (cvalq pi/2) a1)
(adjstk '2)
(return)
106
(cabne a1 '-1 107)
(push (@ 108))
(push (cvalq pi))
(push (@ 109))
(push (& 3))
(push (& 5))
(mov '2 a4)
(jmp /)
109
(eval ())
(jcall atan)
(push a1)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(adjstk '2)
(return)
107
(mov nil a1)
(adjstk '2)
(return)
102
(cabne a1 '0 110)
(push (@ 113))
(push (& 2))
(push '0)
(mov '2 a4)
(jmp <)
113
(eval ())
(btnil a1 111)
(mov (cvalq pi) a1)
(adjstk '2)
(return)
111
(mov '0 a1)
(adjstk '2)
(return)
110
(cabne a1 '-1 114)
(push (@ 115))
(push (@ 116))
(push (& 2))
(mov '1 a4)
(jmp |-|)
116
(eval ())
(mov (& 2) a2)
(call #:r:c:arctan)
(push a1)
(mov '1 a4)
(jmp |-|)
115
(eval ())
(adjstk '2)
(return)
114
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry signum subr1)
(entry signum subr1)
(push a1)
(jcall type-of)
(cabne '#:r:c a1 101)
(push (@ 103))
(mov (& 1) a1)
(jcall #:r:c:abs)
(push a1)
(mov '1 a4)
(jmp /)
103
(eval ())
(mov a1 a2)
(mov (& 0) a1)
(adjstk '1)
(jmp #:r:c:*)
101
(mov (& 0) a1)
(jcall numberp)
(btnil a1 104)
(mov '0 a2)
(mov (& 0) a1)
(adjstk '1)
(jmp <?>)
104
(push (@ 106))
(push 'signum)
(push (& 2))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'signum a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry #:r:c:log subr1)
(entry #:r:c:log subr1)
(push a1)
(call #:r:c:make)
(push a1)
(push a1)
(mov (& 2) a1)
(jcall #:r:c:abs)
(jcall log)
(pop a4)
(hpmovx a1 a4 '0)
(hpxmov (& 1) '1 a1)
(hpxmov (& 1) '0 a2)
(call #:r:c:arctan)
(hpmovx a1 (& 0) '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:r:c:exp subr1)
(entry #:r:c:exp subr1)
(push a1)
(hpxmov a1 '1 a1)
(call #:r:c:cis)
(push a1)
(hpxmov (& 1) '0 a1)
(jcall exp)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp #:r:c:*)
))
(loader'((entry #:r:c:cis subr1)
(push a1)
(call #:r:c:make)
(push a1)
(push a1)
(mov (& 2) a1)
(jcall cos)
(pop a4)
(hpmovx a1 a4 '0)
(mov (& 1) a1)
(jcall sin)
(hpmovx a1 (& 0) '1)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry cis subr1)
(entry cis subr1)
(push a1)
(jcall numberp)
(btnil a1 101)
(mov (& 0) a1)
(adjstk '1)
(bra #:r:c:cis)
101
(push (@ 103))
(push 'cis)
(push (& 2))
(mov '2 a4)
(jmp list)
103
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'cis a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry #:r:c:sqrt subr1)
(entry #:r:c:sqrt subr1)
(push (@ 101))
(jcall #:r:c:log)
(push a1)
(push '2)
(mov '2 a4)
(jmp /)
101
(eval ())
(jmp #:r:c:exp)
))
(loader'((fentry #:r:c:sin subr1)
(entry #:r:c:sin subr1)
(push a1)
(push (@ 101))
(push (@ 102))
(push (@ 103))
(push (cvalq i))
(push a1)
(mov '2 a4)
(jmp *)
103
(eval ())
(jcall exp)
(push a1)
(push (@ 104))
(push '[-i])
(push (& 5))
(mov '2 a4)
(jmp *)
104
(eval ())
(jcall exp)
(push a1)
(mov '2 a4)
(jmp |-|)
102
(eval ())
(push a1)
(push '[-0.5i])
(mov '2 a4)
(jmp *)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:r:c:cos subr1)
(entry #:r:c:cos subr1)
(push a1)
(push (@ 101))
(push (@ 102))
(push (@ 103))
(push (cvalq i))
(push a1)
(mov '2 a4)
(jmp *)
103
(eval ())
(jcall exp)
(push a1)
(push (@ 104))
(push '[-i])
(push (& 5))
(mov '2 a4)
(jmp *)
104
(eval ())
(jcall exp)
(push a1)
(mov '2 a4)
(jmp |+|)
102
(eval ())
(push a1)
(push '2)
(mov '2 a4)
(jmp /)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:r:c:atan subr1)
(entry #:r:c:atan subr1)
(push a1)
(push (@ 103))
(push (cvalq i))
(push a1)
(mov '2 a4)
(jmp =)
103
(eval ())
(btnil a1 101)
(push (@ 104))
(push '0)
(mov '1 a4)
(jmp /)
104
(eval ())
(adjstk '1)
(return)
101
(push (@ 105))
(push (@ 106))
(push '1)
(push (@ 107))
(push (cvalq i))
(push (& 5))
(mov '2 a4)
(jmp *)
107
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(push a1)
(push (@ 108))
(push '1)
(push (@ 109))
(push (& 5))
(push (& 6))
(mov '2 a4)
(jmp *)
109
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(jcall sqrt)
(push a1)
(mov '2 a4)
(jmp /)
105
(eval ())
(jcall log)
(mov a1 a2)
(mov '[-i] a1)
(adjstk '1)
(jmp #:r:c:*)
))
(loader'((fentry tan subr1)
(entry tan subr1)
(push a1)
(push (@ 101))
(jcall sin)
(push a1)
(mov (& 2) a1)
(jcall cos)
(push a1)
(mov '2 a4)
(jmp /)
101
(eval ())
(adjstk '1)
(return)
))
(setq #:sys-package:colon 'r)
(loader'((fentry #:r:log subr1)
(entry #:r:log subr1)
(push a1)
(mov '0 a2)
(jcall <?>)
(cabne a1 '1 102)
(mov (& 0) a1)
(jcall float)
(adjstk '1)
(jmp log)
102
(cabne a1 '0 103)
(push (@ 104))
(push (@ 105))
(push '0)
(mov '1 a4)
(jmp /)
105
(eval ())
(push a1)
(mov '1 a4)
(jmp |-|)
104
(eval ())
(adjstk '1)
(return)
103
(cabne a1 '-1 106)
(call #:r:c:make)
(push a1)
(push a1)
(push (@ 107))
(push (& 3))
(mov '1 a4)
(jmp |-|)
107
(eval ())
(jcall log)
(pop a4)
(hpmovx a1 a4 '0)
(hpmovx (cvalq pi) (& 0) '1)
(mov (& 0) a1)
(adjstk '2)
(return)
106
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:fix:log subr1)
(entry #:fix:log subr1)
(jmp #:r:log)
))
(loader'((fentry #:float:log subr1)
(entry #:float:log subr1)
(jmp #:r:log)
))
(loader'((fentry #:r:sqrt subr1)
(entry #:r:sqrt subr1)
(push a1)
(mov '0 a2)
(jcall <?>)
(cabne a1 '1 102)
(mov (& 0) a1)
(jcall float)
(adjstk '1)
(jmp sqrt)
102
(cabne a1 '0 103)
(mov '0 a1)
(adjstk '1)
(return)
103
(cabne a1 '-1 104)
(call #:r:c:make)
(push a1)
(hpmovx '0 a1 '0)
(push a1)
(push (@ 105))
(push (& 3))
(mov '1 a4)
(jmp |-|)
105
(eval ())
(jcall sqrt)
(pop a4)
(hpmovx a1 a4 '1)
(mov (& 0) a1)
(adjstk '2)
(return)
104
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:fix:sqrt subr1)
(entry #:fix:sqrt subr1)
(jmp #:r:sqrt)
))
(loader'((fentry #:float:sqrt subr1)
(entry #:float:sqrt subr1)
(jmp #:r:sqrt)
))
(loader'((fentry #:r:asin subr1)
(entry #:r:asin subr1)
(push a1)
(push (@ 101))
(push '[-i])
(push (@ 102))
(push (@ 103))
(push a1)
(push (cvalq i))
(mov '2 a4)
(jmp *)
103
(eval ())
(push a1)
(push (@ 104))
(push '1)
(push (@ 105))
(push (& 7))
(push (& 8))
(mov '2 a4)
(jmp *)
105
(eval ())
(push a1)
(mov '2 a4)
(jmp |-|)
104
(eval ())
(jcall sqrt)
(push a1)
(mov '2 a4)
(jmp |+|)
102
(eval ())
(jcall log)
(push a1)
(mov '2 a4)
(jmp *)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:fix:asin subr1)
(entry #:fix:asin subr1)
(jmp #:r:asin)
))
(loader'((fentry #:float:asin subr1)
(entry #:float:asin subr1)
(jmp #:r:asin)
))
(loader'((fentry #:r:acos subr1)
(entry #:r:acos subr1)
(push a1)
(jcall realp)
(btnil a1 101)
(push (@ 103))
(push (cvalq pi/2))
(mov (& 2) a1)
(jcall float)
(jcall asin)
(push a1)
(mov '2 a4)
(jmp |-|)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 104))
(push (cvalq pi/2))
(mov (& 2) a1)
(jcall asin)
(push a1)
(mov '2 a4)
(jmp |-|)
104
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:fix:acos subr1)
(entry #:fix:acos subr1)
(jmp #:r:acos)
))
(loader'((fentry #:float:acos subr1)
(entry #:float:acos subr1)
(jmp #:r:acos)
))
(loader'((fentry sinh subr1)
(entry sinh subr1)
(push a1)
(jcall numberp)
(btnil a1 101)
(push (@ 103))
(push (@ 104))
(mov (& 2) a1)
(jcall exp)
(push a1)
(push (@ 105))
(push (& 4))
(mov '1 a4)
(jmp |-|)
105
(eval ())
(jcall exp)
(push a1)
(mov '2 a4)
(jmp |-|)
104
(eval ())
(push a1)
(push '2)
(mov '2 a4)
(jmp /)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 106))
(push 'sinh)
(push (& 2))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'sinh a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry cosh subr1)
(entry cosh subr1)
(push a1)
(jcall numberp)
(btnil a1 101)
(push (@ 103))
(push (@ 104))
(mov (& 2) a1)
(jcall exp)
(push a1)
(push (@ 105))
(push (& 4))
(mov '1 a4)
(jmp |-|)
105
(eval ())
(jcall exp)
(push a1)
(mov '2 a4)
(jmp |+|)
104
(eval ())
(push a1)
(push '2)
(mov '2 a4)
(jmp /)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 106))
(push 'cosh)
(push (& 2))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'cosh a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry tanh subr1)
(entry tanh subr1)
(push a1)
(jcall numberp)
(btnil a1 101)
(push (@ 103))
(mov (& 1) a1)
(jcall sinh)
(push a1)
(mov (& 2) a1)
(jcall cosh)
(push a1)
(mov '2 a4)
(jmp /)
103
(eval ())
(adjstk '1)
(return)
101
(push (@ 104))
(push 'tanh)
(push (& 2))
(mov '2 a4)
(jmp list)
104
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'tanh a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry asinh subr1)
(entry asinh subr1)
(push a1)
(jcall numberp)
(btnil a1 101)
(push (@ 103))
(push (& 1))
(push (@ 104))
(push '1)
(push (@ 105))
(push (& 5))
(push (& 6))
(mov '2 a4)
(jmp *)
105
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
104
(eval ())
(jcall sqrt)
(push a1)
(mov '2 a4)
(jmp |+|)
103
(eval ())
(adjstk '1)
(jmp log)
101
(push (@ 106))
(push 'asinh)
(push (& 2))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'asinh a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry acosh subr1)
(entry acosh subr1)
(push a1)
(jcall numberp)
(btnil a1 101)
(push (@ 103))
(push (& 1))
(push (@ 104))
(push (@ 105))
(push (& 4))
(push '1)
(mov '2 a4)
(jmp |+|)
105
(eval ())
(push a1)
(push (@ 106))
(push (@ 107))
(push (& 6))
(push '1)
(mov '2 a4)
(jmp |-|)
107
(eval ())
(push a1)
(push (@ 108))
(push (& 7))
(push '1)
(mov '2 a4)
(jmp |+|)
108
(eval ())
(push a1)
(mov '2 a4)
(jmp /)
106
(eval ())
(jcall sqrt)
(push a1)
(mov '2 a4)
(jmp *)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
103
(eval ())
(adjstk '1)
(jmp log)
101
(push (@ 109))
(push 'acosh)
(push (& 2))
(mov '2 a4)
(jmp list)
109
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'acosh a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry atanh subr1)
(entry atanh subr1)
(push a1)
(jcall numberp)
(bfnil a1 101)
(push (@ 103))
(push 'atanh)
(push (& 2))
(mov '2 a4)
(jmp list)
103
(eval ())
(mov a1 a3)
(mov 'errnna a2)
(mov 'atanh a1)
(adjstk '1)
(jmp error)
101
(push (@ 106))
(push '1)
(push (& 2))
(mov '2 a4)
(jmp =)
106
(eval ())
(btnil a1 104)
(push (@ 107))
(push '0)
(mov '1 a4)
(jmp /)
107
(eval ())
(adjstk '1)
(return)
104
(push (@ 110))
(push '-1)
(push (& 2))
(mov '2 a4)
(jmp =)
110
(eval ())
(btnil a1 108)
(push (@ 111))
(push (@ 112))
(push '0)
(mov '1 a4)
(jmp /)
112
(eval ())
(push a1)
(mov '1 a4)
(jmp |-|)
111
(eval ())
(adjstk '1)
(return)
108
(push (@ 113))
(push (@ 114))
(push (@ 115))
(push (& 3))
(push '1)
(mov '2 a4)
(jmp |+|)
115
(eval ())
(push a1)
(push (@ 116))
(push '1)
(push (& 5))
(mov '2 a4)
(jmp |-|)
116
(eval ())
(push a1)
(mov '2 a4)
(jmp /)
114
(eval ())
(jcall log)
(push a1)
(push '2)
(mov '2 a4)
(jmp /)
113
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:r:|+| subr2)
(entry #:r:|+| subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall complexp)
(btnil a1 101)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(jmp #:r:c:|+|)
101
(push (@ 103))
(mov (& 1) a1)
(jcall float)
(push a1)
(mov (& 3) a1)
(jcall float)
(push a1)
(mov '2 a4)
(jmp plus)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:r:* subr2)
(entry #:r:* subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall complexp)
(btnil a1 101)
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '2)
(jmp #:r:c:*)
101
(push (@ 103))
(mov (& 1) a1)
(jcall float)
(push a1)
(mov (& 3) a1)
(jcall float)
(push a1)
(mov '2 a4)
(jmp times)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry #:r:<?> subr2)
(entry #:r:<?> subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall complexp)
(btnil a1 101)
(push (@ 103))
(mov (& 1) a2)
(mov (& 2) a1)
(jcall #:r:c:<?>)
(push a1)
(mov '1 a4)
(jmp |-|)
103
(eval ())
(adjstk '2)
(return)
101
(mov (& 0) a1)
(jcall float)
(push a1)
(mov (& 2) a1)
(jcall float)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp <?>)
))
(setq #:system:read-case-flag #:backup:majuscules)
(loader '((end)))
