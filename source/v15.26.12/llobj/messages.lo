(loader '((title |messages.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'messages)))
(defvar #:sys-package:colon 'messages)
(add-feature 'messages)
(defvar #:messages:list-of-languages ())
(defvar #:messages:current-language ())
(defvar #:messages:default-language 'english)
(defvar #:messages:list-of-notremovable-language '(french english))
(defvar #:messages:working-language ())
(loader'((fentry record-language subr1)
(entry record-language subr1)
(push a1)
(bfsymb a1 101)
(mov (cvalq #:messages:list-of-languages) a2)
(jcall memq)
(bfnil a1 103)
(mov (cvalq #:messages:list-of-languages) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:messages:list-of-languages))
(mov (& 0) a1)
(adjstk '1)
(return)
103
(mov nil a1)
(adjstk '1)
(return)
101
(mov a1 a3)
(mov 'error-wrong-language a2)
(mov 'record-language a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry remove-language subr1)
(entry remove-language subr1)
(push a1)
(bfsymb a1 101)
(mov (cvalq #:messages:list-of-languages) a2)
(jcall memq)
(bfnil a1 103)
(mov (& 0) a3)
(mov 'error-not-recorded-language a2)
(mov 'remove-language a1)
(adjstk '1)
(jmp error)
103
(mov (& 0) (cvalq #:messages:working-language))
(bra 105)
(fentry #:remove-language:g103 subr1)
(entry #:remove-language:g103 subr1)
(push a1)
(mov (cvalq #:messages:working-language) a2)
(jcall getprop)
(btnil a1 106)
(mov (cvalq #:messages:working-language) a2)
(mov (& 0) a1)
(adjstk '1)
(jmp remprop)
106
(mov nil a1)
(adjstk '1)
(return)
105
(mov '#:remove-language:g103 a1)
(jcall mapoblist)
(mov (cvalq #:messages:list-of-notremovable-language) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 109)
(mov (cvalq #:messages:list-of-languages) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (cvalq #:messages:list-of-languages))
109
(mov (& 0) a1)
(adjstk '1)
(return)
101
(mov a1 a3)
(mov 'error-wrong-language a2)
(mov 'remove-language a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry message-languages subr0)
(entry message-languages subr0)
(mov (cvalq #:messages:list-of-languages) a1)
(jmp copy)
))
(loader'((fentry get-all-messages subr1)
(entry get-all-messages subr1)
(push a1)
(bfsymb a1 101)
(mov (cvalq #:messages:list-of-languages) a2)
(jcall memq)
(bfnil a1 103)
(mov (& 0) a3)
(mov 'error-not-recorded-language a2)
(mov 'get-all-messages a1)
(adjstk '1)
(jmp error)
103
(mov (& 0) (cvalq #:messages:working-language))
(bra 105)
(fentry #:get-all-messages:g104 subr1)
(entry #:get-all-messages:g104 subr1)
(push a1)
(mov (cvalq #:messages:working-language) a2)
(jcall getprop)
(btnil a1 106)
(push (@ 108))
(push (& 1))
(mov '1 a4)
(jmp list)
108
(eval ())
(adjstk '1)
(return)
106
(mov nil a1)
(adjstk '1)
(return)
105
(mov '#:get-all-messages:g104 a1)
(adjstk '1)
(jmp mapcoblist)
101
(mov a1 a3)
(mov 'error-wrong-language a2)
(mov 'get-all-messages a1)
(adjstk '1)
(jmp error)
))
(defvar #:system:fatal-errors (when (boundp '#:system:fatal-errors) #:system:fatal-errors))
(loader'((fentry current-language nsubr)
(entry current-language nsubr)
(push a4)
(mov (& 0) a1)
(cabne a1 '0 102)
(mov (cvalq #:messages:current-language) a1)
(bra 101)
102
(cabne a1 '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push a4)
(bfsymb a4 104)
(mov (cvalq #:messages:list-of-languages) a2)
(mov a4 a1)
(jcall memq)
(btnil a1 106)
(mov (& 0) (cvalq #:messages:current-language))
(mov 'french a2)
(mov (& 0) a1)
(jcall eq)
(btnil a1 108)
(mov nil a4)
(bra 109)
108
(mov 't a4)
109
(mov a4 (cvalq #:system:foreign-language))
(push (cvalq #:system:fatal-errors))
110
(bfcons (& 0) 111)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:messages:current-language) a2)
(mov (& 0) a1)
(jcall getprop)
(mov a1 a4)
(bfnil a4 112)
(mov (& 0) a1)
(jcall string)
(mov a1 a4)
112
(mov (& 0) a3)
(mov a4 (cval a3))
(adjstk '1)
(bra 110)
111
(adjstk '1)
(mov (& 0) a1)
(bra 105)
106
(mov (& 0) a3)
(mov 'error-not-recorded-language a2)
(mov 'current-language a1)
(jcall error)
(bra 105)
104
(mov a4 a3)
(mov 'error-wrong-language a2)
(mov 'current-language a1)
(jcall error)
105
(adjstk '1)
(bra 101)
103
(mov '0 a3)
(mov 'errwna a2)
(mov 'current-language a1)
(jcall error)
101
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry default-language nsubr)
(entry default-language nsubr)
(push a4)
(mov (& 0) a1)
(cabne a1 '0 102)
(mov (cvalq #:messages:default-language) a1)
(bra 101)
102
(cabne a1 '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(push a4)
(bfsymb a4 104)
(mov (cvalq #:messages:list-of-languages) a2)
(mov a4 a1)
(jcall memq)
(btnil a1 106)
(mov (& 0) (cvalq #:messages:default-language))
(mov (& 0) a1)
(bra 105)
106
(mov (& 0) a3)
(mov 'error-not-recorded-language a2)
(mov 'default-language a1)
(jcall error)
(bra 105)
104
(mov a4 a3)
(mov 'error-wrong-language a2)
(mov 'default-language a1)
(jcall error)
105
(adjstk '1)
(bra 101)
103
(mov '0 a3)
(mov 'errwna a2)
(mov 'default-language a1)
(jcall error)
101
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry get-message subr1)
(entry get-message subr1)
(push a1)
(bfsymb a1 101)
(mov (cvalq #:messages:current-language) a2)
(jcall getprop)
(bfnil a1 103)
(mov (cvalq #:messages:default-language) a2)
(mov (& 0) a1)
(jcall getprop)
(bfnil a1 103)
(mov (& 0) a1)
(adjstk '1)
(jmp string)
103
(adjstk '1)
(return)
101
(mov a1 a3)
(mov 'error-wrong-message a2)
(mov 'get-message a1)
(adjstk '1)
(jmp error)
))
(loader'((fentry get-message-p subr1)
(entry get-message-p subr1)
(push a1)
(jcall symbolp)
(btnil a1 101)
(mov (cvalq #:messages:current-language) a2)
(mov (& 0) a1)
(jcall getprop)
(bfnil a1 101)
(mov (cvalq #:messages:default-language) a2)
(mov (& 0) a1)
(adjstk '1)
(jmp getprop)
101
(adjstk '1)
(return)
))
(loader'((fentry put-message subr3)
(entry put-message subr3)
(push (@ 101))
(push a1)
(push a2)
(push a3)
(push 'put-message)
(mov '4 a4)
(jmp #:messages:put-message)
101
(eval ())
(return)
))
(loader'((fentry #:messages:put-message nsubr)
(entry #:messages:put-message nsubr)
(cnbeq a4 '4 101)
(mov '#:messages:put-message a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(bfvar (& 3) 102)
(bfsymb (& 2) 104)
(mov (cvalq #:messages:list-of-languages) a2)
(mov (& 2) a1)
(jcall memq)
(btnil a1 106)
(bfstrg (& 1) 108)
(mov (& 2) a3)
(mov (& 1) a2)
(mov (& 3) a1)
(jcall putprop)
(mov (& 3) a1)
(adjstk '4)
(return)
108
(mov (& 1) a3)
(mov 'error-not-string-message a2)
(mov (& 0) a1)
(adjstk '4)
(jmp error)
106
(mov (& 2) a3)
(mov 'error-not-recorded-language a2)
(mov (& 0) a1)
(adjstk '4)
(jmp error)
104
(mov (& 2) a3)
(mov 'error-wrong-language a2)
(mov (& 0) a1)
(adjstk '4)
(jmp error)
102
(mov (& 3) a3)
(mov 'error-wrong-message a2)
(mov (& 0) a1)
(adjstk '4)
(jmp error)
))
(loader'((fentry remove-message subr2)
(entry remove-message subr2)
(push a2)
(push a1)
(bfvar a1 101)
(bfsymb a2 103)
(push a2)
(mov (cvalq #:messages:list-of-languages) a2)
(pop a1)
(jcall memq)
(btnil a1 105)
(mov (& 1) a2)
(mov (& 0) a1)
(jcall remprop)
(mov (& 0) a1)
(adjstk '2)
(return)
105
(mov (& 1) a3)
(mov 'error-wrong-language a2)
(mov 'remove-message a1)
(adjstk '2)
(jmp error)
103
(mov a2 a3)
(mov 'error-not-recorded-language a2)
(mov 'remove-message a1)
(adjstk '2)
(jmp error)
101
(mov a1 a3)
(mov 'error-wrong-message a2)
(mov 'remove-message a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry defmessage dmsubr)
(entry defmessage dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push (@ 101))
(push a4)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(btnil (& 0) 104)
(bfcons (& 0) 104)
(mov (& 0) a1)
(jcall length)
(cabne a1 '2 104)
(push (@ 106))
(push '#:messages:put-message)
(push (@ 107))
(push 'quote)
(push (& 8))
(mov '2 a4)
(jmp list)
107
(eval ())
(push a1)
(push (@ 108))
(push 'quote)
(mov (& 5) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
108
(eval ())
(push a1)
(push (@ 109))
(push 'quote)
(mov (& 6) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
109
(eval ())
(push a1)
(push '('defmessage))
(mov '5 a4)
(jmp mcons)
106
(eval ())
(bra 105)
104
(mov (& 0) a3)
(mov 'errsxt a2)
(mov 'defmessage a1)
(jcall error)
105
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(push (@ 110))
(push 'quote)
(push (& 4))
(mov '2 a4)
(jmp list)
110
(eval ())
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp append)
101
(eval ())
(mov a1 a2)
(mov 'progn a1)
(adjstk '1)
(jmp cons)
))
(loader'((fentry #:sharp:m subr0)
(entry #:sharp:m subr0)
(jcall read)
(bfvar a1 101)
(push (@ 103))
(push 'get-message)
(push (@ 104))
(push 'quote)
(push a1)
(mov '2 a4)
(jmp list)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(jmp ncons)
101
(mov a1 a3)
(mov 'error-wrong-message a2)
(mov '|#M| a1)
(jmp error)
))
(synonym (symbol 'sharp "M") '#:sharp:m)
(record-language 'french)
(record-language 'english)
(if #:system:foreign-language (current-language 'english) (current-language 'french))
(#:messages:put-message 'error-wrong-language 'french '"l'argument n'est pas un nom de langue" 'defmessage)
(#:messages:put-message 'error-wrong-language 'english '"not a language name" 'defmessage)
'error-wrong-language
(#:messages:put-message 'error-not-recorded-language 'french '"l'argument n'est pas une langue enregistre'e" 'defmessage)
(#:messages:put-message 'error-not-recorded-language 'english '"not a recorded language" 'defmessage)
'error-not-recorded-language
(#:messages:put-message 'error-wrong-message 'french '"l'argument n'est pas un nom de message" 'defmessage)
(#:messages:put-message 'error-wrong-message 'english '"not a message name" 'defmessage)
'error-wrong-message
(#:messages:put-message 'error-not-string-message 'french '"l'argument n'est pas une chai^ne de message" 'defmessage)
(#:messages:put-message 'error-not-string-message 'english '"not a message string" 'defmessage)
'error-not-string-message
(loader '((end)))
