(loader '((title |cp.lo|)))
(defvar #:sys-package:colon 'complice)
(add-feature 'compiler)
(add-feature 'complice)
(loader'((fentry dont-compile fsubr)
(entry dont-compile fsubr)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:dont-compile-one-fonction)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:dont-compile-one-fonction subr1)
(push a1)
(mov 'dont-compile a3)
(mov a1 a2)
(jcall putprop)
(push (@ 101))
(push 'larg)
(push (@ 102))
(push 'list)
(push ''eval)
(push (@ 103))
(push 'list)
(push ''quote)
(push (@ 104))
(push 'cons)
(push (@ 105))
(push 'quote)
(push (& 12))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(push '(larg))
(mov '3 a4)
(jmp mcons)
104
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
103
(eval ())
(push a1)
(mov '3 a4)
(jmp list)
102
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
101
(eval ())
(mov a1 a2)
(mov (& 0) a1)
(adjstk '1)
(jmp make-macro-open)
))
(loader'((fentry compile fsubr)
(entry compile fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(push (@ 101))
(push a1)
(mov (cdr a4) (& 2))
(push (car a4))
(mov (& 3) a3)
(mov (cdr a3) (& 3))
(push (car a3))
(mov (& 4) a3)
(mov (cdr a3) (& 4))
(push (car a3))
(mov '4 a4)
(jmp compiler)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry compiler nsubr)
(entry compiler nsubr)
(cnbge a4 '1 101)
(mov 'compiler a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov (cdr a1) (& 0))
(push (car a1))
102
(bfcons (& 0) 103)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:dont-compile-one-fonction)
(bra 102)
103
(adjstk '1)
(btcons (& 1) 105)
(mov (& 1) a1)
(jcall ncons)
(mov a1 (& 1))
105
(mov (& 0) a2)
(mov (cdr a2) (& 0))
(mov (& 0) a3)
(mov (cdr a3) (& 0))
(mov (car a3) a3)
(mov (car a2) a2)
(mov (& 1) a1)
(call #:complice:compiler-aux)
(btnil (cvalq #:complice:error-occured) 106)
(push (@ 108))
(push '((abort)))
(mov '1 a4)
(jmp loader)
108
(eval ())
(mov 'abort a1)
(adjstk '2)
(return)
106
(push (@ 109))
(push '((end)))
(mov '1 a4)
(jmp loader)
109
(eval ())
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:compiler-aux subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(mov a1 (cvalq #:complice:outchan))
(mov (& 0) a1)
(jcall #:complice:pass-one)
(push a1)
(push (cdr a1))
102
(bfcons (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a3)
(mov '4 a2)
(mov 'compiler a1)
(jcall #:complice:warningf)
(adjstk '1)
(bra 102)
103
(adjstk '1)
(bfnil (cvalq #:complice:error-occured) 104)
(mov (& 0) a4)
(push (car a4))
(push (& 0))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall typefn)
(push a1)
(mov (& 1) a1)
(jcall valfn)
(mov a1 a2)
(pop a1)
(jcall cons)
(mov '#:complice:save a3)
(mov a1 a2)
(mov (& 0) a1)
(jcall putprop)
(mov (& 5) a3)
(mov nil a2)
(mov (& 0) a1)
(jcall #:complice:pass-two)
(mov a1 (& 0))
(bfnil (cvalq #:complice:error-occured) 109)
(push (@ 110))
(push a1)
(push (& 8))
(mov '2 a4)
(jmp loader)
110
(eval ())
109
(adjstk '1)
(bra 106)
107
(adjstk '1)
(push (& 0))
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(btnil (cvalq #:complice:error-occured) 114)
(mov '#:complice:save a2)
(mov (& 0) a1)
(jcall get)
(btnil a1 114)
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (& 0) a1)
(jcall setfn)
114
(push '(#:complice:save #:complice:bind #:complice:ftype))
117
(bfcons (& 0) 118)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 117)
118
(adjstk '2)
(bra 111)
112
(mov nil a1)
(adjstk '6)
(return)
104
(mov nil a1)
(adjstk '4)
(return)
))
(loader'((fentry compile-all-in-core nsubr)
(entry compile-all-in-core nsubr)
(jcall #:llcp:nlist)
(push a1)
(mov (cdr a1) (& 0))
(push (car a1))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 2) a3)
(push (car a3))
(push (@ 101))
(mov '0 a4)
(jmp outchan)
101
(eval ())
(push nil)
(push (cvalq #:complice:outchan))
(mov a1 (cvalq #:complice:outchan))
(push (cvalq old))
(mov (& 2) (cvalq old))
(push (cvalq #:complice:warning-flag))
(mov (& 4) (cvalq #:complice:warning-flag))
(push (cvalq f2))
(mov (& 6) (cvalq f2))
(push (cvalq f1))
(mov (& 8) (cvalq f1))
(push '5)
(push '(#:complice:outchan old #:complice:warning-flag f2 f1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bra 102)
(fentry #:compile-all-in-core:g102 subr1)
(entry #:compile-all-in-core:g102 subr1)
(push a1)
(mov 'dont-compile a2)
(jcall getprop)
(bfnil a1 103)
(mov 'resetfn a2)
(mov (& 0) a1)
(jcall get)
(mov a1 (cvalq old))
(btnil a1 106)
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (& 0) a1)
(jcall setfn)
106
(mov (& 0) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'expr 109)
(cabeq a4 'fexpr 109)
(cabeq a4 'macro 109)
(cabne a4 'dmacro 107)
109
(push (@ 110))
(push (& 1))
(push 't)
(push (cvalq f1))
(push (cvalq f2))
(mov '4 a4)
(jmp compiler)
110
(eval ())
(adjstk '1)
(return)
107
(mov nil a1)
(adjstk '1)
(return)
103
(mov nil a1)
(adjstk '1)
(return)
102
(mov '#:compile-all-in-core:g102 a1)
(jcall mapoblist)
(mov (& 1) dlink)
(mov (& 6) (cvalq f1))
(mov (& 7) (cvalq f2))
(mov (& 8) (cvalq #:complice:warning-flag))
(mov (& 9) (cvalq old))
(mov (& 10) (cvalq #:complice:outchan))
(adjstk '16)
(return)
))
(loader'((fentry compilefiles nsubr)
(entry compilefiles nsubr)
(cnbge a4 '1 101)
(mov 'compilefiles a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(btcons (& 1) 103)
(mov (& 1) a1)
(jcall ncons)
(mov a1 (& 1))
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (car a4) a4)
(bra 105)
104
(mov (& 1) a4)
(mov (car a4) a4)
105
(mov a4 (& 0))
(mov nil (cvalq #:complice:list-of-loaded-file))
(push (@ 106))
(mov '0 a4)
(jmp outchan)
106
(eval ())
(mov a1 (cvalq #:complice:outchan))
(push nil)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 1) (cvalq #:system:print-with-abbrev-flag))
(push '1)
(push '(#:system:print-with-abbrev-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov nil a2)
(mov (& 9) a1)
(jcall #:complice:get-all-def-in-files)
(push a1)
(jcall #:complice:pass-one)
(push a1)
(push (cdr a1))
107
(bfcons (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a3)
(mov '4 a2)
(mov 'compilefiles a1)
(jcall #:complice:warningf)
(adjstk '1)
(bra 107)
108
(adjstk '1)
(bfnil (cvalq #:complice:error-occured) 110)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (& 1) a1)
(jcall #:complice:complement)
(push a1)
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a3)
(mov '9 a2)
(mov 'compilefiles a1)
(jcall #:complice:warningf)
(adjstk '1)
(bra 111)
112
(adjstk '1)
(mov (& 1) a3)
(mov (& 10) a2)
(mov (& 1) a1)
(jcall #:complice:generate-in-file)
110
(mov (& 0) a4)
(push (car a4))
113
(bfcons (& 0) 114)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push '(#:complice:bind #:complice:fvar #:complice:ftype))
115
(bfcons (& 0) 116)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 115)
116
(adjstk '2)
(bra 113)
114
(mov nil a1)
(adjstk '3)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(adjstk '10)
(return)
))
(loader'((fentry compilemodule nsubr)
(entry compilemodule nsubr)
(cnbge a4 '1 101)
(mov 'compilemodule a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(mov nil (cvalq #:complice:list-of-loaded-file))
(push (@ 102))
(mov '0 a4)
(jmp outchan)
102
(eval ())
(mov a1 (cvalq #:complice:outchan))
(push nil)
(push (cvalq #:system:print-with-abbrev-flag))
(mov (& 1) (cvalq #:system:print-with-abbrev-flag))
(push '1)
(push '(#:system:print-with-abbrev-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 9) a1)
(jcall makemodule)
(bfnil (cvalq #:complice:error-occured) 103)
(mov (& 8) a4)
(btnil (car a4) 105)
(push a1)
107
(bfcons (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfnil (cvalq #:complice:error-occured) 110)
(mov (& 0) a1)
(jcall makemodule-pass-two)
110
(adjstk '1)
(bra 107)
108
(mov nil a1)
(adjstk '1)
(bra 104)
105
(mov (& 9) a1)
(jcall makemodule-pass-two)
(bra 104)
103
(mov nil a1)
104
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-with-abbrev-flag))
(adjstk '10)
(return)
))
(loader '((end)))
