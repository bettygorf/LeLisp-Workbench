(loader '((title |cp1.lo|)))
(defvar #:sys-package:colon 'complice)
(if (not (boundp '#:complice:parano-flag)) (progn (defvar #:complice:parano-flag t)))
(defvar #:complice:x ())
(defvar #:complice:f '#:complice:pass-one)
(putprop '#:complice:pass-one '(#:messages:current-language) '#:complice:fvar)
(loader'((fentry #:complice:pass-one subr1)
(entry #:complice:pass-one subr1)
(push a1)
(mov nil (cvalq #:complice:error-occured))
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:sys-package:itsoft))
(push (cvalq #:sys-package:itsoft))
(mov (& 1) (cvalq #:sys-package:itsoft))
(push (cvalq #:complice:extfnt))
(mov (& 3) (cvalq #:complice:extfnt))
(push (cvalq #:complice:fvar-al))
(mov (& 5) (cvalq #:complice:fvar-al))
(push (cvalq #:complice:lvar-al))
(mov (& 7) (cvalq #:complice:lvar-al))
(push (cvalq #:complice:allfnt))
(mov (& 9) (cvalq #:complice:allfnt))
(push '5)
(push '(#:sys-package:itsoft #:complice:extfnt #:complice:fvar-al #:complice:lvar-al #:complice:allfnt))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:sys-package:itsoft) a2)
(mov 'complice a1)
(jcall cons)
(mov a1 (cvalq #:sys-package:itsoft))
(push (@ 101))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (& 20))
102
(bfcons (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 105)
(mov (& 0) a1)
(call #:complice:parse)
105
(adjstk '1)
(bra 102)
103
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(push (& 16))
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 109)
(mov '#:complice:fvar a2)
(mov (& 0) a1)
(jcall get)
(push a1)
110
(bfcons (& 0) 111)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a3)
(mov '0 a2)
(mov (& 2) a1)
(jcall #:complice:warningf)
(adjstk '1)
(bra 110)
111
(adjstk '1)
109
(adjstk '1)
(bra 106)
107
(adjstk '1)
(mov (cvalq #:complice:extfnt) a2)
(mov (cvalq #:complice:allfnt) a1)
(jcall cons)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:complice:allfnt))
(mov (& 7) (cvalq #:complice:lvar-al))
(mov (& 8) (cvalq #:complice:fvar-al))
(mov (& 9) (cvalq #:complice:extfnt))
(mov (& 10) (cvalq #:sys-package:itsoft))
(adjstk '17)
(return)
))
(loader'((entry #:complice:parse subr1)
(push (cvalq #:complice:f))
(mov a1 (cvalq #:complice:f))
(push '1)
(push '(#:complice:f))
(push (@ #:complice:parse))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov 'resetfn a2)
(jcall get)
(mov a1 (cvalq #:complice:x))
(btnil a1 101)
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (cvalq #:complice:f) a1)
(jcall setfn)
(mov 'resetfn a2)
(mov (cvalq #:complice:f) a1)
(jcall remprop)
(mov (cvalq #:complice:f) a1)
(call #:complice:parse)
(bra 102)
101
(mov (cvalq #:complice:f) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'macro 103)
(cabeq a4 'dmacro 103)
(cabeq a4 'expr 103)
(cabeq a4 'fexpr 103)
(push (@ 105))
(push (cvalq #:complice:f))
(mov (cvalq #:complice:f) a1)
(jcall typefn)
(push a1)
(mov '2 a4)
(jmp list)
105
(eval ())
(mov a1 a2)
(mov '3 a1)
(jcall #:complice:warning)
(bra 102)
103
(mov (cvalq #:complice:lvar-al) a2)
(mov (cvalq #:complice:f) a1)
(jcall cassq)
(btnil a1 106)
(mov (cvalq #:complice:fvar-al) a3)
(mov (cvalq #:complice:lvar-al) a2)
(mov (cvalq #:complice:f) a1)
(call #:complice:get-fvar)
(call #:complice:parse-free-var)
(mov (cvalq #:complice:f) a1)
(call #:complice:env-open)
(bra 102)
106
(mov (cvalq #:complice:allfnt) a2)
(mov (cvalq #:complice:f) a1)
(jcall memq)
(bfnil a1 110)
(mov '#:complice:switched a2)
(mov (cvalq #:complice:f) a1)
(jcall get)
(btnil a1 108)
110
(mov '#:complice:fvar a2)
(mov (cvalq #:complice:f) a1)
(jcall get)
(call #:complice:parse-free-var)
(mov '#:complice:switched a2)
(mov (cvalq #:complice:f) a1)
(jcall get)
(btnil a1 111)
(mov (cvalq #:complice:extfnt) a2)
(mov (cvalq #:complice:f) a1)
(jcall memq)
(bfnil a1 111)
(mov (cvalq #:complice:extfnt) a2)
(mov (cvalq #:complice:f) a1)
(jcall cons)
(mov a1 (cvalq #:complice:extfnt))
(bra 102)
111
(mov nil a1)
(bra 102)
108
(mov '#:complice:fvar a2)
(mov (cvalq #:complice:f) a1)
(jcall remprop)
(mov (cvalq #:complice:f) a1)
(call #:complice:setftype)
(mov (cvalq #:complice:allfnt) a2)
(mov (cvalq #:complice:f) a1)
(jcall cons)
(mov a1 (cvalq #:complice:allfnt))
(mov (cvalq #:complice:f) a1)
(jcall ncons)
(mov (cvalq #:complice:lvar-al) a2)
(jcall cons)
(mov a1 (cvalq #:complice:lvar-al))
(mov (cvalq #:complice:fvar-al) a2)
(mov nil a1)
(jcall cons)
(mov a1 (cvalq #:complice:fvar-al))
(mov (cvalq #:complice:f) a1)
(jcall valfn)
(call #:complice:parse-lambda)
(mov (cvalq #:complice:fvar-al) a4)
(btnil (car a4) 114)
(mov '#:complice:fvar a3)
(mov (car a4) a2)
(mov (cvalq #:complice:f) a1)
(jcall putprop)
114
(mov (cvalq #:complice:fvar-al) a4)
(mov (cdr a4) (cvalq #:complice:fvar-al))
(mov '#:complice:rec-env a2)
(mov (cvalq #:complice:f) a1)
(jcall remprop)
(push (cvalq #:complice:f))
(mov (cvalq #:complice:lvar-al) a1)
(mov (cdr a1) (cvalq #:complice:lvar-al))
(mov (car a1) a1)
(mov (cdr a1) a1)
(jcall nreverse)
(mov a1 a2)
(pop a1)
(call #:complice:setbind)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:complice:f))
(adjstk '7)
(return)
))
(loader'((entry #:complice:parse-lambda subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a4)
(btnil a1 101)
(cabeq a1 '&nobind 101)
(jcall #:complice:flatt)
(call #:complice:make-al)
(mov (cvalq #:complice:lvar-al) a4)
(push nil)
(push (car a4))
(push a1)
(jcall last)
(mov a1 (& 2))
(mov (& 1) a4)
(mov (cdr a4) (cdr a1))
(mov (& 0) (cdr a4))
(mov (& 3) a1)
(call #:complice:parse-progn)
103
(mov (& 1) a4)
(cabeq (cdr a4) (& 0) 104)
(mov (cdr a4) (& 1))
(bra 103)
104
(push a4)
(mov (& 3) a2)
(mov (cdr a2) a2)
(mov (& 1) a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov (& 2) a4)
(mov nil (cdr a4))
(mov a4 a1)
(adjstk '4)
(return)
101
(mov (cvalq #:complice:lvar-al) a3)
(push (car a3))
(mov (car a3) a2)
(mov (cdr a2) a2)
(mov nil a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov (& 0) a1)
(adjstk '1)
(bra #:complice:parse-progn)
))
(loader'((entry #:complice:parse-progn subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:parse-exp)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:parse-prog3 subr2)
(push a2)
(push a1)
(bfnil a2 101)
(mov a1 a2)
(mov '5 a1)
(adjstk '2)
(jmp #:complice:warning)
101
(mov (car a2) a1)
(call #:complice:parse-exp)
(mov (& 1) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:parse-prog2)
))
(loader'((entry #:complice:parse-prog2 subr2)
(push a2)
(push a1)
(bfnil a2 101)
(mov a1 a2)
(mov '5 a1)
(adjstk '2)
(jmp #:complice:warning)
101
(mov (car a2) a1)
(call #:complice:parse-exp)
(mov (& 1) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:parse-prog1)
))
(loader'((entry #:complice:parse-prog1 subr2)
(btnil a2 103)
(btnil (cdr a2) 101)
103
(mov a1 a2)
(mov '5 a1)
(jmp #:complice:warning)
101
(mov (car a2) a1)
(bra #:complice:parse-exp)
))
(loader'((entry #:complice:parse-exp subr1)
(push a1)
(jcall constantp)
(bfnil a1 101)
(mov (& 0) a1)
(jcall numberp)
(bfnil a1 101)
(bfsymb (& 0) 103)
(mov (& 0) a1)
(call #:complice:local?)
(bfnil a1 105)
(mov (& 0) a1)
(adjstk '1)
(bra #:complice:try-to-bind)
105
(mov nil a1)
(adjstk '1)
(return)
103
(mov (& 0) a4)
(bfcons (car a4) 107)
(mov (cdr a4) a2)
(mov (car a4) a1)
(adjstk '1)
(bra #:complice:parse-anonymous-exp)
107
(mov (cdr a4) a2)
(mov (car a4) a1)
(call #:complice:parse-std-function?)
(bfnil a1 109)
(mov (& 0) a1)
(jcall #:complice:macroexpand)
(mov a1 (cvalq #:complice:x))
(cabeq (& 0) a1 110)
(adjstk '1)
(bra #:complice:parse-exp)
110
(mov (& 0) a1)
(mov (car a1) a1)
(jcall typefn)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(adjstk '1)
(bra #:complice:parse-exp-subr)
109
(adjstk '1)
(return)
101
(adjstk '1)
(return)
))
(loader'((entry #:complice:parse-exp-subr subr3)
(push a3)
(push a2)
(push a1)
(push a2)
(mov 'resetfn a2)
(pop a1)
(jcall get)
(mov a1 (cvalq #:complice:x))
(btnil a1 101)
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (& 1) a1)
(jcall setfn)
(mov 'resetfn a2)
(mov (& 1) a1)
(jcall remprop)
(mov (& 1) a1)
(call #:complice:parse)
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
(mov (& 2) a3)
(mov (& 1) a2)
(adjstk '3)
(bra #:complice:parse-subr)
101
(mov (& 0) a4)
(cabeq a4 'expr 105)
(cabne a4 'fexpr 103)
105
(mov (& 1) a1)
(call #:complice:parse)
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
(mov (& 2) a3)
(mov (& 1) a2)
(adjstk '3)
(bra #:complice:parse-subr)
103
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
(btnil a1 107)
(mov (cvalq #:complice:extfnt) a2)
(mov (& 1) a1)
(jcall memq)
(bfnil a1 107)
(mov (cvalq #:complice:extfnt) a2)
(mov (& 1) a1)
(jcall cons)
(mov a1 (cvalq #:complice:extfnt))
107
(mov (& 0) a1)
(bfnil a1 108)
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
108
(mov (& 2) a3)
(mov (& 1) a2)
(adjstk '3)
(bra #:complice:parse-subr)
))
(loader'((entry #:complice:parse-subr subr3)
(push a3)
(push a2)
(push a1)
(push a2)
(mov '#:complice:fvar a2)
(pop a1)
(jcall get)
(btnil a1 102)
(bfsymb a1 103)
(call #:complice:paranoia2)
(bra 102)
103
(call #:complice:parse-free-var)
102
(mov (& 0) a1)
(cabne a1 'fsubr 106)
(adjstk '3)
(return)
106
(cabne a1 'subr0 107)
(btnil (& 2) 108)
(mov (& 1) a2)
(mov '5 a1)
(adjstk '3)
(jmp #:complice:warning)
108
(mov nil a1)
(adjstk '3)
(return)
107
(cabne a1 'subr1 110)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:complice:parse-prog1)
110
(cabne a1 'subr2 111)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:complice:parse-prog2)
111
(cabne a1 'subr3 112)
(mov (& 2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:complice:parse-prog3)
112
(cabne a1 'nsubr 113)
(mov (& 2) a1)
(adjstk '3)
(bra #:complice:parse-progn)
113
(push (@ 115))
(push (& 2))
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(mov a1 a2)
(mov '3 a1)
(jcall #:complice:warning)
(push (@ 116))
(push 'eval)
(push (@ 117))
(push 'quote)
(mov (& 6) a2)
(mov (& 5) a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
117
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
116
(eval ())
(adjstk '3)
(bra #:complice:parse-exp)
))
(loader'((entry #:complice:parse-anonymous-exp subr2)
(push a1)
(mov (car a1) a1)
(cabne a1 'lambda 102)
(mov a2 a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:parse-lambda)
102
(cabne a1 'flambda 103)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:parse-lambda)
103
(cabne a1 'mlambda 104)
(mov (& 0) a2)
(mov '2 a1)
(adjstk '1)
(jmp #:complice:error)
104
(mov (& 0) a2)
(mov '1 a1)
(adjstk '1)
(jmp #:complice:error)
))
(loader'((entry #:complice:parse-std-function? subr2)
(push a2)
(push a1)
(cabeq a1 'if 103)
(cabeq a1 'and 103)
(cabeq a1 'or 103)
(cabeq a1 'while 103)
(cabeq a1 'until 103)
(cabeq a1 'repeat 103)
(cabeq a1 'progn 103)
(cabeq a1 'prog1 103)
(cabeq a1 'protect 103)
(cabeq a1 'evexit 103)
(cabeq a1 'evtag 103)
(cabeq a1 'setq 103)
(cabeq a1 'defvar 103)
(cabeq a1 'return 103)
(cabeq a1 'schedule 103)
(cabeq a1 'with-interrupts 103)
(cabne a1 'without-interrupts 102)
103
(mov a2 a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(adjstk '2)
(return)
102
(cabeq a1 'funcall 105)
(cabne a1 'apply 104)
105
(mov (car a2) a1)
(call #:complice:paranoia1)
(mov (& 1) a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(adjstk '2)
(return)
104
(cabne a1 'lock 106)
(push (car a2))
(mov (cdr a2) a2)
(pop a1)
(call #:complice:parse-lock)
(mov (& 0) a1)
(adjstk '2)
(return)
106
(cabne a1 'tagbody 107)
(mov a2 a1)
(call #:complice:parse-tagbody)
(mov (& 0) a1)
(adjstk '2)
(return)
107
(cabeq a1 'quote 109)
(cabeq a1 'comment 109)
(cabne a1 'mlambda 108)
109
(adjstk '2)
(return)
108
(cabeq a1 'lambda 111)
(cabne a1 'flambda 110)
111
(call #:complice:paranoia2)
(mov (& 1) a2)
(mov (& 0) a1)
(call #:complice:parse-funarg)
(mov (& 0) a1)
(adjstk '2)
(return)
110
(cabne a1 'declare 112)
(push a2)
113
(bfcons (& 0) 114)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:declaration)
(bra 113)
114
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
112
(cabne a1 'selectq 115)
(mov (car a2) a1)
(call #:complice:parse-exp)
(mov (& 1) a4)
(push (cdr a4))
116
(bfcons (& 0) 117)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(mov (cdr a1) a1)
(call #:complice:parse-progn)
(adjstk '1)
(bra 116)
117
(adjstk '1)
(mov (& 0) a1)
(adjstk '2)
(return)
115
(cabne a1 'letv 118)
(mov a2 a1)
(call #:complice:parse-letv)
(mov (& 0) a1)
(adjstk '2)
(return)
118
(cabne a1 'deset 119)
(mov a2 a1)
(call #:complice:parse-deset)
(mov (& 0) a1)
(adjstk '2)
(return)
119
(cabeq a1 'tag 121)
(cabeq a1 'exit 121)
(cabeq a1 'unexit 121)
(cabeq a1 'block 121)
(cabne a1 'return-from 120)
121
(mov (cdr a2) a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(adjstk '2)
(return)
120
(cabeq a1 'unwind 123)
(cabne a1 'unexit 122)
123
(jcall cons)
(call #:complice:paranoia3)
(mov (& 0) a1)
(adjstk '2)
(return)
122
(cabeq a1 'eval 125)
(cabeq a1 'symeval 125)
(cabeq a1 'evlis 125)
(cabne a1 'set 124)
125
(jcall cons)
(call #:complice:paranoia3)
(mov (& 1) a1)
(call #:complice:parse-progn)
(mov (& 0) a1)
(adjstk '2)
(return)
124
(cabne a1 'precompile 126)
(mov (car a2) a1)
(call #:complice:parse-exp)
(mov (& 0) a1)
(adjstk '2)
(return)
126
(cabne a1 'flet 127)
(bfnil (cvalq #:complice:parano-flag) 128)
(mov '5 a1)
(jcall #:complice:error)
(bra 129)
128
(push (@ 130))
(push 'eval)
(push (@ 131))
(push 'quote)
(mov 'flet a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
131
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
130
(eval ())
(call #:complice:parse-exp)
129
(mov (& 0) a1)
(adjstk '2)
(return)
127
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:make-al subr1)
(push a1)
(push a1)
101
(bfcons (& 0) 102)
(push (& 0))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(pop a4)
(push a4)
(mov (car a4) a1)
(jcall ncons)
(pop a4)
(mov a1 (car a4))
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:local? subr1)
(mov (cvalq #:complice:lvar-al) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(jmp assq)
))
(loader'((entry #:complice:parse-free-var subr1)
(bfvar a1 101)
(bra #:complice:paranoia2)
101
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:try-to-bind)
(bra 103)
104
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:try-to-bind subr1)
(push a1)
(jcall #:complice:globalvarp)
(bfnil a1 101)
(mov (cvalq #:complice:fvar-al) a3)
(mov (cvalq #:complice:lvar-al) a2)
(mov (& 0) a1)
(adjstk '1)
(bra #:complice:try-to-bind-aux)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:try-to-bind-aux subr3)
(push a3)
(push a2)
(push a1)
(btnil a2 101)
(mov (car a2) a2)
(mov (cdr a2) a2)
(jcall assq)
(btnil a1 103)
(mov 'cval (cdr a1))
(adjstk '3)
(return)
103
(mov (& 1) a1)
(mov (car a1) a1)
(mov '#:complice:rec-env a2)
(mov (car a1) a1)
(jcall get)
(push a1)
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(call #:complice:rec-bind)
(adjstk '1)
(bra 105)
106
(adjstk '1)
(mov (& 2) a4)
(btvar (car a4) 108)
(mov (car a4) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 108)
(mov (& 2) a2)
(mov (car a2) a2)
(mov (& 0) a1)
(jcall cons)
(mov (& 2) a4)
(mov a1 (car a4))
108
(mov (& 1) a2)
(mov (& 2) a3)
(mov (cdr a3) a3)
(mov (cdr a2) a2)
(mov (& 0) a1)
(adjstk '3)
(bra #:complice:try-to-bind-aux)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:complice:get-fvar subr3)
(mov (car a2) a4)
(cabne (car a4) a1 101)
(mov (car a3) a1)
(return)
101
(mov (cdr a3) a3)
(mov (cdr a2) a2)
(bra #:complice:get-fvar)
))
(loader'((entry #:complice:env-open subr1)
(push a1)
(push a1)
(mov (cvalq #:complice:lvar-al) a2)
(call #:complice:env-open-aux)
(push a1)
(mov '#:complice:rec-env a2)
(mov (& 2) a1)
(jcall get)
(mov a1 a2)
(pop a1)
(jcall cons)
(mov '#:complice:rec-env a3)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp putprop)
))
(loader'((entry #:complice:env-open-aux subr2)
(push a2)
(push a1)
(mov (car a2) a4)
(cabne (car a4) a1 101)
(push a1)
(mov (car a2) a1)
(mov (cdr a1) a1)
(call #:complice:env-open-aux2)
(mov a1 a2)
(pop a1)
(jcall cons)
(adjstk '2)
(jmp ncons)
101
(mov (car a2) a1)
(push (car a1))
(mov (car a2) a1)
(mov (cdr a1) a1)
(call #:complice:env-open-aux2)
(mov a1 a2)
(pop a1)
(jcall cons)
(push a1)
(mov (& 2) a2)
(mov (cdr a2) a2)
(mov (& 1) a1)
(call #:complice:env-open-aux)
(mov a1 a2)
(pop a1)
(adjstk '2)
(jmp cons)
))
(loader'((entry #:complice:env-open-aux2 subr1)
(bfnil a1 101)
(return)
101
(mov (car a1) a4)
(bfvar (car a4) 103)
(push (car a1))
(mov (cdr a1) a1)
(call #:complice:env-open-aux2)
(mov a1 a2)
(pop a1)
(jmp cons)
103
(mov (cdr a1) a1)
(bra #:complice:env-open-aux2)
))
(loader'((entry #:complice:rec-bind subr2)
(push a2)
(push a1)
(bfnil a2 101)
(adjstk '2)
(return)
101
(mov (car a2) a3)
(mov (cdr a3) a3)
(mov 'cval a2)
(jcall #:complice:setcassq)
(bfnil a1 103)
(mov (& 1) a1)
(mov (car a1) a1)
(mov '#:complice:fvar a2)
(mov (car a1) a1)
(jcall get)
(push a1)
(mov a1 a2)
(mov (& 1) a1)
(jcall memq)
(bfnil a1 105)
(mov (& 2) a1)
(mov (car a1) a1)
(push (car a1))
(mov (& 1) a2)
(mov (& 2) a1)
(jcall cons)
(mov '#:complice:fvar a3)
(mov a1 a2)
(pop a1)
(jcall putprop)
105
(mov (& 2) a2)
(mov (cdr a2) a2)
(mov (& 1) a1)
(adjstk '3)
(bra #:complice:rec-bind)
103
(adjstk '2)
(return)
))
(loader'((entry #:complice:paranoia1 subr1)
(mov a1 a2)
(mov '7 a1)
(jcall #:complice:warning)
(bra #:complice:paranoia2)
))
(loader'((entry #:complice:paranoia2 subr0)
(btnil (cvalq #:complice:parano-flag) 101)
(push (cvalq #:complice:lvar-al))
(push (cvalq #:complice:fvar-al))
103
(bfcons (& 1) 104)
(bfcons (& 0) 104)
(push (& 1))
(mov (& 2) a4)
(mov (cdr a4) (& 2))
(pop a4)
(push (& 0))
(mov (& 1) a3)
(mov (cdr a3) (& 1))
(pop a3)
(mov (cdr a4) a2)
(mov (car a4) a4)
(mov (cdr a4) a1)
(mov (car a4) a4)
(mov 'parano (car a3))
(push a1)
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(bfvar (car a4) 108)
(mov 'cval (cdr a4))
108
(adjstk '1)
(bra 105)
106
(adjstk '1)
(bra 103)
104
(mov nil a1)
(adjstk '2)
(return)
101
(mov nil a1)
(return)
))
(loader'((entry #:complice:paranoia3 subr1)
(mov a1 a2)
(mov '8 a1)
(jcall #:complice:warning)
(bra #:complice:paranoia2)
))
(loader'((entry #:complice:setftype subr1)
(push a1)
(push a1)
(jcall typefn)
(cabne a1 'fexpr 102)
(mov 'fsubr a2)
(bra 101)
102
(cabne a1 'macro 103)
(mov 'msubr a2)
(bra 101)
103
(cabne a1 'dmacro 104)
(mov 'dmsubr a2)
(bra 101)
104
(mov (& 1) a1)
(jcall valfn)
(push (car a1))
(btvar (& 0) 108)
(mov (& 0) a1)
(jcall last)
(bfnil (cdr a1) 108)
(mov (& 0) a1)
(jcall length)
(cnblt a1 '4 106)
108
(mov 'nsubr a2)
(bra 107)
106
(push (@ 109))
(push 'subr)
(mov (& 2) a1)
(jcall length)
(push a1)
(mov '2 a4)
(jmp concat)
109
(eval ())
(mov a1 a2)
107
(adjstk '1)
101
(mov '#:complice:ftype a3)
(pop a1)
(adjstk '1)
(jmp putprop)
))
(loader'((entry #:complice:setbind subr2)
(push a1)
(mov a2 a1)
(call #:complice:setbind-aux)
(btnil a1 101)
(mov '#:complice:bind a3)
(mov a1 a2)
(mov (& 0) a1)
(adjstk '1)
(jmp putprop)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:setbind-aux subr1)
(push a1)
(btnil a1 101)
(mov (car a1) a1)
(call #:complice:make-bind)
(push a1)
(mov (& 1) a1)
(mov (cdr a1) a1)
(call #:complice:setbind-aux)
(btnil a1 103)
(mov a1 a2)
(mov (& 0) a1)
(adjstk '2)
(jmp cons)
103
(btnil (& 0) 105)
(mov (& 0) a1)
(adjstk '2)
(jmp ncons)
105
(mov nil a1)
(adjstk '2)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:make-bind subr1)
(push a1)
(btnil a1 101)
(mov (car a1) a4)
(cabeq (cdr a4) 'cval 103)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:make-bind)
103
(mov (car a1) a1)
(push (car a1))
(mov (& 1) a1)
(mov (cdr a1) a1)
(call #:complice:make-bind)
(mov a1 a2)
(pop a1)
(adjstk '1)
(jmp cons)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:parse-funarg subr2)
(push a2)
(push a1)
(push (cvalq #:complice:f))
(jcall gensym)
(mov a1 a2)
(pop a1)
(jcall symbol)
(push a1)
(cabne (& 1) 'lambda 101)
(mov 'expr a2)
(bra 102)
101
(mov 'fexpr a2)
102
(mov (& 2) a3)
(jcall setfn)
(mov (& 0) a1)
(call #:complice:parse)
(mov (cvalq #:complice:lvar-al) a4)
(push (car a4))
(push (@ 103))
(mov '#:complice:bind a2)
(mov (& 2) a1)
(jcall get)
(mov 'cval a2)
(jcall cons)
(jcall ncons)
(push a1)
(mov '#:complice:ftype a2)
(mov (& 3) a1)
(jcall get)
(mov 'cval a2)
(jcall cons)
(jcall ncons)
(push a1)
(mov (cvalq #:complice:lvar-al) a3)
(mov (car a3) a3)
(push (cdr a3))
(mov '3 a4)
(jmp mcons)
103
(eval ())
(pop a4)
(mov a1 (cdr a4))
(mov (cvalq #:complice:allfnt) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (cvalq #:complice:allfnt))
(mov (& 0) a1)
(adjstk '3)
(jmp remob)
))
(loader'((entry #:complice:parse-lock subr2)
(push a2)
(push a1)
(bfcons a1 101)
(mov (car a1) a4)
(cabeq a4 'lambda 103)
(cabne a4 'quote 101)
103
(cabne (car a1) 'quote 105)
(mov (cdr a1) a4)
(mov (car a4) (& 0))
105
(btvar (& 0) 106)
(bfcons (& 0) 108)
(mov (& 0) a4)
(cabeq (car a4) 'lambda 106)
108
(mov (& 0) a2)
(mov '1 a1)
(adjstk '2)
(jmp #:complice:error)
106
(push (@ 109))
(push (& 1))
(push nil)
(mov 'progn a1)
(jcall cons)
(push a1)
(mov '3 a4)
(jmp list)
109
(eval ())
(adjstk '2)
(bra #:complice:parse-exp)
101
(call #:complice:paranoia1)
(mov (& 0) a1)
(call #:complice:parse-exp)
(mov (& 1) a1)
(adjstk '2)
(bra #:complice:parse-progn)
))
(loader'((entry #:complice:parse-tagbody subr1)
(push a1)
(btcons a1 101)
(adjstk '1)
(return)
101
(btcons (car a1) 103)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:parse-tagbody)
103
(mov (car a1) a1)
(call #:complice:parse-exp)
(mov (& 0) a1)
(mov (cdr a1) a1)
(adjstk '1)
(bra #:complice:parse-tagbody)
))
(loader'((entry #:complice:parse-letv subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(push a3)
(bfcons a1 103)
(cabeq (car a1) 'quote 101)
103
(mov a1 a2)
(mov '7 a1)
(adjstk '2)
(jmp #:complice:error)
101
(push (@ 104))
(push (@ 105))
(push 'lambda)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall ncons)
(push a1)
(push (& 4))
(mov '3 a4)
(jmp mcons)
105
(eval ())
(push a1)
(push (& 3))
(mov '2 a4)
(jmp list)
104
(eval ())
(adjstk '2)
(bra #:complice:parse-exp)
))
(loader'((entry #:complice:parse-deset subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(mov (car a4) a4)
(push a4)
(bfcons a1 101)
(cabne (car a1) 'quote 101)
(mov a4 a1)
(call #:complice:parse-exp)
(mov (cvalq #:complice:lvar-al) a4)
(push (car a4))
(mov (car a4) a2)
(mov (cdr a2) a2)
(mov nil a1)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(mov (& 1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(jcall #:complice:flatt)
(adjstk '2)
(bra #:complice:parse-progn)
101
(push (@ 103))
(push 'deset)
(push a1)
(push a4)
(mov '3 a4)
(jmp mcons)
103
(eval ())
(call #:complice:paranoia3)
(mov (& 1) a1)
(call #:complice:parse-exp)
(mov (& 0) a1)
(adjstk '2)
(bra #:complice:parse-exp)
))
(loader'((entry #:complice:declaration subr1)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(cabne a1 'special 102)
(push a4)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:complice:lvar-al) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(jcall assq)
(btnil a1 105)
(mov 'cval (cdr a1))
(bra 106)
105
(mov (& 0) a2)
(mov '1 a1)
(jcall #:complice:warning)
106
(adjstk '1)
(bra 103)
104
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
102
(cabne a1 'cpcall 107)
(push (cdr a4))
108
(bfcons (& 0) 109)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(call #:complice:parse)
(adjstk '1)
(bra 108)
109
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
107
(adjstk '1)
(return)
))
(defvar #:sys-package:colon 'complice)
(defvar #:rehash:verbose ())
(loader'((entry #:complice:loadmodule subr2)
(push a2)
(push a1)
(btnil (cvalq #:rehash:verbose) 102)
(push (@ 103))
(push '"loading module: ")
(push a1)
(push '". macro not defined inside EVAL-WHEN")
(mov '3 a4)
(jmp catenate)
103
(eval ())
(mov (& 1) a3)
(mov a1 a2)
(mov 'complice a1)
(jcall printerror)
102
(push (@ 104))
(push (& 1))
(push nil)
(mov '2 a4)
(jmp loadmodule)
104
(eval ())
(adjstk '2)
(return)
))
(putprop 'makemodule '(#:messages:current-language) '#:complice:fvar)
(loader'((fentry makemodule subr1)
(entry makemodule subr1)
(push a1)
(jcall ncons)
(push (cvalq #:complice:done))
(mov a1 (cvalq #:complice:done))
(push '1)
(push '(#:complice:done))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 7) a1)
(call #:complice:makemodule)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:complice:done))
(adjstk '8)
(return)
))
(loader'((entry #:complice:makemodule subr1)
(push a1)
(jcall readdefmodule)
(mov nil a3)
(mov a1 a2)
(pop a1)
(call #:complice:makemodule-aux)
(push a1)
(bfnil a1 101)
(mov (cvalq #:complice:done) a1)
(adjstk '1)
(return)
101
(mov a1 a3)
(mov '10 a2)
(mov 'makemodule a1)
(jcall #:complice:warningf)
(mov (& 0) a1)
(call #:complice:make-list-of-module)
(mov nil (cvalq #:complice:list-of-loaded-file))
(push (& 0))
103
(bfcons (& 0) 104)
(mov (& 0) a1)
(mov (cdr a1) (& 0))
(mov (car a1) a1)
(call #:complice:makemodule)
(bra 103)
104
(adjstk '1)
(mov (cvalq #:complice:done) a1)
(adjstk '1)
(return)
))
(loader'((entry #:complice:makemodule-aux subr3)
(push a3)
(push a2)
(push a1)
(mov a3 a2)
(jcall memq)
(btnil a1 101)
(mov (& 2) a1)
(mov (cdr a1) a2)
(mov (car a1) a1)
(adjstk '3)
(jmp cons)
101
(mov (& 2) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 2))
(mov 'import a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push (& 2))
(push nil)
(push a1)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov a1 (& 3))
(mov 'cpexport a2)
(jcall getdefmodule)
(btnil a1 105)
(mov (& 4) a4)
(bra 106)
105
(mov (& 4) a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:complice:makemodule-aux)
(mov a1 a4)
106
(mov a4 (& 4))
(adjstk '1)
(bra 103)
104
(adjstk '1)
(cabeq (& 2) (& 5) 107)
(mov (& 2) a1)
(adjstk '6)
(return)
107
(mov (& 0) a3)
(mov (& 4) a2)
(mov (& 3) a1)
(call #:complice:make-single-module)
(mov (& 5) a1)
(mov (cdr a1) a1)
(adjstk '6)
(return)
))
(loader'((entry #:complice:make-list-of-module subr1)
(push a1)
(call #:complice:get-all-files)
(push nil)
(push (cvalq #:complice:no-warning))
(push a1)
(mov (& 1) a2)
(mov '6 a1)
(jcall cons)
(mov a1 (cvalq #:complice:no-warning))
(push (& 0))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov 't a2)
(mov (& 0) a1)
(jcall libloadfile)
(adjstk '1)
(bra 101)
102
(adjstk '1)
(push (& 3))
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov a1 (& 4))
(push a1)
(mov 'import a2)
(jcall getdefmodule)
(mov a1 a3)
(pop a2)
(mov (& 0) a1)
(call #:complice:make-single-module)
(adjstk '1)
(bra 103)
104
(adjstk '1)
(mov (& 1) (cvalq #:complice:no-warning))
(mov (& 1) a1)
(adjstk '4)
(return)
))
(loader'((entry #:complice:get-all-files subr1)
(push nil)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'files a2)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 4) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 106)
(mov (& 4) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 4))
106
(adjstk '1)
(bra 103)
104
(adjstk '2)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(jmp nreverse)
))
(loader'((entry #:complice:make-single-module subr3)
(push a3)
(push a2)
(push a1)
(mov (cvalq #:complice:done) a2)
(jcall memq)
(bfnil a1 102)
(mov (cvalq #:complice:done) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:complice:done))
102
(mov 'include a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (cvalq #:complice:list-of-loaded-file) a2)
(mov (& 0) a1)
(jcall cassoc)
(bfnil a1 106)
(mov (& 0) a1)
(jcall ncons)
(mov (cvalq #:complice:list-of-loaded-file) a2)
(jcall cons)
(mov a1 (cvalq #:complice:list-of-loaded-file))
(mov 't a2)
(mov (& 0) a1)
(jcall libloadfile)
106
(adjstk '1)
(bra 103)
104
(adjstk '1)
(mov nil (cvalq #:compiler:exported-env))
(mov 'export a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push a1)
(push (& 8))
107
(bfcons (& 0) 108)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 3) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 110)
(mov (& 3) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 3))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'cpenv a2)
(jcall getdefmodule)
(push a1)
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 113)
(mov (& 0) a1)
(jcall eprogn)
(bra 114)
113
(mov (& 5) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 114)
(mov (& 5) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 5))
(mov (& 9) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 9))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'cpenv a2)
(jcall getdefmodule)
(push a1)
117
(bfcons (& 0) 118)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 120)
(mov (& 0) a1)
(jcall eprogn)
120
(adjstk '1)
(bra 117)
118
(adjstk '1)
114
(adjstk '1)
(bra 111)
112
(adjstk '1)
(mov (& 7) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 110)
(mov (& 7) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (& 7))
110
(adjstk '1)
(bra 107)
108
(adjstk '1)
(mov nil (cvalq #:complice:exportable-definition))
(mov nil (cvalq #:complice:synonym-definition))
(mov 'files a2)
(mov (& 7) a1)
(jcall getdefmodule)
(push a1)
(mov 'export a2)
(mov (& 8) a1)
(jcall getdefmodule)
(mov a1 a2)
(pop a1)
(jcall #:complice:get-all-def-in-files)
(mov a1 (& 4))
(push (@ 123))
(push (cvalq #:complice:exportable-definition))
(push (& 2))
(mov '2 a4)
(jmp nconc)
123
(eval ())
(mov a1 (& 2))
(mov (& 4) a2)
(mov (& 8) a1)
(call #:complice:switch-on)
(mov (& 2) a1)
(jcall #:complice:pass-one)
(push a1)
(push (@ 124))
(push (& 8))
(push (& 10))
(push (& 8))
(push (car a1))
(push (& 8))
(mov '5 a4)
(bra #:complice:make-single-module1)
124
(eval ())
(mov a1 (& 8))
(mov (& 0) a3)
(mov (cdr a3) a3)
(mov a1 a2)
(mov (& 7) a1)
(call #:complice:make-single-module2)
(mov a1 (& 8))
(push a1)
(push (@ 125))
(mov (& 8) a1)
(jcall nreverse)
(push a1)
(mov (cvalq #:compiler:exported-env) a1)
(jcall nreverse)
(push a1)
(mov '2 a4)
(jmp nconc)
125
(eval ())
(mov a1 a3)
(mov 'cpenv a2)
(pop a1)
(jcall setdefmodule)
(mov a1 (& 8))
(mov (& 7) a2)
(jcall printdefmodule)
(mov (& 0) a4)
(push (car a4))
126
(bfcons (& 0) 127)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push '(#:complice:bind #:complice:fvar #:complice:ftype))
128
(bfcons (& 0) 129)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 128)
129
(adjstk '2)
(bra 126)
127
(adjstk '1)
(mov (& 9) a1)
(adjstk '10)
(bra #:complice:switch-off)
))
(loader'((entry #:complice:make-single-module1 nsubr)
(push nil)
(push nil)
(push (& 3))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 4) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 103)
(mov (& 6) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 106)
(mov (cvalq #:complice:synonym-definition) a2)
(mov (& 0) a1)
(jcall memq)
(bfnil a1 106)
(mov (& 0) a3)
(mov '4 a2)
(mov (& 8) a1)
(jcall #:complice:warningf)
106
(push (@ 107))
(push (& 1))
(mov '#:complice:ftype a2)
(mov (& 2) a1)
(jcall get)
(push a1)
(mov '#:complice:fvar a2)
(mov (& 3) a1)
(jcall get)
(push a1)
(mov '#:complice:bind a2)
(mov (& 4) a1)
(jcall get)
(push a1)
(mov '4 a4)
(jmp mcons)
107
(eval ())
(mov (& 3) a2)
(jcall cons)
(mov a1 (& 3))
(bra 104)
103
(mov (& 6) a2)
(mov (& 0) a1)
(jcall memq)
(btnil a1 108)
(push (@ 110))
(push (& 1))
(mov '#:complice:ftype a2)
(mov (& 2) a1)
(jcall get)
(push a1)
(mov '#:complice:bind a2)
(mov (& 3) a1)
(jcall get)
(push a1)
(mov '3 a4)
(jmp mcons)
110
(eval ())
(mov (& 2) a2)
(jcall cons)
(mov a1 (& 2))
(bra 104)
108
(mov (& 0) a3)
(mov '6 a2)
(mov (& 8) a1)
(jcall #:complice:warningf)
104
(mov (& 6) a2)
(mov (& 0) a1)
(jcall delq)
(mov a1 (& 6))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(push (& 4))
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfsymb (& 0) 114)
(mov (& 0) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'macro 114)
(cabeq a4 'dmacro 114)
(mov (& 0) a1)
(jcall macro-openp)
(bfnil a1 114)
(mov (& 0) a3)
(mov '2 a2)
(mov (& 8) a1)
(jcall #:complice:warningf)
114
(adjstk '1)
(bra 111)
112
(adjstk '1)
(mov (& 1) a3)
(mov 'cpexport a2)
(mov (& 5) a1)
(jcall setdefmodule)
(mov (& 0) a3)
(mov 'cpfunctions a2)
(adjstk '7)
(jmp setdefmodule)
))
(loader'((entry #:complice:make-single-module2 subr3)
(push a2)
(push a1)
(push nil)
(push a3)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov '#:complice:switched a2)
(mov (& 0) a1)
(jcall get)
(push a1)
(bfnil a1 103)
(mov (& 1) a3)
(mov '6 a2)
(mov (& 4) a1)
(jcall #:complice:warningf)
(bra 104)
103
(mov '#:complice:ftype a2)
(mov (& 1) a1)
(jcall get)
(push a1)
(mov (& 4) a2)
(mov (& 1) a1)
(jcall assq)
(push a1)
(btnil a1 105)
(push a1)
(mov (& 2) a2)
(mov (& 4) a1)
(jcall cons)
(mov (& 1) a2)
(mov (cdr a2) a2)
(jcall cons)
(pop a4)
(mov a1 (cdr a4))
(bra 106)
105
(push (@ 107))
(push (& 3))
(mov (& 3) a2)
(mov (& 5) a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp list)
107
(eval ())
(mov (& 5) a2)
(jcall cons)
(mov a1 (& 5))
106
(adjstk '2)
104
(adjstk '2)
(bra 101)
102
(adjstk '1)
(mov (& 0) a3)
(mov 'cpimport a2)
(mov (& 2) a1)
(adjstk '3)
(jmp setdefmodule)
))
(loader'((entry #:complice:switch-on subr2)
(push a2)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'cpexport a2)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push a3)
(mov (& 6) a2)
(mov (& 2) a1)
(jcall memq)
(btnil a1 105)
(mov (& 4) a3)
(mov '11 a2)
(mov (& 2) a1)
(jcall #:complice:warningf)
(bra 106)
105
(mov '#:complice:ftype a3)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall putprop)
(mov (& 1) a4)
(cabeq a4 'msubr 109)
(cabne a4 'dmsubr 108)
109
(mov (& 2) a1)
(jcall typefn)
(bfnil a1 108)
(mov (& 2) a2)
(mov (& 4) a1)
(call #:complice:loadmodule)
108
(mov '#:complice:switched a3)
(mov (& 4) a2)
(mov (& 2) a1)
(jcall putprop)
(btnil (& 0) 106)
(mov '#:complice:fvar a3)
(mov (& 0) a2)
(mov (& 2) a1)
(jcall putprop)
106
(adjstk '3)
(bra 103)
104
(adjstk '2)
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:complice:switch-off subr1)
(push a1)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall readdefmodule)
(mov 'cpexport a2)
(jcall getdefmodule)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov '#:complice:ftype a2)
(mov (& 0) a1)
(jcall remprop)
(mov '#:complice:switched a2)
(mov (& 0) a1)
(jcall remprop)
(mov (& 0) a1)
(jcall typefn)
(mov a1 a4)
(cabeq a4 'expr 107)
(cabeq a4 'fexpr 107)
(cabne a4 '() 106)
107
(mov '#:complice:fvar a2)
(mov (& 0) a1)
(jcall remprop)
106
(adjstk '1)
(bra 103)
104
(adjstk '2)
(bra 101)
102
(mov nil a1)
(adjstk '1)
(return)
))
(loader '((end)))
