(loader '((title |cpmod2.lo|)))
(defvar #:sys-package:colon 'complice)
(putprop 'makemodule-pass-two '(#:messages:current-language) '#:complice:fvar)
(loader'((fentry makemodule-pass-two subr1)
(entry makemodule-pass-two subr1)
(push a1)
(jcall readdefmodule)
(push a1)
(mov 'files a2)
(jcall getdefmodule)
(push a1)
(mov 'export a2)
(mov (& 1) a1)
(jcall getdefmodule)
(mov a1 a2)
(pop a1)
(jcall #:complice:get-all-def-in-files)
(push a1)
(mov 'cpimport a2)
(mov (& 1) a1)
(jcall getdefmodule)
(push a1)
(mov 'cpexport a2)
(mov (& 2) a1)
(jcall getdefmodule)
(push a1)
(mov 'cpfunctions a2)
(mov (& 3) a1)
(jcall getdefmodule)
(push a1)
(push (& 2))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push a4)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov '#:complice:ftype a3)
(mov a4 a2)
(mov (& 0) a1)
(jcall putprop)
(adjstk '1)
(bra 103)
104
(adjstk '2)
(bra 101)
102
(adjstk '1)
(push (& 1))
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(mov (cdr a3) a2)
(mov (car a3) a3)
(push a3)
(push a2)
(mov '#:complice:ftype a3)
(mov a4 a2)
(mov (& 2) a1)
(jcall putprop)
(btnil (& 1) 108)
(mov '#:complice:fvar a3)
(mov (& 1) a2)
(mov (& 2) a1)
(jcall putprop)
108
(btnil (& 0) 110)
(mov '#:complice:bind a3)
(mov (& 0) a2)
(mov (& 2) a1)
(jcall putprop)
110
(adjstk '3)
(bra 105)
106
(adjstk '1)
(push (& 0))
111
(bfcons (& 0) 112)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov (cdr a4) a3)
(mov (car a4) a4)
(push a3)
(mov '#:complice:ftype a3)
(mov a4 a2)
(mov (& 1) a1)
(jcall putprop)
(btnil (& 0) 114)
(mov '#:complice:bind a3)
(mov (& 0) a2)
(mov (& 1) a1)
(jcall putprop)
114
(adjstk '2)
(bra 111)
112
(adjstk '1)
(mov 'cpexport a2)
(mov (& 4) a1)
(jcall getdefmodule)
(push a1)
(push nil)
115
(bfcons (& 1) 116)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(mov (& 0) a2)
(mov (car a1) a1)
(jcall cons)
(mov a1 (& 0))
(bra 115)
116
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a3)
(mov (& 5) a2)
(mov (& 3) a1)
(jcall #:complice:generate-in-file)
(push (& 2))
117
(bfcons (& 0) 118)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push a4)
119
(bfcons (& 0) 120)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(mov '#:complice:ftype a2)
(mov (& 0) a1)
(jcall remprop)
(adjstk '1)
(bra 119)
120
(adjstk '2)
(bra 117)
118
(adjstk '1)
(push (& 1))
121
(bfcons (& 0) 122)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push '(#:complice:bind #:complice:fvar #:complice:ftype))
123
(bfcons (& 0) 124)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 123)
124
(adjstk '2)
(bra 121)
122
(adjstk '1)
(push (& 1))
125
(bfcons (& 0) 126)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(push '(#:complice:bind #:complice:ftype))
127
(bfcons (& 0) 128)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a2)
(mov (& 2) a1)
(jcall remprop)
(adjstk '1)
(bra 127)
128
(adjstk '2)
(bra 125)
126
(mov nil a1)
(adjstk '7)
(return)
))
(loader'((fentry #:complice:generate-in-file subr3)
(entry #:complice:generate-in-file subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(mov '0 a4)
(jmp printlevel)
102
(eval ())
(push a1)
(push (@ 103))
(mov '0 a4)
(jmp printlength)
103
(eval ())
(push a1)
(push (@ 104))
(mov '0 a4)
(jmp outchan)
104
(eval ())
(push a1)
(push (@ 105))
(mov '0 a4)
(jmp rmargin)
105
(eval ())
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp lmargin)
106
(eval ())
(push a1)
(mov (& 6) a2)
(mov (& 8) a1)
(jcall #:complice:complement)
(push 't)
(push nil)
(push a1)
(push (cvalq #:system:print-for-read))
(mov (& 3) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:system:obj-extension))
(mov (& 18) a1)
(jcall string)
(push a1)
(push (@ 109))
(push (& 2))
(push a1)
(mov '2 a4)
(jmp index)
109
(eval ())
(hgsize (& 0) a4)
(hgsize (& 1) a3)
(diff a3 a4)
(cabne a1 a4 107)
(mov (& 0) a4)
(bra 108)
107
(push (@ 110))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp catenate)
110
(eval ())
(mov a1 a4)
108
(mov a4 (& 19))
(adjstk '2)
(push (@ 111))
(mov a4 a1)
(jcall openo)
(push a1)
(mov '1 a4)
(jmp outchan)
111
(eval ())
(push (@ 112))
(push '10)
(mov '1 a4)
(jmp obase)
112
(eval ())
(push (@ 113))
(push '1000)
(mov '1 a4)
(jmp printlevel)
113
(eval ())
(push (@ 114))
(push '30000)
(mov '1 a4)
(jmp printlength)
114
(eval ())
(push (@ 115))
(push (@ 116))
(mov '0 a4)
(jmp outbuf)
116
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
115
(eval ())
(push (@ 117))
(push '0)
(mov '1 a4)
(jmp lmargin)
117
(eval ())
(push (@ 118))
(push (@ 119))
(push 'loader)
(push (@ 120))
(push 'quote)
(push (@ 121))
(push 'title)
(push (@ 122))
(push (& 25))
(mov '1 a4)
(jmp concat)
122
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
121
(eval ())
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp list)
120
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
119
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
118
(eval ())
(push (@ 123))
(push dlink)
(push prot)
(stack dlink)
(push (& 19))
125
(bfcons (& 0) 126)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(bfcons (& 0) 127)
(push (@ 129))
(push (& 1))
(mov '1 a4)
(jmp print)
129
(eval ())
(bra 128)
127
(mov '#:complice:ftype a2)
(mov (& 0) a1)
(jcall get)
(btnil a1 131)
(mov nil a4)
(bra 132)
131
(mov 't a4)
132
(bfnil a4 128)
(mov nil a3)
(mov (& 12) a2)
(mov (& 0) a1)
(jcall #:complice:pass-two)
(push a1)
(mov (& 24) a2)
(mov (& 1) a1)
(jcall memq)
(btnil a1 133)
(mov '#:complice:fvar a2)
(mov (& 1) a1)
(jcall get)
(mov a1 (& 14))
(btnil a1 134)
(push (@ 137))
(push (@ 138))
(push 'putprop)
(push (@ 139))
(push 'quote)
(push (& 6))
(mov '2 a4)
(jmp list)
139
(eval ())
(push a1)
(push (@ 140))
(push 'quote)
(push (& 20))
(mov '2 a4)
(jmp list)
140
(eval ())
(push a1)
(push '('#:complice:fvar))
(mov '4 a4)
(jmp mcons)
138
(eval ())
(push a1)
(mov '1 a4)
(jmp print)
137
(eval ())
(bra 134)
133
(mov (& 0) a4)
(mov (cdr a4) (& 0))
134
(push (@ 141))
(push '40)
(mov '1 a4)
(jmp princn)
141
(eval ())
(push (@ 142))
(push 'loader)
(mov '1 a4)
(jmp prin)
142
(eval ())
(push (@ 143))
(push '39)
(mov '1 a4)
(jmp princn)
143
(eval ())
(push (@ 144))
(push '40)
(mov '1 a4)
(jmp princn)
144
(eval ())
(push (& 0))
145
(bfcons (& 0) 146)
(push (@ 147))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp print)
147
(eval ())
(bra 145)
146
(adjstk '1)
(push (@ 148))
(push '41)
(mov '1 a4)
(jmp princn)
148
(eval ())
(push (@ 149))
(push '41)
(mov '1 a4)
(jmp princn)
149
(eval ())
(push (@ 150))
(mov '0 a4)
(jmp terpri)
150
(eval ())
(adjstk '1)
128
(adjstk '1)
(bra 125)
126
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 124) a3)
123
(push a3)
(push a2)
(push (@ 151))
(push '(loader '((end))))
(mov '1 a4)
(jmp print)
151
(eval ())
(push (@ 152))
(push (@ 153))
(mov '0 a4)
(jmp outchan)
153
(eval ())
(push a1)
(mov '1 a4)
(jmp close)
152
(eval ())
(push (@ 154))
(push (& 15))
(mov '1 a4)
(jmp rmargin)
154
(eval ())
(push (@ 155))
(push (& 14))
(mov '1 a4)
(jmp lmargin)
155
(eval ())
(push (@ 156))
(push (& 19))
(mov '1 a4)
(jmp obase)
156
(eval ())
(push (@ 157))
(push (& 18))
(mov '1 a4)
(jmp printlevel)
157
(eval ())
(push (@ 158))
(push (& 17))
(mov '1 a4)
(jmp printlength)
158
(eval ())
(push (@ 159))
(push (& 16))
(mov '1 a4)
(jmp outchan)
159
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
124
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '19)
(return)
))
(loader'((fentry pretty-lap subr2)
(entry pretty-lap subr2)
(push a1)
(bfnil a2 101)
(adjstk '1)
(return)
101
(cabne a2 '0 103)
(push (@ 105))
(push '"(loader '(")
(mov '1 a4)
(jmp print)
105
(eval ())
(mov (& 0) a1)
(call pretty-lap-lisp)
(push (@ 106))
(push '"))")
(mov '1 a4)
(jmp print)
106
(eval ())
(adjstk '1)
(return)
103
(adjstk '1)
(bra pretty-lap-llm3)
))
(loader'((entry pretty-lap-lisp subr1)
(push a1)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
101
(btnil (& 8) 102)
(mov (& 8) a4)
(btcons (car a4) 103)
(btnil (car a4) 104)
(push (@ 109))
(mov '0 a4)
(jmp outpos)
109
(eval ())
(cabeq a1 '0 108)
(push (@ 110))
(mov '0 a4)
(jmp terpri)
110
(eval ())
108
(push (@ 111))
(mov (& 9) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
111
(eval ())
(push (@ 114))
(mov '0 a4)
(jmp outpos)
114
(eval ())
(cnblt a1 '9 112)
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
(bra 104)
112
(push (@ 116))
(push '10)
(mov '1 a4)
(jmp outpos)
116
(eval ())
(bra 104)
103
(push (@ 119))
(mov '0 a4)
(jmp outpos)
119
(eval ())
(cabne a1 '0 118)
(push (@ 120))
(push '10)
(mov '1 a4)
(jmp outpos)
120
(eval ())
118
(push (@ 121))
(mov (& 9) a4)
(push (car a4))
(mov '1 a4)
(jmp print)
121
(eval ())
104
(mov (& 8) a4)
(mov (cdr a4) (& 8))
(bra 101)
102
(mov nil a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '9)
(return)
))
(loader'((entry pretty-lap-llm3 subr1)
(push a1)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
101
(btnil (& 8) 102)
(mov (& 8) a4)
(btcons (car a4) 103)
(btnil (car a4) 104)
(push (@ 109))
(mov '0 a4)
(jmp outpos)
109
(eval ())
(cabeq a1 '0 108)
(push (@ 110))
(mov '0 a4)
(jmp terpri)
110
(eval ())
108
(push (@ 111))
(mov (& 9) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
111
(eval ())
(push (@ 114))
(mov '0 a4)
(jmp outpos)
114
(eval ())
(cnblt a1 '9 112)
(push (@ 115))
(mov '0 a4)
(jmp terpri)
115
(eval ())
(bra 104)
112
(push (@ 116))
(push '10)
(mov '1 a4)
(jmp outpos)
116
(eval ())
(bra 104)
103
(push (@ 119))
(mov '0 a4)
(jmp outpos)
119
(eval ())
(cabne a1 '0 118)
(push (@ 120))
(push '10)
(mov '1 a4)
(jmp outpos)
120
(eval ())
118
(push (@ 121))
(mov (& 9) a4)
(mov (car a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
121
(eval ())
(push (@ 122))
(push '20)
(mov '1 a4)
(jmp outpos)
122
(eval ())
(mov (& 8) a4)
(mov (car a4) a4)
(btnil (cdr a4) 124)
(mov (& 8) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call prin-llm3-op)
124
(mov (& 8) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(push (cdr a4))
125
(bfcons (& 0) 126)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 127))
(push '44)
(mov '1 a4)
(jmp princn)
127
(eval ())
(mov (& 0) a1)
(call prin-llm3-op)
(adjstk '1)
(bra 125)
126
(adjstk '1)
(push (@ 128))
(mov '0 a4)
(jmp terpri)
128
(eval ())
104
(mov (& 8) a4)
(mov (cdr a4) (& 8))
(bra 101)
102
(mov nil a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '9)
(return)
))
(loader'((entry prin-llm3-op subr1)
(push a1)
(btcons a1 101)
(push (@ 103))
(push a1)
(mov '1 a4)
(jmp prin)
103
(eval ())
(adjstk '1)
(return)
101
(cabne (car a1) 'cvalq 104)
(push (@ 106))
(mov (cdr a1) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
106
(eval ())
(adjstk '1)
(return)
104
(cabne (car a1) '@ 107)
(push (@ 109))
(push '64)
(mov '1 a4)
(jmp princn)
109
(eval ())
(push (@ 110))
(mov (& 1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
110
(eval ())
(adjstk '1)
(return)
107
(cabne (car a1) 'quote 111)
(push (@ 113))
(push '39)
(mov '1 a4)
(jmp princn)
113
(eval ())
(push (@ 114))
(mov (& 1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
114
(eval ())
(adjstk '1)
(return)
111
(cabne (car a1) '& 115)
(push (@ 117))
(push '38)
(mov '1 a4)
(jmp princn)
117
(eval ())
(push (@ 118))
(mov (& 1) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '1 a4)
(jmp prin)
118
(eval ())
(adjstk '1)
(return)
115
(push (@ 119))
(push (car a1))
(mov '1 a4)
(jmp prin)
119
(eval ())
(push (@ 120))
(mov (& 1) a4)
(push (cdr a4))
(mov '1 a4)
(jmp prin)
120
(eval ())
(adjstk '1)
(return)
))
(loader'((fentry #:complice:peephole subr1)
(entry #:complice:peephole subr1)
(bra #:compiler:peephole)
))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'peephole)))
(defvar #:sys-package:colon 'compiler)
(if (not (boundp '#:compiler:ph-debug)) (progn (defvar #:compiler:ph-debug ())))
(if (not (boundp '#:compiler:ph-stat)) (progn (defvar #:compiler:ph-stat ())))
(defvar #:compiler:no-jrst-hack '(#:llcp:nlist #:llcp:cbindl #:llcp:cbinds #:llcp:tagbody #:llcp:with-interrupts #:llcp:without-interrupts #:llcp:schedule #:llcp:block #:llcp:protect #:llcp:tag))
(loader'((entry #:compiler:peephole subr1)
(push a1)
(push nil)
(push '29999)
(push nil)
(push '29998)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov a1 (& 2))
101
(bfcons (& 2) 102)
(mov (& 2) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (& 0))
(bfcons (& 0) 103)
(mov (& 0) a3)
(bfnil (car a3) 103)
(mov (& 0) a3)
(mov (cdr a3) (cdr a4))
(bra 101)
103
(bfnil (& 1) 105)
(bfcons (& 0) 107)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov a4 a1)
(jcall rplac)
(bra 101)
107
(mov nil (& 2))
(bra 101)
105
(btcons (& 1) 109)
(mov (& 0) a3)
(btnil (car a3) 113)
(bfcons (car a3) 111)
113
(mov (& 0) (& 2))
(bra 101)
111
(mov (& 0) a1)
(mov (& 9) a3)
(mov (& 1) a2)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
109
(mov (& 1) a3)
(cabne (car a3) 'return 114)
(mov (& 0) a2)
(btnil (car a2) 118)
(bfcons (car a2) 116)
118
(mov (& 0) (& 2))
(bra 101)
116
(mov (& 0) a1)
(mov (& 9) a3)
(mov (& 8) a2)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
114
(cabne (car a3) 'bra 119)
(mov (& 0) a2)
(btnil (car a2) 123)
(bfcons (car a2) 121)
123
(mov (& 0) (& 2))
(bra 101)
121
(mov (& 0) a1)
(mov (cdr a3) a2)
(cabne (car a1) (car a2) 124)
(mov (& 6) a2)
(bra 125)
124
(mov (cdr a3) a2)
(mov (car a2) a2)
125
(mov (& 9) a3)
(mov (car a1) a1)
(jcall acons)
(mov a1 (& 9))
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 101)
119
(mov (& 0) (& 2))
(bra 101)
102
(push (& 9))
126
(bfcons (& 0) 127)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (& 10) a2)
(mov (cdr a1) a1)
(jcall cassq)
(mov a1 (& 4))
(btnil a1 128)
(mov (& 0) a4)
(mov (car a4) a3)
(cabeq a1 (car a3) 130)
(mov a1 a3)
(bra 131)
130
(mov (& 7) a3)
131
(mov (car a4) a2)
(mov a3 (cdr a2))
(bra 126)
128
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(bra 126)
127
(adjstk '1)
(mov (& 10) (& 2))
132
(bfcons (& 2) 133)
(mov (& 2) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (& 0))
(btcons (& 1) 134)
(mov (& 0) a3)
(bfcons (car a3) 136)
(mov (car a3) a2)
(cabne (car a2) 'bra 136)
(mov (car a3) a1)
(mov (cdr a1) a1)
(cabeq (car a1) (& 1) 138)
(mov (car a3) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(cabne a1 (& 1) 136)
138
(mov (& 0) a4)
(mov (& 2) a3)
(mov (cdr a4) (cdr a3))
(bra 132)
136
(mov (& 0) (& 2))
(bra 132)
134
(mov (& 1) a3)
(cabne (car a3) 'bra 139)
(mov (cdr a3) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 3))
(cabne a1 (& 8) 141)
(mov (& 2) a4)
(mov '(return) (car a4))
(bra 132)
141
(mov (& 0) a4)
(bfcons (car a4) 143)
(mov (car a4) a3)
(mov (car a3) a3)
(cabeq a3 'bra 145)
(cabeq a3 'jmp 145)
(cabne a3 'return 143)
145
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
143
(btnil a1 146)
(mov (& 1) a1)
(jcall last)
(mov (& 3) (car a1))
(cabne (& 3) (& 6) 149)
(mov 't (& 5))
149
(mov (& 0) (& 2))
(bra 132)
146
(mov (& 0) (& 2))
(bra 132)
139
(cabne (car a3) 'push 150)
(mov (cdr a3) a2)
(bfcons (car a2) 150)
(mov (cdr a3) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 150)
(mov (cdr a3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 4))
(cabne a1 (& 8) 152)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
152
(btnil a1 154)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov a1 (car a3))
(mov (& 0) (& 2))
(bra 132)
154
(mov (& 0) (& 2))
(bra 132)
150
(cabne (car a3) 'mov 156)
(mov (cdr a3) a2)
(bfcons (car a2) 156)
(mov (cdr a3) a1)
(mov (car a1) a1)
(cabne (car a1) '@ 156)
(mov (cdr a3) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (& 9) a2)
(mov (car a1) a1)
(jcall cassq)
(mov a1 (& 4))
(btnil a1 159)
(mov (& 1) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a3)
(mov a1 (car a3))
(cabne a1 (& 8) 159)
(mov 't (& 7))
159
(mov (& 0) (& 2))
(bra 132)
156
(cabne (car a3) 'return 162)
(mov (& 0) a2)
(bfcons (car a2) 162)
(mov (& 0) a2)
(mov (car a2) a2)
(mov (car a2) a2)
(cabeq a2 'bra 166)
(cabeq a2 'jmp 166)
(cabne a2 'return 164)
166
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov a4 a1)
(jcall rplac)
(bra 132)
164
(mov (& 0) a1)
(mov (car a1) a1)
(cabne (car a1) 'jcall 167)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (cvalq #:compiler:no-jrst-hack) a2)
(mov (car a1) a1)
(jcall memq)
(bfnil a1 167)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 2) a4)
(mov (car a4) a3)
(mov 'jmp (car a3))
(bra 132)
167
(mov (& 0) a4)
(mov (car a4) a4)
(cabne (car a4) 'call 169)
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(mov (& 2) a4)
(mov (car a4) a3)
(mov 'bra (car a3))
(bra 132)
169
(mov (& 0) (& 2))
(bra 132)
162
(cabne (car a3) 'adjstk 171)
(mov (& 0) a2)
(bfcons (car a2) 171)
(mov (car a2) a1)
(cabne (car a1) 'adjstk 171)
(mov (cdr a3) a4)
(bfcons (car a4) 171)
(mov (cdr a3) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 171)
(mov (cdr a3) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(bfcons (car a4) 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(cabne (car a4) 'quote 171)
(mov (car a2) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(bffix (car a4) 171)
(mov (& 0) a4)
(mov (car a4) a4)
(mov (cdr a4) a4)
(mov (car a4) a4)
(mov (cdr a3) a2)
(mov (car a2) a2)
(mov (cdr a2) a2)
(mov (& 0) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(mov (cdr a1) a1)
(mov (car a2) a2)
(plus (car a1) a2)
(mov (cdr a4) a4)
(mov a2 (car a4))
(mov (& 0) a2)
(mov (cdr a2) a3)
(mov (car a2) a2)
(mov (& 2) a1)
(jcall rplac)
(bra 132)
171
(mov (cdr a3) a1)
(jcall last)
(mov (car a1) (& 4))
(bffix (car a1) 173)
(cabeq (& 4) (& 8) 173)
(mov (& 9) a2)
(mov (& 4) a1)
(jcall cassq)
(mov a1 (& 3))
(btnil a1 173)
(mov (& 1) a1)
(jcall last)
(cabne (& 3) (& 8) 175)
(mov 't (& 7))
(mov (& 8) a4)
(bra 176)
175
(cabne (& 3) (& 6) 177)
(mov 't (& 5))
(mov (& 6) a4)
(bra 176)
177
(mov (& 3) a4)
176
(mov a4 (car a1))
(bra 132)
173
(mov (& 0) (& 2))
(bra 132)
133
(btnil (& 7) 180)
(push (@ 181))
(push '(return))
(push (& 10))
(push (& 13))
(mov '3 a4)
(jmp mcons)
181
(eval ())
(mov a1 (& 10))
180
(btnil (& 5) 183)
(push (@ 184))
(push (@ 185))
(push 'bra)
(push (& 9))
(mov '2 a4)
(jmp list)
185
(eval ())
(push a1)
(push (& 8))
(push (& 13))
(mov '3 a4)
(jmp mcons)
184
(eval ())
(mov a1 (& 10))
183
(mov (& 10) a1)
(adjstk '11)
(return)
))
(loader '((end)))
