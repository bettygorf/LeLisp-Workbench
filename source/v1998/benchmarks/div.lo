(loader '((title |div.lo|)))
(loader'((fentry check-div2iter subr0)
(entry check-div2iter subr0)
(mov nil a2)
(mov '100 a1)
(jcall makelist)
(mov a1 a2)
(mov '(iterative-div2 *ll*) a1)
(jmp check-value)
))
(loader'((fentry meter-div2iter subr0)
(entry meter-div2iter subr0)
(push (@ 101))
(push '(count-calls-init))
(mov '1 a4)
(jmp eval)
101
(eval ())
(mov (cvalq *ll*) a1)
(call test-1)
(push (@ 102))
(push '(count-calls-stop))
(mov '1 a4)
(jmp eval)
102
(eval ())
(return)
))
(loader'((fentry test-div2iter subr1)
(entry test-div2iter subr1)
(cabne a1 '1 104)
(mov (cvalq *ll*) a1)
(bra test-1)
103
(push a1)
(mov (cvalq *ll*) a1)
(call test-1)
(pop a1)
104
(sobgez a1 103)
(mov 't a1)
(return)
))
(loader'((fentry check-div2rec subr0)
(entry check-div2rec subr0)
(mov nil a2)
(mov '100 a1)
(jcall makelist)
(mov a1 a2)
(mov '(recursive-div2 *ll*) a1)
(jmp check-value)
))
(loader'((fentry meter-div2rec subr0)
(entry meter-div2rec subr0)
(push (@ 101))
(push '(count-calls-init))
(mov '1 a4)
(jmp eval)
101
(eval ())
(mov (cvalq *ll*) a1)
(call test-2)
(push (@ 102))
(push '(count-calls-stop))
(mov '1 a4)
(jmp eval)
102
(eval ())
(return)
))
(loader'((fentry test-div2rec subr1)
(entry test-div2rec subr1)
(cabne a1 '1 104)
(mov (cvalq *ll*) a1)
(bra test-2)
103
(push a1)
(mov (cvalq *ll*) a1)
(call test-2)
(pop a1)
104
(sobgez a1 103)
(mov 't a1)
(return)
))
(loader'((fentry create-n subr1)
(entry create-n subr1)
(push nil)
(bra 102)
101
(push a1)
(mov (& 1) a2)
(mov nil a1)
(jcall cons)
(mov a1 (& 1))
(pop a1)
102
(sobgez a1 101)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(defvar *ll* (create-n 200))
(loader'((entry iterative-div2 subr1)
(mov nil a2)
(bra iterative-div2-aux)
))
(loader'((entry iterative-div2-aux subr2)
(push a1)
(bfnil a1 101)
(mov a2 a1)
(adjstk '1)
(return)
101
(mov (cdr a1) a1)
(push (cdr a1))
(mov (& 1) a1)
(mov (car a1) a1)
(jcall cons)
(mov a1 a2)
(pop a1)
(adjstk '1)
(bra iterative-div2-aux)
))
(loader'((entry recursive-div2 subr1)
(bfnil a1 101)
(mov nil a1)
(return)
101
(push (car a1))
(mov (cdr a1) a1)
(mov (cdr a1) a1)
(call recursive-div2)
(mov a1 a2)
(pop a1)
(jmp cons)
))
(loader'((entry test-1 subr1)
(push a1)
(mov '1200 a4)
(bra 102)
101
(push a4)
(mov (& 1) a1)
(call iterative-div2)
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(adjstk '1)
(return)
))
(loader'((entry test-2 subr1)
(push a1)
(mov '1200 a4)
(bra 102)
101
(push a4)
(mov (& 1) a1)
(call recursive-div2)
(pop a4)
102
(sobgez a4 101)
(mov 't a1)
(adjstk '1)
(return)
))
(loader '((end)))
