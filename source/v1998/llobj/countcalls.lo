(loader '((title |countcalls.lo|)))
(if (not (>= (version) 15.25)) (progn (error 'load 'erricf 'countcalls)))
(defvar #:sys-package:colon 'count-calls)
(if (featurep 'countcalls) (progn (with ((inchan ())) (print ";; countcalls already loaded.") (exit eof))))
(add-feature 'countcalls)
(defvar #:count-calls:active-flag ())
(defvar #:count-calls:debug-flag ())
(loader '((fentry #:count-calls:fincrplist fsubr) (mov (car a1) a1) (call #:count-calls:incrplist) (mov nil a1) (return) (entry #:count-calls:incrplist subr1) (bfvar a1 107) (mov (plist a1) a1) (mov '#:count-calls:plist-indicator a2) (bra 104) 103 (mov (cdr a1) a1) (bfcons a1 107) (mov (cdr a1) a1) 104 (bfcons a1 107) (cabne (car a1) a2 103) (mov (cdr a1) a1) (mov (car a1) a2) (cabeq nil (cvalq #:count-calls:active-flag) 105) (fplus '1. (car a2)) 105 (mov (cdr a2) a1) (return) 107 (push 'error) (push '#:count-calls:internal-count) (push (& 5)) (push a1) (mov '4 a4) (jmp funcall) (fentry #:count-calls:internal-count subr0) (push (& 0)) (push a2) (call #:count-calls:incrplist) (cabeq a1 nil 107) (jcall vag) (pop a2) (mov a1 (& 1)) (pop a1) (return) (end)) ())
(loader'((fentry count-calls-init nsubr)
(entry count-calls-init nsubr)
(jcall #:llcp:nlist)
(push nil)
(push (cvalq #:count-calls:active-flag))
(mov (& 1) (cvalq #:count-calls:active-flag))
(push '1)
(push '(#:count-calls:active-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil a1 107)
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov '#:count-calls:plist-indicator a2)
(mov (& 0) a1)
(jcall getprop)
(bfnil a1 106)
(mov (& 0) a1)
(call #:count-calls:count-calls-init1)
106
(adjstk '1)
(bra 103)
104
(adjstk '1)
(bra 102)
(fentry #:count-calls-init:g106 subr1)
(entry #:count-calls-init:g106 subr1)
(push a1)
(mov '#:count-calls:plist-indicator a2)
(jcall getprop)
(bfnil a1 108)
(mov (& 0) a1)
(adjstk '1)
(bra #:count-calls:count-calls-init1)
108
(mov nil a1)
(adjstk '1)
(return)
107
(mov '#:count-calls-init:g106 a1)
(jcall mapoblist)
102
(jcall count-calls-clear)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:count-calls:active-flag))
(adjstk '8)
(jcall count-calls-start)
(mov 'count-calls-init a1)
(return)
))
(loader'((fentry count-calls-clear subr0)
(entry count-calls-clear subr0)
(push nil)
(push (cvalq #:count-calls:active-flag))
(mov (& 1) (cvalq #:count-calls:active-flag))
(push '1)
(push '(#:count-calls:active-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bra 101)
(fentry #:count-calls-clear:g107 subr1)
(entry #:count-calls-clear:g107 subr1)
(bfvar a1 102)
(mov '#:count-calls:plist-indicator a2)
(jcall getprop)
(bfcons a1 104)
(mov '0. (car a1))
(return)
104
(mov nil a1)
(return)
102
(mov nil a1)
(return)
101
(mov '#:count-calls-clear:g107 a1)
(jcall mapoblist)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:count-calls:active-flag))
(adjstk '8)
(mov 'count-calls-clear a1)
(return)
))
(loader'((entry #:count-calls:count-calls-init1 subr1)
(push a1)
(bfvar a1 101)
(jcall typefn)
(btnil a1 101)
(cabeq (& 0) 'vag 101)
(mov (& 0) a4)
(cabeq (pkgc a4) 'count-calls 101)
(cabeq (pkgc a4) 'llcp 101)
(btnil (cvalq #:count-calls:debug-flag) 104)
(push (@ 105))
(push '#:count-calls:count-calls-init1)
(push '" ")
(push (& 3))
(mov '3 a4)
(jmp print)
105
(eval ())
104
(mov '#:count-calls:plist-indicator a2)
(mov (& 0) a1)
(jcall getprop)
(push a1)
(mov (& 1) a1)
(jcall typefn)
(cabeq a1 'subr0 108)
(cabeq a1 'subr1 108)
(cabeq a1 'subr2 108)
(cabeq a1 'subr3 108)
(cabeq a1 'nsubr 108)
(cabeq a1 'fsubr 108)
(cabeq a1 'msubr 108)
(cabne a1 'dmsubr 107)
108
(bfcons (& 0) 109)
(mov (& 0) a4)
(btnil (cdr a4) 109)
(mov (& 0) a4)
(mov '0. (car a4))
(mov a4 a1)
(adjstk '2)
(return)
109
(mov (& 1) a1)
(jcall valfn)
(mov a1 a2)
(mov '0. a1)
(jcall cons)
(mov '#:count-calls:plist-indicator a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall putprop)
(push (@ 111))
(push (@ 112))
(push (@ 113))
(push 'fentry)
(push '#:count-calls:strict-internal)
(mov (& 6) a1)
(jcall typefn)
(push a1)
(mov '3 a4)
(jmp list)
113
(eval ())
(push a1)
(push '(push a1))
(push (@ 114))
(push 'mov)
(push (@ 115))
(push 'quote)
(push (& 9))
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(push '(a1))
(mov '3 a4)
(jmp mcons)
114
(eval ())
(push a1)
(push '((jmp #:count-calls:internal-count) (end)))
(mov '4 a4)
(jmp mcons)
112
(eval ())
(push a1)
(push nil)
(mov '2 a4)
(jmp loader)
111
(eval ())
(mov '#:count-calls:strict-internal a1)
(jcall typefn)
(push a1)
(mov '#:count-calls:strict-internal a1)
(jcall valfn)
(mov a1 a3)
(pop a2)
(mov (& 1) a1)
(adjstk '2)
(jmp setfn)
107
(cabeq a1 'expr 117)
(cabeq a1 'fexpr 117)
(cabeq a1 'macro 117)
(cabne a1 'dmacro 116)
117
(bfcons (& 0) 118)
(mov (& 0) a4)
(mov '0. (car a4))
(mov a4 a1)
(adjstk '2)
(return)
118
(mov '0. a1)
(jcall ncons)
(mov '#:count-calls:plist-indicator a3)
(mov a1 a2)
(mov (& 1) a1)
(jcall putprop)
(mov (& 1) a1)
(jcall valfn)
(push a1)
(mov (& 2) a1)
(jcall typefn)
(push a1)
(push (@ 120))
(mov (& 2) a4)
(push (car a4))
(push (@ 121))
(push '#:count-calls:fincrplist)
(push (& 7))
(mov '2 a4)
(jmp list)
121
(eval ())
(push a1)
(mov (& 4) a4)
(push (cdr a4))
(mov '3 a4)
(jmp mcons)
120
(eval ())
(mov a1 a3)
(pop a2)
(mov (& 2) a1)
(adjstk '3)
(jmp resetfn)
116
(mov nil a1)
(adjstk '2)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry count-calls-start subr0)
(entry count-calls-start subr0)
(mov 't (cvalq #:count-calls:active-flag))
(mov 't a1)
(return)
))
(loader'((fentry count-calls-stop subr0)
(entry count-calls-stop subr0)
(mov nil (cvalq #:count-calls:active-flag))
(mov nil a1)
(return)
))
(loader'((entry #:count-calls:get-count-calls-infos subr2)
(push a1)
(push (cvalq val-min))
(mov a2 (cvalq val-min))
(push '1)
(push '(val-min))
(push (@ #:count-calls:get-count-calls-infos))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfcons a2 101)
(push (car a2))
(bffix (& 0) 104)
(mov (& 0) a1)
(jcall float)
(mov a1 (& 0))
104
(bffloat (& 0) 105)
(push (@ 107))
(push (& 1))
(push '0.)
(mov '2 a4)
(jmp >=)
107
(eval ())
(btnil a1 105)
(mov (& 0) a4)
(bra 106)
105
(mov (& 0) a3)
(mov 'erroob a2)
(mov (& 8) a1)
(jcall error)
(mov a1 a4)
106
(adjstk '1)
(bra 102)
101
(mov '1. a4)
102
(mov a4 (cvalq val-min))
(push nil)
(push (cvalq result))
(mov (& 1) (cvalq result))
(push '1)
(push '(result))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bra 108)
(fentry #:count-calls:get-count-calls-infos:g108 subr1)
(entry #:count-calls:get-count-calls-infos:g108 subr1)
(push a1)
(mov '#:count-calls:plist-indicator a2)
(jcall getprop)
(bfcons a1 109)
(bffloat (car a1) 109)
(cfbgt (cvalq val-min) (car a1) 109)
(push (@ 111))
(push (& 1))
(push (car a1))
(mov (& 3) a1)
(jcall typefn)
(push a1)
(mov '3 a4)
(jmp list)
111
(eval ())
(mov (cvalq result) a2)
(jcall cons)
(mov a1 (cvalq result))
(adjstk '1)
(return)
109
(mov nil a1)
(adjstk '1)
(return)
108
(mov '#:count-calls:get-count-calls-infos:g108 a1)
(jcall mapoblist)
(mov (cvalq result) a1)
(mov (& 1) dlink)
(mov (& 6) (cvalq result))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq val-min))
(adjstk '8)
(return)
))
(loader'((fentry count-calls-infos nsubr)
(entry count-calls-infos nsubr)
(jcall #:llcp:nlist)
(push nil)
(push (cvalq #:count-calls:active-flag))
(mov (& 1) (cvalq #:count-calls:active-flag))
(push '1)
(push '(#:count-calls:active-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov a1 a2)
(mov 'count-calls-infos a1)
(call #:count-calls:get-count-calls-infos)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:count-calls:active-flag))
(adjstk '8)
(return)
))
(loader'((fentry count-calls-printn nsubr)
(entry count-calls-printn nsubr)
(jcall #:llcp:nlist)
(push nil)
(push (cvalq #:count-calls:active-flag))
(mov (& 1) (cvalq #:count-calls:active-flag))
(push '1)
(push '(#:count-calls:active-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov a1 a2)
(mov 'count-calls-printn a1)
(call #:count-calls:get-count-calls-infos)
(push a1)
(bra 101)
(fentry #:count-calls-printn:g109 subr2)
(entry #:count-calls-printn:g109 subr2)
(push (@ 102))
(mov (cdr a1) a4)
(push (car a4))
(mov (cdr a2) a4)
(push (car a4))
(mov '2 a4)
(jmp >)
102
(eval ())
(return)
101
(mov a1 a2)
(mov '#:count-calls-printn:g109 a1)
(jcall sort)
(mov a1 (& 0))
(push a1)
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 105))
(push '" ~10,0F ~6@A  ~A")
(mov (& 2) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov (& 3) a4)
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov (& 4) a4)
(push (car a4))
(mov '4 a4)
(jmp prinf)
105
(eval ())
(push (@ 106))
(mov '0 a4)
(jmp terpri)
106
(eval ())
(adjstk '1)
(bra 103)
104
(mov nil a1)
(adjstk '2)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:count-calls:active-flag))
(adjstk '8)
(return)
))
(loader'((fentry count-calls-printa nsubr)
(entry count-calls-printa nsubr)
(jcall #:llcp:nlist)
(push nil)
(push (cvalq #:count-calls:active-flag))
(mov (& 1) (cvalq #:count-calls:active-flag))
(push '1)
(push '(#:count-calls:active-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov a1 a2)
(mov 'count-calls-printa a1)
(call #:count-calls:get-count-calls-infos)
(push a1)
(bra 101)
(fentry #:count-calls-printa:g110 subr2)
(entry #:count-calls-printa:g110 subr2)
(mov (car a2) a2)
(mov (car a1) a1)
(jmp alphalessp)
101
(mov a1 a2)
(mov '#:count-calls-printa:g110 a1)
(jcall sort)
(mov a1 (& 0))
(push a1)
102
(bfcons (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 104))
(push '" ~36A  ~6@A ~10,0F ")
(mov (& 2) a4)
(push (car a4))
(mov (cdr a4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov (& 4) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '4 a4)
(jmp prinf)
104
(eval ())
(push (@ 105))
(mov '0 a4)
(jmp terpri)
105
(eval ())
(adjstk '1)
(bra 102)
103
(mov nil a1)
(adjstk '2)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:count-calls:active-flag))
(adjstk '8)
(return)
))
(print ";; (count-calls-init)          to initialize and start")
(print ";; (count-calls-start)         to start")
(print ";; (count-calls-stop)          to stop")
(print ";; (count-calls-clear)         to clear the counters")
(print ";; (count-calls-printa [n])    to print the results (alpha)")
(print ";; (count-calls-printn [n])    to print the results (number)")
(loader '((end)))
