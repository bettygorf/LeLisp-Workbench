(loader '((title |llmenu.lo|)))
(defvar #:sys-package:colon '#:menu:llmenu)
(putprop '#:menu:llmenu '((() () () ()) name invertedx invertedy itemlists) 'defstruct)
(loader'((entry #:menu:llmenu:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '8 a4)
(jmp vector)
101
(eval ())
(mov '#:menu:llmenu (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:menu:llmenu:title '#:menu:llmenu:title 'setf-inverse) '#:menu:llmenu:title)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:llmenu:title (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:llmenu:itemlists '#:menu:llmenu:itemlists 'setf-inverse) '#:menu:llmenu:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:llmenu:itemlists (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:llmenu:display '#:menu:llmenu:display 'setf-inverse) '#:menu:llmenu:display)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:llmenu:display (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:llmenu:extend '#:menu:llmenu:extend 'setf-inverse) '#:menu:llmenu:extend)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:llmenu:extend (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:llmenu:name '#:menu:llmenu:name 'setf-inverse) '#:menu:llmenu:name)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:llmenu:name (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:llmenu:invertedx '#:menu:llmenu:invertedx 'setf-inverse) '#:menu:llmenu:invertedx)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:llmenu:invertedx (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:llmenu:invertedy '#:menu:llmenu:invertedy 'setf-inverse) '#:menu:llmenu:invertedy)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:llmenu:invertedy (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:menu:llmenu:itemlists '#:menu:llmenu:itemlists 'setf-inverse) '#:menu:llmenu:itemlists)))
(if (featurep 'compiler) (progn (defmacro-open #:menu:llmenu:itemlists (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(putprop 'itemlist '((() () ()) name active items) 'defstruct)
(loader'((entry #:itemlist:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(mov '3 a4)
(jmp vector)
101
(eval ())
(mov 'itemlist (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:itemlist:name '#:itemlist:name 'setf-inverse) '#:itemlist:name)))
(if (featurep 'compiler) (progn (defmacro-open #:itemlist:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:itemlist:active '#:itemlist:active 'setf-inverse) '#:itemlist:active)))
(if (featurep 'compiler) (progn (defmacro-open #:itemlist:active (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:itemlist:items '#:itemlist:items 'setf-inverse) '#:itemlist:items)))
(if (featurep 'compiler) (progn (defmacro-open #:itemlist:items (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((entry itemlist subr2)
(push a2)
(push a1)
(call #:itemlist:make)
(hpmovx (& 0) a1 '0)
(hpmovx (cvalq active) a1 '1)
(hpmovx (& 1) a1 '2)
(adjstk '2)
(return)
))
(putprop 'item '((() () ()) name active value) 'defstruct)
(loader'((entry #:item:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(mov '3 a4)
(jmp vector)
101
(eval ())
(mov 'item (cdr a1))
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:item:name '#:item:name 'setf-inverse) '#:item:name)))
(if (featurep 'compiler) (progn (defmacro-open #:item:name (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:item:active '#:item:active 'setf-inverse) '#:item:active)))
(if (featurep 'compiler) (progn (defmacro-open #:item:active (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(if (featurep 'setf) (progn (progn (putprop '#:item:value '#:item:value 'setf-inverse) '#:item:value)))
(if (featurep 'compiler) (progn (defmacro-open #:item:value (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((entry item subr3)
(push a3)
(push a2)
(push a1)
(call #:item:make)
(hpmovx (& 0) a1 '0)
(hpmovx (& 1) a1 '1)
(hpmovx (& 2) a1 '2)
(adjstk '3)
(return)
))
(loader'((fentry #:bitmap:create-menu subr1)
(entry #:bitmap:create-menu subr1)
(push a1)
(call #:menu:llmenu:make)
(push a1)
(push (@ 101))
(push a1)
(push '0)
(push (& 4))
(hgsize (& 5) a4)
(push a4)
(mov '4 a4)
(jmp bltvector)
101
(eval ())
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:menu:llmenu:kill-menu subr1)
(entry #:menu:llmenu:kill-menu subr1)
(mov nil a1)
(return)
))
(loader'((fentry #:menu:llmenu:activate-menu subr3)
(entry #:menu:llmenu:activate-menu subr3)
(push a1)
(call #:menu:llmenu:draw-menu)
(mov (& 0) a1)
(call #:menu:llmenu:follow-mouse)
(push nil)
(push nil)
(push nil)
(push nil)
(hpxmov (& 4) '5 a4)
(mov a4 (& 3))
(btnil a4 101)
(hpxmov (& 4) '6 a3)
(mov a3 (& 2))
(btnil a3 101)
(cnblt a4 '0 101)
(cnblt a3 '0 101)
(hpxmov (& 4) '7 a2)
(mov a4 a1)
(jcall nth)
(mov a1 (& 1))
(btnil a1 101)
(btnil a1 101)
(hpxmov a1 '2 a2)
(mov (& 2) a1)
(jcall nth)
(mov a1 (& 0))
(btnil a1 101)
(btnil a1 101)
(hpxmov a1 '1 a4)
(cabeq '0 a4 101)
(hpxmov (& 0) '2 a1)
(adjstk '5)
(return)
101
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((entry #:menu:llmenu:height subr1)
(push a1)
(jcall font-height)
(push a1)
(push (@ 101))
(push 'max)
(hpxmov (& 3) '7 a4)
(push a4)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(hpxmov (& 0) '2 a1)
(jcall length)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(mov a1 a2)
(mov '0 a1)
(jcall cons)
(push a1)
(mov '2 a4)
(jmp apply)
101
(eval ())
(pop a4)
(times a1 a4)
(mov a4 a1)
(adjstk '1)
(return)
))
(loader'((entry width-string subr1)
(hgsize a1 a3)
(mov '0 a2)
(jmp width-substring)
))
(loader'((entry #:itemlist:width subr1)
(hpxmov a1 '2 a4)
(btcons a4 101)
(mov '0 a1)
(return)
101
(push (@ 103))
(push 'max)
(hpxmov a1 '2 a4)
(push a4)
(push nil)
104
(bfcons (& 1) 105)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(hpxmov (& 0) '0 a1)
(call width-string)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 104)
105
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp apply)
103
(eval ())
(return)
))
(loader'((entry #:menu:llmenu:width subr1)
(push (@ 101))
(push '|+|)
(hpxmov a1 '7 a4)
(push a4)
(push nil)
102
(bfcons (& 1) 103)
(mov (& 1) a1)
(mov (cdr a1) (& 1))
(mov (car a1) a1)
(call #:itemlist:width)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 102)
103
(mov (& 0) a1)
(jcall nreverse)
(adjstk '2)
(push a1)
(mov '2 a4)
(jmp apply)
101
(eval ())
(return)
))
(loader'((entry #:menu:llmenu:draw-menu subr3)
(push a3)
(push a2)
(push a1)
(call #:menu:llmenu:width)
(push a1)
(mov (& 1) a1)
(call #:menu:llmenu:height)
(push (@ 101))
(push 'window)
(mov (& 2) a4)
(quo '2 a4)
(mov (& 4) a3)
(diff a4 a3)
(push a3)
(push (& 6))
(push (& 4))
(push a1)
(hpxmov (& 7) '4 a4)
(push a4)
(push '1)
(push '1)
(mov '8 a4)
(jmp create-window)
101
(eval ())
(push a1)
(jcall x-base-space)
(push a1)
(jcall font-ascent)
(push a1)
(hpmovx (& 2) (& 4) '3)
(push (@ 102))
(mov '0 a4)
(jmp current-window)
102
(eval ())
(push a1)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(push (@ 105))
(push (& 7))
(mov '1 a4)
(jmp current-window)
105
(eval ())
(hpxmov (& 8) '7 a4)
(push a4)
106
(bfcons (& 0) 107)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(hpxmov (& 0) '2 a4)
(push a4)
108
(bfcons (& 0) 109)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(hpxmov (& 0) '0 a4)
(push (@ 110))
(push (& 10))
(push (& 10))
(push a4)
(push '0)
(hgsize a4 a3)
(push a3)
(mov '5 a4)
(jmp draw-substring)
110
(eval ())
(push (@ 111))
(push (& 9))
(jcall font-height)
(push a1)
(mov '2 a4)
(jmp |+|)
111
(eval ())
(mov a1 (& 8))
(adjstk '1)
(bra 108)
109
(adjstk '1)
(jcall font-ascent)
(mov a1 (& 6))
(mov (& 0) a1)
(call #:itemlist:width)
(mov (& 7) a4)
(plus a1 a4)
(mov a4 (& 7))
(adjstk '1)
(bra 106)
107
(mov nil a1)
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 104) a3)
103
(push a3)
(push a2)
(push (@ 112))
(push (& 4))
(mov '1 a4)
(jmp current-window)
112
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
104
(eval ())
(adjstk '8)
(return)
))
(loader'((entry #:menu:llmenu:find-list subr2)
(hpxmov a1 '7 a1)
(mov '0 a3)
(bra #:menu:llmenu:find-list1)
))
(loader'((entry #:menu:llmenu:find-list1 subr3)
(push a3)
(push a2)
(push a1)
(cnbge a2 '0 101)
(mov nil a1)
(adjstk '3)
(return)
101
(bfnil a1 103)
(mov nil a1)
(adjstk '3)
(return)
103
(push a2)
(mov (car a1) a1)
(call #:itemlist:width)
(pop a4)
(cnbge a4 a1 105)
(mov (& 2) a1)
(adjstk '3)
(return)
105
(mov (& 0) a1)
(push (cdr a1))
(mov (car a1) a1)
(call #:itemlist:width)
(mov (& 2) a4)
(diff a1 a4)
(mov (& 3) a3)
(plus '1 a3)
(mov a4 a2)
(pop a1)
(adjstk '3)
(bra #:menu:llmenu:find-list1)
))
(loader'((entry #:menu:llmenu:itemlist-x subr2)
(push a2)
(hpxmov a1 '7 a2)
(pop a1)
(bra #:menu:llmenu:itemlist-x1)
))
(loader'((entry #:menu:llmenu:itemlist-x1 subr2)
(push a2)
(push a1)
(cabne a1 '0 101)
(mov '0 a1)
(adjstk '2)
(return)
101
(mov (car a2) a1)
(call #:itemlist:width)
(push a1)
(mov (& 1) a4)
(diff '1 a4)
(mov (& 2) a2)
(mov (cdr a2) a2)
(mov a4 a1)
(call #:menu:llmenu:itemlist-x1)
(pop a4)
(plus a1 a4)
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((entry #:menu:llmenu:invert-item subr3)
(push a3)
(push a2)
(push a1)
(push nil)
(push nil)
(btnil a2 101)
(btnil a3 101)
(push a2)
(hpxmov a1 '7 a2)
(pop a1)
(jcall nth)
(mov a1 (& 1))
(btnil a1 101)
(hpxmov a1 '1 a4)
(cabeq '0 a4 101)
(hpxmov a1 '2 a2)
(mov (& 4) a1)
(jcall nth)
(mov a1 (& 0))
(btnil a1 101)
(hpxmov a1 '1 a4)
(cabeq '0 a4 101)
(mov (& 3) a2)
(mov (& 2) a1)
(call #:menu:llmenu:itemlist-x)
(push a1)
(jcall font-height)
(mov (& 5) a4)
(times a1 a4)
(push a4)
(mov (& 3) a1)
(call #:itemlist:width)
(push a1)
(jcall font-height)
(push (@ 103))
(push (& 3))
(push (& 3))
(push (& 3))
(push a1)
(mov '4 a4)
(jmp fill-rectangle)
103
(eval ())
(adjstk '8)
(return)
101
(mov nil a1)
(adjstk '5)
(return)
))
(defvar #:menu:llmenu:local-read-mouse:x (if (boundp '#:menu:llmenu:local-read-mouse:x) #:menu:llmenu:local-read-mouse:x 0))
(defvar #:menu:llmenu:local-read-mouse:y (if (boundp '#:menu:llmenu:local-read-mouse:y) #:menu:llmenu:local-read-mouse:y 0))
(defvar #:menu:llmenu:local-read-mouse:event (if (boundp '#:menu:llmenu:local-read-mouse:event) #:menu:llmenu:local-read-mouse:event #:event:#[0 0 0 0 0 0 0 0 0]))
(loader'((entry #:menu:llmenu:local-read-mouse subr0)
(push (@ 101))
(push (cvalq #:menu:llmenu:local-read-mouse:event))
(mov '1 a4)
(jmp read-mouse)
101
(eval ())
(push (@ 102))
(push (@ 103))
(mov '0 a4)
(jmp current-window)
103
(eval ())
(push a1)
(hpxmov (cvalq #:menu:llmenu:local-read-mouse:event) '3 a4)
(push a4)
(hpxmov (cvalq #:menu:llmenu:local-read-mouse:event) '4 a4)
(push a4)
(push '#:menu:llmenu:local-read-mouse:x)
(push '#:menu:llmenu:local-read-mouse:y)
(mov '5 a4)
(jmp map-window)
102
(eval ())
(hpmovx nil (cvalq #:menu:llmenu:local-read-mouse:event) '1)
(hpmovx (cvalq #:menu:llmenu:local-read-mouse:x) (cvalq #:menu:llmenu:local-read-mouse:event) '5)
(hpmovx (cvalq #:menu:llmenu:local-read-mouse:y) (cvalq #:menu:llmenu:local-read-mouse:event) '6)
(mov (cvalq #:menu:llmenu:local-read-mouse:event) a1)
(return)
))
(loader'((entry #:menu:llmenu:follow-mouse subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp current-window)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(hpxmov (& 5) '3 a4)
(push a4)
(mov '1 a4)
(jmp current-window)
104
(eval ())
(push (@ 105))
(mov '0 a4)
(jmp current-mode)
105
(eval ())
(push a1)
(push (@ 106))
(mov '0 a4)
(jmp current-pattern)
106
(eval ())
(push a1)
(push (@ 107))
(push dlink)
(push prot)
(stack dlink)
(push (@ 109))
(push '6)
(mov '1 a4)
(jmp current-mode)
109
(eval ())
(push (@ 110))
(push '1)
(mov '1 a4)
(jmp current-pattern)
110
(eval ())
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(jcall ungrab-event)
111
(call #:menu:llmenu:local-read-mouse)
(mov a1 (& 0))
(hpxmov a1 '2 a2)
(mov '0 a1)
(jcall eq)
(btnil a1 113)
(mov nil a4)
(bra 114)
113
(mov 't a4)
114
(btnil a4 112)
(hpxmov (& 0) '6 a3)
(push a3)
(jcall font-height)
(pop a4)
(quo a1 a4)
(mov a4 (& 1))
(hpxmov (& 0) '5 a2)
(mov (& 14) a1)
(call #:menu:llmenu:find-list)
(mov a1 (& 2))
(cabne a1 (& 4) 117)
(cabeq (& 1) (& 3) 111)
117
(mov (& 3) a3)
(mov (& 4) a2)
(mov (& 14) a1)
(call #:menu:llmenu:invert-item)
(mov (& 2) (& 4))
(mov (& 1) (& 3))
(mov (& 3) a3)
(mov (& 4) a2)
(mov (& 14) a1)
(call #:menu:llmenu:invert-item)
(bra 111)
112
(hpmovx (& 4) (& 14) '5)
(hpmovx (& 3) (& 14) '6)
(mov (& 3) a1)
(adjstk '5)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 108) a3)
107
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp current-pattern)
118
(eval ())
(push (@ 119))
(push (& 5))
(mov '1 a4)
(jmp current-mode)
119
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
108
(eval ())
(adjstk '2)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 120))
(push (& 4))
(mov '1 a4)
(jmp current-window)
120
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '1)
(hpxmov (& 0) '3 a1)
(jcall kill-window)
(hpmovx nil (& 0) '3)
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:menu:llmenu:menu-insert-item nsubr)
(entry #:menu:llmenu:menu-insert-item nsubr)
(cnbeq a4 '6 101)
(mov '#:menu:llmenu:menu-insert-item a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 5) '7 a2)
(mov (& 4) a1)
(jcall nth)
(btnil a1 102)
(push a1)
(hpxmov a1 '2 a2)
(push a2)
(mov (& 2) a3)
(mov (& 3) a2)
(mov (& 4) a1)
(call item)
(mov a1 a3)
(pop a2)
(mov (& 4) a1)
(call insertnth)
(pop a4)
(hpmovx a1 a4 '2)
(adjstk '6)
(return)
102
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((fentry #:menu:llmenu:menu-insert-item-list nsubr)
(entry #:menu:llmenu:menu-insert-item-list nsubr)
(cnbeq a4 '4 101)
(mov '#:menu:llmenu:menu-insert-item-list a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(push (cvalq active))
(mov (& 1) (cvalq active))
(push '1)
(push '(active))
(push (@ #:menu:llmenu:menu-insert-item-list))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov (& 10) '7 a2)
(push a2)
(mov (cvalq active) a2)
(mov (& 9) a1)
(call itemlist)
(mov a1 a3)
(pop a2)
(mov (& 9) a1)
(call insertnth)
(hpmovx a1 (& 10) '7)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq active))
(adjstk '11)
(return)
))
(loader'((fentry #:menu:llmenu:menu-delete-item-list subr2)
(entry #:menu:llmenu:menu-delete-item-list subr2)
(push a1)
(push a2)
(hpxmov a1 '7 a2)
(pop a1)
(call deletenth)
(pop a4)
(hpmovx a1 a4 '7)
(return)
))
(loader'((fentry #:menu:llmenu:menu-delete-item subr3)
(entry #:menu:llmenu:menu-delete-item subr3)
(push a3)
(push a2)
(hpxmov a1 '7 a2)
(pop a1)
(jcall nth)
(btnil a1 101)
(push a1)
(hpxmov a1 '2 a2)
(mov (& 1) a1)
(call deletenth)
(pop a4)
(hpmovx a1 a4 '2)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:menu:llmenu:menu-modify-item-list nsubr)
(entry #:menu:llmenu:menu-modify-item-list nsubr)
(cnbeq a4 '4 101)
(mov '#:menu:llmenu:menu-modify-item-list a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) '7 a2)
(mov (& 2) a1)
(jcall nth)
(push a1)
(btnil a1 102)
(btnil (& 2) 105)
(push a1)
(mov (& 3) a1)
(jcall string)
(pop a4)
(hpmovx a1 a4 '0)
105
(btnil (& 1) 106)
(hpmovx (& 1) (& 0) '0)
(mov (& 1) a1)
(adjstk '5)
(return)
106
(mov nil a1)
(adjstk '5)
(return)
102
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:menu:llmenu:menu-modify-item nsubr)
(entry #:menu:llmenu:menu-modify-item nsubr)
(cnbeq a4 '6 101)
(mov '#:menu:llmenu:menu-modify-item a1)
(mov '6 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 5) '7 a2)
(mov (& 4) a1)
(jcall nth)
(btnil a1 102)
(mov a1 a2)
(mov (& 3) a1)
(jcall nth)
(push a1)
(btnil (& 3) 105)
(push a1)
(mov (& 4) a1)
(jcall string)
(pop a4)
(hpmovx a1 a4 '0)
105
(btnil (& 2) 107)
(hpmovx (& 2) (& 0) '0)
107
(btnil (& 1) 108)
(hpmovx (& 1) (& 0) '0)
(mov (& 1) a1)
(adjstk '7)
(return)
108
(mov nil a1)
(adjstk '7)
(return)
102
(mov nil a1)
(adjstk '6)
(return)
))
(loader'((entry deletenth subr2)
(btcons a2 101)
(mov a2 a1)
(return)
101
(cabne a1 '0 103)
(mov (cdr a2) a1)
(return)
103
(push a2)
(diff '1 a1)
(mov (cdr a2) a2)
(call deletenth)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(return)
))
(loader'((entry insertnth subr3)
(btcons a2 101)
(mov a3 a1)
(jmp cons)
101
(cabne a1 '0 103)
(mov a3 a1)
(jmp cons)
103
(push a2)
(diff '1 a1)
(mov (cdr a2) a2)
(call insertnth)
(pop a4)
(mov a1 (cdr a4))
(mov a4 a1)
(return)
))
(loader '((end)))
