(loader '((title |toplevel.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'toplevel)))
(defvar #:sys-package:itsoft ())
(defvar #:system:debug ())
(defvar #:trace:trace ())
(defvar #:system:print-msgs 1)
(defvar #:system:error-flag ())
(loader'((fentry catcherror fsubr)
(entry catcherror fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push (cvalq #:system:error-flag))
(mov a1 (cvalq #:system:error-flag))
(push (cvalq #:system:l))
(mov a4 (cvalq #:system:l))
(push '2)
(push '(#:system:error-flag #:system:l))
(push (@ catcherror))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push a1)
(mov '1 a4)
(jmp eval)
101
(eval ())
(push nil)
(push (cvalq #:system:error-flag))
(mov a1 (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil a1 102)
(mov (cvalq #:system:print-msgs) a4)
(bra 103)
102
(mov '0 a4)
103
(btnil a1 104)
(mov (cvalq #:system:debug) a3)
(bra 105)
104
(mov nil a3)
105
(push (cvalq #:system:debug))
(mov a3 (cvalq #:system:debug))
(push (cvalq #:system:print-msgs))
(mov a4 (cvalq #:system:print-msgs))
(push '2)
(push '(#:system:debug #:system:print-msgs))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov a3 (& 15))
(push (@ 106))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(mov (cvalq #:system:l) a1)
(jcall eprogn)
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
106
(eval ())
(cabeq (& 15) (cvalq #:system:debug) 108)
(mov (cvalq #:system:debug) (& 15))
108
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-msgs))
(mov (& 7) (cvalq #:system:debug))
(adjstk '8)
(btnil (& 7) 110)
(mov (& 7) (cvalq #:system:debug))
110
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(mov (& 7) (cvalq #:system:error-flag))
(adjstk '8)
(return)
))
(loader'((fentry errset dmsubr)
(entry errset dmsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a4)
(push (cvalq #:system:|e|))
(mov a1 (cvalq #:system:|e|))
(push (cvalq #:system:i))
(mov a4 (cvalq #:system:i))
(push '2)
(push '(#:system:|e| #:system:i))
(push (@ errset))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'catcherror)
(push a4)
(push a1)
(mov '3 a4)
(jmp list)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:i))
(mov (& 7) (cvalq #:system:|e|))
(adjstk '8)
(return)
))
(loader'((fentry err dmsubr)
(entry err dmsubr)
(push (cvalq #:system:l))
(mov a1 (cvalq #:system:l))
(push '1)
(push '(#:system:l))
(push (@ err))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'exit)
(push '#:system:error-tag)
(push a1)
(mov '3 a4)
(jmp mcons)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:l))
(adjstk '7)
(return)
))
(loader'((fentry break subr0)
(entry break subr0)
(mov nil a1)
(mov '#:system:error-tag a2)
(jmp #:llcp:exit)
))
(defvar #:system:f ())
(defvar #:system:m ())
(defvar #:system:b ())
(loader'((fentry syserror subr3)
(entry syserror subr3)
(push (cvalq #:system:b))
(mov a3 (cvalq #:system:b))
(push (cvalq #:system:m))
(mov a2 (cvalq #:system:m))
(push (cvalq #:system:f))
(mov a1 (cvalq #:system:f))
(push '3)
(push '(#:system:b #:system:m #:system:f))
(push (@ syserror))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall teread)
(jcall tyflush)
(btnil (cvalq #:system:error-flag) 102)
(bfnil (cvalq #:system:debug) 102)
(push (@ 103))
(mov '0 a4)
(jmp outchan)
103
(eval ())
(push a1)
(push (@ 104))
(push nil)
(mov '1 a4)
(jmp outchan)
104
(eval ())
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(mov (cvalq #:system:b) a3)
(mov (cvalq #:system:m) a2)
(mov (cvalq #:system:f) a1)
(jcall printerror)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 107))
(push (& 4))
(mov '1 a4)
(jmp outchan)
107
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '1)
102
(push (@ 108))
(push 'break)
(mov '1 a4)
(jmp funcall)
108
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:f))
(mov (& 7) (cvalq #:system:m))
(mov (& 8) (cvalq #:system:b))
(adjstk '9)
(return)
))
(defvar #:toplevel:status t)
(defvar #:toplevel:read ())
(defvar #:toplevel:cread ())
(defvar #:toplevel:print ())
(defvar #:toplevel:eval ())
(loader'((fentry toplevel subr0)
(entry toplevel subr0)
(push (@ 101))
(push '#:system:toplevel-tag)
(push dlink)
(push tag)
(stack dlink)
(mov 't (cvalq #:system:error-flag))
(mov (cvalq #:toplevel:cread) (cvalq #:toplevel:read))
(push (@ 102))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(jcall read)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov nil a2)
(mov (@ 104) a3)
103
(push a2)
(push a3)
(bffix a2 105)
(mov nil a2)
105
(mov a2 a1)
(mov (& 2) a2)
(bfnil a1 107)
(mov a2 a1)
(jcall ncons)
(bra 108)
107
(cabne a1 '#:system:error-tag 109)
(mov nil a1)
(bra 108)
109
(cabne a1 '#:system:toplevel-tag 111)
(mov nil a1)
(mov '#:system:toplevel-tag a2)
(jmp #:llcp:exit)
111
(mov a1 a3)
(mov 'errudt a2)
(mov 'toplevel a1)
(jcall error)
108
(btsymb (& 1) 104)
(mov (& 2) a1)
(mov (& 1) a2)
(bri (& 0))
104
(adjstk '3)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(mov a1 (cvalq #:toplevel:cread))
(bfcons a1 113)
(mov (car a1) a4)
(bra 114)
113
(mov nil a4)
114
(mov a4 (cvalq #:toplevel:cread))
(push (@ 115))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 116))
(push dlink)
(push prot)
(stack dlink)
(push (@ 118))
(push a4)
(mov '1 a4)
(jmp eval)
118
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov nil a2)
(mov (@ 117) a3)
116
(push a2)
(push a3)
(bffix a2 119)
(mov nil a2)
119
(mov a2 a1)
(mov (& 2) a2)
(bfnil a1 121)
(mov a2 a1)
(jcall ncons)
(bra 122)
121
(cabne a1 '#:system:error-tag 123)
(mov nil a1)
(bra 122)
123
(cabne a1 '#:system:toplevel-tag 125)
(mov nil a1)
(mov '#:system:toplevel-tag a2)
(jmp #:llcp:exit)
125
(mov a1 a3)
(mov 'errudt a2)
(mov 'toplevel a1)
(jcall error)
122
(btsymb (& 1) 117)
(mov (& 2) a1)
(mov (& 1) a2)
(bri (& 0))
117
(adjstk '3)
(mov (& 1) dlink)
(adjstk '4)
115
(eval ())
(mov a1 (cvalq #:toplevel:eval))
(bfcons a1 128)
(btnil (cvalq #:toplevel:status) 128)
(jcall tyflush)
(push (@ 129))
(push '61)
(mov '1 a4)
(jmp princn)
129
(eval ())
(push (@ 130))
(push '32)
(mov '1 a4)
(jmp princn)
130
(eval ())
(push (@ 131))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 132))
(push dlink)
(push prot)
(stack dlink)
(push (@ 134))
(mov (cvalq #:toplevel:eval) a4)
(push (car a4))
(mov '1 a4)
(jmp print)
134
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov nil a2)
(mov (@ 133) a3)
132
(push a2)
(push a3)
(bffix a2 135)
(mov nil a2)
135
(mov a2 a1)
(mov (& 2) a2)
(bfnil a1 137)
(mov a2 a1)
(jcall ncons)
(bra 138)
137
(cabne a1 '#:system:error-tag 139)
(mov nil a1)
(bra 138)
139
(cabne a1 '#:system:toplevel-tag 141)
(mov nil a1)
(mov '#:system:toplevel-tag a2)
(jmp #:llcp:exit)
141
(mov a1 a3)
(mov 'errudt a2)
(mov 'toplevel a1)
(jcall error)
138
(btsymb (& 1) 133)
(mov (& 2) a1)
(mov (& 1) a2)
(bri (& 0))
133
(adjstk '3)
(mov (& 1) dlink)
(adjstk '4)
131
(eval ())
128
(mov (cvalq #:toplevel:eval) a4)
(mov (car a4) (cvalq #:toplevel:eval))
(mov (car a4) a1)
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(return)
))
(printline 5000)
(if (not (featurep 'messages)) (progn (loadmodule 'messages)))
(defvar #:system:fatal-errors '(errfstk errfsgc errfpgc errfsud errfstr errfvec errfsym errfcns errfflt errffix errfhep errfcod))
(#:messages:put-message 'errfstk 'french '"***** Erreur fatale : pile pleine." 'defmessage)
(#:messages:put-message 'errfstk 'english '"***** Fatal error : stack overflow." 'defmessage)
'errfstk
(#:messages:put-message 'errfsgc 'french '"***** Erreur fatale : pile pleine durant un GC." 'defmessage)
(#:messages:put-message 'errfsgc 'english '"***** Fatal error : stack overflow during GC." 'defmessage)
'errfsgc
(#:messages:put-message 'errfpgc 'french '"***** Erreur fatale : pile pleine durant un PRINT." 'defmessage)
(#:messages:put-message 'errfpgc 'english '"***** Fatal error : stack overflow during PRINT." 'defmessage)
'errfpgc
(#:messages:put-message 'errfsud 'french '"***** Erreur fatale : pile vide." 'defmessage)
(#:messages:put-message 'errfsud 'english '"***** Fatal error : stack underflow." 'defmessage)
'errfsud
(#:messages:put-message 'errfstr 'french '"***** Erreur fatale : zone des chaines pleine." 'defmessage)
(#:messages:put-message 'errfstr 'english '"***** Fatal error : no room for strings." 'defmessage)
'errfstr
(#:messages:put-message 'errfvec 'french '"***** Erreur fatale : zone des vecteurs pleine." 'defmessage)
(#:messages:put-message 'errfvec 'english '"***** Fatal error : no room for vectors." 'defmessage)
'errfvec
(#:messages:put-message 'errfsym 'french '"***** Erreur fatale : zone des symboles pleine." 'defmessage)
(#:messages:put-message 'errfsym 'english '"***** Fatal error : no room for symbols." 'defmessage)
'errfsym
(#:messages:put-message 'errfcns 'french '"***** Erreur fatale : zone des listes pleine." 'defmessage)
(#:messages:put-message 'errfcns 'english '"***** Fatal error : no room for lists." 'defmessage)
'errfcns
(#:messages:put-message 'errfflt 'french '"***** Erreur fatale : zone des flottants pleine." 'defmessage)
(#:messages:put-message 'errfflt 'english '"***** Fatal error : no room for floats." 'defmessage)
'errfflt
(#:messages:put-message 'errffix 'french '"***** Erreur fatale : zone des entiers pleine." 'defmessage)
(#:messages:put-message 'errffix 'english '"***** Fatal error : no room for fixnums." 'defmessage)
'errffix
(#:messages:put-message 'errfhep 'french '"***** Erreur fatale : zone du tas pleine." 'defmessage)
(#:messages:put-message 'errfhep 'english '"***** Fatal error : heap overflow." 'defmessage)
'errfhep
(#:messages:put-message 'errfcod 'french '"***** Erreur fatale : zone du code pleine." 'defmessage)
(#:messages:put-message 'errfcod 'english '"***** Fatal error : no room for code." 'defmessage)
'errfcod
(defvar errfstk (get-message 'errfstk))
(defvar errfsgc (get-message 'errfsgc))
(defvar errfpgc (get-message 'errfpgc))
(defvar errfsud (get-message 'errfsud))
(defvar errfstr (get-message 'errfstr))
(defvar errfvec (get-message 'errfvec))
(defvar errfsym (get-message 'errfsym))
(defvar errfcns (get-message 'errfcns))
(defvar errfflt (get-message 'errfflt))
(defvar errffix (get-message 'errffix))
(defvar errfhep (get-message 'errfhep))
(defvar errfcod (get-message 'errfcod))
(#:messages:put-message 'errmac 'french '"erreur de la machine" 'defmessage)
(#:messages:put-message 'errmac 'english '"machine error" 'defmessage)
'errmac
(#:messages:put-message 'errudv 'french '"variable indefinie" 'defmessage)
(#:messages:put-message 'errudv 'english '"undefined variable" 'defmessage)
'errudv
(#:messages:put-message 'errudf 'french '"fonction indefinie" 'defmessage)
(#:messages:put-message 'errudf 'english '"undefined function" 'defmessage)
'errudf
(#:messages:put-message 'errudm 'french '"methode indefinie" 'defmessage)
(#:messages:put-message 'errudm 'english '"undefined method" 'defmessage)
'errudm
(#:messages:put-message 'errudt 'french '"echappement indefini" 'defmessage)
(#:messages:put-message 'errudt 'english '"undefined escape" 'defmessage)
'errudt
(#:messages:put-message 'errbdf 'french '"mauvaise definition" 'defmessage)
(#:messages:put-message 'errbdf 'english '"bad definition" 'defmessage)
'errbdf
(#:messages:put-message 'errwna 'french '"mauvais nombre d'arguments" 'defmessage)
(#:messages:put-message 'errwna 'english '"wrong number of arguments" 'defmessage)
'errwna
(#:messages:put-message 'errbpa 'french '"mauvais parametre" 'defmessage)
(#:messages:put-message 'errbpa 'english '"bad parameter" 'defmessage)
'errbpa
(#:messages:put-message 'errilb 'french '"liaison illegale" 'defmessage)
(#:messages:put-message 'errilb 'english '"illegal binding" 'defmessage)
'errilb
(#:messages:put-message 'errbal 'french '"mauvaise liste d'arguments" 'defmessage)
(#:messages:put-message 'errbal 'english '"bad argument list" 'defmessage)
'errbal
(#:messages:put-message 'errnab 'french '"pas de portee lexicale" 'defmessage)
(#:messages:put-message 'errnab 'english '"no lexical scope" 'defmessage)
'errnab
(#:messages:put-message 'errxia 'french '"bloc lexical perime" 'defmessage)
(#:messages:put-message 'errxia 'english '"inactive lexical scope" 'defmessage)
'errxia
(#:messages:put-message 'errsxt 'french '"erreur de syntaxe" 'defmessage)
(#:messages:put-message 'errsxt 'english '"syntax error" 'defmessage)
'errsxt
(#:messages:put-message 'errios 'french '"erreur d'entree/sortie" 'defmessage)
(#:messages:put-message 'errios 'english '"I/O error" 'defmessage)
'errios
(#:messages:put-message 'err0dv 'french '"division par 0" 'defmessage)
(#:messages:put-message 'err0dv 'english '"division by zero" 'defmessage)
'err0dv
(#:messages:put-message 'errnna 'french '"l'argument n'est pas un nombre" 'defmessage)
(#:messages:put-message 'errnna 'english '"not a number" 'defmessage)
'errnna
(#:messages:put-message 'errnia 'french '"l'argument n'est pas un entier" 'defmessage)
(#:messages:put-message 'errnia 'english '"not a fixnum" 'defmessage)
'errnia
(#:messages:put-message 'errnfa 'french '"l'argument n'est pas un flottant" 'defmessage)
(#:messages:put-message 'errnfa 'english '"non float argument" 'defmessage)
'errnfa
(#:messages:put-message 'errnsa 'french '"l'argument n'est pas une chaine" 'defmessage)
(#:messages:put-message 'errnsa 'english '"non string argument" 'defmessage)
'errnsa
(#:messages:put-message 'errnaa 'french '"l'argument n'est pas un atome" 'defmessage)
(#:messages:put-message 'errnaa 'english '"not an atom" 'defmessage)
'errnaa
(#:messages:put-message 'errnla 'french '"l'argument n'est pas une liste" 'defmessage)
(#:messages:put-message 'errnla 'english '"not a list" 'defmessage)
'errnla
(#:messages:put-message 'errnva 'french '"l'argument n'est pas une variable" 'defmessage)
(#:messages:put-message 'errnva 'english '"not a variable" 'defmessage)
'errnva
(#:messages:put-message 'errvec 'french '"l'argument n'est pas un vecteur" 'defmessage)
(#:messages:put-message 'errvec 'english '"not a vector" 'defmessage)
'errvec
(#:messages:put-message 'errsym 'french '"l'argument n'est pas un symbole" 'defmessage)
(#:messages:put-message 'errsym 'english '"not a symbol" 'defmessage)
'errsym
(#:messages:put-message 'errnda 'french '"l'argument n'est pas une adresse" 'defmessage)
(#:messages:put-message 'errnda 'english '"not an address" 'defmessage)
'errnda
(#:messages:put-message 'errstc 'french '"l'argument n'est pas une structure" 'defmessage)
(#:messages:put-message 'errstc 'english '"not a structure" 'defmessage)
'errstc
(#:messages:put-message 'erroob 'french '"argument hors limite" 'defmessage)
(#:messages:put-message 'erroob 'english '"argument out of bounds" 'defmessage)
'erroob
(#:messages:put-message 'errstl 'french '"chaine trop longue" 'defmessage)
(#:messages:put-message 'errstl 'english '"string too long" 'defmessage)
'errstl
(#:messages:put-message 'errgen 'french '"ne sait pas calculer" 'defmessage)
(#:messages:put-message 'errgen 'english '"can't compute" 'defmessage)
'errgen
(#:messages:put-message 'errvirtty 'french '"terminal inconnu" 'defmessage)
(#:messages:put-message 'errvirtty 'english '"unknown terminal type" 'defmessage)
'errvirtty
(#:messages:put-message 'errfile 'french '"fichier inconnu" 'defmessage)
(#:messages:put-message 'errfile 'english '"unknown file" 'defmessage)
'errfile
(#:messages:put-message 'erricf 'french '"fichier incompatible" 'defmessage)
(#:messages:put-message 'erricf 'english '"incompatible file" 'defmessage)
'erricf
(#:messages:put-message 'errunk 'french '"je ne connais pas" 'defmessage)
(#:messages:put-message 'errunk 'english '"I don't know" 'defmessage)
'errunk
(#:messages:put-message 'errsxt1 'french '"liste trop courte" 'defmessage)
(#:messages:put-message 'errsxt1 'english '"list too short" 'defmessage)
'errsxt1
(#:messages:put-message 'errsxt2 'french '"chaine trop longue" 'defmessage)
(#:messages:put-message 'errsxt2 'english '"string too long" 'defmessage)
'errsxt2
(#:messages:put-message 'errsxt3 'french '"symbole trop long" 'defmessage)
(#:messages:put-message 'errsxt3 'english '"symbol too long" 'defmessage)
'errsxt3
(#:messages:put-message 'errsxt4 'french '"mauvais debut d'expression" 'defmessage)
(#:messages:put-message 'errsxt4 'english '"bad beginning of expression" 'defmessage)
'errsxt4
(#:messages:put-message 'errsxt5 'french '"symbole special trop long" 'defmessage)
(#:messages:put-message 'errsxt5 'english '"special symbol too long" 'defmessage)
'errsxt5
(#:messages:put-message 'errsxt6 'french '"mauvais package" 'defmessage)
(#:messages:put-message 'errsxt6 'english '"bad package" 'defmessage)
'errsxt6
(#:messages:put-message 'errsxt7 'french '"mauvaise construction pointee" 'defmessage)
(#:messages:put-message 'errsxt7 'english '"bad dotted pair construction" 'defmessage)
'errsxt7
(#:messages:put-message 'errsxt9 'french '"mauvaise liste arguments" 'defmessage)
(#:messages:put-message 'errsxt9 'english '"bad argument list" 'defmessage)
'errsxt9
(#:messages:put-message 'errsxt10 'french '"mauvaise valeur de splice-macro" 'defmessage)
(#:messages:put-message 'errsxt10 'english '"bad splice-macro" 'defmessage)
'errsxt10
(#:messages:put-message 'errsxt11 'french '"EOF durant un READ" 'defmessage)
(#:messages:put-message 'errsxt11 'english '"EOF during READ" 'defmessage)
'errsxt11
(#:messages:put-message 'errsxt12 'french '"mauvaise utilisation du BACKQUOTE" 'defmessage)
(#:messages:put-message 'errsxt12 'english '"bad use of BACKQUOTE" 'defmessage)
'errsxt12
(#:messages:put-message 'errmac4 'french '"instruction illegale" 'defmessage)
(#:messages:put-message 'errmac4 'english '"illegal instruction" 'defmessage)
'errmac4
(#:messages:put-message 'errmac8 'french '"exception flottante" 'defmessage)
(#:messages:put-message 'errmac8 'english '"floating point exception" 'defmessage)
'errmac8
(#:messages:put-message 'errmac10 'french '"erreur de bus" 'defmessage)
(#:messages:put-message 'errmac10 'english '"bus error" 'defmessage)
'errmac10
(#:messages:put-message 'errmac11 'french '"violation de segment" 'defmessage)
(#:messages:put-message 'errmac11 'english '"segmentation fault" 'defmessage)
'errmac11
(loader'((fentry printerror subr3)
(entry printerror subr3)
(push (cvalq #:system:b))
(mov a3 (cvalq #:system:b))
(push (cvalq #:system:m))
(mov a2 (cvalq #:system:m))
(push (cvalq #:system:f))
(mov a1 (cvalq #:system:f))
(push '3)
(push '(#:system:b #:system:m #:system:f))
(push (@ printerror))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push '"** ")
(push a1)
(push '" : ")
(bfsymb a2 102)
(mov a2 a1)
(jcall get-message-p)
(mov a1 a4)
(bfnil a4 103)
(mov (cvalq #:system:m) a1)
(jcall boundp)
(btnil a1 105)
(mov (cvalq #:system:m) a4)
(mov (cval a4) a4)
(bra 103)
105
(mov (cvalq #:system:m) a4)
(bra 103)
102
(mov a2 a4)
103
(push a4)
(push '" : ")
(cabne (cvalq #:system:m) 'errsxt 107)
(mov (cvalq #:system:b) a1)
(jcall numberp)
(btnil a1 107)
(push (@ 111))
(push (cvalq #:system:b))
(push '0)
(mov '2 a4)
(jmp >)
111
(eval ())
(btnil a1 109)
(push (@ 112))
(push (cvalq #:system:b))
(push '13)
(mov '2 a4)
(jmp <)
112
(eval ())
(btnil a1 109)
(mov (cvalq #:system:b) a1)
(cabne a1 '1 114)
(mov 'errsxt1 a1)
(bra 113)
114
(cabne a1 '2 115)
(mov 'errsxt2 a1)
(bra 113)
115
(cabne a1 '3 116)
(mov 'errsxt3 a1)
(bra 113)
116
(cabne a1 '4 117)
(mov 'errsxt4 a1)
(bra 113)
117
(cabne a1 '5 118)
(mov 'errsxt5 a1)
(bra 113)
118
(cabne a1 '6 119)
(mov 'errsxt6 a1)
(bra 113)
119
(cabne a1 '7 120)
(mov 'errsxt7 a1)
(bra 113)
120
(cabne a1 '9 121)
(mov 'errsxt9 a1)
(bra 113)
121
(cabne a1 '10 122)
(mov 'errsxt10 a1)
(bra 113)
122
(cabne a1 '11 123)
(mov 'errsxt11 a1)
(bra 113)
123
(cabne a1 '12 124)
(mov 'errsxt12 a1)
(bra 113)
124
(mov nil a1)
113
(jcall get-message)
(mov a1 a4)
(bra 108)
109
(mov (cvalq #:system:b) a4)
(bra 108)
107
(btnil (cvalq #:system:unixp) 125)
(cabne (cvalq #:system:m) 'errmac 125)
(mov (cvalq #:system:b) a1)
(jcall numberp)
(btnil a1 125)
(mov (cvalq #:system:b) a1)
(cabne a1 '4 128)
(mov 'errmac4 a1)
(jcall get-message)
(mov a1 a4)
(bra 108)
128
(cabne a1 '8 129)
(mov 'errmac8 a1)
(jcall get-message)
(mov a1 a4)
(bra 108)
129
(cabne a1 '10 130)
(mov 'errmac10 a1)
(jcall get-message)
(mov a1 a4)
(bra 108)
130
(cabne a1 '11 131)
(mov 'errmac11 a1)
(jcall get-message)
(mov a1 a4)
(bra 108)
131
(mov a1 a4)
(bra 108)
125
(mov (cvalq #:system:b) a4)
108
(push a4)
(mov '6 a4)
(jmp print)
101
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:f))
(mov (& 7) (cvalq #:system:m))
(mov (& 8) (cvalq #:system:b))
(adjstk '9)
(return)
))
(loader '((end)))
