(loader '((title |virevent.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'virbitmap)))
(setq #:sys-package:colon 'mouse)
(defvar #:mouse:event (if (boundp '#:mouse:event) #:mouse:event (#:event:make)))
(defvar #:mouse:event-mode (if (boundp '#:mouse:event-mode) #:mouse:event-mode 0))
(defvar #:mouse:x (when (boundp '#:mouse:x) #:mouse:x))
(defvar #:mouse:y (when (boundp '#:mouse:y) #:mouse:y))
(defvar #:mouse:state (when (boundp '#:mouse:state) #:mouse:state))
(defvar #:event:code (when (boundp '#:event:code) #:event:code))
(defvar #:event:x)
(defvar #:event:y)
(loader'((fentry which-window subr0)
(entry which-window subr0)
(bfnil (cvalq #:display:current-display) 102)
(mov (cvalq #:display:current-display) a3)
(mov '#:display:no-current-display a2)
(mov 'which-window a1)
(jcall error)
102
(push (@ 103))
(mov '0 a4)
(jmp read-mouse)
103
(eval ())
(hpxmov a1 '1 a1)
(return)
))
(loader'((entry parse-event subr1)
(push a1)
(hpxmov a1 '3 a4)
(mov a4 (cvalq #:event:x))
(hpxmov a1 '4 a3)
(mov a3 (cvalq #:event:y))
(hpxmov a1 '0 a1)
(cabne a1 'ascii-event 102)
(hpxmov (& 0) '2 a2)
(bra 101)
102
(cabeq a1 'move-event 104)
(cabne a1 'up-event 103)
104
(mov '257 a2)
(bra 101)
103
(cabeq a1 'down-event 106)
(cabne a1 'drag-event 105)
106
(mov '258 a2)
(bra 101)
105
(mov '256 a2)
101
(mov a2 (cvalq #:event:code))
(mov a2 a1)
(adjstk '1)
(return)
))
(loader'((entry parse-mouse subr1)
(hpxmov a1 '3 a4)
(mov a4 (cvalq #:mouse:x))
(hpxmov a1 '4 a3)
(mov a3 (cvalq #:mouse:y))
(hpxmov a1 '2 a2)
(mov a2 (cvalq #:mouse:state))
(mov a2 a1)
(return)
))
(loader'((fentry event-mode nsubr)
(entry event-mode nsubr)
(push a4)
(btnil (cvalq #:display:current-display) 101)
(cabne (& 0) '0 103)
(hpxmov (cvalq #:display:current-display) '5 a1)
(bra 102)
103
(push (@ 105))
(push 'event-mode)
(push (cvalq #:display:current-display))
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov '3 a4)
(jmp send)
105
(eval ())
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpmovx a4 (cvalq #:display:current-display) '5)
(mov a4 (cvalq #:mouse:event-mode))
(mov a4 a1)
(bra 102)
101
(mov nil a1)
102
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry eventp subr0)
(entry eventp subr0)
(btnil (cvalq #:display:current-display) 101)
(push (@ 103))
(push 'eventp)
(push (cvalq #:display:current-display))
(mov '2 a4)
(jmp send)
103
(eval ())
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry read-event nsubr)
(entry read-event nsubr)
(push a4)
(btnil (cvalq #:display:current-display) 101)
(cabne (& 0) '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 104)
103
(mov (cvalq #:mouse:event) a4)
104
(push a4)
(push (@ 105))
(push 'read-event)
(push (cvalq #:display:current-display))
(push a4)
(mov '3 a4)
(jmp send)
105
(eval ())
(mov (& 0) a1)
(call parse-event)
(mov (& 0) a1)
(adjstk '1)
(bra 102)
101
(mov nil a1)
102
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry peek-event nsubr)
(entry peek-event nsubr)
(push a4)
(btnil (cvalq #:display:current-display) 101)
(cabne (& 0) '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 104)
103
(mov (cvalq #:mouse:event) a4)
104
(push a4)
(push (@ 105))
(push 'peek-event)
(push (cvalq #:display:current-display))
(push a4)
(mov '3 a4)
(jmp send)
105
(eval ())
(mov (& 0) a1)
(call parse-event)
(mov (& 0) a1)
(adjstk '1)
(bra 102)
101
(mov nil a1)
102
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry local-read-event subr0)
(entry local-read-event subr0)
(btnil (cvalq #:display:current-display) 101)
(push (@ 103))
(push (cvalq #:mouse:event))
(mov '1 a4)
(jmp read-event)
103
(eval ())
(push (@ 104))
(push (@ 105))
(mov '0 a4)
(jmp current-window)
105
(eval ())
(push a1)
(push (cvalq #:event:x))
(push (cvalq #:event:y))
(push '#:event:x)
(push '#:event:y)
(mov '5 a4)
(jmp map-window)
104
(eval ())
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry flush-event subr0)
(entry flush-event subr0)
(btnil (cvalq #:display:current-display) 101)
(push (@ 103))
(push 'flush-event)
(push (cvalq #:display:current-display))
(mov '2 a4)
(jmp send)
103
(eval ())
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry add-event nsubr)
(entry add-event nsubr)
(push a4)
(btnil (cvalq #:display:current-display) 101)
(cabne (& 0) '1 103)
(push (@ 105))
(push 'add-event)
(push (cvalq #:display:current-display))
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov '3 a4)
(jmp send)
105
(eval ())
(bra 102)
103
(cabne (& 0) '3 106)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(hpmovx a4 (cvalq #:mouse:event) '3)
(mov (& 0) a4)
(plus '-1 a4)
(xspmov a4 a4)
(hpmovx a4 (cvalq #:mouse:event) '4)
(mov (& 0) a4)
(plus '-2 a4)
(xspmov a4 a4)
(hpmovx a4 (cvalq #:mouse:event) '0)
(push (@ 108))
(push 'add-event)
(push (cvalq #:display:current-display))
(push (cvalq #:mouse:event))
(mov '3 a4)
(jmp send)
108
(eval ())
(bra 102)
106
(mov nil a1)
(bra 102)
101
(mov nil a1)
102
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry grab-event subr1)
(entry grab-event subr1)
(push a1)
(jcall windowp)
(btnil a1 101)
(mov '#:image:rectangle:window a2)
(mov (& 0) a1)
(jcall typep)
(bfnil a1 104)
(mov (& 0) a3)
(mov '#:display:errnotawindow a2)
(mov 'grab-event a1)
(jcall error)
104
(push (@ 105))
(push 'grab-event)
(hpxmov (& 2) '12 a4)
(push a4)
(push (& 3))
(mov '3 a4)
(jmp send)
105
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
101
(btnil (cvalq #:display:current-display) 106)
(push (@ 108))
(push 'ungrab-event)
(push (cvalq #:display:current-display))
(mov '2 a4)
(jmp send)
108
(eval ())
(mov nil a1)
(adjstk '1)
(return)
106
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry ungrab-event subr0)
(entry ungrab-event subr0)
(btnil (cvalq #:display:current-display) 101)
(push (@ 103))
(push 'ungrab-event)
(push (cvalq #:display:current-display))
(mov '2 a4)
(jmp send)
103
(eval ())
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry itsoft-event subr0)
(entry itsoft-event subr0)
(btnil (cvalq #:display:current-display) 101)
(push (@ 103))
(push 'itsoft-event)
(push (cvalq #:display:current-display))
(mov '2 a4)
(jmp send)
103
(eval ())
(return)
101
(mov nil a1)
(return)
))
(loader'((fentry read-mouse nsubr)
(entry read-mouse nsubr)
(push a4)
(btnil (cvalq #:display:current-display) 101)
(cabne (& 0) '1 103)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a4)
(bra 104)
103
(mov (cvalq #:mouse:event) a4)
104
(push a4)
(push (@ 105))
(push 'read-mouse)
(push (cvalq #:display:current-display))
(push a4)
(mov '3 a4)
(jmp send)
105
(eval ())
(mov (& 0) a1)
(call parse-mouse)
(mov (& 0) a1)
(adjstk '1)
(bra 102)
101
(mov nil a1)
102
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry allow-event subr2)
(entry allow-event subr2)
(push a2)
(push a1)
(bfnil a1 102)
(mov a1 a3)
(mov '#:display:no-current-display a2)
(mov 'allow-event a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'allow-event a1)
(jcall error)
104
(btsymb (& 1) 107)
(mov (& 1) a3)
(mov 'errsym a2)
(mov 'allow-event a1)
(jcall error)
107
(push (@ 108))
(push 'allow-event)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
108
(eval ())
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry disallow-event subr2)
(entry disallow-event subr2)
(push a2)
(push a1)
(bfnil a1 102)
(mov a1 a3)
(mov '#:display:no-current-display a2)
(mov 'disallow-event a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'disallow-event a1)
(jcall error)
104
(btsymb (& 1) 107)
(mov (& 1) a3)
(mov 'errsym a2)
(mov 'disallow-event a1)
(jcall error)
107
(push (@ 108))
(push 'disallow-event)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
108
(eval ())
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry allowed-event-p subr2)
(entry allowed-event-p subr2)
(push a2)
(push a1)
(bfnil a1 102)
(mov a1 a3)
(mov '#:display:no-current-display a2)
(mov 'allowed-event-p a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'allowed-event-p a1)
(jcall error)
104
(btsymb (& 1) 107)
(mov (& 1) a3)
(mov 'errsym a2)
(mov 'allowed-event-p a1)
(jcall error)
107
(push (@ 110))
(push 'allowed-event-p)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
110
(eval ())
(btnil a1 108)
(mov (& 1) a1)
(adjstk '2)
(return)
108
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:event-mode nsubr)
(entry #:display:event-mode nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'event-mode a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:eventp nsubr)
(entry #:display:eventp nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'eventp a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:read-event nsubr)
(entry #:display:read-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'read-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:peek-event nsubr)
(entry #:display:peek-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'peek-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:flush-event nsubr)
(entry #:display:flush-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'flush-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:add-event nsubr)
(entry #:display:add-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'add-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:grab-event nsubr)
(entry #:display:grab-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'grab-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:ungrab-event nsubr)
(entry #:display:ungrab-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'ungrab-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:isoft-event nsubr)
(entry #:display:isoft-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'isoft-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:allow-event nsubr)
(entry #:display:allow-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'allow-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:disallow-event nsubr)
(entry #:display:disallow-event nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'disallow-event a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:allowed-event-p nsubr)
(entry #:display:allowed-event-p nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'allowed-event-p a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader'((fentry #:display:read-mouse nsubr)
(entry #:display:read-mouse nsubr)
(push a4)
(mov (& 0) a4)
(plus '0 a4)
(xspmov a4 a3)
(mov '#:display:not-yet-inplemented a2)
(mov 'read-mouse a1)
(jcall error)
(pop a4)
(adjstk a4)
(return)
))
(loader '((end)))
