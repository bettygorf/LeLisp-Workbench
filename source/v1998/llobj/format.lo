(loader '((title |format.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'format)))
(defvar #:sys-package:colon 'format)
(add-feature 'format)
(loader'((fentry prinf nsubr)
(entry prinf nsubr)
(cnbge a4 '1 101)
(mov 'prinf a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(btstrg (& 1) 103)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'prinf a1)
(jcall error)
103
(mov (& 1) a1)
(jcall pname)
(mov nil a3)
(mov (& 0) a2)
(call #:format:format)
(push a1)
104
(bfcons (& 0) 105)
(push (@ 106))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp princn)
106
(eval ())
(bra 104)
105
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((fentry printf nsubr)
(entry printf nsubr)
(cnbge a4 '1 101)
(mov 'printf a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(btstrg (& 1) 103)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'printf a1)
(jcall error)
103
(mov (& 1) a1)
(jcall pname)
(mov nil a3)
(mov (& 0) a2)
(call #:format:format)
(push a1)
104
(bfcons (& 0) 105)
(push (@ 106))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp princn)
106
(eval ())
(bra 104)
105
(adjstk '1)
(push (@ 107))
(mov '0 a4)
(jmp terpri)
107
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry format nsubr)
(entry format nsubr)
(cnbge a4 '2 101)
(mov 'format a1)
(mov '2 a2)
(jmp #:llcp:errwna)
101
(diff '2 a4)
(jcall #:llcp:nlist)
(push a1)
(btstrg (& 1) 103)
(mov (& 1) a3)
(mov 'errnsa a2)
(mov 'format a1)
(jcall error)
103
(mov (& 1) a1)
(jcall pname)
(mov nil a3)
(mov (& 0) a2)
(call #:format:format)
(push a1)
(bfnil (& 3) 104)
(adjstk '4)
(bra #:format:string)
104
(btfix (& 3) 108)
(cabne (& 3) 't 106)
108
(cabne (& 3) 't 110)
(mov nil (& 3))
110
(push (@ 111))
(mov '0 a4)
(jmp outchan)
111
(eval ())
(push a1)
(push (@ 112))
(push dlink)
(push prot)
(stack dlink)
(push (@ 114))
(push (& 8))
(mov '1 a4)
(jmp outchan)
114
(eval ())
(push (& 4))
115
(bfcons (& 0) 116)
(push (@ 117))
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov '1 a4)
(jmp princn)
117
(eval ())
(bra 115)
116
(adjstk '1)
(mov nil a4)
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 113) a3)
112
(push a3)
(push a2)
(push (@ 118))
(push (& 4))
(mov '1 a4)
(jmp outchan)
118
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
113
(eval ())
(adjstk '5)
(return)
106
(mov (& 3) a3)
(mov 'format a2)
(mov '"Format" a1)
(adjstk '4)
(jmp error)
))
(loader'((entry #:format:format subr3)
(push (cvalq #:format:r))
(mov a3 (cvalq #:format:r))
(push (cvalq #:format:args))
(mov a2 (cvalq #:format:args))
(push '2)
(push '(#:format:r #:format:args))
(push (@ #:format:format))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:format:l))
(mov a2 (cvalq #:format:l))
(push (cvalq #:format:f))
(mov a1 (cvalq #:format:f))
(push '2)
(push '(#:format:l #:format:f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 101))
(push 'format)
(push dlink)
(push tag)
(stack dlink)
(push (@ 102))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(call #:format:format1)
(mov (& 1) dlink)
(adjstk '4)
102
(eval ())
(mov (& 1) dlink)
(adjstk '4)
101
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:f))
(mov (& 7) (cvalq #:format:l))
(adjstk '8)
(mov (cvalq #:format:r) a1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:args))
(mov (& 7) (cvalq #:format:r))
(adjstk '8)
(return)
))
(loader'((entry #:format:format1 subr0)
(mov (cvalq #:format:f) a4)
(mov (cdr a4) (cvalq #:format:f))
(push (car a4))
(bfnil (& 0) 101)
(mov nil a1)
(mov 'format a2)
(jmp #:llcp:exit)
101
(cabne (& 0) '126 103)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '1)
(push (cvalq #:format:par-n))
(mov (& 1) (cvalq #:format:par-n))
(push (cvalq #:format:colon))
(mov (& 3) (cvalq #:format:colon))
(push (cvalq #:format:at-sign))
(mov (& 5) (cvalq #:format:at-sign))
(push (cvalq #:format:par7))
(mov (& 7) (cvalq #:format:par7))
(push (cvalq #:format:par6))
(mov (& 9) (cvalq #:format:par6))
(push (cvalq #:format:par5))
(mov (& 11) (cvalq #:format:par5))
(push (cvalq #:format:par4))
(mov (& 13) (cvalq #:format:par4))
(push (cvalq #:format:par3))
(mov (& 15) (cvalq #:format:par3))
(push (cvalq #:format:par2))
(mov (& 17) (cvalq #:format:par2))
(push (cvalq #:format:par1))
(mov (& 19) (cvalq #:format:par1))
(push '10)
(push '(#:format:par-n #:format:colon #:format:at-sign #:format:par7 #:format:par6 #:format:par5 #:format:par4 #:format:par3 #:format:par2 #:format:par1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:tilde-decode)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par1))
(mov (& 7) (cvalq #:format:par2))
(mov (& 8) (cvalq #:format:par3))
(mov (& 9) (cvalq #:format:par4))
(mov (& 10) (cvalq #:format:par5))
(mov (& 11) (cvalq #:format:par6))
(mov (& 12) (cvalq #:format:par7))
(mov (& 13) (cvalq #:format:at-sign))
(mov (& 14) (cvalq #:format:colon))
(mov (& 15) (cvalq #:format:par-n))
(adjstk '26)
(bra 102)
103
(push (& 0))
(push (@ 105))
(push (cvalq #:format:r))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
105
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:r))
102
(adjstk '1)
(bra #:format:format1)
))
(loader'((entry #:format:tilde-decode subr0)
(mov (cvalq #:format:f) a4)
(mov (cdr a4) (cvalq #:format:f))
(push (car a4))
(mov (& 0) a1)
(cabeq a1 '48 103)
(cabeq a1 '49 103)
(cabeq a1 '50 103)
(cabeq a1 '51 103)
(cabeq a1 '52 103)
(cabeq a1 '53 103)
(cabeq a1 '54 103)
(cabeq a1 '55 103)
(cabeq a1 '56 103)
(cabeq a1 '57 103)
(cabeq a1 '45 103)
(cabne a1 '43 102)
103
(push (@ 104))
(push 'par)
(push (cvalq #:format:par-n))
(mov '2 a4)
(jmp concat)
104
(eval ())
(mov a1 a2)
(mov 'format a1)
(jcall symbol)
(push a1)
(push (@ 105))
(push (& 2))
(mov '1 a4)
(jmp list)
105
(eval ())
(call #:format:read-n)
(pop a4)
(mov a1 (cval a4))
(adjstk '1)
(bra #:format:tilde-decode)
102
(cabne a1 '39 106)
(push (@ 107))
(push 'par)
(push (cvalq #:format:par-n))
(mov '2 a4)
(jmp concat)
107
(eval ())
(mov a1 a2)
(mov 'format a1)
(jcall symbol)
(mov (cvalq #:format:f) a4)
(mov (cdr a4) (cvalq #:format:f))
(mov (car a4) (cval a1))
(adjstk '1)
(bra #:format:tilde-decode)
106
(cabeq a1 '118 109)
(cabne a1 '86 108)
109
(push (@ 110))
(push 'par)
(push (cvalq #:format:par-n))
(mov '2 a4)
(jmp concat)
110
(eval ())
(mov a1 a2)
(mov 'format a1)
(jcall symbol)
(mov (cvalq #:format:l) a4)
(mov (cdr a4) (cvalq #:format:l))
(mov (car a4) (cval a1))
(adjstk '1)
(bra #:format:tilde-decode)
108
(cabne a1 '35 111)
(push (@ 112))
(push 'par)
(push (cvalq #:format:par-n))
(mov '2 a4)
(jmp concat)
112
(eval ())
(mov a1 a2)
(mov 'format a1)
(jcall symbol)
(push a1)
(mov (cvalq #:format:l) a1)
(jcall length)
(pop a4)
(mov a1 (cval a4))
(adjstk '1)
(bra #:format:tilde-decode)
111
(cabne a1 '44 113)
(mov (cvalq #:format:par-n) a1)
(jcall |1+|)
(mov a1 (cvalq #:format:par-n))
(adjstk '1)
(bra #:format:tilde-decode)
113
(cabne a1 '64 114)
(mov 't (cvalq #:format:at-sign))
(adjstk '1)
(bra #:format:tilde-decode)
114
(cabne a1 '58 115)
(mov 't (cvalq #:format:colon))
(adjstk '1)
(bra #:format:tilde-decode)
115
(cabne a1 '65 116)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-ascii)
116
(cabne a1 '83 117)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-sexpr)
117
(cabne a1 '68 118)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-decimal)
118
(cabne a1 '66 119)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-binary)
119
(cabne a1 '79 120)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-octal)
120
(cabne a1 '88 121)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-hexa)
121
(cabne a1 '82 122)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-radix)
122
(cabne a1 '80 123)
(adjstk '1)
(bra #:format:format-plural)
123
(cabne a1 '67 124)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-char)
124
(cabne a1 '69 125)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-e-float)
125
(cabne a1 '70 126)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-f-float)
126
(cabne a1 '71 127)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-g-float)
127
(cabne a1 '37 128)
(adjstk '1)
(bra #:format:format-nl)
128
(cabne a1 '10 129)
(adjstk '1)
(bra #:format:format-eol)
129
(cabne a1 '126 130)
(adjstk '1)
(bra #:format:format-tilde)
130
(cabne a1 '84 131)
(adjstk '1)
(bra #:format:format-tab)
131
(cabne a1 '42 132)
(adjstk '1)
(bra #:format:format-ignore)
132
(cabne a1 '63 133)
(adjstk '1)
(bra #:format:format-indirect)
133
(cabne a1 '91 134)
(adjstk '1)
(bra #:format:format-cond)
134
(cabne a1 '123 135)
(mov nil a1)
(adjstk '1)
(bra #:format:format-iter)
135
(cabne a1 '94 136)
(adjstk '1)
(bra #:format:format-hat)
136
(cabne a1 '93 137)
(mov '"]" a3)
(mov 'errfermant a2)
(mov '"Format" a1)
(adjstk '1)
(jmp error)
137
(cabne a1 '59 138)
(mov '";" a3)
(mov 'errfermant a2)
(mov '"Format" a1)
(adjstk '1)
(jmp error)
138
(cabne a1 '125 139)
(mov '"}" a3)
(mov 'errfermant a2)
(mov '"Format" a1)
(adjstk '1)
(jmp error)
139
(cabne a1 '41 140)
(mov '")" a3)
(mov 'errfermant a2)
(mov '"Format" a1)
(adjstk '1)
(jmp error)
140
(cabne a1 '62 141)
(mov '">" a3)
(mov 'errfermant a2)
(mov '"Format" a1)
(adjstk '1)
(jmp error)
141
(push (@ 143))
(push '126)
(push a1)
(mov '2 a4)
(jmp list)
143
(eval ())
(jcall string)
(mov a1 a3)
(mov 'format a2)
(mov '"Format" a1)
(adjstk '1)
(jmp error)
))
(loader'((entry #:format:pad nsubr)
(mov (& 3) a1)
(jcall length)
(push a1)
(push (@ 103))
(push a1)
(push (& 5))
(mov '2 a4)
(jmp >=)
103
(eval ())
(btnil a1 101)
(mov (& 4) a1)
(adjstk '5)
(return)
101
(btnil (& 2) 104)
(push (@ 106))
(push (& 5))
(push (@ 107))
(push (& 6))
(push (& 4))
(mov '2 a4)
(jmp |-|)
107
(eval ())
(mov (& 3) a2)
(jcall makelist)
(push a1)
(mov '2 a4)
(jmp nconc)
106
(eval ())
(adjstk '5)
(return)
104
(push (@ 108))
(push (@ 109))
(push (& 5))
(push (& 3))
(mov '2 a4)
(jmp |-|)
109
(eval ())
(mov (& 2) a2)
(jcall makelist)
(push a1)
(push (& 6))
(mov '2 a4)
(jmp nconc)
108
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:format:pad-4 nsubr)
(push (cvalq #:format:colinc))
(mov (& 2) (cvalq #:format:colinc))
(push (cvalq #:format:padchar))
(mov (& 4) (cvalq #:format:padchar))
(push (cvalq #:format:side))
(mov (& 6) (cvalq #:format:side))
(push (cvalq #:format:wide))
(mov (& 8) (cvalq #:format:wide))
(push (cvalq #:format:val))
(mov (& 10) (cvalq #:format:val))
(push '5)
(push '(#:format:colinc #:format:padchar #:format:side #:format:wide #:format:val))
(push (@ #:format:pad-4))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (cvalq #:format:side) 101)
(push (@ 103))
(push (cvalq #:format:val))
(mov (cvalq #:format:padchar) a2)
(mov (& 13) a1)
(jcall makelist)
(push a1)
(mov '2 a4)
(jmp nconc)
103
(eval ())
(mov a1 a4)
(bra 102)
101
(push (@ 104))
(mov (cvalq #:format:padchar) a2)
(mov (& 12) a1)
(jcall makelist)
(push a1)
(push (cvalq #:format:val))
(mov '2 a4)
(jmp nconc)
104
(eval ())
(mov a1 a4)
102
(mov a4 (cvalq #:format:val))
(mov a4 a1)
(jcall length)
(call #:format:pad-4-loop)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:val))
(mov (& 7) (cvalq #:format:wide))
(mov (& 8) (cvalq #:format:side))
(mov (& 9) (cvalq #:format:padchar))
(mov (& 10) (cvalq #:format:colinc))
(adjstk '17)
(return)
))
(loader'((entry #:format:pad-4-loop subr1)
(push (@ 103))
(push (cvalq #:format:wide))
(push a1)
(mov '2 a4)
(jmp <=)
103
(eval ())
(btnil a1 101)
(mov (cvalq #:format:val) a1)
(return)
101
(btnil (cvalq #:format:side) 104)
(push (@ 106))
(push (cvalq #:format:val))
(mov (cvalq #:format:padchar) a2)
(mov (cvalq #:format:colinc) a1)
(jcall makelist)
(push a1)
(mov '2 a4)
(jmp nconc)
106
(eval ())
(mov a1 a4)
(bra 105)
104
(push (@ 107))
(mov (cvalq #:format:padchar) a2)
(mov (cvalq #:format:colinc) a1)
(jcall makelist)
(push a1)
(push (cvalq #:format:val))
(mov '2 a4)
(jmp nconc)
107
(eval ())
(mov a1 a4)
105
(mov a4 (cvalq #:format:val))
(mov a4 a1)
(jcall length)
(bra #:format:pad-4-loop)
))
(loader'((entry #:format:format-pad subr3)
(push (@ 101))
(push (cvalq #:format:r))
(bfnil a2 102)
(mov a1 a4)
(bra 103)
102
(push (@ 104))
(push a1)
(push a2)
(push (cvalq #:format:at-sign))
(btnil a3 105)
(mov a3 a4)
(bra 106)
105
(mov '32 a4)
106
(push a4)
(mov '4 a4)
(bra #:format:pad)
104
(eval ())
(mov a1 a4)
103
(push a4)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(mov a1 (cvalq #:format:r))
(return)
))
(loader'((entry #:format:format-ascii subr1)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil (cvalq #:format:par3) 103)
(btnil (cvalq #:format:par4) 101)
103
(push (@ 104))
(push (cvalq #:format:r))
(push (@ 105))
(jcall explode)
(push a1)
(btnil (cvalq #:format:par1) 106)
(mov (cvalq #:format:par1) a4)
(bra 107)
106
(mov '0 a4)
107
(push a4)
(push (cvalq #:format:at-sign))
(btnil (cvalq #:format:par4) 108)
(mov (cvalq #:format:par4) a4)
(bra 109)
108
(mov '32 a4)
109
(push a4)
(btnil (cvalq #:format:par2) 110)
(mov (cvalq #:format:par2) a4)
(bra 111)
110
(mov '1 a4)
111
(push a4)
(btnil (cvalq #:format:par3) 112)
(mov (cvalq #:format:par3) a4)
(bra 113)
112
(mov '0 a4)
113
(push a4)
(mov '6 a4)
(bra #:format:pad-4)
105
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
104
(eval ())
(mov a1 (cvalq #:format:r))
(bra 102)
101
(jcall explode)
(mov (cvalq #:format:par2) a3)
(mov (cvalq #:format:par1) a2)
(call #:format:format-pad)
102
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(return)
))
(loader'((entry #:format:format-sexpr subr1)
(push 't)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil (cvalq #:format:par3) 103)
(btnil (cvalq #:format:par4) 101)
103
(push (@ 104))
(push (cvalq #:format:r))
(push (@ 105))
(jcall explode)
(push a1)
(btnil (cvalq #:format:par1) 106)
(mov (cvalq #:format:par1) a4)
(bra 107)
106
(mov '0 a4)
107
(push a4)
(push (cvalq #:format:at-sign))
(btnil (cvalq #:format:par4) 108)
(mov (cvalq #:format:par4) a4)
(bra 109)
108
(mov '32 a4)
109
(push a4)
(btnil (cvalq #:format:par2) 110)
(mov (cvalq #:format:par2) a4)
(bra 111)
110
(mov '1 a4)
111
(push a4)
(btnil (cvalq #:format:par3) 112)
(mov (cvalq #:format:par3) a4)
(bra 113)
112
(mov '0 a4)
113
(push a4)
(mov '6 a4)
(bra #:format:pad-4)
105
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
104
(eval ())
(mov a1 (cvalq #:format:r))
(bra 102)
101
(jcall explode)
(mov (cvalq #:format:par2) a3)
(mov (cvalq #:format:par1) a2)
(call #:format:format-pad)
102
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(return)
))
(loader'((entry #:format:format-decimal subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push '10)
(mov '1 a4)
(jmp obase)
104
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(jcall explode)
(mov (cvalq #:format:par2) a3)
(mov (cvalq #:format:par1) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 105))
(push (& 4))
(mov '1 a4)
(jmp obase)
105
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:format:format-binary subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push '2)
(mov '1 a4)
(jmp obase)
104
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(jcall explode)
(mov (cvalq #:format:par2) a3)
(mov (cvalq #:format:par1) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 105))
(push (& 4))
(mov '1 a4)
(jmp obase)
105
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:format:format-octal subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push '8)
(mov '1 a4)
(jmp obase)
104
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(jcall explode)
(mov (cvalq #:format:par2) a3)
(mov (cvalq #:format:par1) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 105))
(push (& 4))
(mov '1 a4)
(jmp obase)
105
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:format:format-hexa subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp obase)
101
(eval ())
(push a1)
(push (@ 102))
(push dlink)
(push prot)
(stack dlink)
(push (@ 104))
(push '16)
(mov '1 a4)
(jmp obase)
104
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(jcall explode)
(mov (cvalq #:format:par2) a3)
(mov (cvalq #:format:par1) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 103) a3)
102
(push a3)
(push a2)
(push (@ 105))
(push (& 4))
(mov '1 a4)
(jmp obase)
105
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
103
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:format:format-radix subr1)
(push a1)
(btfix (cvalq #:format:par1) 102)
(push (@ 103))
(push '"~")
(push (cvalq #:format:par1))
(push '"R")
(mov '3 a4)
(jmp catenate)
103
(eval ())
(mov a1 a3)
(mov 'errsxt a2)
(mov '"Format" a1)
(jcall error)
102
(push (@ 104))
(mov '0 a4)
(jmp obase)
104
(eval ())
(push a1)
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(push (cvalq #:format:par1))
(mov '1 a4)
(jmp obase)
107
(eval ())
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 12) a1)
(jcall explode)
(mov (cvalq #:format:par3) a3)
(mov (cvalq #:format:par2) a2)
(call #:format:format-pad)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 108))
(push (& 4))
(mov '1 a4)
(jmp obase)
108
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(adjstk '2)
(return)
))
(loader'((entry #:format:format-plural subr0)
(bfnil (cvalq #:format:colon) 101)
(mov (cvalq #:format:l) a4)
(mov (cdr a4) (cvalq #:format:l))
(mov (car a4) a4)
(bra 102)
101
(push (@ 103))
(mov (cvalq #:format:args) a1)
(jcall length)
(push a1)
(mov (cvalq #:format:l) a1)
(jcall length)
(push a1)
(push '1)
(mov '3 a4)
(jmp |-|)
103
(eval ())
(mov (cvalq #:format:args) a2)
(jcall nth)
(mov a1 a4)
102
(cabne a4 '1 104)
(btnil (cvalq #:format:at-sign) 106)
(mov '121 a2)
(mov (cvalq #:format:r) a1)
(jcall nconc1)
(mov a1 (cvalq #:format:r))
(return)
106
(mov nil a1)
(return)
104
(push (@ 108))
(push (cvalq #:format:r))
(btnil (cvalq #:format:at-sign) 109)
(push (@ 111))
(push '105)
(push '101)
(push '115)
(mov '3 a4)
(jmp list)
111
(eval ())
(mov a1 a3)
(bra 110)
109
(push (@ 112))
(push '115)
(mov '1 a4)
(jmp list)
112
(eval ())
(mov a1 a3)
110
(push a3)
(mov '2 a4)
(jmp nconc)
108
(eval ())
(mov a1 (cvalq #:format:r))
(return)
))
(loader'((entry #:format:format-char subr1)
(push a1)
(jcall asciip)
(bfnil a1 102)
(mov (& 0) a3)
(mov 'erroob a2)
(mov '"Format" a1)
(jcall error)
102
(btnil (cvalq #:format:at-sign) 103)
(btnil (cvalq #:format:colon) 103)
(mov '"~@:C" a3)
(mov 'errsxt a2)
(mov '"Format" a1)
(adjstk '1)
(jmp error)
103
(btnil (cvalq #:format:at-sign) 105)
(push (@ 107))
(push (cvalq #:format:r))
(push (@ 110))
(push (& 3))
(push '127)
(mov '2 a4)
(jmp =)
110
(eval ())
(btnil a1 108)
(push (@ 111))
(push '(35 92 100 101 108))
(push nil)
(mov '2 a4)
(jmp append)
111
(eval ())
(mov a1 a4)
(bra 109)
108
(push (@ 114))
(push (& 3))
(push '32)
(mov '2 a4)
(jmp >)
114
(eval ())
(btnil a1 112)
(push (@ 115))
(push '35)
(push '47)
(push (& 5))
(mov '3 a4)
(jmp list)
115
(eval ())
(mov a1 a4)
(bra 109)
112
(push (@ 118))
(push (& 3))
(push '32)
(mov '2 a4)
(jmp =)
118
(eval ())
(btnil a1 116)
(push (@ 119))
(push '(35 92 115 112))
(push nil)
(mov '2 a4)
(jmp append)
119
(eval ())
(mov a1 a4)
(bra 109)
116
(push (@ 120))
(push '35)
(push '94)
(mov '64 a4)
(lor (& 5) a4)
(push a4)
(mov '3 a4)
(jmp list)
120
(eval ())
(mov a1 a4)
109
(push a4)
(mov '2 a4)
(jmp nconc)
107
(eval ())
(mov a1 (cvalq #:format:r))
(adjstk '1)
(return)
105
(btnil (cvalq #:format:colon) 121)
(mov (cvalq #:format:char-names) a2)
(mov (& 0) a1)
(jcall cassq)
(btnil a1 123)
(push (@ 125))
(push (cvalq #:format:r))
(jcall pname)
(push a1)
(mov '2 a4)
(jmp nconc)
125
(eval ())
(mov a1 a4)
(bra 124)
123
(mov (& 0) a2)
(mov (cvalq #:format:r) a1)
(jcall nconc1)
(mov a1 a4)
124
(mov a4 (cvalq #:format:r))
(mov a4 a1)
(adjstk '1)
(return)
121
(mov (& 0) a2)
(mov (cvalq #:format:r) a1)
(jcall nconc1)
(mov a1 (cvalq #:format:r))
(adjstk '1)
(return)
))
(defvar #:format:char-names ())
((lambda (i) (until (> i 31) (newl #:format:char-names (cons i (concat 'control- (ascii (logor 64 i))))) (setq i (|+| i 1))) (progn)) 0)
(setq #:format:char-names (cons '(0 . null) #:format:char-names))
(setq #:format:char-names (cons '(7 . bell) #:format:char-names))
(setq #:format:char-names (cons '(8 . back-space) #:format:char-names))
(setq #:format:char-names (cons '(9 . tab) #:format:char-names))
(setq #:format:char-names (cons '(10 . line-feed) #:format:char-names))
(setq #:format:char-names (cons '(13 . return) #:format:char-names))
(setq #:format:char-names (cons '(27 . escape) #:format:char-names))
(setq #:format:char-names (cons '(32 . space) #:format:char-names))
(setq #:format:char-names (cons '(127 . delete) #:format:char-names))
(loader'((entry #:format:float-pad nsubr)
(mov (& 0) a1)
(jcall length)
(push a1)
(push (@ 101))
(push (cvalq #:format:r))
(bfnil (& 6) 102)
(mov (& 3) a4)
(bra 103)
102
(btnil (& 5) 104)
(push (@ 106))
(push (& 7))
(push a1)
(mov '2 a4)
(jmp <)
106
(eval ())
(btnil a1 104)
(mov (& 5) a2)
(mov (& 6) a1)
(jcall makelist)
(mov a1 a4)
(bra 103)
104
(push (@ 107))
(push (@ 108))
(push (& 8))
(push (& 5))
(mov '2 a4)
(jmp |-|)
108
(eval ())
(btnil (& 5) 109)
(mov (& 5) a2)
(bra 110)
109
(mov '32 a2)
110
(jcall makelist)
(push a1)
(push (& 5))
(mov '2 a4)
(jmp nconc)
107
(eval ())
(mov a1 a4)
103
(push a4)
(mov '2 a4)
(jmp nconc)
101
(eval ())
(mov a1 (cvalq #:format:r))
(adjstk '5)
(return)
))
(loader'((entry #:format:float-digits subr1)
(push a1)
(cnbge a1 '0 102)
(mov '0 a4)
(diff a1 a4)
(mov a4 (& 0))
102
(push (cvalq #:format:f))
(push (@ 103))
(push '0)
(push '1)
(push (cvalq #:format:exp))
(mov '3 a4)
(jmp |-|)
103
(eval ())
(mov a1 a2)
(mov '10 a1)
(jcall power)
(pop a4)
(ftimes a1 a4)
(push a4)
(push (@ 104))
(push (& 2))
(mov '1 a4)
(jmp |-|)
104
(eval ())
(mov a1 a2)
(mov '10 a1)
(jcall power)
(mov '0.5 a4)
(ftimes a1 a4)
(mov (& 0) a3)
(fplus a4 a3)
(push a3)
(push nil)
(mov a3 a1)
(jcall fix)
(cabne a1 '1 105)
(mov (cvalq #:format:exp) a1)
(jcall |1+|)
(mov a1 (cvalq #:format:exp))
(bra 110)
105
(push (@ 109))
(mov (& 2) a1)
(jcall fix)
(push a1)
(mov (& 4) a1)
(jcall fix)
(push a1)
(mov '2 a4)
(jmp >)
109
(eval ())
(btnil a1 110)
(mov (& 2) (& 1))
110
(push (@ 112))
(push (& 4))
(push '0)
(mov '2 a4)
(jmp >)
112
(eval ())
(btnil a1 111)
(push (@ 113))
(push (& 2))
(push '10000.)
(mov '2 a4)
(jmp *)
113
(eval ())
(jcall fix)
(push a1)
(push (@ 114))
(push (& 2))
(jcall explode)
(call #:format:next-digits)
(push a1)
(mov '2 a4)
(jmp nconc)
114
(eval ())
(mov a1 (& 1))
(push (@ 115))
(push (@ 116))
(push (& 4))
(push '10000.)
(mov '2 a4)
(jmp *)
116
(eval ())
(push a1)
(push (& 2))
(mov '2 a4)
(jmp |-|)
115
(eval ())
(mov a1 (& 2))
(push (@ 117))
(push (& 5))
(push '4)
(mov '2 a4)
(jmp |-|)
117
(eval ())
(mov a1 (& 4))
(adjstk '1)
(bra 110)
111
(mov (& 0) a1)
(adjstk '4)
(return)
))
(loader'((entry #:format:next-digits subr1)
(push a1)
(jcall length)
(push (@ 101))
(push (@ 102))
(push '4)
(push a1)
(mov '2 a4)
(jmp |-|)
102
(eval ())
(mov '48 a2)
(jcall makelist)
(push a1)
(push (& 2))
(mov '2 a4)
(jmp nconc)
101
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:format:format-f-float subr1)
(push (cvalq #:format:arg))
(mov a1 (cvalq #:format:arg))
(push '1)
(push '(#:format:arg))
(push (@ #:format:format-f-float))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall numberp)
(bfnil a1 101)
(push (cvalq #:format:par1))
(push (cvalq #:format:par5))
(push (cvalq #:format:par2))
(mov (& 1) (cvalq #:format:par2))
(push (cvalq #:format:par1))
(mov (& 3) (cvalq #:format:par1))
(push '2)
(push '(#:format:par2 #:format:par1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:arg) a1)
(call #:format:format-decimal)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par1))
(mov (& 7) (cvalq #:format:par2))
(adjstk '10)
(bra 102)
101
(btfloat (cvalq #:format:arg) 104)
(mov (cvalq #:format:arg) a1)
(jcall float)
(mov a1 (cvalq #:format:arg))
104
(btnil (cvalq #:format:par3) 106)
(push (@ 107))
(push (cvalq #:format:arg))
(mov (cvalq #:format:par3) a2)
(mov '10 a1)
(jcall power)
(push a1)
(mov '2 a4)
(jmp *)
107
(eval ())
(mov a1 (cvalq #:format:arg))
106
(push (@ 108))
(push (cvalq #:format:par1))
(push (cvalq #:format:par4))
(push (cvalq #:format:par5))
(push (@ 111))
(push (cvalq #:format:arg))
(push '0)
(mov '2 a4)
(jmp <)
111
(eval ())
(btnil a1 109)
(push (@ 112))
(push '45)
(mov '1 a4)
(jmp list)
112
(eval ())
(mov a1 a4)
(bra 110)
109
(btnil (cvalq #:format:at-sign) 113)
(push (@ 115))
(push '43)
(mov '1 a4)
(jmp list)
115
(eval ())
(mov a1 a4)
(bra 110)
113
(mov nil a4)
110
(push a4)
(mov (cvalq #:format:arg) a1)
(jcall abs)
(push (cvalq #:format:f))
(mov a1 (cvalq #:format:f))
(push (cvalq #:format:rr))
(mov (& 2) (cvalq #:format:rr))
(push '2)
(push '(#:format:f #:format:rr))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil (cvalq #:format:par1) 118)
(btnil (cvalq #:format:par2) 116)
118
(push (@ 121))
(push a1)
(push '0)
(mov '2 a4)
(jmp =)
121
(eval ())
(btnil a1 119)
(mov '0 a4)
(bra 120)
119
(mov (cvalq #:format:f) a1)
(jcall log10)
(jcall fix)
(mov a1 a4)
120
(push (cvalq #:format:exp))
(mov a4 (cvalq #:format:exp))
(push '1)
(push '(#:format:exp))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:par1) a3)
(bfnil a3 122)
(mov '100 a3)
122
(push (cvalq #:format:par1))
(mov a3 (cvalq #:format:par1))
(push '1)
(push '(#:format:par1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:par2) a2)
(bfnil a2 123)
(push (@ 124))
(push '0)
(push (@ 125))
(push a3)
(push '2)
(push (@ 126))
(push a4)
(push '0)
(mov '2 a4)
(jmp max)
126
(eval ())
(push a1)
(bfnil (cvalq #:format:at-sign) 129)
(push (@ 130))
(push (cvalq #:format:arg))
(push '0)
(mov '2 a4)
(jmp <)
130
(eval ())
(btnil a1 127)
129
(mov '1 a1)
(bra 128)
127
(mov '0 a1)
128
(push a1)
(mov '4 a4)
(jmp |-|)
125
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
124
(eval ())
(mov a1 a2)
123
(push (cvalq #:format:par2))
(mov a2 (cvalq #:format:par2))
(push '1)
(push '(#:format:par2))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 131))
(push a2)
(push (cvalq #:format:exp))
(push '1)
(mov '3 a4)
(jmp |+|)
131
(eval ())
(call #:format:float-digits)
(push (cvalq #:format:digits))
(mov a1 (cvalq #:format:digits))
(push '1)
(push '(#:format:digits))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:float-f)
(mov (cvalq #:format:rr) a4)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:digits))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par2))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par1))
(adjstk '7)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:exp))
(adjstk '7)
(bra 117)
116
(mov (cvalq #:format:arg) a1)
(jcall explode)
(mov a1 a4)
117
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:rr))
(mov (& 7) (cvalq #:format:f))
(adjstk '9)
(push a4)
(mov '4 a4)
(bra #:format:float-pad)
108
(eval ())
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:arg))
(adjstk '7)
(return)
))
(loader'((entry #:format:float-f subr0)
(push (@ 103))
(push (cvalq #:format:exp))
(push '0)
(mov '2 a4)
(jmp <)
103
(eval ())
(btnil a1 101)
(push (@ 104))
(push (@ 105))
(push '-1)
(push (cvalq #:format:exp))
(mov '2 a4)
(jmp |-|)
105
(eval ())
(push a1)
(push (cvalq #:format:par2))
(mov '2 a4)
(jmp min)
104
(eval ())
(push a1)
(push (@ 109))
(push (@ 110))
(push (cvalq #:format:par1))
(push (cvalq #:format:par2))
(mov '2 a4)
(jmp |-|)
110
(eval ())
(push a1)
(push '1)
(mov '2 a4)
(jmp =)
109
(eval ())
(btnil a1 108)
(bfnil (cvalq #:format:at-sign) 108)
(push (@ 111))
(push (cvalq #:format:arg))
(push '0)
(mov '2 a4)
(jmp >=)
111
(eval ())
(bfnil a1 107)
108
(push '48)
(push (@ 112))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
112
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
107
(push '46)
(push (@ 113))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
113
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(mov (cvalq #:format:f) a1)
(jcall zerop)
(btnil a1 114)
(mov (& 0) a4)
(bra 117)
116
(push a4)
(push '48)
(push (@ 118))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
118
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(pop a4)
117
(sobgez a4 116)
(mov 't a1)
(adjstk '1)
(return)
114
(mov (cvalq #:format:par2) a2)
(mov (& 0) a1)
(jcall <>)
(btnil a1 119)
(mov (& 0) a4)
(bra 122)
121
(push a4)
(push '48)
(push (@ 123))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
123
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(pop a4)
122
(sobgez a4 121)
(push (@ 126))
(push (cvalq #:format:par2))
(push (& 2))
(mov '2 a4)
(jmp |-|)
126
(eval ())
(bra 125)
124
(push a1)
(mov (cvalq #:format:digits) a4)
(mov (cdr a4) (cvalq #:format:digits))
(push (car a4))
(push (@ 127))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
127
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(pop a1)
125
(sobgez a1 124)
(mov 't a1)
(adjstk '1)
(return)
119
(mov (& 0) a4)
(bra 129)
128
(push a4)
(push '48)
(push (@ 130))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
130
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(pop a4)
129
(sobgez a4 128)
(mov 't a1)
(adjstk '1)
(return)
101
(mov (cvalq #:format:exp) a1)
(jcall |1+|)
(bra 132)
131
(push a1)
(mov (cvalq #:format:digits) a4)
(mov (cdr a4) (cvalq #:format:digits))
(push (car a4))
(push (@ 133))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
133
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(pop a1)
132
(sobgez a1 131)
(push '46)
(push (@ 134))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
134
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(mov (cvalq #:format:par2) a4)
(bra 136)
135
(push a4)
(mov (cvalq #:format:digits) a4)
(mov (cdr a4) (cvalq #:format:digits))
(push (car a4))
(push (@ 137))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
137
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(pop a4)
136
(sobgez a4 135)
(mov 't a1)
(return)
))
(loader'((entry #:format:format-e-float subr1)
(push a1)
(jcall numberp)
(bfnil a1 101)
(push (cvalq #:format:par1))
(push (cvalq #:format:par6))
(push (cvalq #:format:par2))
(mov (& 1) (cvalq #:format:par2))
(push (cvalq #:format:par1))
(mov (& 3) (cvalq #:format:par1))
(push '2)
(push '(#:format:par2 #:format:par1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 10) a1)
(call #:format:format-decimal)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par1))
(mov (& 7) (cvalq #:format:par2))
(adjstk '11)
(return)
101
(btfloat (& 0) 104)
(mov (& 0) a1)
(jcall float)
(mov a1 (& 0))
104
(bfnil (cvalq #:format:par4) 106)
(mov '1 (cvalq #:format:par4))
106
(push (@ 107))
(push (cvalq #:format:par1))
(push (cvalq #:format:par5))
(push (cvalq #:format:par6))
(push (@ 110))
(push (& 5))
(push '0)
(mov '2 a4)
(jmp <)
110
(eval ())
(btnil a1 108)
(push (@ 111))
(push '45)
(mov '1 a4)
(jmp list)
111
(eval ())
(mov a1 a4)
(bra 109)
108
(btnil (cvalq #:format:at-sign) 112)
(push (@ 114))
(push '43)
(mov '1 a4)
(jmp list)
114
(eval ())
(mov a1 a4)
(bra 109)
112
(mov nil a4)
109
(push a4)
(mov (& 5) a1)
(jcall abs)
(push (cvalq #:format:f))
(mov a1 (cvalq #:format:f))
(push (cvalq #:format:rr))
(mov (& 2) (cvalq #:format:rr))
(push '2)
(push '(#:format:f #:format:rr))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil (cvalq #:format:par1) 117)
(bfnil (cvalq #:format:par2) 117)
(btnil (cvalq #:format:par3) 115)
117
(push (@ 120))
(push a1)
(push '0)
(mov '2 a4)
(jmp =)
120
(eval ())
(btnil a1 118)
(mov '0 a4)
(bra 119)
118
(mov (cvalq #:format:f) a1)
(jcall log10)
(jcall floor)
(mov a1 a4)
119
(mov (cvalq #:format:par1) a3)
(bfnil a3 121)
(mov '100 a3)
121
(push nil)
(push nil)
(push nil)
(push nil)
(push (cvalq #:format:par1))
(mov a3 (cvalq #:format:par1))
(push (cvalq #:format:exp))
(mov a4 (cvalq #:format:exp))
(push (cvalq #:format:exp-r))
(mov (& 4) (cvalq #:format:exp-r))
(push '3)
(push '(#:format:par1 #:format:exp #:format:exp-r))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 122))
(push a4)
(push (cvalq #:format:par4))
(push '-1)
(mov '3 a4)
(jmp |-|)
122
(eval ())
(call #:format:float-exp)
(mov (cvalq #:format:exp) (& 12))
(mov (cvalq #:format:exp-r) a1)
(jcall length)
(mov a1 (& 9))
(push (@ 125))
(push a1)
(push (cvalq #:format:par1))
(mov '2 a4)
(jmp =)
125
(eval ())
(btnil a1 123)
(mov (cvalq #:format:exp-r) a4)
(bra 124)
123
(push (@ 126))
(push (cvalq #:format:par1))
(push (& 11))
(mov (cvalq #:format:rr) a1)
(jcall length)
(push a1)
(mov '3 a4)
(jmp |-|)
126
(eval ())
(call #:format:float-e)
(mov (cvalq #:format:exp-r) (& 11))
(mov (& 11) a4)
(mov (cdr a4) (& 11))
(cnbge (& 12) (cvalq #:format:exp) 128)
(mov (& 11) a1)
(jcall implode)
(plus '1 a1)
(jcall explode)
(push a1)
(cabeq '45 (car a1) 130)
(mov a1 a2)
(mov '43 a1)
(jcall cons)
(mov a1 (& 0))
130
(mov (cdr a1) a3)
(mov (car a1) a2)
(mov (& 12) a1)
(jcall rplac)
(adjstk '1)
128
(push (@ 131))
(push (cvalq #:format:rr))
(push (cvalq #:format:exp-r))
(mov '2 a4)
(jmp nconc)
131
(eval ())
(mov a1 a4)
124
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:exp-r))
(mov (& 7) (cvalq #:format:exp))
(mov (& 8) (cvalq #:format:par1))
(adjstk '13)
(bra 116)
115
(mov (& 13) a1)
(jcall explode)
(mov a1 a4)
116
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:rr))
(mov (& 7) (cvalq #:format:f))
(adjstk '9)
(push a4)
(mov '4 a4)
(bra #:format:float-pad)
107
(eval ())
(adjstk '1)
(return)
))
(loader'((entry #:format:float-exp subr1)
(push a1)
(mov (cvalq #:format:par7) a4)
(bfnil a4 101)
(mov '101 a4)
101
(push (@ 102))
(push (cvalq #:format:exp-r))
(mov a4 a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
102
(eval ())
(mov a1 (cvalq #:format:exp-r))
(push (@ 105))
(push (& 1))
(push '0)
(mov '2 a4)
(jmp >=)
105
(eval ())
(btnil a1 103)
(mov '43 a4)
(bra 104)
103
(mov '45 a4)
104
(push (@ 106))
(push (cvalq #:format:exp-r))
(mov a4 a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
106
(eval ())
(mov a1 (cvalq #:format:exp-r))
(mov (& 0) a1)
(jcall abs)
(jcall pname)
(push a1)
(jcall length)
(push a1)
(btnil (cvalq #:format:par5) 107)
(btnil (cvalq #:format:par3) 107)
(push (@ 109))
(push (cvalq #:format:par3))
(push a1)
(mov '2 a4)
(jmp <)
109
(eval ())
(btnil a1 107)
(mov (cvalq #:format:par5) a2)
(mov (cvalq #:format:par1) a1)
(jcall makelist)
(mov a1 (cvalq #:format:exp-r))
(adjstk '3)
(return)
107
(push (@ 110))
(push (cvalq #:format:exp-r))
(btnil (cvalq #:format:par3) 111)
(push (@ 113))
(push (cvalq #:format:par3))
(push (& 4))
(mov '2 a4)
(jmp |-|)
113
(eval ())
(mov '48 a2)
(jcall makelist)
(mov a1 a4)
(bra 112)
111
(mov nil a4)
112
(push a4)
(push (& 4))
(mov '3 a4)
(jmp nconc)
110
(eval ())
(mov a1 (cvalq #:format:exp-r))
(adjstk '3)
(return)
))
(loader'((entry #:format:float-e subr1)
(push (cvalq #:format:r-length))
(mov a1 (cvalq #:format:r-length))
(push '1)
(push '(#:format:r-length))
(push (@ #:format:float-e))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil (cvalq #:format:par2) 102)
(push (@ 103))
(push a1)
(push '2)
(mov '2 a4)
(jmp |-|)
103
(eval ())
(mov a1 (cvalq #:format:par2))
102
(mov (cvalq #:format:par4) a1)
(jcall zerop)
(btnil a1 104)
(push (@ 106))
(push (cvalq #:format:par2))
(push '0)
(mov '2 a4)
(jmp max)
106
(eval ())
(mov a1 (cvalq #:format:par2))
(call #:format:float-digits)
(push (cvalq #:format:digits))
(mov a1 (cvalq #:format:digits))
(push '1)
(push '(#:format:digits))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:par2) a3)
(mov '0 a2)
(mov '0 a1)
(call #:format:float-e-1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:digits))
(adjstk '7)
(bra 105)
104
(push (@ 109))
(push (cvalq #:format:par4))
(push '0)
(mov '2 a4)
(jmp >)
109
(eval ())
(btnil a1 107)
(push (@ 110))
(push (cvalq #:format:par2))
(mov (cvalq #:format:par4) a1)
(jcall |1-|)
(push a1)
(mov '2 a4)
(jmp max)
110
(eval ())
(mov a1 (cvalq #:format:par2))
(jcall |1+|)
(call #:format:float-digits)
(push (cvalq #:format:digits))
(mov a1 (cvalq #:format:digits))
(push '1)
(push '(#:format:digits))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (cvalq #:format:par4))
(push (@ 111))
(push (cvalq #:format:par2))
(push '-1)
(push (cvalq #:format:par4))
(mov '3 a4)
(jmp |-|)
111
(eval ())
(mov a1 a3)
(mov '0 a2)
(pop a1)
(call #:format:float-e-1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:digits))
(adjstk '7)
(bra 105)
107
(push (@ 112))
(push (cvalq #:format:par2))
(push (@ 113))
(push '1)
(push (cvalq #:format:par4))
(mov '2 a4)
(jmp |-|)
113
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
112
(eval ())
(mov a1 (cvalq #:format:par2))
(push (@ 114))
(push a1)
(push (cvalq #:format:par4))
(mov '2 a4)
(jmp |+|)
114
(eval ())
(call #:format:float-digits)
(push (cvalq #:format:digits))
(mov a1 (cvalq #:format:digits))
(push '1)
(push '(#:format:digits))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:par4) a1)
(jcall abs)
(push a1)
(push (@ 115))
(push (cvalq #:format:par2))
(push (cvalq #:format:par4))
(mov '2 a4)
(jmp |+|)
115
(eval ())
(mov a1 a3)
(pop a2)
(mov '0 a1)
(call #:format:float-e-1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:digits))
(adjstk '7)
105
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:r-length))
(adjstk '7)
(return)
))
(loader'((entry #:format:float-e-1 subr3)
(push a3)
(push a2)
(push a1)
(bra 102)
101
(push a1)
(mov (cvalq #:format:digits) a4)
(mov (cdr a4) (cvalq #:format:digits))
(push (car a4))
(push (@ 103))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
103
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(pop a1)
102
(sobgez a1 101)
(mov (& 0) a1)
(jcall zerop)
(btnil a1 105)
(push (cvalq #:format:r-length))
(push (@ 106))
(push '1)
(push (& 4))
(push (& 6))
(mov '3 a4)
(jmp |+|)
106
(eval ())
(mov a1 a2)
(pop a1)
(jcall <>)
(btnil a1 105)
(push '48)
(push (@ 107))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
107
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
105
(push '46)
(push (@ 108))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
108
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(push (@ 111))
(push (& 2))
(push '0)
(mov '2 a4)
(jmp >)
111
(eval ())
(btnil a1 110)
(push (@ 112))
(push (cvalq #:format:rr))
(mov '48 a2)
(mov (& 3) a1)
(jcall makelist)
(push a1)
(mov '2 a4)
(jmp nconc)
112
(eval ())
(mov a1 (cvalq #:format:rr))
110
(mov (& 2) a4)
(bra 114)
113
(push a4)
(mov (cvalq #:format:digits) a4)
(mov (cdr a4) (cvalq #:format:digits))
(push (car a4))
(push (@ 115))
(push (cvalq #:format:rr))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
115
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:rr))
(pop a4)
114
(sobgez a4 113)
(mov 't a1)
(adjstk '3)
(return)
))
(loader'((entry #:format:format-g-float subr1)
(push a1)
(jcall numberp)
(bfnil a1 101)
(push (cvalq #:format:par1))
(push (cvalq #:format:par6))
(push (cvalq #:format:par2))
(mov (& 1) (cvalq #:format:par2))
(push (cvalq #:format:par1))
(mov (& 3) (cvalq #:format:par1))
(push '2)
(push '(#:format:par2 #:format:par1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 10) a1)
(call #:format:format-decimal)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par1))
(mov (& 7) (cvalq #:format:par2))
(adjstk '11)
(return)
101
(btfloat (& 0) 104)
(mov (& 0) a1)
(jcall float)
(mov a1 (& 0))
104
(mov (& 0) a1)
(jcall zerop)
(btnil a1 105)
(mov '0 a4)
(bra 106)
105
(mov (& 0) a1)
(jcall abs)
(jcall log10)
(jcall floor)
(jcall |1+|)
(mov a1 a4)
106
(push a4)
(bfnil (cvalq #:format:par3) 107)
(mov '4 a3)
(bra 108)
107
(push (@ 109))
(push (cvalq #:format:par3))
(push '2)
(mov '2 a4)
(jmp |+|)
109
(eval ())
(mov a1 a3)
108
(push a3)
(bfnil (cvalq #:format:par1) 110)
(mov '0 a4)
(bra 111)
110
(push (@ 112))
(push (cvalq #:format:par1))
(push a3)
(mov '2 a4)
(jmp |-|)
112
(eval ())
(mov a1 a4)
111
(push a4)
(push (@ 113))
(push a4)
(push '2)
(mov '2 a4)
(jmp |-|)
113
(eval ())
(btnil (cvalq #:format:par2) 114)
(mov (cvalq #:format:par2) a4)
(bra 115)
114
(push (@ 116))
(push a1)
(push (@ 117))
(push (& 5))
(push '7)
(mov '2 a4)
(jmp min)
117
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
116
(eval ())
(mov a1 a4)
115
(push a4)
(push (@ 118))
(push a4)
(push (& 5))
(mov '2 a4)
(jmp |-|)
118
(eval ())
(push a1)
(push (@ 122))
(push a1)
(push '0)
(mov '2 a4)
(jmp <)
122
(eval ())
(bfnil a1 121)
(push (@ 123))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp >)
123
(eval ())
(btnil a1 119)
121
(mov (& 5) a1)
(adjstk '6)
(bra #:format:format-e-float)
119
(push (& 2))
(push (& 1))
(push nil)
(push (cvalq #:format:par5))
(push (cvalq #:format:par6))
(push (cvalq #:format:par5))
(mov (& 1) (cvalq #:format:par5))
(push (cvalq #:format:par4))
(mov (& 3) (cvalq #:format:par4))
(push (cvalq #:format:par3))
(mov (& 5) (cvalq #:format:par3))
(push (cvalq #:format:par2))
(mov (& 7) (cvalq #:format:par2))
(push (cvalq #:format:par1))
(mov (& 9) (cvalq #:format:par1))
(push '5)
(push '(#:format:par5 #:format:par4 #:format:par3 #:format:par2 #:format:par1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (& 21) a1)
(call #:format:format-f-float)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par1))
(mov (& 7) (cvalq #:format:par2))
(mov (& 8) (cvalq #:format:par3))
(mov (& 9) (cvalq #:format:par4))
(mov (& 10) (cvalq #:format:par5))
(adjstk '16)
(push (@ 124))
(push (cvalq #:format:r))
(mov '32 a2)
(mov (& 5) a1)
(jcall makelist)
(push a1)
(mov '2 a4)
(jmp nconc)
124
(eval ())
(mov a1 (cvalq #:format:r))
(adjstk '6)
(return)
))
(loader'((entry #:format:format-nl subr0)
(bfnil (cvalq #:format:par1) 102)
(mov '1 (cvalq #:format:par1))
102
(push (@ 103))
(push (cvalq #:format:r))
(mov '13 a2)
(mov (cvalq #:format:par1) a1)
(jcall makelist)
(push a1)
(mov '10 a2)
(mov (cvalq #:format:par1) a1)
(jcall makelist)
(push a1)
(push nil)
104
(bfcons (& 2) 105)
(bfcons (& 1) 105)
(push (@ 106))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(push (car a4))
(mov '2 a4)
(jmp list)
106
(eval ())
(mov (& 0) a2)
(jcall nreconc)
(mov a1 (& 0))
(bra 104)
105
(mov (& 0) a1)
(jcall nreverse)
(adjstk '3)
(push a1)
(mov '2 a4)
(jmp nconc)
103
(eval ())
(mov a1 (cvalq #:format:r))
(return)
))
(loader'((entry #:format:format-eol subr0)
(btnil (cvalq #:format:at-sign) 101)
(btnil (cvalq #:format:colon) 101)
(mov '"~@:#\LF" a3)
(mov 'errsxt a2)
(mov '"Format" a1)
(jmp error)
101
(btnil (cvalq #:format:at-sign) 103)
(mov '10 a2)
(mov (cvalq #:format:r) a1)
(jcall nconc1)
(mov a1 (cvalq #:format:r))
105
(push (@ 107))
(mov (cvalq #:format:f) a4)
(push (car a4))
(mov '1 a4)
(jmp typecn)
107
(eval ())
(cabne a1 'csep 106)
(mov (cvalq #:format:f) a4)
(mov (cdr a4) (cvalq #:format:f))
(bra 105)
106
(mov nil a1)
(return)
103
(mov (cvalq #:format:colon) a1)
(bfnil a1 29999)
109
(push (@ 111))
(mov (cvalq #:format:f) a4)
(push (car a4))
(mov '1 a4)
(jmp typecn)
111
(eval ())
(cabne a1 'csep 110)
(mov (cvalq #:format:f) a4)
(mov (cdr a4) (cvalq #:format:f))
(bra 109)
110
(mov nil a1)
(return)
29999
(return)
))
(loader'((entry #:format:format-tilde subr0)
(bfnil (cvalq #:format:par1) 102)
(mov '1 (cvalq #:format:par1))
102
(push (@ 103))
(push (cvalq #:format:r))
(mov '126 a2)
(mov (cvalq #:format:par1) a1)
(jcall makelist)
(push a1)
(mov '2 a4)
(jmp nconc)
103
(eval ())
(mov a1 (cvalq #:format:r))
(return)
))
(loader'((entry #:format:format-tab subr0)
(push (cvalq #:format:r))
101
(mov (& 0) a2)
(mov '10 a1)
(jcall memq)
(btnil a1 102)
(mov (& 0) a2)
(mov '10 a1)
(jcall memq)
(mov (cdr a1) (& 0))
(bra 101)
102
(mov (& 0) a1)
(jcall length)
(mov a1 (& 0))
(bfnil (cvalq #:format:par1) 104)
(mov '1 (cvalq #:format:par1))
104
(bfnil (cvalq #:format:par2) 106)
(mov '1 (cvalq #:format:par2))
106
(btnil (cvalq #:format:at-sign) 107)
(mov '0 a4)
(bra 108)
107
(mov (cvalq #:format:par1) a4)
108
(push nil)
(push nil)
(push a4)
(btnil (cvalq #:format:at-sign) 109)
(mov (cvalq #:format:par1) (& 2))
(push (@ 111))
(push a1)
(push (cvalq #:format:par1))
(mov '2 a4)
(jmp |+|)
111
(eval ())
(mov a1 (& 1))
(bra 110)
109
(push (@ 114))
(push a1)
(push (cvalq #:format:par1))
(mov '2 a4)
(jmp <)
114
(eval ())
(btnil a1 112)
(push (@ 115))
(push (cvalq #:format:par1))
(push (& 5))
(mov '2 a4)
(jmp |-|)
115
(eval ())
(mov a1 (& 2))
(mov (cvalq #:format:par1) (& 1))
(bra 110)
112
(mov '0 (& 2))
(mov (& 3) (& 1))
110
(push (@ 116))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp |-|)
116
(eval ())
(mov (cvalq #:format:par2) a2)
(jcall modulo)
(push a1)
(jcall zerop)
(bfnil a1 118)
(push (@ 119))
(push (& 4))
(push (@ 120))
(push (cvalq #:format:par2))
(push (& 4))
(mov '2 a4)
(jmp |-|)
120
(eval ())
(push a1)
(mov '2 a4)
(jmp |+|)
119
(eval ())
(mov a1 (& 3))
118
(adjstk '1)
(push (@ 121))
(push (cvalq #:format:r))
(mov '32 a2)
(mov (& 4) a1)
(jcall makelist)
(push a1)
(mov '2 a4)
(jmp nconc)
121
(eval ())
(mov a1 (cvalq #:format:r))
(adjstk '4)
(return)
))
(loader'((entry #:format:format-ignore subr0)
(bfnil (cvalq #:format:par1) 102)
(btnil (cvalq #:format:at-sign) 103)
(mov '0 a4)
(bra 104)
103
(mov '1 a4)
104
(mov a4 (cvalq #:format:par1))
102
(btnil (cvalq #:format:at-sign) 105)
(btnil (cvalq #:format:colon) 105)
(mov '"~@:*" a3)
(mov 'errsxt a2)
(mov '"Format" a1)
(jmp error)
105
(btnil (cvalq #:format:at-sign) 107)
(mov (cvalq #:format:args) a2)
(mov (cvalq #:format:par1) a1)
(jcall nthcdr)
(mov a1 (cvalq #:format:l))
(return)
107
(btnil (cvalq #:format:colon) 109)
(mov (cvalq #:format:args) a1)
(jcall length)
(push a1)
(mov (cvalq #:format:l) a1)
(jcall length)
(push (@ 111))
(push (& 1))
(push a1)
(push (cvalq #:format:par1))
(mov '3 a4)
(jmp |-|)
111
(eval ())
(mov (cvalq #:format:args) a2)
(jcall nthcdr)
(mov a1 (cvalq #:format:l))
(adjstk '1)
(return)
109
(mov (cvalq #:format:l) a2)
(mov (cvalq #:format:par1) a1)
(jcall nthcdr)
(mov a1 (cvalq #:format:l))
(return)
))
(loader'((entry #:format:format-indirect subr0)
(mov (cvalq #:format:l) a4)
(mov (cdr a4) (cvalq #:format:l))
(push (car a4))
(mov (& 0) a1)
(jcall pname)
(push (cvalq #:format:format))
(mov a1 (cvalq #:format:format))
(push '1)
(push '(#:format:format))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btstrg (& 7) 102)
(mov (& 7) a3)
(mov 'errnsa a2)
(mov '"Format" a1)
(jcall error)
102
(push (@ 103))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(btnil (cvalq #:format:at-sign) 104)
(call #:format:format-ind-at)
(bra 105)
104
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(call #:format:format-ind-list)
105
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:format))
(adjstk '8)
(return)
))
(loader'((entry #:format:format-ind-at subr0)
(push (cvalq #:format:format))
(push (cvalq #:format:f))
(mov (& 1) (cvalq #:format:f))
(push '1)
(push '(#:format:f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov (car a1) a1)
(call #:format:format-ind-at1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:f))
(adjstk '8)
(return)
))
(loader'((entry #:format:format-ind-at1 subr1)
(push a1)
(btnil a1 102)
(mov nil a1)
(bra 103)
102
(mov 't a1)
103
(bfnil a1 101)
(cabne (& 0) '126 104)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '1)
(push (cvalq #:format:par-n))
(mov (& 1) (cvalq #:format:par-n))
(push (cvalq #:format:colon))
(mov (& 3) (cvalq #:format:colon))
(push (cvalq #:format:at-sign))
(mov (& 5) (cvalq #:format:at-sign))
(push (cvalq #:format:par7))
(mov (& 7) (cvalq #:format:par7))
(push (cvalq #:format:par6))
(mov (& 9) (cvalq #:format:par6))
(push (cvalq #:format:par5))
(mov (& 11) (cvalq #:format:par5))
(push (cvalq #:format:par4))
(mov (& 13) (cvalq #:format:par4))
(push (cvalq #:format:par3))
(mov (& 15) (cvalq #:format:par3))
(push (cvalq #:format:par2))
(mov (& 17) (cvalq #:format:par2))
(push (cvalq #:format:par1))
(mov (& 19) (cvalq #:format:par1))
(push '10)
(push '(#:format:par-n #:format:colon #:format:at-sign #:format:par7 #:format:par6 #:format:par5 #:format:par4 #:format:par3 #:format:par2 #:format:par1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:tilde-decode)
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov (car a1) a1)
(call #:format:format-ind-at1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par1))
(mov (& 7) (cvalq #:format:par2))
(mov (& 8) (cvalq #:format:par3))
(mov (& 9) (cvalq #:format:par4))
(mov (& 10) (cvalq #:format:par5))
(mov (& 11) (cvalq #:format:par6))
(mov (& 12) (cvalq #:format:par7))
(mov (& 13) (cvalq #:format:at-sign))
(mov (& 14) (cvalq #:format:colon))
(mov (& 15) (cvalq #:format:par-n))
(adjstk '27)
(return)
104
(push (& 0))
(push (@ 106))
(push (cvalq #:format:r))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
106
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:r))
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:format-ind-at1)
101
(adjstk '1)
(return)
))
(loader'((entry #:format:format-ind-list subr1)
(push (cvalq #:format:args))
(mov a1 (cvalq #:format:args))
(push '1)
(push '(#:format:args))
(push (@ #:format:format-ind-list))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall listp)
(bfnil a1 102)
(mov (cvalq #:format:args) a3)
(mov 'errnla a2)
(mov '"Format" a1)
(jcall error)
102
(push (cvalq #:format:format))
(push (cvalq #:format:args))
(push (cvalq #:format:l))
(mov (& 1) (cvalq #:format:l))
(push (cvalq #:format:f))
(mov (& 3) (cvalq #:format:f))
(push '2)
(push '(#:format:l #:format:f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 103))
(push 'format)
(push dlink)
(push tag)
(stack dlink)
(push (@ 104))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(call #:format:format1)
(mov (& 1) dlink)
(adjstk '4)
104
(eval ())
(mov (& 1) dlink)
(adjstk '4)
103
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:f))
(mov (& 7) (cvalq #:format:l))
(adjstk '10)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:args))
(adjstk '7)
(return)
))
(loader'((entry #:format:format-cond subr0)
(btnil (cvalq #:format:at-sign) 101)
(btnil (cvalq #:format:colon) 101)
(mov '"~@:[" a3)
(mov 'errsxt a2)
(mov '"Format" a1)
(jmp error)
101
(btnil (cvalq #:format:at-sign) 103)
(mov (cvalq #:format:l) a4)
(mov (car a4) (cvalq #:format:par1))
(bfnil (cvalq #:format:par1) 105)
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov nil a3)
(mov '0 a2)
(mov (car a1) a1)
(call #:format:search-cond)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(return)
105
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov nil a3)
(mov '0 a2)
(mov (car a1) a1)
(call #:format:search-cond)
(push (cvalq #:format:f))
(mov a1 (cvalq #:format:f))
(push '1)
(push '(#:format:f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 107))
(push 'format)
(push dlink)
(push tag)
(stack dlink)
(call #:format:format1)
(mov (& 1) dlink)
(adjstk '4)
107
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:f))
(adjstk '7)
(return)
103
(btnil (cvalq #:format:colon) 108)
(mov (cvalq #:format:l) a4)
(mov (car a4) (cvalq #:format:par1))
(mov (cdr a4) (cvalq #:format:l))
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(btnil (cvalq #:format:par1) 110)
(mov '1 a2)
(bra 111)
110
(mov '0 a2)
111
(mov nil a3)
(mov (car a1) a1)
(call #:format:search-cond)
(push (cvalq #:format:f))
(mov a1 (cvalq #:format:f))
(push '1)
(push '(#:format:f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 112))
(push 'format)
(push dlink)
(push tag)
(stack dlink)
(call #:format:format1)
(mov (& 1) dlink)
(adjstk '4)
112
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:f))
(adjstk '7)
(return)
108
(bfnil (cvalq #:format:par1) 114)
(mov (cvalq #:format:l) a4)
(mov (car a4) (cvalq #:format:par1))
(mov (cdr a4) (cvalq #:format:l))
114
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov nil a3)
(mov (cvalq #:format:par1) a2)
(mov (car a1) a1)
(call #:format:search-cond)
(push (cvalq #:format:f))
(mov a1 (cvalq #:format:f))
(push '1)
(push '(#:format:f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 115))
(push 'format)
(push dlink)
(push tag)
(stack dlink)
(call #:format:format1)
(mov (& 1) dlink)
(adjstk '4)
115
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:f))
(adjstk '7)
(return)
))
(loader'((entry #:format:search-cond subr3)
(push a3)
(push a2)
(push a1)
(bfnil a1 102)
(mov '"~[..." a3)
(mov 'errsxt a2)
(mov '"Format" a1)
(jcall error)
102
(mov (& 1) a1)
(jcall zerop)
(btnil a1 103)
(mov (& 0) a1)
(cabne a1 '126 106)
(mov (cvalq #:format:f) a4)
(mov (cdr a4) (cvalq #:format:f))
(push (car a4))
(mov (& 0) a1)
(cabne a1 '() 108)
(mov (cvalq #:format:f) a3)
(mov '#:format:format-cond a2)
(mov '"Format" a1)
(adjstk '4)
(jmp error)
108
(cabne a1 '93 109)
(mov (& 3) a1)
(adjstk '4)
(return)
109
(cabne a1 '59 110)
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov nil a3)
(mov '-1 a2)
(mov (car a1) a1)
(call #:format:search-cond)
(mov (& 3) a1)
(adjstk '4)
(return)
110
(cabne a1 '58 111)
(mov (cvalq #:format:f) a4)
(cabne (car a4) '59 112)
(mov (cdr a4) (cvalq #:format:f))
(mov nil a3)
(mov '-1 a2)
(mov (car a4) a1)
(call #:format:search-cond)
(mov (& 3) a1)
(adjstk '4)
(return)
112
(mov (cdr a4) (cvalq #:format:f))
(push (car a4))
(push (@ 114))
(push (& 5))
(push (@ 115))
(push (& 5))
(push a1)
(mov '2 a4)
(jmp list)
115
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
114
(eval ())
(mov a1 a3)
(mov (& 3) a2)
(pop a1)
(adjstk '4)
(bra #:format:search-cond)
111
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(push (car a1))
(push (@ 117))
(push (& 5))
(push (@ 118))
(push (& 5))
(push (& 5))
(mov '2 a4)
(jmp list)
118
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
117
(eval ())
(mov a1 a3)
(mov (& 3) a2)
(pop a1)
(adjstk '4)
(bra #:format:search-cond)
106
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(push (car a1))
(mov (& 1) a2)
(mov (& 3) a1)
(jcall nconc1)
(mov a1 a3)
(mov (& 2) a2)
(pop a1)
(adjstk '3)
(bra #:format:search-cond)
103
(cabeq (& 0) '126 120)
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov nil a3)
(mov (& 1) a2)
(mov (car a1) a1)
(adjstk '3)
(bra #:format:search-cond)
120
(mov (cvalq #:format:f) a4)
(mov (car a4) (& 0))
(mov (cdr a4) (cvalq #:format:f))
(mov (& 0) a1)
(cabne a1 '() 123)
(mov '"~[..." a3)
(mov 'errsxt a2)
(mov '"Format" a1)
(adjstk '3)
(jmp error)
123
(cabne a1 '93 124)
(mov nil a1)
(adjstk '3)
(return)
124
(cabne a1 '59 125)
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(push (car a1))
(mov (& 2) a1)
(jcall |1-|)
(mov nil a3)
(mov a1 a2)
(pop a1)
(adjstk '3)
(bra #:format:search-cond)
125
(cabne a1 '58 126)
(mov (cvalq #:format:f) a4)
(mov (car a4) (& 0))
(mov (cdr a4) (cvalq #:format:f))
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(cabne (& 0) '59 127)
(mov '0 a2)
(bra 128)
127
(mov (& 1) a2)
128
(mov nil a3)
(mov (car a1) a1)
(adjstk '3)
(bra #:format:search-cond)
126
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov nil a3)
(mov (& 1) a2)
(mov (car a1) a1)
(adjstk '3)
(bra #:format:search-cond)
))
(loader'((entry #:format:format-iter subr1)
(push (cvalq #:format:iter-colon))
(mov a1 (cvalq #:format:iter-colon))
(push '1)
(push '(#:format:iter-colon))
(push (@ #:format:format-iter))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (cvalq #:format:par1) 101)
(mov (cvalq #:format:par1) a4)
(bra 102)
101
(mov '-1 a4)
102
(push a4)
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov nil a3)
(mov nil a2)
(mov (car a1) a1)
(call #:format:search-iter)
(push nil)
(push nil)
(push (cvalq #:format:format))
(mov a1 (cvalq #:format:format))
(push (cvalq #:format:f))
(mov (& 2) (cvalq #:format:f))
(push (cvalq #:format:iter-n-first))
(mov (& 4) (cvalq #:format:iter-n-first))
(push (cvalq #:format:iter-n))
(mov (& 6) (cvalq #:format:iter-n))
(push '4)
(push '(#:format:format #:format:f #:format:iter-n-first #:format:iter-n))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(mov (cvalq #:format:iter-n) a1)
(jcall zerop)
(bfnil a1 103)
(bfnil (cvalq #:format:format) 106)
(mov (cvalq #:format:l) a4)
(mov (cdr a4) (cvalq #:format:l))
(mov (car a4) (cvalq #:format:format))
(btstrg (cvalq #:format:format) 108)
(mov (cvalq #:format:format) a3)
(mov 'errnsa a2)
(mov '"Format" a1)
(jcall error)
108
(mov (cvalq #:format:format) a1)
(jcall pname)
(mov a1 (cvalq #:format:format))
106
(mov (cvalq #:format:iter-n) (cvalq #:format:iter-n-first))
(mov (cvalq #:format:format) (cvalq #:format:f))
(btnil (cvalq #:format:at-sign) 109)
(btnil (cvalq #:format:colon) 109)
(push (@ 111))
(push 'colon-hat)
(push dlink)
(push tag)
(stack dlink)
(mov (cvalq #:format:l) a1)
(call #:format:iter-colon)
(mov (& 1) dlink)
(adjstk '4)
111
(eval ())
(bra 104)
109
(btnil (cvalq #:format:at-sign) 112)
(push (@ 114))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(call #:format:iter)
(mov (& 1) dlink)
(adjstk '4)
114
(eval ())
(bra 104)
112
(btnil (cvalq #:format:colon) 115)
(push (@ 117))
(push 'colon-hat)
(push dlink)
(push tag)
(stack dlink)
(mov (cvalq #:format:l) a1)
(mov (cdr a1) (cvalq #:format:l))
(mov (car a1) a1)
(call #:format:iter-colon)
(mov (& 1) dlink)
(adjstk '4)
117
(eval ())
(bra 104)
115
(mov (cvalq #:format:l) a4)
(mov (cdr a4) (cvalq #:format:l))
(push (car a4))
(push (car a4))
(push (cvalq #:format:l))
(mov (& 1) (cvalq #:format:l))
(push (cvalq #:format:args))
(mov (& 3) (cvalq #:format:args))
(push '2)
(push '(#:format:l #:format:args))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 118))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(call #:format:iter)
(mov (& 1) dlink)
(adjstk '4)
118
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:args))
(mov (& 7) (cvalq #:format:l))
(adjstk '10)
(bra 104)
103
(mov nil a1)
104
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:iter-n))
(mov (& 7) (cvalq #:format:iter-n-first))
(mov (& 8) (cvalq #:format:f))
(mov (& 9) (cvalq #:format:format))
(adjstk '13)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:iter-colon))
(adjstk '7)
(return)
))
(loader'((entry #:format:search-iter subr3)
(push a3)
(push a1)
(bfnil a1 101)
(mov '"~}" a3)
(mov 'errsxt a2)
(mov '"Format" a1)
(adjstk '2)
(jmp error)
101
(cabne a1 '126 103)
(mov (cvalq #:format:f) a4)
(mov (car a4) (& 1))
(mov (cdr a4) (cvalq #:format:f))
(cabne (& 1) '125 105)
(mov a2 a1)
(adjstk '2)
(return)
105
(cabne (& 1) '58 107)
(mov (cvalq #:format:f) a4)
(cabne (car a4) '125 107)
(mov 't (cvalq #:format:iter-colon))
(mov (cvalq #:format:f) a4)
(mov (cdr a4) (cvalq #:format:f))
(mov a2 a1)
(adjstk '2)
(return)
107
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(push (car a1))
(push (@ 109))
(push a2)
(push (@ 110))
(push (& 4))
(push (& 6))
(mov '2 a4)
(jmp list)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp nconc)
109
(eval ())
(mov nil a3)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:format:search-iter)
103
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(push (car a1))
(push a2)
(mov (& 2) a2)
(pop a1)
(jcall nconc1)
(mov nil a3)
(mov a1 a2)
(pop a1)
(adjstk '2)
(bra #:format:search-iter)
))
(loader'((entry #:format:iter subr0)
(bfnil (cvalq #:format:format) 102)
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
102
(bfnil (cvalq #:format:l) 104)
(bfnil (cvalq #:format:iter-colon) 104)
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
104
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov (car a1) a1)
(bra #:format:iter-loop)
))
(loader'((entry #:format:iter-loop subr1)
(push a1)
(mov (cvalq #:format:iter-n) a1)
(jcall zerop)
(btnil a1 101)
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
101
(bfnil (& 0) 103)
(bfnil (cvalq #:format:l) 106)
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
106
(mov (cvalq #:format:iter-n) a1)
(jcall |1-|)
(mov a1 (cvalq #:format:iter-n))
(mov (cvalq #:format:format) (cvalq #:format:f))
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov (car a1) a1)
(call #:format:iter-loop)
(bra 102)
103
(cabne (& 0) '126 107)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push '1)
(push (cvalq #:format:par-n))
(mov (& 1) (cvalq #:format:par-n))
(push (cvalq #:format:colon))
(mov (& 3) (cvalq #:format:colon))
(push (cvalq #:format:at-sign))
(mov (& 5) (cvalq #:format:at-sign))
(push (cvalq #:format:par7))
(mov (& 7) (cvalq #:format:par7))
(push (cvalq #:format:par6))
(mov (& 9) (cvalq #:format:par6))
(push (cvalq #:format:par5))
(mov (& 11) (cvalq #:format:par5))
(push (cvalq #:format:par4))
(mov (& 13) (cvalq #:format:par4))
(push (cvalq #:format:par3))
(mov (& 15) (cvalq #:format:par3))
(push (cvalq #:format:par2))
(mov (& 17) (cvalq #:format:par2))
(push (cvalq #:format:par1))
(mov (& 19) (cvalq #:format:par1))
(push '10)
(push '(#:format:par-n #:format:colon #:format:at-sign #:format:par7 #:format:par6 #:format:par5 #:format:par4 #:format:par3 #:format:par2 #:format:par1))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:tilde-decode)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:par1))
(mov (& 7) (cvalq #:format:par2))
(mov (& 8) (cvalq #:format:par3))
(mov (& 9) (cvalq #:format:par4))
(mov (& 10) (cvalq #:format:par5))
(mov (& 11) (cvalq #:format:par6))
(mov (& 12) (cvalq #:format:par7))
(mov (& 13) (cvalq #:format:at-sign))
(mov (& 14) (cvalq #:format:colon))
(mov (& 15) (cvalq #:format:par-n))
(adjstk '26)
(bra 102)
107
(push (& 0))
(push (@ 109))
(push (cvalq #:format:r))
(mov (& 2) a1)
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
109
(eval ())
(adjstk '1)
(mov a1 (cvalq #:format:r))
102
(mov (cvalq #:format:f) a1)
(mov (cdr a1) (cvalq #:format:f))
(mov (car a1) a1)
(adjstk '1)
(bra #:format:iter-loop)
))
(loader'((entry #:format:iter-colon subr1)
(push (cvalq #:format:sub-args))
(mov a1 (cvalq #:format:sub-args))
(push '1)
(push '(#:format:sub-args))
(push (@ #:format:iter-colon))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil (cvalq #:format:format) 102)
(mov nil a1)
(mov 'colon-hat a2)
(jmp #:llcp:exit)
102
(mov (cvalq #:format:sub-args) a1)
(mov (cdr a1) (cvalq #:format:sub-args))
(mov (car a1) a2)
(mov (car a1) a1)
(call #:format:iter-colon-loop)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:sub-args))
(adjstk '7)
(return)
))
(loader'((entry #:format:iter-colon-loop subr2)
(push (cvalq #:format:l))
(mov a2 (cvalq #:format:l))
(push (cvalq #:format:args))
(mov a1 (cvalq #:format:args))
(push '2)
(push '(#:format:l #:format:args))
(push (@ #:format:iter-colon-loop))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil a2 102)
(bfnil (cvalq #:format:sub-args) 102)
(push (@ 104))
(push (cvalq #:format:iter-n))
(push (cvalq #:format:iter-n-first))
(mov '2 a4)
(jmp =)
104
(eval ())
(btnil a1 103)
(bfnil (cvalq #:format:iter-colon) 102)
103
(mov nil a1)
(mov 'colon-hat a2)
(jmp #:llcp:exit)
102
(mov (cvalq #:format:iter-n) a1)
(jcall zerop)
(btnil a1 106)
(mov nil a1)
(mov 'colon-hat a2)
(jmp #:llcp:exit)
106
(mov (cvalq #:format:iter-n) a1)
(jcall |1-|)
(mov a1 (cvalq #:format:iter-n))
(push (@ 107))
(push 'hat)
(push dlink)
(push tag)
(stack dlink)
(push (@ 108))
(push 'format)
(push dlink)
(push tag)
(stack dlink)
(push (cvalq #:format:format))
(push (cvalq #:format:f))
(mov (& 1) (cvalq #:format:f))
(push '1)
(push '(#:format:f))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(call #:format:format1)
(mov (& 1) dlink)
(mov (& 6) (cvalq #:format:f))
(adjstk '8)
(mov (& 1) dlink)
(adjstk '4)
108
(eval ())
(mov (& 1) dlink)
(adjstk '4)
107
(eval ())
(mov (cvalq #:format:sub-args) a1)
(mov (cdr a1) (cvalq #:format:sub-args))
(mov (car a1) a2)
(mov (car a1) a1)
(call #:format:iter-colon-loop)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:format:args))
(mov (& 7) (cvalq #:format:l))
(adjstk '8)
(return)
))
(loader'((entry #:format:format-hat subr0)
(bfnil (cvalq #:format:par1) 102)
(mov (cvalq #:format:l) a1)
(jcall length)
(mov a1 (cvalq #:format:par1))
102
(bfnil (cvalq #:format:par2) 106)
(bfnil (cvalq #:format:par3) 106)
(mov (cvalq #:format:par1) a1)
(jcall zerop)
(bfnil a1 105)
106
(btnil (cvalq #:format:par2) 107)
(bfnil (cvalq #:format:par3) 107)
(push (@ 108))
(push (cvalq #:format:par1))
(push (cvalq #:format:par2))
(mov '2 a4)
(jmp =)
108
(eval ())
(bfnil a1 105)
107
(btnil (cvalq #:format:par2) 103)
(btnil (cvalq #:format:par3) 103)
(push (@ 110))
(push (cvalq #:format:par1))
(push (cvalq #:format:par2))
(mov '2 a4)
(jmp <=)
110
(eval ())
(bfnil a1 105)
(push (@ 111))
(push (cvalq #:format:par2))
(push (cvalq #:format:par3))
(mov '2 a4)
(jmp <=)
111
(eval ())
(btnil a1 103)
105
(btnil (cvalq #:format:colon) 112)
(mov nil a1)
(mov 'colon-hat a2)
(jmp #:llcp:exit)
112
(mov nil a1)
(mov 'hat a2)
(jmp #:llcp:exit)
103
(mov nil a1)
(return)
))
(loader'((entry #:format:read-n subr1)
(push a1)
(mov (cvalq #:format:f) a4)
(push (car a4))
(mov (& 0) a1)
(jcall digitp)
(btnil a1 101)
(mov (cvalq #:format:f) a4)
(mov (cdr a4) (cvalq #:format:f))
(mov (& 0) a2)
(mov (& 1) a1)
(jcall nconc1)
(adjstk '2)
(bra #:format:read-n)
101
(mov (& 1) a1)
(adjstk '2)
(jmp implode)
))
(loader'((entry #:format:string subr1)
(push a1)
(jcall length)
(push a1)
(mov '32 a2)
(jcall makestring)
(push a1)
(mov (& 2) a1)
(jcall nreverse)
(push a1)
101
(cnble (& 2) '0 102)
(mov (& 2) a4)
(diff '1 a4)
(mov a4 (& 2))
(mov (& 0) a3)
(mov (cdr a3) (& 0))
(hbmovx (car a3) (& 1) a4)
(bra 101)
102
(mov (& 1) a1)
(adjstk '4)
(return)
))
(#:messages:put-message 'errfermant 'french '"hors contexte" 'defmessage)
(#:messages:put-message 'errfermant 'english '"out of context" 'defmessage)
'errfermant
(loader '((end)))
