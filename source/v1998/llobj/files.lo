(loader '((title |files.lo|)))
(if (not (>= (version) 15.2)) (progn (error 'load 'erricf 'files)))
(defvar #:sys-package:colon 'system)
(defvar #:system:features-list (when (boundp '#:system:features-list) #:system:features-list))
(loader'((fentry featurep subr1)
(entry featurep subr1)
(push a1)
(mov (cvalq #:system:features-list) a2)
(jcall memq)
(btnil a1 101)
(mov (& 0) a1)
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry add-feature subr1)
(entry add-feature subr1)
(push a1)
(jcall featurep)
(bfnil a1 101)
(mov (cvalq #:system:features-list) a2)
(mov (& 0) a1)
(jcall cons)
(mov a1 (cvalq #:system:features-list))
(adjstk '1)
(return)
101
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry rem-feature subr1)
(entry rem-feature subr1)
(mov (cvalq #:system:features-list) a2)
(jcall delq)
(mov a1 (cvalq #:system:features-list))
(return)
))
(loader'((fentry list-features subr0)
(entry list-features subr0)
(mov (cvalq #:system:features-list) a1)
(jmp copy)
))
(defvar #:system:previous-def-flag (when (boundp '#:system:previous-def-flag) #:system:previous-def-flag))
(loader'((fentry probepathf subr1)
(entry probepathf subr1)
(push a1)
(jcall coerce-namestring)
(mov a1 (& 0))
(push (cvalq #:system:path))
(mov (cvalq #:system:lelisp-extension) a2)
(call suffixe)
(mov a1 a2)
(pop a1)
(jcall search-in-path)
(bfnil a1 101)
(mov (& 0) a2)
(mov (cvalq #:system:path) a1)
(adjstk '1)
(jmp search-in-path)
101
(adjstk '1)
(return)
))
(loader'((fentry probepathm subr1)
(entry probepathm subr1)
(push (cvalq #:system:path))
(jcall coerce-namestring)
(mov (cvalq #:system:mod-extension) a2)
(call suffixe)
(mov a1 a2)
(pop a1)
(jmp search-in-path)
))
(loader'((fentry probepatho subr1)
(entry probepatho subr1)
(push (cvalq #:system:path))
(jcall coerce-namestring)
(mov (cvalq #:system:obj-extension) a2)
(call suffixe)
(mov a1 a2)
(pop a1)
(jmp search-in-path)
))
(loader'((entry suffixe subr2)
(push a2)
(push a1)
(push (@ 103))
(push a2)
(push a1)
(mov '2 a4)
(jmp index)
103
(eval ())
(push a1)
(mov (& 1) a1)
(jcall slength)
(push a1)
(mov (& 3) a1)
(jcall slength)
(pop a4)
(diff a1 a4)
(pop a3)
(cabne a3 a4 101)
(mov (& 0) a1)
(adjstk '2)
(return)
101
(push (@ 104))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp catenate)
104
(eval ())
(adjstk '2)
(return)
))
(loader'((fentry search-in-path subr2)
(entry search-in-path subr2)
(push a2)
(push a1)
(btnil a1 101)
(btstrg a2 105)
(bfsymb a2 103)
105
(adjstk '2)
(bra #:files:sip-string)
103
(mov a2 a1)
(jcall pathnamep)
(btnil a1 106)
(mov (& 1) a2)
(mov (& 0) a1)
(adjstk '2)
(bra #:files:sip-path)
106
(mov (& 1) a3)
(mov 'errbpa a2)
(mov 'search-in-path a1)
(adjstk '2)
(jmp error)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:files:sip-string subr2)
(push a2)
(push a1)
(btnil a1 101)
(bfcons a1 103)
(mov (car a1) a4)
(bra 104)
103
(mov a1 a4)
104
(push a4)
(btstrg a4 107)
(bfsymb a4 105)
107
(push (@ 108))
(push a4)
(push a2)
(mov '2 a4)
(jmp catenate)
108
(eval ())
(mov a1 a3)
(bra 106)
105
(mov a4 a1)
(jcall pathnamep)
(btnil a1 109)
(mov (& 2) a1)
(jcall pathname)
(mov a1 a2)
(mov (& 0) a1)
(jcall combine-pathnames)
(mov a1 a3)
(bra 106)
109
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'search-in-path a1)
(jcall error)
(mov a1 a3)
106
(push a3)
(mov a3 a1)
(jcall probefile)
(btnil a1 111)
(mov (& 0) a1)
(adjstk '4)
(return)
111
(bfcons (& 2) 113)
(mov (& 2) a1)
(mov (& 3) a2)
(mov (cdr a1) a1)
(adjstk '4)
(bra #:files:sip-string)
113
(mov nil a1)
(adjstk '4)
(return)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((entry #:files:sip-path subr2)
(push a2)
(push a1)
(btnil a1 101)
(bfcons a1 103)
(mov (car a1) a4)
(bra 104)
103
(mov a1 a4)
104
(push a4)
(btstrg a4 107)
(bfsymb a4 105)
107
(push (@ 108))
(push a4)
(mov a2 a1)
(jcall namestring)
(push a1)
(mov '2 a4)
(jmp catenate)
108
(eval ())
(mov a1 a3)
(bra 106)
105
(mov a4 a1)
(jcall pathnamep)
(btnil a1 109)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall combine-pathnames)
(mov a1 a3)
(bra 106)
109
(mov (& 0) a3)
(mov 'errbpa a2)
(mov 'search-in-path a1)
(jcall error)
(mov a1 a3)
106
(push a3)
(mov a3 a1)
(jcall probefile)
(btnil a1 111)
(mov (& 0) a1)
(adjstk '4)
(return)
111
(bfcons (& 2) 113)
(mov (& 2) a1)
(mov (& 3) a2)
(mov (cdr a1) a1)
(adjstk '4)
(bra #:files:sip-path)
113
(mov nil a1)
(adjstk '4)
(return)
101
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry load fsubr)
(entry load fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov (car a4) a2)
(jmp loadfile)
))
(loader'((fentry loadfile subr2)
(entry loadfile subr2)
(push a2)
(push a1)
(jcall probefile)
(bfnil a1 101)
(mov (& 0) a3)
(mov 'errfile a2)
(mov 'loadfile a1)
(adjstk '2)
(jmp error)
101
(push (cvalq #:sys-package:colon))
(push (@ 103))
(mov '0 a4)
(jmp inchan)
103
(eval ())
(push (& 1))
(push (& 3))
(push nil)
(push a1)
(push (cvalq #:system:in-read-flag))
(mov (& 2) (cvalq #:system:in-read-flag))
(push (cvalq #:system:redef-flag))
(mov (& 4) (cvalq #:system:redef-flag))
(push (cvalq #:system:loaded-from-file))
(mov (& 6) (cvalq #:system:loaded-from-file))
(push (cvalq #:sys-package:colon))
(mov (& 8) (cvalq #:sys-package:colon))
(push '4)
(push '(#:system:in-read-flag #:system:redef-flag #:system:loaded-from-file #:sys-package:colon))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 104))
(mov (& 16) a1)
(jcall openi)
(push a1)
(mov '1 a4)
(jmp inchan)
104
(eval ())
(push (@ 105))
(push dlink)
(push prot)
(stack dlink)
(push (@ 107))
(push 'eof)
(push dlink)
(push tag)
(stack dlink)
108
(push (@ 110))
(jcall read)
(push a1)
(mov '1 a4)
(jmp eval)
110
(eval ())
(bra 108)
109
(mov nil a1)
(mov (& 1) dlink)
(adjstk '4)
107
(eval ())
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 106) a3)
105
(push a3)
(push a2)
(push (@ 111))
(mov '0 a4)
(jmp inchan)
111
(eval ())
(btnil a1 113)
(push (@ 114))
(push a1)
(mov '1 a4)
(jmp close)
114
(eval ())
113
(push (@ 115))
(push (& 14))
(mov '1 a4)
(jmp inchan)
115
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
106
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:sys-package:colon))
(mov (& 7) (cvalq #:system:loaded-from-file))
(mov (& 8) (cvalq #:system:redef-flag))
(mov (& 9) (cvalq #:system:in-read-flag))
(adjstk '15)
(mov (& 0) a1)
(adjstk '2)
(return)
))
(loader'((fentry libload fsubr)
(entry libload fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(mov a4 a2)
(jmp libloadfile)
))
(loader'((fentry libloadfile subr2)
(entry libloadfile subr2)
(push a2)
(push a1)
(jcall probepathf)
(bfnil a1 101)
(mov (& 0) a3)
(mov 'errfile a2)
(mov 'libloadfile a1)
(adjstk '2)
(jmp error)
101
(mov (& 1) a2)
(adjstk '2)
(jmp loadfile)
))
(loader'((fentry loadobjectfile subr1)
(entry loadobjectfile subr1)
(push a1)
(jcall probepatho)
(push a1)
(bfnil a1 101)
(mov (& 1) a3)
(mov 'errfile a2)
(mov 'loadobjectfile a1)
(adjstk '2)
(jmp error)
101
(push (cvalq #:system:read-case-flag))
(mov 'loadobjectfile (cvalq #:system:read-case-flag))
(mov 't a2)
(jcall loadfile)
(cabne (cvalq #:system:read-case-flag) 'loadobjectfile 104)
(mov (& 0) (cvalq #:system:read-case-flag))
104
(mov (& 1) a1)
(adjstk '3)
(return)
))
(loader'((fentry autoload fsubr)
(entry autoload fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 103))
(push '#:system:b)
(push (@ 104))
(push '#:system:std-autoload)
(push (@ 105))
(push 'quote)
(push (& 6))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(push '(#:system:b 'loadfile))
(mov '3 a4)
(jmp mcons)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(mov a1 a3)
(mov 'fexpr a2)
(mov (& 0) a1)
(jcall setfn)
(mov 'autoload a3)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall putprop)
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry libautoload fsubr)
(entry libautoload fsubr)
(mov (cdr a1) a4)
(mov (car a1) a1)
(push a1)
(push a4)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 103))
(push '#:system:b)
(push (@ 104))
(push '#:system:std-autoload)
(push (@ 105))
(push 'quote)
(push (& 6))
(mov '2 a4)
(jmp list)
105
(eval ())
(push a1)
(push '(#:system:b 'libloadfile))
(mov '3 a4)
(jmp mcons)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp list)
103
(eval ())
(mov a1 a3)
(mov 'fexpr a2)
(mov (& 0) a1)
(jcall setfn)
(mov 'autoload a3)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall putprop)
(adjstk '1)
(bra 101)
102
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:system:std-autoload subr3)
(entry #:system:std-autoload subr3)
(push (cvalq #:system:load-fct))
(mov a3 (cvalq #:system:load-fct))
(push (cvalq #:system:b))
(mov a2 (cvalq #:system:b))
(push (cvalq #:system:f))
(mov a1 (cvalq #:system:f))
(push '3)
(push '(#:system:load-fct #:system:b #:system:f))
(push (@ #:system:std-autoload))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall valfn)
(push a1)
(mov (cvalq #:system:f) a1)
(jcall typefn)
(push a1)
(mov 'autoload a2)
(mov (cvalq #:system:f) a1)
(jcall getprop)
(push (cvalq #:system:autoload-file))
(mov a1 (cvalq #:system:autoload-file))
(push (cvalq #:system:ot))
(mov (& 2) (cvalq #:system:ot))
(push (cvalq #:system:of))
(mov (& 4) (cvalq #:system:of))
(push '3)
(push '(#:system:autoload-file #:system:ot #:system:of))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(bfnil a1 101)
(mov (cvalq #:system:f) a3)
(mov 'errfile a2)
(mov 'autoload a1)
(jcall error)
(bra 102)
101
(push 't)
(push (cvalq #:system:error-flag))
(mov (& 1) (cvalq #:system:error-flag))
(push '1)
(push '(#:system:error-flag))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(push (@ 105))
(push '#:system:error-tag)
(push dlink)
(push tag)
(stack dlink)
(push (@ 106))
(push (cvalq #:system:load-fct))
(push a1)
(push 't)
(mov '3 a4)
(jmp funcall)
106
(eval ())
(jcall ncons)
(mov (& 1) dlink)
(adjstk '4)
105
(eval ())
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:error-flag))
(adjstk '8)
(btnil a1 103)
(push (cvalq #:system:of))
(mov (cvalq #:system:f) a1)
(jcall valfn)
(pop a4)
(cabeq a4 a1 103)
(mov 'autoload a2)
(mov (cvalq #:system:f) a1)
(jcall remprop)
(push (@ 107))
(mov (cvalq #:system:b) a2)
(mov (cvalq #:system:f) a1)
(jcall cons)
(push a1)
(mov '1 a4)
(jmp eval)
107
(eval ())
(bra 102)
103
(mov (cvalq #:system:of) a3)
(mov (cvalq #:system:ot) a2)
(mov (cvalq #:system:f) a1)
(jcall setfn)
(mov (cvalq #:system:f) a3)
(mov 'errudf a2)
(mov 'autoload a1)
(jcall error)
102
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:of))
(mov (& 7) (cvalq #:system:ot))
(mov (& 8) (cvalq #:system:autoload-file))
(adjstk '11)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq #:system:f))
(mov (& 7) (cvalq #:system:b))
(mov (& 8) (cvalq #:system:load-fct))
(adjstk '9)
(return)
))
(loader '((end)))
