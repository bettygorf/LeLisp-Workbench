(loader '((title |virbit.lo|)))
(defvar #:display:dumpdevice (if (boundp '#:display:dumpdevice) #:display:dumpdevice ()))
(setq #:sys-package:colon 'bitmap)
(loader'((entry #:bitmap:create-bitmap nsubr)
(jcall #:bitmap:make)
(push a1)
(hpmovx (& 3) a1 '0)
(hpmovx (& 2) a1 '1)
(hpmovx (& 4) a1 '3)
(btnil (& 4) 101)
(hpxmov (& 4) '6 a4)
(btnil a4 101)
(push (@ 103))
(push 'create-bitmap)
(push (& 6))
(push a1)
(mov '3 a4)
(jmp send)
103
(eval ())
(hpxmov (& 4) '15 a1)
(mov (& 0) a2)
(jcall nconc1)
(hpmovx a1 (& 4) '15)
(push (@ 104))
(push (& 1))
(push (& 3))
(mov '2 a4)
(jmp #:bitmap:bits)
104
(eval ())
(bra 102)
101
(hpmovx (& 1) a1 '2)
(push (@ 105))
(push '"* Warning : bitmap created before bitprologue.")
(mov '1 a4)
(jmp print)
105
(eval ())
102
(mov (& 0) a1)
(adjstk '5)
(return)
))
(loader'((fentry create-bitmap nsubr)
(entry create-bitmap nsubr)
(cnbge a4 '2 101)
(mov 'create-bitmap a1)
(mov '2 a2)
(jmp #:llcp:errwna)
101
(diff '2 a4)
(jcall #:llcp:nlist)
(push a1)
(btfix (& 2) 103)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'create-bitmap a1)
(jcall error)
103
(btfix (& 1) 105)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'create-bitmap a1)
(jcall error)
105
(mov (& 0) a4)
(btnil (cdr a4) 107)
(mov (cdr a4) a3)
(mov 'errwna a2)
(mov 'create-bitmap a1)
(jcall error)
107
(btnil (& 0) 108)
(mov (& 0) a4)
(mov (car a4) a4)
(bra 109)
108
(mov (& 2) a4)
(plus '7 a4)
(lshift '-3 a4)
(mov '0 a2)
(mov a4 a1)
(jcall makestring)
(mov a1 a2)
(mov (& 1) a1)
(jcall makevector)
(mov a1 a4)
109
(push a4)
(btvect a4 111)
(mov a4 a3)
(mov 'errvec a2)
(mov 'create-bitmap a1)
(jcall error)
111
(push (@ 112))
(push (cvalq #:display:current-display))
(push (& 5))
(push (& 5))
(push (& 4))
(mov '4 a4)
(bra #:bitmap:create-bitmap)
112
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry bitmap-prologue subr2)
(entry bitmap-prologue subr2)
(push a2)
(push a1)
(bfnil a1 102)
(mov a1 a3)
(mov '#:display:no-current-display a2)
(mov 'bitmap-prologue a1)
(jcall error)
102
(mov 'display a2)
(mov (& 0) a1)
(jcall typep)
(btnil a1 105)
(hpxmov (& 0) '6 a4)
(bfnil a4 104)
105
(mov (& 0) a3)
(mov '#:display:errnotadisplay a2)
(mov 'bitmap-prologue a1)
(jcall error)
104
(mov 'bitmap a2)
(mov (& 1) a1)
(jcall typep)
(bfnil a1 107)
(mov (& 1) a3)
(mov '#:display:errnotabitmap a2)
(mov 'bitmap-prologue a1)
(jcall error)
107
(hpxmov (& 1) '2 a1)
(jcall type-of)
(cabne a1 'vector 109)
(push (@ 110))
(push (& 1))
(hpxmov (& 3) '0 a4)
(push a4)
(hpxmov (& 4) '1 a4)
(push a4)
(hpxmov (& 5) '2 a4)
(push a4)
(mov '4 a4)
(bra #:bitmap:create-bitmap)
110
(eval ())
(adjstk '2)
(return)
109
(cabne a1 'cons 111)
(push (@ 112))
(push (& 1))
(hpxmov (& 3) '0 a4)
(push a4)
(hpxmov (& 4) '1 a4)
(push a4)
(hpxmov (& 5) '2 a4)
(push a4)
(mov '4 a4)
(bra #:bitmap:create-bytemap)
112
(eval ())
(adjstk '2)
(return)
111
(mov (& 1) a3)
(mov 'errbpa a2)
(mov 'bitmap-prologue a1)
(adjstk '2)
(jmp error)
))
(loader'((fentry window-bitmap subr1)
(entry window-bitmap subr1)
(push a1)
(mov '#:image:rectangle:window a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotawindow a2)
(mov 'window-bitmap a1)
(jcall error)
102
(hpxmov (& 0) '7 a1)
(hpxmov a1 '10 a1)
(bfnil a1 103)
(jcall #:bitmap:make)
(push a1)
(hpxmov (& 1) '12 a4)
(hpmovx a4 a1 '3)
(hpxmov (& 1) '2 a4)
(hpmovx a4 a1 '0)
(hpxmov (& 1) '3 a4)
(hpmovx a4 a1 '1)
(push (@ 104))
(push 'create-window-bitmap)
(hpxmov (& 3) '12 a4)
(push a4)
(push (& 4))
(push a1)
(mov '4 a4)
(jmp send)
104
(eval ())
(mov a1 (& 0))
(hpxmov (& 1) '12 a4)
(hpmovx a4 a1 '3)
(hpxmov (& 1) '2 a4)
(hpmovx a4 a1 '0)
(hpxmov (& 1) '3 a4)
(hpmovx a4 a1 '1)
(hpxmov (& 1) '7 a4)
(hpmovx a1 a4 '10)
(adjstk '1)
103
(adjstk '1)
(return)
))
(loader'((fentry kill-bitmap subr1)
(entry kill-bitmap subr1)
(push a1)
(mov 'bitmap a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotabitmap a2)
(mov 'kill-bitmap a1)
(jcall error)
102
(push (@ 103))
(push 'kill-bitmap)
(hpxmov (& 2) '3 a4)
(push a4)
(push (& 3))
(mov '3 a4)
(jmp send)
103
(eval ())
(hpxmov (& 0) '3 a4)
(push a4)
(hpxmov (& 1) '3 a2)
(hpxmov a2 '15 a2)
(mov (& 1) a1)
(jcall delq)
(pop a4)
(hpmovx a1 a4 '15)
(hpmovx nil (& 0) '2)
(hpmovx nil (& 0) '3)
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry bmref subr3)
(entry bmref subr3)
(push a3)
(push a2)
(push a1)
(mov 'bitmap a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotabitmap a2)
(mov 'bmref a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'bmref a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'bmref a1)
(jcall error)
106
(cnblt (& 1) '0 109)
(hpxmov (& 0) '0 a4)
(cnblt (& 1) a4 108)
109
(mov (& 1) a3)
(mov 'erroob a2)
(mov 'bmref a1)
(jcall error)
108
(cnblt (& 2) '0 112)
(hpxmov (& 0) '1 a4)
(cnblt (& 2) a4 111)
112
(mov (& 2) a3)
(mov 'erroob a2)
(mov 'bmref a1)
(jcall error)
111
(hpxmov (& 0) '3 a4)
(push a4)
(bfnil a4 114)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'bmref a1)
(jcall error)
114
(push (@ 115))
(push 'bmref)
(push (& 2))
(push (& 4))
(push (& 6))
(push (& 8))
(mov '5 a4)
(jmp send)
115
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry bmset nsubr)
(entry bmset nsubr)
(cnbeq a4 '4 101)
(mov 'bmset a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov 'bitmap a2)
(mov (& 3) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 3) a3)
(mov '#:display:errnotabitmap a2)
(mov 'bmset a1)
(jcall error)
103
(btfix (& 2) 105)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'bmset a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'bmset a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'bmset a1)
(jcall error)
109
(cnblt (& 2) '0 112)
(hpxmov (& 3) '0 a4)
(cnblt (& 2) a4 111)
112
(mov (& 2) a3)
(mov 'erroob a2)
(mov 'bmset a1)
(jcall error)
111
(cnblt (& 1) '0 115)
(hpxmov (& 3) '1 a4)
(cnblt (& 1) a4 114)
115
(mov (& 1) a3)
(mov 'erroob a2)
(mov 'bmset a1)
(jcall error)
114
(hpxmov (& 3) '3 a4)
(push a4)
(bfnil a4 117)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'bmref a1)
(jcall error)
117
(push (@ 118))
(push 'bmset)
(push (& 2))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry byteref subr3)
(entry byteref subr3)
(push a3)
(push a2)
(push a1)
(mov 'bitmap a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotabitmap a2)
(mov 'byteref a1)
(jcall error)
102
(btfix (& 1) 104)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'byteref a1)
(jcall error)
104
(btfix (& 2) 106)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'byteref a1)
(jcall error)
106
(cnblt (& 1) '0 109)
(hpxmov (& 0) '0 a4)
(cnblt (& 1) a4 108)
109
(mov (& 1) a3)
(mov 'erroob a2)
(mov 'byteref a1)
(jcall error)
108
(cnblt (& 2) '0 112)
(hpxmov (& 0) '1 a4)
(cnblt (& 2) a4 111)
112
(mov (& 2) a3)
(mov 'erroob a2)
(mov 'byteref a1)
(jcall error)
111
(hpxmov (& 0) '3 a4)
(push a4)
(bfnil a4 114)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'byteref a1)
(jcall error)
114
(push (@ 115))
(push 'byteref)
(push (& 2))
(push (& 4))
(push (& 6))
(push (& 8))
(mov '5 a4)
(jmp send)
115
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry byteset nsubr)
(entry byteset nsubr)
(cnbeq a4 '4 101)
(mov 'byteset a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(mov 'bitmap a2)
(mov (& 3) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 3) a3)
(mov '#:display:errnotabitmap a2)
(mov 'byteset a1)
(jcall error)
103
(btfix (& 2) 105)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'byteset a1)
(jcall error)
105
(btfix (& 1) 107)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'byteset a1)
(jcall error)
107
(btfix (& 0) 109)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'byteset a1)
(jcall error)
109
(cnblt (& 2) '0 112)
(hpxmov (& 3) '0 a4)
(cnblt (& 2) a4 111)
112
(mov (& 2) a3)
(mov 'erroob a2)
(mov 'byteset a1)
(jcall error)
111
(cnblt (& 1) '0 115)
(hpxmov (& 3) '1 a4)
(cnblt (& 1) a4 114)
115
(mov (& 1) a3)
(mov 'erroob a2)
(mov 'byteset a1)
(jcall error)
114
(hpxmov (& 3) '3 a4)
(push a4)
(bfnil a4 117)
(mov a4 a3)
(mov '#:display:no-current-display a2)
(mov 'byteset a1)
(jcall error)
117
(push (@ 118))
(push 'byteset)
(push (& 2))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '6 a4)
(jmp send)
118
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry bitblit nsubr)
(entry bitblit nsubr)
(cnbeq a4 '8 101)
(mov 'bitblit a1)
(mov '8 a2)
(jmp #:llcp:errwna)
101
(mov 'bitmap a2)
(mov (& 7) a1)
(jcall typep)
(bfnil a1 103)
(mov (& 7) a3)
(mov '#:display:errnotabitmap a2)
(mov 'bitblit a1)
(jcall error)
103
(mov 'bitmap a2)
(mov (& 6) a1)
(jcall typep)
(bfnil a1 105)
(mov (& 6) a3)
(mov '#:display:errnotabitmap a2)
(mov 'bitblit a1)
(jcall error)
105
(btfix (& 5) 107)
(mov (& 5) a3)
(mov 'errnia a2)
(mov 'bitblit a1)
(jcall error)
107
(btfix (& 4) 109)
(mov (& 4) a3)
(mov 'errnia a2)
(mov 'bitblit a1)
(jcall error)
109
(btfix (& 3) 111)
(mov (& 3) a3)
(mov 'errnia a2)
(mov 'bitblit a1)
(jcall error)
111
(btfix (& 2) 113)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'bitblit a1)
(jcall error)
113
(btfix (& 1) 115)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'bitblit a1)
(jcall error)
115
(btfix (& 0) 117)
(mov (& 0) a3)
(mov 'errnia a2)
(mov 'bitblit a1)
(jcall error)
117
(hpxmov (& 7) '3 a4)
(hpxmov (& 6) '3 a3)
(cabeq a4 a3 119)
(push (@ 120))
(push a4)
(push a3)
(mov '2 a4)
(jmp list)
120
(eval ())
(mov a1 a3)
(mov '#:display:err-diff-display a2)
(mov 'bitblit a1)
(jcall error)
119
(btnil (cvalq #:display:dumpdevice) 122)
(push (@ 123))
(push '#:display:dump:bitblit)
(push (cvalq #:display:dumpdevice))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '10 a4)
(jmp funcall)
123
(eval ())
122
(push (@ 124))
(push 'bitblit)
(hpxmov (& 9) '3 a4)
(push a4)
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '10 a4)
(jmp send)
124
(eval ())
(adjstk '8)
(return)
))
(defvar #:system:print-bitmap-flag ())
(loader'((fentry #:sharp:* nsubr)
(entry #:sharp:* nsubr)
(jcall #:llcp:nlist)
(mov nil a2)
(mov (car a1) a1)
(jcall #:bitvector:read)
(jmp ncons)
))
(loader'((fentry #:sharp:B subr0)
(entry #:sharp:B subr0)
(jcall peekcn)
(cabeq a1 '67 101)
(push (@ 103))
(push 'create-bitmap)
(jcall read)
(push a1)
(mov '2 a4)
(jmp apply)
103
(eval ())
(jmp ncons)
101
(jcall readcn)
(push (@ 104))
(push 'create-bytemap)
(jcall read)
(push a1)
(mov '2 a4)
(jmp apply)
104
(eval ())
(jmp ncons)
))
(loader'((fentry #:bitmap:bits nsubr)
(entry #:bitmap:bits nsubr)
(cnbge a4 '1 101)
(mov '#:bitmap:bits a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(bfnil a1 102)
(hpxmov (& 0) '1 a4)
(push a4)
(hpxmov (& 1) '0 a3)
(push a3)
(plus '7 a3)
(lshift '-3 a3)
(push a3)
(diff '1 a3)
(push a3)
(mov (& 2) a2)
(land '7 a2)
(push a2)
(mov nil a2)
(mov a4 a1)
(jcall makevector)
(push a1)
(push nil)
(push '0)
(mov (& 7) a4)
(bra 105)
104
(push a4)
(mov '0 a2)
(mov (& 6) a1)
(jcall makestring)
(mov a1 (& 2))
(hpmovx a1 (& 3) (& 1))
(mov 'bitvector (cdr a1))
(push (@ 106))
(push 'get-bit-line)
(hpxmov (& 11) '3 a4)
(push a4)
(push (& 12))
(push (& 5))
(push a1)
(mov '5 a4)
(jmp send)
106
(eval ())
(cabeq (& 4) '0 108)
(hbxmov (& 2) (& 5) a1)
(mov '8 a4)
(diff (& 4) a4)
(mov '8 a3)
(mov a4 a2)
(jcall mask-field)
(hbmovx a1 (& 2) (& 5))
108
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
105
(sobgez a4 104)
(mov (& 2) a1)
(adjstk '9)
(return)
102
(push (car a1))
(push nil)
(push nil)
(push '0)
(push '0)
(hgsize (& 4) a4)
(bra 110)
109
(push a4)
(hpxmov (& 5) (& 2) a4)
(mov a4 (& 4))
(mov (& 2) a3)
(plus '1 a3)
(mov a3 (& 2))
(bffix a4 111)
(bra 114)
113
(push a4)
(push (@ 115))
(push 'set-bit-line)
(hpxmov (& 9) '3 a4)
(push a4)
(push (& 10))
(push (& 6))
(push (& 9))
(mov '5 a4)
(jmp send)
115
(eval ())
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(pop a4)
114
(sobgez a4 113)
(mov 't a4)
(bra 112)
111
(push (@ 116))
(push 'set-bit-line)
(hpxmov (& 8) '3 a2)
(push a2)
(push (& 9))
(push (& 5))
(push a4)
(mov '5 a4)
(jmp send)
116
(eval ())
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(mov (& 4) (& 3))
(mov (& 4) a4)
112
(pop a4)
110
(sobgez a4 109)
(mov 't a1)
(adjstk '6)
(return)
))
(loader'((entry #:bitmap:create-bytemap nsubr)
(push nil)
(btnil (& 4) 103)
(hpxmov (& 4) '6 a4)
(bfnil a4 101)
103
(mov (& 2) a3)
(mov (& 3) a2)
(mov (& 4) a1)
(call #:bitmap:empty-bytemap)
(mov a1 (& 0))
(hpmovx (& 1) a1 '2)
(push (@ 104))
(push '"* Warning : bytemap created before bitprologue")
(mov '1 a4)
(jmp print)
104
(eval ())
(mov (& 0) a1)
(adjstk '5)
(return)
101
(push (@ 107))
(push 'display-depth)
(push (& 6))
(mov '2 a4)
(jmp send)
107
(eval ())
(cnble a1 '1 105)
(mov (& 2) a3)
(mov (& 3) a2)
(mov (& 4) a1)
(call #:bitmap:empty-bytemap)
(mov a1 (& 0))
(push (@ 108))
(push 'create-bitmap)
(push (& 6))
(push a1)
(mov '3 a4)
(jmp send)
108
(eval ())
(push (@ 109))
(push 'bytes)
(push (& 2))
(mov (& 4) a4)
(push (car a4))
(mov '3 a4)
(jmp send)
109
(eval ())
(push (@ 110))
(push 'subst-colors)
(hpxmov (& 2) '3 a4)
(push a4)
(push (& 3))
(mov (& 5) a1)
(mov (cdr a1) a1)
(mov (car a1) a1)
(call #:bitmap:make-assoc-table)
(push a1)
(mov '4 a4)
(jmp send)
110
(eval ())
(hpxmov (& 4) '15 a1)
(mov (& 0) a2)
(jcall nconc1)
(hpmovx a1 (& 4) '15)
(mov (& 0) a1)
(adjstk '5)
(return)
105
(push (@ 111))
(push (& 5))
(push (& 5))
(push (& 5))
(mov (& 5) a4)
(hpxmov (car a4) '0 a4)
(hgsize a4 a4)
(cnbne (& 7) a4 112)
(mov (& 5) a1)
(call #:bitmap:bytes-to-bits)
(mov a1 a4)
(bra 113)
112
(mov (& 5) a4)
(mov (car a4) a4)
113
(push a4)
(mov '4 a4)
(bra #:bitmap:create-bitmap)
111
(eval ())
(adjstk '5)
(return)
))
(loader'((entry #:bitmap:empty-bytemap subr3)
(push a3)
(push a2)
(push a1)
(jcall #:bitmap:bytemap:make)
(hpmovx (& 1) a1 '0)
(hpmovx (& 2) a1 '1)
(hpmovx (& 0) a1 '3)
(adjstk '3)
(return)
))
(loader'((fentry create-bytemap nsubr)
(entry create-bytemap nsubr)
(cnbge a4 '2 101)
(mov 'create-bytemap a1)
(mov '2 a2)
(jmp #:llcp:errwna)
101
(diff '2 a4)
(jcall #:llcp:nlist)
(push a1)
(btfix (& 2) 103)
(mov (& 2) a3)
(mov 'errnia a2)
(mov 'create-bytemap a1)
(jcall error)
103
(btfix (& 1) 105)
(mov (& 1) a3)
(mov 'errnia a2)
(mov 'create-bytemap a1)
(jcall error)
105
(push (@ 106))
(push (cvalq #:display:current-display))
(push (& 4))
(push (& 4))
(push (@ 107))
(btnil (& 5) 108)
(mov (& 5) a4)
(mov (car a4) a4)
(bra 109)
108
(mov '0 a2)
(mov (& 7) a1)
(jcall makestring)
(mov a1 a2)
(mov (& 6) a1)
(jcall makevector)
(mov a1 a4)
109
(push a4)
(mov (& 6) a4)
(mov (cdr a4) a4)
(push (car a4))
(mov '2 a4)
(jmp list)
107
(eval ())
(push a1)
(mov '4 a4)
(bra #:bitmap:create-bytemap)
106
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:bitmap:bytes-to-bits subr1)
(push (car a1))
(hpxmov (& 0) '0 a4)
(hgsize a4 a4)
(push a4)
(plus '7 a4)
(lshift '-3 a4)
(push a4)
(mov (cdr a1) a3)
(push (car a3))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(hgsize (& 8) a1)
(mov nil a2)
(jcall makevector)
(push a1)
(btnil (& 6) 101)
(push (& 6))
103
(bfcons (& 0) 104)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 107))
(push (@ 108))
(hpxmov (& 2) '1 a4)
(push a4)
(hpxmov (& 3) '2 a4)
(push a4)
(hpxmov (& 4) '3 a4)
(push a4)
(mov '3 a4)
(jmp |+|)
108
(eval ())
(push a1)
(push '48000.)
(mov '2 a4)
(jmp <)
107
(eval ())
(btnil a1 106)
(hpxmov (& 0) '0 a1)
(mov (& 6) a2)
(jcall cons)
(mov a1 (& 6))
106
(adjstk '1)
(bra 103)
104
(adjstk '1)
(bra 102)
101
(hpxmov (cvalq #:display:current-display) '13 a1)
(hpxmov a1 '6 a1)
(jcall ncons)
(mov a1 (& 4))
102
(hgsize (& 9) a4)
(diff '1 a4)
(push '0)
(push a4)
(mov a4 a1)
(jcall numberp)
(bfnil a1 111)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
111
(push (@ 113))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
113
(eval ())
(bfnil a1 112)
(hpxmov (& 11) (& 1) a4)
(mov a4 (& 4))
(mov '0 a2)
(mov (& 9) a1)
(jcall makestring)
(mov a1 (& 5))
(bffix (& 4) 114)
(hpmovx (& 4) (& 2) (& 1))
(bra 115)
114
(mov (& 9) a4)
(diff '1 a4)
(push '0)
(push a4)
(mov a4 a1)
(jcall numberp)
(bfnil a1 118)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
118
(push (@ 120))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
120
(eval ())
(bfnil a1 119)
(mov '0 (& 5))
(push '0)
121
(push (@ 123))
(push (& 1))
(push '7)
(mov '2 a4)
(jmp >)
123
(eval ())
(bfnil a1 122)
(push (@ 126))
(mov (& 14) a4)
(diff '1 a4)
(push a4)
(mov (& 4) a4)
(times '8 a4)
(mov (& 2) a3)
(plus a4 a3)
(push a3)
(mov '2 a4)
(jmp min)
126
(eval ())
(hbxmov (& 7) a1 a1)
(mov (& 9) a2)
(jcall memq)
(btnil a1 125)
(mov '7 a4)
(diff (& 0) a4)
(mov '1 a3)
(lshift a4 a3)
(mov (& 6) a4)
(lor a3 a4)
(mov a4 (& 6))
125
(push (@ 127))
(push (& 1))
(push '1)
(mov '2 a4)
(jmp |+|)
127
(eval ())
(mov a1 (& 0))
(bra 121)
122
(adjstk '1)
(hbmovx (& 5) (& 7) (& 1))
(push (@ 128))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
128
(eval ())
(mov a1 (& 1))
(bra 118)
119
(adjstk '2)
(hpmovx (& 5) (& 2) (& 1))
115
(push (@ 129))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
129
(eval ())
(mov a1 (& 1))
(bra 111)
112
(adjstk '2)
(mov (& 0) a1)
(adjstk '10)
(return)
))
(loader'((fentry #:bitmap:bytes nsubr)
(entry #:bitmap:bytes nsubr)
(cnbge a4 '1 101)
(mov '#:bitmap:bytes a1)
(mov '1 a2)
(jmp #:llcp:errwna)
101
(diff '1 a4)
(jcall #:llcp:nlist)
(push a1)
(push (@ 104))
(push 'display-depth)
(hpxmov (& 3) '3 a4)
(push a4)
(mov '2 a4)
(jmp send)
104
(eval ())
(cnbge a1 '2 102)
(bfnil (& 0) 105)
(push (@ 107))
(push (& 2))
(mov '1 a4)
(jmp #:bitmap:bits)
107
(eval ())
(adjstk '2)
(return)
105
(push (@ 108))
(push (& 2))
(mov (& 2) a4)
(push (car a4))
(mov '2 a4)
(jmp #:bitmap:bits)
108
(eval ())
(adjstk '2)
(return)
102
(bfnil (& 0) 109)
(hpxmov (& 1) '1 a4)
(push a4)
(hpxmov (& 2) '0 a3)
(push a3)
(mov nil a2)
(mov a4 a1)
(jcall makevector)
(push a1)
(push nil)
(push '0)
(mov (& 4) a4)
(bra 112)
111
(push a4)
(mov '0 a2)
(mov (& 4) a1)
(jcall makestring)
(mov a1 (& 2))
(hpmovx a1 (& 3) (& 1))
(mov 'bitvector (cdr a1))
(push (@ 113))
(push 'get-byte-line)
(hpxmov (& 9) '3 a4)
(push a4)
(push (& 10))
(push (& 5))
(push a1)
(mov '5 a4)
(jmp send)
113
(eval ())
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
112
(sobgez a4 111)
(mov (& 2) a1)
(adjstk '7)
(return)
109
(mov (& 0) a4)
(push (car a4))
(push nil)
(push nil)
(push '0)
(push '0)
(hgsize (& 4) a3)
(bra 115)
114
(push a3)
(hpxmov (& 5) (& 2) a4)
(mov a4 (& 4))
(mov (& 2) a3)
(plus '1 a3)
(mov a3 (& 2))
(bffix a4 116)
(bra 119)
118
(push a4)
(push (@ 120))
(push 'set-byte-line)
(hpxmov (& 10) '3 a4)
(push a4)
(push (& 11))
(push (& 6))
(push (& 9))
(mov '5 a4)
(jmp send)
120
(eval ())
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(pop a4)
119
(sobgez a4 118)
(mov 't a3)
(bra 117)
116
(push (@ 121))
(push 'set-byte-line)
(hpxmov (& 9) '3 a2)
(push a2)
(push (& 10))
(push (& 5))
(push a4)
(mov '5 a4)
(jmp send)
121
(eval ())
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(mov (& 4) (& 3))
(mov (& 4) a3)
117
(pop a3)
115
(sobgez a3 114)
(mov 't a1)
(adjstk '7)
(return)
))
(defvar #:bitmap:int->ext-encode-string "0123456789ABCDEFGHIJKLMNOPQRSTUVabcdefghijklmnopqrstuvwxyzWXYZ+*")
(defvar #:bitmap:ext->int-encode-string ((lambda (strg-buffer) ((lambda (strg-index #:system:for:arg2) (unless (numberp #:system:for:arg2) (error 'for 'errnna #:system:for:arg2)) (until (> strg-index #:system:for:arg2) (sset strg-buffer (sref #:bitmap:int->ext-encode-string strg-index) strg-index) (setq strg-index (|+| strg-index 1))) (progn)) 0 (|1-| (slength #:bitmap:int->ext-encode-string))) strg-buffer) (makestring 128 255)))
(defvar #:bitmap:predefined-bytes ((lambda (strg-buffer) (sset strg-buffer 0 0) (sset strg-buffer 1 255) (sset strg-buffer 2 1) (sset strg-buffer 3 2) (sset strg-buffer 4 4) (sset strg-buffer 5 8) (sset strg-buffer 6 16) (sset strg-buffer 7 32) (sset strg-buffer 8 64) (sset strg-buffer 9 128) (sset strg-buffer 10 68) (sset strg-buffer 11 85) (sset strg-buffer 12 170) (sset strg-buffer 13 17) (sset strg-buffer 14 192) (sset strg-buffer 15 3) strg-buffer) (makestring 16 0)))
(defvar #:system:compressed-icon (when (boundp '#:system:compressed-icon) #:system:compressed-icon))
(loader'((entry #:bitmap:ext->int-encode subr1)
(push a1)
(land '127 a1)
(hbxmov (cvalq #:bitmap:ext->int-encode-string) a1 a4)
(cabeq a4 '255 101)
(mov a4 a1)
(adjstk '1)
(return)
101
(push (@ 103))
(push (& 1))
(mov '1 a4)
(jmp list)
103
(eval ())
(mov a1 a3)
(mov 'errsxt a2)
(mov '|#*| a1)
(adjstk '1)
(jmp error)
))
(defvar #:bitmap:stringbuffer (makestring 4000 0))
(loader'((fentry #:bitvector:read subr2)
(entry #:bitvector:read subr2)
(push a2)
(push a1)
(bffix a1 101)
(push '0)
(push nil)
(push '0)
(mov '0 a2)
(jcall makestring)
(mov a1 (& 4))
103
(cnbge (& 0) (& 3) 104)
(jcall readcn)
(call #:bitmap:ext->int-encode)
(mov a1 (& 1))
(cnbgt a1 '15 105)
(lshift '4 a1)
(push a1)
(jcall readcn)
(call #:bitmap:ext->int-encode)
(pop a4)
(lor a1 a4)
(mov a4 (& 2))
(hbmovx a4 (& 4) (& 0))
(mov (& 0) a3)
(plus '1 a3)
(mov a3 (& 0))
(bra 103)
105
(cnbgt a1 '31 107)
(land '15 a1)
(hbxmov (cvalq #:bitmap:predefined-bytes) a1 a4)
(mov a4 (& 2))
(hbmovx a4 (& 4) (& 0))
(mov (& 0) a3)
(plus '1 a3)
(mov a3 (& 0))
(bra 103)
107
(cnbgt a1 '63 109)
(cnbgt a1 '47 113)
(land '15 a1)
(mov a1 a4)
(bra 114)
113
(cnbge a1 '62 115)
(land '15 a1)
(lshift '6 a1)
(push a1)
(jcall readcn)
(call #:bitmap:ext->int-encode)
(pop a4)
(lor a1 a4)
(bra 114)
115
(cabne a1 '62 117)
(mov (& 3) (& 0))
(mov '-1 a4)
(bra 114)
117
(cabne a1 '63 119)
(jcall readcn)
(call #:bitmap:ext->int-encode)
(lshift '4 a1)
(push a1)
(jcall readcn)
(call #:bitmap:ext->int-encode)
(pop a4)
(lor a1 a4)
(bra 114)
119
(mov nil a4)
114
(plus '1 a4)
(bra 112)
111
(push a4)
(hbmovx (& 3) (& 5) (& 1))
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(pop a4)
112
(sobgez a4 111)
(bra 103)
109
(mov a1 a3)
(mov 'errsxt a2)
(mov '"#*" a1)
(jcall error)
(bra 103)
104
(adjstk '3)
(bra 102)
101
(push '0)
(push (@ 121))
(push 'complete)
(push dlink)
(push tag)
(stack dlink)
122
(push (cvalq #:bitmap:stringbuffer))
(jcall peekcn)
(call #:bitmap:conv-to-hex)
(lshift '4 a1)
(push a1)
(jcall readcn)
(jcall readcn)
(call #:bitmap:conv-to-hex)
(pop a4)
(lor a1 a4)
(pop a3)
(hbmovx a4 a3 (& 4))
(mov (& 4) a1)
(jcall |1+|)
(mov a1 (& 4))
(bra 122)
123
(mov (& 1) dlink)
(adjstk '4)
121
(eval ())
(push (@ 124))
(push (cvalq #:bitmap:stringbuffer))
(push '0)
(push (& 3))
(mov '3 a4)
(jmp substring)
124
(eval ())
(mov a1 (& 2))
(adjstk '1)
102
(mov (& 1) a4)
(mov 'bitvector (cdr a4))
(mov a4 a1)
(adjstk '2)
(return)
))
(loader'((entry #:bitmap:conv-to-hex subr1)
(cnblt a1 '48 101)
(cnbgt a1 '57 101)
(diff '48 a1)
(return)
101
(cnblt a1 '65 103)
(cnbgt a1 '70 103)
(mov '65 a4)
(diff '10 a4)
(diff a4 a1)
(return)
103
(cnblt a1 '97 105)
(cnbgt a1 '102 105)
(mov '97 a4)
(diff '10 a4)
(diff a4 a1)
(return)
105
(mov nil a1)
(mov 'complete a2)
(jmp #:llcp:exit)
))
(loader'((fentry #:bitvector:prin subr1)
(entry #:bitvector:prin subr1)
(push a1)
(hgsize a1 a4)
(push '0)
(push nil)
(push a4)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (cvalq #:system:compressed-icon) 101)
(push (@ 103))
(push '"#")
(push a4)
(push '"*")
(mov '3 a4)
(jmp prin)
103
(eval ())
(bra 102)
101
(push (@ 104))
(push '"#*")
(mov '1 a4)
(jmp prin)
104
(eval ())
102
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(btnil (cvalq #:system:compressed-icon) 105)
(push '-1)
(push '0)
107
(cabeq (& 4) (& 2) 108)
(hbxmov (& 5) (& 4) a4)
(mov a4 (& 3))
(cabne a4 (& 1) 109)
(mov (& 0) a3)
(plus '1 a3)
(mov a3 (& 0))
(bra 110)
109
(mov (& 0) a2)
(mov (& 1) a1)
(call #:bitmap:prin-aux)
(mov '0 (& 0))
(mov (& 3) (& 1))
110
(mov (& 4) a4)
(plus '1 a4)
(mov a4 (& 4))
(bra 107)
108
(cabne (& 1) '0 111)
(cabeq (& 0) '0 111)
(push (@ 113))
(hbxmov (cvalq #:bitmap:int->ext-encode-string) '62 a4)
(push a4)
(mov '1 a4)
(jmp princn)
113
(eval ())
(adjstk '6)
(return)
111
(mov (& 0) a2)
(mov (& 1) a1)
(adjstk '6)
(bra #:bitmap:prin-aux)
105
(mov (& 0) a4)
(bra 115)
114
(push a4)
(hbxmov (& 4) (& 3) a4)
(mov a4 (& 2))
(push (@ 116))
(lshift '-4 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a3)
(push a3)
(mov '1 a4)
(jmp princn)
116
(eval ())
(push (@ 117))
(mov (& 3) a4)
(land '15 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
117
(eval ())
(mov (& 3) a4)
(plus '1 a4)
(mov a4 (& 3))
(pop a4)
115
(sobgez a4 114)
(mov 't a1)
(adjstk '4)
(return)
))
(loader'((entry #:bitmap:prin-aux subr2)
(push a2)
(push a1)
(cnble a2 '896 102)
(diff '897 a2)
(call #:bitmap:prin-aux)
(mov '896 (& 1))
102
(cabeq (& 0) '-1 104)
(push (@ 105))
(push (& 1))
(push (cvalq #:bitmap:predefined-bytes))
(mov '2 a4)
(jmp chrpos)
105
(eval ())
(btnil a1 106)
(push (@ 108))
(mov '16 a4)
(plus a1 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
108
(eval ())
(bra 104)
106
(push (@ 109))
(mov (& 1) a4)
(lshift '-4 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
109
(eval ())
(push (@ 110))
(mov (& 1) a4)
(land '15 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
110
(eval ())
104
(cabeq (& 1) '0 111)
(mov (& 1) a4)
(diff '1 a4)
(mov a4 (& 1))
(cnbge a4 '16 113)
(push (@ 115))
(plus '32 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a3)
(push a3)
(mov '1 a4)
(jmp princn)
115
(eval ())
(adjstk '2)
(return)
113
(push (@ 116))
(lshift '-6 a4)
(plus '48 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a3)
(push a3)
(mov '1 a4)
(jmp princn)
116
(eval ())
(push (@ 117))
(mov (& 2) a4)
(land '63 a4)
(hbxmov (cvalq #:bitmap:int->ext-encode-string) a4 a4)
(push a4)
(mov '1 a4)
(jmp princn)
117
(eval ())
(adjstk '2)
(return)
111
(mov nil a1)
(adjstk '2)
(return)
))
(loader'((fentry #:bitmap:prin subr1)
(entry #:bitmap:prin subr1)
(push a1)
(hpxmov a1 '1 a4)
(hpxmov a1 '0 a3)
(push a3)
(push a4)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (cvalq #:system:print-bitmap-flag) 101)
(push (@ 103))
(push '"(create-bitmap ")
(push a3)
(push '" ")
(push a4)
(push '" #[")
(mov '5 a4)
(jmp prin)
103
(eval ())
(bra 102)
101
(push (@ 104))
(push '"#B(")
(push a3)
(push '" ")
(push a4)
(push '" #[")
(mov '5 a4)
(jmp prin)
104
(eval ())
102
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(btnil (cvalq #:system:print-for-read) 106)
(push (@ 107))
(mov '0 a4)
(jmp rmargin)
107
(eval ())
(push a1)
(push (@ 108))
(push dlink)
(push prot)
(stack dlink)
(push (@ 110))
(push (@ 111))
(mov '0 a4)
(jmp outbuf)
111
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
110
(eval ())
(push (@ 112))
(mov '0 a4)
(jmp terpri)
112
(eval ())
(mov (& 5) a4)
(plus '7 a4)
(lshift '-3 a4)
(push a4)
(mov '0 a2)
(mov a4 a1)
(jcall makestring)
(push a1)
(mov '-1 a2)
(mov (& 1) a1)
(jcall makestring)
(push a1)
(mov (& 2) a4)
(diff '1 a4)
(push a4)
(mov (& 9) a3)
(land '7 a3)
(push a3)
(mov '8 a2)
(diff a3 a2)
(mov '255 a4)
(lshift a2 a4)
(push a4)
(push '0)
(push '0)
(mov (& 6) a2)
(mov 'bitvector (cdr a2))
(mov 'bitvector (cdr a1))
(mov (& 12) a4)
(bra 114)
113
(push a4)
(push (@ 115))
(push 'get-bit-line)
(hpxmov (& 17) '3 a4)
(push a4)
(push (& 18))
(push (& 6))
(push (& 12))
(mov '5 a4)
(jmp send)
115
(eval ())
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(cabeq (& 4) '0 117)
(hbxmov (& 7) (& 5) a3)
(land (& 3) a3)
(hbmovx a3 (& 7) (& 5))
117
(btnil (cvalq #:system:compressed-icon) 118)
(mov (& 6) a2)
(mov (& 7) a1)
(jcall equal)
(btnil a1 118)
(cabeq (& 2) '1 118)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(bra 119)
118
(cabeq (& 1) '0 121)
(push (@ 122))
(push (& 2))
(mov '1 a4)
(jmp print)
122
(eval ())
121
(push (@ 123))
(push (& 8))
(mov '1 a4)
(jmp print)
123
(eval ())
(push (& 7))
(mov (& 7) (& 8))
(pop a4)
(mov a4 (& 6))
(mov '0 (& 1))
(mov '0 a4)
119
(pop a4)
114
(sobgez a4 113)
(cabeq (& 0) '0 124)
(push (@ 126))
(push (& 1))
(mov '1 a4)
(jmp print)
126
(eval ())
(bra 125)
124
(mov nil a1)
125
(adjstk '8)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 109) a3)
108
(push a3)
(push a2)
(push (@ 127))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
127
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
109
(eval ())
(adjstk '1)
106
(push (@ 128))
(push '93)
(mov '1 a4)
(jmp princn)
128
(eval ())
(push (@ 129))
(push '41)
(mov '1 a4)
(jmp princn)
129
(eval ())
(adjstk '3)
(return)
))
(loader'((fentry #:bitmap:bytemap:prin subr1)
(entry #:bitmap:bytemap:prin subr1)
(push a1)
(push (@ 101))
(push 'h)
(push a1)
(mov '2 a4)
(jmp send)
101
(eval ())
(push a1)
(push (@ 102))
(push 'w)
(push (& 3))
(mov '2 a4)
(jmp send)
102
(eval ())
(push a1)
(push nil)
(push (cvalq #:system:print-for-read))
(mov (& 1) (cvalq #:system:print-for-read))
(push '1)
(push '(#:system:print-for-read))
(push 'lambda)
(push llink)
(push dlink)
(push cbindn)
(stack dlink)
(btnil (cvalq #:system:print-bitmap-flag) 103)
(push (@ 105))
(push '"(create-bytemap ")
(push a1)
(push '" ")
(push (& 13))
(push '" #[")
(mov '5 a4)
(jmp prin)
105
(eval ())
(bra 104)
103
(push (@ 106))
(push '"#BC(")
(push a1)
(push '" ")
(push (& 13))
(push '" #[")
(mov '5 a4)
(jmp prin)
106
(eval ())
104
(mov (& 1) dlink)
(mov (& 6) (cvalq #:system:print-for-read))
(adjstk '8)
(btnil (cvalq #:system:print-for-read) 108)
(push (@ 109))
(mov '0 a4)
(jmp rmargin)
109
(eval ())
(push a1)
(push (@ 110))
(push dlink)
(push prot)
(stack dlink)
(push (@ 112))
(push (@ 113))
(mov '0 a4)
(jmp outbuf)
113
(eval ())
(hgsize a1 a4)
(plus '1 a4)
(push a4)
(mov '1 a4)
(jmp rmargin)
112
(eval ())
(push (@ 114))
(mov '0 a4)
(jmp terpri)
114
(eval ())
(mov '0 a2)
(mov (& 4) a1)
(jcall makestring)
(push a1)
(mov '-1 a2)
(mov (& 5) a1)
(jcall makestring)
(push a1)
(mov (& 6) a4)
(diff '1 a4)
(push '0)
(push '0)
(mov (& 3) a3)
(mov 'bitvector (cdr a3))
(mov 'bitvector (cdr a1))
(mov (& 9) a2)
(bra 116)
115
(push a2)
(push (@ 117))
(push 'get-byte-line)
(push (@ 118))
(push 'display)
(push (& 15))
(mov '2 a4)
(jmp send)
118
(eval ())
(push a1)
(push (& 14))
(push (& 6))
(push (& 9))
(mov '5 a4)
(jmp send)
117
(eval ())
(mov (& 2) a4)
(plus '1 a4)
(mov a4 (& 2))
(btnil (cvalq #:system:compressed-icon) 119)
(mov (& 3) a2)
(mov (& 4) a1)
(jcall equal)
(btnil a1 119)
(cabeq (& 2) '1 119)
(mov (& 1) a4)
(plus '1 a4)
(mov a4 (& 1))
(mov a4 a2)
(bra 120)
119
(cabeq (& 1) '0 122)
(push (@ 123))
(push (& 2))
(mov '1 a4)
(jmp print)
123
(eval ())
122
(push (@ 124))
(push (& 5))
(mov '1 a4)
(jmp print)
124
(eval ())
(push (& 4))
(mov (& 4) (& 5))
(pop a4)
(mov a4 (& 3))
(mov '0 (& 1))
(mov '0 a2)
120
(pop a2)
116
(sobgez a2 115)
(cabeq (& 0) '0 125)
(push (@ 127))
(push (& 1))
(mov '1 a4)
(jmp print)
127
(eval ())
(bra 126)
125
(mov nil a1)
126
(adjstk '4)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 111) a3)
110
(push a3)
(push a2)
(push (@ 128))
(push (& 4))
(mov '1 a4)
(jmp rmargin)
128
(eval ())
(pop a2)
(pop a3)
(pop a1)
(bri a3)
111
(eval ())
(adjstk '1)
108
(push (@ 129))
(push '93)
(mov '1 a4)
(jmp princn)
129
(eval ())
(btnil (cvalq #:system:print-bitmap-flag) 131)
(push (@ 132))
(push '39)
(mov '1 a4)
(jmp princn)
132
(eval ())
131
(push (@ 133))
(push '40)
(mov '1 a4)
(jmp princn)
133
(eval ())
(btnil (cvalq #:system:print-for-read) 135)
(push (@ 136))
(mov '0 a4)
(jmp all-colors)
136
(eval ())
(push nil)
(push a1)
137
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (car a4) (& 1))
(btnil (car a4) 138)
(push (@ 139))
(push '35)
(mov '1 a4)
(jmp princn)
139
(eval ())
(push (@ 140))
(push '91)
(mov '1 a4)
(jmp princn)
140
(eval ())
(push (@ 141))
(push (@ 142))
(push 'extend)
(push (& 4))
(mov '2 a4)
(jmp send)
142
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
141
(eval ())
(push (@ 143))
(push '32)
(mov '1 a4)
(jmp princn)
143
(eval ())
(push (@ 144))
(push (@ 145))
(push 'red-component)
(push (& 4))
(mov '2 a4)
(jmp send)
145
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
144
(eval ())
(push (@ 146))
(push '32)
(mov '1 a4)
(jmp princn)
146
(eval ())
(push (@ 147))
(push (@ 148))
(push 'green-component)
(push (& 4))
(mov '2 a4)
(jmp send)
148
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
147
(eval ())
(push (@ 149))
(push '32)
(mov '1 a4)
(jmp princn)
149
(eval ())
(push (@ 150))
(push (@ 151))
(push 'blue-component)
(push (& 4))
(mov '2 a4)
(jmp send)
151
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
150
(eval ())
(push (@ 152))
(push '32)
(mov '1 a4)
(jmp princn)
152
(eval ())
(push (@ 153))
(push (@ 154))
(push 'mutable)
(push (& 4))
(mov '2 a4)
(jmp send)
154
(eval ())
(push a1)
(mov '1 a4)
(jmp prin)
153
(eval ())
(push (@ 155))
(push '93)
(mov '1 a4)
(jmp princn)
155
(eval ())
(push (@ 156))
(mov '0 a4)
(jmp terpri)
156
(eval ())
(bra 137)
138
(adjstk '2)
135
(push (@ 157))
(push '41)
(mov '1 a4)
(jmp princn)
157
(eval ())
(push (@ 158))
(push '41)
(mov '1 a4)
(jmp princn)
158
(eval ())
(adjstk '3)
(return)
))
(loader'((entry #:bitmap:make-assoc-table subr1)
(push a1)
(push nil)
(push nil)
(push nil)
101
(btnil (& 3) 102)
(mov (& 3) a4)
(mov (cdr a4) (& 3))
(mov (car a4) (& 1))
(mov (& 1) a1)
(call #:bitmap:matching-color)
(mov a1 (& 0))
(hpxmov (& 1) '0 a4)
(push a4)
(push (@ 105))
(push 'extend)
(push a1)
(mov '2 a4)
(jmp send)
105
(eval ())
(pop a4)
(cabeq a4 a1 101)
(hpxmov (& 1) '0 a1)
(push a1)
(push (@ 106))
(push 'extend)
(push (& 3))
(mov '2 a4)
(jmp send)
106
(eval ())
(mov (& 3) a3)
(mov a1 a2)
(pop a1)
(jcall acons)
(mov a1 (& 2))
(bra 101)
102
(mov (& 2) a1)
(adjstk '4)
(return)
))
(loader'((entry #:bitmap:matching-color subr1)
(push a1)
(push (@ 101))
(mov '0 a4)
(jmp all-colors)
101
(eval ())
(push nil)
(push nil)
(push '300000.)
(push nil)
(push a1)
102
(btnil (& 0) 103)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(mov (car a4) (& 1))
(push (@ 104))
(push (@ 107))
(push 'mutable)
(push (& 4))
(mov '2 a4)
(jmp send)
107
(eval ())
(hpxmov (& 6) '4 a4)
(cabeq a1 a4 105)
(mov '150000. a4)
(bra 106)
105
(mov '0 a4)
106
(push a4)
(hpxmov (& 7) '1 a1)
(push a1)
(push (@ 108))
(push 'red-component)
(push (& 6))
(mov '2 a4)
(jmp send)
108
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 a1)
(jcall abs)
(push a1)
(hpxmov (& 8) '2 a1)
(push a1)
(push (@ 109))
(push 'green-component)
(push (& 7))
(mov '2 a4)
(jmp send)
109
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 a1)
(jcall abs)
(push a1)
(hpxmov (& 9) '3 a1)
(push a1)
(push (@ 110))
(push 'blue-component)
(push (& 8))
(mov '2 a4)
(jmp send)
110
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 a1)
(jcall abs)
(push a1)
(mov '4 a4)
(jmp |+|)
104
(eval ())
(mov a1 (& 4))
(push (@ 113))
(push a1)
(push (& 4))
(mov '2 a4)
(jmp <)
113
(eval ())
(btnil a1 102)
(mov (& 4) (& 2))
(mov (& 1) (& 3))
(bra 102)
103
(mov (& 3) a1)
(adjstk '6)
(return)
))
(loader'((fentry substitute-color subr3)
(entry substitute-color subr3)
(push a1)
(push a2)
(mov a3 a2)
(pop a1)
(jcall cons)
(jcall ncons)
(mov a1 a2)
(pop a1)
(jmp subst-colors)
))
(loader'((fentry subst-colors subr2)
(entry subst-colors subr2)
(push a2)
(push a1)
(mov 'bitmap a2)
(jcall typep)
(bfnil a1 102)
(mov (& 0) a3)
(mov '#:display:errnotabitmap a2)
(mov 'subst-colors a1)
(jcall error)
102
(mov (& 1) a1)
(jcall listp)
(bfnil a1 104)
(mov (& 1) a3)
(mov 'errnla a2)
(mov 'subst-colors a1)
(jcall error)
104
(push nil)
(push nil)
(push nil)
(push (& 4))
105
(bfcons (& 0) 106)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a1)
(jcall listp)
(bfnil a1 108)
(mov (& 0) a3)
(mov 'errnla a2)
(mov 'subst-colors a1)
(jcall error)
108
(mov (& 0) a4)
(mov (car a4) (& 3))
(mov (cdr a4) (& 2))
(mov 'color a2)
(mov (& 3) a1)
(jcall typep)
(btnil a1 111)
(hpxmov (& 3) '5 a4)
(bfnil a4 110)
111
(mov (& 3) a3)
(mov '#:display:errnotacolor a2)
(mov 'subst-colors a1)
(jcall error)
110
(mov 'color a2)
(mov (& 2) a1)
(jcall typep)
(btnil a1 114)
(hpxmov (& 2) '5 a4)
(bfnil a4 113)
114
(mov (& 2) a3)
(mov '#:display:errnotacolor a2)
(mov 'subst-colors a1)
(jcall error)
113
(cabeq (& 3) (& 2) 116)
(push (@ 117))
(push 'extend)
(push (& 5))
(mov '2 a4)
(jmp send)
117
(eval ())
(push a1)
(push (@ 118))
(push 'extend)
(push (& 5))
(mov '2 a4)
(jmp send)
118
(eval ())
(mov a1 a2)
(pop a1)
(jcall cons)
(mov (& 4) a2)
(jcall cons)
(mov a1 (& 4))
116
(adjstk '1)
(bra 105)
106
(adjstk '1)
(push (@ 121))
(push 'display-depth)
(hpxmov (& 5) '3 a4)
(push a4)
(mov '2 a4)
(jmp send)
121
(eval ())
(cnble a1 '1 119)
(push (@ 122))
(push 'subst-colors)
(hpxmov (& 5) '3 a4)
(push a4)
(push (& 6))
(push (& 6))
(mov '4 a4)
(jmp send)
122
(eval ())
(adjstk '5)
(return)
119
(mov nil a1)
(adjstk '5)
(return)
))
(loader'((fentry #:display:subst-colors subr3)
(entry #:display:subst-colors subr3)
(mov a1 a3)
(mov '#:bitmap:not-yet-implemented a2)
(mov 'subst-colors a1)
(jmp error)
))
(loader '((end)))
