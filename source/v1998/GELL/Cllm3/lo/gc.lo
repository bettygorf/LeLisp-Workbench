(loader '(
(listext (strctacc sendbi supsend csend senderro subtypep typep frtree frcons tconsp tconscl tconsmk tcons gcalarm gcalarb gcuser gcswcons smpstrg smpvect gcstmrk llsend ini_gc hgc gcnumb gcfloat gcvect gcstrg gcsymb gccons gettype gcinfo list getbi getfns sysprot ffuncall funcall probjt inicst inisymb errvec erroob errudm errudf errsym errstc errnaa errwna errnla errato errfv errfn errff errfr errfm errfsgc errfs itsoft evalan evalt))
(entry startmodule subr0)
	(title gc)
	(xrefi llinit bstack)
	(xrefi llinit fcons)
	(xrefi llinit bvar)
	(xrefi llinit mstack)
	(xrefi llinit estack)
	(xrefi llinit bcons)
	(xrefi llinit bsymb)
	(xrefi llinit bstrg)
	(xrefi llinit fstrg)
	(xrefi llinit bcode)
	(xrefi llinit ccode)
	(xrefi llinit ecode)
	(xrefi llinit bvect)
	(xrefi llinit fvect)
	(xrefi llinit bheap)
	(xrefi llinit cheap)
	(xrefi llinit eheap)
	(xrefi llinit bnumb)
	(xrefi llinit fnumb)
	(xrefi llinit cnumb)
	(xrefi llinit bfloat)
	(xrefi llinit ffloat)
	(xrefi llinit fsymb)
	(xrefi llinit hashtab)
	(xrefi llinit |.void|)
	(xrefi llinit |.t|)
	(xrefi llinit |.undef|)
	(xrefi llinit |.itsoft|)
	(xrefi llinit |.llsystem|)
	(xrefp llinit itsoft)
	(xrefi llinit cstsyste)
	(xrefi llinit itstate)
	(xrefi toperr |.syserror|)
	(xrefp toperr errfs)
	(xrefp toperr errfsgc)
	(xrefp toperr errfm)
	(xrefp toperr errfr)
	(xrefp toperr errff)
	(xrefp toperr errfn)
	(xrefp toperr errfv)
	(xrefp toperr errato)
	(xrefp toperr errnla)
	(xrefp toperr errwna)
	(xrefp toperr errnaa)
	(xrefp toperr errstc)
	(xrefp toperr errsym)
	(xrefp toperr errudf)
	(xrefp toperr errudm)
	(xrefp toperr erroob)
	(xrefp toperr errvec)
	(xrefi physio curprmpt)
	(xrefi physio tabchan)
	(xrefi physio cntrlc)
	(xrefi physio bufch)
	(xrefi physio rubstrg)
	(xrefp read inisymb)
	(xrefp read inicst)
	(xrefi read asymb)
	(xrefi read impld)
	(xrefi read ringur)
	(xrefi read tabch)
	(xrefi read cachch)
	(xrefi read bufat)
	(xrefi read curread)
	(xrefi read cpkgc)
	(xrefi read impli)
	(xrefi macroch tabctyp)
	(xrefi macroch tabccod)
	(xrefp print probjt)
	(xrefi print bufpn)
	(xrefi print iexpld)
	(xrefi print lexpld)
	(xrefp eval funcall)
	(xrefp eval ffuncall)
	(xrefp eval sysprot)
	(xrefi eval llink)
	(xrefi eval evalst)
	(xrefi eval forme)
	(xrefi eval funct)
	(xrefi eval savea1)
	(xrefi eval savea2)
	(xrefi eval savea3)
	(xrefi eval savea4)
	(xrefi eval errname)
	(xrefi eval intret)
	(xrefi eval intllink)
	(xrefi cntrl tabtypfn)
	(xrefi cntrl tabcodfn)
	(xrefp symbs getfns)
	(xrefp symbs getbi)
	(xrefp fntstd list)
	(xrefi fntstd |.llcons|)
	(xrefi fntstd |.llnull|)
	(xrefi number |.llfloat|)
	(xrefi number |.llfix|)
	(xrefi number fzero)
	(xrefi number fltun)
	(xrefi number fltmun)
	(xrefi number fltimax)
	(xrefi number fltimin)
	(xrefi string |.string|)
	(xrefi string |.vector|)
	(xrefi string |.ffsymbol|)
	(xrefi string bufstrg)
	(xdefp gcinfo)
	(xdefp gettype)
	(xdefp gccons)
	(xdefp gcsymb)
	(xdefp gcstrg)
	(xdefp gcvect)
	(xdefp gcfloat)
	(xdefp gcnumb)
	(xdefp hgc)
	(xdefp ini_gc)
	(xdefp llsend)
	(xdefp gcstmrk)
	(xdefp smpvect)
	(xdefp smpstrg)
	(impure)
	(ladr ngccons 0)
	(ladr ngcsymb 0)
	(ladr ngcstrg 0)
	(ladr ngcvect 0)
	(ladr ngcfloat 0)
	(ladr ngcnumb 0)
	(ladr ngch 0)
	(ladr ngcuser 0)
	(ladr freenu 0)
	(ladr freenm 0)
	(ladr freefu 0)
	(ladr freefm 0)
	(ladr freevu 0)
	(ladr freevm 0)
	(ladr freesu 0)
	(ladr freesm 0)
	(ladr freeyu 0)
	(ladr freeym 0)
	(ladr freelu 0)
	(ladr freelm 0)
	(ladr swheap 0)
	(ladr cpheap 0)
	(ladr oswheap 0)
	(pure)
ini_gc
	(eval ())
	(makfnt gcuser '2 (strg "gc"))
	(makfnt gcalarm '7 (strg "gcalarm"))
	(makfnt gcalarb '15 (strg "gc-before-alarm"))
	(makfnt gcinfo '6 (strg "gcinfo"))
	(makcst sizecd '4 (strg "code"))
	(makcst sizehp '4 (strg "heap"))
	(makfnt tconscl '7 (strg "tconscl"))
	(makfnt tconsmk '7 (strg "tconsmk"))
	(makfnt tcons '5 (strg "tcons"))
	(makfnt tconsp '6 (strg "tconsp"))
	(makfnt frcons '8 (strg "freecons"))
	(makfnt frtree '8 (strg "freetree"))
	(makfnt gettype '7 (strg "type-of"))
	(makfnt subtypep '8 (strg "subtypep"))
	(makfnt typep '5 (strg "typep"))
	(makfnt llsend '4 (strg "send"))
	(makfnt supsend '10 (strg "send-super"))
	(makfnt csend '5 (strg "csend"))
	(makfnt sendbi '5 (strg "send2"))
	(makfnt senderro '10 (strg "send-error"))
	(mov |.llsystem| cpkgc)
	(makfnt strctacc '12 (strg "structaccess"))
	(makcst bigtype '11 (strg "bignum-type"))
	(makfnt smpvect '12 (strg "mapallvector"))
	(makfnt smpstrg '12 (strg "mapallstring"))
	(movnil cpkgc)
	(mov '0 ngccons)
	(mov '0 ngcsymb)
	(mov '0 ngcstrg)
	(mov '0 ngcvect)
	(mov '0 ngcfloat)
	(mov '0 ngcnumb)
	(mov '0 ngcuser)
	(mov '0 ngch)
	(return)
hgc
	(eval ())
	(incr ngch)
	(bra gcgo)
gccons
	(eval ())
	(incr ngccons)
	(push (@ ret_call_gcgo_1))
	(bra gcgo)
ret_call_gcgo_1
	(eval ())
	(cnbgt freelm '0 gcret)
	(cnbge freelu '400 gcret)
	(bra errfm)
gcsymb
	(eval ())
	(incr ngcsymb)
	(push (@ ret_call_gcgo_2))
	(bra gcgo)
ret_call_gcgo_2
	(eval ())
	(cabne fsymb '0 gcret)
	(bra errato)
gcstrg
	(eval ())
	(incr ngcstrg)
	(push (@ ret_call_gcgo_3))
	(bra gcgo)
ret_call_gcgo_3
	(eval ())
	(bfnil fstrg gcret)
	(bra errfr)
gcvect
	(eval ())
	(incr ngcvect)
	(push (@ ret_call_gcgo_4))
	(bra gcgo)
ret_call_gcgo_4
	(eval ())
	(bfnil fvect gcret)
	(bra errfv)
gcfloat
	(eval ())
	(incr ngcfloat)
	(push (@ ret_call_gcgo_5))
	(bra gcgo)
ret_call_gcgo_5
	(eval ())
	(cnbgt freefm '0 gcret)
	(cnbgt freefu '0 gcret)
	(bra errff)
gcnumb
	(eval ())
	(incr ngcnumb)
	(push (@ ret_call_gcgo_6))
	(bra gcgo)
ret_call_gcgo_6
	(eval ())
	(cnbgt freenm '0 gcret)
	(cnbgt freenu '0 gcret)
	(bra errfn)
gcret
	(eval ())
	(return)
gcgo
	(eval ())
	(endc)
	(push a1)
	(push a2)
	(push a3)
	(push a4)
	(push llink)
	(push evalst)
	(push forme)
	(push funct)
	(push savea1)
	(push savea2)
	(push savea3)
	(push savea4)
	(push errname)
	(push intret)
	(push intllink)
	(push iexpld)
	(push impli)
	(push ringur)
	(push curread)
	(push impld)
	(push lexpld)
	(stack a4)
	(push asymb)
	(push tabch)
	(push cachch)
	(push bufat)
	(push cpkgc)
	(push tabtypfn)
	(push tabcodfn)
	(push tabctyp)
	(push tabccod)
	(push bufpn)
	(push bufstrg)
	(push curprmpt)
	(push tabchan)
	(push cntrlc)
	(push bufch)
	(push rubstrg)
	(push cstsyste)
	(push fzero)
	(push fltun)
	(push fltmun)
	(push fltimax)
	(push fltimin)
	(push a4)
	(movnil iexpld)
	(movnil impli)
	(movnil llink)
	(endc)
	(mov |.gcalarb| a1)
	(movnil a2)
	(push (@ ret_call_itsoft_7))
	(bra itsoft)
ret_call_itsoft_7
	(eval ())
	(push (@ ret_call_gcnoit_8))
	(bra gcnoit)
ret_call_gcnoit_8
	(eval ())
	(endc)
	(mov |.gcalarm| a1)
	(movnil a2)
	(push (@ ret_call_itsoft_9))
	(bra itsoft)
ret_call_itsoft_9
	(eval ())
	(endc)
	(pop a4)
	(sstack a4)
	(pop lexpld)
	(pop impld)
	(pop curread)
	(pop ringur)
	(pop impli)
	(pop iexpld)
	(pop intllink)
	(pop intret)
	(pop errname)
	(pop savea4)
	(pop savea3)
	(pop savea2)
	(pop savea1)
	(pop funct)
	(pop forme)
	(pop evalst)
	(pop llink)
	(pop a4)
	(pop a3)
	(pop a2)
	(pop a1)
gcend
	(eval ())
gcpopj
	(return)
gcnoit
	(eval ())
	(cabeq itstate '0 gcst0)
	(mov (@ gcst00) a3)
	(push (@ ret_call_sysprot_10))
	(bra sysprot)
ret_call_sysprot_10
	(eval ())
	(pop a1)
	(mov '1 itstate)
	(bri a3)
gcst00
	(mov '0 itstate)
gcst0
	(eval ())
	(gcstart)
	(endc)
gcstmrk
	(eval ())
	(stack a4)
	(mov bstack a3)
gcst1
	(popr a4 a1)
	(push (@ ret_call_mark_11))
	(bra mark)
ret_call_mark_11
	(eval ())
	(cabne a4 a3 gcst1)
	(mov hashtab a1)
	(stmark a1)
	(endc)
	(hgsize hashtab a4)
	(decr a4)
gcat0
	(hpxmov hashtab a4 a4)
	(bra gcat8)
gcat1
	(mov a4 a3)
	(btstrg (pname a4) gcat5)
gcat2
	(mov (pname a4) a4)
gcat5
	(eval ())
	(mov (cval a4) a1)
	(cabeq a1 |.undef| gcatm1)
	(push (@ ret_call_mark_12))
	(bra mark)
ret_call_mark_12
	(eval ())
gcatm1
	(mov (plist a4) a1)
	(btnil a1 gcatm2)
	(push (@ ret_call_mark_13))
	(bra mark)
ret_call_mark_13
	(eval ())
gcatm2
	(mov (fval a4) a1)
	(cabeq a1 '0 gcatm3)
	(push (@ ret_call_mark_14))
	(bra mark)
ret_call_mark_14
	(eval ())
gcatm3
	(mov (pkgc a4) a1)
	(btnil a1 gcatm4)
	(push (@ ret_call_mark_15))
	(bra mark)
ret_call_mark_15
	(eval ())
gcatm4
	(mov (oval a4) a1)
	(btnil a1 gcatm5)
	(push (@ ret_call_mark_16))
	(bra mark)
ret_call_mark_16
	(eval ())
gcatm5
	(mov (alink a4) a1)
	(btstrg a1 gcatm9)
	(mov (pname a4) a1)
	(btstrg a1 gcatm9)
	(mov (alink a1) a1)
gcatm9
	(push (@ ret_call_mark_17))
	(bra mark)
ret_call_mark_17
	(eval ())
	(cabne a4 a3 gcat2)
gcat6
	(mov (alink a4) a4)
gcat8
	(btsymb a4 gcat1)
	(sobgez a4 gcat0)
gcat9
	(eval ())
	(bra gcompact)
mark
	(eval ())
	(gcmark)
	(return)
gcompact
	(eval ())
	(mov bheap a3)
	(mov bheap a4)
	(bra hsweep8)
hsweep8
	(chblt a3 cheap hsweep2)
	(mov a4 cheap)
hsweep9
	(eval ())
	(bra gcsweep)
hsweep2
	(eval ())
	(mov (val a3) a1)
	(btstrg a1 hsweep4)
	(btvect a1 hsweep5)
	(btfloat a1 hsweep6)
	(btsymb a1 hsweep7)
	(ttymsg '13 (strg "* HEAP-OVNI *"))
	(hovni bheap cheap eheap oswheap)
	(bra hsweep9)
hsweep4
	(eval ())
	(mov a3 oswheap)
	(mov (typ a3) a2)
	(nxhb a2 a3)
	(bfmark a1 hsweep8)
	(cabne oswheap a4 hsweep41)
	(mov a3 a4)
	(bra hsweep8)
hsweep41
	(hblt oswheap a3 a4)
	(mov a4 (val a1))
	(nxhb a2 a4)
	(bra hsweep8)
hsweep5
	(eval ())
	(mov a3 oswheap)
	(mov (typ a3) a2)
	(nxhp a2 a3)
	(bfmark a1 hsweep8)
	(cabne oswheap a4 hsweep51)
	(mov a3 a4)
	(bra hsweep8)
hsweep51
	(hblt oswheap a3 a4)
	(mov a4 (val a1))
	(nxhp a2 a4)
	(bra hsweep8)
hsweep6
	(eval ())
	(mov a3 oswheap)
	(nxhf a3)
	(bfmark a1 hsweep8)
	(cabne oswheap a4 hsweep61)
	(mov a3 a4)
	(bra hsweep8)
hsweep61
	(hblt oswheap swheap a4)
	(mov a4 (val a1))
	(nxhf a4)
	(bra hsweep8)
hsweep7
	(eval ())
	(mov a3 oswheap)
	(nxhs a3)
	(bfmark a1 hsweep8)
	(cabne oswheap a4 hsweep71)
	(mov a3 a4)
	(bra hsweep8)
hsweep71
	(hblt oswheap a3 a4)
	(mov a4 (val a1))
	(nxhs a4)
	(bra hsweep8)
gcsweep
	(eval ())
	(endc)
	(mov '0 a1)
	(mov '0 a2)
	(mov '0 a3)
	(mov cnumb a4)
	(bfnumb a4 gcswn4)
gcswn1
	(tcmark a4 gcswn3)
	(mov a1 (val a4))
	(mov a4 a1)
	(incrink a2 a3)
gcswn3
	(nxnumb a4 gcswn1)
gcswn4
	(mov a1 fnumb)
	(mov a2 freenu)
	(mov a3 freenm)
	(endc)
	(mov '0 a1)
	(mov '0 a2)
	(mov '0 a3)
	(mov bfloat a4)
	(bffloat a4 gcswf4)
gcswf1
	(tcmark a4 gcswf3)
	(mov a1 (val a4))
	(mov a4 a1)
	(incrink a2 a3)
gcswf3
	(nxfloat a4 gcswf1)
gcswf4
	(eval ())
	(mov a1 ffloat)
	(mov a2 freefu)
	(mov a3 freefm)
	(endc)
	(movnil a1)
	(mov '0 a2)
	(mov '0 a3)
	(mov bvect a4)
gcswv1
	(tcmark a4 gcswv2)
	(mov a1 (val a4))
	(mov a4 a1)
	(incrink a2 a3)
gcswv2
	(nxvect a4 gcswv1)
	(mov a1 fvect)
	(mov a2 freevu)
	(mov a3 freevm)
	(endc)
	(movnil a1)
	(mov '0 a2)
	(mov '0 a3)
	(mov bstrg a4)
gcsws1
	(tcmark a4 gcsws2)
	(mov a1 (val a4))
	(mov a4 a1)
	(incrink a2 a3)
gcsws2
	(nxstrg a4 gcsws1)
	(mov a1 fstrg)
	(mov a2 freesu)
	(mov a3 freesm)
	(endc)
	(mov '0 a2)
	(mov '0 a3)
	(mov fsymb a1)
	(bra gcswyc3)
gcswyc2
	(mov (alink a1) a1)
	(incrink a2 a3)
gcswyc3
	(btsymb a1 gcswyc2)
	(mov a2 freeyu)
	(mov a3 freeym)
	(hgsize hashtab a1)
	(bra gcswy9)
gcswy2
	(mov a1 a2)
	(hpxmov hashtab a1 a1)
	(bra gcswy8)
gcswy3
	(mov a1 a3)
	(mov a1 a4)
gcswy4
	(tcmark a1 gcswy5)
	(bfvar a1 gcswy5)
	(cabne (cval a1) |.undef| gcswy5)
	(bfnil (plist a1) gcswy5)
	(bfnil (oval a1) gcswy5)
	(push a2)
	(gftype a1 a2)
	(cnbeq a2 '0 gcswys)
	(pop a2)
gcswy5
	(eval ())
	(btstrg (pname a1) gcswy6)
gcswy50
	(mov a1 a4)
	(mov (pname a1) a1)
	(cabne a1 a3 gcswy4)
gcswy6
	(mov a3 a2)
	(mov (alink a3) a1)
gcswy8
	(btsymb a1 gcswy3)
gcswy9
	(sobgez a1 gcswy2)
	(bra gcswcons)
gcswys
	(eval ())
	(pop a2)
	(endc)
	(btstrg (pname a1) gcswys1)
	(cabne a1 a3 gcswys2)
	(bra gcswys3)
gcswys1
	(eval ())
	(endc)
	(mov (alink a1) a4)
	(btfix a2 gcswys12)
	(mov a4 (alink a2))
	(bra gcswys14)
gcswys12
	(hpmovx a4 hashtab a2)
gcswys14
	(mov fsymb (alink a1))
	(mov a1 fsymb)
	(incrink freeyu freeym)
	(mov a4 a1)
	(bra gcswy8)
gcswys2
	(eval ())
	(endc)
	(mov (pname a1) (pname a4))
	(cabeq a3 (pname a3) gcswys20)
	(mov fsymb (alink a1))
	(mov a1 fsymb)
	(incrink freeyu freeym)
	(mov a4 a1)
	(bra gcswy50)
gcswys20
	(eval ())
	(mov (alink a1) (pname a3))
	(mov fsymb (alink a1))
	(mov a1 fsymb)
	(incrink freeyu freeym)
	(bra gcswy6)
gcswys3
	(eval ())
	(endc)
	(btfix a2 gcswys30)
	(mov (pname a3) (alink a2))
	(bra gcswys31)
gcswys30
	(hpmovx (pname a3) hashtab a2)
gcswys31
	(mov a3 a4)
gcswys32
	(mov (pname a4) a4)
	(cabne (pname a4) a3 gcswys32)
	(mov (pname a3) (pname a4))
	(mov (pname a3) a3)
	(cabne a3 (pname a3) gcswys33)
	(mov (alink a3) (pname a3))
	(mov (alink a1) (alink a3))
	(bra gcswys34)
gcswys33
	(mov (alink a1) (alink a3))
gcswys34
	(mov fsymb (alink a1))
	(mov a1 fsymb)
	(incrink freeyu freeym)
	(mov a3 a1)
	(bra gcswy3)
	(xdefp gcswcons)
gcswcons
	(eval ())
	(endc)
	(movnil a1)
	(mov '0 a2)
	(mov '0 a3)
	(mov bcons a4)
	(swpcons a1 a4 a2 a3)
	(sfcons a1)
	(mov a2 freelu)
	(mov a3 freelm)
	(bra gcswend)
gcswend
	(eval ())
	(gcstop)
	(return)
	(lentry gcuser 5)
	(cnbeq a4 '1 gcuser5)
	(cnbeq a4 '0 gcuser4)
	(mov '1 a1)
	(mov |.gcuser| a2)
	(bra errwna)
gcuser4
	(movnil a1)
	(push a1)
gcuser5
	(eval ())
	(endc)
	(incr ngcuser)
	(push (@ ret_call_gcgo_18))
	(bra gcgo)
ret_call_gcgo_18
	(eval ())
	(pop a1)
	(bfnil a1 gcinfo0)
	(endc)
	(mov |.t| a1)
	(return)
	(lentry gcalarb 1)
	(movnil a1)
	(return)
	(lentry gcalarm 1)
	(movnil a1)
	(return)
	(lentry gcinfo 5)
	(cabeq a4 '0 gcinfo0)
	(cabeq a4 '1 gcinfo1)
	(mov '1 a1)
	(mov |.gcinfo| a2)
	(bra errwna)
gcinfo0
	(eval ())
	(movnil a4)
gcinfou
	(eval ())
	(push |.gcuser|)
	(push ngccons)
	(push ngcsymb)
	(push ngcstrg)
	(push ngcvect)
	(push ngcfloat)
	(push ngcnumb)
	(push ngch)
	(push ngcuser)
	(push |.llcons|)
	(mov freelu a1)
	(mov freelm a2)
	(push (@ ret_call_gcinfz_19))
	(bra gcinfz)
ret_call_gcinfz_19
	(eval ())
	(push a1)
	(push |.ffsymbol|)
	(mov freeyu a1)
	(mov freeym a2)
	(push (@ ret_call_gcinfz_20))
	(bra gcinfz)
ret_call_gcinfz_20
	(eval ())
	(push a1)
	(push |.string|)
	(mov freesu a1)
	(mov freesm a2)
	(push (@ ret_call_gcinfz_21))
	(bra gcinfz)
ret_call_gcinfz_21
	(eval ())
	(push a1)
	(push |.vector|)
	(mov freevu a1)
	(mov freevm a2)
	(push (@ ret_call_gcinfz_22))
	(bra gcinfz)
ret_call_gcinfz_22
	(eval ())
	(push a1)
	(push |.llfloat|)
	(mov freefu a1)
	(mov freefm a2)
	(push (@ ret_call_gcinfz_23))
	(bra gcinfz)
ret_call_gcinfz_23
	(eval ())
	(push a1)
	(push |.llfix|)
	(mov freenu a1)
	(mov freenm a2)
	(push (@ ret_call_gcinfz_24))
	(bra gcinfz)
ret_call_gcinfz_24
	(eval ())
	(push a1)
	(push |.sizehp|)
	(btnil a4 gcinfou2)
	(convtok bheap eheap a1)
	(bra gcinfou3)
gcinfou2
	(convtok cheap eheap a1)
gcinfou3
	(ncons a1)
	(push a1)
	(push |.sizecd|)
	(btnil a4 gcinfou4)
	(convtok bcode ecode a1)
	(bra gcinfou5)
gcinfou4
	(convtok ccode ecode a1)
gcinfou5
	(ncons a1)
	(push a1)
	(mov '25 a4)
	(bra list)
gcinfo1
	(eval ())
	(pop a1)
	(mov '0 a2)
	(mov '0 a3)
	(mov bnumb a4)
	(bfnumb a4 gcinfon9)
gcinfon1
	(incrink a2 a3)
	(nxnumb a4 gcinfon1)
gcinfon9
	(mov a2 freenu)
	(mov a3 freenm)
	(mov '0 a2)
	(mov '0 a3)
	(mov bfloat a4)
	(bffloat a4 gcinfof9)
gcinfof1
	(incrink a2 a3)
	(nxfloat a4 gcinfof1)
gcinfof9
	(mov a2 freefu)
	(mov a3 freefm)
	(mov '0 a2)
	(mov '0 a3)
	(mov bvect a4)
gcinfov1
	(incrink a2 a3)
	(nxvect a4 gcinfov1)
	(mov a2 freevu)
	(mov a3 freevm)
	(mov '0 a2)
	(mov '0 a3)
	(mov bstrg a4)
gcinfos1
	(incrink a2 a3)
	(nxstrg a4 gcinfos1)
	(mov a2 freesu)
	(mov a3 freesm)
	(mov '0 a2)
	(mov '0 a3)
	(mov bsymb a4)
gcinfoy1
	(incrink a2 a3)
	(nxsymb a4 gcinfoy1)
	(mov a2 freeyu)
	(mov a3 freeym)
	(mov '0 a2)
	(mov '0 a3)
	(mov bcons a4)
gcinfol1
	(incrink a2 a3)
	(nxcons a4 gcinfol1)
	(mov a2 freelu)
	(mov a3 freelm)
	(mov '0 a4)
	(bra gcinfou)
gcinfz
	(eval ())
	(cnbeq a2 '0 gcinfz9)
	(cnbge a2 '32 gcinfz1)
	(times '1024 a2)
	(plus a2 a1)
	(bra gcinfz9)
gcinfz1
	(mov a2 a1)
	(ncons a1)
gcinfz9
	(return)
	(lentry tcons 3)
	(xcons a2 a1)
	(stinvsbl a1)
	(return)
	(lentry tconsmk 2)
	(bfcons a1 tcmker)
	(stinvsbl a1)
	(return)
tcmker
	(mov |.tconsmk| a2)
	(bra errnla)
	(lentry tconscl 2)
	(bfcons a1 tccler)
	(clinvsbl a1)
	(return)
tccler
	(mov |.tconscl| a2)
	(bra errnla)
	(lentry tconsp 2)
	(bfcons a1 tconsp1)
	(btinvsbl a1 tconsp2)
tconsp1
	(movnil a1)
tconsp2
	(return)
	(lentry frcons 2)
	(cabeq itstate '0 frcs1)
	(mov (@ frcs0) a3)
	(push (@ ret_call_sysprot_25))
	(bra sysprot)
ret_call_sysprot_25
	(eval ())
	(pop a1)
	(mov '1 itstate)
	(bri a3)
frcs0
	(eval ())
	(mov '0 itstate)
frcs1
	(gfcons a2)
	(bfcons a1 frcser)
	(movnil (car a1))
	(mov a2 (cdr a1))
	(clinvsbl a1)
	(sfcons a1)
	(movnil a2)
	(movnil a1)
	(return)
frcser
	(mov |.frcons| a2)
	(bra errnla)
	(lentry frtree 2)
	(cabeq itstate '0 frtr1)
	(mov (@ frtr0) a3)
	(push (@ ret_call_sysprot_26))
	(bra sysprot)
ret_call_sysprot_26
	(eval ())
	(pop a1)
	(mov '1 itstate)
	(bri a3)
frtr0
	(eval ())
	(mov '0 itstate)
frtr1
	(gfcons a4)
	(push (@ ret_call_frtr3_27))
	(bra frtr3)
ret_call_frtr3_27
	(eval ())
	(sfcons a4)
	(movnil a4)
	(movnil a3)
	(movnil a2)
	(movnil a1)
frtret
	(return)
frtr2
	(mov a3 a1)
frtr3
	(bfcons a1 frtret)
frtr4
	(mov (car a1) a2)
	(mov (cdr a1) a3)
	(mov a4 (cdr a1))
	(movnil (car a1))
	(clinvsbl a1)
	(mov a1 a4)
	(bfcons a2 frtr2)
	(push a3)
	(mov a2 a1)
	(push (@ ret_call_frtr4_28))
	(bra frtr4)
ret_call_frtr4_28
	(eval ())
	(pop a1)
	(bra frtr3)
	(lentry gettype 2)
	(bfcons a1 gettype0)
	(bfinvsbl a1 gettype2)
	(mov (car a1) a1)
	(btsymb a1 gettyper)
	(btfix a1 gettypfx)
	(bfcons a1 gettyper)
	(bfsymb (car a1) gettypfx)
gettyper
	(return)
gettype0
	(btvect a1 gettype1)
	(btfix a1 gettype6)
	(btfloat a1 gettype5)
	(btstrg a1 gettype1)
	(btnil a1 gettype3)
	(btsymb a1 gettype4)
gettype6
	(mov |.llfix| a1)
	(return)
gettype1
	(mov (typ a1) a1)
	(return)
gettype2
	(mov |.llcons| a1)
	(return)
gettype3
	(mov |.llnull| a1)
	(return)
gettype4
	(mov |.ffsymbol| a1)
	(return)
gettype5
	(mov |.llfloat| a1)
	(return)
gettypfx
	(mov |.bigtype| a1)
	(mov (cval a1) a1)
	(return)
	(lentry typep 3)
	(push (@ subtypep))
	(bra gettype)
	(lentry subtypep 3)
	(bfsymb a1 subtypr1)
	(bfsymb a2 subtypr2)
	(bra subtyp1)
subtyp0
	(mov (pkgc a1) a1)
subtyp1
	(cabeq a1 a2 subtyp3)
	(btcons a1 subtyp5)
	(bfsymb a1 subtyp2)
	(bfnil a1 subtyp0)
subtyp2
	(return)
subtyp3
	(mov |.t| a1)
	(return)
subtyp4
	(pop a1)
	(bfcons a1 subtyp7)
subtyp5
	(push (cdr a1))
	(mov (car a1) a1)
	(push (@ ret_call_subtyp7_29))
	(bra subtyp7)
ret_call_subtyp7_29
	(eval ())
	(btnil a1 subtyp4)
	(adjstk '1)
	(return)
subtyp6
	(mov (pkgc a1) a1)
subtyp7
	(cabeq a1 a2 subtyp9)
	(btcons a1 subtyp5)
	(bfsymb a1 subtyp8)
	(bfnil a1 subtyp6)
subtyp8
	(return)
subtyp9
	(mov |.t| a1)
	(return)
subtypr2
	(mov a2 a1)
subtypr1
	(mov |.subtypep| a2)
	(bra errsym)
	(lentry llsend 5)
	(cnble a4 '1 sender)
	(decr a4)
	(decr a4)
	(xspmov a4 a1)
	(incr a4)
	(bfvect a1 send2)
	(mov (typ a1) a1)
send1
	(eval ())
	(xspmov a4 a2)
	(mov |.void| a3)
	(push a4)
	(push (@ ret_call_getfns_30))
	(bra getfns)
ret_call_getfns_30
	(eval ())
	(pop a4)
	(btnil a1 send3)
	(movxsp (@ gcpopj) a4)
	(bra ffuncall)
send2
	(push (@ ret_call_gettype_31))
	(bra gettype)
ret_call_gettype_31
	(eval ())
	(bra send1)
send3
	(eval ())
	(mov a4 a3)
	(bra send5)
send4
	(pop a2)
	(cons a2 a1)
send5
	(sobgez a3 send4)
	(push a1)
	(mov '2 a4)
	(mov |.senderro| a1)
	(bra ffuncall)
sender
	(mov '2 a1)
	(mov |.llsend| a2)
	(bra errwna)
	(lentry senderro 3)
	(xcons a2 a1)
	(mov |.llsend| a2)
	(bra errudm)
	(lentry csend 5)
	(cnble a4 '2 csender)
	(push (@ csend1))
	(decr a4)
	(decr a4)
	(xspmov a4 a1)
	(bra gettype)
csend1
	(eval ())
	(xspmov a4 a2)
	(mov |.void| a3)
	(push a4)
	(push (@ ret_call_getfns_32))
	(bra getfns)
ret_call_getfns_32
	(eval ())
	(pop a4)
	(btnil a1 csend3)
	(movxsp (@ gcpopj) a4)
	(incr a4)
	(movxsp (@ gcpopj) a4)
	(decr a4)
	(bra ffuncall)
csend3
	(plus '2 a4)
	(bra funcall)
csender
	(mov '3 a1)
	(mov |.csend| a2)
	(bra errwna)
	(lentry supsend 5)
	(cnble a4 '2 supsenr1)
	(push a4)
	(xspmov a4 a2)
	(diff '2 a4)
	(xspmov a4 a1)
	(push (@ ret_call_typep_33))
	(bra typep)
ret_call_typep_33
	(eval ())
	(btnil a1 supsenr3)
	(pop a4)
	(decr a4)
	(xspmov a4 a1)
	(bfsymb a1 supsenr2)
	(mov (pkgc a1) a1)
	(movxsp (@ gcpopj) a4)
	(decr a4)
	(bra send1)
supsenr1
	(mov '3 a1)
	(mov |.supsend| a2)
	(bra errwna)
supsenr2
	(mov |.supsend| a2)
	(bra errsym)
supsenr3
	(mov |.supsend| a2)
	(pop a4)
	(decr a4)
	(xspmov a4 a1)
	(diff '2 a4)
	(xspmov a4 a3)
	(ncons a3)
	(xcons a3 a1)
	(bra erroob)
	(lentry sendbi 5)
	(cnble a4 '2 sendbier)
	(push a4)
	(decr a4)
	(xspmov a4 a1)
	(push (@ ret_call_gettype_34))
	(bra gettype)
ret_call_gettype_34
	(eval ())
	(push a1)
	(xspmov a4 a1)
	(push (@ ret_call_gettype_35))
	(bra gettype)
ret_call_gettype_35
	(eval ())
	(mov a1 a2)
	(pop a1)
	(pop a4)
	(decr a4)
	(xspmov a4 a3)
	(push a4)
	(push (@ ret_call_getbi_36))
	(bra getbi)
ret_call_getbi_36
	(eval ())
	(pop a4)
	(btnil a1 sendbi3)
	(movxsp (@ gcpopj) a4)
	(bra ffuncall)
sendbi2
	(eval ())
	(pop a3)
	(cons a3 a1)
sendbi3
	(eval ())
	(sobgez a4 sendbi2)
	(mov |.sendbi| a2)
	(bra errudm)
sendbier
	(mov '3 a1)
	(mov |.sendbi| a2)
	(bra errwna)
	(lentry strctacc 5)
	(cnbne a4 '5 fieldr1)
	(xspmov '2 a1)
	(bfvect a1 fieldr2)
	(xspmov '4 a2)
	(bfsymb a2 fieldr3)
	(mov (pkgc a2) a2)
	(push a1)
	(push a4)
	(push (@ ret_call_typep_37))
	(bra typep)
ret_call_typep_37
	(eval ())
	(pop a4)
	(pop a2)
	(btnil a1 fieldr4)
	(xspmov '3 a3)
	(cnblt a3 '0 fieldr5)
	(hgsize a2 a4)
	(cnbge a3 a4 fieldr4)
	(topst a4)
fieldn
	(cnbeq a4 '1 fieldget)
	(cnbeq a4 '2 fieldset)
	(mov '1 a1)
	(xspmov '4 a2)
	(bra errwna)
fieldget
	(hpxmov a2 a3 a1)
	(adjstk '5)
	(return)
fieldset
	(xspmov '1 a1)
	(hpmovx a1 a2 a3)
	(adjstk '5)
	(return)
fieldr1
	(mov '5 a1)
	(mov |.strctacc| a2)
	(bra errwna)
fieldr4
	(mov a2 a1)
fieldr2
	(xspmov '4 a2)
	(bra errstc)
fieldr3
	(mov a2 a1)
	(xspmov '4 a2)
	(bra errnaa)
fieldr5
	(mov a3 a1)
	(mov |.strctacc| a2)
	(bra erroob)
	(lentry smpvect 2)
	(mov bvect a2)
smpvect2
	(eval ())
	(btvect (val a2) smpvect4)
	(btnil (val a2) smpvect4)
	(push a2)
	(push a1)
	(push (@ smpvect3))
	(push a1)
	(push a2)
	(mov '2 a4)
	(bra funcall)
smpvect3
	(pop a1)
	(pop a2)
smpvect4
	(nxvect a2 smpvect2)
	(movnil a1)
	(return)
	(lentry smpstrg 2)
	(mov bstrg a2)
smpstrg2
	(eval ())
	(btstrg (val a2) smpstrg4)
	(btnil (val a2) smpstrg4)
	(push a2)
	(push a1)
	(push (@ smpstrg3))
	(push a1)
	(push a2)
	(mov '2 a4)
	(bra funcall)
smpstrg3
	(pop a1)
	(pop a2)
smpstrg4
	(nxstrg a2 smpstrg2)
	(movnil a1)
	(return)
	(end)
))
