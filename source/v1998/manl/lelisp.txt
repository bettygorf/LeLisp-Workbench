


LELISP(L)                LOCAL COMMANDS                 LELISP(L)



NAME
     lelisp, lelispX11, cmplc++  - starts the Le-Lisp system

SYNOPSIS
     lelisp [ -r file ] [cons]

DESCRIPTION
     Starts the Le-Lisp system.  After displaying a banner  iden-
     tifying  the  system,  it  puts the user into an interactive
     loop characterized by the display of the  prompt  "?".   The
     function  (END) terminates a Le-Lisp session and returns the
     user to the shell.  The command _l_e_l_i_s_p_X_1_1  is  identical  to
     _l_e_l_i_s_p  but  starts  Le-Lisp using an image in which the X11
     libraries are already loaded, and  the  _V_i_r_t_u_a_l  _B_i_t_m_a_p  has
     been  initialized  to  |X11|.  (See INIBITMAP in the Le-Lisp
     Reference Manual.)  The command _c_m_p_l_c++ is  similar  to  the
     command   _l_e_l_i_s_p  but  uses  a  different  compiler:  _l_e_l_i_s_p
     integrates the smaller dynamic compiler, while _c_m_p_l_c++  uses
     the module compiler, complice, that generates more efficient
     code.  (Again, see the Le-Lisp Reference Manual and the com-
     mand _c_o_m_p_l_i_c_e(_l).)

     On certain machines  it  is  possible  to  build  executable
     memory  images  called  EXECORE.  In order to do so, use the
     Le-Lisp Makefile and set the Makefile variable EXE to exe in
     the following way:
     % make lelisp EXE=exe
     The two options of the _l_e_l_i_s_p command have no  real  use  in
     EXECORE mode.


OPTIONS
     -r  file
          The option -r makes it possible to restore  the  memory
          image  named  file  when the Le-Lisp interpreter starts
          up.  This memory image must exist and have been created
          by  the  same Le-Lisp system; otherwise, the error mes-
          sage _i_n_c_o_m_p_a_t_i_b_l_e _m_e_m_o_r_y _i_m_a_g_e will  be  displayed  and
          the session will not be started.


     cons This optional argument, cons, is a number  that  speci-
          fies,  in  units of 8 Kcons, the size of the zone allo-
          cated to cons cells.  The default value of the argument
          is  4,  corresponding  to a zone of 32 Kcons - that is,
          256 Kbytes.



CONSTRUCTION
     It is possible to rebuild the default memory images,  or  to
     build others.  This operation is carried out by means of the



Le-Lisp v15.2     Last change: December 1, 1993                 1






LELISP(L)                LOCAL COMMANDS                 LELISP(L)



     command    make(1),     associated     with     the     file
     lelisp/<machine>/Makefile.

     A variety of systems are offered  in  the  standard  Le-Lisp
     Makefile  including  those described in this manual page, or
     for certain implementations, their equivalent  with  64  bit
     allocated  floating point numbers instead of the default 31-
     bit immediate floating point numbers; there may also be con-
     figurations  for other integrated windowing systems, depend-
     ing on the machine on which Le-Lisp is distributed.  Consult
     the  Makefile or the Installation Guide which came with your
     Le-Lisp distribution for more details.

     With the Makefile you can build your own Le-Lisp systems  by
     creating  a  binary,  a  configuration  file,  and finally a
     memory image. This must be done when you need to  statically
     integrate  foreign language object files in a Le-Lisp image.
     To create new images, we advise the user to  create  another
     Makefile  which  manages the compilation of the C or Fortran
     files, and that uses the Le-Lisp Makefile  to  build  a  new
     binary  and possibly a new memory image.  To help you make a
     new image, the Le-Lisp Makefile offers a certain  number  of
     _m_a_k_e_f_i_l_e  _v_a_r_i_a_b_l_e_s  which  can  be  redefined  to meet your
     needs.  This makes it feasible to use the  Le-Lisp  Makefile
     without having to modify it, and thus keeping it independent
     of new versions of Le-Lisp.   The  variables  available  for
     redefinition are:

     USERBIN
          names a new Le-Lisp binary.

     USERXBIN
          has the  same  effect  but  also  links  with  the  X11
          libraries.

     USERO
          contains the list of ".o" files resulting from a  C  or
          Fortran compilation.

     USERFLAGS
          lets you specify additional compilation flags.

     USERLELISP
          lets you choose a new name for  the  memory  image.  By
          default,  the  binary name is the value of the variable
          USERXBIN.  To use a different binary, you should  rede-
          fine the variable USERLELISPBIN.

     USERLELISPBIN
          renames the Le-Lisp  binary  used  to  build  a  memory
          image, USERLELISP.




Le-Lisp v15.2     Last change: December 1, 1993                 2






LELISP(L)                LOCAL COMMANDS                 LELISP(L)



     USERCONF
          specifies the Le-Lisp  file  that  will  configure  the
          memory  image.   In  the  standard distribution,  these
          files        are        in        the         directory
          _l_e_l_i_s_p/<_m_a_c_h_i_n_e>/_c_o_n_f/*_c_o_n_f._l_l .

     USERSIZE
          contains the list of sizes  of  Le-Lisp  memory  zones.
          (See the Le-Lisp Reference Manual for more detail.)  By
          default, they are the same size as for a standard  _l_e_l_-
          _i_s_p.  USERCFILE  declares the pathname of C source file
          so that it can be compiled with the correct compilation
          options;  these  options  allow the object to be linked
          with a Le-Lisp binary.  USEROFILE declares the pathname
          of  the object file produced by compiling $(USERCFILE).
          USERXCFILE just like USERCFILE, but compiles  with  the
          options necessary for X11.  USERXOFILE just like USERO-
          FILE, but with X11.  USERCFLAGS declares your own  com-
          piler  options to be passed to the C compiler when com-
          piling a C source file declared using  $(USERCFILE)  or
          $(USERXCFILE).


EXAMPLES
     We will begin by building the  standard  image  _c_m_p_l_c  on  a
     sun4:
          % pwd
          /usr/ilog/lelisp/sun4
          % make cmplc
          ; Le-Lisp (by INRIA) version 15.23  (14/Feb/90)  [sun4]
          = (Version:  15.23)
           ...
          May Le-Lisp be with you
          % ls lelisp
          lelisp
          %

     Now we will build an image with 64  bit  allocated  floating
     point numbers using a Sony machine with a MC68881 processor:
          % make lelisp64
          ; Le-Lisp (by INRIA) version 15.23  (14/Feb/90)  [sony]
          = (Version:  15.23)
           ...
          May Le-Lisp be with you
          % ls lelisp64
          lelisp64
          %



     Now let's look at an example using Makefile variables.
     Let's say we have  two  C  files,  _e_x_1._c  and  _e_x_2._c,  in  a



Le-Lisp v15.2     Last change: December 1, 1993                 3






LELISP(L)                LOCAL COMMANDS                 LELISP(L)



     directory,  /usr/home,  that  we want to link with a Le-Lisp
     iamge.  We will name this image _e_x_a_m_p_l_e_l_i_s_p. It will  use  a
     binary  named  _l_e_x_a_m_p_l_e_b_i_n  which  has  the compiled C files
     linked in.  This image is  described  by  the  configuration
     file _e_x_a_m_p_l_e_c_o_n_f._l_l . We will use the standard zone sizes.
          % cd /usr/home
          % cat makefile
          DIR=/usr/home
          LLDIR=/usr/ilog/lelisp
          MACHINE=sun4

          # building the core
          examplelisp: lexamplebin exampleconf.ll
               ( cd $(LLDIR)/$(MACHINE) ; \
               $(MAKE) $(DIR)/examplelisp USERLELISP=$(DIR)/examplelisp \
                    USERLELISPBIN=$(DIR)/lexamplebin \
                    USERCONF=$(DIR)/exampleconf.ll \
               )

          # building the binary
          lexamplebin: ex1.o ex2.o
               (cd $(LLDIR)/$(MACHINE) ; \
               $(MAKE) $(DIR)/lexamplebin USERBIN=$(DIR)/lexamplebin \
                    USERO="$(DIR)/ex1.o $(DIR)/ex2.o" \
               )

          # our C files
          ex1.o: ex1.c
               (cd $(LLDIR)/$(MACHINE) ; \
               $(MAKE) $(DIR)/ex1.o \
               USEROFILE=$(DIR)/ex1.o USERCFILE=$(DIR)/ex1.c \
               USERCFLAGS="-Dex1_path=$(DIR)" \
               )
          ex2.o: ex2.c
               (cd $(LLDIR)/$(MACHINE) ; \
               $(MAKE) $(DIR)/ex1.o \
               USEROFILE=$(DIR)/ex1.o USERCFILE=$(DIR)/ex1.c \
               )


          % cat exampleconf.ll
          ; configuring the system
          (progn
            (load-stm #:system:name ; name of the core
                   t             ; minimal environment
                   ()            ; no editor in this image
                   t             ; standard environment
                   t             ; the loader
                   t             ; the standard compiler
            )
            (add-feature (if (eq 0.0 0.0)
                           '31BITFLOATS



Le-Lisp v15.2     Last change: December 1, 1993                 4






LELISP(L)                LOCAL COMMANDS                 LELISP(L)



                           '64BITFLOATS))
            )

          % make examplelisp
          cc -O -c ex1.c
          cc -O -c ex2.c
          (cd /nfs/current/lelisp/sun4 ; \
          make /usr/home/lexamplebin USERBIN=/usr/home/lexamplebin \
          USERO="/usr/home/ex1.o /usr/home/ex2.o" )

          /bin/cc -O -sun4 -DNBSYST=35 -DBSD4x -DBSD42 -DTIMEUNIT=60. -DINRIA \
          -DSUN4 -DSUNOS40 -Bstatic -DCLOAD -DFOREIGN -DFILEINI=\"../llib/startup.ll\"-I../common -DSYSNAME=\"Le-Lisp\" -o /usr/home/lexamplebin \
          o/llmain.o o/llstdio.o o/llfloat.o o/llnumb.o o/lelisp.o lelisp31bin.o \
          /usr/home/ex1.o /usr/home/ex2.o -z -x -lm -lc

          ( cd /nfs/current/lelisp/sun4 ; \
          make /usr/home/examplelisp USERLELISP=/usr/home/examplelisp \
                  USERLELISPBIN=/usr/home/lexamplebin \
                  USERCONF=/usr/home/exampleconf.ll )

          /usr/home/exampleconf.ll -stack 6 -code 1500 -heap 256  \
          -number 0 -vector 4 -string 5  -symbol 5 -cons 4 -float 0
          ; Le-Lisp (by INRIA) version 15.23  (14/Feb/90)  [sun4]
           ...
          May Le-Lisp be with you
          %



     As a final example, we will make an EXECORE system on an IBM
     RT.
          % make lelisp EXE=exe
                  /bin/cc -O -DNBSYST=26 -DS5 -DTIMEUNIT=60. -DIBMRT   -DNOCLOAD -DFOREIGN  -DFILEINI=\"../llib/startup.ll\" -I../common -DSYSNAME=\"Le-Lisp\" -DSTAMP=\"$$\" -DEXECORE -c ../common/lelisp.c
                  mv lelisp.o o/lelispexe.o
                  /bin/cc -O -DNBSYST=26 -DS5 -DTIMEUNIT=60. -DIBMRT   -DNOCLOAD -DFOREIGN  -DFILEINI=\"../llib/startup.ll\" -I../common -DSYSNAME=\"Le-Lisp\" -c execore.c
                  /bin/cc -O -DNBSYST=26 -DS5 -DTIMEUNIT=60. -DIBMRT   -DNOCLOAD -DFOREIGN  -DFILEINI=\"../llib/startup.ll\" -I../common -DSYSNAME=\"Le-Lisp\" -z -x -o lelisp31exebin \
                  o/llmain.o o/llstdio.o o/llfloat.o o/llnumb.o o/lelispexe.o execore.o  lelisp31bin.o \
                  -lm -lc -lld
                  ln lelisp31exebin lelispexebin
               ./config lelisp lelispexebin lelispconf.ll -stack 6 -code 1500 -heap 256  -number 0 -vector 4 -string 5  -symbol 5 -cons 4 -float 0
          ; Le-Lisp (by INRIA) version 15.23  (14/Feb/90)  [ibmrt]
          = (Version:  15.23)
            ...
          May Le-Lisp be with you
          %




SEE ALSO
     config(l), complice(l), make(1),
     Le-Lisp V15.2, the Reference Manual, Je'ro^me  Chailloux  et



Le-Lisp v15.2     Last change: December 1, 1993                 5






LELISP(L)                LOCAL COMMANDS                 LELISP(L)



     al., INRIA, Rocquencourt, 78153 Le Chesnay Cedex.


FILES
     lelisp
               shell script that starts the Le-Lisp system.
     lelisp/<machine>/llcore/lelisp.core
               memory image associated with the command _l_e_l_i_s_p.
     lelisp/<machine>/lelispbin
               Le-Lisp binary.
     lelisp/<machine>/leX11bin
               Le-Lisp binary that includes the _X_1_1 binaries.
     lelisp/<machine>/Makefile
               Le-Lisp makefile.


     In mode EXECORE:
     lelisp
               an executable memory image.




































Le-Lisp v15.2     Last change: December 1, 1993                 6



