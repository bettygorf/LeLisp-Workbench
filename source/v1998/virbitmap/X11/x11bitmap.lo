(loader '((title |x11bitmap.lo|)))
(defvar #:sys-package:colon '#:display:x11)
(if (not (boundp '#:display:x11:bit-reverse-vector)) (progn (defvar #:display:x11:bit-reverse-vector)))
(loader'((fentry #:display:x11:create-bitmap subr2)
(entry #:display:x11:create-bitmap subr2)
(push a2)
(hpxmov a1 '21 a4)
(hpxmov a1 '9 a3)
(push nil)
(push a3)
(push a4)
(push a2)
(jcall #:x11:bitmap:make)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 3) '2 a4)
(push a4)
(hpxmov (& 4) '0 a2)
(hpxmov (& 4) '1 a3)
(mov (& 1) a1)
(jcall x11_create_bitmap)
(pop a4)
(hpmovx a1 a4 '1)
(btnil (& 1) 102)
(mov (& 0) a1)
(jcall x11_default_gc)
(mov a1 (& 2))
(hpxmov (& 1) '5 a3)
(hpxmov a3 '6 a3)
(mov a1 a2)
(mov (& 0) a1)
(jcall x11_set_background)
(hpxmov (& 1) '4 a3)
(hpxmov a3 '6 a3)
(mov (& 2) a2)
(mov (& 0) a1)
(jcall x11_set_foreground)
102
(adjstk '3)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:kill-bitmap subr2)
(entry #:display:x11:kill-bitmap subr2)
(push a2)
(hpxmov a2 '2 a4)
(hpxmov a4 '0 a4)
(bfnil a4 102)
(hpxmov a2 '2 a4)
(hpxmov a4 '1 a4)
(btnil a4 102)
(hpxmov a1 '21 a1)
(hpxmov a2 '2 a2)
(hpxmov a2 '1 a2)
(jcall x11_kill_bitmap)
102
(hpxmov (& 0) '2 a4)
(hpmovx nil a4 '0)
(hpxmov (& 0) '2 a4)
(hpmovx nil a4 '1)
(mov nil a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:get-bit-line nsubr)
(entry #:display:x11:get-bit-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:x11:get-bit-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(push '0)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 0) a2)
(plus a3 a2)
(mov a2 (& 0))
(hpxmov a4 '8 a3)
(hpxmov a3 '6 a3)
(mov (& 2) a1)
(plus a3 a1)
(mov a1 (& 2))
103
(push (@ 104))
(hpxmov (& 5) '21 a3)
(push a3)
(hpxmov (& 5) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 3))
(push (& 6))
(push (& 6))
(hpxmov (& 9) '0 a3)
(push a3)
(mov '6 a4)
(jmp x11_get_bit_line)
104
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:x11:set-bit-line nsubr)
(entry #:display:x11:set-bit-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:x11:set-bit-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(hpxmov (& 3) '21 a3)
(push '0)
(push nil)
(push a3)
(btnil a4 103)
(hpxmov a4 '15 a2)
(cabne a2 'transparent 103)
(hpxmov a4 '8 a2)
(hpxmov a2 '5 a2)
(mov (& 2) a1)
(plus a2 a1)
(mov a1 (& 2))
(hpxmov a4 '8 a2)
(hpxmov a2 '6 a2)
(mov (& 4) a4)
(plus a2 a4)
(mov a4 (& 4))
103
(mov a3 a1)
(jcall x11_default_gc)
(mov a1 (& 1))
(push (@ 104))
(push (& 1))
(hpxmov (& 7) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(push (& 5))
(push (& 8))
(push (& 8))
(hpxmov (& 11) '0 a4)
(push a4)
(push a1)
(mov '7 a4)
(jmp x11_set_bit_line)
104
(eval ())
(adjstk '7)
(return)
))
(loader'((fentry #:display:x11:bmref nsubr)
(entry #:display:x11:bmref nsubr)
(cnbeq a4 '4 101)
(mov '#:display:x11:bmref a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 1) a2)
(plus a3 a2)
(mov a2 (& 1))
(hpxmov a4 '8 a3)
(hpxmov a3 '6 a3)
(mov (& 0) a1)
(plus a3 a1)
(mov a1 (& 0))
103
(push (@ 104))
(hpxmov (& 4) '21 a3)
(push a3)
(hpxmov (& 4) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp x11_bmref)
104
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:x11:bmset nsubr)
(entry #:display:x11:bmset nsubr)
(cnbeq a4 '5 101)
(mov '#:display:x11:bmset a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) '2 a4)
(hpxmov a4 '0 a4)
(hpxmov (& 4) '9 a3)
(push nil)
(btnil a4 103)
(hpxmov a4 '15 a2)
(cabne a2 'transparent 103)
(hpxmov a4 '8 a2)
(hpxmov a2 '5 a2)
(mov (& 3) a1)
(plus a2 a1)
(mov a1 (& 3))
(hpxmov a4 '8 a2)
(hpxmov a2 '6 a2)
(mov (& 2) a4)
(plus a2 a4)
(mov a4 (& 2))
103
(btnil a3 104)
(hpxmov a3 '12 a4)
(btnil a4 104)
(hpxmov a3 '12 a4)
(hpxmov a4 '1 a4)
(bra 105)
104
(hpxmov (& 5) '21 a1)
(jcall x11_default_gc)
(mov a1 a4)
105
(mov a4 (& 0))
(push (@ 106))
(hpxmov (& 6) '21 a3)
(push a3)
(hpxmov (& 6) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 6))
(push (& 6))
(push (& 6))
(push a4)
(mov '6 a4)
(jmp x11_bmset)
106
(eval ())
(mov (& 1) a1)
(adjstk '6)
(return)
))
(loader'((fentry #:display:x11:get-byte-line nsubr)
(entry #:display:x11:get-byte-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:x11:get-byte-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(push '0)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 0) a2)
(plus a3 a2)
(mov a2 (& 0))
(hpxmov a4 '8 a3)
(hpxmov a3 '6 a3)
(mov (& 2) a1)
(plus a3 a1)
(mov a1 (& 2))
103
(push (@ 104))
(hpxmov (& 5) '21 a3)
(push a3)
(hpxmov (& 5) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 3))
(push (& 6))
(push (& 6))
(hpxmov (& 9) '0 a3)
(push a3)
(mov '6 a4)
(jmp x11_get_byte_line)
104
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:x11:set-byte-line nsubr)
(entry #:display:x11:set-byte-line nsubr)
(cnbeq a4 '4 101)
(mov '#:display:x11:set-byte-line a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(push '0)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 0) a2)
(plus a3 a2)
(mov a2 (& 0))
(hpxmov a4 '8 a3)
(hpxmov a3 '6 a3)
(mov (& 2) a1)
(plus a3 a1)
(mov a1 (& 2))
103
(push (@ 104))
(hpxmov (& 5) '21 a3)
(push a3)
(hpxmov (& 5) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 3))
(push (& 6))
(push (& 6))
(hpxmov (& 9) '0 a3)
(push a3)
(mov '6 a4)
(jmp x11_set_byte_line)
104
(eval ())
(adjstk '5)
(return)
))
(loader'((fentry #:display:x11:byteref nsubr)
(entry #:display:x11:byteref nsubr)
(cnbeq a4 '4 101)
(mov '#:display:x11:byteref a1)
(mov '4 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 2) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 1) a2)
(plus a3 a2)
(mov a2 (& 1))
(hpxmov a4 '8 a3)
(hpxmov a3 '6 a3)
(mov (& 0) a1)
(plus a3 a1)
(mov a1 (& 0))
103
(push (@ 104))
(hpxmov (& 4) '21 a3)
(push a3)
(hpxmov (& 4) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 4))
(push (& 4))
(mov '4 a4)
(jmp x11_byteref)
104
(eval ())
(adjstk '4)
(return)
))
(loader'((fentry #:display:x11:byteset nsubr)
(entry #:display:x11:byteset nsubr)
(cnbeq a4 '5 101)
(mov '#:display:x11:byteset a1)
(mov '5 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 3) '2 a4)
(hpxmov a4 '0 a4)
(btnil a4 103)
(hpxmov a4 '15 a3)
(cabne a3 'transparent 103)
(hpxmov a4 '8 a3)
(hpxmov a3 '5 a3)
(mov (& 2) a2)
(plus a3 a2)
(mov a2 (& 2))
(hpxmov a4 '8 a3)
(hpxmov a3 '6 a3)
(mov (& 1) a1)
(plus a3 a1)
(mov a1 (& 1))
103
(push (@ 104))
(hpxmov (& 5) '21 a3)
(push a3)
(hpxmov (& 5) '2 a3)
(hpxmov a3 '1 a3)
(push a3)
(push (& 5))
(push (& 5))
(push (& 5))
(mov '5 a4)
(jmp x11_byteset)
104
(eval ())
(mov (& 0) a1)
(adjstk '5)
(return)
))
(loader'((entry #:display:x11:reverse-bit-vector subr1)
(push a1)
(hgsize a1 a4)
(diff '1 a4)
(push '0)
(push a4)
(mov a4 a1)
(jcall numberp)
(bfnil a1 103)
(mov (& 0) a3)
(mov 'errnna a2)
(mov 'for a1)
(jcall error)
103
(push (@ 105))
(push (& 2))
(push (& 2))
(mov '2 a4)
(jmp >)
105
(eval ())
(bfnil a1 104)
(hbxmov (& 2) (& 1) a1)
(call #:display:x11:bit-reverse)
(hbmovx a1 (& 2) (& 1))
(push (@ 106))
(push (& 2))
(push '1)
(mov '2 a4)
(jmp |+|)
106
(eval ())
(mov a1 (& 1))
(bra 103)
104
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:display:x11:bit-reverse subr1)
(push a1)
(land '15 a1)
(hpxmov (cvalq #:display:x11:bit-reverse-vector) a1 a1)
(lshift '4 a1)
(mov (& 0) a4)
(lshift '-4 a4)
(hpxmov (cvalq #:display:x11:bit-reverse-vector) a4 a4)
(lor a4 a1)
(adjstk '1)
(return)
))
(loader'((fentry #:display:x11:bitblit nsubr)
(entry #:display:x11:bitblit nsubr)
(cnbeq a4 '9 101)
(mov '#:display:x11:bitblit a1)
(mov '9 a2)
(jmp #:llcp:errwna)
101
(hpxmov (& 7) '2 a4)
(hpxmov a4 '0 a4)
(hpxmov (& 6) '2 a3)
(hpxmov a3 '0 a3)
(push a4)
(cnbge (& 6) '0 103)
(mov (& 4) a2)
(diff (& 6) a2)
(mov a2 (& 4))
(mov (& 2) a2)
(plus (& 6) a2)
(mov a2 (& 2))
(mov '0 (& 6))
103
(cnbge (& 5) '0 105)
(mov (& 3) a2)
(diff (& 5) a2)
(mov a2 (& 3))
(mov (& 1) a2)
(plus (& 5) a2)
(mov a2 (& 1))
(mov '0 (& 5))
105
(cnbge (& 4) '0 107)
(mov (& 6) a2)
(diff (& 4) a2)
(mov a2 (& 6))
(mov (& 2) a2)
(plus (& 4) a2)
(mov a2 (& 2))
(mov '0 (& 4))
107
(cnbge (& 3) '0 109)
(mov (& 5) a2)
(diff (& 3) a2)
(mov a2 (& 5))
(mov (& 1) a2)
(plus (& 3) a2)
(mov a2 (& 1))
(mov '0 (& 3))
109
(mov (& 4) a2)
(plus (& 2) a2)
(hpxmov (& 7) '0 a1)
(cnble a2 a1 111)
(hpxmov (& 7) '0 a2)
(diff (& 4) a2)
(mov a2 (& 2))
111
(mov (& 3) a2)
(plus (& 1) a2)
(hpxmov (& 7) '1 a1)
(cnble a2 a1 113)
(hpxmov (& 7) '1 a2)
(diff (& 3) a2)
(mov a2 (& 1))
113
(btnil a4 115)
(hpxmov a4 '15 a2)
(cabne a2 'transparent 115)
(hpxmov a4 '8 a2)
(hpxmov a2 '5 a2)
(mov (& 6) a1)
(plus a2 a1)
(mov a1 (& 6))
(hpxmov a4 '8 a2)
(hpxmov a2 '6 a2)
(mov (& 5) a4)
(plus a2 a4)
(mov a4 (& 5))
115
(btnil a3 117)
(hpxmov a3 '15 a4)
(cabne a4 'transparent 117)
(hpxmov a3 '8 a4)
(hpxmov a4 '5 a4)
(mov (& 4) a2)
(plus a4 a2)
(mov a2 (& 4))
(hpxmov a3 '8 a4)
(hpxmov a4 '6 a4)
(mov (& 3) a1)
(plus a4 a1)
(mov a1 (& 3))
117
(cnble (& 2) '0 118)
(cnble (& 1) '0 118)
(push (@ 120))
(hpxmov (& 10) '21 a4)
(push a4)
(hpxmov (& 10) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(hpxmov (& 10) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(btnil (& 10) 121)
(hpxmov (& 10) '8 a4)
(hpxmov a4 '1 a4)
(bra 122)
121
(hpxmov (& 19) '11 a4)
(hpxmov a4 '12 a4)
(hpxmov a4 '1 a4)
122
(push a4)
(mov '10 a4)
(jmp x11_bitblit)
120
(eval ())
(adjstk '10)
(return)
118
(mov nil a1)
(adjstk '10)
(return)
))
(loader'((fentry #:display:x11:create-window-bitmap subr3)
(entry #:display:x11:create-window-bitmap subr3)
(push a3)
(push a2)
(push a3)
(jcall #:x11:bitmap:make)
(pop a4)
(hpmovx a1 a4 '2)
(hpxmov (& 1) '2 a4)
(hpmovx (& 0) a4 '0)
(hpxmov (& 1) '2 a4)
(hpxmov (& 0) '15 a3)
(cabne a3 'transparent 101)
(hpxmov (& 0) '8 a3)
(hpxmov a3 '7 a3)
(bra 102)
101
(mov (& 0) a3)
102
(hpxmov a3 '8 a3)
(hpxmov a3 '0 a3)
(hpmovx a3 a4 '1)
(mov (& 1) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:display:x11:subst-colors subr3)
(entry #:display:x11:subst-colors subr3)
(push a3)
(push a2)
(push a1)
(mov a3 a1)
(jcall length)
(push a1)
(mov nil a2)
(jcall makevector)
(push a1)
(mov nil a2)
(mov (& 1) a1)
(jcall makevector)
(push a1)
(push '0)
(push (& 6))
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(mov (& 0) a4)
(mov (car a4) (& 0))
(mov (cdr a4) a4)
(hpmovx (& 0) (& 4) (& 2))
(hpmovx a4 (& 3) (& 2))
(mov (& 2) a3)
(plus '1 a3)
(mov a3 (& 2))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(push (@ 103))
(hpxmov (& 5) '21 a4)
(push a4)
(hpxmov (& 7) '2 a4)
(hpxmov a4 '1 a4)
(push a4)
(push (& 5))
(push (& 5))
(push (& 8))
(hpxmov (& 11) '0 a4)
(push a4)
(hpxmov (& 12) '1 a4)
(push a4)
(mov '7 a4)
(jmp x11_subst_colors)
103
(eval ())
(adjstk '7)
(return)
))
(loader'((fentry #:display:x11:create-stipple subr3)
(entry #:display:x11:create-stipple subr3)
(push a3)
(push a2)
(push a1)
(mov a3 a1)
(call #:display:x11:reverse-bit-vector)
(jcall #:x11:bitmap:make)
(hpmovx a1 (& 1) '2)
(hpxmov (& 1) '2 a4)
(push a4)
(push (@ 101))
(hpxmov (& 2) '21 a3)
(push a3)
(hpxmov (& 4) '0 a3)
(push a3)
(hpxmov (& 5) '1 a3)
(push a3)
(push (& 7))
(mov '4 a4)
(jmp x11_create_stipple)
101
(eval ())
(pop a4)
(hpmovx a1 a4 '1)
(mov (& 2) a1)
(adjstk '3)
(bra #:display:x11:reverse-bit-vector)
))
(loader'((fentry #:display:x11:kill-stipple subr2)
(entry #:display:x11:kill-stipple subr2)
(hpxmov a1 '21 a1)
(hpxmov a2 '2 a2)
(hpxmov a2 '1 a2)
(jmp x11_kill_bitmap)
))
(loader '((end)))
